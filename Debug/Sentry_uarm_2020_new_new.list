
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a268  0800a268  0001a268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a520  0800a520  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a520  0800a520  0001a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a528  0800a528  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a528  0800a528  0001a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a52c  0800a52c  0001a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004414  20000078  0800a5a8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000448c  0800a5a8  0002448c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002087c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004585  00000000  00000000  00040924  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d8  00000000  00000000  00044eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  00046488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028046  00000000  00000000  00047858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014691  00000000  00000000  0006f89e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e367e  00000000  00000000  00083f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001675ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b4  00000000  00000000  00167628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a24c 	.word	0x0800a24c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800a24c 	.word	0x0800a24c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(300);
 8000f00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f04:	f001 f9d4 	bl	80022b0 <buzzer_play_mario>


  int32_t direction = CLOCKWISE; // direction of motor
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
  double vel = 1250; //Velocity of motor
 8000f0c:	a40b      	add	r4, pc, #44	; (adr r4, 8000f3c <Chassis_Task_Func+0x44>)
 8000f0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f12:	e9c7 3404 	strd	r3, r4, [r7, #16]
  uint32_t cycles_s=1; //Time period is 1 seconds per cycle, 5=5 cycles=5s, the timer is controlled by TIM13
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
  first_loop=1;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <Chassis_Task_Func+0x40>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
  for(;;)
  {

	 // Forever loop
	  motor_move_period(cycles_s, vel, direction);
 8000f20:	69f9      	ldr	r1, [r7, #28]
 8000f22:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f80c 	bl	8000f44 <motor_move_period>
	  first_loop=0;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <Chassis_Task_Func+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	  motor_move_period(cycles_s, vel, direction);
 8000f32:	e7f5      	b.n	8000f20 <Chassis_Task_Func+0x28>
 8000f34:	f3af 8000 	nop.w
 8000f38:	20004198 	.word	0x20004198
 8000f3c:	00000000 	.word	0x00000000
 8000f40:	40938800 	.word	0x40938800

08000f44 <motor_move_period>:
 * 		initial_direction: initial direction for motors
 *
 * @ Return: Null
 * @ Author: Haoran, Adan
 */
void motor_move_period(uint32_t cycles, double vel, int32_t initial_direction){
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	ed87 0b00 	vstr	d0, [r7]
 8000f50:	60b9      	str	r1, [r7, #8]
	int32_t direction;
	//buzzer_play_c1(100);

	//If first loop
	if (first_loop){
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <motor_move_period+0xc4>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <motor_move_period+0x1a>
		direction = initial_direction;
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	617b      	str	r3, [r7, #20]
	else{

	}
	//TIMEBASE = (APBxTIMCLK / (Prescaler + 1)) / (Period + 1) (Hertz)
	//currently set 1 Hz, if want 0.1s, set Prescaler of TIM13 to 839 (10 Hz)
	if(direction == CLOCKWISE){
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d115      	bne.n	8000f90 <motor_move_period+0x4c>
		//buzzer_play_c1(100);
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6a:	4828      	ldr	r0, [pc, #160]	; (800100c <motor_move_period+0xc8>)
 8000f6c:	f003 fd52 	bl	8004a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	4825      	ldr	r0, [pc, #148]	; (800100c <motor_move_period+0xc8>)
 8000f76:	f003 fd4d 	bl	8004a14 <HAL_GPIO_WritePin>
		// Clockwise Direction
		// give time counter here
		if (period_counter >= cycles) {
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <motor_move_period+0xcc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d805      	bhi.n	8000f90 <motor_move_period+0x4c>
			period_counter = 0;
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <motor_move_period+0xcc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
			direction = COUNTER_CLOCKWISE;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	617b      	str	r3, [r7, #20]
		}
	}
	if(direction == COUNTER_CLOCKWISE){
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f96:	d114      	bne.n	8000fc2 <motor_move_period+0x7e>
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9e:	481b      	ldr	r0, [pc, #108]	; (800100c <motor_move_period+0xc8>)
 8000fa0:	f003 fd38 	bl	8004a14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <motor_move_period+0xc8>)
 8000faa:	f003 fd33 	bl	8004a14 <HAL_GPIO_WritePin>
		// Counter Clockwise Direction
		if (period_counter >= cycles){
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <motor_move_period+0xcc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d804      	bhi.n	8000fc2 <motor_move_period+0x7e>
			period_counter = 0;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <motor_move_period+0xcc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
			direction = CLOCKWISE;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
		}
	}
	//Calculate velocity via direction * speed
	vel = direction*vel;
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff fab6 	bl	8000534 <__aeabi_i2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fd0:	f7ff fb1a 	bl	8000608 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	e9c7 2300 	strd	r2, r3, [r7]

	//Send velocity to motor
	//and function should be written to control the RPM rather than just setting raw value
	Motor_set_raw_value(&motor_data[0], vel);
 8000fdc:	ed97 0b00 	vldr	d0, [r7]
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <motor_move_period+0xd0>)
 8000fe2:	f001 f8a3 	bl	800212c <Motor_set_raw_value>
	Motor_set_raw_value(&motor_data[1], -vel);
 8000fe6:	683c      	ldr	r4, [r7, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000fee:	ec45 4b10 	vmov	d0, r4, r5
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <motor_move_period+0xd4>)
 8000ff4:	f001 f89a 	bl	800212c <Motor_set_raw_value>
	osDelay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f005 ff1c 	bl	8006e36 <osDelay>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	20004198 	.word	0x20004198
 800100c:	40021800 	.word	0x40021800
 8001010:	200002f4 	.word	0x200002f4
 8001014:	20004090 	.word	0x20004090
 8001018:	200040ac 	.word	0x200040ac
 800101c:	00000000 	.word	0x00000000

08001020 <Gimbal_Task_Function>:
double abs_pitch_offset=0.0;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	ed2d 8b02 	vpush	{d8}
 8001026:	b099      	sub	sp, #100	; 0x64
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Gimbal_Task_Function */
  double vmax=30000;
 800102c:	a4d7      	add	r4, pc, #860	; (adr r4, 800138c <Gimbal_Task_Function+0x36c>)
 800102e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001032:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
  double max_angle=4096;
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	4cc9      	ldr	r4, [pc, #804]	; (8001360 <Gimbal_Task_Function+0x340>)
 800103c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  int16_t init_complete=-3000; //For the first init_complete*osDelay [ms], initialize gimbal state
 8001040:	f24f 4348 	movw	r3, #62536	; 0xf448
 8001044:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t pitch_change_counter=0;
 8001046:	2300      	movs	r3, #0
 8001048:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  uint16_t yaw_change_counter=0;
 800104c:	2300      	movs	r3, #0
 800104e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  int16_t control_counter=-1;
 8001052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001056:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

  //Front and back directions
  int16_t patrol_dir=1;
 800105a:	2301      	movs	r3, #1
 800105c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  int16_t sweep_dir=1;
 8001060:	2301      	movs	r3, #1
 8001062:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  int16_t pitch_state;

  //Init comm pack
  comm_pack.yaw_data = 0;
 8001066:	4bbf      	ldr	r3, [pc, #764]	; (8001364 <Gimbal_Task_Function+0x344>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
  comm_pack.pitch_data = 0;
 800106c:	4bbd      	ldr	r3, [pc, #756]	; (8001364 <Gimbal_Task_Function+0x344>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  comm_pack.dist_data = 0;
 8001072:	4bbc      	ldr	r3, [pc, #752]	; (8001364 <Gimbal_Task_Function+0x344>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  comm_pack.fire_cmd = 0;
 8001078:	4bba      	ldr	r3, [pc, #744]	; (8001364 <Gimbal_Task_Function+0x344>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  comm_pack.target_num = 0;
 800107e:	4bb9      	ldr	r3, [pc, #740]	; (8001364 <Gimbal_Task_Function+0x344>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  Motor temp_motor_buffer;

  //Init angle calculations
  const int16_t MAX_YAW=(INIT_YAW+YAW_MAX_HALF_DELTA+360) % 360; //Wrap all angles between 0 and 360
 8001084:	235f      	movs	r3, #95	; 0x5f
 8001086:	86bb      	strh	r3, [r7, #52]	; 0x34
  const int16_t MIN_YAW=(INIT_YAW-YAW_MAX_HALF_DELTA+360) % 360; //Wrap all angles between 0 and 360
 8001088:	f240 134f 	movw	r3, #335	; 0x14f
 800108c:	867b      	strh	r3, [r7, #50]	; 0x32
  //const int16_t YAW_OVER_ZERO=check_angle_over_zero(MIN_YAW, MAX_YAW);

  const int16_t MAX_PITCH_FRONT=(FRONT_ANGLE+PITCH_MAX_HALF_DELTA+360) % 360; //Wrap all angles between 0 and 360
 800108e:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001092:	863b      	strh	r3, [r7, #48]	; 0x30
  const int16_t MIN_PITCH_FRONT=(FRONT_ANGLE-PITCH_MAX_HALF_DELTA+360) % 360; //Wrap all angles between 0 and 360
 8001094:	23dc      	movs	r3, #220	; 0xdc
 8001096:	85fb      	strh	r3, [r7, #46]	; 0x2e
  //const int16_t PITCH_FRONT_OVER_ZERO=check_angle_over_zero(MIN_YAW, MAX_YAW);

  const int16_t MAX_PITCH_BACK=(BACK_ANGLE+PITCH_MAX_HALF_DELTA+360) % 360; //Wrap all angles between 0 and 360
 8001098:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800109c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  const int16_t MIN_PITCH_BACK=(BACK_ANGLE-PITCH_MAX_HALF_DELTA+360) % 360; //Wrap all angles between 0 and 360
 800109e:	23dc      	movs	r3, #220	; 0xdc
 80010a0:	857b      	strh	r3, [r7, #42]	; 0x2a
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010a2:	2102      	movs	r1, #2
 80010a4:	48b0      	ldr	r0, [pc, #704]	; (8001368 <Gimbal_Task_Function+0x348>)
 80010a6:	f002 ffb8 	bl	800401a <HAL_CAN_ActivateNotification>

	//HAL_UART_Receive_IT(&husart6, pdata, (PACKLEN+1));
	printf("Gimbal App is on! \r\n");
 80010aa:	48b0      	ldr	r0, [pc, #704]	; (800136c <Gimbal_Task_Function+0x34c>)
 80010ac:	f007 f91e 	bl	80082ec <puts>
	velocity=3000;
 80010b0:	4baf      	ldr	r3, [pc, #700]	; (8001370 <Gimbal_Task_Function+0x350>)
 80010b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010b6:	801a      	strh	r2, [r3, #0]
	abs_pitch=0;
 80010b8:	4aae      	ldr	r2, [pc, #696]	; (8001374 <Gimbal_Task_Function+0x354>)
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	f04f 0400 	mov.w	r4, #0
 80010c2:	e9c2 3400 	strd	r3, r4, [r2]
	abs_yaw=0;
 80010c6:	4aac      	ldr	r2, [pc, #688]	; (8001378 <Gimbal_Task_Function+0x358>)
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	f04f 0400 	mov.w	r4, #0
 80010d0:	e9c2 3400 	strd	r3, r4, [r2]
/*
	uint16_t counter=0;*/

	//End of variables that doesn't work

  for (int i=0;i<3000;++i){
 80010d4:	2300      	movs	r3, #0
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010d8:	e038      	b.n	800114c <Gimbal_Task_Function+0x12c>
	        pitch_state=PITCH_FRONT;
 80010da:	2301      	movs	r3, #1
 80010dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			Motor_pid_set_angle(&motor_data[4], INIT_YAW, vmax/max_angle,0,0);
 80010e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80010e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80010e8:	f7ff fbb8 	bl	800085c <__aeabi_ddiv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	4618      	mov	r0, r3
 80010f2:	4621      	mov	r1, r4
 80010f4:	f7ff fd38 	bl	8000b68 <__aeabi_d2iz>
 80010f8:	4601      	mov	r1, r0
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	ed9f 0b94 	vldr	d0, [pc, #592]	; 8001350 <Gimbal_Task_Function+0x330>
 8001102:	489e      	ldr	r0, [pc, #632]	; (800137c <Gimbal_Task_Function+0x35c>)
 8001104:	f000 ff10 	bl	8001f28 <Motor_pid_set_angle>
			Motor_pid_set_angle(&motor_data[5], FRONT_ANGLE, 2*vmax/max_angle,0,0); //Using 2*P for pitch
 8001108:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	f7ff f8c4 	bl	800029c <__adddf3>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	4618      	mov	r0, r3
 800111a:	4621      	mov	r1, r4
 800111c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001120:	f7ff fb9c 	bl	800085c <__aeabi_ddiv>
 8001124:	4603      	mov	r3, r0
 8001126:	460c      	mov	r4, r1
 8001128:	4618      	mov	r0, r3
 800112a:	4621      	mov	r1, r4
 800112c:	f7ff fd1c 	bl	8000b68 <__aeabi_d2iz>
 8001130:	4601      	mov	r1, r0
 8001132:	2300      	movs	r3, #0
 8001134:	2200      	movs	r2, #0
 8001136:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8001358 <Gimbal_Task_Function+0x338>
 800113a:	4891      	ldr	r0, [pc, #580]	; (8001380 <Gimbal_Task_Function+0x360>)
 800113c:	f000 fef4 	bl	8001f28 <Motor_pid_set_angle>
			osDelay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f005 fe78 	bl	8006e36 <osDelay>
  for (int i=0;i<3000;++i){
 8001146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001148:	3301      	adds	r3, #1
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800114c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001152:	4293      	cmp	r3, r2
 8001154:	ddc1      	ble.n	80010da <Gimbal_Task_Function+0xba>
  }

  for(;;)
  {
	  //Initialize the runtime angle maximums
	  runtime_yaw_max=MAX_YAW;
 8001156:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001158:	853b      	strh	r3, [r7, #40]	; 0x28
	  runtime_yaw_min=MIN_YAW;
 800115a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800115c:	84fb      	strh	r3, [r7, #38]	; 0x26
	  if (pitch_state==PITCH_FRONT){
 800115e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001162:	2b01      	cmp	r3, #1
 8001164:	d106      	bne.n	8001174 <Gimbal_Task_Function+0x154>
		  runtime_pitch_max=MAX_PITCH_FRONT;
 8001166:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001168:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		  runtime_pitch_min=MIN_PITCH_FRONT;
 800116c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800116e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001172:	e005      	b.n	8001180 <Gimbal_Task_Function+0x160>
	  }
	  else{
		  runtime_pitch_max=MAX_PITCH_BACK;
 8001174:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001176:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		  runtime_pitch_min=MIN_PITCH_BACK;
 800117a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800117c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  	   * 		since we do not know the freq of pack coming, doing this ensures every pack can be set to motor,
	  	   * 		rather than directly entering next uart interrupt.
	  	   *
	  	   * 		SweepAndPatrol may be put in for loop here, as the target num varible will be the quit signal of sweep mode.
	  	   */
	  	  if(comm_pack.target_num == 0){
 8001180:	4b78      	ldr	r3, [pc, #480]	; (8001364 <Gimbal_Task_Function+0x344>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f040 812a 	bne.w	80013de <Gimbal_Task_Function+0x3be>
	  		  if (control_counter>0){ //For 1s after receiving message, continue to set angle
 800118a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800118e:	2b00      	cmp	r3, #0
 8001190:	dd41      	ble.n	8001216 <Gimbal_Task_Function+0x1f6>
				  Motor_pid_set_angle(&motor_data[4], abs_yaw, vmax/max_angle,0,0);
 8001192:	4b79      	ldr	r3, [pc, #484]	; (8001378 <Gimbal_Task_Function+0x358>)
 8001194:	ed93 8b00 	vldr	d8, [r3]
 8001198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800119c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011a0:	f7ff fb5c 	bl	800085c <__aeabi_ddiv>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	4618      	mov	r0, r3
 80011aa:	4621      	mov	r1, r4
 80011ac:	f7ff fcdc 	bl	8000b68 <__aeabi_d2iz>
 80011b0:	4601      	mov	r1, r0
 80011b2:	2300      	movs	r3, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	eeb0 0a48 	vmov.f32	s0, s16
 80011ba:	eef0 0a68 	vmov.f32	s1, s17
 80011be:	486f      	ldr	r0, [pc, #444]	; (800137c <Gimbal_Task_Function+0x35c>)
 80011c0:	f000 feb2 	bl	8001f28 <Motor_pid_set_angle>
				  Motor_pid_set_angle(&motor_data[5], (abs_pitch), 2*vmax/max_angle,0,0);
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <Gimbal_Task_Function+0x354>)
 80011c6:	ed93 8b00 	vldr	d8, [r3]
 80011ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	f7ff f863 	bl	800029c <__adddf3>
 80011d6:	4603      	mov	r3, r0
 80011d8:	460c      	mov	r4, r1
 80011da:	4618      	mov	r0, r3
 80011dc:	4621      	mov	r1, r4
 80011de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	460c      	mov	r4, r1
 80011ea:	4618      	mov	r0, r3
 80011ec:	4621      	mov	r1, r4
 80011ee:	f7ff fcbb 	bl	8000b68 <__aeabi_d2iz>
 80011f2:	4601      	mov	r1, r0
 80011f4:	2300      	movs	r3, #0
 80011f6:	2200      	movs	r2, #0
 80011f8:	eeb0 0a48 	vmov.f32	s0, s16
 80011fc:	eef0 0a68 	vmov.f32	s1, s17
 8001200:	485f      	ldr	r0, [pc, #380]	; (8001380 <Gimbal_Task_Function+0x360>)
 8001202:	f000 fe91 	bl	8001f28 <Motor_pid_set_angle>
	  			  control_counter--;
 8001206:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 800120a:	b29b      	uxth	r3, r3
 800120c:	3b01      	subs	r3, #1
 800120e:	b29b      	uxth	r3, r3
 8001210:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8001214:	e22b      	b.n	800166e <Gimbal_Task_Function+0x64e>
	  		  }
	  		  else{
	  			  //If no new message for 1s, return to patrol mode

	  			  pitch_change_counter++;
 8001216:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800121a:	3301      	adds	r3, #1
 800121c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  			  yaw_change_counter++;
 8001220:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001224:	3301      	adds	r3, #1
 8001226:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  			  if (pitch_change_counter>MAX_PITCH_CHANGE_TIME*1000){
 800122a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d908      	bls.n	8001248 <Gimbal_Task_Function+0x228>
	  				  patrol_dir=patrol_dir*-1;
 8001236:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800123a:	425b      	negs	r3, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	  				  pitch_change_counter=0;
 8001242:	2300      	movs	r3, #0
 8001244:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  			  }

	  			  if(yaw_change_counter>MAX_YAW_CHANGE_TIME*1000){
 8001248:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800124c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001250:	4293      	cmp	r3, r2
 8001252:	d908      	bls.n	8001266 <Gimbal_Task_Function+0x246>
	  				  sweep_dir=sweep_dir*-1;
 8001254:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001258:	425b      	negs	r3, r3
 800125a:	b29b      	uxth	r3, r3
 800125c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  				  yaw_change_counter=0;
 8001260:	2300      	movs	r3, #0
 8001262:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  			  }

	  			  if (patrol_dir==-1){
 8001266:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800126a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126e:	d122      	bne.n	80012b6 <Gimbal_Task_Function+0x296>
	  				  pitch_state=PITCH_BACK;
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  				  Motor_pid_set_angle(&motor_data[5],BACK_ANGLE,1*vmax/max_angle,0,0); //Use 1*vmax/max_angle if you want max stiffness, can probably go above???havn't tested.
 8001278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800127c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001280:	f7ff faec 	bl	800085c <__aeabi_ddiv>
 8001284:	4603      	mov	r3, r0
 8001286:	460c      	mov	r4, r1
 8001288:	4618      	mov	r0, r3
 800128a:	4621      	mov	r1, r4
 800128c:	f7ff fc6c 	bl	8000b68 <__aeabi_d2iz>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	2200      	movs	r2, #0
 8001296:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8001358 <Gimbal_Task_Function+0x338>
 800129a:	4839      	ldr	r0, [pc, #228]	; (8001380 <Gimbal_Task_Function+0x360>)
 800129c:	f000 fe44 	bl	8001f28 <Motor_pid_set_angle>
	  				  HAL_GPIO_WritePin(GPIOG, LD_C_Pin, RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	4837      	ldr	r0, [pc, #220]	; (8001384 <Gimbal_Task_Function+0x364>)
 80012a6:	f003 fbb5 	bl	8004a14 <HAL_GPIO_WritePin>
	  				  HAL_GPIO_WritePin(GPIOG, LD_D_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2120      	movs	r1, #32
 80012ae:	4835      	ldr	r0, [pc, #212]	; (8001384 <Gimbal_Task_Function+0x364>)
 80012b0:	f003 fbb0 	bl	8004a14 <HAL_GPIO_WritePin>
 80012b4:	e020      	b.n	80012f8 <Gimbal_Task_Function+0x2d8>
	  			  }
	  			  else{
	  				  pitch_state=PITCH_FRONT;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  				  Motor_pid_set_angle(&motor_data[5],FRONT_ANGLE,1*vmax/max_angle,0,0);
 80012bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012c4:	f7ff faca 	bl	800085c <__aeabi_ddiv>
 80012c8:	4603      	mov	r3, r0
 80012ca:	460c      	mov	r4, r1
 80012cc:	4618      	mov	r0, r3
 80012ce:	4621      	mov	r1, r4
 80012d0:	f7ff fc4a 	bl	8000b68 <__aeabi_d2iz>
 80012d4:	4601      	mov	r1, r0
 80012d6:	2300      	movs	r3, #0
 80012d8:	2200      	movs	r2, #0
 80012da:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001358 <Gimbal_Task_Function+0x338>
 80012de:	4828      	ldr	r0, [pc, #160]	; (8001380 <Gimbal_Task_Function+0x360>)
 80012e0:	f000 fe22 	bl	8001f28 <Motor_pid_set_angle>
	  				  HAL_GPIO_WritePin(GPIOG, LD_D_Pin, RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2120      	movs	r1, #32
 80012e8:	4826      	ldr	r0, [pc, #152]	; (8001384 <Gimbal_Task_Function+0x364>)
 80012ea:	f003 fb93 	bl	8004a14 <HAL_GPIO_WritePin>
	  				  HAL_GPIO_WritePin(GPIOG, LD_C_Pin, SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	4824      	ldr	r0, [pc, #144]	; (8001384 <Gimbal_Task_Function+0x364>)
 80012f4:	f003 fb8e 	bl	8004a14 <HAL_GPIO_WritePin>
	  			  }

	  			  if(sweep_dir==-1){
 80012f8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d148      	bne.n	8001394 <Gimbal_Task_Function+0x374>
	  				  Motor_pid_set_angle(&motor_data[4],runtime_yaw_max,0.5*vmax/max_angle,0,0);
 8001302:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f914 	bl	8000534 <__aeabi_i2d>
 800130c:	4605      	mov	r5, r0
 800130e:	460e      	mov	r6, r1
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <Gimbal_Task_Function+0x368>)
 8001316:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800131a:	f7ff f975 	bl	8000608 <__aeabi_dmul>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800132a:	f7ff fa97 	bl	800085c <__aeabi_ddiv>
 800132e:	4603      	mov	r3, r0
 8001330:	460c      	mov	r4, r1
 8001332:	4618      	mov	r0, r3
 8001334:	4621      	mov	r1, r4
 8001336:	f7ff fc17 	bl	8000b68 <__aeabi_d2iz>
 800133a:	4601      	mov	r1, r0
 800133c:	2300      	movs	r3, #0
 800133e:	2200      	movs	r2, #0
 8001340:	ec46 5b10 	vmov	d0, r5, r6
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <Gimbal_Task_Function+0x35c>)
 8001346:	f000 fdef 	bl	8001f28 <Motor_pid_set_angle>
 800134a:	e190      	b.n	800166e <Gimbal_Task_Function+0x64e>
 800134c:	f3af 8000 	nop.w
 8001350:	00000000 	.word	0x00000000
 8001354:	40418000 	.word	0x40418000
 8001358:	00000000 	.word	0x00000000
 800135c:	40718000 	.word	0x40718000
 8001360:	40b00000 	.word	0x40b00000
 8001364:	200042a4 	.word	0x200042a4
 8001368:	200041dc 	.word	0x200041dc
 800136c:	0800a268 	.word	0x0800a268
 8001370:	20004292 	.word	0x20004292
 8001374:	20004288 	.word	0x20004288
 8001378:	20004298 	.word	0x20004298
 800137c:	20004100 	.word	0x20004100
 8001380:	2000411c 	.word	0x2000411c
 8001384:	40021800 	.word	0x40021800
 8001388:	3fe00000 	.word	0x3fe00000
 800138c:	00000000 	.word	0x00000000
 8001390:	40dd4c00 	.word	0x40dd4c00
	  			  }
	  			  else{
	  				  Motor_pid_set_angle(&motor_data[4],runtime_yaw_min,0.5*vmax/max_angle,0,0);
 8001394:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8cb 	bl	8000534 <__aeabi_i2d>
 800139e:	4605      	mov	r5, r0
 80013a0:	460e      	mov	r6, r1
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4bb4      	ldr	r3, [pc, #720]	; (8001678 <Gimbal_Task_Function+0x658>)
 80013a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013ac:	f7ff f92c 	bl	8000608 <__aeabi_dmul>
 80013b0:	4603      	mov	r3, r0
 80013b2:	460c      	mov	r4, r1
 80013b4:	4618      	mov	r0, r3
 80013b6:	4621      	mov	r1, r4
 80013b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013bc:	f7ff fa4e 	bl	800085c <__aeabi_ddiv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4618      	mov	r0, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	f7ff fbce 	bl	8000b68 <__aeabi_d2iz>
 80013cc:	4601      	mov	r1, r0
 80013ce:	2300      	movs	r3, #0
 80013d0:	2200      	movs	r2, #0
 80013d2:	ec46 5b10 	vmov	d0, r5, r6
 80013d6:	48a9      	ldr	r0, [pc, #676]	; (800167c <Gimbal_Task_Function+0x65c>)
 80013d8:	f000 fda6 	bl	8001f28 <Motor_pid_set_angle>
 80013dc:	e147      	b.n	800166e <Gimbal_Task_Function+0x64e>

	  		  }

	  	  }
	  	  else{
	  		 pitch_change_counter=0; //If there is a target, restart pitch and yaw counter
 80013de:	2300      	movs	r3, #0
 80013e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  		 yaw_change_counter=0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  		 control_counter=TGT_CONST;
 80013ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013ee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  		 abs_pitch_offset = off_dist(comm_pack.dist_data);
 80013f2:	4ba3      	ldr	r3, [pc, #652]	; (8001680 <Gimbal_Task_Function+0x660>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f89c 	bl	8000534 <__aeabi_i2d>
 80013fc:	4603      	mov	r3, r0
 80013fe:	460c      	mov	r4, r1
 8001400:	ec44 3b10 	vmov	d0, r3, r4
 8001404:	f000 f94c 	bl	80016a0 <off_dist>
 8001408:	eeb0 7a40 	vmov.f32	s14, s0
 800140c:	eef0 7a60 	vmov.f32	s15, s1
 8001410:	4b9c      	ldr	r3, [pc, #624]	; (8001684 <Gimbal_Task_Function+0x664>)
 8001412:	ed83 7b00 	vstr	d7, [r3]

	  		 abs_pitch += abs_pitch_offset;
 8001416:	4b9c      	ldr	r3, [pc, #624]	; (8001688 <Gimbal_Task_Function+0x668>)
 8001418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141c:	4b99      	ldr	r3, [pc, #612]	; (8001684 <Gimbal_Task_Function+0x664>)
 800141e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001422:	461a      	mov	r2, r3
 8001424:	4623      	mov	r3, r4
 8001426:	f7fe ff39 	bl	800029c <__adddf3>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4a96      	ldr	r2, [pc, #600]	; (8001688 <Gimbal_Task_Function+0x668>)
 8001430:	e9c2 3400 	strd	r3, r4, [r2]


			  if (comm_pack.pack_cond==PACKCOR){
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <Gimbal_Task_Function+0x660>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 810c 	bne.w	8001656 <Gimbal_Task_Function+0x636>
				  if (check_angle_out_of_range(abs_yaw,runtime_yaw_max,runtime_yaw_min)){
 800143e:	4b93      	ldr	r3, [pc, #588]	; (800168c <Gimbal_Task_Function+0x66c>)
 8001440:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001444:	4618      	mov	r0, r3
 8001446:	4621      	mov	r1, r4
 8001448:	f7ff fb8e 	bl	8000b68 <__aeabi_d2iz>
 800144c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001450:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001454:	4619      	mov	r1, r3
 8001456:	f000 fa4f 	bl	80018f8 <check_angle_out_of_range>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d047      	beq.n	80014f0 <Gimbal_Task_Function+0x4d0>

					  if(abs(abs_yaw-runtime_yaw_max)<abs(abs_yaw-runtime_yaw_min)){ //Find the closer bound
 8001460:	4b8a      	ldr	r3, [pc, #552]	; (800168c <Gimbal_Task_Function+0x66c>)
 8001462:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001466:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f862 	bl	8000534 <__aeabi_i2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff0e 	bl	8000298 <__aeabi_dsub>
 800147c:	4603      	mov	r3, r0
 800147e:	460c      	mov	r4, r1
 8001480:	4618      	mov	r0, r3
 8001482:	4621      	mov	r1, r4
 8001484:	f7ff fb70 	bl	8000b68 <__aeabi_d2iz>
 8001488:	4603      	mov	r3, r0
 800148a:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 800148e:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8001492:	4b7e      	ldr	r3, [pc, #504]	; (800168c <Gimbal_Task_Function+0x66c>)
 8001494:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001498:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f849 	bl	8000534 <__aeabi_i2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7fe fef5 	bl	8000298 <__aeabi_dsub>
 80014ae:	4603      	mov	r3, r0
 80014b0:	460c      	mov	r4, r1
 80014b2:	4618      	mov	r0, r3
 80014b4:	4621      	mov	r1, r4
 80014b6:	f7ff fb57 	bl	8000b68 <__aeabi_d2iz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bfb8      	it	lt
 80014c0:	425b      	neglt	r3, r3
 80014c2:	429e      	cmp	r6, r3
 80014c4:	da0a      	bge.n	80014dc <Gimbal_Task_Function+0x4bc>
						  abs_yaw=runtime_yaw_max;
 80014c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f832 	bl	8000534 <__aeabi_i2d>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4a6d      	ldr	r2, [pc, #436]	; (800168c <Gimbal_Task_Function+0x66c>)
 80014d6:	e9c2 3400 	strd	r3, r4, [r2]
 80014da:	e009      	b.n	80014f0 <Gimbal_Task_Function+0x4d0>
					  }
					  else{
						  abs_yaw=runtime_yaw_min;
 80014dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f827 	bl	8000534 <__aeabi_i2d>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4a68      	ldr	r2, [pc, #416]	; (800168c <Gimbal_Task_Function+0x66c>)
 80014ec:	e9c2 3400 	strd	r3, r4, [r2]
					  }

				  }

				  if (check_angle_out_of_range(abs_pitch,runtime_pitch_max,runtime_pitch_min)){
 80014f0:	4b65      	ldr	r3, [pc, #404]	; (8001688 <Gimbal_Task_Function+0x668>)
 80014f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fb35 	bl	8000b68 <__aeabi_d2iz>
 80014fe:	f9b7 2050 	ldrsh.w	r2, [r7, #80]	; 0x50
 8001502:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001506:	4619      	mov	r1, r3
 8001508:	f000 f9f6 	bl	80018f8 <check_angle_out_of_range>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d051      	beq.n	80015b6 <Gimbal_Task_Function+0x596>

					  if(abs(abs_pitch-runtime_pitch_max)<abs(abs_pitch-runtime_pitch_min)){ //Find the closer bound
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <Gimbal_Task_Function+0x668>)
 8001514:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001518:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f809 	bl	8000534 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7fe feb5 	bl	8000298 <__aeabi_dsub>
 800152e:	4603      	mov	r3, r0
 8001530:	460c      	mov	r4, r1
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	f7ff fb17 	bl	8000b68 <__aeabi_d2iz>
 800153a:	4603      	mov	r3, r0
 800153c:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
 8001540:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
 8001544:	4b50      	ldr	r3, [pc, #320]	; (8001688 <Gimbal_Task_Function+0x668>)
 8001546:	e9d3 4500 	ldrd	r4, r5, [r3]
 800154a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fff0 	bl	8000534 <__aeabi_i2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe fe9c 	bl	8000298 <__aeabi_dsub>
 8001560:	4603      	mov	r3, r0
 8001562:	460c      	mov	r4, r1
 8001564:	4618      	mov	r0, r3
 8001566:	4621      	mov	r1, r4
 8001568:	f7ff fafe 	bl	8000b68 <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	bfb8      	it	lt
 8001572:	425b      	neglt	r3, r3
 8001574:	429e      	cmp	r6, r3
 8001576:	da0f      	bge.n	8001598 <Gimbal_Task_Function+0x578>
						  abs_pitch=runtime_pitch_max;
 8001578:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffd9 	bl	8000534 <__aeabi_i2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	4a40      	ldr	r2, [pc, #256]	; (8001688 <Gimbal_Task_Function+0x668>)
 8001588:	e9c2 3400 	strd	r3, r4, [r2]
						  HAL_GPIO_WritePin(GPIOG, LD_H_Pin, RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2102      	movs	r1, #2
 8001590:	483f      	ldr	r0, [pc, #252]	; (8001690 <Gimbal_Task_Function+0x670>)
 8001592:	f003 fa3f 	bl	8004a14 <HAL_GPIO_WritePin>
 8001596:	e00e      	b.n	80015b6 <Gimbal_Task_Function+0x596>

					  }
					  else{
						  abs_pitch=runtime_pitch_min;
 8001598:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffc9 	bl	8000534 <__aeabi_i2d>
 80015a2:	4603      	mov	r3, r0
 80015a4:	460c      	mov	r4, r1
 80015a6:	4a38      	ldr	r2, [pc, #224]	; (8001688 <Gimbal_Task_Function+0x668>)
 80015a8:	e9c2 3400 	strd	r3, r4, [r2]
						  HAL_GPIO_WritePin(GPIOG, LD_G_Pin, RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2104      	movs	r1, #4
 80015b0:	4837      	ldr	r0, [pc, #220]	; (8001690 <Gimbal_Task_Function+0x670>)
 80015b2:	f003 fa2f 	bl	8004a14 <HAL_GPIO_WritePin>
					  }
				  }

				  abs_pitch_offset = off_dist(comm_pack.dist_data);
 80015b6:	4b32      	ldr	r3, [pc, #200]	; (8001680 <Gimbal_Task_Function+0x660>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffba 	bl	8000534 <__aeabi_i2d>
 80015c0:	4603      	mov	r3, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	ec44 3b10 	vmov	d0, r3, r4
 80015c8:	f000 f86a 	bl	80016a0 <off_dist>
 80015cc:	eeb0 7a40 	vmov.f32	s14, s0
 80015d0:	eef0 7a60 	vmov.f32	s15, s1
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <Gimbal_Task_Function+0x664>)
 80015d6:	ed83 7b00 	vstr	d7, [r3]
				  //printf("yaw: %d pitch: %d \r \n", (int16_t)abs_yaw, (int16_t)abs_pitch);
				  //HAL_UART_Transmit(&huart7,  &(abs_yaw), 2, 0xFFFF);
				  //HAL_UART_Transmit(&huart7, 'ABS_YAW\n', 1, 0xFFFF);
				  //HAL_UART_Transmit(&huart7, &(abs_pitch), 2, 0xFFFF);
				  //HAL_UART_Transmit(&huart7, 'ABS_PITCH\n', 1, 0xFFFF);
				  Motor_pid_set_angle(&motor_data[4], abs_yaw, vmax/max_angle,0,0);
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <Gimbal_Task_Function+0x66c>)
 80015dc:	ed93 8b00 	vldr	d8, [r3]
 80015e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80015e8:	f7ff f938 	bl	800085c <__aeabi_ddiv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4618      	mov	r0, r3
 80015f2:	4621      	mov	r1, r4
 80015f4:	f7ff fab8 	bl	8000b68 <__aeabi_d2iz>
 80015f8:	4601      	mov	r1, r0
 80015fa:	2300      	movs	r3, #0
 80015fc:	2200      	movs	r2, #0
 80015fe:	eeb0 0a48 	vmov.f32	s0, s16
 8001602:	eef0 0a68 	vmov.f32	s1, s17
 8001606:	481d      	ldr	r0, [pc, #116]	; (800167c <Gimbal_Task_Function+0x65c>)
 8001608:	f000 fc8e 	bl	8001f28 <Motor_pid_set_angle>
				  Motor_pid_set_angle(&motor_data[5], (abs_pitch), 2*vmax/max_angle,0,0); //Set to 2 to optimize change
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <Gimbal_Task_Function+0x668>)
 800160e:	ed93 8b00 	vldr	d8, [r3]
 8001612:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	f7fe fe3f 	bl	800029c <__adddf3>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	4618      	mov	r0, r3
 8001624:	4621      	mov	r1, r4
 8001626:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800162a:	f7ff f917 	bl	800085c <__aeabi_ddiv>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	f7ff fa97 	bl	8000b68 <__aeabi_d2iz>
 800163a:	4601      	mov	r1, r0
 800163c:	2300      	movs	r3, #0
 800163e:	2200      	movs	r2, #0
 8001640:	eeb0 0a48 	vmov.f32	s0, s16
 8001644:	eef0 0a68 	vmov.f32	s1, s17
 8001648:	4812      	ldr	r0, [pc, #72]	; (8001694 <Gimbal_Task_Function+0x674>)
 800164a:	f000 fc6d 	bl	8001f28 <Motor_pid_set_angle>
				  comm_pack.target_num=0;
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <Gimbal_Task_Function+0x660>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	e00b      	b.n	800166e <Gimbal_Task_Function+0x64e>
			  }
			  else if (comm_pack.pack_cond==PACKERR){
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <Gimbal_Task_Function+0x660>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <Gimbal_Task_Function+0x64e>
				  printf("Wrong Packet.\n");
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <Gimbal_Task_Function+0x678>)
 8001660:	f006 fe44 	bl	80082ec <puts>
				  HAL_GPIO_WritePin(GPIOG, LD_F_Pin, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2108      	movs	r1, #8
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <Gimbal_Task_Function+0x670>)
 800166a:	f003 f9d3 	bl	8004a14 <HAL_GPIO_WritePin>
			  }
	  	  }
		  osDelay(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f005 fbe1 	bl	8006e36 <osDelay>
	  runtime_yaw_max=MAX_YAW;
 8001674:	e56f      	b.n	8001156 <Gimbal_Task_Function+0x136>
 8001676:	bf00      	nop
 8001678:	3fe00000 	.word	0x3fe00000
 800167c:	20004100 	.word	0x20004100
 8001680:	200042a4 	.word	0x200042a4
 8001684:	20000098 	.word	0x20000098
 8001688:	20004288 	.word	0x20004288
 800168c:	20004298 	.word	0x20004298
 8001690:	40021800 	.word	0x40021800
 8001694:	2000411c 	.word	0x2000411c
 8001698:	0800a27c 	.word	0x0800a27c
 800169c:	00000000 	.word	0x00000000

080016a0 <off_dist>:
  }

  /* USER CODE END Gimbal_Task_Function */
}

double off_dist(double dist){
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	ed87 0b00 	vstr	d0, [r7]
	//dist = dist / 100 ;
	//safe check
	if(dist < 1500)
 80016aa:	a344      	add	r3, pc, #272	; (adr r3, 80017bc <off_dist+0x11c>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016b4:	f7ff fa1a 	bl	8000aec <__aeabi_dcmplt>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <off_dist+0x2a>
		dist = 1500;
 80016be:	a43f      	add	r4, pc, #252	; (adr r4, 80017bc <off_dist+0x11c>)
 80016c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016c4:	e9c7 3400 	strd	r3, r4, [r7]
 80016c8:	e00e      	b.n	80016e8 <off_dist+0x48>
	else if (dist>2500)
 80016ca:	a33e      	add	r3, pc, #248	; (adr r3, 80017c4 <off_dist+0x124>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d4:	f7ff fa28 	bl	8000b28 <__aeabi_dcmpgt>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <off_dist+0x48>
		dist = 2400;
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	4c35      	ldr	r4, [pc, #212]	; (80017b8 <off_dist+0x118>)
 80016e4:	e9c7 3400 	strd	r3, r4, [r7]
	return (7.7e-9*dist*dist*dist  -0.0000475162*dist*dist + 0.1020480339*dist  -61.5014249239);// (0.0101*dist*dist*dist -0.710*dist*dist + 17.477*dist-137.3615);
 80016e8:	a32b      	add	r3, pc, #172	; (adr r3, 8001798 <off_dist+0xf8>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016f2:	f7fe ff89 	bl	8000608 <__aeabi_dmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001702:	f7fe ff81 	bl	8000608 <__aeabi_dmul>
 8001706:	4603      	mov	r3, r0
 8001708:	460c      	mov	r4, r1
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001712:	f7fe ff79 	bl	8000608 <__aeabi_dmul>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	4625      	mov	r5, r4
 800171c:	461c      	mov	r4, r3
 800171e:	a320      	add	r3, pc, #128	; (adr r3, 80017a0 <off_dist+0x100>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001728:	f7fe ff6e 	bl	8000608 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001738:	f7fe ff66 	bl	8000608 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4620      	mov	r0, r4
 8001742:	4629      	mov	r1, r5
 8001744:	f7fe fda8 	bl	8000298 <__aeabi_dsub>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	4625      	mov	r5, r4
 800174e:	461c      	mov	r4, r3
 8001750:	a315      	add	r3, pc, #84	; (adr r3, 80017a8 <off_dist+0x108>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800175a:	f7fe ff55 	bl	8000608 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7fe fd99 	bl	800029c <__adddf3>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	a30f      	add	r3, pc, #60	; (adr r3, 80017b0 <off_dist+0x110>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe fd8e 	bl	8000298 <__aeabi_dsub>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	ec44 3b17 	vmov	d7, r3, r4
}
 8001784:	eeb0 0a47 	vmov.f32	s0, s14
 8001788:	eef0 0a67 	vmov.f32	s1, s15
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	f3af 8000 	nop.w
 8001798:	a90bc822 	.word	0xa90bc822
 800179c:	3e40891e 	.word	0x3e40891e
 80017a0:	334307ee 	.word	0x334307ee
 80017a4:	3f08e984 	.word	0x3f08e984
 80017a8:	e838babc 	.word	0xe838babc
 80017ac:	3fba1fd1 	.word	0x3fba1fd1
 80017b0:	b120c65f 	.word	0xb120c65f
 80017b4:	404ec02e 	.word	0x404ec02e
 80017b8:	40a2c000 	.word	0x40a2c000
 80017bc:	00000000 	.word	0x00000000
 80017c0:	40977000 	.word	0x40977000
 80017c4:	00000000 	.word	0x00000000
 80017c8:	40a38800 	.word	0x40a38800

080017cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	61f8      	str	r0, [r7, #28]
	 // When enter this callback function, the variable pdata has been filled with the received data.
	 // Thus parse it directly.
	  //HAL_UART_Transmit(&huart7, 'Inter',5,0xFFFF);

	  //HAL_UART_Transmit(&huart7, (char*)pdata, PACKLEN,0xFFFF);
	  comm_pack=parse_all(pdata);
 80017d4:	4c19      	ldr	r4, [pc, #100]	; (800183c <HAL_UART_RxCpltCallback+0x70>)
 80017d6:	463b      	mov	r3, r7
 80017d8:	4919      	ldr	r1, [pc, #100]	; (8001840 <HAL_UART_RxCpltCallback+0x74>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f920 	bl	8001a20 <parse_all>
 80017e0:	4625      	mov	r5, r4
 80017e2:	463c      	mov	r4, r7
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ec:	e885 0003 	stmia.w	r5, {r0, r1}
	  abs_yaw=angle_preprocess(&motor_data[4], comm_pack.yaw_data);
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_UART_RxCpltCallback+0x70>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	; (8001844 <HAL_UART_RxCpltCallback+0x78>)
 80017fa:	f000 f82d 	bl	8001858 <angle_preprocess>
 80017fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001802:	eef0 7a60 	vmov.f32	s15, s1
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_UART_RxCpltCallback+0x7c>)
 8001808:	ed83 7b00 	vstr	d7, [r3]
	  abs_pitch=angle_preprocess(&motor_data[5], comm_pack.pitch_data);
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_UART_RxCpltCallback+0x70>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4619      	mov	r1, r3
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <HAL_UART_RxCpltCallback+0x80>)
 8001816:	f000 f81f 	bl	8001858 <angle_preprocess>
 800181a:	eeb0 7a40 	vmov.f32	s14, s0
 800181e:	eef0 7a60 	vmov.f32	s15, s1
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_UART_RxCpltCallback+0x84>)
 8001824:	ed83 7b00 	vstr	d7, [r3]
	  //
//	  printf("%s \r\n", pdata);
//	  if(comm_pack.pack_cond == PACKCOR)
//		  printf("Yaw: %d;\t Pitch: %d; \t%s\r\n", (int16_t)angle_preprocess(&motor_data[4], comm_pack.yaw_data), (int16_t)angle_preprocess(&motor_data[5], comm_pack.pitch_data), pdata);
//	  // Enable the uart interrupt again
	  HAL_UART_Receive_IT(&husart6, (char*)pdata, (PACKLEN));
 8001828:	2220      	movs	r2, #32
 800182a:	4905      	ldr	r1, [pc, #20]	; (8001840 <HAL_UART_RxCpltCallback+0x74>)
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <HAL_UART_RxCpltCallback+0x88>)
 800182e:	f004 fc45 	bl	80060bc <HAL_UART_Receive_IT>
}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	200042a4 	.word	0x200042a4
 8001840:	200042bc 	.word	0x200042bc
 8001844:	20004100 	.word	0x20004100
 8001848:	20004298 	.word	0x20004298
 800184c:	2000411c 	.word	0x2000411c
 8001850:	20004288 	.word	0x20004288
 8001854:	20004404 	.word	0x20004404

08001858 <angle_preprocess>:


double angle_preprocess(Motor* motor, int16_t recieved_angle){
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b08d      	sub	sp, #52	; 0x34
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t target_angle;
	input_angle=round(recieved_angle*8192/360);
 8001864:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001868:	035b      	lsls	r3, r3, #13
 800186a:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <angle_preprocess+0x9c>)
 800186c:	fb82 1203 	smull	r1, r2, r2, r3
 8001870:	441a      	add	r2, r3
 8001872:	1212      	asrs	r2, r2, #8
 8001874:	17db      	asrs	r3, r3, #31
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe5b 	bl	8000534 <__aeabi_i2d>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	4618      	mov	r0, r3
 8001884:	4621      	mov	r1, r4
 8001886:	f7ff f96f 	bl	8000b68 <__aeabi_d2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	85fb      	strh	r3, [r7, #46]	; 0x2e

	get_Motor_buffer(motor, &temp_motor_buffer);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 faf9 	bl	8001e8c <get_Motor_buffer>
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	85bb      	strh	r3, [r7, #44]	; 0x2c

	target_angle=input_angle + rx_angle;
 800189e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80018a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	857b      	strh	r3, [r7, #42]	; 0x2a
	target_angle=(8192+target_angle) % 8192;
 80018a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80018ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80018b0:	425a      	negs	r2, r3
 80018b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018ba:	bf58      	it	pl
 80018bc:	4253      	negpl	r3, r2
 80018be:	857b      	strh	r3, [r7, #42]	; 0x2a

	return (double)(target_angle*360/8192);
 80018c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80018c4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da02      	bge.n	80018d6 <angle_preprocess+0x7e>
 80018d0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80018d4:	331f      	adds	r3, #31
 80018d6:	135b      	asrs	r3, r3, #13
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe2b 	bl	8000534 <__aeabi_i2d>
 80018de:	4603      	mov	r3, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	ec44 3b17 	vmov	d7, r3, r4
}
 80018e6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ea:	eef0 0a67 	vmov.f32	s1, s15
 80018ee:	3734      	adds	r7, #52	; 0x34
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	b60b60b7 	.word	0xb60b60b7

080018f8 <check_angle_out_of_range>:
		}
	}

}

int16_t check_angle_out_of_range(int32_t input_angle, int16_t max_angle, int16_t min_angle){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	803b      	strh	r3, [r7, #0]

	if (min_angle<max_angle){ //Not over origin
 8001908:	f9b7 2000 	ldrsh.w	r2, [r7]
 800190c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001910:	429a      	cmp	r2, r3
 8001912:	da0d      	bge.n	8001930 <check_angle_out_of_range+0x38>

		if (input_angle > max_angle || input_angle < min_angle){
 8001914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dc04      	bgt.n	8001928 <check_angle_out_of_range+0x30>
 800191e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	da01      	bge.n	800192c <check_angle_out_of_range+0x34>
			return 1;
 8001928:	2301      	movs	r3, #1
 800192a:	e00e      	b.n	800194a <check_angle_out_of_range+0x52>
		}
		else{
			return 0;
 800192c:	2300      	movs	r3, #0
 800192e:	e00c      	b.n	800194a <check_angle_out_of_range+0x52>
		}
	}
	else{ //over origin

		if((input_angle > max_angle && input_angle < min_angle)){
 8001930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dd06      	ble.n	8001948 <check_angle_out_of_range+0x50>
 800193a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	da01      	bge.n	8001948 <check_angle_out_of_range+0x50>
			return 1;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <check_angle_out_of_range+0x52>
		}
		else{
			return 0;
 8001948:	2300      	movs	r3, #0
		}
	}

}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <parse_pack_indv>:
 * 			     pos: The position of the last byte of the currently extracted data, e.g. yaw.
 * 			     lens: the length of current data, e.g. yaw.
 * @ Return:
 * @ Author: Haoran Qi, Created on: Jan, 2022
 */
int32_t parse_pack_indv(char* pack, int pos, int lens){
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b08e      	sub	sp, #56	; 0x38
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	char pdata_temp[PACKLEN]; //pack content size + '\0'
	    int32_t data = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
	    memcpy(pdata_temp, pack, PACKLEN);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f107 0410 	add.w	r4, r7, #16
 800196e:	461d      	mov	r5, r3
 8001970:	6828      	ldr	r0, [r5, #0]
 8001972:	6869      	ldr	r1, [r5, #4]
 8001974:	68aa      	ldr	r2, [r5, #8]
 8001976:	68eb      	ldr	r3, [r5, #12]
 8001978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197a:	6928      	ldr	r0, [r5, #16]
 800197c:	6969      	ldr	r1, [r5, #20]
 800197e:	69aa      	ldr	r2, [r5, #24]
 8001980:	69eb      	ldr	r3, [r5, #28]
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	    //if (pdata_temp[0] == 0xAA){ //check received correct pack head frame， modify here to 0xAA in real world test, 0x41 for tests in 'A'.
			for(int i=0; i<lens; i++){
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
 8001988:	e02c      	b.n	80019e4 <parse_pack_indv+0x8c>
	            data += (int32_t)((pdata_temp[pos-i-1-2] - '0')*pow(10,i)); // decoding, referring to the vision code.
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	3b03      	subs	r3, #3
 8001992:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001996:	4413      	add	r3, r2
 8001998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800199c:	3b30      	subs	r3, #48	; 0x30
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdc8 	bl	8000534 <__aeabi_i2d>
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019aa:	f7fe fdc3 	bl	8000534 <__aeabi_i2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	ec43 2b11 	vmov	d1, r2, r3
 80019b6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001a18 <parse_pack_indv+0xc0>
 80019ba:	f007 fbf1 	bl	80091a0 <pow>
 80019be:	ec53 2b10 	vmov	r2, r3, d0
 80019c2:	4620      	mov	r0, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	f7fe fe1f 	bl	8000608 <__aeabi_dmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	4618      	mov	r0, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	f7ff f8c9 	bl	8000b68 <__aeabi_d2iz>
 80019d6:	4602      	mov	r2, r0
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	4413      	add	r3, r2
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
			for(int i=0; i<lens; i++){
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	3301      	adds	r3, #1
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
 80019e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbce      	blt.n	800198a <parse_pack_indv+0x32>
			}

			if (pdata_temp[pos-lens-2-1]=='0'){
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	3b03      	subs	r3, #3
 80019f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019f8:	4413      	add	r3, r2
 80019fa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019fe:	2b30      	cmp	r3, #48	; 0x30
 8001a00:	d102      	bne.n	8001a08 <parse_pack_indv+0xb0>
				data=-data;
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	425b      	negs	r3, r3
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
			}
	    //}
		//else{
			//data = -1;
		//}
	    return data;
 8001a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3738      	adds	r7, #56	; 0x38
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40240000 	.word	0x40240000

08001a20 <parse_all>:
 *
 * @ Return: Parsed pack
 * @ Author: Wenyuan, Wei Created on: May, 2022
 */
comm_rx_info parse_all(char* pack)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	comm_rx_info Sentry_Pack;
	Sentry_Pack.yaw_data = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
	Sentry_Pack.pitch_data = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
	Sentry_Pack.dist_data = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
	Sentry_Pack.fire_cmd = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
	Sentry_Pack.target_num = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
	Sentry_Pack.pack_cond=PACKCOR;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
//				HAL_GPIO_WritePin(GPIOG, LD_E_Pin, RESET);
//			}
//			//only when the format is correct, parse the packet
//			if(Sentry_Pack.pack_cond == PACKCOR)
//			{
				Sentry_Pack.yaw_data=parse_pack_indv(pack,YAW_POS, DATALEN);
 8001a42:	2203      	movs	r2, #3
 8001a44:	2110      	movs	r1, #16
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f7ff ff86 	bl	8001958 <parse_pack_indv>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	60bb      	str	r3, [r7, #8]
				Sentry_Pack.pitch_data=parse_pack_indv(pack,PITCH_POS,DATALEN);
 8001a50:	2203      	movs	r2, #3
 8001a52:	2118      	movs	r1, #24
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f7ff ff7f 	bl	8001958 <parse_pack_indv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	60fb      	str	r3, [r7, #12]
				Sentry_Pack.dist_data=parse_pack_indv(pack,DIST_POS,DATALEN);
 8001a5e:	2203      	movs	r2, #3
 8001a60:	2120      	movs	r1, #32
 8001a62:	6838      	ldr	r0, [r7, #0]
 8001a64:	f7ff ff78 	bl	8001958 <parse_pack_indv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	613b      	str	r3, [r7, #16]
				Sentry_Pack.target_num=1; //hard-coding?
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
				Sentry_Pack.fire_cmd=parse_pack_indv(pack,FCMD_POS-5,STATELEN);
 8001a70:	2201      	movs	r2, #1
 8001a72:	2103      	movs	r1, #3
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f7ff ff6f 	bl	8001958 <parse_pack_indv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	61bb      	str	r3, [r7, #24]
//	else
//	{
//		Sentry_Pack.pack_cond = PACKERR;
//		HAL_GPIO_WritePin(GPIOG, LD_G_Pin, RESET);
//	}
	return Sentry_Pack;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	461d      	mov	r5, r3
 8001a82:	f107 0408 	add.w	r4, r7, #8
 8001a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8e:	e885 0003 	stmia.w	r5, {r0, r1}

}
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9a:	0000      	movs	r0, r0
 8001a9c:	0000      	movs	r0, r0
	...

08001aa0 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8001aa8:	f000 f844 	bl	8001b34 <shoot_init>
//	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);

  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,1050);
  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1050);
  double fric_wheel_speed_percent=0; //DO NOT go above 20, friction wheel spins very fast and it could be dangerous. Only go above 20 if you KNOW what you are doing.
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	f04f 0400 	mov.w	r4, #0
 8001ab4:	e9c7 3406 	strd	r3, r4, [r7, #24]
  double mag_load_speed_percent=0;
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	f04f 0400 	mov.w	r4, #0
 8001ac0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  int16_t input=500;
 8001ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ac8:	81fb      	strh	r3, [r7, #14]
  int16_t shoot_counter=-1;
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	84fb      	strh	r3, [r7, #38]	; 0x26
//		if(input==1000){
//			input=500;
//		}
	  //cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);

	  if(comm_pack.fire_cmd ==1 && comm_pack.target_num==1){
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <Shoot_Task_Func+0x90>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10f      	bne.n	8001af8 <Shoot_Task_Func+0x58>
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <Shoot_Task_Func+0x90>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10b      	bne.n	8001af8 <Shoot_Task_Func+0x58>
		  buzzer_play_c1(100);
 8001ae0:	2064      	movs	r0, #100	; 0x64
 8001ae2:	f000 fb6d 	bl	80021c0 <buzzer_play_c1>
		  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8001ae6:	ed97 1b06 	vldr	d1, [r7, #24]
 8001aea:	ed97 0b04 	vldr	d0, [r7, #16]
 8001aee:	f000 f897 	bl	8001c20 <cmd_execute_shoot>
		  shoot_counter=TGT_CONST; //Shoot for atleast 1 second before stopping
 8001af2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001af6:	84fb      	strh	r3, [r7, #38]	; 0x26
	  }

	  if(shoot_counter>0){
 8001af8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dd06      	ble.n	8001b0e <Shoot_Task_Func+0x6e>
		  shoot_counter--;
 8001b00:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b0c:	e005      	b.n	8001b1a <Shoot_Task_Func+0x7a>
	  }
	  else{
		  cmd_execute_shoot(0,0);
 8001b0e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8001b28 <Shoot_Task_Func+0x88>
 8001b12:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001b28 <Shoot_Task_Func+0x88>
 8001b16:	f000 f883 	bl	8001c20 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f005 f98b 	bl	8006e36 <osDelay>
	  if(comm_pack.fire_cmd ==1 && comm_pack.target_num==1){
 8001b20:	e7d6      	b.n	8001ad0 <Shoot_Task_Func+0x30>
 8001b22:	bf00      	nop
 8001b24:	f3af 8000 	nop.w
	...
 8001b30:	200042a4 	.word	0x200042a4

08001b34 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <shoot_init+0x64>)
 8001b3c:	f003 fc9e 	bl	800547c <HAL_TIM_PWM_Start>
	osDelay(100);
 8001b40:	2064      	movs	r0, #100	; 0x64
 8001b42:	f005 f978 	bl	8006e36 <osDelay>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	4814      	ldr	r0, [pc, #80]	; (8001b9c <shoot_init+0x68>)
 8001b4a:	f003 fc97 	bl	800547c <HAL_TIM_PWM_Start>
	//osDelay(2000);
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <shoot_init+0x64>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f005 f96c 	bl	8006e36 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <shoot_init+0x68>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34

	osDelay(2000);
 8001b68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b6c:	f005 f963 	bl	8006e36 <osDelay>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <shoot_init+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(100);
 8001b7a:	2064      	movs	r0, #100	; 0x64
 8001b7c:	f005 f95b 	bl	8006e36 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <shoot_init+0x68>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(1750);
 8001b8a:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8001b8e:	f005 f952 	bl	8006e36 <osDelay>
//	HAL_TIM_PWM_Stop(&htim4,TIM_CHANNEL_1);
//	HAL_TIM_PWM_Stop(&htim2,TIM_CHANNEL_1);



}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20004050 	.word	0x20004050
 8001b9c:	2000419c 	.word	0x2000419c

08001ba0 <fric_wheel_set_speed>:

void fric_wheel_set_speed(double percent){
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0b00 	vstr	d0, [r7]
	//MAX pulse width: 2000
	//MIN Pulse Width: 1000

	double input=MIN_PWM_ON_TIME+percent/100*(MAX_PWM_ON_TIME-MIN_PWM_ON_TIME);
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <fric_wheel_set_speed+0x6c>)
 8001bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bb4:	f7fe fe52 	bl	800085c <__aeabi_ddiv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <fric_wheel_set_speed+0x70>)
 8001bc6:	f7fe fd1f 	bl	8000608 <__aeabi_dmul>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <fric_wheel_set_speed+0x70>)
 8001bd8:	f7fe fb60 	bl	800029c <__adddf3>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,input);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <fric_wheel_set_speed+0x74>)
 8001be6:	681c      	ldr	r4, [r3, #0]
 8001be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bec:	f7fe ffe4 	bl	8000bb8 <__aeabi_d2uiz>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,input);
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <fric_wheel_set_speed+0x78>)
 8001bf6:	681c      	ldr	r4, [r3, #0]
 8001bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bfc:	f7fe ffdc 	bl	8000bb8 <__aeabi_d2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}
 8001c0c:	40590000 	.word	0x40590000
 8001c10:	408f4000 	.word	0x408f4000
 8001c14:	20004050 	.word	0x20004050
 8001c18:	2000419c 	.word	0x2000419c
 8001c1c:	00000000 	.word	0x00000000

08001c20 <cmd_execute_shoot>:

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	ed87 0b02 	vstr	d0, [r7, #8]
 8001c2a:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <cmd_execute_shoot+0x58>)
 8001c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c38:	f7fe fe10 	bl	800085c <__aeabi_ddiv>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	460c      	mov	r4, r1
 8001c40:	4618      	mov	r0, r3
 8001c42:	4621      	mov	r1, r4
 8001c44:	a30a      	add	r3, pc, #40	; (adr r3, 8001c70 <cmd_execute_shoot+0x50>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fcdd 	bl	8000608 <__aeabi_dmul>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 8001c56:	ed97 0b04 	vldr	d0, [r7, #16]
 8001c5a:	4808      	ldr	r0, [pc, #32]	; (8001c7c <cmd_execute_shoot+0x5c>)
 8001c5c:	f000 fa66 	bl	800212c <Motor_set_raw_value>
	//osdelay(1000);
	fric_wheel_set_speed(fric_speed);
 8001c60:	ed97 0b00 	vldr	d0, [r7]
 8001c64:	f7ff ff9c 	bl	8001ba0 <fric_wheel_set_speed>

}
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	00000000 	.word	0x00000000
 8001c74:	40c38800 	.word	0x40c38800
 8001c78:	40590000 	.word	0x40590000
 8001c7c:	200040e4 	.word	0x200040e4

08001c80 <Timer_Task_Func>:
 */

#include "Timer_App.h"


void Timer_Task_Func(void const * argument){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b090      	sub	sp, #64	; 0x40
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

	uint32_t tick;

	for (;;){

		Motor_Data_Read();
 8001c88:	f000 f816 	bl	8001cb8 <Motor_Data_Read>
		Motor_Data_Sent();
 8001c8c:	f000 f87a 	bl	8001d84 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <Timer_Task_Func+0x30>)
 8001c98:	f000 f8f8 	bl	8001e8c <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <Timer_Task_Func+0x34>)
 8001ca4:	f000 f8f2 	bl	8001e8c <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f005 f8c4 	bl	8006e36 <osDelay>
	for (;;){
 8001cae:	e7eb      	b.n	8001c88 <Timer_Task_Func+0x8>
 8001cb0:	20004100 	.word	0x20004100
 8001cb4:	20004090 	.word	0x20004090

08001cb8 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e052      	b.n	8001d6a <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8001cc4:	482c      	ldr	r0, [pc, #176]	; (8001d78 <Motor_Data_Read+0xc0>)
 8001cc6:	f000 fd19 	bl	80026fc <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <Motor_Data_Read+0xc4>)
 8001cd0:	441a      	add	r2, r3
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	6810      	ldr	r0, [r2, #0]
 8001cd6:	6851      	ldr	r1, [r2, #4]
 8001cd8:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 8001cda:	793b      	ldrb	r3, [r7, #4]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	797b      	ldrb	r3, [r7, #5]
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b218      	sxth	r0, r3
 8001ce8:	4925      	ldr	r1, [pc, #148]	; (8001d80 <Motor_Data_Read+0xc8>)
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1a9b      	subs	r3, r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3310      	adds	r3, #16
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b218      	sxth	r0, r3
 8001d0a:	491d      	ldr	r1, [pc, #116]	; (8001d80 <Motor_Data_Read+0xc8>)
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	3312      	adds	r3, #18
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 8001d1e:	7a3b      	ldrb	r3, [r7, #8]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b218      	sxth	r0, r3
 8001d2c:	4914      	ldr	r1, [pc, #80]	; (8001d80 <Motor_Data_Read+0xc8>)
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3314      	adds	r3, #20
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	b218      	sxth	r0, r3
 8001d44:	490e      	ldr	r1, [pc, #56]	; (8001d80 <Motor_Data_Read+0xc8>)
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3316      	adds	r3, #22
 8001d54:	4602      	mov	r2, r0
 8001d56:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f005 f86c 	bl	8006e36 <osDelay>

		can_filter_disable(&hcan1);
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <Motor_Data_Read+0xc0>)
 8001d60:	f000 fcee 	bl	8002740 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3301      	adds	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b07      	cmp	r3, #7
 8001d6e:	dda9      	ble.n	8001cc4 <Motor_Data_Read+0xc>
	}
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200041dc 	.word	0x200041dc
 8001d7c:	20004204 	.word	0x20004204
 8001d80:	20004090 	.word	0x20004090

08001d84 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 8001d92:	2308      	movs	r3, #8
 8001d94:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e06c      	b.n	8001e76 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12b      	bne.n	8001dfa <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 8001da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da6:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	121b      	asrs	r3, r3, #8
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	121b      	asrs	r3, r3, #8
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd0:	121b      	asrs	r3, r3, #8
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de6:	121b      	asrs	r3, r3, #8
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001df8:	e032      	b.n	8001e60 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 8001dfa:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001dfe:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e06:	121b      	asrs	r3, r3, #8
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e1c:	121b      	asrs	r3, r3, #8
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e32:	121b      	asrs	r3, r3, #8
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001e4c:	121b      	asrs	r3, r3, #8
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <Motor_Data_Sent+0x100>)
 8001e56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	f107 021c 	add.w	r2, r7, #28
 8001e68:	4639      	mov	r1, r7
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <Motor_Data_Sent+0x104>)
 8001e6c:	f001 fee8 	bl	8003c40 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3301      	adds	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	dd8f      	ble.n	8001d9c <Motor_Data_Sent+0x18>
	}
}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20004090 	.word	0x20004090
 8001e88:	200041dc 	.word	0x200041dc

08001e8c <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f811 	bl	8001ec0 <Motor_Data_Replacement>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001eb0:	6839      	ldr	r1, [r7, #0]
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f804 	bl	8001ec0 <Motor_Data_Replacement>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	60da      	str	r2, [r3, #12]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <Motor_pid_set_angle>:


//PID Function, expects a POINTER to motor structure, target ABSOLUTE angle in DEGREES (between 0 and 360), and P/I/D parameters
void Motor_pid_set_angle(Motor* motor, double angle, int32_t p, int32_t i, int32_t d){
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b097      	sub	sp, #92	; 0x5c
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6178      	str	r0, [r7, #20]
 8001f30:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f34:	6139      	str	r1, [r7, #16]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t current_error;
	int16_t target_angle;
	int16_t min_speed=1000;
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t tolerance=20;
 8001f42:	2314      	movs	r3, #20
 8001f44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t direction=1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	double velocity=0;
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	f04f 0400 	mov.w	r4, #0
 8001f56:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double speed=0;
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	f04f 0400 	mov.w	r4, #0
 8001f62:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	input_angle=floor(angle/360*8192);
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	4b6e      	ldr	r3, [pc, #440]	; (8002124 <Motor_pid_set_angle+0x1fc>)
 8001f6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f70:	f7fe fc74 	bl	800085c <__aeabi_ddiv>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	4b69      	ldr	r3, [pc, #420]	; (8002128 <Motor_pid_set_angle+0x200>)
 8001f82:	f7fe fb41 	bl	8000608 <__aeabi_dmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	ec44 3b17 	vmov	d7, r3, r4
 8001f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f92:	eef0 0a67 	vmov.f32	s1, s15
 8001f96:	f007 f87f 	bl	8009098 <floor>
 8001f9a:	ec54 3b10 	vmov	r3, r4, d0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	f7fe fde1 	bl	8000b68 <__aeabi_d2iz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	get_Motor_buffer(motor, &temp_motor_buffer);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff6a 	bl	8001e8c <get_Motor_buffer>


	temp_motor_buffer.motor_info.P_parameter=p;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	623b      	str	r3, [r7, #32]
	temp_motor_buffer.motor_info.I_parameter=i;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
	temp_motor_buffer.motor_info.D_parameter=d;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 8001fc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fc6:	87fb      	strh	r3, [r7, #62]	; 0x3e

	target_angle=input_angle;
 8001fc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	/*if (target_angle % 8192 !=0){
		target_angle=target_angle%8192;
	}*/

	current_error=(target_angle-rx_angle+8192)%8192; //Use target - rx + 8192 to always make it positive, mod 8192 to make sure its within [0,8192]
 8001fce:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001fd2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001fdc:	425a      	negs	r2, r3
 8001fde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fe2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001fe6:	bf58      	it	pl
 8001fe8:	4253      	negpl	r3, r2
 8001fea:	877b      	strh	r3, [r7, #58]	; 0x3a
	//If error is not small, but motor turns less than 180 degrees, turn as per usual using p*error
	//If error is not small, but motor needs to turn more than 180 degrees, reverse direction, and error is the error "the other way"
	//In cases where error is not small, set minimum speed so that the motor doesnt stop turning due to friction

	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	if (current_error<tolerance){
 8001fec:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001ff0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	da06      	bge.n	8002006 <Motor_pid_set_angle+0xde>
		velocity=0;
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002004:	e07d      	b.n	8002102 <Motor_pid_set_angle+0x1da>
	}
	else{
		if (current_error<=4096){ //If need to turn less than 180 degrees, go CW
 8002006:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200e:	dc39      	bgt.n	8002084 <Motor_pid_set_angle+0x15c>
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, SET);
			direction=1;
 8002010:	2301      	movs	r3, #1
 8002012:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 8002016:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa87 	bl	8000534 <__aeabi_i2d>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 800202e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa7e 	bl	8000534 <__aeabi_i2d>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	461a      	mov	r2, r3
 800203e:	4623      	mov	r3, r4
 8002040:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002044:	f7fe fd52 	bl	8000aec <__aeabi_dcmplt>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <Motor_pid_set_angle+0x138>
				speed=min_speed;
 800204e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa6e 	bl	8000534 <__aeabi_i2d>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 8002060:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa65 	bl	8000534 <__aeabi_i2d>
 800206a:	4603      	mov	r3, r0
 800206c:	460c      	mov	r4, r1
 800206e:	461a      	mov	r2, r3
 8002070:	4623      	mov	r3, r4
 8002072:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002076:	f7fe fac7 	bl	8000608 <__aeabi_dmul>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002082:	e03e      	b.n	8002102 <Motor_pid_set_angle+0x1da>
		}
		else{ //Otherwise, go CCW
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, SET);
			current_error=(8192-current_error); //Error from "the other side" obtained by 8192-error if CCW
 8002084:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002086:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 800208a:	b29b      	uxth	r3, r3
 800208c:	877b      	strh	r3, [r7, #58]	; 0x3a
			direction=-1;
 800208e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002092:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 8002096:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa47 	bl	8000534 <__aeabi_i2d>
 80020a6:	4603      	mov	r3, r0
 80020a8:	460c      	mov	r4, r1
 80020aa:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 80020ae:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa3e 	bl	8000534 <__aeabi_i2d>
 80020b8:	4603      	mov	r3, r0
 80020ba:	460c      	mov	r4, r1
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020c4:	f7fe fd12 	bl	8000aec <__aeabi_dcmplt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <Motor_pid_set_angle+0x1b8>
				speed=min_speed;
 80020ce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa2e 	bl	8000534 <__aeabi_i2d>
 80020d8:	4603      	mov	r3, r0
 80020da:	460c      	mov	r4, r1
 80020dc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 80020e0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fa25 	bl	8000534 <__aeabi_i2d>
 80020ea:	4603      	mov	r3, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	461a      	mov	r2, r3
 80020f0:	4623      	mov	r3, r4
 80020f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020f6:	f7fe fa87 	bl	8000608 <__aeabi_dmul>
 80020fa:	4603      	mov	r3, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	//current_error=3000;



	temp_motor_buffer.tx_data=velocity;
 8002102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002106:	f7fe fd2f 	bl	8000b68 <__aeabi_d2iz>
 800210a:	4603      	mov	r3, r0
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
	set_Motor_buffer(&temp_motor_buffer,motor);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	6979      	ldr	r1, [r7, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fec6 	bl	8001ea6 <set_Motor_buffer>

}
 800211a:	bf00      	nop
 800211c:	375c      	adds	r7, #92	; 0x5c
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	40768000 	.word	0x40768000
 8002128:	40c00000 	.word	0x40c00000

0800212c <Motor_set_raw_value>:

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 800212c:	b580      	push	{r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff fea4 	bl	8001e8c <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 8002144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002148:	f7fe fd0e 	bl	8000b68 <__aeabi_d2iz>
 800214c:	4603      	mov	r3, r0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	68f9      	ldr	r1, [r7, #12]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fea5 	bl	8001ea6 <set_Motor_buffer>
}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002168:	2100      	movs	r1, #0
 800216a:	4802      	ldr	r0, [pc, #8]	; (8002174 <buzzer_init+0x10>)
 800216c:	f003 f986 	bl	800547c <HAL_TIM_PWM_Start>

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20004244 	.word	0x20004244

08002178 <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <buzzer_play_g0+0x44>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <buzzer_play_g0+0x44>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f242 5233 	movw	r2, #9523	; 0x2533
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <buzzer_play_g0+0x44>)
 8002194:	f242 5233 	movw	r2, #9523	; 0x2533
 8002198:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <buzzer_play_g0+0x44>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2264      	movs	r2, #100	; 0x64
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fe46 	bl	8006e36 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <buzzer_play_g0+0x44>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2200      	movs	r2, #0
 80021b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20004244 	.word	0x20004244

080021c0 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <buzzer_play_c1+0x44>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <buzzer_play_c1+0x44>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <buzzer_play_c1+0x44>)
 80021dc:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80021e0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <buzzer_play_c1+0x44>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2264      	movs	r2, #100	; 0x64
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 fe22 	bl	8006e36 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <buzzer_play_c1+0x44>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20004244 	.word	0x20004244

08002208 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <buzzer_play_e1+0x44>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <buzzer_play_e1+0x44>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f241 621e 	movw	r2, #5662	; 0x161e
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <buzzer_play_e1+0x44>)
 8002224:	f241 621e 	movw	r2, #5662	; 0x161e
 8002228:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <buzzer_play_e1+0x44>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2264      	movs	r2, #100	; 0x64
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 fdfe 	bl	8006e36 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <buzzer_play_e1+0x44>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20004244 	.word	0x20004244

08002250 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <buzzer_play_g1+0x44>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <buzzer_play_g1+0x44>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f241 2299 	movw	r2, #4761	; 0x1299
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <buzzer_play_g1+0x44>)
 800226c:	f241 2299 	movw	r2, #4761	; 0x1299
 8002270:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <buzzer_play_g1+0x44>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2264      	movs	r2, #100	; 0x64
 8002278:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fdda 	bl	8006e36 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <buzzer_play_g1+0x44>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20004244 	.word	0x20004244

08002298 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 fdc7 	bl	8006e36 <osDelay>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b08d      	sub	sp, #52	; 0x34
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7fe f93b 	bl	8000534 <__aeabi_i2d>
 80022be:	4603      	mov	r3, r0
 80022c0:	460c      	mov	r4, r1
 80022c2:	461a      	mov	r2, r3
 80022c4:	4623      	mov	r3, r4
 80022c6:	f04f 0000 	mov.w	r0, #0
 80022ca:	49bf      	ldr	r1, [pc, #764]	; (80025c8 <buzzer_play_mario+0x318>)
 80022cc:	f7fe fac6 	bl	800085c <__aeabi_ddiv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	4618      	mov	r0, r3
 80022d6:	4621      	mov	r1, r4
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	4bbb      	ldr	r3, [pc, #748]	; (80025cc <buzzer_play_mario+0x31c>)
 80022de:	f7fe f993 	bl	8000608 <__aeabi_dmul>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	4618      	mov	r0, r3
 80022e8:	4621      	mov	r1, r4
 80022ea:	f7fe fc3d 	bl	8000b68 <__aeabi_d2iz>
 80022ee:	4603      	mov	r3, r0
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe f91e 	bl	8000534 <__aeabi_i2d>
 80022f8:	4603      	mov	r3, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	49b0      	ldr	r1, [pc, #704]	; (80025c8 <buzzer_play_mario+0x318>)
 8002306:	f7fe faa9 	bl	800085c <__aeabi_ddiv>
 800230a:	4603      	mov	r3, r0
 800230c:	460c      	mov	r4, r1
 800230e:	4618      	mov	r0, r3
 8002310:	4621      	mov	r1, r4
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	4bad      	ldr	r3, [pc, #692]	; (80025cc <buzzer_play_mario+0x31c>)
 8002318:	f7fe f976 	bl	8000608 <__aeabi_dmul>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	4618      	mov	r0, r3
 8002322:	4621      	mov	r1, r4
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4ba9      	ldr	r3, [pc, #676]	; (80025d0 <buzzer_play_mario+0x320>)
 800232a:	f7fe f96d 	bl	8000608 <__aeabi_dmul>
 800232e:	4603      	mov	r3, r0
 8002330:	460c      	mov	r4, r1
 8002332:	4618      	mov	r0, r3
 8002334:	4621      	mov	r1, r4
 8002336:	f7fe fc17 	bl	8000b68 <__aeabi_d2iz>
 800233a:	4603      	mov	r3, r0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7fe f8f8 	bl	8000534 <__aeabi_i2d>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	461a      	mov	r2, r3
 800234a:	4623      	mov	r3, r4
 800234c:	f04f 0000 	mov.w	r0, #0
 8002350:	499d      	ldr	r1, [pc, #628]	; (80025c8 <buzzer_play_mario+0x318>)
 8002352:	f7fe fa83 	bl	800085c <__aeabi_ddiv>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	4618      	mov	r0, r3
 800235c:	4621      	mov	r1, r4
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	4b9a      	ldr	r3, [pc, #616]	; (80025cc <buzzer_play_mario+0x31c>)
 8002364:	f7fe f950 	bl	8000608 <__aeabi_dmul>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	4618      	mov	r0, r3
 800236e:	4621      	mov	r1, r4
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	4b97      	ldr	r3, [pc, #604]	; (80025d4 <buzzer_play_mario+0x324>)
 8002376:	f7fe f947 	bl	8000608 <__aeabi_dmul>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	4618      	mov	r0, r3
 8002380:	4621      	mov	r1, r4
 8002382:	f7fe fbf1 	bl	8000b68 <__aeabi_d2iz>
 8002386:	4603      	mov	r3, r0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe f8d2 	bl	8000534 <__aeabi_i2d>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	498a      	ldr	r1, [pc, #552]	; (80025c8 <buzzer_play_mario+0x318>)
 800239e:	f7fe fa5d 	bl	800085c <__aeabi_ddiv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	460c      	mov	r4, r1
 80023a6:	4618      	mov	r0, r3
 80023a8:	4621      	mov	r1, r4
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4b87      	ldr	r3, [pc, #540]	; (80025cc <buzzer_play_mario+0x31c>)
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	4618      	mov	r0, r3
 80023ba:	4621      	mov	r1, r4
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b84      	ldr	r3, [pc, #528]	; (80025d4 <buzzer_play_mario+0x324>)
 80023c2:	f7fe f921 	bl	8000608 <__aeabi_dmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <buzzer_play_mario+0x320>)
 80023d4:	f7fe f918 	bl	8000608 <__aeabi_dmul>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	4618      	mov	r0, r3
 80023de:	4621      	mov	r1, r4
 80023e0:	f7fe fbc2 	bl	8000b68 <__aeabi_d2iz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7fe f8a3 	bl	8000534 <__aeabi_i2d>
 80023ee:	4603      	mov	r3, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	461a      	mov	r2, r3
 80023f4:	4623      	mov	r3, r4
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	4973      	ldr	r1, [pc, #460]	; (80025c8 <buzzer_play_mario+0x318>)
 80023fc:	f7fe fa2e 	bl	800085c <__aeabi_ddiv>
 8002400:	4603      	mov	r3, r0
 8002402:	460c      	mov	r4, r1
 8002404:	4618      	mov	r0, r3
 8002406:	4621      	mov	r1, r4
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	4b72      	ldr	r3, [pc, #456]	; (80025d8 <buzzer_play_mario+0x328>)
 800240e:	f7fe f8fb 	bl	8000608 <__aeabi_dmul>
 8002412:	4603      	mov	r3, r0
 8002414:	460c      	mov	r4, r1
 8002416:	4618      	mov	r0, r3
 8002418:	4621      	mov	r1, r4
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <buzzer_play_mario+0x31c>)
 8002420:	f7fe f8f2 	bl	8000608 <__aeabi_dmul>
 8002424:	4603      	mov	r3, r0
 8002426:	460c      	mov	r4, r1
 8002428:	4618      	mov	r0, r3
 800242a:	4621      	mov	r1, r4
 800242c:	f7fe fb9c 	bl	8000b68 <__aeabi_d2iz>
 8002430:	4603      	mov	r3, r0
 8002432:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7fe f87d 	bl	8000534 <__aeabi_i2d>
 800243a:	4603      	mov	r3, r0
 800243c:	460c      	mov	r4, r1
 800243e:	461a      	mov	r2, r3
 8002440:	4623      	mov	r3, r4
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	4960      	ldr	r1, [pc, #384]	; (80025c8 <buzzer_play_mario+0x318>)
 8002448:	f7fe fa08 	bl	800085c <__aeabi_ddiv>
 800244c:	4603      	mov	r3, r0
 800244e:	460c      	mov	r4, r1
 8002450:	4618      	mov	r0, r3
 8002452:	4621      	mov	r1, r4
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	4b5f      	ldr	r3, [pc, #380]	; (80025d8 <buzzer_play_mario+0x328>)
 800245a:	f7fe f8d5 	bl	8000608 <__aeabi_dmul>
 800245e:	4603      	mov	r3, r0
 8002460:	460c      	mov	r4, r1
 8002462:	4618      	mov	r0, r3
 8002464:	4621      	mov	r1, r4
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b58      	ldr	r3, [pc, #352]	; (80025cc <buzzer_play_mario+0x31c>)
 800246c:	f7fe f8cc 	bl	8000608 <__aeabi_dmul>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4618      	mov	r0, r3
 8002476:	4621      	mov	r1, r4
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <buzzer_play_mario+0x320>)
 800247e:	f7fe f8c3 	bl	8000608 <__aeabi_dmul>
 8002482:	4603      	mov	r3, r0
 8002484:	460c      	mov	r4, r1
 8002486:	4618      	mov	r0, r3
 8002488:	4621      	mov	r1, r4
 800248a:	f7fe fb6d 	bl	8000b68 <__aeabi_d2iz>
 800248e:	4603      	mov	r3, r0
 8002490:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe f84e 	bl	8000534 <__aeabi_i2d>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	461a      	mov	r2, r3
 800249e:	4623      	mov	r3, r4
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	4948      	ldr	r1, [pc, #288]	; (80025c8 <buzzer_play_mario+0x318>)
 80024a6:	f7fe f9d9 	bl	800085c <__aeabi_ddiv>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	4618      	mov	r0, r3
 80024b0:	4621      	mov	r1, r4
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	f7fd fef1 	bl	800029c <__adddf3>
 80024ba:	4603      	mov	r3, r0
 80024bc:	460c      	mov	r4, r1
 80024be:	4618      	mov	r0, r3
 80024c0:	4621      	mov	r1, r4
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <buzzer_play_mario+0x31c>)
 80024c8:	f7fe f89e 	bl	8000608 <__aeabi_dmul>
 80024cc:	4603      	mov	r3, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	4618      	mov	r0, r3
 80024d2:	4621      	mov	r1, r4
 80024d4:	f7fe fb48 	bl	8000b68 <__aeabi_d2iz>
 80024d8:	4603      	mov	r3, r0
 80024da:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7fe f829 	bl	8000534 <__aeabi_i2d>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	461a      	mov	r2, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	4936      	ldr	r1, [pc, #216]	; (80025c8 <buzzer_play_mario+0x318>)
 80024f0:	f7fe f9b4 	bl	800085c <__aeabi_ddiv>
 80024f4:	4603      	mov	r3, r0
 80024f6:	460c      	mov	r4, r1
 80024f8:	4618      	mov	r0, r3
 80024fa:	4621      	mov	r1, r4
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	f7fd fecc 	bl	800029c <__adddf3>
 8002504:	4603      	mov	r3, r0
 8002506:	460c      	mov	r4, r1
 8002508:	4618      	mov	r0, r3
 800250a:	4621      	mov	r1, r4
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <buzzer_play_mario+0x31c>)
 8002512:	f7fe f879 	bl	8000608 <__aeabi_dmul>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	4618      	mov	r0, r3
 800251c:	4621      	mov	r1, r4
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <buzzer_play_mario+0x320>)
 8002524:	f7fe f870 	bl	8000608 <__aeabi_dmul>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	4618      	mov	r0, r3
 800252e:	4621      	mov	r1, r4
 8002530:	f7fe fb1a 	bl	8000b68 <__aeabi_d2iz>
 8002534:	4603      	mov	r3, r0
 8002536:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fd fffb 	bl	8000534 <__aeabi_i2d>
 800253e:	4603      	mov	r3, r0
 8002540:	460c      	mov	r4, r1
 8002542:	461a      	mov	r2, r3
 8002544:	4623      	mov	r3, r4
 8002546:	f04f 0000 	mov.w	r0, #0
 800254a:	491f      	ldr	r1, [pc, #124]	; (80025c8 <buzzer_play_mario+0x318>)
 800254c:	f7fe f986 	bl	800085c <__aeabi_ddiv>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	4618      	mov	r0, r3
 8002556:	4621      	mov	r1, r4
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <buzzer_play_mario+0x32c>)
 800255e:	f7fe f853 	bl	8000608 <__aeabi_dmul>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	4618      	mov	r0, r3
 8002568:	4621      	mov	r1, r4
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <buzzer_play_mario+0x31c>)
 8002570:	f7fe f84a 	bl	8000608 <__aeabi_dmul>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	4618      	mov	r0, r3
 800257a:	4621      	mov	r1, r4
 800257c:	f7fe faf4 	bl	8000b68 <__aeabi_d2iz>
 8002580:	4603      	mov	r3, r0
 8002582:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 8002584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002586:	f7ff fe3f 	bl	8002208 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 800258a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800258c:	f7ff fe3c 	bl	8002208 <buzzer_play_e1>
	buzzer_rest(eighth);
 8002590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002592:	f7ff fe81 	bl	8002298 <buzzer_rest>
	buzzer_play_e1(eighth);
 8002596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002598:	f7ff fe36 	bl	8002208 <buzzer_play_e1>
	buzzer_rest(eighth);
 800259c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800259e:	f7ff fe7b 	bl	8002298 <buzzer_rest>
	buzzer_play_c1(eighth);
 80025a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a4:	f7ff fe0c 	bl	80021c0 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 80025a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025aa:	f7ff fe2d 	bl	8002208 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 80025ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b0:	f7ff fe4e 	bl	8002250 <buzzer_play_g1>
	buzzer_rest(quarter);
 80025b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025b6:	f7ff fe6f 	bl	8002298 <buzzer_rest>
	buzzer_play_g0(quarter);
 80025ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025bc:	f7ff fddc 	bl	8002178 <buzzer_play_g0>


}
 80025c0:	bf00      	nop
 80025c2:	3734      	adds	r7, #52	; 0x34
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	404e0000 	.word	0x404e0000
 80025cc:	408f4000 	.word	0x408f4000
 80025d0:	3ff80000 	.word	0x3ff80000
 80025d4:	3fe00000 	.word	0x3fe00000
 80025d8:	3fd00000 	.word	0x3fd00000
 80025dc:	40100000 	.word	0x40100000

080025e0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <MX_CAN1_Init+0x64>)
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <MX_CAN1_Init+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_CAN1_Init+0x64>)
 80025ec:	2203      	movs	r2, #3
 80025ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <MX_CAN1_Init+0x64>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <MX_CAN1_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_CAN1_Init+0x64>)
 80025fe:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8002602:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_CAN1_Init+0x64>)
 8002606:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800260a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800260c:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <MX_CAN1_Init+0x64>)
 800260e:	2200      	movs	r2, #0
 8002610:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_CAN1_Init+0x64>)
 8002614:	2201      	movs	r2, #1
 8002616:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <MX_CAN1_Init+0x64>)
 800261a:	2201      	movs	r2, #1
 800261c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_CAN1_Init+0x64>)
 8002620:	2201      	movs	r2, #1
 8002622:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <MX_CAN1_Init+0x64>)
 8002626:	2200      	movs	r2, #0
 8002628:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_CAN1_Init+0x64>)
 800262c:	2201      	movs	r2, #1
 800262e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <MX_CAN1_Init+0x64>)
 8002632:	f001 f8e5 	bl	8003800 <HAL_CAN_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800263c:	f000 fb50 	bl	8002ce0 <Error_Handler>
  }

}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200041dc 	.word	0x200041dc
 8002648:	40006400 	.word	0x40006400

0800264c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_CAN_MspInit+0xa4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d13b      	bne.n	80026e6 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_CAN_MspInit+0xa8>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_CAN_MspInit+0xa8>)
 8002678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_CAN_MspInit+0xa8>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_CAN_MspInit+0xa8>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_CAN_MspInit+0xa8>)
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_CAN_MspInit+0xa8>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a6:	2303      	movs	r3, #3
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80026b6:	2309      	movs	r3, #9
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <HAL_CAN_MspInit+0xac>)
 80026c2:	f001 fffd 	bl	80046c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2105      	movs	r1, #5
 80026ca:	2013      	movs	r0, #19
 80026cc:	f001 ffac 	bl	8004628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80026d0:	2013      	movs	r0, #19
 80026d2:	f001 ffc5 	bl	8004660 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2105      	movs	r1, #5
 80026da:	2014      	movs	r0, #20
 80026dc:	f001 ffa4 	bl	8004628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80026e0:	2014      	movs	r0, #20
 80026e2:	f001 ffbd 	bl	8004660 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40006400 	.word	0x40006400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020c00 	.word	0x40020c00

080026fc <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800271c:	2301      	movs	r3, #1
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8002720:	2301      	movs	r3, #1
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8002724:	231b      	movs	r3, #27
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f001 f960 	bl	80039f8 <HAL_CAN_ConfigFilter>
}
 8002738:	bf00      	nop
 800273a:	3730      	adds	r7, #48	; 0x30
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8002740:	b580      	push	{r7, lr}
 8002742:	b08c      	sub	sp, #48	; 0x30
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8002760:	2301      	movs	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8002768:	231b      	movs	r3, #27
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4619      	mov	r1, r3
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 f93e 	bl	80039f8 <HAL_CAN_ConfigFilter>
}
 800277c:	bf00      	nop
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279a:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 80027a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80027ae:	4413      	add	r3, r2
 80027b0:	f107 0208 	add.w	r2, r7, #8
 80027b4:	2100      	movs	r1, #0
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f001 fb1d 	bl	8003df6 <HAL_CAN_GetRxMessage>
}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20004204 	.word	0x20004204

080027c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80027d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <vApplicationGetIdleTaskMemory+0x30>)
 80027de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200000a0 	.word	0x200000a0
 80027f8:	200000f4 	.word	0x200000f4

080027fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b0a8      	sub	sp, #160	; 0xa0
 8002800:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <MX_FREERTOS_Init+0xc0>)
 8002804:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002808:	461d      	mov	r5, r3
 800280a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002816:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fabe 	bl	8006d9e <osThreadCreate>
 8002822:	4602      	mov	r2, r0
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <MX_FREERTOS_Init+0xc4>)
 8002826:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <MX_FREERTOS_Init+0xc8>)
 800282a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800282e:	461d      	mov	r5, r3
 8002830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002834:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 800283c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f004 faab 	bl	8006d9e <osThreadCreate>
 8002848:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <MX_FREERTOS_Init+0xcc>)
 800284e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002852:	461d      	mov	r5, r3
 8002854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002858:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800285c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8002860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f004 fa99 	bl	8006d9e <osThreadCreate>
 800286c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <MX_FREERTOS_Init+0xd0>)
 8002872:	f107 0420 	add.w	r4, r7, #32
 8002876:	461d      	mov	r5, r3
 8002878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800287a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002880:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8002884:	f107 0320 	add.w	r3, r7, #32
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fa87 	bl	8006d9e <osThreadCreate>
 8002890:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <MX_FREERTOS_Init+0xd4>)
 8002896:	1d3c      	adds	r4, r7, #4
 8002898:	461d      	mov	r5, r3
 800289a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800289c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800289e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fa77 	bl	8006d9e <osThreadCreate>
 80028b0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80028b4:	bf00      	nop
 80028b6:	37a0      	adds	r7, #160	; 0xa0
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bdb0      	pop	{r4, r5, r7, pc}
 80028bc:	0800a298 	.word	0x0800a298
 80028c0:	20004340 	.word	0x20004340
 80028c4:	0800a2c0 	.word	0x0800a2c0
 80028c8:	0800a2e8 	.word	0x0800a2e8
 80028cc:	0800a310 	.word	0x0800a310
 80028d0:	0800a338 	.word	0x0800a338

080028d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f004 faaa 	bl	8006e36 <osDelay>
 80028e2:	e7fb      	b.n	80028dc <StartDefaultTask+0x8>

080028e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 031c 	add.w	r3, r7, #28
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b71      	ldr	r3, [pc, #452]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a6c      	ldr	r2, [pc, #432]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002920:	f043 0310 	orr.w	r3, r3, #16
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 800293c:	f043 0308 	orr.w	r3, r3, #8
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a5e      	ldr	r2, [pc, #376]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002990:	f043 0320 	orr.w	r3, r3, #32
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a49      	ldr	r2, [pc, #292]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <MX_GPIO_Init+0x1ec>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 80029be:	2201      	movs	r2, #1
 80029c0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80029c4:	4843      	ldr	r0, [pc, #268]	; (8002ad4 <MX_GPIO_Init+0x1f0>)
 80029c6:	f002 f825 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 80029ca:	2201      	movs	r2, #1
 80029cc:	211e      	movs	r1, #30
 80029ce:	4841      	ldr	r0, [pc, #260]	; (8002ad4 <MX_GPIO_Init+0x1f0>)
 80029d0:	f002 f820 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029da:	483f      	ldr	r0, [pc, #252]	; (8002ad8 <MX_GPIO_Init+0x1f4>)
 80029dc:	f002 f81a 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e6:	483d      	ldr	r0, [pc, #244]	; (8002adc <MX_GPIO_Init+0x1f8>)
 80029e8:	f002 f814 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 80029ec:	2320      	movs	r3, #32
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	4619      	mov	r1, r3
 80029fe:	4836      	ldr	r0, [pc, #216]	; (8002ad8 <MX_GPIO_Init+0x1f4>)
 8002a00:	f001 fe5e 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8002a04:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002a08:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	482d      	ldr	r0, [pc, #180]	; (8002ad4 <MX_GPIO_Init+0x1f0>)
 8002a1e:	f001 fe4f 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 8002a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	4829      	ldr	r0, [pc, #164]	; (8002adc <MX_GPIO_Init+0x1f8>)
 8002a38:	f001 fe42 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <MX_GPIO_Init+0x1fc>)
 8002a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <MX_GPIO_Init+0x200>)
 8002a50:	f001 fe36 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8002a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481a      	ldr	r0, [pc, #104]	; (8002ad8 <MX_GPIO_Init+0x1f4>)
 8002a6e:	f001 fe27 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8002a72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4814      	ldr	r0, [pc, #80]	; (8002adc <MX_GPIO_Init+0x1f8>)
 8002a8c:	f001 fe18 	bl	80046c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN 2 */
  //Configure voltage output pins
  HAL_GPIO_WritePin(GPIOH, VCC_1_Pin|VCC_2_Pin|VCC_3_Pin|VCC_4_Pin, GPIO_PIN_SET);
 8002a90:	2201      	movs	r2, #1
 8002a92:	213c      	movs	r1, #60	; 0x3c
 8002a94:	4814      	ldr	r0, [pc, #80]	; (8002ae8 <MX_GPIO_Init+0x204>)
 8002a96:	f001 ffbd 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = VCC_1_Pin|VCC_2_Pin|VCC_3_Pin|VCC_4_Pin;
 8002a9a:	233c      	movs	r3, #60	; 0x3c
 8002a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <MX_GPIO_Init+0x204>)
 8002ab2:	f001 fe05 	bl	80046c0 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2105      	movs	r1, #5
 8002aba:	2008      	movs	r0, #8
 8002abc:	f001 fdb4 	bl	8004628 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ac0:	2008      	movs	r0, #8
 8002ac2:	f001 fdcd 	bl	8004660 <HAL_NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3730      	adds	r7, #48	; 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40021400 	.word	0x40021400
 8002ae0:	10110000 	.word	0x10110000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40021c00 	.word	0x40021c00

08002aec <HAL_GPIO_EXTI_Callback>:




//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d12b      	bne.n	8002b54 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8002afc:	4817      	ldr	r0, [pc, #92]	; (8002b5c <HAL_GPIO_EXTI_Callback+0x70>)
 8002afe:	f7ff fdfd 	bl	80026fc <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8002b02:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	6810      	ldr	r0, [r2, #0]
 8002b0a:	6851      	ldr	r1, [r2, #4]
 8002b0c:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	7a7b      	ldrb	r3, [r7, #9]
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002b1c:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002b1e:	7abb      	ldrb	r3, [r7, #10]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	b21a      	sxth	r2, r3
 8002b24:	7afb      	ldrb	r3, [r7, #11]
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002b2c:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002b2e:	7b3b      	ldrb	r3, [r7, #12]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	7b7b      	ldrb	r3, [r7, #13]
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	b21b      	sxth	r3, r3
 8002b3c:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4603      	mov	r3, r0
 8002b44:	460a      	mov	r2, r1
 8002b46:	2101      	movs	r1, #1
 8002b48:	4806      	ldr	r0, [pc, #24]	; (8002b64 <HAL_GPIO_EXTI_Callback+0x78>)
 8002b4a:	f005 fb5b 	bl	8008204 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8002b4e:	4803      	ldr	r0, [pc, #12]	; (8002b5c <HAL_GPIO_EXTI_Callback+0x70>)
 8002b50:	f7ff fdf6 	bl	8002740 <can_filter_disable>


	}
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200041dc 	.word	0x200041dc
 8002b60:	20004204 	.word	0x20004204
 8002b64:	0800a354 	.word	0x0800a354

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6c:	f000 fe06 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b70:	f000 f824 	bl	8002bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b74:	f7ff feb6 	bl	80028e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002b78:	f7ff fd32 	bl	80025e0 <MX_CAN1_Init>
  MX_TIM4_Init();
 8002b7c:	f000 fa4e 	bl	800301c <MX_TIM4_Init>
  MX_TIM2_Init();
 8002b80:	f000 fab2 	bl	80030e8 <MX_TIM2_Init>
  MX_TIM12_Init();
 8002b84:	f000 fb14 	bl	80031b0 <MX_TIM12_Init>
  MX_UART7_Init();
 8002b88:	f000 fce6 	bl	8003558 <MX_UART7_Init>
  MX_USART6_Init();
 8002b8c:	f000 fd0e 	bl	80035ac <MX_USART6_Init>
  MX_TIM14_Init();
 8002b90:	f000 fb78 	bl	8003284 <MX_TIM14_Init>
  MX_TIM13_Init();
 8002b94:	f000 fb52 	bl	800323c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8002b98:	f7ff fae4 	bl	8002164 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <main+0x4c>)
 8002b9e:	f001 f80b 	bl	8003bb8 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8002ba2:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <main+0x50>)
 8002ba4:	f002 fc1b 	bl	80053de <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002ba8:	f7ff fe28 	bl	80027fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002bac:	f004 f8f0 	bl	8006d90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <main+0x48>
 8002bb2:	bf00      	nop
 8002bb4:	200041dc 	.word	0x200041dc
 8002bb8:	20004384 	.word	0x20004384

08002bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b094      	sub	sp, #80	; 0x50
 8002bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc2:	f107 0320 	add.w	r3, r7, #32
 8002bc6:	2230      	movs	r2, #48	; 0x30
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f005 fb12 	bl	80081f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <SystemClock_Config+0xd0>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <SystemClock_Config+0xd0>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <SystemClock_Config+0xd0>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c08:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <SystemClock_Config+0xd4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c26:	2302      	movs	r3, #2
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002c30:	2306      	movs	r3, #6
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c34:	23a8      	movs	r3, #168	; 0xa8
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c40:	f107 0320 	add.w	r3, r7, #32
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 ff31 	bl	8004aac <HAL_RCC_OscConfig>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c50:	f000 f846 	bl	8002ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c54:	230f      	movs	r3, #15
 8002c56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 f98a 	bl	8004f8c <HAL_RCC_ClockConfig>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c7e:	f000 f82f 	bl	8002ce0 <Error_Handler>
  }
}
 8002c82:	bf00      	nop
 8002c84:	3750      	adds	r7, #80	; 0x50
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d109      	bne.n	8002cba <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3301      	adds	r3, #1
 8002cac:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002cae:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8002cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cb4:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002cb6:	f001 fec6 	bl	8004a46 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8002cc4:	f000 fd7c 	bl	80037c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40001c00 	.word	0x40001c00
 8002cd4:	200002f4 	.word	0x200002f4
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40000c00 	.word	0x40000c00

08002ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <Error_Handler+0x6>

08002ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_MspInit+0x54>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_MspInit+0x54>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_MspInit+0x54>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_MspInit+0x54>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_MspInit+0x54>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_MspInit+0x54>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	210f      	movs	r1, #15
 8002d2a:	f06f 0001 	mvn.w	r0, #1
 8002d2e:	f001 fc7b 	bl	8004628 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800

08002d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	2032      	movs	r0, #50	; 0x32
 8002d56:	f001 fc67 	bl	8004628 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d5a:	2032      	movs	r0, #50	; 0x32
 8002d5c:	f001 fc80 	bl	8004660 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <HAL_InitTick+0xa4>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <HAL_InitTick+0xa4>)
 8002d6a:	f043 0308 	orr.w	r3, r3, #8
 8002d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d70:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <HAL_InitTick+0xa4>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d7c:	f107 0210 	add.w	r2, r7, #16
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 facc 	bl	8005324 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002d8c:	f002 faa2 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8002d90:	4603      	mov	r3, r0
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <HAL_InitTick+0xa8>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9b      	lsrs	r3, r3, #18
 8002da0:	3b01      	subs	r3, #1
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_InitTick+0xac>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_InitTick+0xb0>)
 8002da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_InitTick+0xac>)
 8002dac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002db0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_InitTick+0xac>)
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_InitTick+0xac>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_InitTick+0xac>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002dc4:	4809      	ldr	r0, [pc, #36]	; (8002dec <HAL_InitTick+0xac>)
 8002dc6:	f002 fadf 	bl	8005388 <HAL_TIM_Base_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002dd0:	4806      	ldr	r0, [pc, #24]	; (8002dec <HAL_InitTick+0xac>)
 8002dd2:	f002 fb04 	bl	80053de <HAL_TIM_Base_Start_IT>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	e000      	b.n	8002ddc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3730      	adds	r7, #48	; 0x30
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	431bde83 	.word	0x431bde83
 8002dec:	20004344 	.word	0x20004344
 8002df0:	40000c00 	.word	0x40000c00

08002df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <NMI_Handler+0x4>

08002dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dfe:	e7fe      	b.n	8002dfe <HardFault_Handler+0x4>

08002e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e04:	e7fe      	b.n	8002e04 <MemManage_Handler+0x4>

08002e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e0a:	e7fe      	b.n	8002e0a <BusFault_Handler+0x4>

08002e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	e7fe      	b.n	8002e10 <UsageFault_Handler+0x4>

08002e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e24:	2004      	movs	r0, #4
 8002e26:	f001 fe29 	bl	8004a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <CAN1_TX_IRQHandler+0x10>)
 8002e36:	f001 f916 	bl	8004066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200041dc 	.word	0x200041dc

08002e44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <CAN1_RX0_IRQHandler+0x10>)
 8002e4a:	f001 f90c 	bl	8004066 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200041dc 	.word	0x200041dc

08002e58 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002e5e:	f002 fb4b 	bl	80054f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20004384 	.word	0x20004384

08002e6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e72:	f002 fb41 	bl	80054f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200043c4 	.word	0x200043c4

08002e80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM5_IRQHandler+0x10>)
 8002e86:	f002 fb37 	bl	80054f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20004344 	.word	0x20004344

08002e94 <USART6_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&husart6);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <USART6_IRQHandler+0x10>)
 8002e9a:	f003 f965 	bl	8006168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20004404 	.word	0x20004404

08002ea8 <_read>:
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <_read+0x28>
 8002eba:	f3af 8000 	nop.w
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	60ba      	str	r2, [r7, #8]
 8002ec6:	b2ca      	uxtb	r2, r1
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf0      	blt.n	8002eba <_read+0x12>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_write>:
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e009      	b.n	8002f08 <_write+0x26>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fb19 	bl	8003534 <__io_putchar>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf1      	blt.n	8002ef4 <_write+0x12>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_close>:
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_fstat>:
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	2300      	movs	r3, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <_isatty>:
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <_lseek>:
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	2300      	movs	r3, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <_sbrk>:
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <_sbrk+0x5c>)
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <_sbrk+0x60>)
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk+0x22>
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <_sbrk+0x64>)
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <_sbrk+0x68>)
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <_sbrk+0x64>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d207      	bcs.n	8002fc4 <_sbrk+0x40>
 8002fb4:	f005 f8f4 	bl	80081a0 <__errno>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	230c      	movs	r3, #12
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	e009      	b.n	8002fd8 <_sbrk+0x54>
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <_sbrk+0x64>)
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20030000 	.word	0x20030000
 8002fe4:	00000400 	.word	0x00000400
 8002fe8:	200002f8 	.word	0x200002f8
 8002fec:	20004490 	.word	0x20004490

08002ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <SystemInit+0x28>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	4a07      	ldr	r2, [pc, #28]	; (8003018 <SystemInit+0x28>)
 8002ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <SystemInit+0x28>)
 8003006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800300a:	609a      	str	r2, [r3, #8]
#endif
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <MX_TIM4_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim2;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	f107 0320 	add.w	r3, r7, #32
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	615a      	str	r2, [r3, #20]
 800303c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <MX_TIM4_Init+0xc4>)
 8003040:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <MX_TIM4_Init+0xc8>)
 8003042:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003044:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <MX_TIM4_Init+0xc4>)
 8003046:	2253      	movs	r2, #83	; 0x53
 8003048:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304a:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <MX_TIM4_Init+0xc4>)
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2500-1;
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <MX_TIM4_Init+0xc4>)
 8003052:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003056:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003058:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <MX_TIM4_Init+0xc4>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <MX_TIM4_Init+0xc4>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003064:	481e      	ldr	r0, [pc, #120]	; (80030e0 <MX_TIM4_Init+0xc4>)
 8003066:	f002 f9de 	bl	8005426 <HAL_TIM_PWM_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003070:	f7ff fe36 	bl	8002ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800307c:	f107 0320 	add.w	r3, r7, #32
 8003080:	4619      	mov	r1, r3
 8003082:	4817      	ldr	r0, [pc, #92]	; (80030e0 <MX_TIM4_Init+0xc4>)
 8003084:	f002 fea4 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800308e:	f7ff fe27 	bl	8002ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003092:	2360      	movs	r3, #96	; 0x60
 8003094:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003096:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800309a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	4619      	mov	r1, r3
 80030aa:	480d      	ldr	r0, [pc, #52]	; (80030e0 <MX_TIM4_Init+0xc4>)
 80030ac:	f002 fb2c 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80030b6:	f7ff fe13 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	2208      	movs	r2, #8
 80030be:	4619      	mov	r1, r3
 80030c0:	4807      	ldr	r0, [pc, #28]	; (80030e0 <MX_TIM4_Init+0xc4>)
 80030c2:	f002 fb21 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80030cc:	f7ff fe08 	bl	8002ce0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80030d0:	4803      	ldr	r0, [pc, #12]	; (80030e0 <MX_TIM4_Init+0xc4>)
 80030d2:	f000 f9a7 	bl	8003424 <HAL_TIM_MspPostInit>

}
 80030d6:	bf00      	nop
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20004050 	.word	0x20004050
 80030e4:	40000800 	.word	0x40000800

080030e8 <MX_TIM2_Init>:

/* USER CODE BEGIN 1 */
//Timer 2 init
void MX_TIM2_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ee:	f107 0320 	add.w	r3, r7, #32
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	611a      	str	r2, [r3, #16]
 8003106:	615a      	str	r2, [r3, #20]
 8003108:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <MX_TIM2_Init+0xc4>)
 800310c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <MX_TIM2_Init+0xc4>)
 8003114:	2253      	movs	r2, #83	; 0x53
 8003116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <MX_TIM2_Init+0xc4>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500-1;
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <MX_TIM2_Init+0xc4>)
 8003120:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8003124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <MX_TIM2_Init+0xc4>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <MX_TIM2_Init+0xc4>)
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003132:	481e      	ldr	r0, [pc, #120]	; (80031ac <MX_TIM2_Init+0xc4>)
 8003134:	f002 f977 	bl	8005426 <HAL_TIM_PWM_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800313e:	f7ff fdcf 	bl	8002ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	4619      	mov	r1, r3
 8003150:	4816      	ldr	r0, [pc, #88]	; (80031ac <MX_TIM2_Init+0xc4>)
 8003152:	f002 fe3d 	bl	8005dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800315c:	f7ff fdc0 	bl	8002ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003160:	2360      	movs	r3, #96	; 0x60
 8003162:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2000;
 8003164:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2200      	movs	r2, #0
 8003176:	4619      	mov	r1, r3
 8003178:	480c      	ldr	r0, [pc, #48]	; (80031ac <MX_TIM2_Init+0xc4>)
 800317a:	f002 fac5 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003184:	f7ff fdac 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	2208      	movs	r2, #8
 800318c:	4619      	mov	r1, r3
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <MX_TIM2_Init+0xc4>)
 8003190:	f002 faba 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800319a:	f7ff fda1 	bl	8002ce0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800319e:	4803      	ldr	r0, [pc, #12]	; (80031ac <MX_TIM2_Init+0xc4>)
 80031a0:	f000 f940 	bl	8003424 <HAL_TIM_MspPostInit>

}
 80031a4:	bf00      	nop
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000419c 	.word	0x2000419c

080031b0 <MX_TIM12_Init>:
/* USER CODE END 1 */

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
 80031c4:	615a      	str	r2, [r3, #20]
 80031c6:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <MX_TIM12_Init+0x84>)
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <MX_TIM12_Init+0x88>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <MX_TIM12_Init+0x84>)
 80031d0:	2223      	movs	r2, #35	; 0x23
 80031d2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_TIM12_Init+0x84>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <MX_TIM12_Init+0x84>)
 80031dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80031e0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <MX_TIM12_Init+0x84>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_TIM12_Init+0x84>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80031ee:	4811      	ldr	r0, [pc, #68]	; (8003234 <MX_TIM12_Init+0x84>)
 80031f0:	f002 f919 	bl	8005426 <HAL_TIM_PWM_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80031fa:	f7ff fd71 	bl	8002ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031fe:	2360      	movs	r3, #96	; 0x60
 8003200:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	2200      	movs	r2, #0
 8003212:	4619      	mov	r1, r3
 8003214:	4807      	ldr	r0, [pc, #28]	; (8003234 <MX_TIM12_Init+0x84>)
 8003216:	f002 fa77 	bl	8005708 <HAL_TIM_PWM_ConfigChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8003220:	f7ff fd5e 	bl	8002ce0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8003224:	4803      	ldr	r0, [pc, #12]	; (8003234 <MX_TIM12_Init+0x84>)
 8003226:	f000 f8fd 	bl	8003424 <HAL_TIM_MspPostInit>

}
 800322a:	bf00      	nop
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20004244 	.word	0x20004244
 8003238:	40001800 	.word	0x40001800

0800323c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <MX_TIM13_Init+0x40>)
 8003242:	4a0f      	ldr	r2, [pc, #60]	; (8003280 <MX_TIM13_Init+0x44>)
 8003244:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <MX_TIM13_Init+0x40>)
 8003248:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800324c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <MX_TIM13_Init+0x40>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <MX_TIM13_Init+0x40>)
 8003256:	f242 720f 	movw	r2, #9999	; 0x270f
 800325a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <MX_TIM13_Init+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <MX_TIM13_Init+0x40>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <MX_TIM13_Init+0x40>)
 800326a:	f002 f88d 	bl	8005388 <HAL_TIM_Base_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8003274:	f7ff fd34 	bl	8002ce0 <Error_Handler>
  }

}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20004384 	.word	0x20004384
 8003280:	40001c00 	.word	0x40001c00

08003284 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <MX_TIM14_Init+0x40>)
 800328a:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <MX_TIM14_Init+0x44>)
 800328c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <MX_TIM14_Init+0x40>)
 8003290:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8003294:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <MX_TIM14_Init+0x40>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <MX_TIM14_Init+0x40>)
 800329e:	f242 720f 	movw	r2, #9999	; 0x270f
 80032a2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <MX_TIM14_Init+0x40>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <MX_TIM14_Init+0x40>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80032b0:	4804      	ldr	r0, [pc, #16]	; (80032c4 <MX_TIM14_Init+0x40>)
 80032b2:	f002 f869 	bl	8005388 <HAL_TIM_Base_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80032bc:	f7ff fd10 	bl	8002ce0 <Error_Handler>
  }

}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200043c4 	.word	0x200043c4
 80032c8:	40002000 	.word	0x40002000

080032cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_TIM_PWM_MspInit+0x8c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
	    __HAL_RCC_TIM2_CLK_ENABLE();
	  /* USER CODE BEGIN TIM12_MspInit 1 */

	  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80032fa:	e026      	b.n	800334a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a17      	ldr	r2, [pc, #92]	; (8003360 <HAL_TIM_PWM_MspInit+0x94>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10e      	bne.n	8003324 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a13      	ldr	r2, [pc, #76]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 8003310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
}
 8003322:	e012      	b.n	800334a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM2)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d10d      	bne.n	800334a <HAL_TIM_PWM_MspInit+0x7e>
	    __HAL_RCC_TIM2_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_TIM_PWM_MspInit+0x90>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40000800 	.word	0x40000800
 800335c:	40023800 	.word	0x40023800
 8003360:	40001800 	.word	0x40001800

08003364 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_TIM_Base_MspInit+0xb4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d116      	bne.n	80033a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a27      	ldr	r2, [pc, #156]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2105      	movs	r1, #5
 8003396:	202c      	movs	r0, #44	; 0x2c
 8003398:	f001 f946 	bl	8004628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800339c:	202c      	movs	r0, #44	; 0x2c
 800339e:	f001 f95f 	bl	8004660 <HAL_NVIC_EnableIRQ>
 80033a2:	e01a      	b.n	80033da <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_TIM_Base_MspInit+0xbc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d115      	bne.n	80033da <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2105      	movs	r1, #5
 80033ce:	202d      	movs	r0, #45	; 0x2d
 80033d0:	f001 f92a 	bl	8004628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80033d4:	202d      	movs	r0, #45	; 0x2d
 80033d6:	f001 f943 	bl	8004660 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <HAL_TIM_Base_MspInit+0xb4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d115      	bne.n	8003410 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	6413      	str	r3, [r2, #64]	; 0x40
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_TIM_Base_MspInit+0xb8>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8003400:	2200      	movs	r2, #0
 8003402:	2101      	movs	r1, #1
 8003404:	202c      	movs	r0, #44	; 0x2c
 8003406:	f001 f90f 	bl	8004628 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800340a:	202c      	movs	r0, #44	; 0x2c
 800340c:	f001 f928 	bl	8004660 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40001c00 	.word	0x40001c00
 800341c:	40023800 	.word	0x40023800
 8003420:	40002000 	.word	0x40002000

08003424 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_TIM_MspPostInit+0xf8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d11f      	bne.n	8003486 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a34      	ldr	r2, [pc, #208]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8003462:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003474:	2302      	movs	r3, #2
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	4619      	mov	r1, r3
 800347e:	4829      	ldr	r0, [pc, #164]	; (8003524 <HAL_TIM_MspPostInit+0x100>)
 8003480:	f001 f91e 	bl	80046c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003484:	e046      	b.n	8003514 <HAL_TIM_MspPostInit+0xf0>
  else if (timHandle->Instance==TIM2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d11e      	bne.n	80034ce <HAL_TIM_MspPostInit+0xaa>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6313      	str	r3, [r2, #48]	; 0x30
 80034a0:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
	    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80034ac:	2305      	movs	r3, #5
 80034ae:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034bc:	2301      	movs	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	4818      	ldr	r0, [pc, #96]	; (8003528 <HAL_TIM_MspPostInit+0x104>)
 80034c8:	f001 f8fa 	bl	80046c0 <HAL_GPIO_Init>
}
 80034cc:	e022      	b.n	8003514 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM12)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a16      	ldr	r2, [pc, #88]	; (800352c <HAL_TIM_MspPostInit+0x108>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d11d      	bne.n	8003514 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4a0f      	ldr	r2, [pc, #60]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 80034e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e6:	6313      	str	r3, [r2, #48]	; 0x30
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_TIM_MspPostInit+0xfc>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	2300      	movs	r3, #0
 8003502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003504:	2309      	movs	r3, #9
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	4619      	mov	r1, r3
 800350e:	4808      	ldr	r0, [pc, #32]	; (8003530 <HAL_TIM_MspPostInit+0x10c>)
 8003510:	f001 f8d6 	bl	80046c0 <HAL_GPIO_Init>
}
 8003514:	bf00      	nop
 8003516:	3728      	adds	r7, #40	; 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40000800 	.word	0x40000800
 8003520:	40023800 	.word	0x40023800
 8003524:	40020c00 	.word	0x40020c00
 8003528:	40020000 	.word	0x40020000
 800352c:	40001800 	.word	0x40001800
 8003530:	40021c00 	.word	0x40021c00

08003534 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 800353c:	1d39      	adds	r1, r7, #4
 800353e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003542:	2201      	movs	r2, #1
 8003544:	4803      	ldr	r0, [pc, #12]	; (8003554 <__io_putchar+0x20>)
 8003546:	f002 fd20 	bl	8005f8a <HAL_UART_Transmit>

  return ch;
 800354a:	687b      	ldr	r3, [r7, #4]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20004444 	.word	0x20004444

08003558 <MX_UART7_Init>:
UART_HandleTypeDef husart6;
//extern char *pdata[PACKLEN+1];

/* UART7 init function */
void MX_UART7_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <MX_UART7_Init+0x4c>)
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <MX_UART7_Init+0x50>)
 8003560:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <MX_UART7_Init+0x4c>)
 8003564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003568:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <MX_UART7_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003570:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <MX_UART7_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <MX_UART7_Init+0x4c>)
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800357c:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <MX_UART7_Init+0x4c>)
 800357e:	220c      	movs	r2, #12
 8003580:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <MX_UART7_Init+0x4c>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <MX_UART7_Init+0x4c>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <MX_UART7_Init+0x4c>)
 8003590:	f002 fcae 	bl	8005ef0 <HAL_UART_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800359a:	f7ff fba1 	bl	8002ce0 <Error_Handler>
  }

}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20004444 	.word	0x20004444
 80035a8:	40007800 	.word	0x40007800

080035ac <MX_USART6_Init>:

/* USART6 init function */
void MX_USART6_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  husart6.Instance = USART6;
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <MX_USART6_Init+0x58>)
 80035b2:	4a15      	ldr	r2, [pc, #84]	; (8003608 <MX_USART6_Init+0x5c>)
 80035b4:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <MX_USART6_Init+0x58>)
 80035b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035bc:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = UART_WORDLENGTH_8B;
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <MX_USART6_Init+0x58>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = UART_STOPBITS_1;
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <MX_USART6_Init+0x58>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = UART_PARITY_NONE;
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <MX_USART6_Init+0x58>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = UART_MODE_TX_RX;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <MX_USART6_Init+0x58>)
 80035d2:	220c      	movs	r2, #12
 80035d4:	615a      	str	r2, [r3, #20]
  husart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <MX_USART6_Init+0x58>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
  husart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035dc:	4b09      	ldr	r3, [pc, #36]	; (8003604 <MX_USART6_Init+0x58>)
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&husart6) != HAL_OK)
 80035e2:	4808      	ldr	r0, [pc, #32]	; (8003604 <MX_USART6_Init+0x58>)
 80035e4:	f002 fc84 	bl	8005ef0 <HAL_UART_Init>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <MX_USART6_Init+0x48>
  {
    Error_Handler();
 80035ee:	f7ff fb77 	bl	8002ce0 <Error_Handler>
	HAL_UART_Receive_IT(&husart6, pdata, (PACKLEN));

	  //HAL_UART_Receive_IT(&husart6, UART6_rxBuffer_temp, 12);
	  //printf("sucessfully enabled uart6 \r\n");
  }
}
 80035f2:	e004      	b.n	80035fe <MX_USART6_Init+0x52>
	HAL_UART_Receive_IT(&husart6, pdata, (PACKLEN));
 80035f4:	2220      	movs	r2, #32
 80035f6:	4905      	ldr	r1, [pc, #20]	; (800360c <MX_USART6_Init+0x60>)
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <MX_USART6_Init+0x58>)
 80035fa:	f002 fd5f 	bl	80060bc <HAL_UART_Receive_IT>
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20004404 	.word	0x20004404
 8003608:	40011400 	.word	0x40011400
 800360c:	200042bc 	.word	0x200042bc

08003610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a38      	ldr	r2, [pc, #224]	; (8003710 <HAL_UART_MspInit+0x100>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d12c      	bne.n	800368c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_UART_MspInit+0x104>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a36      	ldr	r2, [pc, #216]	; (8003714 <HAL_UART_MspInit+0x104>)
 800363c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_UART_MspInit+0x104>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_UART_MspInit+0x104>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <HAL_UART_MspInit+0x104>)
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <HAL_UART_MspInit+0x104>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800366a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800366e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003674:	2301      	movs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800367c:	2308      	movs	r3, #8
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	4619      	mov	r1, r3
 8003686:	4824      	ldr	r0, [pc, #144]	; (8003718 <HAL_UART_MspInit+0x108>)
 8003688:	f001 f81a 	bl	80046c0 <HAL_GPIO_Init>
  }

  if(uartHandle->Instance==USART6)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a22      	ldr	r2, [pc, #136]	; (800371c <HAL_UART_MspInit+0x10c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d137      	bne.n	8003706 <HAL_UART_MspInit+0xf6>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
	/* UART7 clock enable */
	__HAL_RCC_USART6_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_UART_MspInit+0x104>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_UART_MspInit+0x104>)
 80036a0:	f043 0320 	orr.w	r3, r3, #32
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_UART_MspInit+0x104>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	613b      	str	r3, [r7, #16]
 80036b0:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_UART_MspInit+0x104>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_UART_MspInit+0x104>)
 80036bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_UART_MspInit+0x104>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
	/**USART6 GPIO Configuration
	  PG14     ------> USART6_TX
	  PG9     ------> USART6_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80036ce:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80036d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036dc:	2303      	movs	r3, #3
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80036e0:	2308      	movs	r3, #8
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	4619      	mov	r1, r3
 80036ea:	480d      	ldr	r0, [pc, #52]	; (8003720 <HAL_UART_MspInit+0x110>)
 80036ec:	f000 ffe8 	bl	80046c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */
	//USART6 Interrput Init
	HAL_NVIC_SetPriority(USART6_IRQn,5,0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2105      	movs	r1, #5
 80036f4:	2047      	movs	r0, #71	; 0x47
 80036f6:	f000 ff97 	bl	8004628 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80036fa:	2047      	movs	r0, #71	; 0x47
 80036fc:	f000 ffb0 	bl	8004660 <HAL_NVIC_EnableIRQ>
	printf("initialized usart 6 via the uart function \r \n");
 8003700:	4808      	ldr	r0, [pc, #32]	; (8003724 <HAL_UART_MspInit+0x114>)
 8003702:	f004 fdf3 	bl	80082ec <puts>
  /* USER CODE END UART7_MspInit 1 */
  }
}
 8003706:	bf00      	nop
 8003708:	3730      	adds	r7, #48	; 0x30
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40007800 	.word	0x40007800
 8003714:	40023800 	.word	0x40023800
 8003718:	40021000 	.word	0x40021000
 800371c:	40011400 	.word	0x40011400
 8003720:	40021800 	.word	0x40021800
 8003724:	0800a3f4 	.word	0x0800a3f4

08003728 <Reset_Handler>:
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopFillZerobss+0x14>
 800372c:	2100      	movs	r1, #0
 800372e:	e003      	b.n	8003738 <LoopCopyDataInit>

08003730 <CopyDataInit>:
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <LoopFillZerobss+0x18>)
 8003732:	585b      	ldr	r3, [r3, r1]
 8003734:	5043      	str	r3, [r0, r1]
 8003736:	3104      	adds	r1, #4

08003738 <LoopCopyDataInit>:
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <LoopFillZerobss+0x1c>)
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <LoopFillZerobss+0x20>)
 800373c:	1842      	adds	r2, r0, r1
 800373e:	429a      	cmp	r2, r3
 8003740:	d3f6      	bcc.n	8003730 <CopyDataInit>
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <LoopFillZerobss+0x24>)
 8003744:	e002      	b.n	800374c <LoopFillZerobss>

08003746 <FillZerobss>:
 8003746:	2300      	movs	r3, #0
 8003748:	f842 3b04 	str.w	r3, [r2], #4

0800374c <LoopFillZerobss>:
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <LoopFillZerobss+0x28>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d3f9      	bcc.n	8003746 <FillZerobss>
 8003752:	f7ff fc4d 	bl	8002ff0 <SystemInit>
 8003756:	f004 fd29 	bl	80081ac <__libc_init_array>
 800375a:	f7ff fa05 	bl	8002b68 <main>
 800375e:	4770      	bx	lr
 8003760:	20030000 	.word	0x20030000
 8003764:	0800a530 	.word	0x0800a530
 8003768:	20000000 	.word	0x20000000
 800376c:	20000078 	.word	0x20000078
 8003770:	20000078 	.word	0x20000078
 8003774:	2000448c 	.word	0x2000448c

08003778 <ADC_IRQHandler>:
 8003778:	e7fe      	b.n	8003778 <ADC_IRQHandler>
	...

0800377c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <HAL_Init+0x40>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_Init+0x40>)
 8003786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800378a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <HAL_Init+0x40>)
 8003792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_Init+0x40>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <HAL_Init+0x40>)
 800379e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a4:	2003      	movs	r0, #3
 80037a6:	f000 ff34 	bl	8004612 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7ff fac8 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b0:	f7ff fa9a 	bl	8002ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_IncTick+0x20>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_IncTick+0x24>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_IncTick+0x24>)
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000008 	.word	0x20000008
 80037e4:	20004484 	.word	0x20004484

080037e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return uwTick;
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <HAL_GetTick+0x14>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20004484 	.word	0x20004484

08003800 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0ed      	b.n	80039ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe ff14 	bl	800264c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0202 	bic.w	r2, r2, #2
 8003832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7ff ffd8 	bl	80037e8 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800383a:	e012      	b.n	8003862 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800383c:	f7ff ffd4 	bl	80037e8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b0a      	cmp	r3, #10
 8003848:	d90b      	bls.n	8003862 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2205      	movs	r2, #5
 800385a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0c5      	b.n	80039ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e5      	bne.n	800383c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003880:	f7ff ffb2 	bl	80037e8 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003886:	e012      	b.n	80038ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003888:	f7ff ffae 	bl	80037e8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b0a      	cmp	r3, #10
 8003894:	d90b      	bls.n	80038ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2205      	movs	r2, #5
 80038a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e09f      	b.n	80039ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0e5      	beq.n	8003888 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7e1b      	ldrb	r3, [r3, #24]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7e5b      	ldrb	r3, [r3, #25]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d108      	bne.n	8003900 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e007      	b.n	8003910 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7e9b      	ldrb	r3, [r3, #26]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0220 	orr.w	r2, r2, #32
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0220 	bic.w	r2, r2, #32
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7edb      	ldrb	r3, [r3, #27]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d108      	bne.n	8003954 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0210 	bic.w	r2, r2, #16
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0210 	orr.w	r2, r2, #16
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	7f1b      	ldrb	r3, [r3, #28]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d108      	bne.n	800397e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e007      	b.n	800398e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0208 	bic.w	r2, r2, #8
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7f5b      	ldrb	r3, [r3, #29]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0204 	orr.w	r2, r2, #4
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e007      	b.n	80039b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0204 	bic.w	r2, r2, #4
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	ea42 0103 	orr.w	r1, r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	1e5a      	subs	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d003      	beq.n	8003a1e <HAL_CAN_ConfigFilter+0x26>
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f040 80be 	bne.w	8003b9a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003a1e:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <HAL_CAN_ConfigFilter+0x1bc>)
 8003a20:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2201      	movs	r2, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d123      	bne.n	8003ac8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003aa2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3248      	adds	r2, #72	; 0x48
 8003aa8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003abc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	3348      	adds	r3, #72	; 0x48
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d122      	bne.n	8003b16 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003af0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3248      	adds	r2, #72	; 0x48
 8003af6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b0c:	6979      	ldr	r1, [r7, #20]
 8003b0e:	3348      	adds	r3, #72	; 0x48
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	401a      	ands	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b30:	e007      	b.n	8003b42 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	401a      	ands	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b5c:	e007      	b.n	8003b6e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b8c:	f023 0201 	bic.w	r2, r3, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e006      	b.n	8003ba8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40006400 	.word	0x40006400

08003bb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d12e      	bne.n	8003c2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003be4:	f7ff fe00 	bl	80037e8 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bea:	e012      	b.n	8003c12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bec:	f7ff fdfc 	bl	80037e8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b0a      	cmp	r3, #10
 8003bf8:	d90b      	bls.n	8003c12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2205      	movs	r2, #5
 8003c0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e012      	b.n	8003c38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e006      	b.n	8003c38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d003      	beq.n	8003c6c <HAL_CAN_AddTxMessage+0x2c>
 8003c64:	7ffb      	ldrb	r3, [r7, #31]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	f040 80b8 	bne.w	8003ddc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80a0 	beq.w	8003dcc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	0e1b      	lsrs	r3, r3, #24
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d907      	bls.n	8003cac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e09e      	b.n	8003dea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003cac:	2201      	movs	r2, #1
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	6809      	ldr	r1, [r1, #0]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	440b      	add	r3, r1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e00f      	b.n	8003cfa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ce4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003cee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	440b      	add	r3, r1
 8003cf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3318      	adds	r3, #24
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	440b      	add	r3, r1
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	7d1b      	ldrb	r3, [r3, #20]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d111      	bne.n	8003d3a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3318      	adds	r3, #24
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3318      	adds	r3, #24
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	440b      	add	r3, r1
 8003d36:	3304      	adds	r3, #4
 8003d38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3307      	adds	r3, #7
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	061a      	lsls	r2, r3, #24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3306      	adds	r3, #6
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3305      	adds	r3, #5
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	4313      	orrs	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	3204      	adds	r2, #4
 8003d5a:	7812      	ldrb	r2, [r2, #0]
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	6811      	ldr	r1, [r2, #0]
 8003d62:	ea43 0200 	orr.w	r2, r3, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003d70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3303      	adds	r3, #3
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	061a      	lsls	r2, r3, #24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3301      	adds	r3, #1
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	021b      	lsls	r3, r3, #8
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	4610      	mov	r0, r2
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	6811      	ldr	r1, [r2, #0]
 8003d98:	ea43 0200 	orr.w	r2, r3, r0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003da6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	3318      	adds	r3, #24
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	4413      	add	r3, r2
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6811      	ldr	r1, [r2, #0]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3318      	adds	r3, #24
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	440b      	add	r3, r1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e00e      	b.n	8003dea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e006      	b.n	8003dea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3724      	adds	r7, #36	; 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003df6:	b480      	push	{r7}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d003      	beq.n	8003e1a <HAL_CAN_GetRxMessage+0x24>
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	f040 80f3 	bne.w	8004000 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10e      	bne.n	8003e3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d116      	bne.n	8003e5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0e7      	b.n	800400e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0d8      	b.n	800400e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	331b      	adds	r3, #27
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	4413      	add	r3, r2
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0204 	and.w	r2, r3, #4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	331b      	adds	r3, #27
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	4413      	add	r3, r2
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0d5b      	lsrs	r3, r3, #21
 8003e8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	e00b      	b.n	8003eac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	331b      	adds	r3, #27
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	4413      	add	r3, r2
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	08db      	lsrs	r3, r3, #3
 8003ea4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	331b      	adds	r3, #27
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4413      	add	r3, r2
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0202 	and.w	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	331b      	adds	r3, #27
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 020f 	and.w	r2, r3, #15
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	331b      	adds	r3, #27
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	331b      	adds	r3, #27
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0a1a      	lsrs	r2, r3, #8
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0c1a      	lsrs	r2, r3, #16
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	3302      	adds	r3, #2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0e1a      	lsrs	r2, r3, #24
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	3303      	adds	r3, #3
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	3304      	adds	r3, #4
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	0a1a      	lsrs	r2, r3, #8
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	3305      	adds	r3, #5
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4413      	add	r3, r2
 8003faa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0c1a      	lsrs	r2, r3, #16
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	3306      	adds	r3, #6
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0e1a      	lsrs	r2, r3, #24
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	3307      	adds	r3, #7
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0220 	orr.w	r2, r2, #32
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e007      	b.n	8003ffc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0220 	orr.w	r2, r2, #32
 8003ffa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e006      	b.n	800400e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d002      	beq.n	8004038 <HAL_CAN_ActivateNotification+0x1e>
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d109      	bne.n	800404c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6959      	ldr	r1, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e006      	b.n	800405a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b08a      	sub	sp, #40	; 0x28
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d07c      	beq.n	80041a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d023      	beq.n	80040fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f97d 	bl	80043c8 <HAL_CAN_TxMailbox0CompleteCallback>
 80040ce:	e016      	b.n	80040fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
 80040e2:	e00c      	b.n	80040fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
 80040f6:	e002      	b.n	80040fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f983 	bl	8004404 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d024      	beq.n	8004152 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004110:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f95d 	bl	80043dc <HAL_CAN_TxMailbox1CompleteCallback>
 8004122:	e016      	b.n	8004152 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
 8004136:	e00c      	b.n	8004152 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	e002      	b.n	8004152 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f963 	bl	8004418 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d024      	beq.n	80041a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004164:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f93d 	bl	80043f0 <HAL_CAN_TxMailbox2CompleteCallback>
 8004176:	e016      	b.n	80041a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
 800418a:	e00c      	b.n	80041a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	e002      	b.n	80041a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f943 	bl	800442c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2210      	movs	r2, #16
 80041c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2208      	movs	r2, #8
 80041e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f92a 	bl	8004440 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fe fabd 	bl	8002784 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00c      	beq.n	800422e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b00      	cmp	r3, #0
 800421c:	d007      	beq.n	800422e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2210      	movs	r2, #16
 800422c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2208      	movs	r2, #8
 8004248:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f90c 	bl	8004468 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8f3 	bl	8004454 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2210      	movs	r2, #16
 8004288:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8f6 	bl	800447c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00b      	beq.n	80042b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f8ef 	bl	8004490 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d075      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d06c      	beq.n	80043a0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004320:	2b00      	cmp	r3, #0
 8004322:	d03d      	beq.n	80043a0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800432a:	2b00      	cmp	r3, #0
 800432c:	d038      	beq.n	80043a0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004334:	2b30      	cmp	r3, #48	; 0x30
 8004336:	d017      	beq.n	8004368 <HAL_CAN_IRQHandler+0x302>
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d804      	bhi.n	8004346 <HAL_CAN_IRQHandler+0x2e0>
 800433c:	2b10      	cmp	r3, #16
 800433e:	d009      	beq.n	8004354 <HAL_CAN_IRQHandler+0x2ee>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d00c      	beq.n	800435e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004344:	e024      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004346:	2b50      	cmp	r3, #80	; 0x50
 8004348:	d018      	beq.n	800437c <HAL_CAN_IRQHandler+0x316>
 800434a:	2b60      	cmp	r3, #96	; 0x60
 800434c:	d01b      	beq.n	8004386 <HAL_CAN_IRQHandler+0x320>
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	d00f      	beq.n	8004372 <HAL_CAN_IRQHandler+0x30c>
            break;
 8004352:	e01d      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800435c:	e018      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	f043 0310 	orr.w	r3, r3, #16
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004366:	e013      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004370:	e00e      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800437a:	e009      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004384:	e004      	b.n	8004390 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800438e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800439e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2204      	movs	r2, #4
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f872 	bl	80044a4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043c0:	bf00      	nop
 80043c2:	3728      	adds	r7, #40	; 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <__NVIC_SetPriorityGrouping+0x44>)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	60d3      	str	r3, [r2, #12]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <__NVIC_GetPriorityGrouping+0x18>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	0a1b      	lsrs	r3, r3, #8
 800450a:	f003 0307 	and.w	r3, r3, #7
}
 800450e:	4618      	mov	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	2b00      	cmp	r3, #0
 800452c:	db0b      	blt.n	8004546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	f003 021f 	and.w	r2, r3, #31
 8004534:	4907      	ldr	r1, [pc, #28]	; (8004554 <__NVIC_EnableIRQ+0x38>)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2001      	movs	r0, #1
 800453e:	fa00 f202 	lsl.w	r2, r0, r2
 8004542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db0a      	blt.n	8004582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	490c      	ldr	r1, [pc, #48]	; (80045a4 <__NVIC_SetPriority+0x4c>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	440b      	add	r3, r1
 800457c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004580:	e00a      	b.n	8004598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4908      	ldr	r1, [pc, #32]	; (80045a8 <__NVIC_SetPriority+0x50>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3b04      	subs	r3, #4
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	440b      	add	r3, r1
 8004596:	761a      	strb	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000e100 	.word	0xe000e100
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf28      	it	cs
 80045ca:	2304      	movcs	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d902      	bls.n	80045dc <NVIC_EncodePriority+0x30>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3b03      	subs	r3, #3
 80045da:	e000      	b.n	80045de <NVIC_EncodePriority+0x32>
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43d9      	mvns	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	4313      	orrs	r3, r2
         );
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ff4c 	bl	80044b8 <__NVIC_SetPriorityGrouping>
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800463a:	f7ff ff61 	bl	8004500 <__NVIC_GetPriorityGrouping>
 800463e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7ff ffb1 	bl	80045ac <NVIC_EncodePriority>
 800464a:	4602      	mov	r2, r0
 800464c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff ff80 	bl	8004558 <__NVIC_SetPriority>
}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff54 	bl	800451c <__NVIC_EnableIRQ>
}
 8004674:	bf00      	nop
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d004      	beq.n	800469a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e00c      	b.n	80046b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2205      	movs	r2, #5
 800469e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e177      	b.n	80049cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046dc:	2201      	movs	r2, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	f040 8166 	bne.w	80049c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d00b      	beq.n	800471a <HAL_GPIO_Init+0x5a>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d007      	beq.n	800471a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800470e:	2b11      	cmp	r3, #17
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b12      	cmp	r3, #18
 8004718:	d130      	bne.n	800477c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	2203      	movs	r2, #3
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004750:	2201      	movs	r2, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 0201 	and.w	r2, r3, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0xfc>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b12      	cmp	r3, #18
 80047ba:	d123      	bne.n	8004804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	08da      	lsrs	r2, r3, #3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3208      	adds	r2, #8
 80047c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	220f      	movs	r2, #15
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	08da      	lsrs	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3208      	adds	r2, #8
 80047fe:	69b9      	ldr	r1, [r7, #24]
 8004800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0203 	and.w	r2, r3, #3
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80c0 	beq.w	80049c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_GPIO_Init+0x320>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	4a64      	ldr	r2, [pc, #400]	; (80049e0 <HAL_GPIO_Init+0x320>)
 8004850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004854:	6453      	str	r3, [r2, #68]	; 0x44
 8004856:	4b62      	ldr	r3, [pc, #392]	; (80049e0 <HAL_GPIO_Init+0x320>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004862:	4a60      	ldr	r2, [pc, #384]	; (80049e4 <HAL_GPIO_Init+0x324>)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	3302      	adds	r3, #2
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	220f      	movs	r2, #15
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a57      	ldr	r2, [pc, #348]	; (80049e8 <HAL_GPIO_Init+0x328>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d037      	beq.n	80048fe <HAL_GPIO_Init+0x23e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a56      	ldr	r2, [pc, #344]	; (80049ec <HAL_GPIO_Init+0x32c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_GPIO_Init+0x23a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a55      	ldr	r2, [pc, #340]	; (80049f0 <HAL_GPIO_Init+0x330>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02b      	beq.n	80048f6 <HAL_GPIO_Init+0x236>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a54      	ldr	r2, [pc, #336]	; (80049f4 <HAL_GPIO_Init+0x334>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d025      	beq.n	80048f2 <HAL_GPIO_Init+0x232>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a53      	ldr	r2, [pc, #332]	; (80049f8 <HAL_GPIO_Init+0x338>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d01f      	beq.n	80048ee <HAL_GPIO_Init+0x22e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a52      	ldr	r2, [pc, #328]	; (80049fc <HAL_GPIO_Init+0x33c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d019      	beq.n	80048ea <HAL_GPIO_Init+0x22a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a51      	ldr	r2, [pc, #324]	; (8004a00 <HAL_GPIO_Init+0x340>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x226>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a50      	ldr	r2, [pc, #320]	; (8004a04 <HAL_GPIO_Init+0x344>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x222>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4f      	ldr	r2, [pc, #316]	; (8004a08 <HAL_GPIO_Init+0x348>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x21e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4e      	ldr	r2, [pc, #312]	; (8004a0c <HAL_GPIO_Init+0x34c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x21a>
 80048d6:	2309      	movs	r3, #9
 80048d8:	e012      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048da:	230a      	movs	r3, #10
 80048dc:	e010      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048de:	2308      	movs	r3, #8
 80048e0:	e00e      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048e2:	2307      	movs	r3, #7
 80048e4:	e00c      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048e6:	2306      	movs	r3, #6
 80048e8:	e00a      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048ea:	2305      	movs	r3, #5
 80048ec:	e008      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048ee:	2304      	movs	r3, #4
 80048f0:	e006      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048f2:	2303      	movs	r3, #3
 80048f4:	e004      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e002      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_GPIO_Init+0x240>
 80048fe:	2300      	movs	r3, #0
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	f002 0203 	and.w	r2, r2, #3
 8004906:	0092      	lsls	r2, r2, #2
 8004908:	4093      	lsls	r3, r2
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004910:	4934      	ldr	r1, [pc, #208]	; (80049e4 <HAL_GPIO_Init+0x324>)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	3302      	adds	r3, #2
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800491e:	4b3c      	ldr	r3, [pc, #240]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004942:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004948:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <HAL_GPIO_Init+0x350>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496c:	4a28      	ldr	r2, [pc, #160]	; (8004a10 <HAL_GPIO_Init+0x350>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800499c:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <HAL_GPIO_Init+0x350>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c0:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <HAL_GPIO_Init+0x350>)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	f67f ae84 	bls.w	80046dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049d4:	bf00      	nop
 80049d6:	3724      	adds	r7, #36	; 0x24
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40013800 	.word	0x40013800
 80049e8:	40020000 	.word	0x40020000
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40020800 	.word	0x40020800
 80049f4:	40020c00 	.word	0x40020c00
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40021400 	.word	0x40021400
 8004a00:	40021800 	.word	0x40021800
 8004a04:	40021c00 	.word	0x40021c00
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40022400 	.word	0x40022400
 8004a10:	40013c00 	.word	0x40013c00

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a30:	e003      	b.n	8004a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	887b      	ldrh	r3, [r7, #2]
 8004a58:	401a      	ands	r2, r3
 8004a5a:	887b      	ldrh	r3, [r7, #2]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d104      	bne.n	8004a6a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a60:	887b      	ldrh	r3, [r7, #2]
 8004a62:	041a      	lsls	r2, r3, #16
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a68:	e002      	b.n	8004a70 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	619a      	str	r2, [r3, #24]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a86:	4b08      	ldr	r3, [pc, #32]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d006      	beq.n	8004aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a92:	4a05      	ldr	r2, [pc, #20]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a94:	88fb      	ldrh	r3, [r7, #6]
 8004a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe f826 	bl	8002aec <HAL_GPIO_EXTI_Callback>
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40013c00 	.word	0x40013c00

08004aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e25b      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d075      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aca:	4ba3      	ldr	r3, [pc, #652]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d00c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad6:	4ba0      	ldr	r3, [pc, #640]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d112      	bne.n	8004b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae2:	4b9d      	ldr	r3, [pc, #628]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aee:	d10b      	bne.n	8004b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	4b99      	ldr	r3, [pc, #612]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d05b      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x108>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d157      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e236      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x74>
 8004b12:	4b91      	ldr	r3, [pc, #580]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a90      	ldr	r2, [pc, #576]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e01d      	b.n	8004b5c <HAL_RCC_OscConfig+0xb0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x98>
 8004b2a:	4b8b      	ldr	r3, [pc, #556]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a8a      	ldr	r2, [pc, #552]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a87      	ldr	r2, [pc, #540]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e00b      	b.n	8004b5c <HAL_RCC_OscConfig+0xb0>
 8004b44:	4b84      	ldr	r3, [pc, #528]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a83      	ldr	r2, [pc, #524]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4b81      	ldr	r3, [pc, #516]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a80      	ldr	r2, [pc, #512]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fe fe40 	bl	80037e8 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fe fe3c 	bl	80037e8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1fb      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0xc0>
 8004b8a:	e014      	b.n	8004bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fe fe2c 	bl	80037e8 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fe fe28 	bl	80037e8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1e7      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba6:	4b6c      	ldr	r3, [pc, #432]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0xe8>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d063      	beq.n	8004c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc2:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bce:	4b62      	ldr	r3, [pc, #392]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d11c      	bne.n	8004c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bda:	4b5f      	ldr	r3, [pc, #380]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d116      	bne.n	8004c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	4b5c      	ldr	r3, [pc, #368]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_RCC_OscConfig+0x152>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d001      	beq.n	8004bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e1bb      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfe:	4b56      	ldr	r3, [pc, #344]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4952      	ldr	r1, [pc, #328]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c12:	e03a      	b.n	8004c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d020      	beq.n	8004c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <HAL_RCC_OscConfig+0x2b0>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fe fde1 	bl	80037e8 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2a:	f7fe fddd 	bl	80037e8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e19c      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3c:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0f0      	beq.n	8004c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b43      	ldr	r3, [pc, #268]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4940      	ldr	r1, [pc, #256]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
 8004c5c:	e015      	b.n	8004c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_RCC_OscConfig+0x2b0>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fe fdc0 	bl	80037e8 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fe fdbc 	bl	80037e8 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e17b      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d030      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9e:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <HAL_RCC_OscConfig+0x2b4>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fe fda0 	bl	80037e8 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cac:	f7fe fd9c 	bl	80037e8 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e15b      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbe:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x200>
 8004cca:	e015      	b.n	8004cf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCC_OscConfig+0x2b4>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fd89 	bl	80037e8 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fe fd85 	bl	80037e8 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e144      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a0 	beq.w	8004e46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6413      	str	r3, [r2, #64]	; 0x40
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_OscConfig+0x2b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d121      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_RCC_OscConfig+0x2b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <HAL_RCC_OscConfig+0x2b8>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4e:	f7fe fd4b 	bl	80037e8 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	e011      	b.n	8004d7a <HAL_RCC_OscConfig+0x2ce>
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	42470000 	.word	0x42470000
 8004d60:	42470e80 	.word	0x42470e80
 8004d64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d68:	f7fe fd3e 	bl	80037e8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0fd      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b81      	ldr	r3, [pc, #516]	; (8004f80 <HAL_RCC_OscConfig+0x4d4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d106      	bne.n	8004d9c <HAL_RCC_OscConfig+0x2f0>
 8004d8e:	4b7d      	ldr	r3, [pc, #500]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d92:	4a7c      	ldr	r2, [pc, #496]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9a:	e01c      	b.n	8004dd6 <HAL_RCC_OscConfig+0x32a>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d10c      	bne.n	8004dbe <HAL_RCC_OscConfig+0x312>
 8004da4:	4b77      	ldr	r3, [pc, #476]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a76      	ldr	r2, [pc, #472]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
 8004db0:	4b74      	ldr	r3, [pc, #464]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	4a73      	ldr	r2, [pc, #460]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6713      	str	r3, [r2, #112]	; 0x70
 8004dbc:	e00b      	b.n	8004dd6 <HAL_RCC_OscConfig+0x32a>
 8004dbe:	4b71      	ldr	r3, [pc, #452]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4a70      	ldr	r2, [pc, #448]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dca:	4b6e      	ldr	r3, [pc, #440]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a6d      	ldr	r2, [pc, #436]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d015      	beq.n	8004e0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fe fd03 	bl	80037e8 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fe fcff 	bl	80037e8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0bc      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0ee      	beq.n	8004de6 <HAL_RCC_OscConfig+0x33a>
 8004e08:	e014      	b.n	8004e34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0a:	f7fe fced 	bl	80037e8 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fe fce9 	bl	80037e8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e0a6      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e28:	4b56      	ldr	r3, [pc, #344]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1ee      	bne.n	8004e12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d105      	bne.n	8004e46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e3a:	4b52      	ldr	r3, [pc, #328]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a51      	ldr	r2, [pc, #324]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8092 	beq.w	8004f74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e50:	4b4c      	ldr	r3, [pc, #304]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d05c      	beq.n	8004f16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d141      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e64:	4b48      	ldr	r3, [pc, #288]	; (8004f88 <HAL_RCC_OscConfig+0x4dc>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fe fcbd 	bl	80037e8 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e72:	f7fe fcb9 	bl	80037e8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e078      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e84:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	019b      	lsls	r3, r3, #6
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	061b      	lsls	r3, r3, #24
 8004eb4:	4933      	ldr	r1, [pc, #204]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eba:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <HAL_RCC_OscConfig+0x4dc>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fe fc92 	bl	80037e8 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fe fc8e 	bl	80037e8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e04d      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eda:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x41c>
 8004ee6:	e045      	b.n	8004f74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee8:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_RCC_OscConfig+0x4dc>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eee:	f7fe fc7b 	bl	80037e8 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fe fc77 	bl	80037e8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e036      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x44a>
 8004f14:	e02e      	b.n	8004f74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e029      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f22:	4b18      	ldr	r3, [pc, #96]	; (8004f84 <HAL_RCC_OscConfig+0x4d8>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d11c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d115      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10d      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d106      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40007000 	.word	0x40007000
 8004f84:	40023800 	.word	0x40023800
 8004f88:	42470060 	.word	0x42470060

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cc      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b68      	ldr	r3, [pc, #416]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90c      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b65      	ldr	r3, [pc, #404]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d044      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d119      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e067      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b37      	ldr	r3, [pc, #220]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4934      	ldr	r1, [pc, #208]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fe fbb4 	bl	80037e8 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fe fbb0 	bl	80037e8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e04f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d20c      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b22      	ldr	r3, [pc, #136]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fe:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4601      	mov	r1, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	5cd3      	ldrb	r3, [r2, r3]
 8005126:	fa21 f303 	lsr.w	r3, r1, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	; (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fd fe04 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	40023800 	.word	0x40023800
 800514c:	0800a42c 	.word	0x0800a42c
 8005150:	20000000 	.word	0x20000000
 8005154:	20000004 	.word	0x20000004

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	2300      	movs	r3, #0
 8005168:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800516e:	4b50      	ldr	r3, [pc, #320]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 030c 	and.w	r3, r3, #12
 8005176:	2b04      	cmp	r3, #4
 8005178:	d007      	beq.n	800518a <HAL_RCC_GetSysClockFreq+0x32>
 800517a:	2b08      	cmp	r3, #8
 800517c:	d008      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x38>
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 808d 	bne.w	800529e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005184:	4b4b      	ldr	r3, [pc, #300]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005186:	60bb      	str	r3, [r7, #8]
       break;
 8005188:	e08c      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800518a:	4b4b      	ldr	r3, [pc, #300]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800518c:	60bb      	str	r3, [r7, #8]
      break;
 800518e:	e089      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005190:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005198:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800519a:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d023      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a6:	4b42      	ldr	r3, [pc, #264]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	099b      	lsrs	r3, r3, #6
 80051ac:	f04f 0400 	mov.w	r4, #0
 80051b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	ea03 0501 	and.w	r5, r3, r1
 80051bc:	ea04 0602 	and.w	r6, r4, r2
 80051c0:	4a3d      	ldr	r2, [pc, #244]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051c2:	fb02 f106 	mul.w	r1, r2, r6
 80051c6:	2200      	movs	r2, #0
 80051c8:	fb02 f205 	mul.w	r2, r2, r5
 80051cc:	440a      	add	r2, r1
 80051ce:	493a      	ldr	r1, [pc, #232]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051d0:	fba5 0101 	umull	r0, r1, r5, r1
 80051d4:	1853      	adds	r3, r2, r1
 80051d6:	4619      	mov	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	461a      	mov	r2, r3
 80051e0:	4623      	mov	r3, r4
 80051e2:	f7fb fd09 	bl	8000bf8 <__aeabi_uldivmod>
 80051e6:	4603      	mov	r3, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	e049      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	ea03 0501 	and.w	r5, r3, r1
 8005204:	ea04 0602 	and.w	r6, r4, r2
 8005208:	4629      	mov	r1, r5
 800520a:	4632      	mov	r2, r6
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	0154      	lsls	r4, r2, #5
 8005216:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800521a:	014b      	lsls	r3, r1, #5
 800521c:	4619      	mov	r1, r3
 800521e:	4622      	mov	r2, r4
 8005220:	1b49      	subs	r1, r1, r5
 8005222:	eb62 0206 	sbc.w	r2, r2, r6
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	0194      	lsls	r4, r2, #6
 8005230:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005234:	018b      	lsls	r3, r1, #6
 8005236:	1a5b      	subs	r3, r3, r1
 8005238:	eb64 0402 	sbc.w	r4, r4, r2
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	00e2      	lsls	r2, r4, #3
 8005246:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800524a:	00d9      	lsls	r1, r3, #3
 800524c:	460b      	mov	r3, r1
 800524e:	4614      	mov	r4, r2
 8005250:	195b      	adds	r3, r3, r5
 8005252:	eb44 0406 	adc.w	r4, r4, r6
 8005256:	f04f 0100 	mov.w	r1, #0
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	02a2      	lsls	r2, r4, #10
 8005260:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005264:	0299      	lsls	r1, r3, #10
 8005266:	460b      	mov	r3, r1
 8005268:	4614      	mov	r4, r2
 800526a:	4618      	mov	r0, r3
 800526c:	4621      	mov	r1, r4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f04f 0400 	mov.w	r4, #0
 8005274:	461a      	mov	r2, r3
 8005276:	4623      	mov	r3, r4
 8005278:	f7fb fcbe 	bl	8000bf8 <__aeabi_uldivmod>
 800527c:	4603      	mov	r3, r0
 800527e:	460c      	mov	r4, r1
 8005280:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	3301      	adds	r3, #1
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	60bb      	str	r3, [r7, #8]
      break;
 800529c:	e002      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052a0:	60bb      	str	r3, [r7, #8]
      break;
 80052a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052a4:	68bb      	ldr	r3, [r7, #8]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40023800 	.word	0x40023800
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	00b71b00 	.word	0x00b71b00

080052bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000000 	.word	0x20000000

080052d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052d8:	f7ff fff0 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 80052dc:	4601      	mov	r1, r0
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	0a9b      	lsrs	r3, r3, #10
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4a03      	ldr	r2, [pc, #12]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ea:	5cd3      	ldrb	r3, [r2, r3]
 80052ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40023800 	.word	0x40023800
 80052f8:	0800a43c 	.word	0x0800a43c

080052fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005300:	f7ff ffdc 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005304:	4601      	mov	r1, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0b5b      	lsrs	r3, r3, #13
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4a03      	ldr	r2, [pc, #12]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005312:	5cd3      	ldrb	r3, [r2, r3]
 8005314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40023800 	.word	0x40023800
 8005320:	0800a43c 	.word	0x0800a43c

08005324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	220f      	movs	r2, #15
 8005332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005334:	4b12      	ldr	r3, [pc, #72]	; (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0203 	and.w	r2, r3, #3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HAL_RCC_GetClockConfig+0x5c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <HAL_RCC_GetClockConfig+0x60>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	601a      	str	r2, [r3, #0]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	40023c00 	.word	0x40023c00

08005388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e01d      	b.n	80053d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fd ffd8 	bl	8003364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f000 fa8c 	bl	80058e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b06      	cmp	r3, #6
 8005406:	d007      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e01d      	b.n	8005474 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fd ff3d 	bl	80032cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 fa3d 	bl	80058e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2201      	movs	r2, #1
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fc78 	bl	8005d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <HAL_TIM_PWM_Start+0x74>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_TIM_PWM_Start+0x2c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIM_PWM_Start+0x78>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d101      	bne.n	80054ac <HAL_TIM_PWM_Start+0x30>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_TIM_PWM_Start+0x32>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d007      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400

080054f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d122      	bne.n	8005554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d11b      	bne.n	8005554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0202 	mvn.w	r2, #2
 8005524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9b4 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9a6 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f9b7 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b04      	cmp	r3, #4
 8005560:	d122      	bne.n	80055a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b04      	cmp	r3, #4
 800556e:	d11b      	bne.n	80055a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0204 	mvn.w	r2, #4
 8005578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f98a 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f97c 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f98d 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d122      	bne.n	80055fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d11b      	bne.n	80055fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0208 	mvn.w	r2, #8
 80055cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2204      	movs	r2, #4
 80055d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f960 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f952 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f963 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b10      	cmp	r3, #16
 8005608:	d122      	bne.n	8005650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b10      	cmp	r3, #16
 8005616:	d11b      	bne.n	8005650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0210 	mvn.w	r2, #16
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2208      	movs	r2, #8
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f936 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f928 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f939 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0201 	mvn.w	r2, #1
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fd fb0c 	bl	8002c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b80      	cmp	r3, #128	; 0x80
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fc1a 	bl	8005edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8fe 	bl	80058d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d10e      	bne.n	8005700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0220 	mvn.w	r2, #32
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fbe4 	bl	8005ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800571e:	2302      	movs	r3, #2
 8005720:	e0b4      	b.n	800588c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b0c      	cmp	r3, #12
 8005736:	f200 809f 	bhi.w	8005878 <HAL_TIM_PWM_ConfigChannel+0x170>
 800573a:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005740:	08005775 	.word	0x08005775
 8005744:	08005879 	.word	0x08005879
 8005748:	08005879 	.word	0x08005879
 800574c:	08005879 	.word	0x08005879
 8005750:	080057b5 	.word	0x080057b5
 8005754:	08005879 	.word	0x08005879
 8005758:	08005879 	.word	0x08005879
 800575c:	08005879 	.word	0x08005879
 8005760:	080057f7 	.word	0x080057f7
 8005764:	08005879 	.word	0x08005879
 8005768:	08005879 	.word	0x08005879
 800576c:	08005879 	.word	0x08005879
 8005770:	08005837 	.word	0x08005837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f952 	bl	8005a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6999      	ldr	r1, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	619a      	str	r2, [r3, #24]
      break;
 80057b2:	e062      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f9a2 	bl	8005b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6999      	ldr	r1, [r3, #24]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	021a      	lsls	r2, r3, #8
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	619a      	str	r2, [r3, #24]
      break;
 80057f4:	e041      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f9f7 	bl	8005bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0208 	orr.w	r2, r2, #8
 8005810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0204 	bic.w	r2, r2, #4
 8005820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	61da      	str	r2, [r3, #28]
      break;
 8005834:	e021      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fa4b 	bl	8005cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69d9      	ldr	r1, [r3, #28]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	021a      	lsls	r2, r3, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	61da      	str	r2, [r3, #28]
      break;
 8005876:	e000      	b.n	800587a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005878:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a40      	ldr	r2, [pc, #256]	; (80059f8 <TIM_Base_SetConfig+0x114>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005902:	d00f      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a3d      	ldr	r2, [pc, #244]	; (80059fc <TIM_Base_SetConfig+0x118>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00b      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a3c      	ldr	r2, [pc, #240]	; (8005a00 <TIM_Base_SetConfig+0x11c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d007      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a3b      	ldr	r2, [pc, #236]	; (8005a04 <TIM_Base_SetConfig+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3a      	ldr	r2, [pc, #232]	; (8005a08 <TIM_Base_SetConfig+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d108      	bne.n	8005936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a2f      	ldr	r2, [pc, #188]	; (80059f8 <TIM_Base_SetConfig+0x114>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d02b      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005944:	d027      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a2c      	ldr	r2, [pc, #176]	; (80059fc <TIM_Base_SetConfig+0x118>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d023      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2b      	ldr	r2, [pc, #172]	; (8005a00 <TIM_Base_SetConfig+0x11c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d01f      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <TIM_Base_SetConfig+0x120>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01b      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a29      	ldr	r2, [pc, #164]	; (8005a08 <TIM_Base_SetConfig+0x124>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d017      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a28      	ldr	r2, [pc, #160]	; (8005a0c <TIM_Base_SetConfig+0x128>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <TIM_Base_SetConfig+0x12c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00f      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a26      	ldr	r2, [pc, #152]	; (8005a14 <TIM_Base_SetConfig+0x130>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00b      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <TIM_Base_SetConfig+0x134>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <TIM_Base_SetConfig+0x138>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d003      	beq.n	8005996 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a23      	ldr	r2, [pc, #140]	; (8005a20 <TIM_Base_SetConfig+0x13c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d108      	bne.n	80059a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a0a      	ldr	r2, [pc, #40]	; (80059f8 <TIM_Base_SetConfig+0x114>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0xf8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a0c      	ldr	r2, [pc, #48]	; (8005a08 <TIM_Base_SetConfig+0x124>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d103      	bne.n	80059e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	615a      	str	r2, [r3, #20]
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40014400 	.word	0x40014400
 8005a14:	40014800 	.word	0x40014800
 8005a18:	40001800 	.word	0x40001800
 8005a1c:	40001c00 	.word	0x40001c00
 8005a20:	40002000 	.word	0x40002000

08005a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f023 0302 	bic.w	r3, r3, #2
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a20      	ldr	r2, [pc, #128]	; (8005afc <TIM_OC1_SetConfig+0xd8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC1_SetConfig+0x64>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <TIM_OC1_SetConfig+0xdc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d10c      	bne.n	8005aa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0308 	bic.w	r3, r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <TIM_OC1_SetConfig+0xd8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <TIM_OC1_SetConfig+0x8e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <TIM_OC1_SetConfig+0xdc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d111      	bne.n	8005ad6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40010400 	.word	0x40010400

08005b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f023 0210 	bic.w	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0320 	bic.w	r3, r3, #32
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <TIM_OC2_SetConfig+0xe4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_OC2_SetConfig+0x68>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a21      	ldr	r2, [pc, #132]	; (8005bec <TIM_OC2_SetConfig+0xe8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d10d      	bne.n	8005b88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <TIM_OC2_SetConfig+0xe4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC2_SetConfig+0x94>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a16      	ldr	r2, [pc, #88]	; (8005bec <TIM_OC2_SetConfig+0xe8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d113      	bne.n	8005bc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40010400 	.word	0x40010400

08005bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <TIM_OC3_SetConfig+0xe0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_OC3_SetConfig+0x66>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <TIM_OC3_SetConfig+0xe4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d10d      	bne.n	8005c72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <TIM_OC3_SetConfig+0xe0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_OC3_SetConfig+0x92>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <TIM_OC3_SetConfig+0xe4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d113      	bne.n	8005caa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <TIM_OC4_SetConfig+0xa4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC4_SetConfig+0x68>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <TIM_OC4_SetConfig+0xa8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d109      	bne.n	8005d54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	019b      	lsls	r3, r3, #6
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40010400 	.word	0x40010400

08005d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	2201      	movs	r2, #1
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e05a      	b.n	8005e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a21      	ldr	r2, [pc, #132]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d022      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e34:	d01d      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d018      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00e      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10c      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40010400 	.word	0x40010400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40001800 	.word	0x40001800

08005ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e03f      	b.n	8005f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fd fb7a 	bl	8003610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb97 	bl	8006668 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b088      	sub	sp, #32
 8005f8e:	af02      	add	r7, sp, #8
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	f040 8083 	bne.w	80060b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_UART_Transmit+0x2e>
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e07b      	b.n	80060b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Transmit+0x40>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e074      	b.n	80060b4 <HAL_UART_Transmit+0x12a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2221      	movs	r2, #33	; 0x21
 8005fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005fe0:	f7fd fc02 	bl	80037e8 <HAL_GetTick>
 8005fe4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	88fa      	ldrh	r2, [r7, #6]
 8005fea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ffa:	e042      	b.n	8006082 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006012:	d122      	bne.n	800605a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	2180      	movs	r1, #128	; 0x80
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 f9b6 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e042      	b.n	80060b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006040:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3302      	adds	r3, #2
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	e017      	b.n	8006082 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	3301      	adds	r3, #1
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	e013      	b.n	8006082 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	2180      	movs	r1, #128	; 0x80
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f993 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e01f      	b.n	80060b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	60ba      	str	r2, [r7, #8]
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1b7      	bne.n	8005ffc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2200      	movs	r2, #0
 8006094:	2140      	movs	r1, #64	; 0x40
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f97a 	bl	8006390 <UART_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e006      	b.n	80060b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	e000      	b.n	80060b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d140      	bne.n	8006158 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_UART_Receive_IT+0x26>
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e039      	b.n	800615a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UART_Receive_IT+0x38>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e032      	b.n	800615a <HAL_UART_Receive_IT+0x9e>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	88fa      	ldrh	r2, [r7, #6]
 8006106:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2222      	movs	r2, #34	; 0x22
 8006118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006132:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0220 	orr.w	r2, r2, #32
 8006152:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006154:	2300      	movs	r3, #0
 8006156:	e000      	b.n	800615a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006158:	2302      	movs	r3, #2
  }
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <HAL_UART_IRQHandler+0x52>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f9d6 	bl	8006564 <UART_Receive_IT>
      return;
 80061b8:	e0d1      	b.n	800635e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80b0 	beq.w	8006322 <HAL_UART_IRQHandler+0x1ba>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_UART_IRQHandler+0x70>
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80a5 	beq.w	8006322 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_UART_IRQHandler+0x90>
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	f043 0201 	orr.w	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00a      	beq.n	8006218 <HAL_UART_IRQHandler+0xb0>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	f043 0202 	orr.w	r2, r3, #2
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_UART_IRQHandler+0xd0>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	f043 0204 	orr.w	r2, r3, #4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0308 	and.w	r3, r3, #8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00f      	beq.n	8006262 <HAL_UART_IRQHandler+0xfa>
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <HAL_UART_IRQHandler+0xee>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d005      	beq.n	8006262 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	f043 0208 	orr.w	r2, r3, #8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d078      	beq.n	800635c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <HAL_UART_IRQHandler+0x11c>
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f970 	bl	8006564 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	bf0c      	ite	eq
 8006292:	2301      	moveq	r3, #1
 8006294:	2300      	movne	r3, #0
 8006296:	b2db      	uxtb	r3, r3
 8006298:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_UART_IRQHandler+0x144>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d031      	beq.n	8006310 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8b9 	bl	8006424 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d123      	bne.n	8006308 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d013      	beq.n	8006300 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	4a21      	ldr	r2, [pc, #132]	; (8006364 <HAL_UART_IRQHandler+0x1fc>)
 80062de:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe f9c9 	bl	800467c <HAL_DMA_Abort_IT>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d016      	beq.n	800631e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062fa:	4610      	mov	r0, r2
 80062fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fe:	e00e      	b.n	800631e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f83b 	bl	800637c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	e00a      	b.n	800631e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f837 	bl	800637c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630e:	e006      	b.n	800631e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f833 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800631c:	e01e      	b.n	800635c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631e:	bf00      	nop
    return;
 8006320:	e01c      	b.n	800635c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006328:	2b00      	cmp	r3, #0
 800632a:	d008      	beq.n	800633e <HAL_UART_IRQHandler+0x1d6>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8a6 	bl	8006488 <UART_Transmit_IT>
    return;
 800633c:	e00f      	b.n	800635e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_UART_IRQHandler+0x1f6>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8ee 	bl	8006534 <UART_EndTransmit_IT>
    return;
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <HAL_UART_IRQHandler+0x1f6>
    return;
 800635c:	bf00      	nop
  }
}
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	08006461 	.word	0x08006461

08006368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a0:	e02c      	b.n	80063fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d028      	beq.n	80063fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063b0:	f7fd fa1a 	bl	80037e8 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d21d      	bcs.n	80063fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e00f      	b.n	800641c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	429a      	cmp	r2, r3
 8006418:	d0c3      	beq.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800643a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff ff7e 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006480:	bf00      	nop
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b21      	cmp	r3, #33	; 0x21
 800649a:	d144      	bne.n	8006526 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a4:	d11a      	bne.n	80064dc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]
 80064ce:	e00e      	b.n	80064ee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]
 80064da:	e008      	b.n	80064ee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6211      	str	r1, [r2, #32]
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4619      	mov	r1, r3
 80064fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006510:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006520:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	e000      	b.n	8006528 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff07 	bl	8006368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b22      	cmp	r3, #34	; 0x22
 8006576:	d171      	bne.n	800665c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006580:	d123      	bne.n	80065ca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10e      	bne.n	80065ae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	1c9a      	adds	r2, r3, #2
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
 80065ac:	e029      	b.n	8006602 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
 80065c8:	e01b      	b.n	8006602 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10a      	bne.n	80065e8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6858      	ldr	r0, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	1c59      	adds	r1, r3, #1
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6291      	str	r1, [r2, #40]	; 0x28
 80065e2:	b2c2      	uxtb	r2, r0
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e00c      	b.n	8006602 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	1c58      	adds	r0, r3, #1
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	6288      	str	r0, [r1, #40]	; 0x28
 80065fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4619      	mov	r1, r3
 8006610:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006612:	2b00      	cmp	r3, #0
 8006614:	d120      	bne.n	8006658 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0220 	bic.w	r2, r2, #32
 8006624:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695a      	ldr	r2, [r3, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0201 	bic.w	r2, r2, #1
 8006644:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fb f8bc 	bl	80017cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006654:	2300      	movs	r3, #0
 8006656:	e002      	b.n	800665e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066aa:	f023 030c 	bic.w	r3, r3, #12
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	430b      	orrs	r3, r1
 80066b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d6:	f040 818b 	bne.w	80069f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4ac1      	ldr	r2, [pc, #772]	; (80069e4 <UART_SetConfig+0x37c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d005      	beq.n	80066f0 <UART_SetConfig+0x88>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4abf      	ldr	r2, [pc, #764]	; (80069e8 <UART_SetConfig+0x380>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	f040 80bd 	bne.w	800686a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f0:	f7fe fe04 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 80066f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	461d      	mov	r5, r3
 80066fa:	f04f 0600 	mov.w	r6, #0
 80066fe:	46a8      	mov	r8, r5
 8006700:	46b1      	mov	r9, r6
 8006702:	eb18 0308 	adds.w	r3, r8, r8
 8006706:	eb49 0409 	adc.w	r4, r9, r9
 800670a:	4698      	mov	r8, r3
 800670c:	46a1      	mov	r9, r4
 800670e:	eb18 0805 	adds.w	r8, r8, r5
 8006712:	eb49 0906 	adc.w	r9, r9, r6
 8006716:	f04f 0100 	mov.w	r1, #0
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006722:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006726:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800672a:	4688      	mov	r8, r1
 800672c:	4691      	mov	r9, r2
 800672e:	eb18 0005 	adds.w	r0, r8, r5
 8006732:	eb49 0106 	adc.w	r1, r9, r6
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	461d      	mov	r5, r3
 800673c:	f04f 0600 	mov.w	r6, #0
 8006740:	196b      	adds	r3, r5, r5
 8006742:	eb46 0406 	adc.w	r4, r6, r6
 8006746:	461a      	mov	r2, r3
 8006748:	4623      	mov	r3, r4
 800674a:	f7fa fa55 	bl	8000bf8 <__aeabi_uldivmod>
 800674e:	4603      	mov	r3, r0
 8006750:	460c      	mov	r4, r1
 8006752:	461a      	mov	r2, r3
 8006754:	4ba5      	ldr	r3, [pc, #660]	; (80069ec <UART_SetConfig+0x384>)
 8006756:	fba3 2302 	umull	r2, r3, r3, r2
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	461d      	mov	r5, r3
 8006764:	f04f 0600 	mov.w	r6, #0
 8006768:	46a9      	mov	r9, r5
 800676a:	46b2      	mov	sl, r6
 800676c:	eb19 0309 	adds.w	r3, r9, r9
 8006770:	eb4a 040a 	adc.w	r4, sl, sl
 8006774:	4699      	mov	r9, r3
 8006776:	46a2      	mov	sl, r4
 8006778:	eb19 0905 	adds.w	r9, r9, r5
 800677c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006780:	f04f 0100 	mov.w	r1, #0
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800678c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006790:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006794:	4689      	mov	r9, r1
 8006796:	4692      	mov	sl, r2
 8006798:	eb19 0005 	adds.w	r0, r9, r5
 800679c:	eb4a 0106 	adc.w	r1, sl, r6
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	461d      	mov	r5, r3
 80067a6:	f04f 0600 	mov.w	r6, #0
 80067aa:	196b      	adds	r3, r5, r5
 80067ac:	eb46 0406 	adc.w	r4, r6, r6
 80067b0:	461a      	mov	r2, r3
 80067b2:	4623      	mov	r3, r4
 80067b4:	f7fa fa20 	bl	8000bf8 <__aeabi_uldivmod>
 80067b8:	4603      	mov	r3, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	461a      	mov	r2, r3
 80067be:	4b8b      	ldr	r3, [pc, #556]	; (80069ec <UART_SetConfig+0x384>)
 80067c0:	fba3 1302 	umull	r1, r3, r3, r2
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	2164      	movs	r1, #100	; 0x64
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	3332      	adds	r3, #50	; 0x32
 80067d2:	4a86      	ldr	r2, [pc, #536]	; (80069ec <UART_SetConfig+0x384>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067e0:	4498      	add	r8, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	461d      	mov	r5, r3
 80067e6:	f04f 0600 	mov.w	r6, #0
 80067ea:	46a9      	mov	r9, r5
 80067ec:	46b2      	mov	sl, r6
 80067ee:	eb19 0309 	adds.w	r3, r9, r9
 80067f2:	eb4a 040a 	adc.w	r4, sl, sl
 80067f6:	4699      	mov	r9, r3
 80067f8:	46a2      	mov	sl, r4
 80067fa:	eb19 0905 	adds.w	r9, r9, r5
 80067fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006802:	f04f 0100 	mov.w	r1, #0
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800680e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006816:	4689      	mov	r9, r1
 8006818:	4692      	mov	sl, r2
 800681a:	eb19 0005 	adds.w	r0, r9, r5
 800681e:	eb4a 0106 	adc.w	r1, sl, r6
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	461d      	mov	r5, r3
 8006828:	f04f 0600 	mov.w	r6, #0
 800682c:	196b      	adds	r3, r5, r5
 800682e:	eb46 0406 	adc.w	r4, r6, r6
 8006832:	461a      	mov	r2, r3
 8006834:	4623      	mov	r3, r4
 8006836:	f7fa f9df 	bl	8000bf8 <__aeabi_uldivmod>
 800683a:	4603      	mov	r3, r0
 800683c:	460c      	mov	r4, r1
 800683e:	461a      	mov	r2, r3
 8006840:	4b6a      	ldr	r3, [pc, #424]	; (80069ec <UART_SetConfig+0x384>)
 8006842:	fba3 1302 	umull	r1, r3, r3, r2
 8006846:	095b      	lsrs	r3, r3, #5
 8006848:	2164      	movs	r1, #100	; 0x64
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	3332      	adds	r3, #50	; 0x32
 8006854:	4a65      	ldr	r2, [pc, #404]	; (80069ec <UART_SetConfig+0x384>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	095b      	lsrs	r3, r3, #5
 800685c:	f003 0207 	and.w	r2, r3, #7
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4442      	add	r2, r8
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	e26f      	b.n	8006d4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800686a:	f7fe fd33 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 800686e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	461d      	mov	r5, r3
 8006874:	f04f 0600 	mov.w	r6, #0
 8006878:	46a8      	mov	r8, r5
 800687a:	46b1      	mov	r9, r6
 800687c:	eb18 0308 	adds.w	r3, r8, r8
 8006880:	eb49 0409 	adc.w	r4, r9, r9
 8006884:	4698      	mov	r8, r3
 8006886:	46a1      	mov	r9, r4
 8006888:	eb18 0805 	adds.w	r8, r8, r5
 800688c:	eb49 0906 	adc.w	r9, r9, r6
 8006890:	f04f 0100 	mov.w	r1, #0
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800689c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068a4:	4688      	mov	r8, r1
 80068a6:	4691      	mov	r9, r2
 80068a8:	eb18 0005 	adds.w	r0, r8, r5
 80068ac:	eb49 0106 	adc.w	r1, r9, r6
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	461d      	mov	r5, r3
 80068b6:	f04f 0600 	mov.w	r6, #0
 80068ba:	196b      	adds	r3, r5, r5
 80068bc:	eb46 0406 	adc.w	r4, r6, r6
 80068c0:	461a      	mov	r2, r3
 80068c2:	4623      	mov	r3, r4
 80068c4:	f7fa f998 	bl	8000bf8 <__aeabi_uldivmod>
 80068c8:	4603      	mov	r3, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	461a      	mov	r2, r3
 80068ce:	4b47      	ldr	r3, [pc, #284]	; (80069ec <UART_SetConfig+0x384>)
 80068d0:	fba3 2302 	umull	r2, r3, r3, r2
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	461d      	mov	r5, r3
 80068de:	f04f 0600 	mov.w	r6, #0
 80068e2:	46a9      	mov	r9, r5
 80068e4:	46b2      	mov	sl, r6
 80068e6:	eb19 0309 	adds.w	r3, r9, r9
 80068ea:	eb4a 040a 	adc.w	r4, sl, sl
 80068ee:	4699      	mov	r9, r3
 80068f0:	46a2      	mov	sl, r4
 80068f2:	eb19 0905 	adds.w	r9, r9, r5
 80068f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80068fa:	f04f 0100 	mov.w	r1, #0
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800690a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800690e:	4689      	mov	r9, r1
 8006910:	4692      	mov	sl, r2
 8006912:	eb19 0005 	adds.w	r0, r9, r5
 8006916:	eb4a 0106 	adc.w	r1, sl, r6
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	461d      	mov	r5, r3
 8006920:	f04f 0600 	mov.w	r6, #0
 8006924:	196b      	adds	r3, r5, r5
 8006926:	eb46 0406 	adc.w	r4, r6, r6
 800692a:	461a      	mov	r2, r3
 800692c:	4623      	mov	r3, r4
 800692e:	f7fa f963 	bl	8000bf8 <__aeabi_uldivmod>
 8006932:	4603      	mov	r3, r0
 8006934:	460c      	mov	r4, r1
 8006936:	461a      	mov	r2, r3
 8006938:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <UART_SetConfig+0x384>)
 800693a:	fba3 1302 	umull	r1, r3, r3, r2
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	2164      	movs	r1, #100	; 0x64
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	3332      	adds	r3, #50	; 0x32
 800694c:	4a27      	ldr	r2, [pc, #156]	; (80069ec <UART_SetConfig+0x384>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800695a:	4498      	add	r8, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	461d      	mov	r5, r3
 8006960:	f04f 0600 	mov.w	r6, #0
 8006964:	46a9      	mov	r9, r5
 8006966:	46b2      	mov	sl, r6
 8006968:	eb19 0309 	adds.w	r3, r9, r9
 800696c:	eb4a 040a 	adc.w	r4, sl, sl
 8006970:	4699      	mov	r9, r3
 8006972:	46a2      	mov	sl, r4
 8006974:	eb19 0905 	adds.w	r9, r9, r5
 8006978:	eb4a 0a06 	adc.w	sl, sl, r6
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006988:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800698c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006990:	4689      	mov	r9, r1
 8006992:	4692      	mov	sl, r2
 8006994:	eb19 0005 	adds.w	r0, r9, r5
 8006998:	eb4a 0106 	adc.w	r1, sl, r6
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	461d      	mov	r5, r3
 80069a2:	f04f 0600 	mov.w	r6, #0
 80069a6:	196b      	adds	r3, r5, r5
 80069a8:	eb46 0406 	adc.w	r4, r6, r6
 80069ac:	461a      	mov	r2, r3
 80069ae:	4623      	mov	r3, r4
 80069b0:	f7fa f922 	bl	8000bf8 <__aeabi_uldivmod>
 80069b4:	4603      	mov	r3, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	461a      	mov	r2, r3
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <UART_SetConfig+0x384>)
 80069bc:	fba3 1302 	umull	r1, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	2164      	movs	r1, #100	; 0x64
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	3332      	adds	r3, #50	; 0x32
 80069ce:	4a07      	ldr	r2, [pc, #28]	; (80069ec <UART_SetConfig+0x384>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f003 0207 	and.w	r2, r3, #7
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4442      	add	r2, r8
 80069e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069e2:	e1b2      	b.n	8006d4a <UART_SetConfig+0x6e2>
 80069e4:	40011000 	.word	0x40011000
 80069e8:	40011400 	.word	0x40011400
 80069ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4ad7      	ldr	r2, [pc, #860]	; (8006d54 <UART_SetConfig+0x6ec>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d005      	beq.n	8006a06 <UART_SetConfig+0x39e>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4ad6      	ldr	r2, [pc, #856]	; (8006d58 <UART_SetConfig+0x6f0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	f040 80d1 	bne.w	8006ba8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a06:	f7fe fc79 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 8006a0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	469a      	mov	sl, r3
 8006a10:	f04f 0b00 	mov.w	fp, #0
 8006a14:	46d0      	mov	r8, sl
 8006a16:	46d9      	mov	r9, fp
 8006a18:	eb18 0308 	adds.w	r3, r8, r8
 8006a1c:	eb49 0409 	adc.w	r4, r9, r9
 8006a20:	4698      	mov	r8, r3
 8006a22:	46a1      	mov	r9, r4
 8006a24:	eb18 080a 	adds.w	r8, r8, sl
 8006a28:	eb49 090b 	adc.w	r9, r9, fp
 8006a2c:	f04f 0100 	mov.w	r1, #0
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a40:	4688      	mov	r8, r1
 8006a42:	4691      	mov	r9, r2
 8006a44:	eb1a 0508 	adds.w	r5, sl, r8
 8006a48:	eb4b 0609 	adc.w	r6, fp, r9
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	f04f 0400 	mov.w	r4, #0
 8006a5e:	0094      	lsls	r4, r2, #2
 8006a60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a64:	008b      	lsls	r3, r1, #2
 8006a66:	461a      	mov	r2, r3
 8006a68:	4623      	mov	r3, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	f7fa f8c3 	bl	8000bf8 <__aeabi_uldivmod>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	461a      	mov	r2, r3
 8006a78:	4bb8      	ldr	r3, [pc, #736]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	469b      	mov	fp, r3
 8006a88:	f04f 0c00 	mov.w	ip, #0
 8006a8c:	46d9      	mov	r9, fp
 8006a8e:	46e2      	mov	sl, ip
 8006a90:	eb19 0309 	adds.w	r3, r9, r9
 8006a94:	eb4a 040a 	adc.w	r4, sl, sl
 8006a98:	4699      	mov	r9, r3
 8006a9a:	46a2      	mov	sl, r4
 8006a9c:	eb19 090b 	adds.w	r9, r9, fp
 8006aa0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006aa4:	f04f 0100 	mov.w	r1, #0
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ab0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ab4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ab8:	4689      	mov	r9, r1
 8006aba:	4692      	mov	sl, r2
 8006abc:	eb1b 0509 	adds.w	r5, fp, r9
 8006ac0:	eb4c 060a 	adc.w	r6, ip, sl
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	f04f 0400 	mov.w	r4, #0
 8006ad6:	0094      	lsls	r4, r2, #2
 8006ad8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006adc:	008b      	lsls	r3, r1, #2
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4623      	mov	r3, r4
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	f7fa f887 	bl	8000bf8 <__aeabi_uldivmod>
 8006aea:	4603      	mov	r3, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	461a      	mov	r2, r3
 8006af0:	4b9a      	ldr	r3, [pc, #616]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006af2:	fba3 1302 	umull	r1, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2164      	movs	r1, #100	; 0x64
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	3332      	adds	r3, #50	; 0x32
 8006b04:	4a95      	ldr	r2, [pc, #596]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b10:	4498      	add	r8, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	469b      	mov	fp, r3
 8006b16:	f04f 0c00 	mov.w	ip, #0
 8006b1a:	46d9      	mov	r9, fp
 8006b1c:	46e2      	mov	sl, ip
 8006b1e:	eb19 0309 	adds.w	r3, r9, r9
 8006b22:	eb4a 040a 	adc.w	r4, sl, sl
 8006b26:	4699      	mov	r9, r3
 8006b28:	46a2      	mov	sl, r4
 8006b2a:	eb19 090b 	adds.w	r9, r9, fp
 8006b2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b46:	4689      	mov	r9, r1
 8006b48:	4692      	mov	sl, r2
 8006b4a:	eb1b 0509 	adds.w	r5, fp, r9
 8006b4e:	eb4c 060a 	adc.w	r6, ip, sl
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4619      	mov	r1, r3
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	f04f 0400 	mov.w	r4, #0
 8006b64:	0094      	lsls	r4, r2, #2
 8006b66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b6a:	008b      	lsls	r3, r1, #2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4623      	mov	r3, r4
 8006b70:	4628      	mov	r0, r5
 8006b72:	4631      	mov	r1, r6
 8006b74:	f7fa f840 	bl	8000bf8 <__aeabi_uldivmod>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4b77      	ldr	r3, [pc, #476]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006b80:	fba3 1302 	umull	r1, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	2164      	movs	r1, #100	; 0x64
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	3332      	adds	r3, #50	; 0x32
 8006b92:	4a72      	ldr	r2, [pc, #456]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006b94:	fba2 2303 	umull	r2, r3, r2, r3
 8006b98:	095b      	lsrs	r3, r3, #5
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4442      	add	r2, r8
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	e0d0      	b.n	8006d4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ba8:	f7fe fb94 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8006bac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	469a      	mov	sl, r3
 8006bb2:	f04f 0b00 	mov.w	fp, #0
 8006bb6:	46d0      	mov	r8, sl
 8006bb8:	46d9      	mov	r9, fp
 8006bba:	eb18 0308 	adds.w	r3, r8, r8
 8006bbe:	eb49 0409 	adc.w	r4, r9, r9
 8006bc2:	4698      	mov	r8, r3
 8006bc4:	46a1      	mov	r9, r4
 8006bc6:	eb18 080a 	adds.w	r8, r8, sl
 8006bca:	eb49 090b 	adc.w	r9, r9, fp
 8006bce:	f04f 0100 	mov.w	r1, #0
 8006bd2:	f04f 0200 	mov.w	r2, #0
 8006bd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006be2:	4688      	mov	r8, r1
 8006be4:	4691      	mov	r9, r2
 8006be6:	eb1a 0508 	adds.w	r5, sl, r8
 8006bea:	eb4b 0609 	adc.w	r6, fp, r9
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f04f 0400 	mov.w	r4, #0
 8006c00:	0094      	lsls	r4, r2, #2
 8006c02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c06:	008b      	lsls	r3, r1, #2
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4623      	mov	r3, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	4631      	mov	r1, r6
 8006c10:	f7f9 fff2 	bl	8000bf8 <__aeabi_uldivmod>
 8006c14:	4603      	mov	r3, r0
 8006c16:	460c      	mov	r4, r1
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b50      	ldr	r3, [pc, #320]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	469b      	mov	fp, r3
 8006c2a:	f04f 0c00 	mov.w	ip, #0
 8006c2e:	46d9      	mov	r9, fp
 8006c30:	46e2      	mov	sl, ip
 8006c32:	eb19 0309 	adds.w	r3, r9, r9
 8006c36:	eb4a 040a 	adc.w	r4, sl, sl
 8006c3a:	4699      	mov	r9, r3
 8006c3c:	46a2      	mov	sl, r4
 8006c3e:	eb19 090b 	adds.w	r9, r9, fp
 8006c42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c46:	f04f 0100 	mov.w	r1, #0
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	4692      	mov	sl, r2
 8006c5e:	eb1b 0509 	adds.w	r5, fp, r9
 8006c62:	eb4c 060a 	adc.w	r6, ip, sl
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	f04f 0400 	mov.w	r4, #0
 8006c78:	0094      	lsls	r4, r2, #2
 8006c7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c7e:	008b      	lsls	r3, r1, #2
 8006c80:	461a      	mov	r2, r3
 8006c82:	4623      	mov	r3, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	4631      	mov	r1, r6
 8006c88:	f7f9 ffb6 	bl	8000bf8 <__aeabi_uldivmod>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b32      	ldr	r3, [pc, #200]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006c94:	fba3 1302 	umull	r1, r3, r3, r2
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	3332      	adds	r3, #50	; 0x32
 8006ca6:	4a2d      	ldr	r2, [pc, #180]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cb2:	4498      	add	r8, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	469b      	mov	fp, r3
 8006cb8:	f04f 0c00 	mov.w	ip, #0
 8006cbc:	46d9      	mov	r9, fp
 8006cbe:	46e2      	mov	sl, ip
 8006cc0:	eb19 0309 	adds.w	r3, r9, r9
 8006cc4:	eb4a 040a 	adc.w	r4, sl, sl
 8006cc8:	4699      	mov	r9, r3
 8006cca:	46a2      	mov	sl, r4
 8006ccc:	eb19 090b 	adds.w	r9, r9, fp
 8006cd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cd4:	f04f 0100 	mov.w	r1, #0
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ce4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ce8:	4689      	mov	r9, r1
 8006cea:	4692      	mov	sl, r2
 8006cec:	eb1b 0509 	adds.w	r5, fp, r9
 8006cf0:	eb4c 060a 	adc.w	r6, ip, sl
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	f04f 0400 	mov.w	r4, #0
 8006d06:	0094      	lsls	r4, r2, #2
 8006d08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d0c:	008b      	lsls	r3, r1, #2
 8006d0e:	461a      	mov	r2, r3
 8006d10:	4623      	mov	r3, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	4631      	mov	r1, r6
 8006d16:	f7f9 ff6f 	bl	8000bf8 <__aeabi_uldivmod>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006d22:	fba3 1302 	umull	r1, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	2164      	movs	r1, #100	; 0x64
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	3332      	adds	r3, #50	; 0x32
 8006d34:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <UART_SetConfig+0x6f4>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4442      	add	r2, r8
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	e7ff      	b.n	8006d4a <UART_SetConfig+0x6e2>
 8006d4a:	bf00      	nop
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	40011000 	.word	0x40011000
 8006d58:	40011400 	.word	0x40011400
 8006d5c:	51eb851f 	.word	0x51eb851f

08006d60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d72:	2b84      	cmp	r3, #132	; 0x84
 8006d74:	d005      	beq.n	8006d82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006d76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3303      	adds	r3, #3
 8006d80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d94:	f000 fada 	bl	800734c <vTaskStartScheduler>
  
  return osOK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da0:	b089      	sub	sp, #36	; 0x24
 8006da2:	af04      	add	r7, sp, #16
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d020      	beq.n	8006df2 <osThreadCreate+0x54>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01c      	beq.n	8006df2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685c      	ldr	r4, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681d      	ldr	r5, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691e      	ldr	r6, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ffc8 	bl	8006d60 <makeFreeRtosPriority>
 8006dd0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dda:	9202      	str	r2, [sp, #8]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9100      	str	r1, [sp, #0]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4632      	mov	r2, r6
 8006de4:	4629      	mov	r1, r5
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 f8ed 	bl	8006fc6 <xTaskCreateStatic>
 8006dec:	4603      	mov	r3, r0
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e01c      	b.n	8006e2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685c      	ldr	r4, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dfe:	b29e      	uxth	r6, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7ff ffaa 	bl	8006d60 <makeFreeRtosPriority>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f107 030c 	add.w	r3, r7, #12
 8006e12:	9301      	str	r3, [sp, #4]
 8006e14:	9200      	str	r2, [sp, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f92c 	bl	800707a <xTaskCreate>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d001      	beq.n	8006e2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <osDelay+0x16>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	e000      	b.n	8006e4e <osDelay+0x18>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fa48 	bl	80072e4 <vTaskDelay>
  
  return osOK;
 8006e54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f103 0208 	add.w	r2, r3, #8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f04f 32ff 	mov.w	r2, #4294967295
 8006e76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f103 0208 	add.w	r2, r3, #8
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f103 0208 	add.w	r2, r3, #8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d103      	bne.n	8006f20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	e00c      	b.n	8006f3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3308      	adds	r3, #8
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e002      	b.n	8006f2e <vListInsert+0x2e>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d2f6      	bcs.n	8006f28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6892      	ldr	r2, [r2, #8]
 8006f88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6852      	ldr	r2, [r2, #4]
 8006f92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d103      	bne.n	8006fa6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689a      	ldr	r2, [r3, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	1e5a      	subs	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b08e      	sub	sp, #56	; 0x38
 8006fca:	af04      	add	r7, sp, #16
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	e7fe      	b.n	8006fec <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <xTaskCreateStatic+0x42>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	61fb      	str	r3, [r7, #28]
 8007006:	e7fe      	b.n	8007006 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007008:	2354      	movs	r3, #84	; 0x54
 800700a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b54      	cmp	r3, #84	; 0x54
 8007010:	d009      	beq.n	8007026 <xTaskCreateStatic+0x60>
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	e7fe      	b.n	8007024 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007026:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01e      	beq.n	800706c <xTaskCreateStatic+0xa6>
 800702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01b      	beq.n	800706c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	2202      	movs	r2, #2
 8007042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007046:	2300      	movs	r3, #0
 8007048:	9303      	str	r3, [sp, #12]
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	9302      	str	r3, [sp, #8]
 800704e:	f107 0314 	add.w	r3, r7, #20
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68b9      	ldr	r1, [r7, #8]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f850 	bl	8007104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007066:	f000 f8d3 	bl	8007210 <prvAddNewTaskToReadyList>
 800706a:	e001      	b.n	8007070 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007070:	697b      	ldr	r3, [r7, #20]
	}
 8007072:	4618      	mov	r0, r3
 8007074:	3728      	adds	r7, #40	; 0x28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800707a:	b580      	push	{r7, lr}
 800707c:	b08c      	sub	sp, #48	; 0x30
 800707e:	af04      	add	r7, sp, #16
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4618      	mov	r0, r3
 8007090:	f000 feb0 	bl	8007df4 <pvPortMalloc>
 8007094:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00e      	beq.n	80070ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800709c:	2054      	movs	r0, #84	; 0x54
 800709e:	f000 fea9 	bl	8007df4 <pvPortMalloc>
 80070a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
 80070b0:	e005      	b.n	80070be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070b2:	6978      	ldr	r0, [r7, #20]
 80070b4:	f000 ff60 	bl	8007f78 <vPortFree>
 80070b8:	e001      	b.n	80070be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d017      	beq.n	80070f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070cc:	88fa      	ldrh	r2, [r7, #6]
 80070ce:	2300      	movs	r3, #0
 80070d0:	9303      	str	r3, [sp, #12]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	9302      	str	r3, [sp, #8]
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68b9      	ldr	r1, [r7, #8]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f80e 	bl	8007104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e8:	69f8      	ldr	r0, [r7, #28]
 80070ea:	f000 f891 	bl	8007210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ee:	2301      	movs	r3, #1
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e002      	b.n	80070fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070f4:	f04f 33ff 	mov.w	r3, #4294967295
 80070f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070fa:	69bb      	ldr	r3, [r7, #24]
	}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800711c:	3b01      	subs	r3, #1
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f023 0307 	bic.w	r3, r3, #7
 800712a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <prvInitialiseNewTask+0x46>
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	e7fe      	b.n	8007148 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01f      	beq.n	8007190 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
 8007154:	e012      	b.n	800717c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	7819      	ldrb	r1, [r3, #0]
 800715e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	3334      	adds	r3, #52	; 0x34
 8007166:	460a      	mov	r2, r1
 8007168:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d006      	beq.n	8007184 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	3301      	adds	r3, #1
 800717a:	61fb      	str	r3, [r7, #28]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d9e9      	bls.n	8007156 <prvInitialiseNewTask+0x52>
 8007182:	e000      	b.n	8007186 <prvInitialiseNewTask+0x82>
			{
				break;
 8007184:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800718e:	e003      	b.n	8007198 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	2b06      	cmp	r3, #6
 800719c:	d901      	bls.n	80071a2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800719e:	2306      	movs	r3, #6
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fe70 	bl	8006e9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	3318      	adds	r3, #24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fe6b 	bl	8006e9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	f1c3 0207 	rsb	r2, r3, #7
 80071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	2200      	movs	r2, #0
 80071e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	69b8      	ldr	r0, [r7, #24]
 80071f2:	f000 fbfd 	bl	80079f0 <pxPortInitialiseStack>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007206:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007208:	bf00      	nop
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007218:	f000 fd10 	bl	8007c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800721c:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <prvAddNewTaskToReadyList+0xb8>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a29      	ldr	r2, [pc, #164]	; (80072c8 <prvAddNewTaskToReadyList+0xb8>)
 8007224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007226:	4b29      	ldr	r3, [pc, #164]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d109      	bne.n	8007242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800722e:	4a27      	ldr	r2, [pc, #156]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007234:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <prvAddNewTaskToReadyList+0xb8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d110      	bne.n	800725e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800723c:	f000 fab8 	bl	80077b0 <prvInitialiseTaskLists>
 8007240:	e00d      	b.n	800725e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007242:	4b23      	ldr	r3, [pc, #140]	; (80072d0 <prvAddNewTaskToReadyList+0xc0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800724a:	4b20      	ldr	r3, [pc, #128]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	d802      	bhi.n	800725e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007258:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <prvAddNewTaskToReadyList+0xc4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3301      	adds	r3, #1
 8007264:	4a1b      	ldr	r2, [pc, #108]	; (80072d4 <prvAddNewTaskToReadyList+0xc4>)
 8007266:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	2201      	movs	r2, #1
 800726e:	409a      	lsls	r2, r3
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <prvAddNewTaskToReadyList+0xc8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4313      	orrs	r3, r2
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <prvAddNewTaskToReadyList+0xc8>)
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4a15      	ldr	r2, [pc, #84]	; (80072dc <prvAddNewTaskToReadyList+0xcc>)
 8007288:	441a      	add	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f7ff fe11 	bl	8006eb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007296:	f000 fcff 	bl	8007c98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <prvAddNewTaskToReadyList+0xc0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00e      	beq.n	80072c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072a2:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <prvAddNewTaskToReadyList+0xbc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d207      	bcs.n	80072c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <prvAddNewTaskToReadyList+0xd0>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	200003fc 	.word	0x200003fc
 80072cc:	200002fc 	.word	0x200002fc
 80072d0:	20000408 	.word	0x20000408
 80072d4:	20000418 	.word	0x20000418
 80072d8:	20000404 	.word	0x20000404
 80072dc:	20000300 	.word	0x20000300
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d016      	beq.n	8007324 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072f6:	4b13      	ldr	r3, [pc, #76]	; (8007344 <vTaskDelay+0x60>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <vTaskDelay+0x2e>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60bb      	str	r3, [r7, #8]
 8007310:	e7fe      	b.n	8007310 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007312:	f000 f879 	bl	8007408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007316:	2100      	movs	r1, #0
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fb03 	bl	8007924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800731e:	f000 f881 	bl	8007424 <xTaskResumeAll>
 8007322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d107      	bne.n	800733a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800732a:	4b07      	ldr	r3, [pc, #28]	; (8007348 <vTaskDelay+0x64>)
 800732c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800733a:	bf00      	nop
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000424 	.word	0x20000424
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800735a:	463a      	mov	r2, r7
 800735c:	1d39      	adds	r1, r7, #4
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	4618      	mov	r0, r3
 8007364:	f7fb fa30 	bl	80027c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	9202      	str	r2, [sp, #8]
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	2300      	movs	r3, #0
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	2300      	movs	r3, #0
 8007378:	460a      	mov	r2, r1
 800737a:	491d      	ldr	r1, [pc, #116]	; (80073f0 <vTaskStartScheduler+0xa4>)
 800737c:	481d      	ldr	r0, [pc, #116]	; (80073f4 <vTaskStartScheduler+0xa8>)
 800737e:	f7ff fe22 	bl	8006fc6 <xTaskCreateStatic>
 8007382:	4602      	mov	r2, r0
 8007384:	4b1c      	ldr	r3, [pc, #112]	; (80073f8 <vTaskStartScheduler+0xac>)
 8007386:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007388:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <vTaskStartScheduler+0xac>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007390:	2301      	movs	r3, #1
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	e001      	b.n	800739a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d115      	bne.n	80073cc <vTaskStartScheduler+0x80>
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073b2:	4b12      	ldr	r3, [pc, #72]	; (80073fc <vTaskStartScheduler+0xb0>)
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <vTaskStartScheduler+0xb4>)
 80073bc:	2201      	movs	r2, #1
 80073be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073c0:	4b10      	ldr	r3, [pc, #64]	; (8007404 <vTaskStartScheduler+0xb8>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073c6:	f000 fb9b 	bl	8007b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ca:	e00d      	b.n	80073e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d109      	bne.n	80073e8 <vTaskStartScheduler+0x9c>
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e7fe      	b.n	80073e6 <vTaskStartScheduler+0x9a>
}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	0800a424 	.word	0x0800a424
 80073f4:	08007781 	.word	0x08007781
 80073f8:	20000420 	.word	0x20000420
 80073fc:	2000041c 	.word	0x2000041c
 8007400:	20000408 	.word	0x20000408
 8007404:	20000400 	.word	0x20000400

08007408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vTaskSuspendAll+0x18>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a03      	ldr	r2, [pc, #12]	; (8007420 <vTaskSuspendAll+0x18>)
 8007414:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007416:	bf00      	nop
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	20000424 	.word	0x20000424

08007424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800742e:	2300      	movs	r3, #0
 8007430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007432:	4b41      	ldr	r3, [pc, #260]	; (8007538 <xTaskResumeAll+0x114>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d109      	bne.n	800744e <xTaskResumeAll+0x2a>
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	e7fe      	b.n	800744c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800744e:	f000 fbf5 	bl	8007c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007452:	4b39      	ldr	r3, [pc, #228]	; (8007538 <xTaskResumeAll+0x114>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3b01      	subs	r3, #1
 8007458:	4a37      	ldr	r2, [pc, #220]	; (8007538 <xTaskResumeAll+0x114>)
 800745a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800745c:	4b36      	ldr	r3, [pc, #216]	; (8007538 <xTaskResumeAll+0x114>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d161      	bne.n	8007528 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007464:	4b35      	ldr	r3, [pc, #212]	; (800753c <xTaskResumeAll+0x118>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05d      	beq.n	8007528 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800746c:	e02e      	b.n	80074cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800746e:	4b34      	ldr	r3, [pc, #208]	; (8007540 <xTaskResumeAll+0x11c>)
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3318      	adds	r3, #24
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff fd79 	bl	8006f72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3304      	adds	r3, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fd74 	bl	8006f72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	2201      	movs	r2, #1
 8007490:	409a      	lsls	r2, r3
 8007492:	4b2c      	ldr	r3, [pc, #176]	; (8007544 <xTaskResumeAll+0x120>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4313      	orrs	r3, r2
 8007498:	4a2a      	ldr	r2, [pc, #168]	; (8007544 <xTaskResumeAll+0x120>)
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4a27      	ldr	r2, [pc, #156]	; (8007548 <xTaskResumeAll+0x124>)
 80074aa:	441a      	add	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f7ff fd00 	bl	8006eb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b23      	ldr	r3, [pc, #140]	; (800754c <xTaskResumeAll+0x128>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80074c6:	4b22      	ldr	r3, [pc, #136]	; (8007550 <xTaskResumeAll+0x12c>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074cc:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <xTaskResumeAll+0x11c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1cc      	bne.n	800746e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074da:	f000 fa03 	bl	80078e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074de:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <xTaskResumeAll+0x130>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d010      	beq.n	800750c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074ea:	f000 f837 	bl	800755c <xTaskIncrementTick>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80074f4:	4b16      	ldr	r3, [pc, #88]	; (8007550 <xTaskResumeAll+0x12c>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f1      	bne.n	80074ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <xTaskResumeAll+0x130>)
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800750c:	4b10      	ldr	r3, [pc, #64]	; (8007550 <xTaskResumeAll+0x12c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007518:	4b0f      	ldr	r3, [pc, #60]	; (8007558 <xTaskResumeAll+0x134>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007528:	f000 fbb6 	bl	8007c98 <vPortExitCritical>

	return xAlreadyYielded;
 800752c:	68bb      	ldr	r3, [r7, #8]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000424 	.word	0x20000424
 800753c:	200003fc 	.word	0x200003fc
 8007540:	200003bc 	.word	0x200003bc
 8007544:	20000404 	.word	0x20000404
 8007548:	20000300 	.word	0x20000300
 800754c:	200002fc 	.word	0x200002fc
 8007550:	20000410 	.word	0x20000410
 8007554:	2000040c 	.word	0x2000040c
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007566:	4b4e      	ldr	r3, [pc, #312]	; (80076a0 <xTaskIncrementTick+0x144>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 8087 	bne.w	800767e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007570:	4b4c      	ldr	r3, [pc, #304]	; (80076a4 <xTaskIncrementTick+0x148>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3301      	adds	r3, #1
 8007576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007578:	4a4a      	ldr	r2, [pc, #296]	; (80076a4 <xTaskIncrementTick+0x148>)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11f      	bne.n	80075c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007584:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <xTaskIncrementTick+0x14c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <xTaskIncrementTick+0x46>
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	e7fe      	b.n	80075a0 <xTaskIncrementTick+0x44>
 80075a2:	4b41      	ldr	r3, [pc, #260]	; (80076a8 <xTaskIncrementTick+0x14c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	4b40      	ldr	r3, [pc, #256]	; (80076ac <xTaskIncrementTick+0x150>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3e      	ldr	r2, [pc, #248]	; (80076a8 <xTaskIncrementTick+0x14c>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	4a3e      	ldr	r2, [pc, #248]	; (80076ac <xTaskIncrementTick+0x150>)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	4b3e      	ldr	r3, [pc, #248]	; (80076b0 <xTaskIncrementTick+0x154>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a3c      	ldr	r2, [pc, #240]	; (80076b0 <xTaskIncrementTick+0x154>)
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	f000 f990 	bl	80078e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075c4:	4b3b      	ldr	r3, [pc, #236]	; (80076b4 <xTaskIncrementTick+0x158>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d348      	bcc.n	8007660 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ce:	4b36      	ldr	r3, [pc, #216]	; (80076a8 <xTaskIncrementTick+0x14c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d8:	4b36      	ldr	r3, [pc, #216]	; (80076b4 <xTaskIncrementTick+0x158>)
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	601a      	str	r2, [r3, #0]
					break;
 80075e0:	e03e      	b.n	8007660 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e2:	4b31      	ldr	r3, [pc, #196]	; (80076a8 <xTaskIncrementTick+0x14c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d203      	bcs.n	8007602 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075fa:	4a2e      	ldr	r2, [pc, #184]	; (80076b4 <xTaskIncrementTick+0x158>)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007600:	e02e      	b.n	8007660 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	3304      	adds	r3, #4
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff fcb3 	bl	8006f72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	3318      	adds	r3, #24
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fcaa 	bl	8006f72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	2201      	movs	r2, #1
 8007624:	409a      	lsls	r2, r3
 8007626:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <xTaskIncrementTick+0x15c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4313      	orrs	r3, r2
 800762c:	4a22      	ldr	r2, [pc, #136]	; (80076b8 <xTaskIncrementTick+0x15c>)
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <xTaskIncrementTick+0x160>)
 800763e:	441a      	add	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	3304      	adds	r3, #4
 8007644:	4619      	mov	r1, r3
 8007646:	4610      	mov	r0, r2
 8007648:	f7ff fc36 	bl	8006eb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007650:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <xTaskIncrementTick+0x164>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	429a      	cmp	r2, r3
 8007658:	d3b9      	bcc.n	80075ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800765a:	2301      	movs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765e:	e7b6      	b.n	80075ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007660:	4b17      	ldr	r3, [pc, #92]	; (80076c0 <xTaskIncrementTick+0x164>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	4915      	ldr	r1, [pc, #84]	; (80076bc <xTaskIncrementTick+0x160>)
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d907      	bls.n	8007688 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	e004      	b.n	8007688 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800767e:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <xTaskIncrementTick+0x168>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	4a0f      	ldr	r2, [pc, #60]	; (80076c4 <xTaskIncrementTick+0x168>)
 8007686:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <xTaskIncrementTick+0x16c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007694:	697b      	ldr	r3, [r7, #20]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000424 	.word	0x20000424
 80076a4:	20000400 	.word	0x20000400
 80076a8:	200003b4 	.word	0x200003b4
 80076ac:	200003b8 	.word	0x200003b8
 80076b0:	20000414 	.word	0x20000414
 80076b4:	2000041c 	.word	0x2000041c
 80076b8:	20000404 	.word	0x20000404
 80076bc:	20000300 	.word	0x20000300
 80076c0:	200002fc 	.word	0x200002fc
 80076c4:	2000040c 	.word	0x2000040c
 80076c8:	20000410 	.word	0x20000410

080076cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076d2:	4b26      	ldr	r3, [pc, #152]	; (800776c <vTaskSwitchContext+0xa0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d003      	beq.n	80076e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076da:	4b25      	ldr	r3, [pc, #148]	; (8007770 <vTaskSwitchContext+0xa4>)
 80076dc:	2201      	movs	r2, #1
 80076de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076e0:	e03e      	b.n	8007760 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80076e2:	4b23      	ldr	r3, [pc, #140]	; (8007770 <vTaskSwitchContext+0xa4>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e8:	4b22      	ldr	r3, [pc, #136]	; (8007774 <vTaskSwitchContext+0xa8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	fab3 f383 	clz	r3, r3
 80076f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80076f6:	7afb      	ldrb	r3, [r7, #11]
 80076f8:	f1c3 031f 	rsb	r3, r3, #31
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	491e      	ldr	r1, [pc, #120]	; (8007778 <vTaskSwitchContext+0xac>)
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	440b      	add	r3, r1
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	607b      	str	r3, [r7, #4]
 8007724:	e7fe      	b.n	8007724 <vTaskSwitchContext+0x58>
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4a11      	ldr	r2, [pc, #68]	; (8007778 <vTaskSwitchContext+0xac>)
 8007732:	4413      	add	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	605a      	str	r2, [r3, #4]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	3308      	adds	r3, #8
 8007748:	429a      	cmp	r2, r3
 800774a:	d104      	bne.n	8007756 <vTaskSwitchContext+0x8a>
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a07      	ldr	r2, [pc, #28]	; (800777c <vTaskSwitchContext+0xb0>)
 800775e:	6013      	str	r3, [r2, #0]
}
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	20000424 	.word	0x20000424
 8007770:	20000410 	.word	0x20000410
 8007774:	20000404 	.word	0x20000404
 8007778:	20000300 	.word	0x20000300
 800777c:	200002fc 	.word	0x200002fc

08007780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007788:	f000 f852 	bl	8007830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800778c:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <prvIdleTask+0x28>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d9f9      	bls.n	8007788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <prvIdleTask+0x2c>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077a4:	e7f0      	b.n	8007788 <prvIdleTask+0x8>
 80077a6:	bf00      	nop
 80077a8:	20000300 	.word	0x20000300
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
 80077ba:	e00c      	b.n	80077d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <prvInitialiseTaskLists+0x60>)
 80077c8:	4413      	add	r3, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fb47 	bl	8006e5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3301      	adds	r3, #1
 80077d4:	607b      	str	r3, [r7, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b06      	cmp	r3, #6
 80077da:	d9ef      	bls.n	80077bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077dc:	480d      	ldr	r0, [pc, #52]	; (8007814 <prvInitialiseTaskLists+0x64>)
 80077de:	f7ff fb3e 	bl	8006e5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077e2:	480d      	ldr	r0, [pc, #52]	; (8007818 <prvInitialiseTaskLists+0x68>)
 80077e4:	f7ff fb3b 	bl	8006e5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077e8:	480c      	ldr	r0, [pc, #48]	; (800781c <prvInitialiseTaskLists+0x6c>)
 80077ea:	f7ff fb38 	bl	8006e5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077ee:	480c      	ldr	r0, [pc, #48]	; (8007820 <prvInitialiseTaskLists+0x70>)
 80077f0:	f7ff fb35 	bl	8006e5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077f4:	480b      	ldr	r0, [pc, #44]	; (8007824 <prvInitialiseTaskLists+0x74>)
 80077f6:	f7ff fb32 	bl	8006e5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077fa:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <prvInitialiseTaskLists+0x78>)
 80077fc:	4a05      	ldr	r2, [pc, #20]	; (8007814 <prvInitialiseTaskLists+0x64>)
 80077fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <prvInitialiseTaskLists+0x7c>)
 8007802:	4a05      	ldr	r2, [pc, #20]	; (8007818 <prvInitialiseTaskLists+0x68>)
 8007804:	601a      	str	r2, [r3, #0]
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000300 	.word	0x20000300
 8007814:	2000038c 	.word	0x2000038c
 8007818:	200003a0 	.word	0x200003a0
 800781c:	200003bc 	.word	0x200003bc
 8007820:	200003d0 	.word	0x200003d0
 8007824:	200003e8 	.word	0x200003e8
 8007828:	200003b4 	.word	0x200003b4
 800782c:	200003b8 	.word	0x200003b8

08007830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007836:	e019      	b.n	800786c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007838:	f000 fa00 	bl	8007c3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <prvCheckTasksWaitingTermination+0x4c>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff fb92 	bl	8006f72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <prvCheckTasksWaitingTermination+0x50>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3b01      	subs	r3, #1
 8007854:	4a0a      	ldr	r2, [pc, #40]	; (8007880 <prvCheckTasksWaitingTermination+0x50>)
 8007856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <prvCheckTasksWaitingTermination+0x54>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <prvCheckTasksWaitingTermination+0x54>)
 8007860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007862:	f000 fa19 	bl	8007c98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f80e 	bl	8007888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <prvCheckTasksWaitingTermination+0x54>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e1      	bne.n	8007838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	200003d0 	.word	0x200003d0
 8007880:	200003fc 	.word	0x200003fc
 8007884:	200003e4 	.word	0x200003e4

08007888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007896:	2b00      	cmp	r3, #0
 8007898:	d108      	bne.n	80078ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fb6a 	bl	8007f78 <vPortFree>
				vPortFree( pxTCB );
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fb67 	bl	8007f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078aa:	e017      	b.n	80078dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d103      	bne.n	80078be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fb5e 	bl	8007f78 <vPortFree>
	}
 80078bc:	e00e      	b.n	80078dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d009      	beq.n	80078dc <prvDeleteTCB+0x54>
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e7fe      	b.n	80078da <prvDeleteTCB+0x52>
	}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <prvResetNextTaskUnblockTime+0x38>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <prvResetNextTaskUnblockTime+0x3c>)
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295
 80078fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078fc:	e008      	b.n	8007910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <prvResetNextTaskUnblockTime+0x38>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4a04      	ldr	r2, [pc, #16]	; (8007920 <prvResetNextTaskUnblockTime+0x3c>)
 800790e:	6013      	str	r3, [r2, #0]
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	200003b4 	.word	0x200003b4
 8007920:	2000041c 	.word	0x2000041c

08007924 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800792e:	4b29      	ldr	r3, [pc, #164]	; (80079d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007934:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3304      	adds	r3, #4
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fb19 	bl	8006f72 <uxListRemove>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007946:	4b24      	ldr	r3, [pc, #144]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794c:	2201      	movs	r2, #1
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	43da      	mvns	r2, r3
 8007954:	4b21      	ldr	r3, [pc, #132]	; (80079dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4013      	ands	r3, r2
 800795a:	4a20      	ldr	r2, [pc, #128]	; (80079dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800795c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d10a      	bne.n	800797c <prvAddCurrentTaskToDelayedList+0x58>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3304      	adds	r3, #4
 8007972:	4619      	mov	r1, r3
 8007974:	481a      	ldr	r0, [pc, #104]	; (80079e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007976:	f7ff fa9f 	bl	8006eb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800797a:	e026      	b.n	80079ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007984:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	d209      	bcs.n	80079a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007994:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3304      	adds	r3, #4
 800799e:	4619      	mov	r1, r3
 80079a0:	4610      	mov	r0, r2
 80079a2:	f7ff faad 	bl	8006f00 <vListInsert>
}
 80079a6:	e010      	b.n	80079ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079a8:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3304      	adds	r3, #4
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f7ff faa3 	bl	8006f00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80079ba:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d202      	bcs.n	80079ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079c4:	4a09      	ldr	r2, [pc, #36]	; (80079ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6013      	str	r3, [r2, #0]
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	20000400 	.word	0x20000400
 80079d8:	200002fc 	.word	0x200002fc
 80079dc:	20000404 	.word	0x20000404
 80079e0:	200003e8 	.word	0x200003e8
 80079e4:	200003b8 	.word	0x200003b8
 80079e8:	200003b4 	.word	0x200003b4
 80079ec:	2000041c 	.word	0x2000041c

080079f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3b04      	subs	r3, #4
 8007a00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f023 0201 	bic.w	r2, r3, #1
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3b04      	subs	r3, #4
 8007a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a20:	4a0c      	ldr	r2, [pc, #48]	; (8007a54 <pxPortInitialiseStack+0x64>)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3b14      	subs	r3, #20
 8007a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f06f 0202 	mvn.w	r2, #2
 8007a3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3b20      	subs	r3, #32
 8007a44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	08007a59 	.word	0x08007a59

08007a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a62:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <prvTaskExitError+0x50>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d009      	beq.n	8007a80 <prvTaskExitError+0x28>
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	f383 8811 	msr	BASEPRI, r3
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	f3bf 8f4f 	dsb	sy
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e7fe      	b.n	8007a7e <prvTaskExitError+0x26>
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a92:	bf00      	nop
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0fc      	beq.n	8007a94 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a9a:	bf00      	nop
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000000c 	.word	0x2000000c
 8007aac:	00000000 	.word	0x00000000

08007ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <pxCurrentTCBConst2>)
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f380 8809 	msr	PSP, r0
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8811 	msr	BASEPRI, r0
 8007aca:	4770      	bx	lr
 8007acc:	f3af 8000 	nop.w

08007ad0 <pxCurrentTCBConst2>:
 8007ad0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <prvPortStartFirstTask+0x24>)
 8007ada:	6800      	ldr	r0, [r0, #0]
 8007adc:	6800      	ldr	r0, [r0, #0]
 8007ade:	f380 8808 	msr	MSP, r0
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8814 	msr	CONTROL, r0
 8007aea:	b662      	cpsie	i
 8007aec:	b661      	cpsie	f
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	df00      	svc	0
 8007af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007afa:	bf00      	nop
 8007afc:	e000ed08 	.word	0xe000ed08

08007b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b06:	4b44      	ldr	r3, [pc, #272]	; (8007c18 <xPortStartScheduler+0x118>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a44      	ldr	r2, [pc, #272]	; (8007c1c <xPortStartScheduler+0x11c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d109      	bne.n	8007b24 <xPortStartScheduler+0x24>
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	e7fe      	b.n	8007b22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b24:	4b3c      	ldr	r3, [pc, #240]	; (8007c18 <xPortStartScheduler+0x118>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a3d      	ldr	r2, [pc, #244]	; (8007c20 <xPortStartScheduler+0x120>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d109      	bne.n	8007b42 <xPortStartScheduler+0x42>
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	e7fe      	b.n	8007b40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b42:	4b38      	ldr	r3, [pc, #224]	; (8007c24 <xPortStartScheduler+0x124>)
 8007b44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	22ff      	movs	r2, #255	; 0xff
 8007b52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	4b30      	ldr	r3, [pc, #192]	; (8007c28 <xPortStartScheduler+0x128>)
 8007b68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b6a:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b70:	e009      	b.n	8007b86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007b72:	4b2e      	ldr	r3, [pc, #184]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4a2c      	ldr	r2, [pc, #176]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d0ef      	beq.n	8007b72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b92:	4b26      	ldr	r3, [pc, #152]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f1c3 0307 	rsb	r3, r3, #7
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d009      	beq.n	8007bb2 <xPortStartScheduler+0xb2>
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	e7fe      	b.n	8007bb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <xPortStartScheduler+0x12c>)
 8007bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bd0:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <xPortStartScheduler+0x130>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a16      	ldr	r2, [pc, #88]	; (8007c30 <xPortStartScheduler+0x130>)
 8007bd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bdc:	4b14      	ldr	r3, [pc, #80]	; (8007c30 <xPortStartScheduler+0x130>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <xPortStartScheduler+0x130>)
 8007be2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007be8:	f000 f8d6 	bl	8007d98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bec:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <xPortStartScheduler+0x134>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bf2:	f000 f8f5 	bl	8007de0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a0f      	ldr	r2, [pc, #60]	; (8007c38 <xPortStartScheduler+0x138>)
 8007bfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c02:	f7ff ff69 	bl	8007ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c06:	f7ff fd61 	bl	80076cc <vTaskSwitchContext>
	prvTaskExitError();
 8007c0a:	f7ff ff25 	bl	8007a58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	e000ed00 	.word	0xe000ed00
 8007c1c:	410fc271 	.word	0x410fc271
 8007c20:	410fc270 	.word	0x410fc270
 8007c24:	e000e400 	.word	0xe000e400
 8007c28:	20000428 	.word	0x20000428
 8007c2c:	2000042c 	.word	0x2000042c
 8007c30:	e000ed20 	.word	0xe000ed20
 8007c34:	2000000c 	.word	0x2000000c
 8007c38:	e000ef34 	.word	0xe000ef34

08007c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c54:	4b0e      	ldr	r3, [pc, #56]	; (8007c90 <vPortEnterCritical+0x54>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	4a0d      	ldr	r2, [pc, #52]	; (8007c90 <vPortEnterCritical+0x54>)
 8007c5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c5e:	4b0c      	ldr	r3, [pc, #48]	; (8007c90 <vPortEnterCritical+0x54>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d10e      	bne.n	8007c84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <vPortEnterCritical+0x58>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <vPortEnterCritical+0x48>
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	603b      	str	r3, [r7, #0]
 8007c82:	e7fe      	b.n	8007c82 <vPortEnterCritical+0x46>
	}
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	2000000c 	.word	0x2000000c
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <vPortExitCritical+0x4c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <vPortExitCritical+0x22>
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	607b      	str	r3, [r7, #4]
 8007cb8:	e7fe      	b.n	8007cb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007cba:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <vPortExitCritical+0x4c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4a08      	ldr	r2, [pc, #32]	; (8007ce4 <vPortExitCritical+0x4c>)
 8007cc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cc4:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <vPortExitCritical+0x4c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d104      	bne.n	8007cd6 <vPortExitCritical+0x3e>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	2000000c 	.word	0x2000000c
	...

08007cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cf0:	f3ef 8009 	mrs	r0, PSP
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <pxCurrentTCBConst>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	f01e 0f10 	tst.w	lr, #16
 8007d00:	bf08      	it	eq
 8007d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	6010      	str	r0, [r2, #0]
 8007d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d14:	f380 8811 	msr	BASEPRI, r0
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f7ff fcd4 	bl	80076cc <vTaskSwitchContext>
 8007d24:	f04f 0000 	mov.w	r0, #0
 8007d28:	f380 8811 	msr	BASEPRI, r0
 8007d2c:	bc09      	pop	{r0, r3}
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d36:	f01e 0f10 	tst.w	lr, #16
 8007d3a:	bf08      	it	eq
 8007d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d40:	f380 8809 	msr	PSP, r0
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst>:
 8007d50:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d70:	f7ff fbf4 	bl	800755c <xTaskIncrementTick>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <SysTick_Handler+0x3c>)
 8007d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	e000ed04 	.word	0xe000ed04

08007d98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <vPortSetupTimerInterrupt+0x34>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007da2:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <vPortSetupTimerInterrupt+0x38>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <vPortSetupTimerInterrupt+0x3c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <vPortSetupTimerInterrupt+0x40>)
 8007dae:	fba2 2303 	umull	r2, r3, r2, r3
 8007db2:	099b      	lsrs	r3, r3, #6
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <vPortSetupTimerInterrupt+0x44>)
 8007db6:	3b01      	subs	r3, #1
 8007db8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dba:	4b04      	ldr	r3, [pc, #16]	; (8007dcc <vPortSetupTimerInterrupt+0x34>)
 8007dbc:	2207      	movs	r2, #7
 8007dbe:	601a      	str	r2, [r3, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	e000e010 	.word	0xe000e010
 8007dd0:	e000e018 	.word	0xe000e018
 8007dd4:	20000000 	.word	0x20000000
 8007dd8:	10624dd3 	.word	0x10624dd3
 8007ddc:	e000e014 	.word	0xe000e014

08007de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007df0 <vPortEnableVFP+0x10>
 8007de4:	6801      	ldr	r1, [r0, #0]
 8007de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dea:	6001      	str	r1, [r0, #0]
 8007dec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dee:	bf00      	nop
 8007df0:	e000ed88 	.word	0xe000ed88

08007df4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e00:	f7ff fb02 	bl	8007408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e04:	4b57      	ldr	r3, [pc, #348]	; (8007f64 <pvPortMalloc+0x170>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e0c:	f000 f90c 	bl	8008028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e10:	4b55      	ldr	r3, [pc, #340]	; (8007f68 <pvPortMalloc+0x174>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f040 808c 	bne.w	8007f36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d01c      	beq.n	8007e5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007e24:	2208      	movs	r2, #8
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4413      	add	r3, r2
 8007e2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d013      	beq.n	8007e5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f023 0307 	bic.w	r3, r3, #7
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <pvPortMalloc+0x6a>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e7fe      	b.n	8007e5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d068      	beq.n	8007f36 <pvPortMalloc+0x142>
 8007e64:	4b41      	ldr	r3, [pc, #260]	; (8007f6c <pvPortMalloc+0x178>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d863      	bhi.n	8007f36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e6e:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <pvPortMalloc+0x17c>)
 8007e70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e72:	4b3f      	ldr	r3, [pc, #252]	; (8007f70 <pvPortMalloc+0x17c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e78:	e004      	b.n	8007e84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d903      	bls.n	8007e96 <pvPortMalloc+0xa2>
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f1      	bne.n	8007e7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e96:	4b33      	ldr	r3, [pc, #204]	; (8007f64 <pvPortMalloc+0x170>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d04a      	beq.n	8007f36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	4413      	add	r3, r2
 8007ea8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	1ad2      	subs	r2, r2, r3
 8007eba:	2308      	movs	r3, #8
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d91e      	bls.n	8007f00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d009      	beq.n	8007ee8 <pvPortMalloc+0xf4>
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	e7fe      	b.n	8007ee6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	1ad2      	subs	r2, r2, r3
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007efa:	69b8      	ldr	r0, [r7, #24]
 8007efc:	f000 f8f6 	bl	80080ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <pvPortMalloc+0x178>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	4a18      	ldr	r2, [pc, #96]	; (8007f6c <pvPortMalloc+0x178>)
 8007f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f0e:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <pvPortMalloc+0x178>)
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <pvPortMalloc+0x180>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d203      	bcs.n	8007f22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <pvPortMalloc+0x178>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a15      	ldr	r2, [pc, #84]	; (8007f74 <pvPortMalloc+0x180>)
 8007f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <pvPortMalloc+0x174>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f36:	f7ff fa75 	bl	8007424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d009      	beq.n	8007f58 <pvPortMalloc+0x164>
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e7fe      	b.n	8007f56 <pvPortMalloc+0x162>
	return pvReturn;
 8007f58:	69fb      	ldr	r3, [r7, #28]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20004038 	.word	0x20004038
 8007f68:	20004044 	.word	0x20004044
 8007f6c:	2000403c 	.word	0x2000403c
 8007f70:	20004030 	.word	0x20004030
 8007f74:	20004040 	.word	0x20004040

08007f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d046      	beq.n	8008018 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b20      	ldr	r3, [pc, #128]	; (8008020 <vPortFree+0xa8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <vPortFree+0x42>
 8007fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	e7fe      	b.n	8007fb8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d009      	beq.n	8007fd6 <vPortFree+0x5e>
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
 8007fd4:	e7fe      	b.n	8007fd4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	4b11      	ldr	r3, [pc, #68]	; (8008020 <vPortFree+0xa8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d019      	beq.n	8008018 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d115      	bne.n	8008018 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685a      	ldr	r2, [r3, #4]
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <vPortFree+0xa8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	401a      	ands	r2, r3
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ffc:	f7ff fa04 	bl	8007408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <vPortFree+0xac>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4413      	add	r3, r2
 800800a:	4a06      	ldr	r2, [pc, #24]	; (8008024 <vPortFree+0xac>)
 800800c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800800e:	6938      	ldr	r0, [r7, #16]
 8008010:	f000 f86c 	bl	80080ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008014:	f7ff fa06 	bl	8007424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20004044 	.word	0x20004044
 8008024:	2000403c 	.word	0x2000403c

08008028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800802e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008034:	4b27      	ldr	r3, [pc, #156]	; (80080d4 <prvHeapInit+0xac>)
 8008036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00c      	beq.n	800805c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3307      	adds	r3, #7
 8008046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0307 	bic.w	r3, r3, #7
 800804e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	4a1f      	ldr	r2, [pc, #124]	; (80080d4 <prvHeapInit+0xac>)
 8008058:	4413      	add	r3, r2
 800805a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <prvHeapInit+0xb0>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008066:	4b1c      	ldr	r3, [pc, #112]	; (80080d8 <prvHeapInit+0xb0>)
 8008068:	2200      	movs	r2, #0
 800806a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	4413      	add	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008074:	2208      	movs	r2, #8
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0307 	bic.w	r3, r3, #7
 8008082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4a15      	ldr	r2, [pc, #84]	; (80080dc <prvHeapInit+0xb4>)
 8008088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800808a:	4b14      	ldr	r3, [pc, #80]	; (80080dc <prvHeapInit+0xb4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008092:	4b12      	ldr	r3, [pc, #72]	; (80080dc <prvHeapInit+0xb4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	1ad2      	subs	r2, r2, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080a8:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <prvHeapInit+0xb4>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4a0a      	ldr	r2, [pc, #40]	; (80080e0 <prvHeapInit+0xb8>)
 80080b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <prvHeapInit+0xbc>)
 80080be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080c0:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <prvHeapInit+0xc0>)
 80080c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080c6:	601a      	str	r2, [r3, #0]
}
 80080c8:	bf00      	nop
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000430 	.word	0x20000430
 80080d8:	20004030 	.word	0x20004030
 80080dc:	20004038 	.word	0x20004038
 80080e0:	20004040 	.word	0x20004040
 80080e4:	2000403c 	.word	0x2000403c
 80080e8:	20004044 	.word	0x20004044

080080ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080f4:	4b28      	ldr	r3, [pc, #160]	; (8008198 <prvInsertBlockIntoFreeList+0xac>)
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e002      	b.n	8008100 <prvInsertBlockIntoFreeList+0x14>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	429a      	cmp	r2, r3
 8008108:	d8f7      	bhi.n	80080fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	4413      	add	r3, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d108      	bne.n	800812e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	441a      	add	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	441a      	add	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d118      	bne.n	8008174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b15      	ldr	r3, [pc, #84]	; (800819c <prvInsertBlockIntoFreeList+0xb0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d00d      	beq.n	800816a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	441a      	add	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	e008      	b.n	800817c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800816a:	4b0c      	ldr	r3, [pc, #48]	; (800819c <prvInsertBlockIntoFreeList+0xb0>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	e003      	b.n	800817c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d002      	beq.n	800818a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800818a:	bf00      	nop
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20004030 	.word	0x20004030
 800819c:	20004038 	.word	0x20004038

080081a0 <__errno>:
 80081a0:	4b01      	ldr	r3, [pc, #4]	; (80081a8 <__errno+0x8>)
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000010 	.word	0x20000010

080081ac <__libc_init_array>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4e0d      	ldr	r6, [pc, #52]	; (80081e4 <__libc_init_array+0x38>)
 80081b0:	4c0d      	ldr	r4, [pc, #52]	; (80081e8 <__libc_init_array+0x3c>)
 80081b2:	1ba4      	subs	r4, r4, r6
 80081b4:	10a4      	asrs	r4, r4, #2
 80081b6:	2500      	movs	r5, #0
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	d109      	bne.n	80081d0 <__libc_init_array+0x24>
 80081bc:	4e0b      	ldr	r6, [pc, #44]	; (80081ec <__libc_init_array+0x40>)
 80081be:	4c0c      	ldr	r4, [pc, #48]	; (80081f0 <__libc_init_array+0x44>)
 80081c0:	f002 f844 	bl	800a24c <_init>
 80081c4:	1ba4      	subs	r4, r4, r6
 80081c6:	10a4      	asrs	r4, r4, #2
 80081c8:	2500      	movs	r5, #0
 80081ca:	42a5      	cmp	r5, r4
 80081cc:	d105      	bne.n	80081da <__libc_init_array+0x2e>
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081d4:	4798      	blx	r3
 80081d6:	3501      	adds	r5, #1
 80081d8:	e7ee      	b.n	80081b8 <__libc_init_array+0xc>
 80081da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081de:	4798      	blx	r3
 80081e0:	3501      	adds	r5, #1
 80081e2:	e7f2      	b.n	80081ca <__libc_init_array+0x1e>
 80081e4:	0800a528 	.word	0x0800a528
 80081e8:	0800a528 	.word	0x0800a528
 80081ec:	0800a528 	.word	0x0800a528
 80081f0:	0800a52c 	.word	0x0800a52c

080081f4 <memset>:
 80081f4:	4402      	add	r2, r0
 80081f6:	4603      	mov	r3, r0
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d100      	bne.n	80081fe <memset+0xa>
 80081fc:	4770      	bx	lr
 80081fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008202:	e7f9      	b.n	80081f8 <memset+0x4>

08008204 <iprintf>:
 8008204:	b40f      	push	{r0, r1, r2, r3}
 8008206:	4b0a      	ldr	r3, [pc, #40]	; (8008230 <iprintf+0x2c>)
 8008208:	b513      	push	{r0, r1, r4, lr}
 800820a:	681c      	ldr	r4, [r3, #0]
 800820c:	b124      	cbz	r4, 8008218 <iprintf+0x14>
 800820e:	69a3      	ldr	r3, [r4, #24]
 8008210:	b913      	cbnz	r3, 8008218 <iprintf+0x14>
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fa22 	bl	800865c <__sinit>
 8008218:	ab05      	add	r3, sp, #20
 800821a:	9a04      	ldr	r2, [sp, #16]
 800821c:	68a1      	ldr	r1, [r4, #8]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fbdb 	bl	80089dc <_vfiprintf_r>
 8008226:	b002      	add	sp, #8
 8008228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800822c:	b004      	add	sp, #16
 800822e:	4770      	bx	lr
 8008230:	20000010 	.word	0x20000010

08008234 <_puts_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	460e      	mov	r6, r1
 8008238:	4605      	mov	r5, r0
 800823a:	b118      	cbz	r0, 8008244 <_puts_r+0x10>
 800823c:	6983      	ldr	r3, [r0, #24]
 800823e:	b90b      	cbnz	r3, 8008244 <_puts_r+0x10>
 8008240:	f000 fa0c 	bl	800865c <__sinit>
 8008244:	69ab      	ldr	r3, [r5, #24]
 8008246:	68ac      	ldr	r4, [r5, #8]
 8008248:	b913      	cbnz	r3, 8008250 <_puts_r+0x1c>
 800824a:	4628      	mov	r0, r5
 800824c:	f000 fa06 	bl	800865c <__sinit>
 8008250:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <_puts_r+0xac>)
 8008252:	429c      	cmp	r4, r3
 8008254:	d117      	bne.n	8008286 <_puts_r+0x52>
 8008256:	686c      	ldr	r4, [r5, #4]
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	071b      	lsls	r3, r3, #28
 800825c:	d51d      	bpl.n	800829a <_puts_r+0x66>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	b1db      	cbz	r3, 800829a <_puts_r+0x66>
 8008262:	3e01      	subs	r6, #1
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800826a:	3b01      	subs	r3, #1
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	b9e9      	cbnz	r1, 80082ac <_puts_r+0x78>
 8008270:	2b00      	cmp	r3, #0
 8008272:	da2e      	bge.n	80082d2 <_puts_r+0x9e>
 8008274:	4622      	mov	r2, r4
 8008276:	210a      	movs	r1, #10
 8008278:	4628      	mov	r0, r5
 800827a:	f000 f83f 	bl	80082fc <__swbuf_r>
 800827e:	3001      	adds	r0, #1
 8008280:	d011      	beq.n	80082a6 <_puts_r+0x72>
 8008282:	200a      	movs	r0, #10
 8008284:	e011      	b.n	80082aa <_puts_r+0x76>
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <_puts_r+0xb0>)
 8008288:	429c      	cmp	r4, r3
 800828a:	d101      	bne.n	8008290 <_puts_r+0x5c>
 800828c:	68ac      	ldr	r4, [r5, #8]
 800828e:	e7e3      	b.n	8008258 <_puts_r+0x24>
 8008290:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <_puts_r+0xb4>)
 8008292:	429c      	cmp	r4, r3
 8008294:	bf08      	it	eq
 8008296:	68ec      	ldreq	r4, [r5, #12]
 8008298:	e7de      	b.n	8008258 <_puts_r+0x24>
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f87f 	bl	80083a0 <__swsetup_r>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	d0dd      	beq.n	8008262 <_puts_r+0x2e>
 80082a6:	f04f 30ff 	mov.w	r0, #4294967295
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	da04      	bge.n	80082ba <_puts_r+0x86>
 80082b0:	69a2      	ldr	r2, [r4, #24]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	dc06      	bgt.n	80082c4 <_puts_r+0x90>
 80082b6:	290a      	cmp	r1, #10
 80082b8:	d004      	beq.n	80082c4 <_puts_r+0x90>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	7019      	strb	r1, [r3, #0]
 80082c2:	e7cf      	b.n	8008264 <_puts_r+0x30>
 80082c4:	4622      	mov	r2, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f818 	bl	80082fc <__swbuf_r>
 80082cc:	3001      	adds	r0, #1
 80082ce:	d1c9      	bne.n	8008264 <_puts_r+0x30>
 80082d0:	e7e9      	b.n	80082a6 <_puts_r+0x72>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	200a      	movs	r0, #10
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	7018      	strb	r0, [r3, #0]
 80082dc:	e7e5      	b.n	80082aa <_puts_r+0x76>
 80082de:	bf00      	nop
 80082e0:	0800a468 	.word	0x0800a468
 80082e4:	0800a488 	.word	0x0800a488
 80082e8:	0800a448 	.word	0x0800a448

080082ec <puts>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <puts+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f7ff bf9f 	b.w	8008234 <_puts_r>
 80082f6:	bf00      	nop
 80082f8:	20000010 	.word	0x20000010

080082fc <__swbuf_r>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	460e      	mov	r6, r1
 8008300:	4614      	mov	r4, r2
 8008302:	4605      	mov	r5, r0
 8008304:	b118      	cbz	r0, 800830e <__swbuf_r+0x12>
 8008306:	6983      	ldr	r3, [r0, #24]
 8008308:	b90b      	cbnz	r3, 800830e <__swbuf_r+0x12>
 800830a:	f000 f9a7 	bl	800865c <__sinit>
 800830e:	4b21      	ldr	r3, [pc, #132]	; (8008394 <__swbuf_r+0x98>)
 8008310:	429c      	cmp	r4, r3
 8008312:	d12a      	bne.n	800836a <__swbuf_r+0x6e>
 8008314:	686c      	ldr	r4, [r5, #4]
 8008316:	69a3      	ldr	r3, [r4, #24]
 8008318:	60a3      	str	r3, [r4, #8]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	071a      	lsls	r2, r3, #28
 800831e:	d52e      	bpl.n	800837e <__swbuf_r+0x82>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	b363      	cbz	r3, 800837e <__swbuf_r+0x82>
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	6820      	ldr	r0, [r4, #0]
 8008328:	1ac0      	subs	r0, r0, r3
 800832a:	6963      	ldr	r3, [r4, #20]
 800832c:	b2f6      	uxtb	r6, r6
 800832e:	4283      	cmp	r3, r0
 8008330:	4637      	mov	r7, r6
 8008332:	dc04      	bgt.n	800833e <__swbuf_r+0x42>
 8008334:	4621      	mov	r1, r4
 8008336:	4628      	mov	r0, r5
 8008338:	f000 f926 	bl	8008588 <_fflush_r>
 800833c:	bb28      	cbnz	r0, 800838a <__swbuf_r+0x8e>
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	3b01      	subs	r3, #1
 8008342:	60a3      	str	r3, [r4, #8]
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	6022      	str	r2, [r4, #0]
 800834a:	701e      	strb	r6, [r3, #0]
 800834c:	6963      	ldr	r3, [r4, #20]
 800834e:	3001      	adds	r0, #1
 8008350:	4283      	cmp	r3, r0
 8008352:	d004      	beq.n	800835e <__swbuf_r+0x62>
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	07db      	lsls	r3, r3, #31
 8008358:	d519      	bpl.n	800838e <__swbuf_r+0x92>
 800835a:	2e0a      	cmp	r6, #10
 800835c:	d117      	bne.n	800838e <__swbuf_r+0x92>
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f911 	bl	8008588 <_fflush_r>
 8008366:	b190      	cbz	r0, 800838e <__swbuf_r+0x92>
 8008368:	e00f      	b.n	800838a <__swbuf_r+0x8e>
 800836a:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <__swbuf_r+0x9c>)
 800836c:	429c      	cmp	r4, r3
 800836e:	d101      	bne.n	8008374 <__swbuf_r+0x78>
 8008370:	68ac      	ldr	r4, [r5, #8]
 8008372:	e7d0      	b.n	8008316 <__swbuf_r+0x1a>
 8008374:	4b09      	ldr	r3, [pc, #36]	; (800839c <__swbuf_r+0xa0>)
 8008376:	429c      	cmp	r4, r3
 8008378:	bf08      	it	eq
 800837a:	68ec      	ldreq	r4, [r5, #12]
 800837c:	e7cb      	b.n	8008316 <__swbuf_r+0x1a>
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f000 f80d 	bl	80083a0 <__swsetup_r>
 8008386:	2800      	cmp	r0, #0
 8008388:	d0cc      	beq.n	8008324 <__swbuf_r+0x28>
 800838a:	f04f 37ff 	mov.w	r7, #4294967295
 800838e:	4638      	mov	r0, r7
 8008390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008392:	bf00      	nop
 8008394:	0800a468 	.word	0x0800a468
 8008398:	0800a488 	.word	0x0800a488
 800839c:	0800a448 	.word	0x0800a448

080083a0 <__swsetup_r>:
 80083a0:	4b32      	ldr	r3, [pc, #200]	; (800846c <__swsetup_r+0xcc>)
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	681d      	ldr	r5, [r3, #0]
 80083a6:	4606      	mov	r6, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	b125      	cbz	r5, 80083b6 <__swsetup_r+0x16>
 80083ac:	69ab      	ldr	r3, [r5, #24]
 80083ae:	b913      	cbnz	r3, 80083b6 <__swsetup_r+0x16>
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 f953 	bl	800865c <__sinit>
 80083b6:	4b2e      	ldr	r3, [pc, #184]	; (8008470 <__swsetup_r+0xd0>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	d10f      	bne.n	80083dc <__swsetup_r+0x3c>
 80083bc:	686c      	ldr	r4, [r5, #4]
 80083be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	0715      	lsls	r5, r2, #28
 80083c6:	d42c      	bmi.n	8008422 <__swsetup_r+0x82>
 80083c8:	06d0      	lsls	r0, r2, #27
 80083ca:	d411      	bmi.n	80083f0 <__swsetup_r+0x50>
 80083cc:	2209      	movs	r2, #9
 80083ce:	6032      	str	r2, [r6, #0]
 80083d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	e03e      	b.n	800845a <__swsetup_r+0xba>
 80083dc:	4b25      	ldr	r3, [pc, #148]	; (8008474 <__swsetup_r+0xd4>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	d101      	bne.n	80083e6 <__swsetup_r+0x46>
 80083e2:	68ac      	ldr	r4, [r5, #8]
 80083e4:	e7eb      	b.n	80083be <__swsetup_r+0x1e>
 80083e6:	4b24      	ldr	r3, [pc, #144]	; (8008478 <__swsetup_r+0xd8>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	bf08      	it	eq
 80083ec:	68ec      	ldreq	r4, [r5, #12]
 80083ee:	e7e6      	b.n	80083be <__swsetup_r+0x1e>
 80083f0:	0751      	lsls	r1, r2, #29
 80083f2:	d512      	bpl.n	800841a <__swsetup_r+0x7a>
 80083f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083f6:	b141      	cbz	r1, 800840a <__swsetup_r+0x6a>
 80083f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083fc:	4299      	cmp	r1, r3
 80083fe:	d002      	beq.n	8008406 <__swsetup_r+0x66>
 8008400:	4630      	mov	r0, r6
 8008402:	f000 fa19 	bl	8008838 <_free_r>
 8008406:	2300      	movs	r3, #0
 8008408:	6363      	str	r3, [r4, #52]	; 0x34
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	2300      	movs	r3, #0
 8008414:	6063      	str	r3, [r4, #4]
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f043 0308 	orr.w	r3, r3, #8
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	b94b      	cbnz	r3, 800843a <__swsetup_r+0x9a>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800842c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008430:	d003      	beq.n	800843a <__swsetup_r+0x9a>
 8008432:	4621      	mov	r1, r4
 8008434:	4630      	mov	r0, r6
 8008436:	f000 f9bf 	bl	80087b8 <__smakebuf_r>
 800843a:	89a2      	ldrh	r2, [r4, #12]
 800843c:	f012 0301 	ands.w	r3, r2, #1
 8008440:	d00c      	beq.n	800845c <__swsetup_r+0xbc>
 8008442:	2300      	movs	r3, #0
 8008444:	60a3      	str	r3, [r4, #8]
 8008446:	6963      	ldr	r3, [r4, #20]
 8008448:	425b      	negs	r3, r3
 800844a:	61a3      	str	r3, [r4, #24]
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	b953      	cbnz	r3, 8008466 <__swsetup_r+0xc6>
 8008450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008454:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008458:	d1ba      	bne.n	80083d0 <__swsetup_r+0x30>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0792      	lsls	r2, r2, #30
 800845e:	bf58      	it	pl
 8008460:	6963      	ldrpl	r3, [r4, #20]
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	e7f2      	b.n	800844c <__swsetup_r+0xac>
 8008466:	2000      	movs	r0, #0
 8008468:	e7f7      	b.n	800845a <__swsetup_r+0xba>
 800846a:	bf00      	nop
 800846c:	20000010 	.word	0x20000010
 8008470:	0800a468 	.word	0x0800a468
 8008474:	0800a488 	.word	0x0800a488
 8008478:	0800a448 	.word	0x0800a448

0800847c <__sflush_r>:
 800847c:	898a      	ldrh	r2, [r1, #12]
 800847e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008482:	4605      	mov	r5, r0
 8008484:	0710      	lsls	r0, r2, #28
 8008486:	460c      	mov	r4, r1
 8008488:	d458      	bmi.n	800853c <__sflush_r+0xc0>
 800848a:	684b      	ldr	r3, [r1, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	dc05      	bgt.n	800849c <__sflush_r+0x20>
 8008490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	dc02      	bgt.n	800849c <__sflush_r+0x20>
 8008496:	2000      	movs	r0, #0
 8008498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800849c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800849e:	2e00      	cmp	r6, #0
 80084a0:	d0f9      	beq.n	8008496 <__sflush_r+0x1a>
 80084a2:	2300      	movs	r3, #0
 80084a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084a8:	682f      	ldr	r7, [r5, #0]
 80084aa:	6a21      	ldr	r1, [r4, #32]
 80084ac:	602b      	str	r3, [r5, #0]
 80084ae:	d032      	beq.n	8008516 <__sflush_r+0x9a>
 80084b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	075a      	lsls	r2, r3, #29
 80084b6:	d505      	bpl.n	80084c4 <__sflush_r+0x48>
 80084b8:	6863      	ldr	r3, [r4, #4]
 80084ba:	1ac0      	subs	r0, r0, r3
 80084bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084be:	b10b      	cbz	r3, 80084c4 <__sflush_r+0x48>
 80084c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084c2:	1ac0      	subs	r0, r0, r3
 80084c4:	2300      	movs	r3, #0
 80084c6:	4602      	mov	r2, r0
 80084c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ca:	6a21      	ldr	r1, [r4, #32]
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b0      	blx	r6
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	d106      	bne.n	80084e4 <__sflush_r+0x68>
 80084d6:	6829      	ldr	r1, [r5, #0]
 80084d8:	291d      	cmp	r1, #29
 80084da:	d848      	bhi.n	800856e <__sflush_r+0xf2>
 80084dc:	4a29      	ldr	r2, [pc, #164]	; (8008584 <__sflush_r+0x108>)
 80084de:	40ca      	lsrs	r2, r1
 80084e0:	07d6      	lsls	r6, r2, #31
 80084e2:	d544      	bpl.n	800856e <__sflush_r+0xf2>
 80084e4:	2200      	movs	r2, #0
 80084e6:	6062      	str	r2, [r4, #4]
 80084e8:	04d9      	lsls	r1, r3, #19
 80084ea:	6922      	ldr	r2, [r4, #16]
 80084ec:	6022      	str	r2, [r4, #0]
 80084ee:	d504      	bpl.n	80084fa <__sflush_r+0x7e>
 80084f0:	1c42      	adds	r2, r0, #1
 80084f2:	d101      	bne.n	80084f8 <__sflush_r+0x7c>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b903      	cbnz	r3, 80084fa <__sflush_r+0x7e>
 80084f8:	6560      	str	r0, [r4, #84]	; 0x54
 80084fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084fc:	602f      	str	r7, [r5, #0]
 80084fe:	2900      	cmp	r1, #0
 8008500:	d0c9      	beq.n	8008496 <__sflush_r+0x1a>
 8008502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008506:	4299      	cmp	r1, r3
 8008508:	d002      	beq.n	8008510 <__sflush_r+0x94>
 800850a:	4628      	mov	r0, r5
 800850c:	f000 f994 	bl	8008838 <_free_r>
 8008510:	2000      	movs	r0, #0
 8008512:	6360      	str	r0, [r4, #52]	; 0x34
 8008514:	e7c0      	b.n	8008498 <__sflush_r+0x1c>
 8008516:	2301      	movs	r3, #1
 8008518:	4628      	mov	r0, r5
 800851a:	47b0      	blx	r6
 800851c:	1c41      	adds	r1, r0, #1
 800851e:	d1c8      	bne.n	80084b2 <__sflush_r+0x36>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0c5      	beq.n	80084b2 <__sflush_r+0x36>
 8008526:	2b1d      	cmp	r3, #29
 8008528:	d001      	beq.n	800852e <__sflush_r+0xb2>
 800852a:	2b16      	cmp	r3, #22
 800852c:	d101      	bne.n	8008532 <__sflush_r+0xb6>
 800852e:	602f      	str	r7, [r5, #0]
 8008530:	e7b1      	b.n	8008496 <__sflush_r+0x1a>
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	e7ad      	b.n	8008498 <__sflush_r+0x1c>
 800853c:	690f      	ldr	r7, [r1, #16]
 800853e:	2f00      	cmp	r7, #0
 8008540:	d0a9      	beq.n	8008496 <__sflush_r+0x1a>
 8008542:	0793      	lsls	r3, r2, #30
 8008544:	680e      	ldr	r6, [r1, #0]
 8008546:	bf08      	it	eq
 8008548:	694b      	ldreq	r3, [r1, #20]
 800854a:	600f      	str	r7, [r1, #0]
 800854c:	bf18      	it	ne
 800854e:	2300      	movne	r3, #0
 8008550:	eba6 0807 	sub.w	r8, r6, r7
 8008554:	608b      	str	r3, [r1, #8]
 8008556:	f1b8 0f00 	cmp.w	r8, #0
 800855a:	dd9c      	ble.n	8008496 <__sflush_r+0x1a>
 800855c:	4643      	mov	r3, r8
 800855e:	463a      	mov	r2, r7
 8008560:	6a21      	ldr	r1, [r4, #32]
 8008562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008564:	4628      	mov	r0, r5
 8008566:	47b0      	blx	r6
 8008568:	2800      	cmp	r0, #0
 800856a:	dc06      	bgt.n	800857a <__sflush_r+0xfe>
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	e78e      	b.n	8008498 <__sflush_r+0x1c>
 800857a:	4407      	add	r7, r0
 800857c:	eba8 0800 	sub.w	r8, r8, r0
 8008580:	e7e9      	b.n	8008556 <__sflush_r+0xda>
 8008582:	bf00      	nop
 8008584:	20400001 	.word	0x20400001

08008588 <_fflush_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	690b      	ldr	r3, [r1, #16]
 800858c:	4605      	mov	r5, r0
 800858e:	460c      	mov	r4, r1
 8008590:	b1db      	cbz	r3, 80085ca <_fflush_r+0x42>
 8008592:	b118      	cbz	r0, 800859c <_fflush_r+0x14>
 8008594:	6983      	ldr	r3, [r0, #24]
 8008596:	b90b      	cbnz	r3, 800859c <_fflush_r+0x14>
 8008598:	f000 f860 	bl	800865c <__sinit>
 800859c:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <_fflush_r+0x48>)
 800859e:	429c      	cmp	r4, r3
 80085a0:	d109      	bne.n	80085b6 <_fflush_r+0x2e>
 80085a2:	686c      	ldr	r4, [r5, #4]
 80085a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a8:	b17b      	cbz	r3, 80085ca <_fflush_r+0x42>
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b2:	f7ff bf63 	b.w	800847c <__sflush_r>
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <_fflush_r+0x4c>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	d101      	bne.n	80085c0 <_fflush_r+0x38>
 80085bc:	68ac      	ldr	r4, [r5, #8]
 80085be:	e7f1      	b.n	80085a4 <_fflush_r+0x1c>
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <_fflush_r+0x50>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	bf08      	it	eq
 80085c6:	68ec      	ldreq	r4, [r5, #12]
 80085c8:	e7ec      	b.n	80085a4 <_fflush_r+0x1c>
 80085ca:	2000      	movs	r0, #0
 80085cc:	bd38      	pop	{r3, r4, r5, pc}
 80085ce:	bf00      	nop
 80085d0:	0800a468 	.word	0x0800a468
 80085d4:	0800a488 	.word	0x0800a488
 80085d8:	0800a448 	.word	0x0800a448

080085dc <std>:
 80085dc:	2300      	movs	r3, #0
 80085de:	b510      	push	{r4, lr}
 80085e0:	4604      	mov	r4, r0
 80085e2:	e9c0 3300 	strd	r3, r3, [r0]
 80085e6:	6083      	str	r3, [r0, #8]
 80085e8:	8181      	strh	r1, [r0, #12]
 80085ea:	6643      	str	r3, [r0, #100]	; 0x64
 80085ec:	81c2      	strh	r2, [r0, #14]
 80085ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085f2:	6183      	str	r3, [r0, #24]
 80085f4:	4619      	mov	r1, r3
 80085f6:	2208      	movs	r2, #8
 80085f8:	305c      	adds	r0, #92	; 0x5c
 80085fa:	f7ff fdfb 	bl	80081f4 <memset>
 80085fe:	4b05      	ldr	r3, [pc, #20]	; (8008614 <std+0x38>)
 8008600:	6263      	str	r3, [r4, #36]	; 0x24
 8008602:	4b05      	ldr	r3, [pc, #20]	; (8008618 <std+0x3c>)
 8008604:	62a3      	str	r3, [r4, #40]	; 0x28
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <std+0x40>)
 8008608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800860a:	4b05      	ldr	r3, [pc, #20]	; (8008620 <std+0x44>)
 800860c:	6224      	str	r4, [r4, #32]
 800860e:	6323      	str	r3, [r4, #48]	; 0x30
 8008610:	bd10      	pop	{r4, pc}
 8008612:	bf00      	nop
 8008614:	08008f39 	.word	0x08008f39
 8008618:	08008f5b 	.word	0x08008f5b
 800861c:	08008f93 	.word	0x08008f93
 8008620:	08008fb7 	.word	0x08008fb7

08008624 <_cleanup_r>:
 8008624:	4901      	ldr	r1, [pc, #4]	; (800862c <_cleanup_r+0x8>)
 8008626:	f000 b885 	b.w	8008734 <_fwalk_reent>
 800862a:	bf00      	nop
 800862c:	08008589 	.word	0x08008589

08008630 <__sfmoreglue>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	1e4a      	subs	r2, r1, #1
 8008634:	2568      	movs	r5, #104	; 0x68
 8008636:	4355      	muls	r5, r2
 8008638:	460e      	mov	r6, r1
 800863a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800863e:	f000 f949 	bl	80088d4 <_malloc_r>
 8008642:	4604      	mov	r4, r0
 8008644:	b140      	cbz	r0, 8008658 <__sfmoreglue+0x28>
 8008646:	2100      	movs	r1, #0
 8008648:	e9c0 1600 	strd	r1, r6, [r0]
 800864c:	300c      	adds	r0, #12
 800864e:	60a0      	str	r0, [r4, #8]
 8008650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008654:	f7ff fdce 	bl	80081f4 <memset>
 8008658:	4620      	mov	r0, r4
 800865a:	bd70      	pop	{r4, r5, r6, pc}

0800865c <__sinit>:
 800865c:	6983      	ldr	r3, [r0, #24]
 800865e:	b510      	push	{r4, lr}
 8008660:	4604      	mov	r4, r0
 8008662:	bb33      	cbnz	r3, 80086b2 <__sinit+0x56>
 8008664:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008668:	6503      	str	r3, [r0, #80]	; 0x50
 800866a:	4b12      	ldr	r3, [pc, #72]	; (80086b4 <__sinit+0x58>)
 800866c:	4a12      	ldr	r2, [pc, #72]	; (80086b8 <__sinit+0x5c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6282      	str	r2, [r0, #40]	; 0x28
 8008672:	4298      	cmp	r0, r3
 8008674:	bf04      	itt	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	6183      	streq	r3, [r0, #24]
 800867a:	f000 f81f 	bl	80086bc <__sfp>
 800867e:	6060      	str	r0, [r4, #4]
 8008680:	4620      	mov	r0, r4
 8008682:	f000 f81b 	bl	80086bc <__sfp>
 8008686:	60a0      	str	r0, [r4, #8]
 8008688:	4620      	mov	r0, r4
 800868a:	f000 f817 	bl	80086bc <__sfp>
 800868e:	2200      	movs	r2, #0
 8008690:	60e0      	str	r0, [r4, #12]
 8008692:	2104      	movs	r1, #4
 8008694:	6860      	ldr	r0, [r4, #4]
 8008696:	f7ff ffa1 	bl	80085dc <std>
 800869a:	2201      	movs	r2, #1
 800869c:	2109      	movs	r1, #9
 800869e:	68a0      	ldr	r0, [r4, #8]
 80086a0:	f7ff ff9c 	bl	80085dc <std>
 80086a4:	2202      	movs	r2, #2
 80086a6:	2112      	movs	r1, #18
 80086a8:	68e0      	ldr	r0, [r4, #12]
 80086aa:	f7ff ff97 	bl	80085dc <std>
 80086ae:	2301      	movs	r3, #1
 80086b0:	61a3      	str	r3, [r4, #24]
 80086b2:	bd10      	pop	{r4, pc}
 80086b4:	0800a444 	.word	0x0800a444
 80086b8:	08008625 	.word	0x08008625

080086bc <__sfp>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	4b1b      	ldr	r3, [pc, #108]	; (800872c <__sfp+0x70>)
 80086c0:	681e      	ldr	r6, [r3, #0]
 80086c2:	69b3      	ldr	r3, [r6, #24]
 80086c4:	4607      	mov	r7, r0
 80086c6:	b913      	cbnz	r3, 80086ce <__sfp+0x12>
 80086c8:	4630      	mov	r0, r6
 80086ca:	f7ff ffc7 	bl	800865c <__sinit>
 80086ce:	3648      	adds	r6, #72	; 0x48
 80086d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	d503      	bpl.n	80086e0 <__sfp+0x24>
 80086d8:	6833      	ldr	r3, [r6, #0]
 80086da:	b133      	cbz	r3, 80086ea <__sfp+0x2e>
 80086dc:	6836      	ldr	r6, [r6, #0]
 80086de:	e7f7      	b.n	80086d0 <__sfp+0x14>
 80086e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086e4:	b16d      	cbz	r5, 8008702 <__sfp+0x46>
 80086e6:	3468      	adds	r4, #104	; 0x68
 80086e8:	e7f4      	b.n	80086d4 <__sfp+0x18>
 80086ea:	2104      	movs	r1, #4
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff ff9f 	bl	8008630 <__sfmoreglue>
 80086f2:	6030      	str	r0, [r6, #0]
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d1f1      	bne.n	80086dc <__sfp+0x20>
 80086f8:	230c      	movs	r3, #12
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	4604      	mov	r4, r0
 80086fe:	4620      	mov	r0, r4
 8008700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008702:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <__sfp+0x74>)
 8008704:	6665      	str	r5, [r4, #100]	; 0x64
 8008706:	e9c4 5500 	strd	r5, r5, [r4]
 800870a:	60a5      	str	r5, [r4, #8]
 800870c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008710:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008714:	2208      	movs	r2, #8
 8008716:	4629      	mov	r1, r5
 8008718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800871c:	f7ff fd6a 	bl	80081f4 <memset>
 8008720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008728:	e7e9      	b.n	80086fe <__sfp+0x42>
 800872a:	bf00      	nop
 800872c:	0800a444 	.word	0x0800a444
 8008730:	ffff0001 	.word	0xffff0001

08008734 <_fwalk_reent>:
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4680      	mov	r8, r0
 800873a:	4689      	mov	r9, r1
 800873c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008740:	2600      	movs	r6, #0
 8008742:	b914      	cbnz	r4, 800874a <_fwalk_reent+0x16>
 8008744:	4630      	mov	r0, r6
 8008746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800874a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800874e:	3f01      	subs	r7, #1
 8008750:	d501      	bpl.n	8008756 <_fwalk_reent+0x22>
 8008752:	6824      	ldr	r4, [r4, #0]
 8008754:	e7f5      	b.n	8008742 <_fwalk_reent+0xe>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d907      	bls.n	800876c <_fwalk_reent+0x38>
 800875c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008760:	3301      	adds	r3, #1
 8008762:	d003      	beq.n	800876c <_fwalk_reent+0x38>
 8008764:	4629      	mov	r1, r5
 8008766:	4640      	mov	r0, r8
 8008768:	47c8      	blx	r9
 800876a:	4306      	orrs	r6, r0
 800876c:	3568      	adds	r5, #104	; 0x68
 800876e:	e7ee      	b.n	800874e <_fwalk_reent+0x1a>

08008770 <__swhatbuf_r>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	460e      	mov	r6, r1
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	2900      	cmp	r1, #0
 800877a:	b096      	sub	sp, #88	; 0x58
 800877c:	4614      	mov	r4, r2
 800877e:	461d      	mov	r5, r3
 8008780:	da07      	bge.n	8008792 <__swhatbuf_r+0x22>
 8008782:	2300      	movs	r3, #0
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	89b3      	ldrh	r3, [r6, #12]
 8008788:	061a      	lsls	r2, r3, #24
 800878a:	d410      	bmi.n	80087ae <__swhatbuf_r+0x3e>
 800878c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008790:	e00e      	b.n	80087b0 <__swhatbuf_r+0x40>
 8008792:	466a      	mov	r2, sp
 8008794:	f000 fc36 	bl	8009004 <_fstat_r>
 8008798:	2800      	cmp	r0, #0
 800879a:	dbf2      	blt.n	8008782 <__swhatbuf_r+0x12>
 800879c:	9a01      	ldr	r2, [sp, #4]
 800879e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087a6:	425a      	negs	r2, r3
 80087a8:	415a      	adcs	r2, r3
 80087aa:	602a      	str	r2, [r5, #0]
 80087ac:	e7ee      	b.n	800878c <__swhatbuf_r+0x1c>
 80087ae:	2340      	movs	r3, #64	; 0x40
 80087b0:	2000      	movs	r0, #0
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	b016      	add	sp, #88	; 0x58
 80087b6:	bd70      	pop	{r4, r5, r6, pc}

080087b8 <__smakebuf_r>:
 80087b8:	898b      	ldrh	r3, [r1, #12]
 80087ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087bc:	079d      	lsls	r5, r3, #30
 80087be:	4606      	mov	r6, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	d507      	bpl.n	80087d4 <__smakebuf_r+0x1c>
 80087c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	2301      	movs	r3, #1
 80087ce:	6163      	str	r3, [r4, #20]
 80087d0:	b002      	add	sp, #8
 80087d2:	bd70      	pop	{r4, r5, r6, pc}
 80087d4:	ab01      	add	r3, sp, #4
 80087d6:	466a      	mov	r2, sp
 80087d8:	f7ff ffca 	bl	8008770 <__swhatbuf_r>
 80087dc:	9900      	ldr	r1, [sp, #0]
 80087de:	4605      	mov	r5, r0
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 f877 	bl	80088d4 <_malloc_r>
 80087e6:	b948      	cbnz	r0, 80087fc <__smakebuf_r+0x44>
 80087e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ec:	059a      	lsls	r2, r3, #22
 80087ee:	d4ef      	bmi.n	80087d0 <__smakebuf_r+0x18>
 80087f0:	f023 0303 	bic.w	r3, r3, #3
 80087f4:	f043 0302 	orr.w	r3, r3, #2
 80087f8:	81a3      	strh	r3, [r4, #12]
 80087fa:	e7e3      	b.n	80087c4 <__smakebuf_r+0xc>
 80087fc:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <__smakebuf_r+0x7c>)
 80087fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008800:	89a3      	ldrh	r3, [r4, #12]
 8008802:	6020      	str	r0, [r4, #0]
 8008804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	9b00      	ldr	r3, [sp, #0]
 800880c:	6163      	str	r3, [r4, #20]
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	6120      	str	r0, [r4, #16]
 8008812:	b15b      	cbz	r3, 800882c <__smakebuf_r+0x74>
 8008814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008818:	4630      	mov	r0, r6
 800881a:	f000 fc05 	bl	8009028 <_isatty_r>
 800881e:	b128      	cbz	r0, 800882c <__smakebuf_r+0x74>
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	431d      	orrs	r5, r3
 8008830:	81a5      	strh	r5, [r4, #12]
 8008832:	e7cd      	b.n	80087d0 <__smakebuf_r+0x18>
 8008834:	08008625 	.word	0x08008625

08008838 <_free_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4605      	mov	r5, r0
 800883c:	2900      	cmp	r1, #0
 800883e:	d045      	beq.n	80088cc <_free_r+0x94>
 8008840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008844:	1f0c      	subs	r4, r1, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfb8      	it	lt
 800884a:	18e4      	addlt	r4, r4, r3
 800884c:	f000 fc0e 	bl	800906c <__malloc_lock>
 8008850:	4a1f      	ldr	r2, [pc, #124]	; (80088d0 <_free_r+0x98>)
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	4610      	mov	r0, r2
 8008856:	b933      	cbnz	r3, 8008866 <_free_r+0x2e>
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6014      	str	r4, [r2, #0]
 800885c:	4628      	mov	r0, r5
 800885e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008862:	f000 bc04 	b.w	800906e <__malloc_unlock>
 8008866:	42a3      	cmp	r3, r4
 8008868:	d90c      	bls.n	8008884 <_free_r+0x4c>
 800886a:	6821      	ldr	r1, [r4, #0]
 800886c:	1862      	adds	r2, r4, r1
 800886e:	4293      	cmp	r3, r2
 8008870:	bf04      	itt	eq
 8008872:	681a      	ldreq	r2, [r3, #0]
 8008874:	685b      	ldreq	r3, [r3, #4]
 8008876:	6063      	str	r3, [r4, #4]
 8008878:	bf04      	itt	eq
 800887a:	1852      	addeq	r2, r2, r1
 800887c:	6022      	streq	r2, [r4, #0]
 800887e:	6004      	str	r4, [r0, #0]
 8008880:	e7ec      	b.n	800885c <_free_r+0x24>
 8008882:	4613      	mov	r3, r2
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	b10a      	cbz	r2, 800888c <_free_r+0x54>
 8008888:	42a2      	cmp	r2, r4
 800888a:	d9fa      	bls.n	8008882 <_free_r+0x4a>
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	1858      	adds	r0, r3, r1
 8008890:	42a0      	cmp	r0, r4
 8008892:	d10b      	bne.n	80088ac <_free_r+0x74>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	4401      	add	r1, r0
 8008898:	1858      	adds	r0, r3, r1
 800889a:	4282      	cmp	r2, r0
 800889c:	6019      	str	r1, [r3, #0]
 800889e:	d1dd      	bne.n	800885c <_free_r+0x24>
 80088a0:	6810      	ldr	r0, [r2, #0]
 80088a2:	6852      	ldr	r2, [r2, #4]
 80088a4:	605a      	str	r2, [r3, #4]
 80088a6:	4401      	add	r1, r0
 80088a8:	6019      	str	r1, [r3, #0]
 80088aa:	e7d7      	b.n	800885c <_free_r+0x24>
 80088ac:	d902      	bls.n	80088b4 <_free_r+0x7c>
 80088ae:	230c      	movs	r3, #12
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	e7d3      	b.n	800885c <_free_r+0x24>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	1821      	adds	r1, r4, r0
 80088b8:	428a      	cmp	r2, r1
 80088ba:	bf04      	itt	eq
 80088bc:	6811      	ldreq	r1, [r2, #0]
 80088be:	6852      	ldreq	r2, [r2, #4]
 80088c0:	6062      	str	r2, [r4, #4]
 80088c2:	bf04      	itt	eq
 80088c4:	1809      	addeq	r1, r1, r0
 80088c6:	6021      	streq	r1, [r4, #0]
 80088c8:	605c      	str	r4, [r3, #4]
 80088ca:	e7c7      	b.n	800885c <_free_r+0x24>
 80088cc:	bd38      	pop	{r3, r4, r5, pc}
 80088ce:	bf00      	nop
 80088d0:	20004048 	.word	0x20004048

080088d4 <_malloc_r>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	1ccd      	adds	r5, r1, #3
 80088d8:	f025 0503 	bic.w	r5, r5, #3
 80088dc:	3508      	adds	r5, #8
 80088de:	2d0c      	cmp	r5, #12
 80088e0:	bf38      	it	cc
 80088e2:	250c      	movcc	r5, #12
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	4606      	mov	r6, r0
 80088e8:	db01      	blt.n	80088ee <_malloc_r+0x1a>
 80088ea:	42a9      	cmp	r1, r5
 80088ec:	d903      	bls.n	80088f6 <_malloc_r+0x22>
 80088ee:	230c      	movs	r3, #12
 80088f0:	6033      	str	r3, [r6, #0]
 80088f2:	2000      	movs	r0, #0
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	f000 fbb9 	bl	800906c <__malloc_lock>
 80088fa:	4a21      	ldr	r2, [pc, #132]	; (8008980 <_malloc_r+0xac>)
 80088fc:	6814      	ldr	r4, [r2, #0]
 80088fe:	4621      	mov	r1, r4
 8008900:	b991      	cbnz	r1, 8008928 <_malloc_r+0x54>
 8008902:	4c20      	ldr	r4, [pc, #128]	; (8008984 <_malloc_r+0xb0>)
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	b91b      	cbnz	r3, 8008910 <_malloc_r+0x3c>
 8008908:	4630      	mov	r0, r6
 800890a:	f000 fb05 	bl	8008f18 <_sbrk_r>
 800890e:	6020      	str	r0, [r4, #0]
 8008910:	4629      	mov	r1, r5
 8008912:	4630      	mov	r0, r6
 8008914:	f000 fb00 	bl	8008f18 <_sbrk_r>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d124      	bne.n	8008966 <_malloc_r+0x92>
 800891c:	230c      	movs	r3, #12
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	4630      	mov	r0, r6
 8008922:	f000 fba4 	bl	800906e <__malloc_unlock>
 8008926:	e7e4      	b.n	80088f2 <_malloc_r+0x1e>
 8008928:	680b      	ldr	r3, [r1, #0]
 800892a:	1b5b      	subs	r3, r3, r5
 800892c:	d418      	bmi.n	8008960 <_malloc_r+0x8c>
 800892e:	2b0b      	cmp	r3, #11
 8008930:	d90f      	bls.n	8008952 <_malloc_r+0x7e>
 8008932:	600b      	str	r3, [r1, #0]
 8008934:	50cd      	str	r5, [r1, r3]
 8008936:	18cc      	adds	r4, r1, r3
 8008938:	4630      	mov	r0, r6
 800893a:	f000 fb98 	bl	800906e <__malloc_unlock>
 800893e:	f104 000b 	add.w	r0, r4, #11
 8008942:	1d23      	adds	r3, r4, #4
 8008944:	f020 0007 	bic.w	r0, r0, #7
 8008948:	1ac3      	subs	r3, r0, r3
 800894a:	d0d3      	beq.n	80088f4 <_malloc_r+0x20>
 800894c:	425a      	negs	r2, r3
 800894e:	50e2      	str	r2, [r4, r3]
 8008950:	e7d0      	b.n	80088f4 <_malloc_r+0x20>
 8008952:	428c      	cmp	r4, r1
 8008954:	684b      	ldr	r3, [r1, #4]
 8008956:	bf16      	itet	ne
 8008958:	6063      	strne	r3, [r4, #4]
 800895a:	6013      	streq	r3, [r2, #0]
 800895c:	460c      	movne	r4, r1
 800895e:	e7eb      	b.n	8008938 <_malloc_r+0x64>
 8008960:	460c      	mov	r4, r1
 8008962:	6849      	ldr	r1, [r1, #4]
 8008964:	e7cc      	b.n	8008900 <_malloc_r+0x2c>
 8008966:	1cc4      	adds	r4, r0, #3
 8008968:	f024 0403 	bic.w	r4, r4, #3
 800896c:	42a0      	cmp	r0, r4
 800896e:	d005      	beq.n	800897c <_malloc_r+0xa8>
 8008970:	1a21      	subs	r1, r4, r0
 8008972:	4630      	mov	r0, r6
 8008974:	f000 fad0 	bl	8008f18 <_sbrk_r>
 8008978:	3001      	adds	r0, #1
 800897a:	d0cf      	beq.n	800891c <_malloc_r+0x48>
 800897c:	6025      	str	r5, [r4, #0]
 800897e:	e7db      	b.n	8008938 <_malloc_r+0x64>
 8008980:	20004048 	.word	0x20004048
 8008984:	2000404c 	.word	0x2000404c

08008988 <__sfputc_r>:
 8008988:	6893      	ldr	r3, [r2, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	b410      	push	{r4}
 8008990:	6093      	str	r3, [r2, #8]
 8008992:	da08      	bge.n	80089a6 <__sfputc_r+0x1e>
 8008994:	6994      	ldr	r4, [r2, #24]
 8008996:	42a3      	cmp	r3, r4
 8008998:	db01      	blt.n	800899e <__sfputc_r+0x16>
 800899a:	290a      	cmp	r1, #10
 800899c:	d103      	bne.n	80089a6 <__sfputc_r+0x1e>
 800899e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a2:	f7ff bcab 	b.w	80082fc <__swbuf_r>
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	1c58      	adds	r0, r3, #1
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	7019      	strb	r1, [r3, #0]
 80089ae:	4608      	mov	r0, r1
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <__sfputs_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	18d5      	adds	r5, r2, r3
 80089c0:	42ac      	cmp	r4, r5
 80089c2:	d101      	bne.n	80089c8 <__sfputs_r+0x12>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e007      	b.n	80089d8 <__sfputs_r+0x22>
 80089c8:	463a      	mov	r2, r7
 80089ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ffda 	bl	8008988 <__sfputc_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d1f3      	bne.n	80089c0 <__sfputs_r+0xa>
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089dc <_vfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460c      	mov	r4, r1
 80089e2:	b09d      	sub	sp, #116	; 0x74
 80089e4:	4617      	mov	r7, r2
 80089e6:	461d      	mov	r5, r3
 80089e8:	4606      	mov	r6, r0
 80089ea:	b118      	cbz	r0, 80089f4 <_vfiprintf_r+0x18>
 80089ec:	6983      	ldr	r3, [r0, #24]
 80089ee:	b90b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x18>
 80089f0:	f7ff fe34 	bl	800865c <__sinit>
 80089f4:	4b7c      	ldr	r3, [pc, #496]	; (8008be8 <_vfiprintf_r+0x20c>)
 80089f6:	429c      	cmp	r4, r3
 80089f8:	d158      	bne.n	8008aac <_vfiprintf_r+0xd0>
 80089fa:	6874      	ldr	r4, [r6, #4]
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	0718      	lsls	r0, r3, #28
 8008a00:	d55e      	bpl.n	8008ac0 <_vfiprintf_r+0xe4>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05b      	beq.n	8008ac0 <_vfiprintf_r+0xe4>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a12:	2330      	movs	r3, #48	; 0x30
 8008a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a18:	9503      	str	r5, [sp, #12]
 8008a1a:	f04f 0b01 	mov.w	fp, #1
 8008a1e:	46b8      	mov	r8, r7
 8008a20:	4645      	mov	r5, r8
 8008a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a26:	b10b      	cbz	r3, 8008a2c <_vfiprintf_r+0x50>
 8008a28:	2b25      	cmp	r3, #37	; 0x25
 8008a2a:	d154      	bne.n	8008ad6 <_vfiprintf_r+0xfa>
 8008a2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008a30:	d00b      	beq.n	8008a4a <_vfiprintf_r+0x6e>
 8008a32:	4653      	mov	r3, sl
 8008a34:	463a      	mov	r2, r7
 8008a36:	4621      	mov	r1, r4
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7ff ffbc 	bl	80089b6 <__sfputs_r>
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f000 80c2 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a46:	4453      	add	r3, sl
 8008a48:	9309      	str	r3, [sp, #36]	; 0x24
 8008a4a:	f898 3000 	ldrb.w	r3, [r8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 80ba 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	9307      	str	r3, [sp, #28]
 8008a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a66:	931a      	str	r3, [sp, #104]	; 0x68
 8008a68:	46a8      	mov	r8, r5
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008a70:	485e      	ldr	r0, [pc, #376]	; (8008bec <_vfiprintf_r+0x210>)
 8008a72:	f7f7 fbbd 	bl	80001f0 <memchr>
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	bb78      	cbnz	r0, 8008ada <_vfiprintf_r+0xfe>
 8008a7a:	06d9      	lsls	r1, r3, #27
 8008a7c:	bf44      	itt	mi
 8008a7e:	2220      	movmi	r2, #32
 8008a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a84:	071a      	lsls	r2, r3, #28
 8008a86:	bf44      	itt	mi
 8008a88:	222b      	movmi	r2, #43	; 0x2b
 8008a8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a8e:	782a      	ldrb	r2, [r5, #0]
 8008a90:	2a2a      	cmp	r2, #42	; 0x2a
 8008a92:	d02a      	beq.n	8008aea <_vfiprintf_r+0x10e>
 8008a94:	9a07      	ldr	r2, [sp, #28]
 8008a96:	46a8      	mov	r8, r5
 8008a98:	2000      	movs	r0, #0
 8008a9a:	250a      	movs	r5, #10
 8008a9c:	4641      	mov	r1, r8
 8008a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa2:	3b30      	subs	r3, #48	; 0x30
 8008aa4:	2b09      	cmp	r3, #9
 8008aa6:	d969      	bls.n	8008b7c <_vfiprintf_r+0x1a0>
 8008aa8:	b360      	cbz	r0, 8008b04 <_vfiprintf_r+0x128>
 8008aaa:	e024      	b.n	8008af6 <_vfiprintf_r+0x11a>
 8008aac:	4b50      	ldr	r3, [pc, #320]	; (8008bf0 <_vfiprintf_r+0x214>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <_vfiprintf_r+0xda>
 8008ab2:	68b4      	ldr	r4, [r6, #8]
 8008ab4:	e7a2      	b.n	80089fc <_vfiprintf_r+0x20>
 8008ab6:	4b4f      	ldr	r3, [pc, #316]	; (8008bf4 <_vfiprintf_r+0x218>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	bf08      	it	eq
 8008abc:	68f4      	ldreq	r4, [r6, #12]
 8008abe:	e79d      	b.n	80089fc <_vfiprintf_r+0x20>
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7ff fc6c 	bl	80083a0 <__swsetup_r>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d09d      	beq.n	8008a08 <_vfiprintf_r+0x2c>
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	b01d      	add	sp, #116	; 0x74
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	46a8      	mov	r8, r5
 8008ad8:	e7a2      	b.n	8008a20 <_vfiprintf_r+0x44>
 8008ada:	4a44      	ldr	r2, [pc, #272]	; (8008bec <_vfiprintf_r+0x210>)
 8008adc:	1a80      	subs	r0, r0, r2
 8008ade:	fa0b f000 	lsl.w	r0, fp, r0
 8008ae2:	4318      	orrs	r0, r3
 8008ae4:	9004      	str	r0, [sp, #16]
 8008ae6:	4645      	mov	r5, r8
 8008ae8:	e7be      	b.n	8008a68 <_vfiprintf_r+0x8c>
 8008aea:	9a03      	ldr	r2, [sp, #12]
 8008aec:	1d11      	adds	r1, r2, #4
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	9103      	str	r1, [sp, #12]
 8008af2:	2a00      	cmp	r2, #0
 8008af4:	db01      	blt.n	8008afa <_vfiprintf_r+0x11e>
 8008af6:	9207      	str	r2, [sp, #28]
 8008af8:	e004      	b.n	8008b04 <_vfiprintf_r+0x128>
 8008afa:	4252      	negs	r2, r2
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	9207      	str	r2, [sp, #28]
 8008b02:	9304      	str	r3, [sp, #16]
 8008b04:	f898 3000 	ldrb.w	r3, [r8]
 8008b08:	2b2e      	cmp	r3, #46	; 0x2e
 8008b0a:	d10e      	bne.n	8008b2a <_vfiprintf_r+0x14e>
 8008b0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b10:	2b2a      	cmp	r3, #42	; 0x2a
 8008b12:	d138      	bne.n	8008b86 <_vfiprintf_r+0x1aa>
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	9203      	str	r2, [sp, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfb8      	it	lt
 8008b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b24:	f108 0802 	add.w	r8, r8, #2
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	4d33      	ldr	r5, [pc, #204]	; (8008bf8 <_vfiprintf_r+0x21c>)
 8008b2c:	f898 1000 	ldrb.w	r1, [r8]
 8008b30:	2203      	movs	r2, #3
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7f7 fb5c 	bl	80001f0 <memchr>
 8008b38:	b140      	cbz	r0, 8008b4c <_vfiprintf_r+0x170>
 8008b3a:	2340      	movs	r3, #64	; 0x40
 8008b3c:	1b40      	subs	r0, r0, r5
 8008b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	4303      	orrs	r3, r0
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	f898 1000 	ldrb.w	r1, [r8]
 8008b50:	482a      	ldr	r0, [pc, #168]	; (8008bfc <_vfiprintf_r+0x220>)
 8008b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b56:	2206      	movs	r2, #6
 8008b58:	f108 0701 	add.w	r7, r8, #1
 8008b5c:	f7f7 fb48 	bl	80001f0 <memchr>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d037      	beq.n	8008bd4 <_vfiprintf_r+0x1f8>
 8008b64:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <_vfiprintf_r+0x224>)
 8008b66:	bb1b      	cbnz	r3, 8008bb0 <_vfiprintf_r+0x1d4>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	3307      	adds	r3, #7
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	3308      	adds	r3, #8
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b76:	444b      	add	r3, r9
 8008b78:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7a:	e750      	b.n	8008a1e <_vfiprintf_r+0x42>
 8008b7c:	fb05 3202 	mla	r2, r5, r2, r3
 8008b80:	2001      	movs	r0, #1
 8008b82:	4688      	mov	r8, r1
 8008b84:	e78a      	b.n	8008a9c <_vfiprintf_r+0xc0>
 8008b86:	2300      	movs	r3, #0
 8008b88:	f108 0801 	add.w	r8, r8, #1
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	250a      	movs	r5, #10
 8008b92:	4640      	mov	r0, r8
 8008b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b98:	3a30      	subs	r2, #48	; 0x30
 8008b9a:	2a09      	cmp	r2, #9
 8008b9c:	d903      	bls.n	8008ba6 <_vfiprintf_r+0x1ca>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c3      	beq.n	8008b2a <_vfiprintf_r+0x14e>
 8008ba2:	9105      	str	r1, [sp, #20]
 8008ba4:	e7c1      	b.n	8008b2a <_vfiprintf_r+0x14e>
 8008ba6:	fb05 2101 	mla	r1, r5, r1, r2
 8008baa:	2301      	movs	r3, #1
 8008bac:	4680      	mov	r8, r0
 8008bae:	e7f0      	b.n	8008b92 <_vfiprintf_r+0x1b6>
 8008bb0:	ab03      	add	r3, sp, #12
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <_vfiprintf_r+0x228>)
 8008bb8:	a904      	add	r1, sp, #16
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008bc4:	4681      	mov	r9, r0
 8008bc6:	d1d5      	bne.n	8008b74 <_vfiprintf_r+0x198>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	065b      	lsls	r3, r3, #25
 8008bcc:	f53f af7e 	bmi.w	8008acc <_vfiprintf_r+0xf0>
 8008bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bd2:	e77d      	b.n	8008ad0 <_vfiprintf_r+0xf4>
 8008bd4:	ab03      	add	r3, sp, #12
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4622      	mov	r2, r4
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <_vfiprintf_r+0x228>)
 8008bdc:	a904      	add	r1, sp, #16
 8008bde:	4630      	mov	r0, r6
 8008be0:	f000 f888 	bl	8008cf4 <_printf_i>
 8008be4:	e7ec      	b.n	8008bc0 <_vfiprintf_r+0x1e4>
 8008be6:	bf00      	nop
 8008be8:	0800a468 	.word	0x0800a468
 8008bec:	0800a4a8 	.word	0x0800a4a8
 8008bf0:	0800a488 	.word	0x0800a488
 8008bf4:	0800a448 	.word	0x0800a448
 8008bf8:	0800a4ae 	.word	0x0800a4ae
 8008bfc:	0800a4b2 	.word	0x0800a4b2
 8008c00:	00000000 	.word	0x00000000
 8008c04:	080089b7 	.word	0x080089b7

08008c08 <_printf_common>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	4691      	mov	r9, r2
 8008c0e:	461f      	mov	r7, r3
 8008c10:	688a      	ldr	r2, [r1, #8]
 8008c12:	690b      	ldr	r3, [r1, #16]
 8008c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	bfb8      	it	lt
 8008c1c:	4613      	movlt	r3, r2
 8008c1e:	f8c9 3000 	str.w	r3, [r9]
 8008c22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	b112      	cbz	r2, 8008c32 <_printf_common+0x2a>
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f8c9 3000 	str.w	r3, [r9]
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	0699      	lsls	r1, r3, #26
 8008c36:	bf42      	ittt	mi
 8008c38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c3c:	3302      	addmi	r3, #2
 8008c3e:	f8c9 3000 	strmi.w	r3, [r9]
 8008c42:	6825      	ldr	r5, [r4, #0]
 8008c44:	f015 0506 	ands.w	r5, r5, #6
 8008c48:	d107      	bne.n	8008c5a <_printf_common+0x52>
 8008c4a:	f104 0a19 	add.w	sl, r4, #25
 8008c4e:	68e3      	ldr	r3, [r4, #12]
 8008c50:	f8d9 2000 	ldr.w	r2, [r9]
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	42ab      	cmp	r3, r5
 8008c58:	dc28      	bgt.n	8008cac <_printf_common+0xa4>
 8008c5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c5e:	6822      	ldr	r2, [r4, #0]
 8008c60:	3300      	adds	r3, #0
 8008c62:	bf18      	it	ne
 8008c64:	2301      	movne	r3, #1
 8008c66:	0692      	lsls	r2, r2, #26
 8008c68:	d42d      	bmi.n	8008cc6 <_printf_common+0xbe>
 8008c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4630      	mov	r0, r6
 8008c72:	47c0      	blx	r8
 8008c74:	3001      	adds	r0, #1
 8008c76:	d020      	beq.n	8008cba <_printf_common+0xb2>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	68e5      	ldr	r5, [r4, #12]
 8008c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c80:	f003 0306 	and.w	r3, r3, #6
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	bf08      	it	eq
 8008c88:	1aad      	subeq	r5, r5, r2
 8008c8a:	68a3      	ldr	r3, [r4, #8]
 8008c8c:	6922      	ldr	r2, [r4, #16]
 8008c8e:	bf0c      	ite	eq
 8008c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c94:	2500      	movne	r5, #0
 8008c96:	4293      	cmp	r3, r2
 8008c98:	bfc4      	itt	gt
 8008c9a:	1a9b      	subgt	r3, r3, r2
 8008c9c:	18ed      	addgt	r5, r5, r3
 8008c9e:	f04f 0900 	mov.w	r9, #0
 8008ca2:	341a      	adds	r4, #26
 8008ca4:	454d      	cmp	r5, r9
 8008ca6:	d11a      	bne.n	8008cde <_printf_common+0xd6>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e008      	b.n	8008cbe <_printf_common+0xb6>
 8008cac:	2301      	movs	r3, #1
 8008cae:	4652      	mov	r2, sl
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	47c0      	blx	r8
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d103      	bne.n	8008cc2 <_printf_common+0xba>
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	3501      	adds	r5, #1
 8008cc4:	e7c3      	b.n	8008c4e <_printf_common+0x46>
 8008cc6:	18e1      	adds	r1, r4, r3
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	2030      	movs	r0, #48	; 0x30
 8008ccc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cd0:	4422      	add	r2, r4
 8008cd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cda:	3302      	adds	r3, #2
 8008cdc:	e7c5      	b.n	8008c6a <_printf_common+0x62>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	47c0      	blx	r8
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d0e6      	beq.n	8008cba <_printf_common+0xb2>
 8008cec:	f109 0901 	add.w	r9, r9, #1
 8008cf0:	e7d8      	b.n	8008ca4 <_printf_common+0x9c>
	...

08008cf4 <_printf_i>:
 8008cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	7e09      	ldrb	r1, [r1, #24]
 8008d00:	b085      	sub	sp, #20
 8008d02:	296e      	cmp	r1, #110	; 0x6e
 8008d04:	4617      	mov	r7, r2
 8008d06:	4606      	mov	r6, r0
 8008d08:	4698      	mov	r8, r3
 8008d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d0c:	f000 80b3 	beq.w	8008e76 <_printf_i+0x182>
 8008d10:	d822      	bhi.n	8008d58 <_printf_i+0x64>
 8008d12:	2963      	cmp	r1, #99	; 0x63
 8008d14:	d036      	beq.n	8008d84 <_printf_i+0x90>
 8008d16:	d80a      	bhi.n	8008d2e <_printf_i+0x3a>
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	f000 80b9 	beq.w	8008e90 <_printf_i+0x19c>
 8008d1e:	2958      	cmp	r1, #88	; 0x58
 8008d20:	f000 8083 	beq.w	8008e2a <_printf_i+0x136>
 8008d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d2c:	e032      	b.n	8008d94 <_printf_i+0xa0>
 8008d2e:	2964      	cmp	r1, #100	; 0x64
 8008d30:	d001      	beq.n	8008d36 <_printf_i+0x42>
 8008d32:	2969      	cmp	r1, #105	; 0x69
 8008d34:	d1f6      	bne.n	8008d24 <_printf_i+0x30>
 8008d36:	6820      	ldr	r0, [r4, #0]
 8008d38:	6813      	ldr	r3, [r2, #0]
 8008d3a:	0605      	lsls	r5, r0, #24
 8008d3c:	f103 0104 	add.w	r1, r3, #4
 8008d40:	d52a      	bpl.n	8008d98 <_printf_i+0xa4>
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6011      	str	r1, [r2, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	da03      	bge.n	8008d52 <_printf_i+0x5e>
 8008d4a:	222d      	movs	r2, #45	; 0x2d
 8008d4c:	425b      	negs	r3, r3
 8008d4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d52:	486f      	ldr	r0, [pc, #444]	; (8008f10 <_printf_i+0x21c>)
 8008d54:	220a      	movs	r2, #10
 8008d56:	e039      	b.n	8008dcc <_printf_i+0xd8>
 8008d58:	2973      	cmp	r1, #115	; 0x73
 8008d5a:	f000 809d 	beq.w	8008e98 <_printf_i+0x1a4>
 8008d5e:	d808      	bhi.n	8008d72 <_printf_i+0x7e>
 8008d60:	296f      	cmp	r1, #111	; 0x6f
 8008d62:	d020      	beq.n	8008da6 <_printf_i+0xb2>
 8008d64:	2970      	cmp	r1, #112	; 0x70
 8008d66:	d1dd      	bne.n	8008d24 <_printf_i+0x30>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	f043 0320 	orr.w	r3, r3, #32
 8008d6e:	6023      	str	r3, [r4, #0]
 8008d70:	e003      	b.n	8008d7a <_printf_i+0x86>
 8008d72:	2975      	cmp	r1, #117	; 0x75
 8008d74:	d017      	beq.n	8008da6 <_printf_i+0xb2>
 8008d76:	2978      	cmp	r1, #120	; 0x78
 8008d78:	d1d4      	bne.n	8008d24 <_printf_i+0x30>
 8008d7a:	2378      	movs	r3, #120	; 0x78
 8008d7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d80:	4864      	ldr	r0, [pc, #400]	; (8008f14 <_printf_i+0x220>)
 8008d82:	e055      	b.n	8008e30 <_printf_i+0x13c>
 8008d84:	6813      	ldr	r3, [r2, #0]
 8008d86:	1d19      	adds	r1, r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6011      	str	r1, [r2, #0]
 8008d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d94:	2301      	movs	r3, #1
 8008d96:	e08c      	b.n	8008eb2 <_printf_i+0x1be>
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6011      	str	r1, [r2, #0]
 8008d9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008da0:	bf18      	it	ne
 8008da2:	b21b      	sxthne	r3, r3
 8008da4:	e7cf      	b.n	8008d46 <_printf_i+0x52>
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	6825      	ldr	r5, [r4, #0]
 8008daa:	1d18      	adds	r0, r3, #4
 8008dac:	6010      	str	r0, [r2, #0]
 8008dae:	0628      	lsls	r0, r5, #24
 8008db0:	d501      	bpl.n	8008db6 <_printf_i+0xc2>
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	e002      	b.n	8008dbc <_printf_i+0xc8>
 8008db6:	0668      	lsls	r0, r5, #25
 8008db8:	d5fb      	bpl.n	8008db2 <_printf_i+0xbe>
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	4854      	ldr	r0, [pc, #336]	; (8008f10 <_printf_i+0x21c>)
 8008dbe:	296f      	cmp	r1, #111	; 0x6f
 8008dc0:	bf14      	ite	ne
 8008dc2:	220a      	movne	r2, #10
 8008dc4:	2208      	moveq	r2, #8
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dcc:	6865      	ldr	r5, [r4, #4]
 8008dce:	60a5      	str	r5, [r4, #8]
 8008dd0:	2d00      	cmp	r5, #0
 8008dd2:	f2c0 8095 	blt.w	8008f00 <_printf_i+0x20c>
 8008dd6:	6821      	ldr	r1, [r4, #0]
 8008dd8:	f021 0104 	bic.w	r1, r1, #4
 8008ddc:	6021      	str	r1, [r4, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d13d      	bne.n	8008e5e <_printf_i+0x16a>
 8008de2:	2d00      	cmp	r5, #0
 8008de4:	f040 808e 	bne.w	8008f04 <_printf_i+0x210>
 8008de8:	4665      	mov	r5, ip
 8008dea:	2a08      	cmp	r2, #8
 8008dec:	d10b      	bne.n	8008e06 <_printf_i+0x112>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	07db      	lsls	r3, r3, #31
 8008df2:	d508      	bpl.n	8008e06 <_printf_i+0x112>
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	6862      	ldr	r2, [r4, #4]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	bfde      	ittt	le
 8008dfc:	2330      	movle	r3, #48	; 0x30
 8008dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e06:	ebac 0305 	sub.w	r3, ip, r5
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	f8cd 8000 	str.w	r8, [sp]
 8008e10:	463b      	mov	r3, r7
 8008e12:	aa03      	add	r2, sp, #12
 8008e14:	4621      	mov	r1, r4
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7ff fef6 	bl	8008c08 <_printf_common>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d14d      	bne.n	8008ebc <_printf_i+0x1c8>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	b005      	add	sp, #20
 8008e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e2a:	4839      	ldr	r0, [pc, #228]	; (8008f10 <_printf_i+0x21c>)
 8008e2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	6821      	ldr	r1, [r4, #0]
 8008e34:	1d1d      	adds	r5, r3, #4
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6015      	str	r5, [r2, #0]
 8008e3a:	060a      	lsls	r2, r1, #24
 8008e3c:	d50b      	bpl.n	8008e56 <_printf_i+0x162>
 8008e3e:	07ca      	lsls	r2, r1, #31
 8008e40:	bf44      	itt	mi
 8008e42:	f041 0120 	orrmi.w	r1, r1, #32
 8008e46:	6021      	strmi	r1, [r4, #0]
 8008e48:	b91b      	cbnz	r3, 8008e52 <_printf_i+0x15e>
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	f022 0220 	bic.w	r2, r2, #32
 8008e50:	6022      	str	r2, [r4, #0]
 8008e52:	2210      	movs	r2, #16
 8008e54:	e7b7      	b.n	8008dc6 <_printf_i+0xd2>
 8008e56:	064d      	lsls	r5, r1, #25
 8008e58:	bf48      	it	mi
 8008e5a:	b29b      	uxthmi	r3, r3
 8008e5c:	e7ef      	b.n	8008e3e <_printf_i+0x14a>
 8008e5e:	4665      	mov	r5, ip
 8008e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e64:	fb02 3311 	mls	r3, r2, r1, r3
 8008e68:	5cc3      	ldrb	r3, [r0, r3]
 8008e6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e6e:	460b      	mov	r3, r1
 8008e70:	2900      	cmp	r1, #0
 8008e72:	d1f5      	bne.n	8008e60 <_printf_i+0x16c>
 8008e74:	e7b9      	b.n	8008dea <_printf_i+0xf6>
 8008e76:	6813      	ldr	r3, [r2, #0]
 8008e78:	6825      	ldr	r5, [r4, #0]
 8008e7a:	6961      	ldr	r1, [r4, #20]
 8008e7c:	1d18      	adds	r0, r3, #4
 8008e7e:	6010      	str	r0, [r2, #0]
 8008e80:	0628      	lsls	r0, r5, #24
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	d501      	bpl.n	8008e8a <_printf_i+0x196>
 8008e86:	6019      	str	r1, [r3, #0]
 8008e88:	e002      	b.n	8008e90 <_printf_i+0x19c>
 8008e8a:	066a      	lsls	r2, r5, #25
 8008e8c:	d5fb      	bpl.n	8008e86 <_printf_i+0x192>
 8008e8e:	8019      	strh	r1, [r3, #0]
 8008e90:	2300      	movs	r3, #0
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	4665      	mov	r5, ip
 8008e96:	e7b9      	b.n	8008e0c <_printf_i+0x118>
 8008e98:	6813      	ldr	r3, [r2, #0]
 8008e9a:	1d19      	adds	r1, r3, #4
 8008e9c:	6011      	str	r1, [r2, #0]
 8008e9e:	681d      	ldr	r5, [r3, #0]
 8008ea0:	6862      	ldr	r2, [r4, #4]
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f7f7 f9a3 	bl	80001f0 <memchr>
 8008eaa:	b108      	cbz	r0, 8008eb0 <_printf_i+0x1bc>
 8008eac:	1b40      	subs	r0, r0, r5
 8008eae:	6060      	str	r0, [r4, #4]
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	6123      	str	r3, [r4, #16]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eba:	e7a7      	b.n	8008e0c <_printf_i+0x118>
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	47c0      	blx	r8
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d0aa      	beq.n	8008e20 <_printf_i+0x12c>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	079b      	lsls	r3, r3, #30
 8008ece:	d413      	bmi.n	8008ef8 <_printf_i+0x204>
 8008ed0:	68e0      	ldr	r0, [r4, #12]
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	4298      	cmp	r0, r3
 8008ed6:	bfb8      	it	lt
 8008ed8:	4618      	movlt	r0, r3
 8008eda:	e7a3      	b.n	8008e24 <_printf_i+0x130>
 8008edc:	2301      	movs	r3, #1
 8008ede:	464a      	mov	r2, r9
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	47c0      	blx	r8
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	d09a      	beq.n	8008e20 <_printf_i+0x12c>
 8008eea:	3501      	adds	r5, #1
 8008eec:	68e3      	ldr	r3, [r4, #12]
 8008eee:	9a03      	ldr	r2, [sp, #12]
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	42ab      	cmp	r3, r5
 8008ef4:	dcf2      	bgt.n	8008edc <_printf_i+0x1e8>
 8008ef6:	e7eb      	b.n	8008ed0 <_printf_i+0x1dc>
 8008ef8:	2500      	movs	r5, #0
 8008efa:	f104 0919 	add.w	r9, r4, #25
 8008efe:	e7f5      	b.n	8008eec <_printf_i+0x1f8>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1ac      	bne.n	8008e5e <_printf_i+0x16a>
 8008f04:	7803      	ldrb	r3, [r0, #0]
 8008f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f0e:	e76c      	b.n	8008dea <_printf_i+0xf6>
 8008f10:	0800a4b9 	.word	0x0800a4b9
 8008f14:	0800a4ca 	.word	0x0800a4ca

08008f18 <_sbrk_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4c06      	ldr	r4, [pc, #24]	; (8008f34 <_sbrk_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4605      	mov	r5, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	f7fa f82e 	bl	8002f84 <_sbrk>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_sbrk_r+0x1a>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_sbrk_r+0x1a>
 8008f30:	602b      	str	r3, [r5, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20004488 	.word	0x20004488

08008f38 <__sread>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	f000 f896 	bl	8009070 <_read_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	bfab      	itete	ge
 8008f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f4c:	181b      	addge	r3, r3, r0
 8008f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f52:	bfac      	ite	ge
 8008f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f56:	81a3      	strhlt	r3, [r4, #12]
 8008f58:	bd10      	pop	{r4, pc}

08008f5a <__swrite>:
 8008f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5e:	461f      	mov	r7, r3
 8008f60:	898b      	ldrh	r3, [r1, #12]
 8008f62:	05db      	lsls	r3, r3, #23
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	4616      	mov	r6, r2
 8008f6a:	d505      	bpl.n	8008f78 <__swrite+0x1e>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	f000 f868 	bl	8009048 <_lseek_r>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	4628      	mov	r0, r5
 8008f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8e:	f000 b817 	b.w	8008fc0 <_write_r>

08008f92 <__sseek>:
 8008f92:	b510      	push	{r4, lr}
 8008f94:	460c      	mov	r4, r1
 8008f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9a:	f000 f855 	bl	8009048 <_lseek_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	bf15      	itete	ne
 8008fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fae:	81a3      	strheq	r3, [r4, #12]
 8008fb0:	bf18      	it	ne
 8008fb2:	81a3      	strhne	r3, [r4, #12]
 8008fb4:	bd10      	pop	{r4, pc}

08008fb6 <__sclose>:
 8008fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fba:	f000 b813 	b.w	8008fe4 <_close_r>
	...

08008fc0 <_write_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4c07      	ldr	r4, [pc, #28]	; (8008fe0 <_write_r+0x20>)
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7f9 ff87 	bl	8002ee2 <_write>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_write_r+0x1e>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_write_r+0x1e>
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	20004488 	.word	0x20004488

08008fe4 <_close_r>:
 8008fe4:	b538      	push	{r3, r4, r5, lr}
 8008fe6:	4c06      	ldr	r4, [pc, #24]	; (8009000 <_close_r+0x1c>)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4605      	mov	r5, r0
 8008fec:	4608      	mov	r0, r1
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	f7f9 ff93 	bl	8002f1a <_close>
 8008ff4:	1c43      	adds	r3, r0, #1
 8008ff6:	d102      	bne.n	8008ffe <_close_r+0x1a>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	b103      	cbz	r3, 8008ffe <_close_r+0x1a>
 8008ffc:	602b      	str	r3, [r5, #0]
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	20004488 	.word	0x20004488

08009004 <_fstat_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4c07      	ldr	r4, [pc, #28]	; (8009024 <_fstat_r+0x20>)
 8009008:	2300      	movs	r3, #0
 800900a:	4605      	mov	r5, r0
 800900c:	4608      	mov	r0, r1
 800900e:	4611      	mov	r1, r2
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	f7f9 ff8e 	bl	8002f32 <_fstat>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d102      	bne.n	8009020 <_fstat_r+0x1c>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	b103      	cbz	r3, 8009020 <_fstat_r+0x1c>
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	20004488 	.word	0x20004488

08009028 <_isatty_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4c06      	ldr	r4, [pc, #24]	; (8009044 <_isatty_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4605      	mov	r5, r0
 8009030:	4608      	mov	r0, r1
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	f7f9 ff8d 	bl	8002f52 <_isatty>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_isatty_r+0x1a>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	b103      	cbz	r3, 8009042 <_isatty_r+0x1a>
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20004488 	.word	0x20004488

08009048 <_lseek_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4c07      	ldr	r4, [pc, #28]	; (8009068 <_lseek_r+0x20>)
 800904c:	4605      	mov	r5, r0
 800904e:	4608      	mov	r0, r1
 8009050:	4611      	mov	r1, r2
 8009052:	2200      	movs	r2, #0
 8009054:	6022      	str	r2, [r4, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f7f9 ff86 	bl	8002f68 <_lseek>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_lseek_r+0x1e>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	b103      	cbz	r3, 8009066 <_lseek_r+0x1e>
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20004488 	.word	0x20004488

0800906c <__malloc_lock>:
 800906c:	4770      	bx	lr

0800906e <__malloc_unlock>:
 800906e:	4770      	bx	lr

08009070 <_read_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4c07      	ldr	r4, [pc, #28]	; (8009090 <_read_r+0x20>)
 8009074:	4605      	mov	r5, r0
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	2200      	movs	r2, #0
 800907c:	6022      	str	r2, [r4, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	f7f9 ff12 	bl	8002ea8 <_read>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_read_r+0x1e>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	b103      	cbz	r3, 800908e <_read_r+0x1e>
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20004488 	.word	0x20004488
 8009094:	00000000 	.word	0x00000000

08009098 <floor>:
 8009098:	ec51 0b10 	vmov	r0, r1, d0
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80090a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80090a8:	2e13      	cmp	r6, #19
 80090aa:	460c      	mov	r4, r1
 80090ac:	ee10 5a10 	vmov	r5, s0
 80090b0:	4680      	mov	r8, r0
 80090b2:	dc34      	bgt.n	800911e <floor+0x86>
 80090b4:	2e00      	cmp	r6, #0
 80090b6:	da16      	bge.n	80090e6 <floor+0x4e>
 80090b8:	a335      	add	r3, pc, #212	; (adr r3, 8009190 <floor+0xf8>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 f8ed 	bl	800029c <__adddf3>
 80090c2:	2200      	movs	r2, #0
 80090c4:	2300      	movs	r3, #0
 80090c6:	f7f7 fd2f 	bl	8000b28 <__aeabi_dcmpgt>
 80090ca:	b148      	cbz	r0, 80090e0 <floor+0x48>
 80090cc:	2c00      	cmp	r4, #0
 80090ce:	da59      	bge.n	8009184 <floor+0xec>
 80090d0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80090d4:	4a30      	ldr	r2, [pc, #192]	; (8009198 <floor+0x100>)
 80090d6:	432b      	orrs	r3, r5
 80090d8:	2500      	movs	r5, #0
 80090da:	42ab      	cmp	r3, r5
 80090dc:	bf18      	it	ne
 80090de:	4614      	movne	r4, r2
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	e025      	b.n	8009132 <floor+0x9a>
 80090e6:	4f2d      	ldr	r7, [pc, #180]	; (800919c <floor+0x104>)
 80090e8:	4137      	asrs	r7, r6
 80090ea:	ea01 0307 	and.w	r3, r1, r7
 80090ee:	4303      	orrs	r3, r0
 80090f0:	d01f      	beq.n	8009132 <floor+0x9a>
 80090f2:	a327      	add	r3, pc, #156	; (adr r3, 8009190 <floor+0xf8>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 f8d0 	bl	800029c <__adddf3>
 80090fc:	2200      	movs	r2, #0
 80090fe:	2300      	movs	r3, #0
 8009100:	f7f7 fd12 	bl	8000b28 <__aeabi_dcmpgt>
 8009104:	2800      	cmp	r0, #0
 8009106:	d0eb      	beq.n	80090e0 <floor+0x48>
 8009108:	2c00      	cmp	r4, #0
 800910a:	bfbe      	ittt	lt
 800910c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009110:	fa43 f606 	asrlt.w	r6, r3, r6
 8009114:	19a4      	addlt	r4, r4, r6
 8009116:	ea24 0407 	bic.w	r4, r4, r7
 800911a:	2500      	movs	r5, #0
 800911c:	e7e0      	b.n	80090e0 <floor+0x48>
 800911e:	2e33      	cmp	r6, #51	; 0x33
 8009120:	dd0b      	ble.n	800913a <floor+0xa2>
 8009122:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009126:	d104      	bne.n	8009132 <floor+0x9a>
 8009128:	ee10 2a10 	vmov	r2, s0
 800912c:	460b      	mov	r3, r1
 800912e:	f7f7 f8b5 	bl	800029c <__adddf3>
 8009132:	ec41 0b10 	vmov	d0, r0, r1
 8009136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800913e:	f04f 33ff 	mov.w	r3, #4294967295
 8009142:	fa23 f707 	lsr.w	r7, r3, r7
 8009146:	4207      	tst	r7, r0
 8009148:	d0f3      	beq.n	8009132 <floor+0x9a>
 800914a:	a311      	add	r3, pc, #68	; (adr r3, 8009190 <floor+0xf8>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 f8a4 	bl	800029c <__adddf3>
 8009154:	2200      	movs	r2, #0
 8009156:	2300      	movs	r3, #0
 8009158:	f7f7 fce6 	bl	8000b28 <__aeabi_dcmpgt>
 800915c:	2800      	cmp	r0, #0
 800915e:	d0bf      	beq.n	80090e0 <floor+0x48>
 8009160:	2c00      	cmp	r4, #0
 8009162:	da02      	bge.n	800916a <floor+0xd2>
 8009164:	2e14      	cmp	r6, #20
 8009166:	d103      	bne.n	8009170 <floor+0xd8>
 8009168:	3401      	adds	r4, #1
 800916a:	ea25 0507 	bic.w	r5, r5, r7
 800916e:	e7b7      	b.n	80090e0 <floor+0x48>
 8009170:	2301      	movs	r3, #1
 8009172:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009176:	fa03 f606 	lsl.w	r6, r3, r6
 800917a:	4435      	add	r5, r6
 800917c:	4545      	cmp	r5, r8
 800917e:	bf38      	it	cc
 8009180:	18e4      	addcc	r4, r4, r3
 8009182:	e7f2      	b.n	800916a <floor+0xd2>
 8009184:	2500      	movs	r5, #0
 8009186:	462c      	mov	r4, r5
 8009188:	e7aa      	b.n	80090e0 <floor+0x48>
 800918a:	bf00      	nop
 800918c:	f3af 8000 	nop.w
 8009190:	8800759c 	.word	0x8800759c
 8009194:	7e37e43c 	.word	0x7e37e43c
 8009198:	bff00000 	.word	0xbff00000
 800919c:	000fffff 	.word	0x000fffff

080091a0 <pow>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	ed2d 8b04 	vpush	{d8-d9}
 80091a8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800947c <pow+0x2dc>
 80091ac:	b08d      	sub	sp, #52	; 0x34
 80091ae:	ec57 6b10 	vmov	r6, r7, d0
 80091b2:	ec55 4b11 	vmov	r4, r5, d1
 80091b6:	f000 f963 	bl	8009480 <__ieee754_pow>
 80091ba:	f999 3000 	ldrsb.w	r3, [r9]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	3301      	adds	r3, #1
 80091c2:	eeb0 8a40 	vmov.f32	s16, s0
 80091c6:	eef0 8a60 	vmov.f32	s17, s1
 80091ca:	46c8      	mov	r8, r9
 80091cc:	d05f      	beq.n	800928e <pow+0xee>
 80091ce:	4622      	mov	r2, r4
 80091d0:	462b      	mov	r3, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7f7 fcb1 	bl	8000b3c <__aeabi_dcmpun>
 80091da:	4683      	mov	fp, r0
 80091dc:	2800      	cmp	r0, #0
 80091de:	d156      	bne.n	800928e <pow+0xee>
 80091e0:	4632      	mov	r2, r6
 80091e2:	463b      	mov	r3, r7
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 fca8 	bl	8000b3c <__aeabi_dcmpun>
 80091ec:	9001      	str	r0, [sp, #4]
 80091ee:	b1e8      	cbz	r0, 800922c <pow+0x8c>
 80091f0:	2200      	movs	r2, #0
 80091f2:	2300      	movs	r3, #0
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d046      	beq.n	800928e <pow+0xee>
 8009200:	2301      	movs	r3, #1
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	4b96      	ldr	r3, [pc, #600]	; (8009460 <pow+0x2c0>)
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	4b96      	ldr	r3, [pc, #600]	; (8009464 <pow+0x2c4>)
 800920a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800920e:	2200      	movs	r2, #0
 8009210:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009214:	9b00      	ldr	r3, [sp, #0]
 8009216:	2b02      	cmp	r3, #2
 8009218:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800921c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009220:	d033      	beq.n	800928a <pow+0xea>
 8009222:	a802      	add	r0, sp, #8
 8009224:	f000 fefb 	bl	800a01e <matherr>
 8009228:	bb48      	cbnz	r0, 800927e <pow+0xde>
 800922a:	e05d      	b.n	80092e8 <pow+0x148>
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	f04f 0b00 	mov.w	fp, #0
 8009234:	4652      	mov	r2, sl
 8009236:	465b      	mov	r3, fp
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f7 fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009240:	ec4b ab19 	vmov	d9, sl, fp
 8009244:	2800      	cmp	r0, #0
 8009246:	d054      	beq.n	80092f2 <pow+0x152>
 8009248:	4652      	mov	r2, sl
 800924a:	465b      	mov	r3, fp
 800924c:	4620      	mov	r0, r4
 800924e:	4629      	mov	r1, r5
 8009250:	f7f7 fc42 	bl	8000ad8 <__aeabi_dcmpeq>
 8009254:	4680      	mov	r8, r0
 8009256:	b318      	cbz	r0, 80092a0 <pow+0x100>
 8009258:	2301      	movs	r3, #1
 800925a:	9302      	str	r3, [sp, #8]
 800925c:	4b80      	ldr	r3, [pc, #512]	; (8009460 <pow+0x2c0>)
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	930a      	str	r3, [sp, #40]	; 0x28
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800926a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800926e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0d5      	beq.n	8009222 <pow+0x82>
 8009276:	4b7b      	ldr	r3, [pc, #492]	; (8009464 <pow+0x2c4>)
 8009278:	2200      	movs	r2, #0
 800927a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800927e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009280:	b11b      	cbz	r3, 800928a <pow+0xea>
 8009282:	f7fe ff8d 	bl	80081a0 <__errno>
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800928e:	eeb0 0a48 	vmov.f32	s0, s16
 8009292:	eef0 0a68 	vmov.f32	s1, s17
 8009296:	b00d      	add	sp, #52	; 0x34
 8009298:	ecbd 8b04 	vpop	{d8-d9}
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	ec45 4b10 	vmov	d0, r4, r5
 80092a4:	f000 feb3 	bl	800a00e <finite>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0f0      	beq.n	800928e <pow+0xee>
 80092ac:	4652      	mov	r2, sl
 80092ae:	465b      	mov	r3, fp
 80092b0:	4620      	mov	r0, r4
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f7 fc1a 	bl	8000aec <__aeabi_dcmplt>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d0e8      	beq.n	800928e <pow+0xee>
 80092bc:	2301      	movs	r3, #1
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	4b67      	ldr	r3, [pc, #412]	; (8009460 <pow+0x2c0>)
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	f999 3000 	ldrsb.w	r3, [r9]
 80092c8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80092cc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80092d0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80092d4:	b913      	cbnz	r3, 80092dc <pow+0x13c>
 80092d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80092da:	e7a2      	b.n	8009222 <pow+0x82>
 80092dc:	4962      	ldr	r1, [pc, #392]	; (8009468 <pow+0x2c8>)
 80092de:	2000      	movs	r0, #0
 80092e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d19c      	bne.n	8009222 <pow+0x82>
 80092e8:	f7fe ff5a 	bl	80081a0 <__errno>
 80092ec:	2321      	movs	r3, #33	; 0x21
 80092ee:	6003      	str	r3, [r0, #0]
 80092f0:	e7c5      	b.n	800927e <pow+0xde>
 80092f2:	eeb0 0a48 	vmov.f32	s0, s16
 80092f6:	eef0 0a68 	vmov.f32	s1, s17
 80092fa:	f000 fe88 	bl	800a00e <finite>
 80092fe:	9000      	str	r0, [sp, #0]
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 8081 	bne.w	8009408 <pow+0x268>
 8009306:	ec47 6b10 	vmov	d0, r6, r7
 800930a:	f000 fe80 	bl	800a00e <finite>
 800930e:	2800      	cmp	r0, #0
 8009310:	d07a      	beq.n	8009408 <pow+0x268>
 8009312:	ec45 4b10 	vmov	d0, r4, r5
 8009316:	f000 fe7a 	bl	800a00e <finite>
 800931a:	2800      	cmp	r0, #0
 800931c:	d074      	beq.n	8009408 <pow+0x268>
 800931e:	ec53 2b18 	vmov	r2, r3, d8
 8009322:	ee18 0a10 	vmov	r0, s16
 8009326:	4619      	mov	r1, r3
 8009328:	f7f7 fc08 	bl	8000b3c <__aeabi_dcmpun>
 800932c:	f999 9000 	ldrsb.w	r9, [r9]
 8009330:	4b4b      	ldr	r3, [pc, #300]	; (8009460 <pow+0x2c0>)
 8009332:	b1b0      	cbz	r0, 8009362 <pow+0x1c2>
 8009334:	2201      	movs	r2, #1
 8009336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800933a:	9b00      	ldr	r3, [sp, #0]
 800933c:	930a      	str	r3, [sp, #40]	; 0x28
 800933e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009342:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	d0c4      	beq.n	80092d6 <pow+0x136>
 800934c:	4652      	mov	r2, sl
 800934e:	465b      	mov	r3, fp
 8009350:	4650      	mov	r0, sl
 8009352:	4659      	mov	r1, fp
 8009354:	f7f7 fa82 	bl	800085c <__aeabi_ddiv>
 8009358:	f1b9 0f02 	cmp.w	r9, #2
 800935c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009360:	e7c1      	b.n	80092e6 <pow+0x146>
 8009362:	2203      	movs	r2, #3
 8009364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009368:	900a      	str	r0, [sp, #40]	; 0x28
 800936a:	4629      	mov	r1, r5
 800936c:	4620      	mov	r0, r4
 800936e:	2200      	movs	r2, #0
 8009370:	4b3e      	ldr	r3, [pc, #248]	; (800946c <pow+0x2cc>)
 8009372:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009376:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800937a:	f7f7 f945 	bl	8000608 <__aeabi_dmul>
 800937e:	4604      	mov	r4, r0
 8009380:	460d      	mov	r5, r1
 8009382:	f1b9 0f00 	cmp.w	r9, #0
 8009386:	d124      	bne.n	80093d2 <pow+0x232>
 8009388:	4b39      	ldr	r3, [pc, #228]	; (8009470 <pow+0x2d0>)
 800938a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800938e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009392:	4630      	mov	r0, r6
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	4639      	mov	r1, r7
 800939a:	f7f7 fba7 	bl	8000aec <__aeabi_dcmplt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d056      	beq.n	8009450 <pow+0x2b0>
 80093a2:	ec45 4b10 	vmov	d0, r4, r5
 80093a6:	f000 fe47 	bl	800a038 <rint>
 80093aa:	4622      	mov	r2, r4
 80093ac:	462b      	mov	r3, r5
 80093ae:	ec51 0b10 	vmov	r0, r1, d0
 80093b2:	f7f7 fb91 	bl	8000ad8 <__aeabi_dcmpeq>
 80093b6:	b920      	cbnz	r0, 80093c2 <pow+0x222>
 80093b8:	4b2e      	ldr	r3, [pc, #184]	; (8009474 <pow+0x2d4>)
 80093ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80093be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093c2:	f998 3000 	ldrsb.w	r3, [r8]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d142      	bne.n	8009450 <pow+0x2b0>
 80093ca:	f7fe fee9 	bl	80081a0 <__errno>
 80093ce:	2322      	movs	r3, #34	; 0x22
 80093d0:	e78d      	b.n	80092ee <pow+0x14e>
 80093d2:	4b29      	ldr	r3, [pc, #164]	; (8009478 <pow+0x2d8>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093da:	4630      	mov	r0, r6
 80093dc:	4652      	mov	r2, sl
 80093de:	465b      	mov	r3, fp
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f7 fb83 	bl	8000aec <__aeabi_dcmplt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0eb      	beq.n	80093c2 <pow+0x222>
 80093ea:	ec45 4b10 	vmov	d0, r4, r5
 80093ee:	f000 fe23 	bl	800a038 <rint>
 80093f2:	4622      	mov	r2, r4
 80093f4:	462b      	mov	r3, r5
 80093f6:	ec51 0b10 	vmov	r0, r1, d0
 80093fa:	f7f7 fb6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1df      	bne.n	80093c2 <pow+0x222>
 8009402:	2200      	movs	r2, #0
 8009404:	4b18      	ldr	r3, [pc, #96]	; (8009468 <pow+0x2c8>)
 8009406:	e7da      	b.n	80093be <pow+0x21e>
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	ec51 0b18 	vmov	r0, r1, d8
 8009410:	f7f7 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8009414:	2800      	cmp	r0, #0
 8009416:	f43f af3a 	beq.w	800928e <pow+0xee>
 800941a:	ec47 6b10 	vmov	d0, r6, r7
 800941e:	f000 fdf6 	bl	800a00e <finite>
 8009422:	2800      	cmp	r0, #0
 8009424:	f43f af33 	beq.w	800928e <pow+0xee>
 8009428:	ec45 4b10 	vmov	d0, r4, r5
 800942c:	f000 fdef 	bl	800a00e <finite>
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f af2c 	beq.w	800928e <pow+0xee>
 8009436:	2304      	movs	r3, #4
 8009438:	9302      	str	r3, [sp, #8]
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <pow+0x2c0>)
 800943c:	9303      	str	r3, [sp, #12]
 800943e:	2300      	movs	r3, #0
 8009440:	930a      	str	r3, [sp, #40]	; 0x28
 8009442:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009446:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800944a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800944e:	e7b8      	b.n	80093c2 <pow+0x222>
 8009450:	a802      	add	r0, sp, #8
 8009452:	f000 fde4 	bl	800a01e <matherr>
 8009456:	2800      	cmp	r0, #0
 8009458:	f47f af11 	bne.w	800927e <pow+0xde>
 800945c:	e7b5      	b.n	80093ca <pow+0x22a>
 800945e:	bf00      	nop
 8009460:	0800a4db 	.word	0x0800a4db
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	fff00000 	.word	0xfff00000
 800946c:	3fe00000 	.word	0x3fe00000
 8009470:	47efffff 	.word	0x47efffff
 8009474:	c7efffff 	.word	0xc7efffff
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	20000074 	.word	0x20000074

08009480 <__ieee754_pow>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	b091      	sub	sp, #68	; 0x44
 8009486:	ed8d 1b00 	vstr	d1, [sp]
 800948a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800948e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009492:	ea58 0302 	orrs.w	r3, r8, r2
 8009496:	ec57 6b10 	vmov	r6, r7, d0
 800949a:	f000 84be 	beq.w	8009e1a <__ieee754_pow+0x99a>
 800949e:	4b7a      	ldr	r3, [pc, #488]	; (8009688 <__ieee754_pow+0x208>)
 80094a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80094a4:	429c      	cmp	r4, r3
 80094a6:	463d      	mov	r5, r7
 80094a8:	ee10 aa10 	vmov	sl, s0
 80094ac:	dc09      	bgt.n	80094c2 <__ieee754_pow+0x42>
 80094ae:	d103      	bne.n	80094b8 <__ieee754_pow+0x38>
 80094b0:	b93e      	cbnz	r6, 80094c2 <__ieee754_pow+0x42>
 80094b2:	45a0      	cmp	r8, r4
 80094b4:	dc0d      	bgt.n	80094d2 <__ieee754_pow+0x52>
 80094b6:	e001      	b.n	80094bc <__ieee754_pow+0x3c>
 80094b8:	4598      	cmp	r8, r3
 80094ba:	dc02      	bgt.n	80094c2 <__ieee754_pow+0x42>
 80094bc:	4598      	cmp	r8, r3
 80094be:	d10e      	bne.n	80094de <__ieee754_pow+0x5e>
 80094c0:	b16a      	cbz	r2, 80094de <__ieee754_pow+0x5e>
 80094c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094ca:	ea54 030a 	orrs.w	r3, r4, sl
 80094ce:	f000 84a4 	beq.w	8009e1a <__ieee754_pow+0x99a>
 80094d2:	486e      	ldr	r0, [pc, #440]	; (800968c <__ieee754_pow+0x20c>)
 80094d4:	b011      	add	sp, #68	; 0x44
 80094d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f000 bda5 	b.w	800a028 <nan>
 80094de:	2d00      	cmp	r5, #0
 80094e0:	da53      	bge.n	800958a <__ieee754_pow+0x10a>
 80094e2:	4b6b      	ldr	r3, [pc, #428]	; (8009690 <__ieee754_pow+0x210>)
 80094e4:	4598      	cmp	r8, r3
 80094e6:	dc4d      	bgt.n	8009584 <__ieee754_pow+0x104>
 80094e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80094ec:	4598      	cmp	r8, r3
 80094ee:	dd4c      	ble.n	800958a <__ieee754_pow+0x10a>
 80094f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80094f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094f8:	2b14      	cmp	r3, #20
 80094fa:	dd26      	ble.n	800954a <__ieee754_pow+0xca>
 80094fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009500:	fa22 f103 	lsr.w	r1, r2, r3
 8009504:	fa01 f303 	lsl.w	r3, r1, r3
 8009508:	4293      	cmp	r3, r2
 800950a:	d13e      	bne.n	800958a <__ieee754_pow+0x10a>
 800950c:	f001 0101 	and.w	r1, r1, #1
 8009510:	f1c1 0b02 	rsb	fp, r1, #2
 8009514:	2a00      	cmp	r2, #0
 8009516:	d15b      	bne.n	80095d0 <__ieee754_pow+0x150>
 8009518:	4b5b      	ldr	r3, [pc, #364]	; (8009688 <__ieee754_pow+0x208>)
 800951a:	4598      	cmp	r8, r3
 800951c:	d124      	bne.n	8009568 <__ieee754_pow+0xe8>
 800951e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009522:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009526:	ea53 030a 	orrs.w	r3, r3, sl
 800952a:	f000 8476 	beq.w	8009e1a <__ieee754_pow+0x99a>
 800952e:	4b59      	ldr	r3, [pc, #356]	; (8009694 <__ieee754_pow+0x214>)
 8009530:	429c      	cmp	r4, r3
 8009532:	dd2d      	ble.n	8009590 <__ieee754_pow+0x110>
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	f280 8473 	bge.w	8009e22 <__ieee754_pow+0x9a2>
 800953c:	2000      	movs	r0, #0
 800953e:	2100      	movs	r1, #0
 8009540:	ec41 0b10 	vmov	d0, r0, r1
 8009544:	b011      	add	sp, #68	; 0x44
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	2a00      	cmp	r2, #0
 800954c:	d13e      	bne.n	80095cc <__ieee754_pow+0x14c>
 800954e:	f1c3 0314 	rsb	r3, r3, #20
 8009552:	fa48 f103 	asr.w	r1, r8, r3
 8009556:	fa01 f303 	lsl.w	r3, r1, r3
 800955a:	4543      	cmp	r3, r8
 800955c:	f040 8469 	bne.w	8009e32 <__ieee754_pow+0x9b2>
 8009560:	f001 0101 	and.w	r1, r1, #1
 8009564:	f1c1 0b02 	rsb	fp, r1, #2
 8009568:	4b4b      	ldr	r3, [pc, #300]	; (8009698 <__ieee754_pow+0x218>)
 800956a:	4598      	cmp	r8, r3
 800956c:	d118      	bne.n	80095a0 <__ieee754_pow+0x120>
 800956e:	f1b9 0f00 	cmp.w	r9, #0
 8009572:	f280 845a 	bge.w	8009e2a <__ieee754_pow+0x9aa>
 8009576:	4948      	ldr	r1, [pc, #288]	; (8009698 <__ieee754_pow+0x218>)
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	2000      	movs	r0, #0
 800957e:	f7f7 f96d 	bl	800085c <__aeabi_ddiv>
 8009582:	e7dd      	b.n	8009540 <__ieee754_pow+0xc0>
 8009584:	f04f 0b02 	mov.w	fp, #2
 8009588:	e7c4      	b.n	8009514 <__ieee754_pow+0x94>
 800958a:	f04f 0b00 	mov.w	fp, #0
 800958e:	e7c1      	b.n	8009514 <__ieee754_pow+0x94>
 8009590:	f1b9 0f00 	cmp.w	r9, #0
 8009594:	dad2      	bge.n	800953c <__ieee754_pow+0xbc>
 8009596:	e9dd 0300 	ldrd	r0, r3, [sp]
 800959a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800959e:	e7cf      	b.n	8009540 <__ieee754_pow+0xc0>
 80095a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80095a4:	d106      	bne.n	80095b4 <__ieee754_pow+0x134>
 80095a6:	4632      	mov	r2, r6
 80095a8:	463b      	mov	r3, r7
 80095aa:	4610      	mov	r0, r2
 80095ac:	4619      	mov	r1, r3
 80095ae:	f7f7 f82b 	bl	8000608 <__aeabi_dmul>
 80095b2:	e7c5      	b.n	8009540 <__ieee754_pow+0xc0>
 80095b4:	4b39      	ldr	r3, [pc, #228]	; (800969c <__ieee754_pow+0x21c>)
 80095b6:	4599      	cmp	r9, r3
 80095b8:	d10a      	bne.n	80095d0 <__ieee754_pow+0x150>
 80095ba:	2d00      	cmp	r5, #0
 80095bc:	db08      	blt.n	80095d0 <__ieee754_pow+0x150>
 80095be:	ec47 6b10 	vmov	d0, r6, r7
 80095c2:	b011      	add	sp, #68	; 0x44
 80095c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	f000 bc68 	b.w	8009e9c <__ieee754_sqrt>
 80095cc:	f04f 0b00 	mov.w	fp, #0
 80095d0:	ec47 6b10 	vmov	d0, r6, r7
 80095d4:	f000 fd12 	bl	8009ffc <fabs>
 80095d8:	ec51 0b10 	vmov	r0, r1, d0
 80095dc:	f1ba 0f00 	cmp.w	sl, #0
 80095e0:	d127      	bne.n	8009632 <__ieee754_pow+0x1b2>
 80095e2:	b124      	cbz	r4, 80095ee <__ieee754_pow+0x16e>
 80095e4:	4b2c      	ldr	r3, [pc, #176]	; (8009698 <__ieee754_pow+0x218>)
 80095e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d121      	bne.n	8009632 <__ieee754_pow+0x1b2>
 80095ee:	f1b9 0f00 	cmp.w	r9, #0
 80095f2:	da05      	bge.n	8009600 <__ieee754_pow+0x180>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	2000      	movs	r0, #0
 80095fa:	4927      	ldr	r1, [pc, #156]	; (8009698 <__ieee754_pow+0x218>)
 80095fc:	f7f7 f92e 	bl	800085c <__aeabi_ddiv>
 8009600:	2d00      	cmp	r5, #0
 8009602:	da9d      	bge.n	8009540 <__ieee754_pow+0xc0>
 8009604:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009608:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800960c:	ea54 030b 	orrs.w	r3, r4, fp
 8009610:	d108      	bne.n	8009624 <__ieee754_pow+0x1a4>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	4610      	mov	r0, r2
 8009618:	4619      	mov	r1, r3
 800961a:	f7f6 fe3d 	bl	8000298 <__aeabi_dsub>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	e7ac      	b.n	800957e <__ieee754_pow+0xfe>
 8009624:	f1bb 0f01 	cmp.w	fp, #1
 8009628:	d18a      	bne.n	8009540 <__ieee754_pow+0xc0>
 800962a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800962e:	4619      	mov	r1, r3
 8009630:	e786      	b.n	8009540 <__ieee754_pow+0xc0>
 8009632:	0fed      	lsrs	r5, r5, #31
 8009634:	1e6b      	subs	r3, r5, #1
 8009636:	930d      	str	r3, [sp, #52]	; 0x34
 8009638:	ea5b 0303 	orrs.w	r3, fp, r3
 800963c:	d102      	bne.n	8009644 <__ieee754_pow+0x1c4>
 800963e:	4632      	mov	r2, r6
 8009640:	463b      	mov	r3, r7
 8009642:	e7e8      	b.n	8009616 <__ieee754_pow+0x196>
 8009644:	4b16      	ldr	r3, [pc, #88]	; (80096a0 <__ieee754_pow+0x220>)
 8009646:	4598      	cmp	r8, r3
 8009648:	f340 80fe 	ble.w	8009848 <__ieee754_pow+0x3c8>
 800964c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009650:	4598      	cmp	r8, r3
 8009652:	dd0a      	ble.n	800966a <__ieee754_pow+0x1ea>
 8009654:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <__ieee754_pow+0x214>)
 8009656:	429c      	cmp	r4, r3
 8009658:	dc0d      	bgt.n	8009676 <__ieee754_pow+0x1f6>
 800965a:	f1b9 0f00 	cmp.w	r9, #0
 800965e:	f6bf af6d 	bge.w	800953c <__ieee754_pow+0xbc>
 8009662:	a307      	add	r3, pc, #28	; (adr r3, 8009680 <__ieee754_pow+0x200>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	e79f      	b.n	80095aa <__ieee754_pow+0x12a>
 800966a:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <__ieee754_pow+0x224>)
 800966c:	429c      	cmp	r4, r3
 800966e:	ddf4      	ble.n	800965a <__ieee754_pow+0x1da>
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <__ieee754_pow+0x218>)
 8009672:	429c      	cmp	r4, r3
 8009674:	dd18      	ble.n	80096a8 <__ieee754_pow+0x228>
 8009676:	f1b9 0f00 	cmp.w	r9, #0
 800967a:	dcf2      	bgt.n	8009662 <__ieee754_pow+0x1e2>
 800967c:	e75e      	b.n	800953c <__ieee754_pow+0xbc>
 800967e:	bf00      	nop
 8009680:	8800759c 	.word	0x8800759c
 8009684:	7e37e43c 	.word	0x7e37e43c
 8009688:	7ff00000 	.word	0x7ff00000
 800968c:	0800a4ad 	.word	0x0800a4ad
 8009690:	433fffff 	.word	0x433fffff
 8009694:	3fefffff 	.word	0x3fefffff
 8009698:	3ff00000 	.word	0x3ff00000
 800969c:	3fe00000 	.word	0x3fe00000
 80096a0:	41e00000 	.word	0x41e00000
 80096a4:	3feffffe 	.word	0x3feffffe
 80096a8:	2200      	movs	r2, #0
 80096aa:	4b63      	ldr	r3, [pc, #396]	; (8009838 <__ieee754_pow+0x3b8>)
 80096ac:	f7f6 fdf4 	bl	8000298 <__aeabi_dsub>
 80096b0:	a355      	add	r3, pc, #340	; (adr r3, 8009808 <__ieee754_pow+0x388>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	4604      	mov	r4, r0
 80096b8:	460d      	mov	r5, r1
 80096ba:	f7f6 ffa5 	bl	8000608 <__aeabi_dmul>
 80096be:	a354      	add	r3, pc, #336	; (adr r3, 8009810 <__ieee754_pow+0x390>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 ff9c 	bl	8000608 <__aeabi_dmul>
 80096d0:	2200      	movs	r2, #0
 80096d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d6:	4b59      	ldr	r3, [pc, #356]	; (800983c <__ieee754_pow+0x3bc>)
 80096d8:	4620      	mov	r0, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	f7f6 ff94 	bl	8000608 <__aeabi_dmul>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	a14c      	add	r1, pc, #304	; (adr r1, 8009818 <__ieee754_pow+0x398>)
 80096e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ea:	f7f6 fdd5 	bl	8000298 <__aeabi_dsub>
 80096ee:	4622      	mov	r2, r4
 80096f0:	462b      	mov	r3, r5
 80096f2:	f7f6 ff89 	bl	8000608 <__aeabi_dmul>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	2000      	movs	r0, #0
 80096fc:	4950      	ldr	r1, [pc, #320]	; (8009840 <__ieee754_pow+0x3c0>)
 80096fe:	f7f6 fdcb 	bl	8000298 <__aeabi_dsub>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f7f6 ff7b 	bl	8000608 <__aeabi_dmul>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4640      	mov	r0, r8
 8009718:	4649      	mov	r1, r9
 800971a:	f7f6 ff75 	bl	8000608 <__aeabi_dmul>
 800971e:	a340      	add	r3, pc, #256	; (adr r3, 8009820 <__ieee754_pow+0x3a0>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 ff70 	bl	8000608 <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009730:	f7f6 fdb2 	bl	8000298 <__aeabi_dsub>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4604      	mov	r4, r0
 800973a:	460d      	mov	r5, r1
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f6 fdac 	bl	800029c <__adddf3>
 8009744:	2000      	movs	r0, #0
 8009746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800974a:	4632      	mov	r2, r6
 800974c:	463b      	mov	r3, r7
 800974e:	f7f6 fda3 	bl	8000298 <__aeabi_dsub>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f6 fd9d 	bl	8000298 <__aeabi_dsub>
 800975e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009760:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009764:	4313      	orrs	r3, r2
 8009766:	4606      	mov	r6, r0
 8009768:	460f      	mov	r7, r1
 800976a:	f040 81eb 	bne.w	8009b44 <__ieee754_pow+0x6c4>
 800976e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009828 <__ieee754_pow+0x3a8>
 8009772:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009776:	2400      	movs	r4, #0
 8009778:	4622      	mov	r2, r4
 800977a:	462b      	mov	r3, r5
 800977c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009780:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009784:	f7f6 fd88 	bl	8000298 <__aeabi_dsub>
 8009788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800978c:	f7f6 ff3c 	bl	8000608 <__aeabi_dmul>
 8009790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009794:	4680      	mov	r8, r0
 8009796:	4689      	mov	r9, r1
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f6 ff34 	bl	8000608 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4640      	mov	r0, r8
 80097a6:	4649      	mov	r1, r9
 80097a8:	f7f6 fd78 	bl	800029c <__adddf3>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	4680      	mov	r8, r0
 80097b2:	4689      	mov	r9, r1
 80097b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097b8:	f7f6 ff26 	bl	8000608 <__aeabi_dmul>
 80097bc:	460b      	mov	r3, r1
 80097be:	4604      	mov	r4, r0
 80097c0:	460d      	mov	r5, r1
 80097c2:	4602      	mov	r2, r0
 80097c4:	4649      	mov	r1, r9
 80097c6:	4640      	mov	r0, r8
 80097c8:	e9cd 4500 	strd	r4, r5, [sp]
 80097cc:	f7f6 fd66 	bl	800029c <__adddf3>
 80097d0:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <__ieee754_pow+0x3c4>)
 80097d2:	4299      	cmp	r1, r3
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	468b      	mov	fp, r1
 80097da:	f340 82f7 	ble.w	8009dcc <__ieee754_pow+0x94c>
 80097de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80097e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80097e6:	4303      	orrs	r3, r0
 80097e8:	f000 81ea 	beq.w	8009bc0 <__ieee754_pow+0x740>
 80097ec:	a310      	add	r3, pc, #64	; (adr r3, 8009830 <__ieee754_pow+0x3b0>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f6:	f7f6 ff07 	bl	8000608 <__aeabi_dmul>
 80097fa:	a30d      	add	r3, pc, #52	; (adr r3, 8009830 <__ieee754_pow+0x3b0>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	e6d5      	b.n	80095ae <__ieee754_pow+0x12e>
 8009802:	bf00      	nop
 8009804:	f3af 8000 	nop.w
 8009808:	60000000 	.word	0x60000000
 800980c:	3ff71547 	.word	0x3ff71547
 8009810:	f85ddf44 	.word	0xf85ddf44
 8009814:	3e54ae0b 	.word	0x3e54ae0b
 8009818:	55555555 	.word	0x55555555
 800981c:	3fd55555 	.word	0x3fd55555
 8009820:	652b82fe 	.word	0x652b82fe
 8009824:	3ff71547 	.word	0x3ff71547
 8009828:	00000000 	.word	0x00000000
 800982c:	bff00000 	.word	0xbff00000
 8009830:	8800759c 	.word	0x8800759c
 8009834:	7e37e43c 	.word	0x7e37e43c
 8009838:	3ff00000 	.word	0x3ff00000
 800983c:	3fd00000 	.word	0x3fd00000
 8009840:	3fe00000 	.word	0x3fe00000
 8009844:	408fffff 	.word	0x408fffff
 8009848:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800984c:	f04f 0200 	mov.w	r2, #0
 8009850:	da05      	bge.n	800985e <__ieee754_pow+0x3de>
 8009852:	4bd3      	ldr	r3, [pc, #844]	; (8009ba0 <__ieee754_pow+0x720>)
 8009854:	f7f6 fed8 	bl	8000608 <__aeabi_dmul>
 8009858:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800985c:	460c      	mov	r4, r1
 800985e:	1523      	asrs	r3, r4, #20
 8009860:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009864:	4413      	add	r3, r2
 8009866:	9309      	str	r3, [sp, #36]	; 0x24
 8009868:	4bce      	ldr	r3, [pc, #824]	; (8009ba4 <__ieee754_pow+0x724>)
 800986a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800986e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009872:	429c      	cmp	r4, r3
 8009874:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009878:	dd08      	ble.n	800988c <__ieee754_pow+0x40c>
 800987a:	4bcb      	ldr	r3, [pc, #812]	; (8009ba8 <__ieee754_pow+0x728>)
 800987c:	429c      	cmp	r4, r3
 800987e:	f340 815e 	ble.w	8009b3e <__ieee754_pow+0x6be>
 8009882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009884:	3301      	adds	r3, #1
 8009886:	9309      	str	r3, [sp, #36]	; 0x24
 8009888:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800988c:	f04f 0a00 	mov.w	sl, #0
 8009890:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009894:	930c      	str	r3, [sp, #48]	; 0x30
 8009896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009898:	4bc4      	ldr	r3, [pc, #784]	; (8009bac <__ieee754_pow+0x72c>)
 800989a:	4413      	add	r3, r2
 800989c:	ed93 7b00 	vldr	d7, [r3]
 80098a0:	4629      	mov	r1, r5
 80098a2:	ec53 2b17 	vmov	r2, r3, d7
 80098a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80098ae:	f7f6 fcf3 	bl	8000298 <__aeabi_dsub>
 80098b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098b6:	4606      	mov	r6, r0
 80098b8:	460f      	mov	r7, r1
 80098ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098be:	f7f6 fced 	bl	800029c <__adddf3>
 80098c2:	4602      	mov	r2, r0
 80098c4:	460b      	mov	r3, r1
 80098c6:	2000      	movs	r0, #0
 80098c8:	49b9      	ldr	r1, [pc, #740]	; (8009bb0 <__ieee754_pow+0x730>)
 80098ca:	f7f6 ffc7 	bl	800085c <__aeabi_ddiv>
 80098ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	f7f6 fe95 	bl	8000608 <__aeabi_dmul>
 80098de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098ea:	2300      	movs	r3, #0
 80098ec:	9302      	str	r3, [sp, #8]
 80098ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098f2:	106d      	asrs	r5, r5, #1
 80098f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80098f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80098fc:	2200      	movs	r2, #0
 80098fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009902:	4640      	mov	r0, r8
 8009904:	4649      	mov	r1, r9
 8009906:	4614      	mov	r4, r2
 8009908:	461d      	mov	r5, r3
 800990a:	f7f6 fe7d 	bl	8000608 <__aeabi_dmul>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f7f6 fcbf 	bl	8000298 <__aeabi_dsub>
 800991a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	4620      	mov	r0, r4
 8009924:	4629      	mov	r1, r5
 8009926:	f7f6 fcb7 	bl	8000298 <__aeabi_dsub>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009932:	f7f6 fcb1 	bl	8000298 <__aeabi_dsub>
 8009936:	4642      	mov	r2, r8
 8009938:	464b      	mov	r3, r9
 800993a:	f7f6 fe65 	bl	8000608 <__aeabi_dmul>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 fca7 	bl	8000298 <__aeabi_dsub>
 800994a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800994e:	f7f6 fe5b 	bl	8000608 <__aeabi_dmul>
 8009952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009956:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800995a:	4610      	mov	r0, r2
 800995c:	4619      	mov	r1, r3
 800995e:	f7f6 fe53 	bl	8000608 <__aeabi_dmul>
 8009962:	a37b      	add	r3, pc, #492	; (adr r3, 8009b50 <__ieee754_pow+0x6d0>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	4604      	mov	r4, r0
 800996a:	460d      	mov	r5, r1
 800996c:	f7f6 fe4c 	bl	8000608 <__aeabi_dmul>
 8009970:	a379      	add	r3, pc, #484	; (adr r3, 8009b58 <__ieee754_pow+0x6d8>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fc91 	bl	800029c <__adddf3>
 800997a:	4622      	mov	r2, r4
 800997c:	462b      	mov	r3, r5
 800997e:	f7f6 fe43 	bl	8000608 <__aeabi_dmul>
 8009982:	a377      	add	r3, pc, #476	; (adr r3, 8009b60 <__ieee754_pow+0x6e0>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fc88 	bl	800029c <__adddf3>
 800998c:	4622      	mov	r2, r4
 800998e:	462b      	mov	r3, r5
 8009990:	f7f6 fe3a 	bl	8000608 <__aeabi_dmul>
 8009994:	a374      	add	r3, pc, #464	; (adr r3, 8009b68 <__ieee754_pow+0x6e8>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fc7f 	bl	800029c <__adddf3>
 800999e:	4622      	mov	r2, r4
 80099a0:	462b      	mov	r3, r5
 80099a2:	f7f6 fe31 	bl	8000608 <__aeabi_dmul>
 80099a6:	a372      	add	r3, pc, #456	; (adr r3, 8009b70 <__ieee754_pow+0x6f0>)
 80099a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ac:	f7f6 fc76 	bl	800029c <__adddf3>
 80099b0:	4622      	mov	r2, r4
 80099b2:	462b      	mov	r3, r5
 80099b4:	f7f6 fe28 	bl	8000608 <__aeabi_dmul>
 80099b8:	a36f      	add	r3, pc, #444	; (adr r3, 8009b78 <__ieee754_pow+0x6f8>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f7f6 fc6d 	bl	800029c <__adddf3>
 80099c2:	4622      	mov	r2, r4
 80099c4:	4606      	mov	r6, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	462b      	mov	r3, r5
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f6 fe1b 	bl	8000608 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4630      	mov	r0, r6
 80099d8:	4639      	mov	r1, r7
 80099da:	f7f6 fe15 	bl	8000608 <__aeabi_dmul>
 80099de:	4642      	mov	r2, r8
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	464b      	mov	r3, r9
 80099e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099ea:	f7f6 fc57 	bl	800029c <__adddf3>
 80099ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099f2:	f7f6 fe09 	bl	8000608 <__aeabi_dmul>
 80099f6:	4622      	mov	r2, r4
 80099f8:	462b      	mov	r3, r5
 80099fa:	f7f6 fc4f 	bl	800029c <__adddf3>
 80099fe:	4642      	mov	r2, r8
 8009a00:	4606      	mov	r6, r0
 8009a02:	460f      	mov	r7, r1
 8009a04:	464b      	mov	r3, r9
 8009a06:	4640      	mov	r0, r8
 8009a08:	4649      	mov	r1, r9
 8009a0a:	f7f6 fdfd 	bl	8000608 <__aeabi_dmul>
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4b68      	ldr	r3, [pc, #416]	; (8009bb4 <__ieee754_pow+0x734>)
 8009a12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a16:	f7f6 fc41 	bl	800029c <__adddf3>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	f7f6 fc3d 	bl	800029c <__adddf3>
 8009a22:	9802      	ldr	r0, [sp, #8]
 8009a24:	460d      	mov	r5, r1
 8009a26:	4604      	mov	r4, r0
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4649      	mov	r1, r9
 8009a30:	f7f6 fdea 	bl	8000608 <__aeabi_dmul>
 8009a34:	2200      	movs	r2, #0
 8009a36:	4680      	mov	r8, r0
 8009a38:	4689      	mov	r9, r1
 8009a3a:	4b5e      	ldr	r3, [pc, #376]	; (8009bb4 <__ieee754_pow+0x734>)
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	4629      	mov	r1, r5
 8009a40:	f7f6 fc2a 	bl	8000298 <__aeabi_dsub>
 8009a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a48:	f7f6 fc26 	bl	8000298 <__aeabi_dsub>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4630      	mov	r0, r6
 8009a52:	4639      	mov	r1, r7
 8009a54:	f7f6 fc20 	bl	8000298 <__aeabi_dsub>
 8009a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a5c:	f7f6 fdd4 	bl	8000608 <__aeabi_dmul>
 8009a60:	4622      	mov	r2, r4
 8009a62:	4606      	mov	r6, r0
 8009a64:	460f      	mov	r7, r1
 8009a66:	462b      	mov	r3, r5
 8009a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a6c:	f7f6 fdcc 	bl	8000608 <__aeabi_dmul>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	4630      	mov	r0, r6
 8009a76:	4639      	mov	r1, r7
 8009a78:	f7f6 fc10 	bl	800029c <__adddf3>
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	460f      	mov	r7, r1
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4640      	mov	r0, r8
 8009a86:	4649      	mov	r1, r9
 8009a88:	f7f6 fc08 	bl	800029c <__adddf3>
 8009a8c:	9802      	ldr	r0, [sp, #8]
 8009a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8009b80 <__ieee754_pow+0x700>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4604      	mov	r4, r0
 8009a96:	460d      	mov	r5, r1
 8009a98:	f7f6 fdb6 	bl	8000608 <__aeabi_dmul>
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f6 fbf6 	bl	8000298 <__aeabi_dsub>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	f7f6 fbf0 	bl	8000298 <__aeabi_dsub>
 8009ab8:	a333      	add	r3, pc, #204	; (adr r3, 8009b88 <__ieee754_pow+0x708>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fda3 	bl	8000608 <__aeabi_dmul>
 8009ac2:	a333      	add	r3, pc, #204	; (adr r3, 8009b90 <__ieee754_pow+0x710>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	4606      	mov	r6, r0
 8009aca:	460f      	mov	r7, r1
 8009acc:	4620      	mov	r0, r4
 8009ace:	4629      	mov	r1, r5
 8009ad0:	f7f6 fd9a 	bl	8000608 <__aeabi_dmul>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f6 fbde 	bl	800029c <__adddf3>
 8009ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ae2:	4b35      	ldr	r3, [pc, #212]	; (8009bb8 <__ieee754_pow+0x738>)
 8009ae4:	4413      	add	r3, r2
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fbd7 	bl	800029c <__adddf3>
 8009aee:	4604      	mov	r4, r0
 8009af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009af2:	460d      	mov	r5, r1
 8009af4:	f7f6 fd1e 	bl	8000534 <__aeabi_i2d>
 8009af8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009afa:	4b30      	ldr	r3, [pc, #192]	; (8009bbc <__ieee754_pow+0x73c>)
 8009afc:	4413      	add	r3, r2
 8009afe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b02:	4606      	mov	r6, r0
 8009b04:	460f      	mov	r7, r1
 8009b06:	4622      	mov	r2, r4
 8009b08:	462b      	mov	r3, r5
 8009b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b0e:	f7f6 fbc5 	bl	800029c <__adddf3>
 8009b12:	4642      	mov	r2, r8
 8009b14:	464b      	mov	r3, r9
 8009b16:	f7f6 fbc1 	bl	800029c <__adddf3>
 8009b1a:	4632      	mov	r2, r6
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	f7f6 fbbd 	bl	800029c <__adddf3>
 8009b22:	9802      	ldr	r0, [sp, #8]
 8009b24:	4632      	mov	r2, r6
 8009b26:	463b      	mov	r3, r7
 8009b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b2c:	f7f6 fbb4 	bl	8000298 <__aeabi_dsub>
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	f7f6 fbb0 	bl	8000298 <__aeabi_dsub>
 8009b38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b3c:	e607      	b.n	800974e <__ieee754_pow+0x2ce>
 8009b3e:	f04f 0a01 	mov.w	sl, #1
 8009b42:	e6a5      	b.n	8009890 <__ieee754_pow+0x410>
 8009b44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009b98 <__ieee754_pow+0x718>
 8009b48:	e613      	b.n	8009772 <__ieee754_pow+0x2f2>
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w
 8009b50:	4a454eef 	.word	0x4a454eef
 8009b54:	3fca7e28 	.word	0x3fca7e28
 8009b58:	93c9db65 	.word	0x93c9db65
 8009b5c:	3fcd864a 	.word	0x3fcd864a
 8009b60:	a91d4101 	.word	0xa91d4101
 8009b64:	3fd17460 	.word	0x3fd17460
 8009b68:	518f264d 	.word	0x518f264d
 8009b6c:	3fd55555 	.word	0x3fd55555
 8009b70:	db6fabff 	.word	0xdb6fabff
 8009b74:	3fdb6db6 	.word	0x3fdb6db6
 8009b78:	33333303 	.word	0x33333303
 8009b7c:	3fe33333 	.word	0x3fe33333
 8009b80:	e0000000 	.word	0xe0000000
 8009b84:	3feec709 	.word	0x3feec709
 8009b88:	dc3a03fd 	.word	0xdc3a03fd
 8009b8c:	3feec709 	.word	0x3feec709
 8009b90:	145b01f5 	.word	0x145b01f5
 8009b94:	be3e2fe0 	.word	0xbe3e2fe0
 8009b98:	00000000 	.word	0x00000000
 8009b9c:	3ff00000 	.word	0x3ff00000
 8009ba0:	43400000 	.word	0x43400000
 8009ba4:	0003988e 	.word	0x0003988e
 8009ba8:	000bb679 	.word	0x000bb679
 8009bac:	0800a4e0 	.word	0x0800a4e0
 8009bb0:	3ff00000 	.word	0x3ff00000
 8009bb4:	40080000 	.word	0x40080000
 8009bb8:	0800a500 	.word	0x0800a500
 8009bbc:	0800a4f0 	.word	0x0800a4f0
 8009bc0:	a3b4      	add	r3, pc, #720	; (adr r3, 8009e94 <__ieee754_pow+0xa14>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	4649      	mov	r1, r9
 8009bca:	f7f6 fb67 	bl	800029c <__adddf3>
 8009bce:	4622      	mov	r2, r4
 8009bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	4639      	mov	r1, r7
 8009bda:	f7f6 fb5d 	bl	8000298 <__aeabi_dsub>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009be6:	f7f6 ff9f 	bl	8000b28 <__aeabi_dcmpgt>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f47f adfe 	bne.w	80097ec <__ieee754_pow+0x36c>
 8009bf0:	4aa3      	ldr	r2, [pc, #652]	; (8009e80 <__ieee754_pow+0xa00>)
 8009bf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f340 810a 	ble.w	8009e10 <__ieee754_pow+0x990>
 8009bfc:	151b      	asrs	r3, r3, #20
 8009bfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c06:	fa4a f303 	asr.w	r3, sl, r3
 8009c0a:	445b      	add	r3, fp
 8009c0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c10:	4e9c      	ldr	r6, [pc, #624]	; (8009e84 <__ieee754_pow+0xa04>)
 8009c12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c16:	4116      	asrs	r6, r2
 8009c18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	ea23 0106 	bic.w	r1, r3, r6
 8009c22:	f1c2 0214 	rsb	r2, r2, #20
 8009c26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c2a:	fa4a fa02 	asr.w	sl, sl, r2
 8009c2e:	f1bb 0f00 	cmp.w	fp, #0
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	bfb8      	it	lt
 8009c3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c40:	f7f6 fb2a 	bl	8000298 <__aeabi_dsub>
 8009c44:	e9cd 0100 	strd	r0, r1, [sp]
 8009c48:	4642      	mov	r2, r8
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c50:	f7f6 fb24 	bl	800029c <__adddf3>
 8009c54:	2000      	movs	r0, #0
 8009c56:	a378      	add	r3, pc, #480	; (adr r3, 8009e38 <__ieee754_pow+0x9b8>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	460d      	mov	r5, r1
 8009c60:	f7f6 fcd2 	bl	8000608 <__aeabi_dmul>
 8009c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c68:	4606      	mov	r6, r0
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f7f6 fb12 	bl	8000298 <__aeabi_dsub>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fb0c 	bl	8000298 <__aeabi_dsub>
 8009c80:	a36f      	add	r3, pc, #444	; (adr r3, 8009e40 <__ieee754_pow+0x9c0>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f7f6 fcbf 	bl	8000608 <__aeabi_dmul>
 8009c8a:	a36f      	add	r3, pc, #444	; (adr r3, 8009e48 <__ieee754_pow+0x9c8>)
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	4680      	mov	r8, r0
 8009c92:	4689      	mov	r9, r1
 8009c94:	4620      	mov	r0, r4
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7f6 fcb6 	bl	8000608 <__aeabi_dmul>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	f7f6 fafa 	bl	800029c <__adddf3>
 8009ca8:	4604      	mov	r4, r0
 8009caa:	460d      	mov	r5, r1
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 faf2 	bl	800029c <__adddf3>
 8009cb8:	4632      	mov	r2, r6
 8009cba:	463b      	mov	r3, r7
 8009cbc:	4680      	mov	r8, r0
 8009cbe:	4689      	mov	r9, r1
 8009cc0:	f7f6 faea 	bl	8000298 <__aeabi_dsub>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fae4 	bl	8000298 <__aeabi_dsub>
 8009cd0:	4642      	mov	r2, r8
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	4640      	mov	r0, r8
 8009cda:	4649      	mov	r1, r9
 8009cdc:	f7f6 fc94 	bl	8000608 <__aeabi_dmul>
 8009ce0:	a35b      	add	r3, pc, #364	; (adr r3, 8009e50 <__ieee754_pow+0x9d0>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	f7f6 fc8d 	bl	8000608 <__aeabi_dmul>
 8009cee:	a35a      	add	r3, pc, #360	; (adr r3, 8009e58 <__ieee754_pow+0x9d8>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f7f6 fad0 	bl	8000298 <__aeabi_dsub>
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	462b      	mov	r3, r5
 8009cfc:	f7f6 fc84 	bl	8000608 <__aeabi_dmul>
 8009d00:	a357      	add	r3, pc, #348	; (adr r3, 8009e60 <__ieee754_pow+0x9e0>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fac9 	bl	800029c <__adddf3>
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	462b      	mov	r3, r5
 8009d0e:	f7f6 fc7b 	bl	8000608 <__aeabi_dmul>
 8009d12:	a355      	add	r3, pc, #340	; (adr r3, 8009e68 <__ieee754_pow+0x9e8>)
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f7f6 fabe 	bl	8000298 <__aeabi_dsub>
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	462b      	mov	r3, r5
 8009d20:	f7f6 fc72 	bl	8000608 <__aeabi_dmul>
 8009d24:	a352      	add	r3, pc, #328	; (adr r3, 8009e70 <__ieee754_pow+0x9f0>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fab7 	bl	800029c <__adddf3>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	462b      	mov	r3, r5
 8009d32:	f7f6 fc69 	bl	8000608 <__aeabi_dmul>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	f7f6 faab 	bl	8000298 <__aeabi_dsub>
 8009d42:	4604      	mov	r4, r0
 8009d44:	460d      	mov	r5, r1
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	f7f6 fc5b 	bl	8000608 <__aeabi_dmul>
 8009d52:	2200      	movs	r2, #0
 8009d54:	e9cd 0100 	strd	r0, r1, [sp]
 8009d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	f7f6 fa9a 	bl	8000298 <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d6c:	f7f6 fd76 	bl	800085c <__aeabi_ddiv>
 8009d70:	4632      	mov	r2, r6
 8009d72:	4604      	mov	r4, r0
 8009d74:	460d      	mov	r5, r1
 8009d76:	463b      	mov	r3, r7
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 fc44 	bl	8000608 <__aeabi_dmul>
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	f7f6 fa8a 	bl	800029c <__adddf3>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fa82 	bl	8000298 <__aeabi_dsub>
 8009d94:	4642      	mov	r2, r8
 8009d96:	464b      	mov	r3, r9
 8009d98:	f7f6 fa7e 	bl	8000298 <__aeabi_dsub>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	2000      	movs	r0, #0
 8009da2:	4939      	ldr	r1, [pc, #228]	; (8009e88 <__ieee754_pow+0xa08>)
 8009da4:	f7f6 fa78 	bl	8000298 <__aeabi_dsub>
 8009da8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009dac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	da2f      	bge.n	8009e16 <__ieee754_pow+0x996>
 8009db6:	4650      	mov	r0, sl
 8009db8:	ec43 2b10 	vmov	d0, r2, r3
 8009dbc:	f000 f9c0 	bl	800a140 <scalbn>
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dc8:	f7ff bbf1 	b.w	80095ae <__ieee754_pow+0x12e>
 8009dcc:	4b2f      	ldr	r3, [pc, #188]	; (8009e8c <__ieee754_pow+0xa0c>)
 8009dce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009dd2:	429e      	cmp	r6, r3
 8009dd4:	f77f af0c 	ble.w	8009bf0 <__ieee754_pow+0x770>
 8009dd8:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <__ieee754_pow+0xa10>)
 8009dda:	440b      	add	r3, r1
 8009ddc:	4303      	orrs	r3, r0
 8009dde:	d00b      	beq.n	8009df8 <__ieee754_pow+0x978>
 8009de0:	a325      	add	r3, pc, #148	; (adr r3, 8009e78 <__ieee754_pow+0x9f8>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dea:	f7f6 fc0d 	bl	8000608 <__aeabi_dmul>
 8009dee:	a322      	add	r3, pc, #136	; (adr r3, 8009e78 <__ieee754_pow+0x9f8>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f7ff bbdb 	b.w	80095ae <__ieee754_pow+0x12e>
 8009df8:	4622      	mov	r2, r4
 8009dfa:	462b      	mov	r3, r5
 8009dfc:	f7f6 fa4c 	bl	8000298 <__aeabi_dsub>
 8009e00:	4642      	mov	r2, r8
 8009e02:	464b      	mov	r3, r9
 8009e04:	f7f6 fe86 	bl	8000b14 <__aeabi_dcmpge>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f43f aef1 	beq.w	8009bf0 <__ieee754_pow+0x770>
 8009e0e:	e7e7      	b.n	8009de0 <__ieee754_pow+0x960>
 8009e10:	f04f 0a00 	mov.w	sl, #0
 8009e14:	e718      	b.n	8009c48 <__ieee754_pow+0x7c8>
 8009e16:	4621      	mov	r1, r4
 8009e18:	e7d4      	b.n	8009dc4 <__ieee754_pow+0x944>
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	491a      	ldr	r1, [pc, #104]	; (8009e88 <__ieee754_pow+0xa08>)
 8009e1e:	f7ff bb8f 	b.w	8009540 <__ieee754_pow+0xc0>
 8009e22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e26:	f7ff bb8b 	b.w	8009540 <__ieee754_pow+0xc0>
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7ff bb87 	b.w	8009540 <__ieee754_pow+0xc0>
 8009e32:	4693      	mov	fp, r2
 8009e34:	f7ff bb98 	b.w	8009568 <__ieee754_pow+0xe8>
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	3fe62e43 	.word	0x3fe62e43
 8009e40:	fefa39ef 	.word	0xfefa39ef
 8009e44:	3fe62e42 	.word	0x3fe62e42
 8009e48:	0ca86c39 	.word	0x0ca86c39
 8009e4c:	be205c61 	.word	0xbe205c61
 8009e50:	72bea4d0 	.word	0x72bea4d0
 8009e54:	3e663769 	.word	0x3e663769
 8009e58:	c5d26bf1 	.word	0xc5d26bf1
 8009e5c:	3ebbbd41 	.word	0x3ebbbd41
 8009e60:	af25de2c 	.word	0xaf25de2c
 8009e64:	3f11566a 	.word	0x3f11566a
 8009e68:	16bebd93 	.word	0x16bebd93
 8009e6c:	3f66c16c 	.word	0x3f66c16c
 8009e70:	5555553e 	.word	0x5555553e
 8009e74:	3fc55555 	.word	0x3fc55555
 8009e78:	c2f8f359 	.word	0xc2f8f359
 8009e7c:	01a56e1f 	.word	0x01a56e1f
 8009e80:	3fe00000 	.word	0x3fe00000
 8009e84:	000fffff 	.word	0x000fffff
 8009e88:	3ff00000 	.word	0x3ff00000
 8009e8c:	4090cbff 	.word	0x4090cbff
 8009e90:	3f6f3400 	.word	0x3f6f3400
 8009e94:	652b82fe 	.word	0x652b82fe
 8009e98:	3c971547 	.word	0x3c971547

08009e9c <__ieee754_sqrt>:
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	4955      	ldr	r1, [pc, #340]	; (8009ff8 <__ieee754_sqrt+0x15c>)
 8009ea2:	ec55 4b10 	vmov	r4, r5, d0
 8009ea6:	43a9      	bics	r1, r5
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	462a      	mov	r2, r5
 8009eac:	d112      	bne.n	8009ed4 <__ieee754_sqrt+0x38>
 8009eae:	ee10 2a10 	vmov	r2, s0
 8009eb2:	ee10 0a10 	vmov	r0, s0
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f7f6 fba6 	bl	8000608 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	f7f6 f9ea 	bl	800029c <__adddf3>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	ec45 4b10 	vmov	d0, r4, r5
 8009ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	ee10 0a10 	vmov	r0, s0
 8009eda:	4621      	mov	r1, r4
 8009edc:	dc0f      	bgt.n	8009efe <__ieee754_sqrt+0x62>
 8009ede:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ee2:	4330      	orrs	r0, r6
 8009ee4:	d0f2      	beq.n	8009ecc <__ieee754_sqrt+0x30>
 8009ee6:	b155      	cbz	r5, 8009efe <__ieee754_sqrt+0x62>
 8009ee8:	ee10 2a10 	vmov	r2, s0
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 f9d2 	bl	8000298 <__aeabi_dsub>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	f7f6 fcb0 	bl	800085c <__aeabi_ddiv>
 8009efc:	e7e4      	b.n	8009ec8 <__ieee754_sqrt+0x2c>
 8009efe:	151b      	asrs	r3, r3, #20
 8009f00:	d073      	beq.n	8009fea <__ieee754_sqrt+0x14e>
 8009f02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f06:	07dd      	lsls	r5, r3, #31
 8009f08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009f0c:	bf48      	it	mi
 8009f0e:	0fc8      	lsrmi	r0, r1, #31
 8009f10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f14:	bf44      	itt	mi
 8009f16:	0049      	lslmi	r1, r1, #1
 8009f18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009f1c:	2500      	movs	r5, #0
 8009f1e:	1058      	asrs	r0, r3, #1
 8009f20:	0fcb      	lsrs	r3, r1, #31
 8009f22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009f26:	0049      	lsls	r1, r1, #1
 8009f28:	2316      	movs	r3, #22
 8009f2a:	462c      	mov	r4, r5
 8009f2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009f30:	19a7      	adds	r7, r4, r6
 8009f32:	4297      	cmp	r7, r2
 8009f34:	bfde      	ittt	le
 8009f36:	19bc      	addle	r4, r7, r6
 8009f38:	1bd2      	suble	r2, r2, r7
 8009f3a:	19ad      	addle	r5, r5, r6
 8009f3c:	0fcf      	lsrs	r7, r1, #31
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009f44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009f48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009f4c:	d1f0      	bne.n	8009f30 <__ieee754_sqrt+0x94>
 8009f4e:	f04f 0c20 	mov.w	ip, #32
 8009f52:	469e      	mov	lr, r3
 8009f54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f58:	42a2      	cmp	r2, r4
 8009f5a:	eb06 070e 	add.w	r7, r6, lr
 8009f5e:	dc02      	bgt.n	8009f66 <__ieee754_sqrt+0xca>
 8009f60:	d112      	bne.n	8009f88 <__ieee754_sqrt+0xec>
 8009f62:	428f      	cmp	r7, r1
 8009f64:	d810      	bhi.n	8009f88 <__ieee754_sqrt+0xec>
 8009f66:	2f00      	cmp	r7, #0
 8009f68:	eb07 0e06 	add.w	lr, r7, r6
 8009f6c:	da42      	bge.n	8009ff4 <__ieee754_sqrt+0x158>
 8009f6e:	f1be 0f00 	cmp.w	lr, #0
 8009f72:	db3f      	blt.n	8009ff4 <__ieee754_sqrt+0x158>
 8009f74:	f104 0801 	add.w	r8, r4, #1
 8009f78:	1b12      	subs	r2, r2, r4
 8009f7a:	428f      	cmp	r7, r1
 8009f7c:	bf88      	it	hi
 8009f7e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009f82:	1bc9      	subs	r1, r1, r7
 8009f84:	4433      	add	r3, r6
 8009f86:	4644      	mov	r4, r8
 8009f88:	0052      	lsls	r2, r2, #1
 8009f8a:	f1bc 0c01 	subs.w	ip, ip, #1
 8009f8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009f92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009f96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009f9a:	d1dd      	bne.n	8009f58 <__ieee754_sqrt+0xbc>
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	d006      	beq.n	8009fae <__ieee754_sqrt+0x112>
 8009fa0:	1c5c      	adds	r4, r3, #1
 8009fa2:	bf13      	iteet	ne
 8009fa4:	3301      	addne	r3, #1
 8009fa6:	3501      	addeq	r5, #1
 8009fa8:	4663      	moveq	r3, ip
 8009faa:	f023 0301 	bicne.w	r3, r3, #1
 8009fae:	106a      	asrs	r2, r5, #1
 8009fb0:	085b      	lsrs	r3, r3, #1
 8009fb2:	07e9      	lsls	r1, r5, #31
 8009fb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009fb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009fbc:	bf48      	it	mi
 8009fbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009fc2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009fc6:	461c      	mov	r4, r3
 8009fc8:	e780      	b.n	8009ecc <__ieee754_sqrt+0x30>
 8009fca:	0aca      	lsrs	r2, r1, #11
 8009fcc:	3815      	subs	r0, #21
 8009fce:	0549      	lsls	r1, r1, #21
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	d0fa      	beq.n	8009fca <__ieee754_sqrt+0x12e>
 8009fd4:	02d6      	lsls	r6, r2, #11
 8009fd6:	d50a      	bpl.n	8009fee <__ieee754_sqrt+0x152>
 8009fd8:	f1c3 0420 	rsb	r4, r3, #32
 8009fdc:	fa21 f404 	lsr.w	r4, r1, r4
 8009fe0:	1e5d      	subs	r5, r3, #1
 8009fe2:	4099      	lsls	r1, r3
 8009fe4:	4322      	orrs	r2, r4
 8009fe6:	1b43      	subs	r3, r0, r5
 8009fe8:	e78b      	b.n	8009f02 <__ieee754_sqrt+0x66>
 8009fea:	4618      	mov	r0, r3
 8009fec:	e7f0      	b.n	8009fd0 <__ieee754_sqrt+0x134>
 8009fee:	0052      	lsls	r2, r2, #1
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	e7ef      	b.n	8009fd4 <__ieee754_sqrt+0x138>
 8009ff4:	46a0      	mov	r8, r4
 8009ff6:	e7bf      	b.n	8009f78 <__ieee754_sqrt+0xdc>
 8009ff8:	7ff00000 	.word	0x7ff00000

08009ffc <fabs>:
 8009ffc:	ec51 0b10 	vmov	r0, r1, d0
 800a000:	ee10 2a10 	vmov	r2, s0
 800a004:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a008:	ec43 2b10 	vmov	d0, r2, r3
 800a00c:	4770      	bx	lr

0800a00e <finite>:
 800a00e:	ee10 3a90 	vmov	r3, s1
 800a012:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a016:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a01a:	0fc0      	lsrs	r0, r0, #31
 800a01c:	4770      	bx	lr

0800a01e <matherr>:
 800a01e:	2000      	movs	r0, #0
 800a020:	4770      	bx	lr
 800a022:	0000      	movs	r0, r0
 800a024:	0000      	movs	r0, r0
	...

0800a028 <nan>:
 800a028:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a030 <nan+0x8>
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	00000000 	.word	0x00000000
 800a034:	7ff80000 	.word	0x7ff80000

0800a038 <rint>:
 800a038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03a:	ec51 0b10 	vmov	r0, r1, d0
 800a03e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a042:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a046:	2e13      	cmp	r6, #19
 800a048:	460b      	mov	r3, r1
 800a04a:	ee10 4a10 	vmov	r4, s0
 800a04e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a052:	dc56      	bgt.n	800a102 <rint+0xca>
 800a054:	2e00      	cmp	r6, #0
 800a056:	da2b      	bge.n	800a0b0 <rint+0x78>
 800a058:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a05c:	4302      	orrs	r2, r0
 800a05e:	d023      	beq.n	800a0a8 <rint+0x70>
 800a060:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a064:	4302      	orrs	r2, r0
 800a066:	4254      	negs	r4, r2
 800a068:	4314      	orrs	r4, r2
 800a06a:	0c4b      	lsrs	r3, r1, #17
 800a06c:	0b24      	lsrs	r4, r4, #12
 800a06e:	045b      	lsls	r3, r3, #17
 800a070:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a074:	ea44 0103 	orr.w	r1, r4, r3
 800a078:	460b      	mov	r3, r1
 800a07a:	492f      	ldr	r1, [pc, #188]	; (800a138 <rint+0x100>)
 800a07c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a080:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a084:	4602      	mov	r2, r0
 800a086:	4639      	mov	r1, r7
 800a088:	4630      	mov	r0, r6
 800a08a:	f7f6 f907 	bl	800029c <__adddf3>
 800a08e:	e9cd 0100 	strd	r0, r1, [sp]
 800a092:	463b      	mov	r3, r7
 800a094:	4632      	mov	r2, r6
 800a096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a09a:	f7f6 f8fd 	bl	8000298 <__aeabi_dsub>
 800a09e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	ec41 0b10 	vmov	d0, r0, r1
 800a0ac:	b003      	add	sp, #12
 800a0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0b0:	4a22      	ldr	r2, [pc, #136]	; (800a13c <rint+0x104>)
 800a0b2:	4132      	asrs	r2, r6
 800a0b4:	ea01 0702 	and.w	r7, r1, r2
 800a0b8:	4307      	orrs	r7, r0
 800a0ba:	d0f5      	beq.n	800a0a8 <rint+0x70>
 800a0bc:	0852      	lsrs	r2, r2, #1
 800a0be:	4011      	ands	r1, r2
 800a0c0:	430c      	orrs	r4, r1
 800a0c2:	d00b      	beq.n	800a0dc <rint+0xa4>
 800a0c4:	ea23 0202 	bic.w	r2, r3, r2
 800a0c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a0cc:	2e13      	cmp	r6, #19
 800a0ce:	fa43 f306 	asr.w	r3, r3, r6
 800a0d2:	bf0c      	ite	eq
 800a0d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a0d8:	2400      	movne	r4, #0
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	4916      	ldr	r1, [pc, #88]	; (800a138 <rint+0x100>)
 800a0de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7f6 f8d6 	bl	800029c <__adddf3>
 800a0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800a0f4:	4622      	mov	r2, r4
 800a0f6:	462b      	mov	r3, r5
 800a0f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0fc:	f7f6 f8cc 	bl	8000298 <__aeabi_dsub>
 800a100:	e7d2      	b.n	800a0a8 <rint+0x70>
 800a102:	2e33      	cmp	r6, #51	; 0x33
 800a104:	dd07      	ble.n	800a116 <rint+0xde>
 800a106:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a10a:	d1cd      	bne.n	800a0a8 <rint+0x70>
 800a10c:	ee10 2a10 	vmov	r2, s0
 800a110:	f7f6 f8c4 	bl	800029c <__adddf3>
 800a114:	e7c8      	b.n	800a0a8 <rint+0x70>
 800a116:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a11a:	f04f 32ff 	mov.w	r2, #4294967295
 800a11e:	40f2      	lsrs	r2, r6
 800a120:	4210      	tst	r0, r2
 800a122:	d0c1      	beq.n	800a0a8 <rint+0x70>
 800a124:	0852      	lsrs	r2, r2, #1
 800a126:	4210      	tst	r0, r2
 800a128:	bf1f      	itttt	ne
 800a12a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a12e:	ea20 0202 	bicne.w	r2, r0, r2
 800a132:	4134      	asrne	r4, r6
 800a134:	4314      	orrne	r4, r2
 800a136:	e7d1      	b.n	800a0dc <rint+0xa4>
 800a138:	0800a510 	.word	0x0800a510
 800a13c:	000fffff 	.word	0x000fffff

0800a140 <scalbn>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	ec55 4b10 	vmov	r4, r5, d0
 800a146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a14a:	4606      	mov	r6, r0
 800a14c:	462b      	mov	r3, r5
 800a14e:	b9aa      	cbnz	r2, 800a17c <scalbn+0x3c>
 800a150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a154:	4323      	orrs	r3, r4
 800a156:	d03b      	beq.n	800a1d0 <scalbn+0x90>
 800a158:	4b31      	ldr	r3, [pc, #196]	; (800a220 <scalbn+0xe0>)
 800a15a:	4629      	mov	r1, r5
 800a15c:	2200      	movs	r2, #0
 800a15e:	ee10 0a10 	vmov	r0, s0
 800a162:	f7f6 fa51 	bl	8000608 <__aeabi_dmul>
 800a166:	4b2f      	ldr	r3, [pc, #188]	; (800a224 <scalbn+0xe4>)
 800a168:	429e      	cmp	r6, r3
 800a16a:	4604      	mov	r4, r0
 800a16c:	460d      	mov	r5, r1
 800a16e:	da12      	bge.n	800a196 <scalbn+0x56>
 800a170:	a327      	add	r3, pc, #156	; (adr r3, 800a210 <scalbn+0xd0>)
 800a172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a176:	f7f6 fa47 	bl	8000608 <__aeabi_dmul>
 800a17a:	e009      	b.n	800a190 <scalbn+0x50>
 800a17c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a180:	428a      	cmp	r2, r1
 800a182:	d10c      	bne.n	800a19e <scalbn+0x5e>
 800a184:	ee10 2a10 	vmov	r2, s0
 800a188:	4620      	mov	r0, r4
 800a18a:	4629      	mov	r1, r5
 800a18c:	f7f6 f886 	bl	800029c <__adddf3>
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	e01c      	b.n	800a1d0 <scalbn+0x90>
 800a196:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a19a:	460b      	mov	r3, r1
 800a19c:	3a36      	subs	r2, #54	; 0x36
 800a19e:	4432      	add	r2, r6
 800a1a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1a4:	428a      	cmp	r2, r1
 800a1a6:	dd0b      	ble.n	800a1c0 <scalbn+0x80>
 800a1a8:	ec45 4b11 	vmov	d1, r4, r5
 800a1ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a218 <scalbn+0xd8>
 800a1b0:	f000 f83c 	bl	800a22c <copysign>
 800a1b4:	a318      	add	r3, pc, #96	; (adr r3, 800a218 <scalbn+0xd8>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	ec51 0b10 	vmov	r0, r1, d0
 800a1be:	e7da      	b.n	800a176 <scalbn+0x36>
 800a1c0:	2a00      	cmp	r2, #0
 800a1c2:	dd08      	ble.n	800a1d6 <scalbn+0x96>
 800a1c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1d0:	ec45 4b10 	vmov	d0, r4, r5
 800a1d4:	bd70      	pop	{r4, r5, r6, pc}
 800a1d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a1da:	da0d      	bge.n	800a1f8 <scalbn+0xb8>
 800a1dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a1e0:	429e      	cmp	r6, r3
 800a1e2:	ec45 4b11 	vmov	d1, r4, r5
 800a1e6:	dce1      	bgt.n	800a1ac <scalbn+0x6c>
 800a1e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a210 <scalbn+0xd0>
 800a1ec:	f000 f81e 	bl	800a22c <copysign>
 800a1f0:	a307      	add	r3, pc, #28	; (adr r3, 800a210 <scalbn+0xd0>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	e7e0      	b.n	800a1ba <scalbn+0x7a>
 800a1f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1fc:	3236      	adds	r2, #54	; 0x36
 800a1fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	2200      	movs	r2, #0
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <scalbn+0xe8>)
 800a20e:	e7b2      	b.n	800a176 <scalbn+0x36>
 800a210:	c2f8f359 	.word	0xc2f8f359
 800a214:	01a56e1f 	.word	0x01a56e1f
 800a218:	8800759c 	.word	0x8800759c
 800a21c:	7e37e43c 	.word	0x7e37e43c
 800a220:	43500000 	.word	0x43500000
 800a224:	ffff3cb0 	.word	0xffff3cb0
 800a228:	3c900000 	.word	0x3c900000

0800a22c <copysign>:
 800a22c:	ec51 0b10 	vmov	r0, r1, d0
 800a230:	ee11 0a90 	vmov	r0, s3
 800a234:	ee10 2a10 	vmov	r2, s0
 800a238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a23c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a240:	ea41 0300 	orr.w	r3, r1, r0
 800a244:	ec43 2b10 	vmov	d0, r2, r3
 800a248:	4770      	bx	lr
	...

0800a24c <_init>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr

0800a258 <_fini>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr

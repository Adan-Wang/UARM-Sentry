
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000856c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008720  08008720  00018720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008958  08008958  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008960  08008960  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042f0  20000078  080089e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004368  080089e0  00024368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217a2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000493d  00000000  00000000  0004184a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00046188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00047670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f46  00000000  00000000  00048960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001917c  00000000  00000000  000708a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3d51  00000000  00000000  00089a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe0  00000000  00000000  0016d7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008704 	.word	0x08008704

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008704 	.word	0x08008704

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  char *pdata; // data packet from computer
  char *yaw;
  int pos = 6; // yaw pos
 8000ec8:	2306      	movs	r3, #6
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  double vmax=30000;
 8000ecc:	a313      	add	r3, pc, #76	; (adr r3, 8000f1c <Gimbal_Task_Function+0x5c>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double max_angle=4096;
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <Gimbal_Task_Function+0x50>)
 8000edc:	e9c7 2306 	strd	r2, r3, [r7, #24]

  int32_t yaw_data = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  yaw = malloc (4);
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	f005 fcf3 	bl	80068d0 <malloc>
 8000eea:	4603      	mov	r3, r0
 8000eec:	613b      	str	r3, [r7, #16]
  pdata = malloc(7); // packet total size, referring to comm protocol
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f005 fcee 	bl	80068d0 <malloc>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <Gimbal_Task_Function+0x54>)
 8000efc:	f001 fdb8 	bl	8002a70 <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <Gimbal_Task_Function+0x58>)
 8000f02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f06:	801a      	strh	r2, [r3, #0]
/*
	uint16_t counter=0;*/

	//End of variables that doesn't work

  for(;;)
 8000f08:	e7fe      	b.n	8000f08 <Gimbal_Task_Function+0x48>
 8000f0a:	bf00      	nop
 8000f0c:	f3af 8000 	nop.w
 8000f10:	40b00000 	.word	0x40b00000
 8000f14:	2000418c 	.word	0x2000418c
 8000f18:	20004236 	.word	0x20004236
 8000f1c:	00000000 	.word	0x00000000
 8000f20:	40dd4c00 	.word	0x40dd4c00

08000f24 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000f2c:	f000 f818 	bl	8000f60 <shoot_init>
  double fric_wheel_speed_percent=50;
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <Shoot_Task_Func+0x34>)
 8000f36:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double mag_load_speed_percent=10;
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <Shoot_Task_Func+0x38>)
 8000f40:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000f44:	ed97 1b04 	vldr	d1, [r7, #16]
 8000f48:	ed97 0b02 	vldr	d0, [r7, #8]
 8000f4c:	f000 f834 	bl	8000fb8 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f004 fac0 	bl	80054d6 <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000f56:	e7f5      	b.n	8000f44 <Shoot_Task_Func+0x20>
 8000f58:	40490000 	.word	0x40490000
 8000f5c:	40240000 	.word	0x40240000

08000f60 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	4812      	ldr	r0, [pc, #72]	; (8000fb0 <shoot_init+0x50>)
 8000f68:	f002 ff9e 	bl	8003ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000f6c:	2108      	movs	r1, #8
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <shoot_init+0x50>)
 8000f70:	f002 ff9a 	bl	8003ea8 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <shoot_init+0x50>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f640 0298 	movw	r2, #2200	; 0x898
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <shoot_init+0x50>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f640 0298 	movw	r2, #2200	; 0x898
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8000f88:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f8c:	f004 faa3 	bl	80054d6 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <shoot_init+0x50>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <shoot_init+0x50>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000fa4:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000fa8:	f004 fa95 	bl	80054d6 <osDelay>

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20004044 	.word	0x20004044
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fc2:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <cmd_execute_shoot+0x50>)
 8000fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd0:	f7ff fc4c 	bl	800086c <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a308      	add	r3, pc, #32	; (adr r3, 8001000 <cmd_execute_shoot+0x48>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb19 	bl	8000618 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2304 	strd	r2, r3, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 8000fee:	ed97 0b04 	vldr	d0, [r7, #16]
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <cmd_execute_shoot+0x54>)
 8000ff4:	f000 fa1f 	bl	8001436 <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	00000000 	.word	0x00000000
 8001004:	40c38800 	.word	0x40c38800
 8001008:	40590000 	.word	0x40590000
 800100c:	200040d8 	.word	0x200040d8

08001010 <Timer_Task_Func>:
#include <math.h>
#include "Timer_App.h"

extern UART_HandleTypeDef huart7;

void Timer_Task_Func(void const * argument){
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b09a      	sub	sp, #104	; 0x68
 8001014:	af00      	add	r7, sp, #0
 8001016:	61f8      	str	r0, [r7, #28]

	uint32_t tick;

	char *pdata; // temp data packet buffer from computer
	char *yaw;
	yaw = malloc (4);
 8001018:	2004      	movs	r0, #4
 800101a:	f005 fc59 	bl	80068d0 <malloc>
 800101e:	4603      	mov	r3, r0
 8001020:	667b      	str	r3, [r7, #100]	; 0x64
	pdata = malloc(PACKLEN+1);
 8001022:	2011      	movs	r0, #17
 8001024:	f005 fc54 	bl	80068d0 <malloc>
 8001028:	4603      	mov	r3, r0
 800102a:	663b      	str	r3, [r7, #96]	; 0x60

	for (;;){
		// UART catcher

		 // Fix here: may add a switch or what to determine what data needed
		 int pos = 6; // yaw pos
 800102c:	2306      	movs	r3, #6
 800102e:	65fb      	str	r3, [r7, #92]	; 0x5c
		 // packet total size, referring to comm protocol

		 if (HAL_UART_Receive(&huart7, (char*)pdata, (PACKLEN+1), HAL_MAX_DELAY) == HAL_OK){
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	2211      	movs	r2, #17
 8001036:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001038:	4816      	ldr	r0, [pc, #88]	; (8001094 <Timer_Task_Func+0x84>)
 800103a:	f003 fd55 	bl	8004ae8 <HAL_UART_Receive>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11a      	bne.n	800107a <Timer_Task_Func+0x6a>
			  HAL_GPIO_TogglePin(GPIOG, LD_H_Pin);
 8001044:	2102      	movs	r1, #2
 8001046:	4814      	ldr	r0, [pc, #80]	; (8001098 <Timer_Task_Func+0x88>)
 8001048:	f002 fa0f 	bl	800346a <HAL_GPIO_TogglePin>
			  //comm_pack.yaw_data = parse_pack_indv(pdata, yaw, pos);
			  comm_pack = parse_pack_string(pdata);
 800104c:	4c13      	ldr	r4, [pc, #76]	; (800109c <Timer_Task_Func+0x8c>)
 800104e:	463b      	mov	r3, r7
 8001050:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f824 	bl	80010a0 <parse_pack_string>
 8001058:	4625      	mov	r5, r4
 800105a:	463c      	mov	r4, r7
 800105c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800105e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001064:	e885 0003 	stmia.w	r5, {r0, r1}
			  if (comm_pack.pack_cond == PACKCOR) //&& comm_pack.pitch_data == 5678 && comm_pack.fire_cmd == 0){
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <Timer_Task_Func+0x8c>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d104      	bne.n	800107a <Timer_Task_Func+0x6a>
			  		 HAL_GPIO_WritePin(GPIOG, LD_C_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <Timer_Task_Func+0x88>)
 8001076:	f002 f9df 	bl	8003438 <HAL_GPIO_WritePin>
		 }
		 if (comm_pack.yaw_data == 1234) //&& comm_pack.pitch_data == 5678 && comm_pack.fire_cmd == 0){
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <Timer_Task_Func+0x8c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001082:	4293      	cmp	r3, r2
 8001084:	d1d2      	bne.n	800102c <Timer_Task_Func+0x1c>
			 HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <Timer_Task_Func+0x88>)
 800108c:	f002 f9d4 	bl	8003438 <HAL_GPIO_WritePin>
	for (;;){
 8001090:	e7cc      	b.n	800102c <Timer_Task_Func+0x1c>
 8001092:	bf00      	nop
 8001094:	20004314 	.word	0x20004314
 8001098:	40021800 	.word	0x40021800
 800109c:	20004238 	.word	0x20004238

080010a0 <parse_pack_string>:
 *
 * @ Return:
 * @ Author: Wei, Shitang, Haoran, Created on: Feb, 2022
 */
comm_rx_info parse_pack_string(char* pack)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	comm_rx_info Sentry_Pack;
    Sentry_Pack.yaw_data = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
    Sentry_Pack.pitch_data = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
    Sentry_Pack.dist_data = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
    Sentry_Pack.fire_cmd = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    Sentry_Pack.target_num = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]

    int position = 6;
 80010be:	2306      	movs	r3, #6
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned char data;
    int power;

    if (strlen(pack) == PACKLEN)
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f7ff f894 	bl	80001f0 <strlen>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	f040 814b 	bne.w	8001366 <parse_pack_string+0x2c6>
    {
        if (pack[0] == 0x41)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b41      	cmp	r3, #65	; 0x41
 80010d6:	f040 813e 	bne.w	8001356 <parse_pack_string+0x2b6>
        {
            for (int i = 2; i< PACKLEN-1; i++)
 80010da:	2302      	movs	r3, #2
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010de:	e019      	b.n	8001114 <parse_pack_string+0x74>
            {
                if(pack[i]>='0' && pack[i] <= '9')
 80010e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b2f      	cmp	r3, #47	; 0x2f
 80010ea:	d90b      	bls.n	8001104 <parse_pack_string+0x64>
 80010ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b39      	cmp	r3, #57	; 0x39
 80010f6:	d805      	bhi.n	8001104 <parse_pack_string+0x64>
                {
                    Sentry_Pack.pack_cond = PACKCOR;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
            for (int i = 2; i< PACKLEN-1; i++)
 80010fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010fe:	3301      	adds	r3, #1
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001102:	e007      	b.n	8001114 <parse_pack_string+0x74>
                }
                else
                {
                    Sentry_Pack.pack_cond = PACKERR;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
                    HAL_GPIO_WritePin(GPIOG, LD_D_Pin, RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	48a2      	ldr	r0, [pc, #648]	; (8001398 <parse_pack_string+0x2f8>)
 800110e:	f002 f993 	bl	8003438 <HAL_GPIO_WritePin>
                    break;
 8001112:	e002      	b.n	800111a <parse_pack_string+0x7a>
            for (int i = 2; i< PACKLEN-1; i++)
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001116:	2b0e      	cmp	r3, #14
 8001118:	dde2      	ble.n	80010e0 <parse_pack_string+0x40>
                }
            }
                if(pack[PACKLEN-1]=='0' || pack[PACKLEN-1] == '1') {
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	330f      	adds	r3, #15
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b30      	cmp	r3, #48	; 0x30
 8001122:	d004      	beq.n	800112e <parse_pack_string+0x8e>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	330f      	adds	r3, #15
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b31      	cmp	r3, #49	; 0x31
 800112c:	d102      	bne.n	8001134 <parse_pack_string+0x94>
                    Sentry_Pack.pack_cond = PACKCOR;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
 8001132:	e006      	b.n	8001142 <parse_pack_string+0xa2>
                }
                else
                {
                    Sentry_Pack.pack_cond = PACKERR;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
                    HAL_GPIO_WritePin(GPIOG, LD_E_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2110      	movs	r1, #16
 800113c:	4896      	ldr	r0, [pc, #600]	; (8001398 <parse_pack_string+0x2f8>)
 800113e:	f002 f97b 	bl	8003438 <HAL_GPIO_WritePin>
                }
            if(Sentry_Pack.pack_cond == PACKCOR)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b00      	cmp	r3, #0
 8001146:	f040 8115 	bne.w	8001374 <parse_pack_string+0x2d4>
            {
                for(int i=0;i<DATALEN;i++)
 800114a:	2300      	movs	r3, #0
 800114c:	63bb      	str	r3, [r7, #56]	; 0x38
 800114e:	e05a      	b.n	8001206 <parse_pack_string+0x166>
                {
                    data = pack[position-i-1] - '0';
 8001150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	3b01      	subs	r3, #1
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3b30      	subs	r3, #48	; 0x30
 8001160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    power = ((int)data)*(pow(10,i));
 8001164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9eb 	bl	8000544 <__aeabi_i2d>
 800116e:	4604      	mov	r4, r0
 8001170:	460d      	mov	r5, r1
 8001172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001174:	f7ff f9e6 	bl	8000544 <__aeabi_i2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	ec43 2b11 	vmov	d1, r2, r3
 8001180:	ed9f 0b83 	vldr	d0, [pc, #524]	; 8001390 <parse_pack_string+0x2f0>
 8001184:	f006 fb0a 	bl	800779c <pow>
 8001188:	ec53 2b10 	vmov	r2, r3, d0
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	f7ff fa42 	bl	8000618 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fcec 	bl	8000b78 <__aeabi_d2iz>
 80011a0:	4603      	mov	r3, r0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
                    Sentry_Pack.yaw_data += ((int)data)*(pow(10,i));
 80011a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9cb 	bl	8000544 <__aeabi_i2d>
 80011ae:	4604      	mov	r4, r0
 80011b0:	460d      	mov	r5, r1
 80011b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80011b4:	f7ff f9c6 	bl	8000544 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	ec43 2b11 	vmov	d1, r2, r3
 80011c0:	ed9f 0b73 	vldr	d0, [pc, #460]	; 8001390 <parse_pack_string+0x2f0>
 80011c4:	f006 faea 	bl	800779c <pow>
 80011c8:	ec53 2b10 	vmov	r2, r3, d0
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	f7ff fa22 	bl	8000618 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4614      	mov	r4, r2
 80011da:	461d      	mov	r5, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9b0 	bl	8000544 <__aeabi_i2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f85e 	bl	80002ac <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcbe 	bl	8000b78 <__aeabi_d2iz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	60fb      	str	r3, [r7, #12]
                for(int i=0;i<DATALEN;i++)
 8001200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001202:	3301      	adds	r3, #1
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
 8001206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001208:	2b03      	cmp	r3, #3
 800120a:	dda1      	ble.n	8001150 <parse_pack_string+0xb0>
                }
                position = position + DATALEN;
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	3304      	adds	r3, #4
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c

                for(int i=0;i<DATALEN;i++)
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
 8001216:	e03a      	b.n	800128e <parse_pack_string+0x1ee>
                {
                    data = pack[position-i-1] - '0';
 8001218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800121a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	3b01      	subs	r3, #1
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3b30      	subs	r3, #48	; 0x30
 8001228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    Sentry_Pack.pitch_data += ((int)data)*(pow(10,i));
 800122c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f987 	bl	8000544 <__aeabi_i2d>
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800123c:	f7ff f982 	bl	8000544 <__aeabi_i2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ec43 2b11 	vmov	d1, r2, r3
 8001248:	ed9f 0b51 	vldr	d0, [pc, #324]	; 8001390 <parse_pack_string+0x2f0>
 800124c:	f006 faa6 	bl	800779c <pow>
 8001250:	ec53 2b10 	vmov	r2, r3, d0
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9de 	bl	8000618 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96c 	bl	8000544 <__aeabi_i2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f81a 	bl	80002ac <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc7a 	bl	8000b78 <__aeabi_d2iz>
 8001284:	4603      	mov	r3, r0
 8001286:	613b      	str	r3, [r7, #16]
                for(int i=0;i<DATALEN;i++)
 8001288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128a:	3301      	adds	r3, #1
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
 800128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001290:	2b03      	cmp	r3, #3
 8001292:	ddc1      	ble.n	8001218 <parse_pack_string+0x178>
                }
                position = position + DATALEN;
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	3304      	adds	r3, #4
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c

                for(int i=0;i<DATALEN;i++)
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	; 0x30
 800129e:	e03a      	b.n	8001316 <parse_pack_string+0x276>
                {
                    data = pack[position-i-1] - '0';
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	3b01      	subs	r3, #1
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3b30      	subs	r3, #48	; 0x30
 80012b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    Sentry_Pack.dist_data += ((int)data)*(pow(10,i));
 80012b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f943 	bl	8000544 <__aeabi_i2d>
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012c4:	f7ff f93e 	bl	8000544 <__aeabi_i2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	ec43 2b11 	vmov	d1, r2, r3
 80012d0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001390 <parse_pack_string+0x2f0>
 80012d4:	f006 fa62 	bl	800779c <pow>
 80012d8:	ec53 2b10 	vmov	r2, r3, d0
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7ff f99a 	bl	8000618 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f928 	bl	8000544 <__aeabi_i2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffd6 	bl	80002ac <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc36 	bl	8000b78 <__aeabi_d2iz>
 800130c:	4603      	mov	r3, r0
 800130e:	617b      	str	r3, [r7, #20]
                for(int i=0;i<DATALEN;i++)
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	3301      	adds	r3, #1
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	2b03      	cmp	r3, #3
 800131a:	ddc1      	ble.n	80012a0 <parse_pack_string+0x200>
                }
                position = position + STATELEN;
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	3301      	adds	r3, #1
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c

                data = pack[position - 1] - '0';
 8001322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001324:	3b01      	subs	r3, #1
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3b30      	subs	r3, #48	; 0x30
 800132e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                Sentry_Pack.target_num = ((int) data);
 8001332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001336:	61bb      	str	r3, [r7, #24]

                position = position + STATELEN;
 8001338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133a:	3301      	adds	r3, #1
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c

                data = pack[position - 1] - '0';
 800133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001340:	3b01      	subs	r3, #1
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3b30      	subs	r3, #48	; 0x30
 800134a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                Sentry_Pack.fire_cmd = ((int) data);
 800134e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	e00e      	b.n	8001374 <parse_pack_string+0x2d4>
            }
        }
        else
        {
            Sentry_Pack.pack_cond = PACKERR;
 8001356:	2301      	movs	r3, #1
 8001358:	623b      	str	r3, [r7, #32]
            HAL_GPIO_WritePin(GPIOG, LD_F_Pin, RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2108      	movs	r1, #8
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <parse_pack_string+0x2f8>)
 8001360:	f002 f86a 	bl	8003438 <HAL_GPIO_WritePin>
 8001364:	e006      	b.n	8001374 <parse_pack_string+0x2d4>
        }
    }
    else
    {
        Sentry_Pack.pack_cond = PACKERR;
 8001366:	2301      	movs	r3, #1
 8001368:	623b      	str	r3, [r7, #32]
        HAL_GPIO_WritePin(GPIOG, LD_G_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2104      	movs	r1, #4
 800136e:	480a      	ldr	r0, [pc, #40]	; (8001398 <parse_pack_string+0x2f8>)
 8001370:	f002 f862 	bl	8003438 <HAL_GPIO_WritePin>
    }
    return Sentry_Pack;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	461d      	mov	r5, r3
 8001378:	f107 040c 	add.w	r4, r7, #12
 800137c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001384:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	3740      	adds	r7, #64	; 0x40
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	00000000 	.word	0x00000000
 8001394:	40240000 	.word	0x40240000
 8001398:	40021800 	.word	0x40021800

0800139c <get_Motor_buffer>:
}

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f811 	bl	80013d0 <Motor_Data_Replacement>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f804 	bl	80013d0 <Motor_Data_Replacement>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	60da      	str	r2, [r3, #12]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 8001436:	b580      	push	{r7, lr}
 8001438:	b08c      	sub	sp, #48	; 0x30
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff ffa7 	bl	800139c <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 800144e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001452:	f7ff fb91 	bl	8000b78 <__aeabi_d2iz>
 8001456:	4603      	mov	r3, r0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	68f9      	ldr	r1, [r7, #12]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffa8 	bl	80013b6 <set_Motor_buffer>
}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	; 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001474:	2100      	movs	r1, #0
 8001476:	4802      	ldr	r0, [pc, #8]	; (8001480 <buzzer_init+0x10>)
 8001478:	f002 fd16 	bl	8003ea8 <HAL_TIM_PWM_Start>

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200041f4 	.word	0x200041f4

08001484 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_CAN1_Init+0x64>)
 800148a:	4a18      	ldr	r2, [pc, #96]	; (80014ec <MX_CAN1_Init+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_CAN1_Init+0x64>)
 8001490:	2203      	movs	r2, #3
 8001492:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_CAN1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_CAN1_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014a2:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80014a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014be:	2201      	movs	r2, #1
 80014c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_CAN1_Init+0x64>)
 80014d6:	f000 ff99 	bl	800240c <HAL_CAN_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014e0:	f000 fb20 	bl	8001b24 <Error_Handler>
  }

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000418c 	.word	0x2000418c
 80014ec:	40006400 	.word	0x40006400

080014f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <HAL_CAN_MspInit+0xa4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d13b      	bne.n	800158a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <HAL_CAN_MspInit+0xa8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <HAL_CAN_MspInit+0xa8>)
 800151c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_CAN_MspInit+0xa8>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b19      	ldr	r3, [pc, #100]	; (8001598 <HAL_CAN_MspInit+0xa8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a18      	ldr	r2, [pc, #96]	; (8001598 <HAL_CAN_MspInit+0xa8>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_CAN_MspInit+0xa8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800154a:	2303      	movs	r3, #3
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800155a:	2309      	movs	r3, #9
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	480d      	ldr	r0, [pc, #52]	; (800159c <HAL_CAN_MspInit+0xac>)
 8001566:	f001 fdbb 	bl	80030e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2105      	movs	r1, #5
 800156e:	2013      	movs	r0, #19
 8001570:	f001 fd8c 	bl	800308c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001574:	2013      	movs	r0, #19
 8001576:	f001 fda5 	bl	80030c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	2014      	movs	r0, #20
 8001580:	f001 fd84 	bl	800308c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001584:	2014      	movs	r0, #20
 8001586:	f001 fd9d 	bl	80030c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40006400 	.word	0x40006400
 8001598:	40023800 	.word	0x40023800
 800159c:	40020c00 	.word	0x40020c00

080015a0 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 80015c8:	231b      	movs	r3, #27
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f001 f814 	bl	8002604 <HAL_CAN_ConfigFilter>
}
 80015dc:	bf00      	nop
 80015de:	3730      	adds	r7, #48	; 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	; 0x30
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 800160c:	231b      	movs	r3, #27
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fff2 	bl	8002604 <HAL_CAN_ConfigFilter>
}
 8001620:	bf00      	nop
 8001622:	3730      	adds	r7, #48	; 0x30
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001638:	0d5b      	lsrs	r3, r3, #21
 800163a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163e:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	3b01      	subs	r3, #1
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 800164a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001652:	4413      	add	r3, r2
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	2100      	movs	r1, #0
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 f8f6 	bl	800284c <HAL_CAN_GetRxMessage>
}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200041b4 	.word	0x200041b4

0800166c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <vApplicationGetIdleTaskMemory+0x2c>)
 800167c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <vApplicationGetIdleTaskMemory+0x30>)
 8001682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000094 	.word	0x20000094
 800169c:	200000e8 	.word	0x200000e8

080016a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b0a0      	sub	sp, #128	; 0x80
 80016a4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <MX_FREERTOS_Init+0x98>)
 80016a8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016ac:	461d      	mov	r5, r3
 80016ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 febc 	bl	800543e <osThreadCreate>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_FREERTOS_Init+0x9c>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	//osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
    //ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_FREERTOS_Init+0xa0>)
 80016ce:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 80016e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fea9 	bl	800543e <osThreadCreate>
 80016ec:	67f8      	str	r0, [r7, #124]	; 0x7c

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_FREERTOS_Init+0xa4>)
 80016f0:	f107 0420 	add.w	r4, r7, #32
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f003 fe98 	bl	800543e <osThreadCreate>
 800170e:	67b8      	str	r0, [r7, #120]	; 0x78

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <MX_FREERTOS_Init+0xa8>)
 8001712:	1d3c      	adds	r4, r7, #4
 8001714:	461d      	mov	r5, r3
 8001716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800171e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fe89 	bl	800543e <osThreadCreate>
 800172c:	6778      	str	r0, [r7, #116]	; 0x74
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800172e:	bf00      	nop
 8001730:	3780      	adds	r7, #128	; 0x80
 8001732:	46bd      	mov	sp, r7
 8001734:	bdb0      	pop	{r4, r5, r7, pc}
 8001736:	bf00      	nop
 8001738:	08008750 	.word	0x08008750
 800173c:	20004250 	.word	0x20004250
 8001740:	0800876c 	.word	0x0800876c
 8001744:	08008788 	.word	0x08008788
 8001748:	080087a4 	.word	0x080087a4

0800174c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001754:	2001      	movs	r0, #1
 8001756:	f003 febe 	bl	80054d6 <osDelay>
 800175a:	e7fb      	b.n	8001754 <StartDefaultTask+0x8>

0800175c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
 8001776:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a69      	ldr	r2, [pc, #420]	; (8001920 <MX_GPIO_Init+0x1c4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
 800178c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a62      	ldr	r2, [pc, #392]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b60      	ldr	r3, [pc, #384]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b5c      	ldr	r3, [pc, #368]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a5b      	ldr	r2, [pc, #364]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b59      	ldr	r3, [pc, #356]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b55      	ldr	r3, [pc, #340]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a54      	ldr	r2, [pc, #336]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b52      	ldr	r3, [pc, #328]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	4b4e      	ldr	r3, [pc, #312]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <MX_GPIO_Init+0x1c4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a3f      	ldr	r2, [pc, #252]	; (8001920 <MX_GPIO_Init+0x1c4>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b3d      	ldr	r3, [pc, #244]	; (8001920 <MX_GPIO_Init+0x1c4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800183c:	4839      	ldr	r0, [pc, #228]	; (8001924 <MX_GPIO_Init+0x1c8>)
 800183e:	f001 fdfb 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	211e      	movs	r1, #30
 8001846:	4837      	ldr	r0, [pc, #220]	; (8001924 <MX_GPIO_Init+0x1c8>)
 8001848:	f001 fdf6 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001852:	4835      	ldr	r0, [pc, #212]	; (8001928 <MX_GPIO_Init+0x1cc>)
 8001854:	f001 fdf0 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185e:	4833      	ldr	r0, [pc, #204]	; (800192c <MX_GPIO_Init+0x1d0>)
 8001860:	f001 fdea 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 8001864:	2320      	movs	r3, #32
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186c:	2301      	movs	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	482c      	ldr	r0, [pc, #176]	; (8001928 <MX_GPIO_Init+0x1cc>)
 8001878:	f001 fc32 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 800187c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001880:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	4619      	mov	r1, r3
 8001894:	4823      	ldr	r0, [pc, #140]	; (8001924 <MX_GPIO_Init+0x1c8>)
 8001896:	f001 fc23 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 800189a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481f      	ldr	r0, [pc, #124]	; (800192c <MX_GPIO_Init+0x1d0>)
 80018b0:	f001 fc16 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80018b4:	2304      	movs	r3, #4
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_GPIO_Init+0x1d4>)
 80018ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	481b      	ldr	r0, [pc, #108]	; (8001934 <MX_GPIO_Init+0x1d8>)
 80018c8:	f001 fc0a 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 80018cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4810      	ldr	r0, [pc, #64]	; (8001928 <MX_GPIO_Init+0x1cc>)
 80018e6:	f001 fbfb 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80018ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	480a      	ldr	r0, [pc, #40]	; (800192c <MX_GPIO_Init+0x1d0>)
 8001904:	f001 fbec 	bl	80030e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2105      	movs	r1, #5
 800190c:	2008      	movs	r0, #8
 800190e:	f001 fbbd 	bl	800308c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001912:	2008      	movs	r0, #8
 8001914:	f001 fbd6 	bl	80030c4 <HAL_NVIC_EnableIRQ>

}
 8001918:	bf00      	nop
 800191a:	3730      	adds	r7, #48	; 0x30
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	40021800 	.word	0x40021800
 8001928:	40021000 	.word	0x40021000
 800192c:	40021400 	.word	0x40021400
 8001930:	10110000 	.word	0x10110000
 8001934:	40020400 	.word	0x40020400

08001938 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d12b      	bne.n	80019a0 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8001948:	4817      	ldr	r0, [pc, #92]	; (80019a8 <HAL_GPIO_EXTI_Callback+0x70>)
 800194a:	f7ff fe29 	bl	80015a0 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_GPIO_EXTI_Callback+0x74>)
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	6810      	ldr	r0, [r2, #0]
 8001956:	6851      	ldr	r1, [r2, #4]
 8001958:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800195a:	7a3b      	ldrb	r3, [r7, #8]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	7a7b      	ldrb	r3, [r7, #9]
 8001962:	b21b      	sxth	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001968:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800196a:	7abb      	ldrb	r3, [r7, #10]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21a      	sxth	r2, r3
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001978:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	7b7b      	ldrb	r3, [r7, #13]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b21b      	sxth	r3, r3
 8001988:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 800198a:	9201      	str	r2, [sp, #4]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	2101      	movs	r1, #1
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001996:	f005 f855 	bl	8006a44 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 800199a:	4803      	ldr	r0, [pc, #12]	; (80019a8 <HAL_GPIO_EXTI_Callback+0x70>)
 800199c:	f7ff fe22 	bl	80015e4 <can_filter_disable>


	}
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000418c 	.word	0x2000418c
 80019ac:	200041b4 	.word	0x200041b4
 80019b0:	080087c0 	.word	0x080087c0

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b8:	f000 fce6 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019bc:	f000 f820 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c0:	f7ff fecc 	bl	800175c <MX_GPIO_Init>
  MX_CAN1_Init();
 80019c4:	f7ff fd5e 	bl	8001484 <MX_CAN1_Init>
  MX_TIM4_Init();
 80019c8:	f000 fa42 	bl	8001e50 <MX_TIM4_Init>
  MX_TIM12_Init();
 80019cc:	f000 faa6 	bl	8001f1c <MX_TIM12_Init>
  MX_UART7_Init();
 80019d0:	f000 fc3e 	bl	8002250 <MX_UART7_Init>
  MX_TIM14_Init();
 80019d4:	f000 fb0c 	bl	8001ff0 <MX_TIM14_Init>
  MX_TIM13_Init();
 80019d8:	f000 fae6 	bl	8001fa8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80019dc:	f7ff fd48 	bl	8001470 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <main+0x44>)
 80019e2:	f000 feef 	bl	80027c4 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <main+0x48>)
 80019e8:	f002 fa0f 	bl	8003e0a <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80019ec:	f7ff fe58 	bl	80016a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80019f0:	f003 fd1e 	bl	8005430 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x40>
 80019f6:	bf00      	nop
 80019f8:	2000418c 	.word	0x2000418c
 80019fc:	20004294 	.word	0x20004294

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2230      	movs	r2, #48	; 0x30
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 ff66 	bl	80068e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <SystemClock_Config+0xd0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a28      	ldr	r2, [pc, #160]	; (8001ad0 <SystemClock_Config+0xd0>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <SystemClock_Config+0xd0>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <SystemClock_Config+0xd4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <SystemClock_Config+0xd4>)
 8001a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <SystemClock_Config+0xd4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001a74:	2306      	movs	r3, #6
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a78:	23a8      	movs	r3, #168	; 0xa8
 8001a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a80:	2304      	movs	r3, #4
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	f107 0320 	add.w	r3, r7, #32
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fd21 	bl	80034d0 <HAL_RCC_OscConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a94:	f000 f846 	bl	8001b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a98:	230f      	movs	r3, #15
 8001a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f001 ff7a 	bl	80039b0 <HAL_RCC_ClockConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ac2:	f000 f82f 	bl	8001b24 <Error_Handler>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3750      	adds	r7, #80	; 0x50
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d109      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001af2:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8001af4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af8:	4808      	ldr	r0, [pc, #32]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001afa:	f001 fcb6 	bl	800346a <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8001b08:	f000 fc60 	bl	80023cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40001c00 	.word	0x40001c00
 8001b18:	200002e8 	.word	0x200002e8
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40000c00 	.word	0x40000c00

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_MspInit+0x54>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_MspInit+0x54>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_MspInit+0x54>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_MspInit+0x54>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_MspInit+0x54>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_MspInit+0x54>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	f06f 0001 	mvn.w	r0, #1
 8001b76:	f001 fa89 	bl	800308c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	; 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	2032      	movs	r0, #50	; 0x32
 8001b9e:	f001 fa75 	bl	800308c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ba2:	2032      	movs	r0, #50	; 0x32
 8001ba4:	f001 fa8e 	bl	80030c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_InitTick+0xa4>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_InitTick+0xa4>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_InitTick+0xa4>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc4:	f107 0210 	add.w	r2, r7, #16
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 f8be 	bl	8003d50 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bd4:	f002 f894 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_InitTick+0xa8>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	3b01      	subs	r3, #1
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_InitTick+0xac>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_InitTick+0xb0>)
 8001bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_InitTick+0xac>)
 8001bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_InitTick+0xac>)
 8001bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfe:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_InitTick+0xac>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_InitTick+0xac>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001c0c:	4809      	ldr	r0, [pc, #36]	; (8001c34 <HAL_InitTick+0xac>)
 8001c0e:	f002 f8d1 	bl	8003db4 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d104      	bne.n	8001c22 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001c18:	4806      	ldr	r0, [pc, #24]	; (8001c34 <HAL_InitTick+0xac>)
 8001c1a:	f002 f8f6 	bl	8003e0a <HAL_TIM_Base_Start_IT>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	431bde83 	.word	0x431bde83
 8001c34:	20004254 	.word	0x20004254
 8001c38:	40000c00 	.word	0x40000c00

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	f001 fc17 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <CAN1_TX_IRQHandler+0x10>)
 8001c7e:	f000 ff1d 	bl	8002abc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000418c 	.word	0x2000418c

08001c8c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <CAN1_RX0_IRQHandler+0x10>)
 8001c92:	f000 ff13 	bl	8002abc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000418c 	.word	0x2000418c

08001ca0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001ca6:	f002 f93d 	bl	8003f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20004294 	.word	0x20004294

08001cb4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cba:	f002 f933 	bl	8003f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200042d4 	.word	0x200042d4

08001cc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM5_IRQHandler+0x10>)
 8001cce:	f002 f929 	bl	8003f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20004254 	.word	0x20004254

08001cdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e00a      	b.n	8001d04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cee:	f3af 8000 	nop.w
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	60ba      	str	r2, [r7, #8]
 8001cfa:	b2ca      	uxtb	r2, r1
 8001cfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	dbf0      	blt.n	8001cee <_read+0x12>
	}

return len;
 8001d0c:	687b      	ldr	r3, [r7, #4]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e009      	b.n	8001d3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fa7b 	bl	800222c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	dbf1      	blt.n	8001d28 <_write+0x12>
	}
	return len;
 8001d44:	687b      	ldr	r3, [r7, #4]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_close>:

int _close(int file)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
	return -1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d76:	605a      	str	r2, [r3, #4]
	return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_isatty>:

int _isatty(int file)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
	return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <_sbrk+0x5c>)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <_sbrk+0x60>)
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <_sbrk+0x64>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <_sbrk+0x68>)
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d207      	bcs.n	8001df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de8:	f004 fd48 	bl	800687c <__errno>
 8001dec:	4603      	mov	r3, r0
 8001dee:	220c      	movs	r2, #12
 8001df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e009      	b.n	8001e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <_sbrk+0x64>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <_sbrk+0x64>)
 8001e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20030000 	.word	0x20030000
 8001e18:	00000400 	.word	0x00000400
 8001e1c:	200002ec 	.word	0x200002ec
 8001e20:	20004368 	.word	0x20004368

08001e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <SystemInit+0x28>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <SystemInit+0x28>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SystemInit+0x28>)
 8001e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	615a      	str	r2, [r3, #20]
 8001e70:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <MX_TIM4_Init+0xc8>)
 8001e76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001e78:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e7a:	2253      	movs	r2, #83	; 0x53
 8001e7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e98:	481e      	ldr	r0, [pc, #120]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001e9a:	f001 ffda 	bl	8003e52 <HAL_TIM_PWM_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ea4:	f7ff fe3e 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4817      	ldr	r0, [pc, #92]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001eb8:	f002 fca0 	bl	80047fc <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ec2:	f7ff fe2f 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec6:	2360      	movs	r3, #96	; 0x60
 8001ec8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001ee0:	f002 f928 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001eea:	f7ff fe1b 	bl	8001b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001ef6:	f002 f91d 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001f00:	f7ff fe10 	bl	8001b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <MX_TIM4_Init+0xc4>)
 8001f06:	f000 f92f 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20004044 	.word	0x20004044
 8001f18:	40000800 	.word	0x40000800

08001f1c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f36:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <MX_TIM12_Init+0x88>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f3c:	2223      	movs	r2, #35	; 0x23
 8001f3e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f48:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f4c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f5a:	4811      	ldr	r0, [pc, #68]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f5c:	f001 ff79 	bl	8003e52 <HAL_TIM_PWM_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001f66:	f7ff fddd 	bl	8001b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6a:	2360      	movs	r3, #96	; 0x60
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f82:	f002 f8d7 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001f8c:	f7ff fdca 	bl	8001b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <MX_TIM12_Init+0x84>)
 8001f92:	f000 f8e9 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200041f4 	.word	0x200041f4
 8001fa4:	40001800 	.word	0x40001800

08001fa8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fae:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <MX_TIM13_Init+0x44>)
 8001fb0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fb4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001fb8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fc6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001fd4:	4804      	ldr	r0, [pc, #16]	; (8001fe8 <MX_TIM13_Init+0x40>)
 8001fd6:	f001 feed 	bl	8003db4 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001fe0:	f7ff fda0 	bl	8001b24 <Error_Handler>
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20004294 	.word	0x20004294
 8001fec:	40001c00 	.word	0x40001c00

08001ff0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <MX_TIM14_Init+0x40>)
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <MX_TIM14_Init+0x44>)
 8001ff8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <MX_TIM14_Init+0x40>)
 8001ffc:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002000:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <MX_TIM14_Init+0x40>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <MX_TIM14_Init+0x40>)
 800200a:	f242 720f 	movw	r2, #9999	; 0x270f
 800200e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <MX_TIM14_Init+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <MX_TIM14_Init+0x40>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_TIM14_Init+0x40>)
 800201e:	f001 fec9 	bl	8003db4 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002028:	f7ff fd7c 	bl	8001b24 <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200042d4 	.word	0x200042d4
 8002034:	40002000 	.word	0x40002000

08002038 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_TIM_PWM_MspInit+0x64>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_TIM_PWM_MspInit+0x68>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_TIM_PWM_MspInit+0x68>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_TIM_PWM_MspInit+0x68>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002066:	e012      	b.n	800208e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_TIM_PWM_MspInit+0x6c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10d      	bne.n	800208e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_TIM_PWM_MspInit+0x68>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_TIM_PWM_MspInit+0x68>)
 800207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_TIM_PWM_MspInit+0x68>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40000800 	.word	0x40000800
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40001800 	.word	0x40001800

080020a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a29      	ldr	r2, [pc, #164]	; (800215c <HAL_TIM_Base_MspInit+0xb4>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d116      	bne.n	80020e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b28      	ldr	r3, [pc, #160]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2105      	movs	r1, #5
 80020da:	202c      	movs	r0, #44	; 0x2c
 80020dc:	f000 ffd6 	bl	800308c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020e0:	202c      	movs	r0, #44	; 0x2c
 80020e2:	f000 ffef 	bl	80030c4 <HAL_NVIC_EnableIRQ>
 80020e6:	e01a      	b.n	800211e <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_TIM_Base_MspInit+0xbc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d115      	bne.n	800211e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2105      	movs	r1, #5
 8002112:	202d      	movs	r0, #45	; 0x2d
 8002114:	f000 ffba 	bl	800308c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002118:	202d      	movs	r0, #45	; 0x2d
 800211a:	f000 ffd3 	bl	80030c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_TIM_Base_MspInit+0xb4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d115      	bne.n	8002154 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 8002132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_TIM_Base_MspInit+0xb8>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2101      	movs	r1, #1
 8002148:	202c      	movs	r0, #44	; 0x2c
 800214a:	f000 ff9f 	bl	800308c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800214e:	202c      	movs	r0, #44	; 0x2c
 8002150:	f000 ffb8 	bl	80030c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40001c00 	.word	0x40001c00
 8002160:	40023800 	.word	0x40023800
 8002164:	40002000 	.word	0x40002000

08002168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a24      	ldr	r2, [pc, #144]	; (8002218 <HAL_TIM_MspPostInit+0xb0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11f      	bne.n	80021ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_TIM_MspPostInit+0xb4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_TIM_MspPostInit+0xb4>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_TIM_MspPostInit+0xb4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80021a6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80021aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b8:	2302      	movs	r3, #2
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	4619      	mov	r1, r3
 80021c2:	4817      	ldr	r0, [pc, #92]	; (8002220 <HAL_TIM_MspPostInit+0xb8>)
 80021c4:	f000 ff8c 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021c8:	e022      	b.n	8002210 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_TIM_MspPostInit+0xbc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d11d      	bne.n	8002210 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_TIM_MspPostInit+0xb4>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4a0f      	ldr	r2, [pc, #60]	; (800221c <HAL_TIM_MspPostInit+0xb4>)
 80021de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e2:	6313      	str	r3, [r2, #48]	; 0x30
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_TIM_MspPostInit+0xb4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021f0:	2340      	movs	r3, #64	; 0x40
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002200:	2309      	movs	r3, #9
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <HAL_TIM_MspPostInit+0xc0>)
 800220c:	f000 ff68 	bl	80030e0 <HAL_GPIO_Init>
}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40000800 	.word	0x40000800
 800221c:	40023800 	.word	0x40023800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40001800 	.word	0x40001800
 8002228:	40021c00 	.word	0x40021c00

0800222c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002234:	1d39      	adds	r1, r7, #4
 8002236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223a:	2201      	movs	r2, #1
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <__io_putchar+0x20>)
 800223e:	f002 fbba 	bl	80049b6 <HAL_UART_Transmit>

  return ch;
 8002242:	687b      	ldr	r3, [r7, #4]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20004314 	.word	0x20004314

08002250 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_UART7_Init+0x4c>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <MX_UART7_Init+0x50>)
 8002258:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_UART7_Init+0x4c>)
 800225c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002260:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_UART7_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_UART7_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_UART7_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_UART7_Init+0x4c>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_UART7_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_UART7_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_UART7_Init+0x4c>)
 8002288:	f002 fb48 	bl	800491c <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002292:	f7ff fc47 	bl	8001b24 <Error_Handler>
  }

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20004314 	.word	0x20004314
 80022a0:	40007800 	.word	0x40007800

080022a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12c      	bne.n	8002320 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_UART_MspInit+0x88>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_UART_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80022fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002308:	2301      	movs	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002310:	2308      	movs	r3, #8
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <HAL_UART_MspInit+0x8c>)
 800231c:	f000 fee0 	bl	80030e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40007800 	.word	0x40007800
 800232c:	40023800 	.word	0x40023800
 8002330:	40021000 	.word	0x40021000

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002338:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800233a:	e003      	b.n	8002344 <LoopCopyDataInit>

0800233c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800233e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002340:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002342:	3104      	adds	r1, #4

08002344 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002344:	480b      	ldr	r0, [pc, #44]	; (8002374 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002348:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800234a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800234c:	d3f6      	bcc.n	800233c <CopyDataInit>
  ldr  r2, =_sbss
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002350:	e002      	b.n	8002358 <LoopFillZerobss>

08002352 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002352:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002354:	f842 3b04 	str.w	r3, [r2], #4

08002358 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800235a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800235c:	d3f9      	bcc.n	8002352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800235e:	f7ff fd61 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f004 fa91 	bl	8006888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7ff fb25 	bl	80019b4 <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800236c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002370:	08008968 	.word	0x08008968
  ldr  r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002378:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800237c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002380:	20004368 	.word	0x20004368

08002384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC_IRQHandler>
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_Init+0x40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0d      	ldr	r2, [pc, #52]	; (80023c8 <HAL_Init+0x40>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_Init+0x40>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_Init+0x40>)
 80023aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b0:	2003      	movs	r0, #3
 80023b2:	f000 fe60 	bl	8003076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff fbe6 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023bc:	f7ff fbb8 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20004354 	.word	0x20004354

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20004354 	.word	0x20004354

0800240c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0ed      	b.n	80025fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff f860 	bl	80014f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0202 	bic.w	r2, r2, #2
 800243e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002440:	f7ff ffd8 	bl	80023f4 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002446:	e012      	b.n	800246e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002448:	f7ff ffd4 	bl	80023f4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d90b      	bls.n	800246e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e0c5      	b.n	80025fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e5      	bne.n	8002448 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248c:	f7ff ffb2 	bl	80023f4 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002492:	e012      	b.n	80024ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002494:	f7ff ffae 	bl	80023f4 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d90b      	bls.n	80024ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2205      	movs	r2, #5
 80024b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e09f      	b.n	80025fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0e5      	beq.n	8002494 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7e1b      	ldrb	r3, [r3, #24]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	e007      	b.n	80024f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e5b      	ldrb	r3, [r3, #25]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d108      	bne.n	800250c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	e007      	b.n	800251c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e9b      	ldrb	r3, [r3, #26]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0220 	orr.w	r2, r2, #32
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e007      	b.n	8002546 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0220 	bic.w	r2, r2, #32
 8002544:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7edb      	ldrb	r3, [r3, #27]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0210 	bic.w	r2, r2, #16
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e007      	b.n	8002570 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0210 	orr.w	r2, r2, #16
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7f1b      	ldrb	r3, [r3, #28]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e007      	b.n	800259a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0208 	bic.w	r2, r2, #8
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7f5b      	ldrb	r3, [r3, #29]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0204 	orr.w	r2, r2, #4
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0204 	bic.w	r2, r2, #4
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d003      	beq.n	800262a <HAL_CAN_ConfigFilter+0x26>
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b02      	cmp	r3, #2
 8002626:	f040 80be 	bne.w	80027a6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800262c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002644:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	431a      	orrs	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2201      	movs	r2, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	43db      	mvns	r3, r3
 800267c:	401a      	ands	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d123      	bne.n	80026d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3248      	adds	r2, #72	; 0x48
 80026b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	3348      	adds	r3, #72	; 0x48
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d122      	bne.n	8002722 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3248      	adds	r2, #72	; 0x48
 8002702:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002716:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002718:	6979      	ldr	r1, [r7, #20]
 800271a:	3348      	adds	r3, #72	; 0x48
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	401a      	ands	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800273c:	e007      	b.n	800274e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	431a      	orrs	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d109      	bne.n	800276a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	43db      	mvns	r3, r3
 8002760:	401a      	ands	r2, r3
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002768:	e007      	b.n	800277a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	431a      	orrs	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	431a      	orrs	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002798:	f023 0201 	bic.w	r2, r3, #1
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e006      	b.n	80027b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40006400 	.word	0x40006400

080027c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d12e      	bne.n	8002836 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027f0:	f7ff fe00 	bl	80023f4 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027f6:	e012      	b.n	800281e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027f8:	f7ff fdfc 	bl	80023f4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b0a      	cmp	r3, #10
 8002804:	d90b      	bls.n	800281e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2205      	movs	r2, #5
 8002816:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e012      	b.n	8002844 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e5      	bne.n	80027f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e006      	b.n	8002844 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002862:	7dfb      	ldrb	r3, [r7, #23]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d003      	beq.n	8002870 <HAL_CAN_GetRxMessage+0x24>
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b02      	cmp	r3, #2
 800286c:	f040 80f3 	bne.w	8002a56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10e      	bne.n	8002894 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d116      	bne.n	80028b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0e7      	b.n	8002a64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0d8      	b.n	8002a64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	331b      	adds	r3, #27
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	4413      	add	r3, r2
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0204 	and.w	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	331b      	adds	r3, #27
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0d5b      	lsrs	r3, r3, #21
 80028e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e00b      	b.n	8002902 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	331b      	adds	r3, #27
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	331b      	adds	r3, #27
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	4413      	add	r3, r2
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0202 	and.w	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	331b      	adds	r3, #27
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	b2da      	uxtb	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	331b      	adds	r3, #27
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4413      	add	r3, r2
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0a1a      	lsrs	r2, r3, #8
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0c1a      	lsrs	r2, r3, #16
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3302      	adds	r3, #2
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0e1a      	lsrs	r2, r3, #24
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	3303      	adds	r3, #3
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3304      	adds	r3, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0a1a      	lsrs	r2, r3, #8
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3305      	adds	r3, #5
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0c1a      	lsrs	r2, r3, #16
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3306      	adds	r3, #6
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0e1a      	lsrs	r2, r3, #24
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	3307      	adds	r3, #7
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0220 	orr.w	r2, r2, #32
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	e007      	b.n	8002a52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0220 	orr.w	r2, r2, #32
 8002a50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e006      	b.n	8002a64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d002      	beq.n	8002a8e <HAL_CAN_ActivateNotification+0x1e>
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d109      	bne.n	8002aa2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6959      	ldr	r1, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e006      	b.n	8002ab0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d07c      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f983 	bl	8002e2a <HAL_CAN_TxMailbox0CompleteCallback>
 8002b24:	e016      	b.n	8002b54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e00c      	b.n	8002b54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	e002      	b.n	8002b54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f989 	bl	8002e66 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d024      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f963 	bl	8002e3e <HAL_CAN_TxMailbox1CompleteCallback>
 8002b78:	e016      	b.n	8002ba8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	e00c      	b.n	8002ba8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba0:	e002      	b.n	8002ba8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f969 	bl	8002e7a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f943 	bl	8002e52 <HAL_CAN_TxMailbox2CompleteCallback>
 8002bcc:	e016      	b.n	8002bfc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	e00c      	b.n	8002bfc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	e002      	b.n	8002bfc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f949 	bl	8002e8e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d007      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2208      	movs	r2, #8
 8002c3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f930 	bl	8002ea2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe fce4 	bl	8001628 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2210      	movs	r2, #16
 8002c82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f912 	bl	8002eca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8f9 	bl	8002eb6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f8fc 	bl	8002ede <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2208      	movs	r2, #8
 8002d00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f8f5 	bl	8002ef2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07b      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d072      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d043      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d03e      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8a:	2b60      	cmp	r3, #96	; 0x60
 8002d8c:	d02b      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x32a>
 8002d8e:	2b60      	cmp	r3, #96	; 0x60
 8002d90:	d82e      	bhi.n	8002df0 <HAL_CAN_IRQHandler+0x334>
 8002d92:	2b50      	cmp	r3, #80	; 0x50
 8002d94:	d022      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x320>
 8002d96:	2b50      	cmp	r3, #80	; 0x50
 8002d98:	d82a      	bhi.n	8002df0 <HAL_CAN_IRQHandler+0x334>
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d019      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x316>
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d826      	bhi.n	8002df0 <HAL_CAN_IRQHandler+0x334>
 8002da2:	2b30      	cmp	r3, #48	; 0x30
 8002da4:	d010      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x30c>
 8002da6:	2b30      	cmp	r3, #48	; 0x30
 8002da8:	d822      	bhi.n	8002df0 <HAL_CAN_IRQHandler+0x334>
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d002      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x2f8>
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d005      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002db2:	e01d      	b.n	8002df0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f043 0308 	orr.w	r3, r3, #8
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dbc:	e019      	b.n	8002df2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc6:	e014      	b.n	8002df2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f043 0320 	orr.w	r3, r3, #32
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd0:	e00f      	b.n	8002df2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dda:	e00a      	b.n	8002df2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002de4:	e005      	b.n	8002df2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dee:	e000      	b.n	8002df2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002df0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2204      	movs	r2, #4
 8002e08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f872 	bl	8002f06 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e22:	bf00      	nop
 8002e24:	3728      	adds	r7, #40	; 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4907      	ldr	r1, [pc, #28]	; (8002fb8 <__NVIC_EnableIRQ+0x38>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	6039      	str	r1, [r7, #0]
 8002fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	db0a      	blt.n	8002fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	490c      	ldr	r1, [pc, #48]	; (8003008 <__NVIC_SetPriority+0x4c>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	0112      	lsls	r2, r2, #4
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe4:	e00a      	b.n	8002ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4908      	ldr	r1, [pc, #32]	; (800300c <__NVIC_SetPriority+0x50>)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3b04      	subs	r3, #4
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	761a      	strb	r2, [r3, #24]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000e100 	.word	0xe000e100
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f1c3 0307 	rsb	r3, r3, #7
 800302a:	2b04      	cmp	r3, #4
 800302c:	bf28      	it	cs
 800302e:	2304      	movcs	r3, #4
 8003030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3304      	adds	r3, #4
 8003036:	2b06      	cmp	r3, #6
 8003038:	d902      	bls.n	8003040 <NVIC_EncodePriority+0x30>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3b03      	subs	r3, #3
 800303e:	e000      	b.n	8003042 <NVIC_EncodePriority+0x32>
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	f04f 32ff 	mov.w	r2, #4294967295
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	401a      	ands	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	43d9      	mvns	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	4313      	orrs	r3, r2
         );
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	; 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff4c 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800309e:	f7ff ff61 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 80030a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f7ff ffb1 	bl	8003010 <NVIC_EncodePriority>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff80 	bl	8002fbc <__NVIC_SetPriority>
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff54 	bl	8002f80 <__NVIC_EnableIRQ>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e177      	b.n	80033ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8166 	bne.w	80033e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d00b      	beq.n	800313a <HAL_GPIO_Init+0x5a>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d007      	beq.n	800313a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312e:	2b11      	cmp	r3, #17
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b12      	cmp	r3, #18
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0xfc>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80c0 	beq.w	80033e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_GPIO_Init+0x324>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a61      	ldr	r2, [pc, #388]	; (8003408 <HAL_GPIO_Init+0x328>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_GPIO_Init+0x32c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d037      	beq.n	800331e <HAL_GPIO_Init+0x23e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_GPIO_Init+0x330>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_GPIO_Init+0x23a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_GPIO_Init+0x334>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02b      	beq.n	8003316 <HAL_GPIO_Init+0x236>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_GPIO_Init+0x338>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d025      	beq.n	8003312 <HAL_GPIO_Init+0x232>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_GPIO_Init+0x33c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <HAL_GPIO_Init+0x22e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a53      	ldr	r2, [pc, #332]	; (8003420 <HAL_GPIO_Init+0x340>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d019      	beq.n	800330a <HAL_GPIO_Init+0x22a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x344>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0x226>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a51      	ldr	r2, [pc, #324]	; (8003428 <HAL_GPIO_Init+0x348>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00d      	beq.n	8003302 <HAL_GPIO_Init+0x222>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_GPIO_Init+0x34c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <HAL_GPIO_Init+0x21e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4f      	ldr	r2, [pc, #316]	; (8003430 <HAL_GPIO_Init+0x350>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_GPIO_Init+0x21a>
 80032f6:	2309      	movs	r3, #9
 80032f8:	e012      	b.n	8003320 <HAL_GPIO_Init+0x240>
 80032fa:	230a      	movs	r3, #10
 80032fc:	e010      	b.n	8003320 <HAL_GPIO_Init+0x240>
 80032fe:	2308      	movs	r3, #8
 8003300:	e00e      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003302:	2307      	movs	r3, #7
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003306:	2306      	movs	r3, #6
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_GPIO_Init+0x328>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_GPIO_Init+0x354>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <HAL_GPIO_Init+0x354>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003368:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_GPIO_Init+0x354>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_GPIO_Init+0x354>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_GPIO_Init+0x354>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_GPIO_Init+0x354>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_GPIO_Init+0x354>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_GPIO_Init+0x354>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f ae84 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800
 8003428:	40021c00 	.word	0x40021c00
 800342c:	40022000 	.word	0x40022000
 8003430:	40022400 	.word	0x40022400
 8003434:	40013c00 	.word	0x40013c00

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	401a      	ands	r2, r3
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	429a      	cmp	r2, r3
 8003482:	d104      	bne.n	800348e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	041a      	lsls	r2, r3, #16
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800348c:	e002      	b.n	8003494 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	619a      	str	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fe fa3a 	bl	8001938 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013c00 	.word	0x40013c00

080034d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e25b      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d075      	beq.n	80035da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ee:	4ba3      	ldr	r3, [pc, #652]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d00c      	beq.n	8003514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fa:	4ba0      	ldr	r3, [pc, #640]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	2b08      	cmp	r3, #8
 8003504:	d112      	bne.n	800352c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b9d      	ldr	r3, [pc, #628]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003512:	d10b      	bne.n	800352c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003514:	4b99      	ldr	r3, [pc, #612]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05b      	beq.n	80035d8 <HAL_RCC_OscConfig+0x108>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d157      	bne.n	80035d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e236      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x74>
 8003536:	4b91      	ldr	r3, [pc, #580]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a90      	ldr	r2, [pc, #576]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e01d      	b.n	8003580 <HAL_RCC_OscConfig+0xb0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x98>
 800354e:	4b8b      	ldr	r3, [pc, #556]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a8a      	ldr	r2, [pc, #552]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a87      	ldr	r2, [pc, #540]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0xb0>
 8003568:	4b84      	ldr	r3, [pc, #528]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a83      	ldr	r2, [pc, #524]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fe ff34 	bl	80023f4 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe ff30 	bl	80023f4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e1fb      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b76      	ldr	r3, [pc, #472]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0xc0>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe ff20 	bl	80023f4 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe ff1c 	bl	80023f4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e1e7      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	4b6c      	ldr	r3, [pc, #432]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0xe8>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d063      	beq.n	80036ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b62      	ldr	r3, [pc, #392]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11c      	bne.n	8003638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d116      	bne.n	8003638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x152>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1bb      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b56      	ldr	r3, [pc, #344]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4952      	ldr	r1, [pc, #328]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	e03a      	b.n	80036ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCC_OscConfig+0x2b0>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe fed5 	bl	80023f4 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364e:	f7fe fed1 	bl	80023f4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e19c      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	4b46      	ldr	r3, [pc, #280]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4940      	ldr	r1, [pc, #256]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	e015      	b.n	80036ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003682:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <HAL_RCC_OscConfig+0x2b0>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe feb4 	bl	80023f4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003690:	f7fe feb0 	bl	80023f4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e17b      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d030      	beq.n	800371c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_RCC_OscConfig+0x2b4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c8:	f7fe fe94 	bl	80023f4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d0:	f7fe fe90 	bl	80023f4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e15b      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x200>
 80036ee:	e015      	b.n	800371c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_RCC_OscConfig+0x2b4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7fe fe7d 	bl	80023f4 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fe:	f7fe fe79 	bl	80023f4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e144      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a0 	beq.w	800386a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10f      	bne.n	800375a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a0e      	ldr	r2, [pc, #56]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_OscConfig+0x2ac>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_OscConfig+0x2b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d121      	bne.n	80037aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <HAL_RCC_OscConfig+0x2b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <HAL_RCC_OscConfig+0x2b8>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fe fe3f 	bl	80023f4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e011      	b.n	800379e <HAL_RCC_OscConfig+0x2ce>
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800
 8003780:	42470000 	.word	0x42470000
 8003784:	42470e80 	.word	0x42470e80
 8003788:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fe fe32 	bl	80023f4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0fd      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_RCC_OscConfig+0x4d4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d106      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
 80037b2:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a7c      	ldr	r2, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	e01c      	b.n	80037fa <HAL_RCC_OscConfig+0x32a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x312>
 80037c8:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a76      	ldr	r2, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	4b74      	ldr	r3, [pc, #464]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a73      	ldr	r2, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e00b      	b.n	80037fa <HAL_RCC_OscConfig+0x32a>
 80037e2:	4b71      	ldr	r3, [pc, #452]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a70      	ldr	r2, [pc, #448]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	4b6e      	ldr	r3, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a6d      	ldr	r2, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d015      	beq.n	800382e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fe fdf7 	bl	80023f4 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fdf3 	bl	80023f4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0bc      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b61      	ldr	r3, [pc, #388]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ee      	beq.n	800380a <HAL_RCC_OscConfig+0x33a>
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fe fde1 	bl	80023f4 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fddd 	bl	80023f4 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0a6      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ee      	bne.n	8003836 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b52      	ldr	r3, [pc, #328]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	4a51      	ldr	r2, [pc, #324]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8092 	beq.w	8003998 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003874:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d05c      	beq.n	800393a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d141      	bne.n	800390c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCC_OscConfig+0x4dc>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7fe fdb1 	bl	80023f4 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003896:	f7fe fdad 	bl	80023f4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e078      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a8:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	019b      	lsls	r3, r3, #6
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	3b01      	subs	r3, #1
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
 80038d8:	4933      	ldr	r1, [pc, #204]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <HAL_RCC_OscConfig+0x4dc>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fd86 	bl	80023f4 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fd82 	bl	80023f4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e04d      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x41c>
 800390a:	e045      	b.n	8003998 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b27      	ldr	r3, [pc, #156]	; (80039ac <HAL_RCC_OscConfig+0x4dc>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fd6f 	bl	80023f4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fd6b 	bl	80023f4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e036      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x44a>
 8003938:	e02e      	b.n	8003998 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e029      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_RCC_OscConfig+0x4d8>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	429a      	cmp	r2, r3
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d115      	bne.n	8003994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396e:	4013      	ands	r3, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d10d      	bne.n	8003994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470060 	.word	0x42470060

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe fca8 	bl	80023f4 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fe fca4 	bl	80023f4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe f816 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08008868 	.word	0x08008868
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000004 	.word	0x20000004

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	b5b0      	push	{r4, r5, r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b82:	2100      	movs	r1, #0
 8003b84:	6079      	str	r1, [r7, #4]
 8003b86:	2100      	movs	r1, #0
 8003b88:	60f9      	str	r1, [r7, #12]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b8e:	2100      	movs	r1, #0
 8003b90:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b92:	4952      	ldr	r1, [pc, #328]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003b94:	6889      	ldr	r1, [r1, #8]
 8003b96:	f001 010c 	and.w	r1, r1, #12
 8003b9a:	2908      	cmp	r1, #8
 8003b9c:	d00d      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x3e>
 8003b9e:	2908      	cmp	r1, #8
 8003ba0:	f200 8094 	bhi.w	8003ccc <HAL_RCC_GetSysClockFreq+0x150>
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x32>
 8003ba8:	2904      	cmp	r1, #4
 8003baa:	d003      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003bac:	e08e      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bae:	4b4c      	ldr	r3, [pc, #304]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003bb0:	60bb      	str	r3, [r7, #8]
       break;
 8003bb2:	e08e      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bb6:	60bb      	str	r3, [r7, #8]
      break;
 8003bb8:	e08b      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bba:	4948      	ldr	r1, [pc, #288]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003bbc:	6849      	ldr	r1, [r1, #4]
 8003bbe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003bc2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc4:	4945      	ldr	r1, [pc, #276]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003bc6:	6849      	ldr	r1, [r1, #4]
 8003bc8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	d024      	beq.n	8003c1a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd0:	4942      	ldr	r1, [pc, #264]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003bd2:	6849      	ldr	r1, [r1, #4]
 8003bd4:	0989      	lsrs	r1, r1, #6
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003be0:	f04f 0500 	mov.w	r5, #0
 8003be4:	ea00 0204 	and.w	r2, r0, r4
 8003be8:	ea01 0305 	and.w	r3, r1, r5
 8003bec:	493d      	ldr	r1, [pc, #244]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bee:	fb01 f003 	mul.w	r0, r1, r3
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	fb01 f102 	mul.w	r1, r1, r2
 8003bf8:	1844      	adds	r4, r0, r1
 8003bfa:	493a      	ldr	r1, [pc, #232]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bfc:	fba2 0101 	umull	r0, r1, r2, r1
 8003c00:	1863      	adds	r3, r4, r1
 8003c02:	4619      	mov	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	f7fc ffdc 	bl	8000bc8 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e04a      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1a:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	461a      	mov	r2, r3
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	ea02 0400 	and.w	r4, r2, r0
 8003c32:	ea03 0501 	and.w	r5, r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	014b      	lsls	r3, r1, #5
 8003c44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c48:	0142      	lsls	r2, r0, #5
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	1b00      	subs	r0, r0, r4
 8003c50:	eb61 0105 	sbc.w	r1, r1, r5
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	018b      	lsls	r3, r1, #6
 8003c5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c62:	0182      	lsls	r2, r0, #6
 8003c64:	1a12      	subs	r2, r2, r0
 8003c66:	eb63 0301 	sbc.w	r3, r3, r1
 8003c6a:	f04f 0000 	mov.w	r0, #0
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	00d9      	lsls	r1, r3, #3
 8003c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c78:	00d0      	lsls	r0, r2, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	1912      	adds	r2, r2, r4
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	f04f 0000 	mov.w	r0, #0
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	0299      	lsls	r1, r3, #10
 8003c8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c92:	0290      	lsls	r0, r2, #10
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f7fc ff90 	bl	8000bc8 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	60bb      	str	r3, [r7, #8]
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003cce:	60bb      	str	r3, [r7, #8]
      break;
 8003cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bdb0      	pop	{r4, r5, r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	00f42400 	.word	0x00f42400
 8003ce4:	00b71b00 	.word	0x00b71b00

08003ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000000 	.word	0x20000000

08003d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d04:	f7ff fff0 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	4903      	ldr	r1, [pc, #12]	; (8003d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08008878 	.word	0x08008878

08003d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d2c:	f7ff ffdc 	bl	8003ce8 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	0b5b      	lsrs	r3, r3, #13
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4903      	ldr	r1, [pc, #12]	; (8003d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	08008878 	.word	0x08008878

08003d50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_RCC_GetClockConfig+0x60>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40023c00 	.word	0x40023c00

08003db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e01d      	b.n	8003e02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fe f964 	bl	80020a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 fa8c 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b06      	cmp	r3, #6
 8003e32:	d007      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e01d      	b.n	8003ea0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fe f8dd 	bl	8002038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fa3d 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fc78 	bl	80047b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <HAL_TIM_PWM_Start+0x74>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIM_PWM_Start+0x2c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <HAL_TIM_PWM_Start+0x78>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x30>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <HAL_TIM_PWM_Start+0x32>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010400 	.word	0x40010400

08003f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0202 	mvn.w	r2, #2
 8003f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9b4 	bl	80042d4 <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9a6 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f9b7 	bl	80042e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d122      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0204 	mvn.w	r2, #4
 8003fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f98a 	bl	80042d4 <HAL_TIM_IC_CaptureCallback>
 8003fc0:	e005      	b.n	8003fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f97c 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f98d 	bl	80042e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0208 	mvn.w	r2, #8
 8003ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f960 	bl	80042d4 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f952 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f963 	bl	80042e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b10      	cmp	r3, #16
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b10      	cmp	r3, #16
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0210 	mvn.w	r2, #16
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2208      	movs	r2, #8
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f936 	bl	80042d4 <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f928 	bl	80042c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f939 	bl	80042e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0201 	mvn.w	r2, #1
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fd18 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fc1a 	bl	8004908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8fe 	bl	80042fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b20      	cmp	r3, #32
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b20      	cmp	r3, #32
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0220 	mvn.w	r2, #32
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fbe4 	bl	80048f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800414a:	2302      	movs	r3, #2
 800414c:	e0b4      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	f200 809f 	bhi.w	80042a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080042a5 	.word	0x080042a5
 8004174:	080042a5 	.word	0x080042a5
 8004178:	080042a5 	.word	0x080042a5
 800417c:	080041e1 	.word	0x080041e1
 8004180:	080042a5 	.word	0x080042a5
 8004184:	080042a5 	.word	0x080042a5
 8004188:	080042a5 	.word	0x080042a5
 800418c:	08004223 	.word	0x08004223
 8004190:	080042a5 	.word	0x080042a5
 8004194:	080042a5 	.word	0x080042a5
 8004198:	080042a5 	.word	0x080042a5
 800419c:	08004263 	.word	0x08004263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f952 	bl	8004450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0204 	bic.w	r2, r2, #4
 80041ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6999      	ldr	r1, [r3, #24]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	619a      	str	r2, [r3, #24]
      break;
 80041de:	e062      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f9a2 	bl	8004530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	021a      	lsls	r2, r3, #8
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]
      break;
 8004220:	e041      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	4618      	mov	r0, r3
 800422a:	f000 f9f7 	bl	800461c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0208 	orr.w	r2, r2, #8
 800423c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0204 	bic.w	r2, r2, #4
 800424c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69d9      	ldr	r1, [r3, #28]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
      break;
 8004260:	e021      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fa4b 	bl	8004704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	021a      	lsls	r2, r3, #8
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	61da      	str	r2, [r3, #28]
      break;
 80042a2:	e000      	b.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a40      	ldr	r2, [pc, #256]	; (8004424 <TIM_Base_SetConfig+0x114>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d00f      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3d      	ldr	r2, [pc, #244]	; (8004428 <TIM_Base_SetConfig+0x118>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00b      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3c      	ldr	r2, [pc, #240]	; (800442c <TIM_Base_SetConfig+0x11c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3b      	ldr	r2, [pc, #236]	; (8004430 <TIM_Base_SetConfig+0x120>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3a      	ldr	r2, [pc, #232]	; (8004434 <TIM_Base_SetConfig+0x124>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <TIM_Base_SetConfig+0x114>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004370:	d027      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <TIM_Base_SetConfig+0x118>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d023      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2b      	ldr	r2, [pc, #172]	; (800442c <TIM_Base_SetConfig+0x11c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2a      	ldr	r2, [pc, #168]	; (8004430 <TIM_Base_SetConfig+0x120>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <TIM_Base_SetConfig+0x124>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d017      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a28      	ldr	r2, [pc, #160]	; (8004438 <TIM_Base_SetConfig+0x128>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a27      	ldr	r2, [pc, #156]	; (800443c <TIM_Base_SetConfig+0x12c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00f      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a26      	ldr	r2, [pc, #152]	; (8004440 <TIM_Base_SetConfig+0x130>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <TIM_Base_SetConfig+0x134>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a24      	ldr	r2, [pc, #144]	; (8004448 <TIM_Base_SetConfig+0x138>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a23      	ldr	r2, [pc, #140]	; (800444c <TIM_Base_SetConfig+0x13c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <TIM_Base_SetConfig+0x114>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0xf8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <TIM_Base_SetConfig+0x124>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	615a      	str	r2, [r3, #20]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40010400 	.word	0x40010400
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	40001800 	.word	0x40001800
 8004448:	40001c00 	.word	0x40001c00
 800444c:	40002000 	.word	0x40002000

08004450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f023 0201 	bic.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 0302 	bic.w	r3, r3, #2
 8004498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a20      	ldr	r2, [pc, #128]	; (8004528 <TIM_OC1_SetConfig+0xd8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <TIM_OC1_SetConfig+0x64>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <TIM_OC1_SetConfig+0xdc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10c      	bne.n	80044ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0308 	bic.w	r3, r3, #8
 80044ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <TIM_OC1_SetConfig+0xd8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_OC1_SetConfig+0x8e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <TIM_OC1_SetConfig+0xdc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400

08004530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f023 0210 	bic.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0320 	bic.w	r3, r3, #32
 800457a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a22      	ldr	r2, [pc, #136]	; (8004614 <TIM_OC2_SetConfig+0xe4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_OC2_SetConfig+0x68>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a21      	ldr	r2, [pc, #132]	; (8004618 <TIM_OC2_SetConfig+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d10d      	bne.n	80045b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <TIM_OC2_SetConfig+0xe4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC2_SetConfig+0x94>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <TIM_OC2_SetConfig+0xe8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d113      	bne.n	80045ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40010400 	.word	0x40010400

0800461c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a21      	ldr	r2, [pc, #132]	; (80046fc <TIM_OC3_SetConfig+0xe0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_OC3_SetConfig+0x66>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a20      	ldr	r2, [pc, #128]	; (8004700 <TIM_OC3_SetConfig+0xe4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a16      	ldr	r2, [pc, #88]	; (80046fc <TIM_OC3_SetConfig+0xe0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC3_SetConfig+0x92>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a15      	ldr	r2, [pc, #84]	; (8004700 <TIM_OC3_SetConfig+0xe4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d113      	bne.n	80046d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	621a      	str	r2, [r3, #32]
}
 80046f0:	bf00      	nop
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010400 	.word	0x40010400

08004704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800474e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <TIM_OC4_SetConfig+0xa4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_OC4_SetConfig+0x68>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a11      	ldr	r2, [pc, #68]	; (80047ac <TIM_OC4_SetConfig+0xa8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d109      	bne.n	8004780 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	019b      	lsls	r3, r3, #6
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40010400 	.word	0x40010400

080047b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2201      	movs	r2, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	431a      	orrs	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e05a      	b.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004860:	d01d      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a15      	ldr	r2, [pc, #84]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10c      	bne.n	80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40001800 	.word	0x40001800

080048f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e03f      	b.n	80049ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fcae 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	; 0x24
 800494c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800495e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f9b1 	bl	8004cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b088      	sub	sp, #32
 80049ba:	af02      	add	r7, sp, #8
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	f040 8083 	bne.w	8004ade <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_UART_Transmit+0x2e>
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e07b      	b.n	8004ae0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Transmit+0x40>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e074      	b.n	8004ae0 <HAL_UART_Transmit+0x12a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2221      	movs	r2, #33	; 0x21
 8004a08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd fcf2 	bl	80023f4 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	88fa      	ldrh	r2, [r7, #6]
 8004a16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a26:	e042      	b.n	8004aae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3e:	d122      	bne.n	8004a86 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2200      	movs	r2, #0
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f8f2 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e042      	b.n	8004ae0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	3302      	adds	r3, #2
 8004a7a:	60bb      	str	r3, [r7, #8]
 8004a7c:	e017      	b.n	8004aae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	e013      	b.n	8004aae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2180      	movs	r1, #128	; 0x80
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f8cf 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e01f      	b.n	8004ae0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	60ba      	str	r2, [r7, #8]
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1b7      	bne.n	8004a28 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2140      	movs	r1, #64	; 0x40
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 f8b6 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e006      	b.n	8004ae0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	f040 8090 	bne.w	8004c2a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UART_Receive+0x2e>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e088      	b.n	8004c2c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Receive+0x40>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e081      	b.n	8004c2c <HAL_UART_Receive+0x144>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2222      	movs	r2, #34	; 0x22
 8004b3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b3e:	f7fd fc59 	bl	80023f4 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	88fa      	ldrh	r2, [r7, #6]
 8004b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b58:	e05c      	b.n	8004c14 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b70:	d12b      	bne.n	8004bca <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2120      	movs	r1, #32
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f859 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e04f      	b.n	8004c2c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10c      	bne.n	8004bb2 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	3302      	adds	r3, #2
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	e030      	b.n	8004c14 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	e024      	b.n	8004c14 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2120      	movs	r1, #32
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f82d 	bl	8004c34 <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e023      	b.n	8004c2c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d108      	bne.n	8004bfe <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	60ba      	str	r2, [r7, #8]
 8004bf8:	b2ca      	uxtb	r2, r1
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e00a      	b.n	8004c14 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	1c59      	adds	r1, r3, #1
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d19d      	bne.n	8004b5a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004c2a:	2302      	movs	r3, #2
  }
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c44:	e02c      	b.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4c:	d028      	beq.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c54:	f7fd fbce 	bl	80023f4 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d21d      	bcs.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e00f      	b.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d0c3      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	b0bd      	sub	sp, #244	; 0xf4
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce4:	68d9      	ldr	r1, [r3, #12]
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	ea40 0301 	orr.w	r3, r0, r1
 8004cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d20:	f021 010c 	bic.w	r1, r1, #12
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d42:	6999      	ldr	r1, [r3, #24]
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	ea40 0301 	orr.w	r3, r0, r1
 8004d4e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	f040 81a5 	bne.w	80050a8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4bcd      	ldr	r3, [pc, #820]	; (800509c <UART_SetConfig+0x3d4>)
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d006      	beq.n	8004d78 <UART_SetConfig+0xb0>
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4bcb      	ldr	r3, [pc, #812]	; (80050a0 <UART_SetConfig+0x3d8>)
 8004d72:	429a      	cmp	r2, r3
 8004d74:	f040 80cb 	bne.w	8004f0e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d78:	f7fe ffd6 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 8004d7c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d84:	461c      	mov	r4, r3
 8004d86:	f04f 0500 	mov.w	r5, #0
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004d94:	415b      	adcs	r3, r3
 8004d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d9a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d9e:	1912      	adds	r2, r2, r4
 8004da0:	eb45 0303 	adc.w	r3, r5, r3
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f04f 0100 	mov.w	r1, #0
 8004dac:	00d9      	lsls	r1, r3, #3
 8004dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db2:	00d0      	lsls	r0, r2, #3
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	1911      	adds	r1, r2, r4
 8004dba:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004dbe:	416b      	adcs	r3, r5
 8004dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	1891      	adds	r1, r2, r2
 8004dd2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004dd6:	415b      	adcs	r3, r3
 8004dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ddc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004de0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004de4:	f7fb fef0 	bl	8000bc8 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4bad      	ldr	r3, [pc, #692]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004dee:	fba3 2302 	umull	r2, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	011e      	lsls	r6, r3, #4
 8004df6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004dfa:	461c      	mov	r4, r3
 8004dfc:	f04f 0500 	mov.w	r5, #0
 8004e00:	4622      	mov	r2, r4
 8004e02:	462b      	mov	r3, r5
 8004e04:	1891      	adds	r1, r2, r2
 8004e06:	67b9      	str	r1, [r7, #120]	; 0x78
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e0c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004e10:	1912      	adds	r2, r2, r4
 8004e12:	eb45 0303 	adc.w	r3, r5, r3
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	00d9      	lsls	r1, r3, #3
 8004e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e24:	00d0      	lsls	r0, r2, #3
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	1911      	adds	r1, r2, r4
 8004e2c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004e30:	416b      	adcs	r3, r5
 8004e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	1891      	adds	r1, r2, r2
 8004e44:	6739      	str	r1, [r7, #112]	; 0x70
 8004e46:	415b      	adcs	r3, r3
 8004e48:	677b      	str	r3, [r7, #116]	; 0x74
 8004e4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e4e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e52:	f7fb feb9 	bl	8000bc8 <__aeabi_uldivmod>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4b92      	ldr	r3, [pc, #584]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	2164      	movs	r1, #100	; 0x64
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	3332      	adds	r3, #50	; 0x32
 8004e6e:	4a8d      	ldr	r2, [pc, #564]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e7c:	441e      	add	r6, r3
 8004e7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	1894      	adds	r4, r2, r2
 8004e8e:	66bc      	str	r4, [r7, #104]	; 0x68
 8004e90:	415b      	adcs	r3, r3
 8004e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004e98:	1812      	adds	r2, r2, r0
 8004e9a:	eb41 0303 	adc.w	r3, r1, r3
 8004e9e:	f04f 0400 	mov.w	r4, #0
 8004ea2:	f04f 0500 	mov.w	r5, #0
 8004ea6:	00dd      	lsls	r5, r3, #3
 8004ea8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eac:	00d4      	lsls	r4, r2, #3
 8004eae:	4622      	mov	r2, r4
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	1814      	adds	r4, r2, r0
 8004eb4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	6639      	str	r1, [r7, #96]	; 0x60
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004eda:	f7fb fe75 	bl	8000bc8 <__aeabi_uldivmod>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4b70      	ldr	r3, [pc, #448]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2164      	movs	r1, #100	; 0x64
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	3332      	adds	r3, #50	; 0x32
 8004ef6:	4a6b      	ldr	r2, [pc, #428]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	f003 0207 	and.w	r2, r3, #7
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4432      	add	r2, r6
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	e26d      	b.n	80053ea <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f0e:	f7fe fef7 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 8004f12:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f1a:	461c      	mov	r4, r3
 8004f1c:	f04f 0500 	mov.w	r5, #0
 8004f20:	4622      	mov	r2, r4
 8004f22:	462b      	mov	r3, r5
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f30:	1912      	adds	r2, r2, r4
 8004f32:	eb45 0303 	adc.w	r3, r5, r3
 8004f36:	f04f 0000 	mov.w	r0, #0
 8004f3a:	f04f 0100 	mov.w	r1, #0
 8004f3e:	00d9      	lsls	r1, r3, #3
 8004f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f44:	00d0      	lsls	r0, r2, #3
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	1911      	adds	r1, r2, r4
 8004f4c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004f50:	416b      	adcs	r3, r5
 8004f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	6539      	str	r1, [r7, #80]	; 0x50
 8004f66:	415b      	adcs	r3, r3
 8004f68:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f6e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004f72:	f7fb fe29 	bl	8000bc8 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	011e      	lsls	r6, r3, #4
 8004f84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f88:	461c      	mov	r4, r3
 8004f8a:	f04f 0500 	mov.w	r5, #0
 8004f8e:	4622      	mov	r2, r4
 8004f90:	462b      	mov	r3, r5
 8004f92:	1891      	adds	r1, r2, r2
 8004f94:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f96:	415b      	adcs	r3, r3
 8004f98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f9e:	1912      	adds	r2, r2, r4
 8004fa0:	eb45 0303 	adc.w	r3, r5, r3
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	00d9      	lsls	r1, r3, #3
 8004fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb2:	00d0      	lsls	r0, r2, #3
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	1911      	adds	r1, r2, r4
 8004fba:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004fbe:	416b      	adcs	r3, r5
 8004fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	1891      	adds	r1, r2, r2
 8004fd2:	6439      	str	r1, [r7, #64]	; 0x40
 8004fd4:	415b      	adcs	r3, r3
 8004fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fdc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004fe0:	f7fb fdf2 	bl	8000bc8 <__aeabi_uldivmod>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004fea:	fba3 1302 	umull	r1, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2164      	movs	r1, #100	; 0x64
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	3332      	adds	r3, #50	; 0x32
 8004ffc:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <UART_SetConfig+0x3dc>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800500a:	441e      	add	r6, r3
 800500c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005010:	4618      	mov	r0, r3
 8005012:	f04f 0100 	mov.w	r1, #0
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	1894      	adds	r4, r2, r2
 800501c:	63bc      	str	r4, [r7, #56]	; 0x38
 800501e:	415b      	adcs	r3, r3
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005022:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005026:	1812      	adds	r2, r2, r0
 8005028:	eb41 0303 	adc.w	r3, r1, r3
 800502c:	f04f 0400 	mov.w	r4, #0
 8005030:	f04f 0500 	mov.w	r5, #0
 8005034:	00dd      	lsls	r5, r3, #3
 8005036:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800503a:	00d4      	lsls	r4, r2, #3
 800503c:	4622      	mov	r2, r4
 800503e:	462b      	mov	r3, r5
 8005040:	1814      	adds	r4, r2, r0
 8005042:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005046:	414b      	adcs	r3, r1
 8005048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	461a      	mov	r2, r3
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	1891      	adds	r1, r2, r2
 800505a:	6339      	str	r1, [r7, #48]	; 0x30
 800505c:	415b      	adcs	r3, r3
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005064:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005068:	f7fb fdae 	bl	8000bc8 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <UART_SetConfig+0x3dc>)
 8005072:	fba3 1302 	umull	r1, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	3332      	adds	r3, #50	; 0x32
 8005084:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <UART_SetConfig+0x3dc>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	f003 0207 	and.w	r2, r3, #7
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4432      	add	r2, r6
 8005098:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800509a:	e1a6      	b.n	80053ea <UART_SetConfig+0x722>
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4bd1      	ldr	r3, [pc, #836]	; (80053f4 <UART_SetConfig+0x72c>)
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d006      	beq.n	80050c2 <UART_SetConfig+0x3fa>
 80050b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4bcf      	ldr	r3, [pc, #828]	; (80053f8 <UART_SetConfig+0x730>)
 80050bc:	429a      	cmp	r2, r3
 80050be:	f040 80ca 	bne.w	8005256 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c2:	f7fe fe31 	bl	8003d28 <HAL_RCC_GetPCLK2Freq>
 80050c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050ce:	461c      	mov	r4, r3
 80050d0:	f04f 0500 	mov.w	r5, #0
 80050d4:	4622      	mov	r2, r4
 80050d6:	462b      	mov	r3, r5
 80050d8:	1891      	adds	r1, r2, r2
 80050da:	62b9      	str	r1, [r7, #40]	; 0x28
 80050dc:	415b      	adcs	r3, r3
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050e4:	1912      	adds	r2, r2, r4
 80050e6:	eb45 0303 	adc.w	r3, r5, r3
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	00d9      	lsls	r1, r3, #3
 80050f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f8:	00d0      	lsls	r0, r2, #3
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	eb12 0a04 	adds.w	sl, r2, r4
 8005102:	eb43 0b05 	adc.w	fp, r3, r5
 8005106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	f04f 0100 	mov.w	r1, #0
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	008b      	lsls	r3, r1, #2
 800511c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005120:	0082      	lsls	r2, r0, #2
 8005122:	4650      	mov	r0, sl
 8005124:	4659      	mov	r1, fp
 8005126:	f7fb fd4f 	bl	8000bc8 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4bb3      	ldr	r3, [pc, #716]	; (80053fc <UART_SetConfig+0x734>)
 8005130:	fba3 2302 	umull	r2, r3, r3, r2
 8005134:	095b      	lsrs	r3, r3, #5
 8005136:	011e      	lsls	r6, r3, #4
 8005138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800513c:	4618      	mov	r0, r3
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	1894      	adds	r4, r2, r2
 8005148:	623c      	str	r4, [r7, #32]
 800514a:	415b      	adcs	r3, r3
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
 800514e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005152:	1812      	adds	r2, r2, r0
 8005154:	eb41 0303 	adc.w	r3, r1, r3
 8005158:	f04f 0400 	mov.w	r4, #0
 800515c:	f04f 0500 	mov.w	r5, #0
 8005160:	00dd      	lsls	r5, r3, #3
 8005162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005166:	00d4      	lsls	r4, r2, #3
 8005168:	4622      	mov	r2, r4
 800516a:	462b      	mov	r3, r5
 800516c:	1814      	adds	r4, r2, r0
 800516e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005172:	414b      	adcs	r3, r1
 8005174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	008b      	lsls	r3, r1, #2
 800518e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005192:	0082      	lsls	r2, r0, #2
 8005194:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005198:	f7fb fd16 	bl	8000bc8 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4b96      	ldr	r3, [pc, #600]	; (80053fc <UART_SetConfig+0x734>)
 80051a2:	fba3 1302 	umull	r1, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2164      	movs	r1, #100	; 0x64
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	3332      	adds	r3, #50	; 0x32
 80051b4:	4a91      	ldr	r2, [pc, #580]	; (80053fc <UART_SetConfig+0x734>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c0:	441e      	add	r6, r3
 80051c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051c6:	4618      	mov	r0, r3
 80051c8:	f04f 0100 	mov.w	r1, #0
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	1894      	adds	r4, r2, r2
 80051d2:	61bc      	str	r4, [r7, #24]
 80051d4:	415b      	adcs	r3, r3
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051dc:	1812      	adds	r2, r2, r0
 80051de:	eb41 0303 	adc.w	r3, r1, r3
 80051e2:	f04f 0400 	mov.w	r4, #0
 80051e6:	f04f 0500 	mov.w	r5, #0
 80051ea:	00dd      	lsls	r5, r3, #3
 80051ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051f0:	00d4      	lsls	r4, r2, #3
 80051f2:	4622      	mov	r2, r4
 80051f4:	462b      	mov	r3, r5
 80051f6:	1814      	adds	r4, r2, r0
 80051f8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80051fc:	414b      	adcs	r3, r1
 80051fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	008b      	lsls	r3, r1, #2
 8005218:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800521c:	0082      	lsls	r2, r0, #2
 800521e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005222:	f7fb fcd1 	bl	8000bc8 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4b74      	ldr	r3, [pc, #464]	; (80053fc <UART_SetConfig+0x734>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	; 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	3332      	adds	r3, #50	; 0x32
 800523e:	4a6f      	ldr	r2, [pc, #444]	; (80053fc <UART_SetConfig+0x734>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f003 020f 	and.w	r2, r3, #15
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4432      	add	r2, r6
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	e0c9      	b.n	80053ea <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005256:	f7fe fd53 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 800525a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800525e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005262:	461c      	mov	r4, r3
 8005264:	f04f 0500 	mov.w	r5, #0
 8005268:	4622      	mov	r2, r4
 800526a:	462b      	mov	r3, r5
 800526c:	1891      	adds	r1, r2, r2
 800526e:	6139      	str	r1, [r7, #16]
 8005270:	415b      	adcs	r3, r3
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005278:	1912      	adds	r2, r2, r4
 800527a:	eb45 0303 	adc.w	r3, r5, r3
 800527e:	f04f 0000 	mov.w	r0, #0
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	00d9      	lsls	r1, r3, #3
 8005288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800528c:	00d0      	lsls	r0, r2, #3
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	eb12 0804 	adds.w	r8, r2, r4
 8005296:	eb43 0905 	adc.w	r9, r3, r5
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	008b      	lsls	r3, r1, #2
 80052b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052b4:	0082      	lsls	r2, r0, #2
 80052b6:	4640      	mov	r0, r8
 80052b8:	4649      	mov	r1, r9
 80052ba:	f7fb fc85 	bl	8000bc8 <__aeabi_uldivmod>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4b4e      	ldr	r3, [pc, #312]	; (80053fc <UART_SetConfig+0x734>)
 80052c4:	fba3 2302 	umull	r2, r3, r3, r2
 80052c8:	095b      	lsrs	r3, r3, #5
 80052ca:	011e      	lsls	r6, r3, #4
 80052cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052d0:	4618      	mov	r0, r3
 80052d2:	f04f 0100 	mov.w	r1, #0
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	1894      	adds	r4, r2, r2
 80052dc:	60bc      	str	r4, [r7, #8]
 80052de:	415b      	adcs	r3, r3
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e6:	1812      	adds	r2, r2, r0
 80052e8:	eb41 0303 	adc.w	r3, r1, r3
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	f04f 0500 	mov.w	r5, #0
 80052f4:	00dd      	lsls	r5, r3, #3
 80052f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052fa:	00d4      	lsls	r4, r2, #3
 80052fc:	4622      	mov	r2, r4
 80052fe:	462b      	mov	r3, r5
 8005300:	1814      	adds	r4, r2, r0
 8005302:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005306:	414b      	adcs	r3, r1
 8005308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800530c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4618      	mov	r0, r3
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	008b      	lsls	r3, r1, #2
 8005322:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005326:	0082      	lsls	r2, r0, #2
 8005328:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800532c:	f7fb fc4c 	bl	8000bc8 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4b31      	ldr	r3, [pc, #196]	; (80053fc <UART_SetConfig+0x734>)
 8005336:	fba3 1302 	umull	r1, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2164      	movs	r1, #100	; 0x64
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	3332      	adds	r3, #50	; 0x32
 8005348:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <UART_SetConfig+0x734>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005354:	441e      	add	r6, r3
 8005356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800535a:	4618      	mov	r0, r3
 800535c:	f04f 0100 	mov.w	r1, #0
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	1894      	adds	r4, r2, r2
 8005366:	603c      	str	r4, [r7, #0]
 8005368:	415b      	adcs	r3, r3
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005370:	1812      	adds	r2, r2, r0
 8005372:	eb41 0303 	adc.w	r3, r1, r3
 8005376:	f04f 0400 	mov.w	r4, #0
 800537a:	f04f 0500 	mov.w	r5, #0
 800537e:	00dd      	lsls	r5, r3, #3
 8005380:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005384:	00d4      	lsls	r4, r2, #3
 8005386:	4622      	mov	r2, r4
 8005388:	462b      	mov	r3, r5
 800538a:	1814      	adds	r4, r2, r0
 800538c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005390:	414b      	adcs	r3, r1
 8005392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4618      	mov	r0, r3
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	008b      	lsls	r3, r1, #2
 80053ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053b0:	0082      	lsls	r2, r0, #2
 80053b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80053b6:	f7fb fc07 	bl	8000bc8 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <UART_SetConfig+0x734>)
 80053c0:	fba3 1302 	umull	r1, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	2164      	movs	r1, #100	; 0x64
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	3332      	adds	r3, #50	; 0x32
 80053d2:	4a0a      	ldr	r2, [pc, #40]	; (80053fc <UART_SetConfig+0x734>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	f003 020f 	and.w	r2, r3, #15
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4432      	add	r2, r6
 80053e6:	609a      	str	r2, [r3, #8]
}
 80053e8:	e7ff      	b.n	80053ea <UART_SetConfig+0x722>
 80053ea:	bf00      	nop
 80053ec:	37f4      	adds	r7, #244	; 0xf4
 80053ee:	46bd      	mov	sp, r7
 80053f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f4:	40011000 	.word	0x40011000
 80053f8:	40011400 	.word	0x40011400
 80053fc:	51eb851f 	.word	0x51eb851f

08005400 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800540e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005412:	2b84      	cmp	r3, #132	; 0x84
 8005414:	d005      	beq.n	8005422 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005416:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	3303      	adds	r3, #3
 8005420:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005422:	68fb      	ldr	r3, [r7, #12]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005434:	f000 fade 	bl	80059f4 <vTaskStartScheduler>
  
  return osOK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	bd80      	pop	{r7, pc}

0800543e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800543e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005440:	b089      	sub	sp, #36	; 0x24
 8005442:	af04      	add	r7, sp, #16
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d020      	beq.n	8005492 <osThreadCreate+0x54>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01c      	beq.n	8005492 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685c      	ldr	r4, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681d      	ldr	r5, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691e      	ldr	r6, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ffc8 	bl	8005400 <makeFreeRtosPriority>
 8005470:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800547a:	9202      	str	r2, [sp, #8]
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	9100      	str	r1, [sp, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	4632      	mov	r2, r6
 8005484:	4629      	mov	r1, r5
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f8ed 	bl	8005666 <xTaskCreateStatic>
 800548c:	4603      	mov	r3, r0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e01c      	b.n	80054cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685c      	ldr	r4, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800549e:	b29e      	uxth	r6, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff ffaa 	bl	8005400 <makeFreeRtosPriority>
 80054ac:	4602      	mov	r2, r0
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	9200      	str	r2, [sp, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	4632      	mov	r2, r6
 80054ba:	4629      	mov	r1, r5
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 f92f 	bl	8005720 <xTaskCreate>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054cc:	68fb      	ldr	r3, [r7, #12]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <osDelay+0x16>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	e000      	b.n	80054ee <osDelay+0x18>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fa4c 	bl	800598c <vTaskDelay>
  
  return osOK;
 80054f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f103 0208 	add.w	r2, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f04f 32ff 	mov.w	r2, #4294967295
 8005516:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f103 0208 	add.w	r2, r3, #8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f103 0208 	add.w	r2, r3, #8
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	601a      	str	r2, [r3, #0]
}
 8005594:	bf00      	nop
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b6:	d103      	bne.n	80055c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e00c      	b.n	80055da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3308      	adds	r3, #8
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e002      	b.n	80055ce <vListInsert+0x2e>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d2f6      	bcs.n	80055c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6852      	ldr	r2, [r2, #4]
 8005632:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d103      	bne.n	8005646 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08e      	sub	sp, #56	; 0x38
 800566a:	af04      	add	r7, sp, #16
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <xTaskCreateStatic+0x46>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	61fb      	str	r3, [r7, #28]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056ac:	2354      	movs	r3, #84	; 0x54
 80056ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b54      	cmp	r3, #84	; 0x54
 80056b4:	d00a      	beq.n	80056cc <xTaskCreateStatic+0x66>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	61bb      	str	r3, [r7, #24]
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01e      	beq.n	8005712 <xTaskCreateStatic+0xac>
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01b      	beq.n	8005712 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056ec:	2300      	movs	r3, #0
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f850 	bl	80057aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800570a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800570c:	f000 f8d4 	bl	80058b8 <prvAddNewTaskToReadyList>
 8005710:	e001      	b.n	8005716 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005716:	697b      	ldr	r3, [r7, #20]
	}
 8005718:	4618      	mov	r0, r3
 800571a:	3728      	adds	r7, #40	; 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	; 0x30
 8005724:	af04      	add	r7, sp, #16
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fec7 	bl	80064c8 <pvPortMalloc>
 800573a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00e      	beq.n	8005760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005742:	2054      	movs	r0, #84	; 0x54
 8005744:	f000 fec0 	bl	80064c8 <pvPortMalloc>
 8005748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
 8005756:	e005      	b.n	8005764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005758:	6978      	ldr	r0, [r7, #20]
 800575a:	f000 ff79 	bl	8006650 <vPortFree>
 800575e:	e001      	b.n	8005764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d017      	beq.n	800579a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005772:	88fa      	ldrh	r2, [r7, #6]
 8005774:	2300      	movs	r3, #0
 8005776:	9303      	str	r3, [sp, #12]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	9302      	str	r3, [sp, #8]
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f80e 	bl	80057aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800578e:	69f8      	ldr	r0, [r7, #28]
 8005790:	f000 f892 	bl	80058b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005794:	2301      	movs	r3, #1
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e002      	b.n	80057a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057a0:	69bb      	ldr	r3, [r7, #24]
	}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b088      	sub	sp, #32
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057c2:	3b01      	subs	r3, #1
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	617b      	str	r3, [r7, #20]
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01f      	beq.n	8005838 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057f8:	2300      	movs	r3, #0
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e012      	b.n	8005824 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	7819      	ldrb	r1, [r3, #0]
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	4413      	add	r3, r2
 800580c:	3334      	adds	r3, #52	; 0x34
 800580e:	460a      	mov	r2, r1
 8005810:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	4413      	add	r3, r2
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b0f      	cmp	r3, #15
 8005828:	d9e9      	bls.n	80057fe <prvInitialiseNewTask+0x54>
 800582a:	e000      	b.n	800582e <prvInitialiseNewTask+0x84>
			{
				break;
 800582c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005836:	e003      	b.n	8005840 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	2b06      	cmp	r3, #6
 8005844:	d901      	bls.n	800584a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005846:	2306      	movs	r3, #6
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005854:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fe6c 	bl	800553e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	3318      	adds	r3, #24
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fe67 	bl	800553e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005874:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	f1c3 0207 	rsb	r2, r3, #7
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005884:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2200      	movs	r2, #0
 800588a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	69b8      	ldr	r0, [r7, #24]
 800589a:	f000 fc05 	bl	80060a8 <pxPortInitialiseStack>
 800589e:	4602      	mov	r2, r0
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058c0:	f000 fd20 	bl	8006304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058c4:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <prvAddNewTaskToReadyList+0xb8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	4a29      	ldr	r2, [pc, #164]	; (8005970 <prvAddNewTaskToReadyList+0xb8>)
 80058cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ce:	4b29      	ldr	r3, [pc, #164]	; (8005974 <prvAddNewTaskToReadyList+0xbc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058d6:	4a27      	ldr	r2, [pc, #156]	; (8005974 <prvAddNewTaskToReadyList+0xbc>)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058dc:	4b24      	ldr	r3, [pc, #144]	; (8005970 <prvAddNewTaskToReadyList+0xb8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058e4:	f000 fabc 	bl	8005e60 <prvInitialiseTaskLists>
 80058e8:	e00d      	b.n	8005906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <prvAddNewTaskToReadyList+0xc0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058f2:	4b20      	ldr	r3, [pc, #128]	; (8005974 <prvAddNewTaskToReadyList+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d802      	bhi.n	8005906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005900:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <prvAddNewTaskToReadyList+0xbc>)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <prvAddNewTaskToReadyList+0xc4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <prvAddNewTaskToReadyList+0xc4>)
 800590e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <prvAddNewTaskToReadyList+0xc8>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a15      	ldr	r2, [pc, #84]	; (8005984 <prvAddNewTaskToReadyList+0xcc>)
 8005930:	441a      	add	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7ff fe0d 	bl	8005558 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800593e:	f000 fd11 	bl	8006364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <prvAddNewTaskToReadyList+0xc0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00e      	beq.n	8005968 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <prvAddNewTaskToReadyList+0xbc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	429a      	cmp	r2, r3
 8005956:	d207      	bcs.n	8005968 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <prvAddNewTaskToReadyList+0xd0>)
 800595a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	200003f0 	.word	0x200003f0
 8005974:	200002f0 	.word	0x200002f0
 8005978:	200003fc 	.word	0x200003fc
 800597c:	2000040c 	.word	0x2000040c
 8005980:	200003f8 	.word	0x200003f8
 8005984:	200002f4 	.word	0x200002f4
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d017      	beq.n	80059ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <vTaskDelay+0x60>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <vTaskDelay+0x30>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60bb      	str	r3, [r7, #8]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059bc:	f000 f87a 	bl	8005ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059c0:	2100      	movs	r1, #0
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fb0a 	bl	8005fdc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059c8:	f000 f882 	bl	8005ad0 <xTaskResumeAll>
 80059cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d107      	bne.n	80059e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <vTaskDelay+0x64>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000418 	.word	0x20000418
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a02:	463a      	mov	r2, r7
 8005a04:	1d39      	adds	r1, r7, #4
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb fe2e 	bl	800166c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	9202      	str	r2, [sp, #8]
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	460a      	mov	r2, r1
 8005a22:	491e      	ldr	r1, [pc, #120]	; (8005a9c <vTaskStartScheduler+0xa8>)
 8005a24:	481e      	ldr	r0, [pc, #120]	; (8005aa0 <vTaskStartScheduler+0xac>)
 8005a26:	f7ff fe1e 	bl	8005666 <xTaskCreateStatic>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <vTaskStartScheduler+0xb0>)
 8005a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a30:	4b1c      	ldr	r3, [pc, #112]	; (8005aa4 <vTaskStartScheduler+0xb0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e001      	b.n	8005a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d116      	bne.n	8005a76 <vTaskStartScheduler+0x82>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	613b      	str	r3, [r7, #16]
}
 8005a5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a5c:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <vTaskStartScheduler+0xb4>)
 8005a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a64:	4b11      	ldr	r3, [pc, #68]	; (8005aac <vTaskStartScheduler+0xb8>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <vTaskStartScheduler+0xbc>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a70:	f000 fba6 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a74:	e00e      	b.n	8005a94 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d10a      	bne.n	8005a94 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	60fb      	str	r3, [r7, #12]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <vTaskStartScheduler+0x9e>
}
 8005a94:	bf00      	nop
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	08008860 	.word	0x08008860
 8005aa0:	08005e31 	.word	0x08005e31
 8005aa4:	20000414 	.word	0x20000414
 8005aa8:	20000410 	.word	0x20000410
 8005aac:	200003fc 	.word	0x200003fc
 8005ab0:	200003f4 	.word	0x200003f4

08005ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ab8:	4b04      	ldr	r3, [pc, #16]	; (8005acc <vTaskSuspendAll+0x18>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	4a03      	ldr	r2, [pc, #12]	; (8005acc <vTaskSuspendAll+0x18>)
 8005ac0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005ac2:	bf00      	nop
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000418 	.word	0x20000418

08005ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ade:	4b41      	ldr	r3, [pc, #260]	; (8005be4 <xTaskResumeAll+0x114>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <xTaskResumeAll+0x2c>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	603b      	str	r3, [r7, #0]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005afc:	f000 fc02 	bl	8006304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b00:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <xTaskResumeAll+0x114>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	4a37      	ldr	r2, [pc, #220]	; (8005be4 <xTaskResumeAll+0x114>)
 8005b08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <xTaskResumeAll+0x114>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d161      	bne.n	8005bd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b12:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <xTaskResumeAll+0x118>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d05d      	beq.n	8005bd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b1a:	e02e      	b.n	8005b7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b1c:	4b33      	ldr	r3, [pc, #204]	; (8005bec <xTaskResumeAll+0x11c>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3318      	adds	r3, #24
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fd72 	bl	8005612 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fd6d 	bl	8005612 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	4b2b      	ldr	r3, [pc, #172]	; (8005bf0 <xTaskResumeAll+0x120>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	4a2a      	ldr	r2, [pc, #168]	; (8005bf0 <xTaskResumeAll+0x120>)
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <xTaskResumeAll+0x124>)
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7ff fcf9 	bl	8005558 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <xTaskResumeAll+0x128>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d302      	bcc.n	8005b7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <xTaskResumeAll+0x12c>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <xTaskResumeAll+0x11c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cc      	bne.n	8005b1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b88:	f000 fa08 	bl	8005f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b8c:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <xTaskResumeAll+0x130>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b98:	f000 f836 	bl	8005c08 <xTaskIncrementTick>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ba2:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <xTaskResumeAll+0x12c>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f1      	bne.n	8005b98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <xTaskResumeAll+0x130>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <xTaskResumeAll+0x12c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bc6:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <xTaskResumeAll+0x134>)
 8005bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd6:	f000 fbc5 	bl	8006364 <vPortExitCritical>

	return xAlreadyYielded;
 8005bda:	68bb      	ldr	r3, [r7, #8]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20000418 	.word	0x20000418
 8005be8:	200003f0 	.word	0x200003f0
 8005bec:	200003b0 	.word	0x200003b0
 8005bf0:	200003f8 	.word	0x200003f8
 8005bf4:	200002f4 	.word	0x200002f4
 8005bf8:	200002f0 	.word	0x200002f0
 8005bfc:	20000404 	.word	0x20000404
 8005c00:	20000400 	.word	0x20000400
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c12:	4b4e      	ldr	r3, [pc, #312]	; (8005d4c <xTaskIncrementTick+0x144>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8088 	bne.w	8005d2c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c1c:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <xTaskIncrementTick+0x148>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c24:	4a4a      	ldr	r2, [pc, #296]	; (8005d50 <xTaskIncrementTick+0x148>)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d120      	bne.n	8005c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c30:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <xTaskIncrementTick+0x14c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	603b      	str	r3, [r7, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	e7fe      	b.n	8005c4e <xTaskIncrementTick+0x46>
 8005c50:	4b40      	ldr	r3, [pc, #256]	; (8005d54 <xTaskIncrementTick+0x14c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4b40      	ldr	r3, [pc, #256]	; (8005d58 <xTaskIncrementTick+0x150>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3e      	ldr	r2, [pc, #248]	; (8005d54 <xTaskIncrementTick+0x14c>)
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	4a3e      	ldr	r2, [pc, #248]	; (8005d58 <xTaskIncrementTick+0x150>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	4b3d      	ldr	r3, [pc, #244]	; (8005d5c <xTaskIncrementTick+0x154>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <xTaskIncrementTick+0x154>)
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	f000 f995 	bl	8005f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c72:	4b3b      	ldr	r3, [pc, #236]	; (8005d60 <xTaskIncrementTick+0x158>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d348      	bcc.n	8005d0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c7c:	4b35      	ldr	r3, [pc, #212]	; (8005d54 <xTaskIncrementTick+0x14c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c86:	4b36      	ldr	r3, [pc, #216]	; (8005d60 <xTaskIncrementTick+0x158>)
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	601a      	str	r2, [r3, #0]
					break;
 8005c8e:	e03e      	b.n	8005d0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c90:	4b30      	ldr	r3, [pc, #192]	; (8005d54 <xTaskIncrementTick+0x14c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d203      	bcs.n	8005cb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ca8:	4a2d      	ldr	r2, [pc, #180]	; (8005d60 <xTaskIncrementTick+0x158>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cae:	e02e      	b.n	8005d0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fcac 	bl	8005612 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fca3 	bl	8005612 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <xTaskIncrementTick+0x15c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <xTaskIncrementTick+0x15c>)
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <xTaskIncrementTick+0x160>)
 8005cec:	441a      	add	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	f7ff fc2f 	bl	8005558 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <xTaskIncrementTick+0x164>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3b9      	bcc.n	8005c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d0c:	e7b6      	b.n	8005c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d0e:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <xTaskIncrementTick+0x164>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d14:	4914      	ldr	r1, [pc, #80]	; (8005d68 <xTaskIncrementTick+0x160>)
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d907      	bls.n	8005d36 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005d26:	2301      	movs	r3, #1
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e004      	b.n	8005d36 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xTaskIncrementTick+0x168>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <xTaskIncrementTick+0x168>)
 8005d34:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <xTaskIncrementTick+0x16c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d42:	697b      	ldr	r3, [r7, #20]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000418 	.word	0x20000418
 8005d50:	200003f4 	.word	0x200003f4
 8005d54:	200003a8 	.word	0x200003a8
 8005d58:	200003ac 	.word	0x200003ac
 8005d5c:	20000408 	.word	0x20000408
 8005d60:	20000410 	.word	0x20000410
 8005d64:	200003f8 	.word	0x200003f8
 8005d68:	200002f4 	.word	0x200002f4
 8005d6c:	200002f0 	.word	0x200002f0
 8005d70:	20000400 	.word	0x20000400
 8005d74:	20000404 	.word	0x20000404

08005d78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d7e:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <vTaskSwitchContext+0xa4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <vTaskSwitchContext+0xa8>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d8c:	e03f      	b.n	8005e0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005d8e:	4b24      	ldr	r3, [pc, #144]	; (8005e20 <vTaskSwitchContext+0xa8>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d94:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <vTaskSwitchContext+0xac>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	fab3 f383 	clz	r3, r3
 8005da0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005da2:	7afb      	ldrb	r3, [r7, #11]
 8005da4:	f1c3 031f 	rsb	r3, r3, #31
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	491f      	ldr	r1, [pc, #124]	; (8005e28 <vTaskSwitchContext+0xb0>)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <vTaskSwitchContext+0x5a>
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4a12      	ldr	r2, [pc, #72]	; (8005e28 <vTaskSwitchContext+0xb0>)
 8005de0:	4413      	add	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3308      	adds	r3, #8
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d104      	bne.n	8005e04 <vTaskSwitchContext+0x8c>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <vTaskSwitchContext+0xb4>)
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000418 	.word	0x20000418
 8005e20:	20000404 	.word	0x20000404
 8005e24:	200003f8 	.word	0x200003f8
 8005e28:	200002f4 	.word	0x200002f4
 8005e2c:	200002f0 	.word	0x200002f0

08005e30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e38:	f000 f852 	bl	8005ee0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e3c:	4b06      	ldr	r3, [pc, #24]	; (8005e58 <prvIdleTask+0x28>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d9f9      	bls.n	8005e38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <prvIdleTask+0x2c>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e54:	e7f0      	b.n	8005e38 <prvIdleTask+0x8>
 8005e56:	bf00      	nop
 8005e58:	200002f4 	.word	0x200002f4
 8005e5c:	e000ed04 	.word	0xe000ed04

08005e60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	e00c      	b.n	8005e86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a12      	ldr	r2, [pc, #72]	; (8005ec0 <prvInitialiseTaskLists+0x60>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fb3f 	bl	80054fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3301      	adds	r3, #1
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b06      	cmp	r3, #6
 8005e8a:	d9ef      	bls.n	8005e6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e8c:	480d      	ldr	r0, [pc, #52]	; (8005ec4 <prvInitialiseTaskLists+0x64>)
 8005e8e:	f7ff fb36 	bl	80054fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e92:	480d      	ldr	r0, [pc, #52]	; (8005ec8 <prvInitialiseTaskLists+0x68>)
 8005e94:	f7ff fb33 	bl	80054fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e98:	480c      	ldr	r0, [pc, #48]	; (8005ecc <prvInitialiseTaskLists+0x6c>)
 8005e9a:	f7ff fb30 	bl	80054fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e9e:	480c      	ldr	r0, [pc, #48]	; (8005ed0 <prvInitialiseTaskLists+0x70>)
 8005ea0:	f7ff fb2d 	bl	80054fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ea4:	480b      	ldr	r0, [pc, #44]	; (8005ed4 <prvInitialiseTaskLists+0x74>)
 8005ea6:	f7ff fb2a 	bl	80054fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <prvInitialiseTaskLists+0x78>)
 8005eac:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <prvInitialiseTaskLists+0x64>)
 8005eae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <prvInitialiseTaskLists+0x7c>)
 8005eb2:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <prvInitialiseTaskLists+0x68>)
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200002f4 	.word	0x200002f4
 8005ec4:	20000380 	.word	0x20000380
 8005ec8:	20000394 	.word	0x20000394
 8005ecc:	200003b0 	.word	0x200003b0
 8005ed0:	200003c4 	.word	0x200003c4
 8005ed4:	200003dc 	.word	0x200003dc
 8005ed8:	200003a8 	.word	0x200003a8
 8005edc:	200003ac 	.word	0x200003ac

08005ee0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ee6:	e019      	b.n	8005f1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ee8:	f000 fa0c 	bl	8006304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eec:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <prvCheckTasksWaitingTermination+0x50>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7ff fb8a 	bl	8005612 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <prvCheckTasksWaitingTermination+0x54>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <prvCheckTasksWaitingTermination+0x54>)
 8005f06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f12:	f000 fa27 	bl	8006364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f810 	bl	8005f3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <prvCheckTasksWaitingTermination+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e1      	bne.n	8005ee8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200003c4 	.word	0x200003c4
 8005f34:	200003f0 	.word	0x200003f0
 8005f38:	200003d8 	.word	0x200003d8

08005f3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fb7c 	bl	8006650 <vPortFree>
				vPortFree( pxTCB );
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fb79 	bl	8006650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f5e:	e018      	b.n	8005f92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d103      	bne.n	8005f72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fb70 	bl	8006650 <vPortFree>
	}
 8005f70:	e00f      	b.n	8005f92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d00a      	beq.n	8005f92 <prvDeleteTCB+0x56>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60fb      	str	r3, [r7, #12]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <prvDeleteTCB+0x54>
	}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <prvResetNextTaskUnblockTime+0x38>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fb4:	e008      	b.n	8005fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <prvResetNextTaskUnblockTime+0x38>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8005fc6:	6013      	str	r3, [r2, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	200003a8 	.word	0x200003a8
 8005fd8:	20000410 	.word	0x20000410

08005fdc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fe6:	4b29      	ldr	r3, [pc, #164]	; (800608c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fec:	4b28      	ldr	r3, [pc, #160]	; (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fb0d 	bl	8005612 <uxListRemove>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10b      	bne.n	8006016 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ffe:	4b24      	ldr	r3, [pc, #144]	; (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	2201      	movs	r2, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	43da      	mvns	r2, r3
 800600c:	4b21      	ldr	r3, [pc, #132]	; (8006094 <prvAddCurrentTaskToDelayedList+0xb8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4013      	ands	r3, r2
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006014:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d10a      	bne.n	8006034 <prvAddCurrentTaskToDelayedList+0x58>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006024:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	481a      	ldr	r0, [pc, #104]	; (8006098 <prvAddCurrentTaskToDelayedList+0xbc>)
 800602e:	f7ff fa93 	bl	8005558 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006032:	e026      	b.n	8006082 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800603c:	4b14      	ldr	r3, [pc, #80]	; (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d209      	bcs.n	8006060 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604c:	4b13      	ldr	r3, [pc, #76]	; (800609c <prvAddCurrentTaskToDelayedList+0xc0>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7ff faa1 	bl	80055a0 <vListInsert>
}
 800605e:	e010      	b.n	8006082 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7ff fa97 	bl	80055a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	d202      	bcs.n	8006082 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6013      	str	r3, [r2, #0]
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	200003f4 	.word	0x200003f4
 8006090:	200002f0 	.word	0x200002f0
 8006094:	200003f8 	.word	0x200003f8
 8006098:	200003dc 	.word	0x200003dc
 800609c:	200003ac 	.word	0x200003ac
 80060a0:	200003a8 	.word	0x200003a8
 80060a4:	20000410 	.word	0x20000410

080060a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3b04      	subs	r3, #4
 80060b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f023 0201 	bic.w	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3b04      	subs	r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060d8:	4a0c      	ldr	r2, [pc, #48]	; (800610c <pxPortInitialiseStack+0x64>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3b14      	subs	r3, #20
 80060e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3b04      	subs	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f06f 0202 	mvn.w	r2, #2
 80060f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3b20      	subs	r3, #32
 80060fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	08006111 	.word	0x08006111

08006110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <prvTaskExitError+0x54>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d00a      	beq.n	800613a <prvTaskExitError+0x2a>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60fb      	str	r3, [r7, #12]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <prvTaskExitError+0x28>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	60bb      	str	r3, [r7, #8]
}
 800614c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800614e:	bf00      	nop
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0fc      	beq.n	8006150 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	2000000c 	.word	0x2000000c
	...

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	; (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	; (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061c6:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <xPortStartScheduler+0x120>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a46      	ldr	r2, [pc, #280]	; (80062e4 <xPortStartScheduler+0x124>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10a      	bne.n	80061e6 <xPortStartScheduler+0x26>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061e6:	4b3e      	ldr	r3, [pc, #248]	; (80062e0 <xPortStartScheduler+0x120>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a3f      	ldr	r2, [pc, #252]	; (80062e8 <xPortStartScheduler+0x128>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d10a      	bne.n	8006206 <xPortStartScheduler+0x46>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	60fb      	str	r3, [r7, #12]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <xPortStartScheduler+0x12c>)
 8006208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	22ff      	movs	r2, #255	; 0xff
 8006216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006228:	b2da      	uxtb	r2, r3
 800622a:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <xPortStartScheduler+0x130>)
 800622c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800622e:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <xPortStartScheduler+0x134>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006234:	e009      	b.n	800624a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006236:	4b2f      	ldr	r3, [pc, #188]	; (80062f4 <xPortStartScheduler+0x134>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <xPortStartScheduler+0x134>)
 800623e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d0ef      	beq.n	8006236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006256:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <xPortStartScheduler+0x134>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1c3 0307 	rsb	r3, r3, #7
 800625e:	2b04      	cmp	r3, #4
 8006260:	d00a      	beq.n	8006278 <xPortStartScheduler+0xb8>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60bb      	str	r3, [r7, #8]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006278:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <xPortStartScheduler+0x134>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	4a1d      	ldr	r2, [pc, #116]	; (80062f4 <xPortStartScheduler+0x134>)
 8006280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006282:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <xPortStartScheduler+0x134>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800628a:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <xPortStartScheduler+0x134>)
 800628c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006296:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <xPortStartScheduler+0x138>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <xPortStartScheduler+0x138>)
 800629c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <xPortStartScheduler+0x138>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <xPortStartScheduler+0x138>)
 80062a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062ae:	f000 f8dd 	bl	800646c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <xPortStartScheduler+0x13c>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062b8:	f000 f8fc 	bl	80064b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <xPortStartScheduler+0x140>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a0f      	ldr	r2, [pc, #60]	; (8006300 <xPortStartScheduler+0x140>)
 80062c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062c8:	f7ff ff66 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062cc:	f7ff fd54 	bl	8005d78 <vTaskSwitchContext>
	prvTaskExitError();
 80062d0:	f7ff ff1e 	bl	8006110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	e000ed00 	.word	0xe000ed00
 80062e4:	410fc271 	.word	0x410fc271
 80062e8:	410fc270 	.word	0x410fc270
 80062ec:	e000e400 	.word	0xe000e400
 80062f0:	2000041c 	.word	0x2000041c
 80062f4:	20000420 	.word	0x20000420
 80062f8:	e000ed20 	.word	0xe000ed20
 80062fc:	2000000c 	.word	0x2000000c
 8006300:	e000ef34 	.word	0xe000ef34

08006304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	607b      	str	r3, [r7, #4]
}
 800631c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <vPortEnterCritical+0x58>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a0d      	ldr	r2, [pc, #52]	; (800635c <vPortEnterCritical+0x58>)
 8006326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <vPortEnterCritical+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d10f      	bne.n	8006350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortEnterCritical+0x5c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <vPortEnterCritical+0x4c>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	603b      	str	r3, [r7, #0]
}
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <vPortEnterCritical+0x4a>
	}
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	2000000c 	.word	0x2000000c
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <vPortExitCritical+0x50>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <vPortExitCritical+0x24>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	607b      	str	r3, [r7, #4]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006388:	4b0a      	ldr	r3, [pc, #40]	; (80063b4 <vPortExitCritical+0x50>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3b01      	subs	r3, #1
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <vPortExitCritical+0x50>)
 8006390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006392:	4b08      	ldr	r3, [pc, #32]	; (80063b4 <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <vPortExitCritical+0x42>
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	2000000c 	.word	0x2000000c
	...

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f01e 0f10 	tst.w	lr, #16
 80063d0:	bf08      	it	eq
 80063d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063e4:	f380 8811 	msr	BASEPRI, r0
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f7ff fcc2 	bl	8005d78 <vTaskSwitchContext>
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f380 8811 	msr	BASEPRI, r0
 80063fc:	bc09      	pop	{r0, r3}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf08      	it	eq
 800640c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006410:	f380 8809 	msr	PSP, r0
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst>:
 8006420:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
}
 8006440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006442:	f7ff fbe1 	bl	8005c08 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <SysTick_Handler+0x40>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <vPortSetupTimerInterrupt+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647c:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <vPortSetupTimerInterrupt+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <vPortSetupTimerInterrupt+0x40>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <vPortSetupTimerInterrupt+0x44>)
 800648a:	3b01      	subs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648e:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010
 80064a4:	e000e018 	.word	0xe000e018
 80064a8:	20000000 	.word	0x20000000
 80064ac:	10624dd3 	.word	0x10624dd3
 80064b0:	e000e014 	.word	0xe000e014

080064b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064c4 <vPortEnableVFP+0x10>
 80064b8:	6801      	ldr	r1, [r0, #0]
 80064ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064be:	6001      	str	r1, [r0, #0]
 80064c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064c2:	bf00      	nop
 80064c4:	e000ed88 	.word	0xe000ed88

080064c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064d4:	f7ff faee 	bl	8005ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064d8:	4b58      	ldr	r3, [pc, #352]	; (800663c <pvPortMalloc+0x174>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064e0:	f000 f910 	bl	8006704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064e4:	4b56      	ldr	r3, [pc, #344]	; (8006640 <pvPortMalloc+0x178>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 808e 	bne.w	800660e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01d      	beq.n	8006534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064f8:	2208      	movs	r2, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d014      	beq.n	8006534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	3308      	adds	r3, #8
 8006512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <pvPortMalloc+0x6c>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	617b      	str	r3, [r7, #20]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d069      	beq.n	800660e <pvPortMalloc+0x146>
 800653a:	4b42      	ldr	r3, [pc, #264]	; (8006644 <pvPortMalloc+0x17c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	429a      	cmp	r2, r3
 8006542:	d864      	bhi.n	800660e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006544:	4b40      	ldr	r3, [pc, #256]	; (8006648 <pvPortMalloc+0x180>)
 8006546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006548:	4b3f      	ldr	r3, [pc, #252]	; (8006648 <pvPortMalloc+0x180>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800654e:	e004      	b.n	800655a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <pvPortMalloc+0xa4>
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d1f1      	bne.n	8006550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800656c:	4b33      	ldr	r3, [pc, #204]	; (800663c <pvPortMalloc+0x174>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	429a      	cmp	r2, r3
 8006574:	d04b      	beq.n	800660e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2208      	movs	r2, #8
 800657c:	4413      	add	r3, r2
 800657e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	1ad2      	subs	r2, r2, r3
 8006590:	2308      	movs	r3, #8
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	429a      	cmp	r2, r3
 8006596:	d91f      	bls.n	80065d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <pvPortMalloc+0xf8>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	613b      	str	r3, [r7, #16]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d2:	69b8      	ldr	r0, [r7, #24]
 80065d4:	f000 f8f8 	bl	80067c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d8:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <pvPortMalloc+0x17c>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <pvPortMalloc+0x17c>)
 80065e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <pvPortMalloc+0x17c>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b18      	ldr	r3, [pc, #96]	; (800664c <pvPortMalloc+0x184>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d203      	bcs.n	80065fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065f2:	4b14      	ldr	r3, [pc, #80]	; (8006644 <pvPortMalloc+0x17c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <pvPortMalloc+0x184>)
 80065f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <pvPortMalloc+0x178>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	431a      	orrs	r2, r3
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800660e:	f7ff fa5f 	bl	8005ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <pvPortMalloc+0x16a>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <pvPortMalloc+0x168>
	return pvReturn;
 8006632:	69fb      	ldr	r3, [r7, #28]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3728      	adds	r7, #40	; 0x28
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	2000402c 	.word	0x2000402c
 8006640:	20004038 	.word	0x20004038
 8006644:	20004030 	.word	0x20004030
 8006648:	20004024 	.word	0x20004024
 800664c:	20004034 	.word	0x20004034

08006650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d048      	beq.n	80066f4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006662:	2308      	movs	r3, #8
 8006664:	425b      	negs	r3, r3
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <vPortFree+0xac>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <vPortFree+0x44>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <vPortFree+0x62>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60bb      	str	r3, [r7, #8]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	4b11      	ldr	r3, [pc, #68]	; (80066fc <vPortFree+0xac>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d019      	beq.n	80066f4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d115      	bne.n	80066f4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <vPortFree+0xac>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066d8:	f7ff f9ec 	bl	8005ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <vPortFree+0xb0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4413      	add	r3, r2
 80066e6:	4a06      	ldr	r2, [pc, #24]	; (8006700 <vPortFree+0xb0>)
 80066e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ea:	6938      	ldr	r0, [r7, #16]
 80066ec:	f000 f86c 	bl	80067c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066f0:	f7ff f9ee 	bl	8005ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066f4:	bf00      	nop
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20004038 	.word	0x20004038
 8006700:	20004030 	.word	0x20004030

08006704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800670a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800670e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006710:	4b27      	ldr	r3, [pc, #156]	; (80067b0 <prvHeapInit+0xac>)
 8006712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00c      	beq.n	8006738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3307      	adds	r3, #7
 8006722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	4a1f      	ldr	r2, [pc, #124]	; (80067b0 <prvHeapInit+0xac>)
 8006734:	4413      	add	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <prvHeapInit+0xb0>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <prvHeapInit+0xb0>)
 8006744:	2200      	movs	r2, #0
 8006746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006750:	2208      	movs	r2, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0307 	bic.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <prvHeapInit+0xb4>)
 8006764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <prvHeapInit+0xb4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <prvHeapInit+0xb4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	1ad2      	subs	r2, r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <prvHeapInit+0xb4>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <prvHeapInit+0xb8>)
 8006792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	4a09      	ldr	r2, [pc, #36]	; (80067c0 <prvHeapInit+0xbc>)
 800679a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800679c:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <prvHeapInit+0xc0>)
 800679e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	20000424 	.word	0x20000424
 80067b4:	20004024 	.word	0x20004024
 80067b8:	2000402c 	.word	0x2000402c
 80067bc:	20004034 	.word	0x20004034
 80067c0:	20004030 	.word	0x20004030
 80067c4:	20004038 	.word	0x20004038

080067c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067d0:	4b28      	ldr	r3, [pc, #160]	; (8006874 <prvInsertBlockIntoFreeList+0xac>)
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e002      	b.n	80067dc <prvInsertBlockIntoFreeList+0x14>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d8f7      	bhi.n	80067d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4413      	add	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d108      	bne.n	800680a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	441a      	add	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d118      	bne.n	8006850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <prvInsertBlockIntoFreeList+0xb0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d00d      	beq.n	8006846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	441a      	add	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	e008      	b.n	8006858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <prvInsertBlockIntoFreeList+0xb0>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e003      	b.n	8006858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d002      	beq.n	8006866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	20004024 	.word	0x20004024
 8006878:	2000402c 	.word	0x2000402c

0800687c <__errno>:
 800687c:	4b01      	ldr	r3, [pc, #4]	; (8006884 <__errno+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000010 	.word	0x20000010

08006888 <__libc_init_array>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4d0d      	ldr	r5, [pc, #52]	; (80068c0 <__libc_init_array+0x38>)
 800688c:	4c0d      	ldr	r4, [pc, #52]	; (80068c4 <__libc_init_array+0x3c>)
 800688e:	1b64      	subs	r4, r4, r5
 8006890:	10a4      	asrs	r4, r4, #2
 8006892:	2600      	movs	r6, #0
 8006894:	42a6      	cmp	r6, r4
 8006896:	d109      	bne.n	80068ac <__libc_init_array+0x24>
 8006898:	4d0b      	ldr	r5, [pc, #44]	; (80068c8 <__libc_init_array+0x40>)
 800689a:	4c0c      	ldr	r4, [pc, #48]	; (80068cc <__libc_init_array+0x44>)
 800689c:	f001 ff32 	bl	8008704 <_init>
 80068a0:	1b64      	subs	r4, r4, r5
 80068a2:	10a4      	asrs	r4, r4, #2
 80068a4:	2600      	movs	r6, #0
 80068a6:	42a6      	cmp	r6, r4
 80068a8:	d105      	bne.n	80068b6 <__libc_init_array+0x2e>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b0:	4798      	blx	r3
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7ee      	b.n	8006894 <__libc_init_array+0xc>
 80068b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ba:	4798      	blx	r3
 80068bc:	3601      	adds	r6, #1
 80068be:	e7f2      	b.n	80068a6 <__libc_init_array+0x1e>
 80068c0:	08008960 	.word	0x08008960
 80068c4:	08008960 	.word	0x08008960
 80068c8:	08008960 	.word	0x08008960
 80068cc:	08008964 	.word	0x08008964

080068d0 <malloc>:
 80068d0:	4b02      	ldr	r3, [pc, #8]	; (80068dc <malloc+0xc>)
 80068d2:	4601      	mov	r1, r0
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	f000 b85b 	b.w	8006990 <_malloc_r>
 80068da:	bf00      	nop
 80068dc:	20000010 	.word	0x20000010

080068e0 <memset>:
 80068e0:	4402      	add	r2, r0
 80068e2:	4603      	mov	r3, r0
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d100      	bne.n	80068ea <memset+0xa>
 80068e8:	4770      	bx	lr
 80068ea:	f803 1b01 	strb.w	r1, [r3], #1
 80068ee:	e7f9      	b.n	80068e4 <memset+0x4>

080068f0 <_free_r>:
 80068f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068f2:	2900      	cmp	r1, #0
 80068f4:	d048      	beq.n	8006988 <_free_r+0x98>
 80068f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068fa:	9001      	str	r0, [sp, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006902:	bfb8      	it	lt
 8006904:	18e4      	addlt	r4, r4, r3
 8006906:	f000 f9bd 	bl	8006c84 <__malloc_lock>
 800690a:	4a20      	ldr	r2, [pc, #128]	; (800698c <_free_r+0x9c>)
 800690c:	9801      	ldr	r0, [sp, #4]
 800690e:	6813      	ldr	r3, [r2, #0]
 8006910:	4615      	mov	r5, r2
 8006912:	b933      	cbnz	r3, 8006922 <_free_r+0x32>
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	6014      	str	r4, [r2, #0]
 8006918:	b003      	add	sp, #12
 800691a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800691e:	f000 b9b7 	b.w	8006c90 <__malloc_unlock>
 8006922:	42a3      	cmp	r3, r4
 8006924:	d90b      	bls.n	800693e <_free_r+0x4e>
 8006926:	6821      	ldr	r1, [r4, #0]
 8006928:	1862      	adds	r2, r4, r1
 800692a:	4293      	cmp	r3, r2
 800692c:	bf04      	itt	eq
 800692e:	681a      	ldreq	r2, [r3, #0]
 8006930:	685b      	ldreq	r3, [r3, #4]
 8006932:	6063      	str	r3, [r4, #4]
 8006934:	bf04      	itt	eq
 8006936:	1852      	addeq	r2, r2, r1
 8006938:	6022      	streq	r2, [r4, #0]
 800693a:	602c      	str	r4, [r5, #0]
 800693c:	e7ec      	b.n	8006918 <_free_r+0x28>
 800693e:	461a      	mov	r2, r3
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	b10b      	cbz	r3, 8006948 <_free_r+0x58>
 8006944:	42a3      	cmp	r3, r4
 8006946:	d9fa      	bls.n	800693e <_free_r+0x4e>
 8006948:	6811      	ldr	r1, [r2, #0]
 800694a:	1855      	adds	r5, r2, r1
 800694c:	42a5      	cmp	r5, r4
 800694e:	d10b      	bne.n	8006968 <_free_r+0x78>
 8006950:	6824      	ldr	r4, [r4, #0]
 8006952:	4421      	add	r1, r4
 8006954:	1854      	adds	r4, r2, r1
 8006956:	42a3      	cmp	r3, r4
 8006958:	6011      	str	r1, [r2, #0]
 800695a:	d1dd      	bne.n	8006918 <_free_r+0x28>
 800695c:	681c      	ldr	r4, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	6053      	str	r3, [r2, #4]
 8006962:	4421      	add	r1, r4
 8006964:	6011      	str	r1, [r2, #0]
 8006966:	e7d7      	b.n	8006918 <_free_r+0x28>
 8006968:	d902      	bls.n	8006970 <_free_r+0x80>
 800696a:	230c      	movs	r3, #12
 800696c:	6003      	str	r3, [r0, #0]
 800696e:	e7d3      	b.n	8006918 <_free_r+0x28>
 8006970:	6825      	ldr	r5, [r4, #0]
 8006972:	1961      	adds	r1, r4, r5
 8006974:	428b      	cmp	r3, r1
 8006976:	bf04      	itt	eq
 8006978:	6819      	ldreq	r1, [r3, #0]
 800697a:	685b      	ldreq	r3, [r3, #4]
 800697c:	6063      	str	r3, [r4, #4]
 800697e:	bf04      	itt	eq
 8006980:	1949      	addeq	r1, r1, r5
 8006982:	6021      	streq	r1, [r4, #0]
 8006984:	6054      	str	r4, [r2, #4]
 8006986:	e7c7      	b.n	8006918 <_free_r+0x28>
 8006988:	b003      	add	sp, #12
 800698a:	bd30      	pop	{r4, r5, pc}
 800698c:	2000403c 	.word	0x2000403c

08006990 <_malloc_r>:
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	1ccd      	adds	r5, r1, #3
 8006994:	f025 0503 	bic.w	r5, r5, #3
 8006998:	3508      	adds	r5, #8
 800699a:	2d0c      	cmp	r5, #12
 800699c:	bf38      	it	cc
 800699e:	250c      	movcc	r5, #12
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	4606      	mov	r6, r0
 80069a4:	db01      	blt.n	80069aa <_malloc_r+0x1a>
 80069a6:	42a9      	cmp	r1, r5
 80069a8:	d903      	bls.n	80069b2 <_malloc_r+0x22>
 80069aa:	230c      	movs	r3, #12
 80069ac:	6033      	str	r3, [r6, #0]
 80069ae:	2000      	movs	r0, #0
 80069b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b2:	f000 f967 	bl	8006c84 <__malloc_lock>
 80069b6:	4921      	ldr	r1, [pc, #132]	; (8006a3c <_malloc_r+0xac>)
 80069b8:	680a      	ldr	r2, [r1, #0]
 80069ba:	4614      	mov	r4, r2
 80069bc:	b99c      	cbnz	r4, 80069e6 <_malloc_r+0x56>
 80069be:	4f20      	ldr	r7, [pc, #128]	; (8006a40 <_malloc_r+0xb0>)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	b923      	cbnz	r3, 80069ce <_malloc_r+0x3e>
 80069c4:	4621      	mov	r1, r4
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 f854 	bl	8006a74 <_sbrk_r>
 80069cc:	6038      	str	r0, [r7, #0]
 80069ce:	4629      	mov	r1, r5
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 f84f 	bl	8006a74 <_sbrk_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	d123      	bne.n	8006a22 <_malloc_r+0x92>
 80069da:	230c      	movs	r3, #12
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 f956 	bl	8006c90 <__malloc_unlock>
 80069e4:	e7e3      	b.n	80069ae <_malloc_r+0x1e>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	1b5b      	subs	r3, r3, r5
 80069ea:	d417      	bmi.n	8006a1c <_malloc_r+0x8c>
 80069ec:	2b0b      	cmp	r3, #11
 80069ee:	d903      	bls.n	80069f8 <_malloc_r+0x68>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	441c      	add	r4, r3
 80069f4:	6025      	str	r5, [r4, #0]
 80069f6:	e004      	b.n	8006a02 <_malloc_r+0x72>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	42a2      	cmp	r2, r4
 80069fc:	bf0c      	ite	eq
 80069fe:	600b      	streq	r3, [r1, #0]
 8006a00:	6053      	strne	r3, [r2, #4]
 8006a02:	4630      	mov	r0, r6
 8006a04:	f000 f944 	bl	8006c90 <__malloc_unlock>
 8006a08:	f104 000b 	add.w	r0, r4, #11
 8006a0c:	1d23      	adds	r3, r4, #4
 8006a0e:	f020 0007 	bic.w	r0, r0, #7
 8006a12:	1ac2      	subs	r2, r0, r3
 8006a14:	d0cc      	beq.n	80069b0 <_malloc_r+0x20>
 8006a16:	1a1b      	subs	r3, r3, r0
 8006a18:	50a3      	str	r3, [r4, r2]
 8006a1a:	e7c9      	b.n	80069b0 <_malloc_r+0x20>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	6864      	ldr	r4, [r4, #4]
 8006a20:	e7cc      	b.n	80069bc <_malloc_r+0x2c>
 8006a22:	1cc4      	adds	r4, r0, #3
 8006a24:	f024 0403 	bic.w	r4, r4, #3
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	d0e3      	beq.n	80069f4 <_malloc_r+0x64>
 8006a2c:	1a21      	subs	r1, r4, r0
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f000 f820 	bl	8006a74 <_sbrk_r>
 8006a34:	3001      	adds	r0, #1
 8006a36:	d1dd      	bne.n	80069f4 <_malloc_r+0x64>
 8006a38:	e7cf      	b.n	80069da <_malloc_r+0x4a>
 8006a3a:	bf00      	nop
 8006a3c:	2000403c 	.word	0x2000403c
 8006a40:	20004040 	.word	0x20004040

08006a44 <iprintf>:
 8006a44:	b40f      	push	{r0, r1, r2, r3}
 8006a46:	4b0a      	ldr	r3, [pc, #40]	; (8006a70 <iprintf+0x2c>)
 8006a48:	b513      	push	{r0, r1, r4, lr}
 8006a4a:	681c      	ldr	r4, [r3, #0]
 8006a4c:	b124      	cbz	r4, 8006a58 <iprintf+0x14>
 8006a4e:	69a3      	ldr	r3, [r4, #24]
 8006a50:	b913      	cbnz	r3, 8006a58 <iprintf+0x14>
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 f876 	bl	8006b44 <__sinit>
 8006a58:	ab05      	add	r3, sp, #20
 8006a5a:	9a04      	ldr	r2, [sp, #16]
 8006a5c:	68a1      	ldr	r1, [r4, #8]
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 f945 	bl	8006cf0 <_vfiprintf_r>
 8006a66:	b002      	add	sp, #8
 8006a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a6c:	b004      	add	sp, #16
 8006a6e:	4770      	bx	lr
 8006a70:	20000010 	.word	0x20000010

08006a74 <_sbrk_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d06      	ldr	r5, [pc, #24]	; (8006a90 <_sbrk_r+0x1c>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	f7fb f99a 	bl	8001db8 <_sbrk>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_sbrk_r+0x1a>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_sbrk_r+0x1a>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20004364 	.word	0x20004364

08006a94 <std>:
 8006a94:	2300      	movs	r3, #0
 8006a96:	b510      	push	{r4, lr}
 8006a98:	4604      	mov	r4, r0
 8006a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aa2:	6083      	str	r3, [r0, #8]
 8006aa4:	8181      	strh	r1, [r0, #12]
 8006aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8006aa8:	81c2      	strh	r2, [r0, #14]
 8006aaa:	6183      	str	r3, [r0, #24]
 8006aac:	4619      	mov	r1, r3
 8006aae:	2208      	movs	r2, #8
 8006ab0:	305c      	adds	r0, #92	; 0x5c
 8006ab2:	f7ff ff15 	bl	80068e0 <memset>
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <std+0x38>)
 8006ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <std+0x3c>)
 8006abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <std+0x40>)
 8006ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ac2:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <std+0x44>)
 8006ac4:	6224      	str	r4, [r4, #32]
 8006ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	08007279 	.word	0x08007279
 8006ad0:	0800729b 	.word	0x0800729b
 8006ad4:	080072d3 	.word	0x080072d3
 8006ad8:	080072f7 	.word	0x080072f7

08006adc <_cleanup_r>:
 8006adc:	4901      	ldr	r1, [pc, #4]	; (8006ae4 <_cleanup_r+0x8>)
 8006ade:	f000 b8af 	b.w	8006c40 <_fwalk_reent>
 8006ae2:	bf00      	nop
 8006ae4:	080075d1 	.word	0x080075d1

08006ae8 <__sfmoreglue>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	1e4a      	subs	r2, r1, #1
 8006aec:	2568      	movs	r5, #104	; 0x68
 8006aee:	4355      	muls	r5, r2
 8006af0:	460e      	mov	r6, r1
 8006af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006af6:	f7ff ff4b 	bl	8006990 <_malloc_r>
 8006afa:	4604      	mov	r4, r0
 8006afc:	b140      	cbz	r0, 8006b10 <__sfmoreglue+0x28>
 8006afe:	2100      	movs	r1, #0
 8006b00:	e9c0 1600 	strd	r1, r6, [r0]
 8006b04:	300c      	adds	r0, #12
 8006b06:	60a0      	str	r0, [r4, #8]
 8006b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b0c:	f7ff fee8 	bl	80068e0 <memset>
 8006b10:	4620      	mov	r0, r4
 8006b12:	bd70      	pop	{r4, r5, r6, pc}

08006b14 <__sfp_lock_acquire>:
 8006b14:	4801      	ldr	r0, [pc, #4]	; (8006b1c <__sfp_lock_acquire+0x8>)
 8006b16:	f000 b8b3 	b.w	8006c80 <__retarget_lock_acquire_recursive>
 8006b1a:	bf00      	nop
 8006b1c:	20004360 	.word	0x20004360

08006b20 <__sfp_lock_release>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__sfp_lock_release+0x8>)
 8006b22:	f000 b8ae 	b.w	8006c82 <__retarget_lock_release_recursive>
 8006b26:	bf00      	nop
 8006b28:	20004360 	.word	0x20004360

08006b2c <__sinit_lock_acquire>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__sinit_lock_acquire+0x8>)
 8006b2e:	f000 b8a7 	b.w	8006c80 <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	2000435b 	.word	0x2000435b

08006b38 <__sinit_lock_release>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__sinit_lock_release+0x8>)
 8006b3a:	f000 b8a2 	b.w	8006c82 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	2000435b 	.word	0x2000435b

08006b44 <__sinit>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	f7ff fff0 	bl	8006b2c <__sinit_lock_acquire>
 8006b4c:	69a3      	ldr	r3, [r4, #24]
 8006b4e:	b11b      	cbz	r3, 8006b58 <__sinit+0x14>
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f7ff bff0 	b.w	8006b38 <__sinit_lock_release>
 8006b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <__sinit+0x68>)
 8006b60:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <__sinit+0x6c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	bf04      	itt	eq
 8006b6a:	2301      	moveq	r3, #1
 8006b6c:	61a3      	streq	r3, [r4, #24]
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 f820 	bl	8006bb4 <__sfp>
 8006b74:	6060      	str	r0, [r4, #4]
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 f81c 	bl	8006bb4 <__sfp>
 8006b7c:	60a0      	str	r0, [r4, #8]
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 f818 	bl	8006bb4 <__sfp>
 8006b84:	2200      	movs	r2, #0
 8006b86:	60e0      	str	r0, [r4, #12]
 8006b88:	2104      	movs	r1, #4
 8006b8a:	6860      	ldr	r0, [r4, #4]
 8006b8c:	f7ff ff82 	bl	8006a94 <std>
 8006b90:	68a0      	ldr	r0, [r4, #8]
 8006b92:	2201      	movs	r2, #1
 8006b94:	2109      	movs	r1, #9
 8006b96:	f7ff ff7d 	bl	8006a94 <std>
 8006b9a:	68e0      	ldr	r0, [r4, #12]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	2112      	movs	r1, #18
 8006ba0:	f7ff ff78 	bl	8006a94 <std>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61a3      	str	r3, [r4, #24]
 8006ba8:	e7d2      	b.n	8006b50 <__sinit+0xc>
 8006baa:	bf00      	nop
 8006bac:	08008880 	.word	0x08008880
 8006bb0:	08006add 	.word	0x08006add

08006bb4 <__sfp>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	f7ff ffac 	bl	8006b14 <__sfp_lock_acquire>
 8006bbc:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <__sfp+0x84>)
 8006bbe:	681e      	ldr	r6, [r3, #0]
 8006bc0:	69b3      	ldr	r3, [r6, #24]
 8006bc2:	b913      	cbnz	r3, 8006bca <__sfp+0x16>
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff ffbd 	bl	8006b44 <__sinit>
 8006bca:	3648      	adds	r6, #72	; 0x48
 8006bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	d503      	bpl.n	8006bdc <__sfp+0x28>
 8006bd4:	6833      	ldr	r3, [r6, #0]
 8006bd6:	b30b      	cbz	r3, 8006c1c <__sfp+0x68>
 8006bd8:	6836      	ldr	r6, [r6, #0]
 8006bda:	e7f7      	b.n	8006bcc <__sfp+0x18>
 8006bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006be0:	b9d5      	cbnz	r5, 8006c18 <__sfp+0x64>
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <__sfp+0x88>)
 8006be4:	60e3      	str	r3, [r4, #12]
 8006be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bea:	6665      	str	r5, [r4, #100]	; 0x64
 8006bec:	f000 f847 	bl	8006c7e <__retarget_lock_init_recursive>
 8006bf0:	f7ff ff96 	bl	8006b20 <__sfp_lock_release>
 8006bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bfc:	6025      	str	r5, [r4, #0]
 8006bfe:	61a5      	str	r5, [r4, #24]
 8006c00:	2208      	movs	r2, #8
 8006c02:	4629      	mov	r1, r5
 8006c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c08:	f7ff fe6a 	bl	80068e0 <memset>
 8006c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c14:	4620      	mov	r0, r4
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c18:	3468      	adds	r4, #104	; 0x68
 8006c1a:	e7d9      	b.n	8006bd0 <__sfp+0x1c>
 8006c1c:	2104      	movs	r1, #4
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f7ff ff62 	bl	8006ae8 <__sfmoreglue>
 8006c24:	4604      	mov	r4, r0
 8006c26:	6030      	str	r0, [r6, #0]
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d1d5      	bne.n	8006bd8 <__sfp+0x24>
 8006c2c:	f7ff ff78 	bl	8006b20 <__sfp_lock_release>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	e7ee      	b.n	8006c14 <__sfp+0x60>
 8006c36:	bf00      	nop
 8006c38:	08008880 	.word	0x08008880
 8006c3c:	ffff0001 	.word	0xffff0001

08006c40 <_fwalk_reent>:
 8006c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c44:	4606      	mov	r6, r0
 8006c46:	4688      	mov	r8, r1
 8006c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c4c:	2700      	movs	r7, #0
 8006c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c52:	f1b9 0901 	subs.w	r9, r9, #1
 8006c56:	d505      	bpl.n	8006c64 <_fwalk_reent+0x24>
 8006c58:	6824      	ldr	r4, [r4, #0]
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	d1f7      	bne.n	8006c4e <_fwalk_reent+0xe>
 8006c5e:	4638      	mov	r0, r7
 8006c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c64:	89ab      	ldrh	r3, [r5, #12]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d907      	bls.n	8006c7a <_fwalk_reent+0x3a>
 8006c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	d003      	beq.n	8006c7a <_fwalk_reent+0x3a>
 8006c72:	4629      	mov	r1, r5
 8006c74:	4630      	mov	r0, r6
 8006c76:	47c0      	blx	r8
 8006c78:	4307      	orrs	r7, r0
 8006c7a:	3568      	adds	r5, #104	; 0x68
 8006c7c:	e7e9      	b.n	8006c52 <_fwalk_reent+0x12>

08006c7e <__retarget_lock_init_recursive>:
 8006c7e:	4770      	bx	lr

08006c80 <__retarget_lock_acquire_recursive>:
 8006c80:	4770      	bx	lr

08006c82 <__retarget_lock_release_recursive>:
 8006c82:	4770      	bx	lr

08006c84 <__malloc_lock>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__malloc_lock+0x8>)
 8006c86:	f7ff bffb 	b.w	8006c80 <__retarget_lock_acquire_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	2000435c 	.word	0x2000435c

08006c90 <__malloc_unlock>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__malloc_unlock+0x8>)
 8006c92:	f7ff bff6 	b.w	8006c82 <__retarget_lock_release_recursive>
 8006c96:	bf00      	nop
 8006c98:	2000435c 	.word	0x2000435c

08006c9c <__sfputc_r>:
 8006c9c:	6893      	ldr	r3, [r2, #8]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	b410      	push	{r4}
 8006ca4:	6093      	str	r3, [r2, #8]
 8006ca6:	da08      	bge.n	8006cba <__sfputc_r+0x1e>
 8006ca8:	6994      	ldr	r4, [r2, #24]
 8006caa:	42a3      	cmp	r3, r4
 8006cac:	db01      	blt.n	8006cb2 <__sfputc_r+0x16>
 8006cae:	290a      	cmp	r1, #10
 8006cb0:	d103      	bne.n	8006cba <__sfputc_r+0x1e>
 8006cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb6:	f000 bb23 	b.w	8007300 <__swbuf_r>
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	1c58      	adds	r0, r3, #1
 8006cbe:	6010      	str	r0, [r2, #0]
 8006cc0:	7019      	strb	r1, [r3, #0]
 8006cc2:	4608      	mov	r0, r1
 8006cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <__sfputs_r>:
 8006cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ccc:	4606      	mov	r6, r0
 8006cce:	460f      	mov	r7, r1
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	18d5      	adds	r5, r2, r3
 8006cd4:	42ac      	cmp	r4, r5
 8006cd6:	d101      	bne.n	8006cdc <__sfputs_r+0x12>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e007      	b.n	8006cec <__sfputs_r+0x22>
 8006cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce0:	463a      	mov	r2, r7
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ffda 	bl	8006c9c <__sfputc_r>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	d1f3      	bne.n	8006cd4 <__sfputs_r+0xa>
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf0 <_vfiprintf_r>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	b09d      	sub	sp, #116	; 0x74
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	4698      	mov	r8, r3
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	b118      	cbz	r0, 8006d08 <_vfiprintf_r+0x18>
 8006d00:	6983      	ldr	r3, [r0, #24]
 8006d02:	b90b      	cbnz	r3, 8006d08 <_vfiprintf_r+0x18>
 8006d04:	f7ff ff1e 	bl	8006b44 <__sinit>
 8006d08:	4b89      	ldr	r3, [pc, #548]	; (8006f30 <_vfiprintf_r+0x240>)
 8006d0a:	429d      	cmp	r5, r3
 8006d0c:	d11b      	bne.n	8006d46 <_vfiprintf_r+0x56>
 8006d0e:	6875      	ldr	r5, [r6, #4]
 8006d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d12:	07d9      	lsls	r1, r3, #31
 8006d14:	d405      	bmi.n	8006d22 <_vfiprintf_r+0x32>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	059a      	lsls	r2, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_vfiprintf_r+0x32>
 8006d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d1e:	f7ff ffaf 	bl	8006c80 <__retarget_lock_acquire_recursive>
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	071b      	lsls	r3, r3, #28
 8006d26:	d501      	bpl.n	8006d2c <_vfiprintf_r+0x3c>
 8006d28:	692b      	ldr	r3, [r5, #16]
 8006d2a:	b9eb      	cbnz	r3, 8006d68 <_vfiprintf_r+0x78>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f000 fb4a 	bl	80073c8 <__swsetup_r>
 8006d34:	b1c0      	cbz	r0, 8006d68 <_vfiprintf_r+0x78>
 8006d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d38:	07dc      	lsls	r4, r3, #31
 8006d3a:	d50e      	bpl.n	8006d5a <_vfiprintf_r+0x6a>
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d40:	b01d      	add	sp, #116	; 0x74
 8006d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d46:	4b7b      	ldr	r3, [pc, #492]	; (8006f34 <_vfiprintf_r+0x244>)
 8006d48:	429d      	cmp	r5, r3
 8006d4a:	d101      	bne.n	8006d50 <_vfiprintf_r+0x60>
 8006d4c:	68b5      	ldr	r5, [r6, #8]
 8006d4e:	e7df      	b.n	8006d10 <_vfiprintf_r+0x20>
 8006d50:	4b79      	ldr	r3, [pc, #484]	; (8006f38 <_vfiprintf_r+0x248>)
 8006d52:	429d      	cmp	r5, r3
 8006d54:	bf08      	it	eq
 8006d56:	68f5      	ldreq	r5, [r6, #12]
 8006d58:	e7da      	b.n	8006d10 <_vfiprintf_r+0x20>
 8006d5a:	89ab      	ldrh	r3, [r5, #12]
 8006d5c:	0598      	lsls	r0, r3, #22
 8006d5e:	d4ed      	bmi.n	8006d3c <_vfiprintf_r+0x4c>
 8006d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d62:	f7ff ff8e 	bl	8006c82 <__retarget_lock_release_recursive>
 8006d66:	e7e9      	b.n	8006d3c <_vfiprintf_r+0x4c>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6c:	2320      	movs	r3, #32
 8006d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d76:	2330      	movs	r3, #48	; 0x30
 8006d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f3c <_vfiprintf_r+0x24c>
 8006d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d80:	f04f 0901 	mov.w	r9, #1
 8006d84:	4623      	mov	r3, r4
 8006d86:	469a      	mov	sl, r3
 8006d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d8c:	b10a      	cbz	r2, 8006d92 <_vfiprintf_r+0xa2>
 8006d8e:	2a25      	cmp	r2, #37	; 0x25
 8006d90:	d1f9      	bne.n	8006d86 <_vfiprintf_r+0x96>
 8006d92:	ebba 0b04 	subs.w	fp, sl, r4
 8006d96:	d00b      	beq.n	8006db0 <_vfiprintf_r+0xc0>
 8006d98:	465b      	mov	r3, fp
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ff93 	bl	8006cca <__sfputs_r>
 8006da4:	3001      	adds	r0, #1
 8006da6:	f000 80aa 	beq.w	8006efe <_vfiprintf_r+0x20e>
 8006daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dac:	445a      	add	r2, fp
 8006dae:	9209      	str	r2, [sp, #36]	; 0x24
 8006db0:	f89a 3000 	ldrb.w	r3, [sl]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 80a2 	beq.w	8006efe <_vfiprintf_r+0x20e>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc4:	f10a 0a01 	add.w	sl, sl, #1
 8006dc8:	9304      	str	r3, [sp, #16]
 8006dca:	9307      	str	r3, [sp, #28]
 8006dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006dd2:	4654      	mov	r4, sl
 8006dd4:	2205      	movs	r2, #5
 8006dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dda:	4858      	ldr	r0, [pc, #352]	; (8006f3c <_vfiprintf_r+0x24c>)
 8006ddc:	f7f9 fa10 	bl	8000200 <memchr>
 8006de0:	9a04      	ldr	r2, [sp, #16]
 8006de2:	b9d8      	cbnz	r0, 8006e1c <_vfiprintf_r+0x12c>
 8006de4:	06d1      	lsls	r1, r2, #27
 8006de6:	bf44      	itt	mi
 8006de8:	2320      	movmi	r3, #32
 8006dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dee:	0713      	lsls	r3, r2, #28
 8006df0:	bf44      	itt	mi
 8006df2:	232b      	movmi	r3, #43	; 0x2b
 8006df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006dfe:	d015      	beq.n	8006e2c <_vfiprintf_r+0x13c>
 8006e00:	9a07      	ldr	r2, [sp, #28]
 8006e02:	4654      	mov	r4, sl
 8006e04:	2000      	movs	r0, #0
 8006e06:	f04f 0c0a 	mov.w	ip, #10
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e10:	3b30      	subs	r3, #48	; 0x30
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d94e      	bls.n	8006eb4 <_vfiprintf_r+0x1c4>
 8006e16:	b1b0      	cbz	r0, 8006e46 <_vfiprintf_r+0x156>
 8006e18:	9207      	str	r2, [sp, #28]
 8006e1a:	e014      	b.n	8006e46 <_vfiprintf_r+0x156>
 8006e1c:	eba0 0308 	sub.w	r3, r0, r8
 8006e20:	fa09 f303 	lsl.w	r3, r9, r3
 8006e24:	4313      	orrs	r3, r2
 8006e26:	9304      	str	r3, [sp, #16]
 8006e28:	46a2      	mov	sl, r4
 8006e2a:	e7d2      	b.n	8006dd2 <_vfiprintf_r+0xe2>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	1d19      	adds	r1, r3, #4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	9103      	str	r1, [sp, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfbb      	ittet	lt
 8006e38:	425b      	neglt	r3, r3
 8006e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e3e:	9307      	strge	r3, [sp, #28]
 8006e40:	9307      	strlt	r3, [sp, #28]
 8006e42:	bfb8      	it	lt
 8006e44:	9204      	strlt	r2, [sp, #16]
 8006e46:	7823      	ldrb	r3, [r4, #0]
 8006e48:	2b2e      	cmp	r3, #46	; 0x2e
 8006e4a:	d10c      	bne.n	8006e66 <_vfiprintf_r+0x176>
 8006e4c:	7863      	ldrb	r3, [r4, #1]
 8006e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e50:	d135      	bne.n	8006ebe <_vfiprintf_r+0x1ce>
 8006e52:	9b03      	ldr	r3, [sp, #12]
 8006e54:	1d1a      	adds	r2, r3, #4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	9203      	str	r2, [sp, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfb8      	it	lt
 8006e5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e62:	3402      	adds	r4, #2
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f4c <_vfiprintf_r+0x25c>
 8006e6a:	7821      	ldrb	r1, [r4, #0]
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f7f9 f9c6 	bl	8000200 <memchr>
 8006e74:	b140      	cbz	r0, 8006e88 <_vfiprintf_r+0x198>
 8006e76:	2340      	movs	r3, #64	; 0x40
 8006e78:	eba0 000a 	sub.w	r0, r0, sl
 8006e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8006e80:	9b04      	ldr	r3, [sp, #16]
 8006e82:	4303      	orrs	r3, r0
 8006e84:	3401      	adds	r4, #1
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8c:	482c      	ldr	r0, [pc, #176]	; (8006f40 <_vfiprintf_r+0x250>)
 8006e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e92:	2206      	movs	r2, #6
 8006e94:	f7f9 f9b4 	bl	8000200 <memchr>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d03f      	beq.n	8006f1c <_vfiprintf_r+0x22c>
 8006e9c:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <_vfiprintf_r+0x254>)
 8006e9e:	bb1b      	cbnz	r3, 8006ee8 <_vfiprintf_r+0x1f8>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	3307      	adds	r3, #7
 8006ea4:	f023 0307 	bic.w	r3, r3, #7
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eae:	443b      	add	r3, r7
 8006eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb2:	e767      	b.n	8006d84 <_vfiprintf_r+0x94>
 8006eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb8:	460c      	mov	r4, r1
 8006eba:	2001      	movs	r0, #1
 8006ebc:	e7a5      	b.n	8006e0a <_vfiprintf_r+0x11a>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	9305      	str	r3, [sp, #20]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f04f 0c0a 	mov.w	ip, #10
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed0:	3a30      	subs	r2, #48	; 0x30
 8006ed2:	2a09      	cmp	r2, #9
 8006ed4:	d903      	bls.n	8006ede <_vfiprintf_r+0x1ee>
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0c5      	beq.n	8006e66 <_vfiprintf_r+0x176>
 8006eda:	9105      	str	r1, [sp, #20]
 8006edc:	e7c3      	b.n	8006e66 <_vfiprintf_r+0x176>
 8006ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e7f0      	b.n	8006eca <_vfiprintf_r+0x1da>
 8006ee8:	ab03      	add	r3, sp, #12
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	462a      	mov	r2, r5
 8006eee:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <_vfiprintf_r+0x258>)
 8006ef0:	a904      	add	r1, sp, #16
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f3af 8000 	nop.w
 8006ef8:	4607      	mov	r7, r0
 8006efa:	1c78      	adds	r0, r7, #1
 8006efc:	d1d6      	bne.n	8006eac <_vfiprintf_r+0x1bc>
 8006efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f00:	07d9      	lsls	r1, r3, #31
 8006f02:	d405      	bmi.n	8006f10 <_vfiprintf_r+0x220>
 8006f04:	89ab      	ldrh	r3, [r5, #12]
 8006f06:	059a      	lsls	r2, r3, #22
 8006f08:	d402      	bmi.n	8006f10 <_vfiprintf_r+0x220>
 8006f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f0c:	f7ff feb9 	bl	8006c82 <__retarget_lock_release_recursive>
 8006f10:	89ab      	ldrh	r3, [r5, #12]
 8006f12:	065b      	lsls	r3, r3, #25
 8006f14:	f53f af12 	bmi.w	8006d3c <_vfiprintf_r+0x4c>
 8006f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f1a:	e711      	b.n	8006d40 <_vfiprintf_r+0x50>
 8006f1c:	ab03      	add	r3, sp, #12
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <_vfiprintf_r+0x258>)
 8006f24:	a904      	add	r1, sp, #16
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f880 	bl	800702c <_printf_i>
 8006f2c:	e7e4      	b.n	8006ef8 <_vfiprintf_r+0x208>
 8006f2e:	bf00      	nop
 8006f30:	080088a4 	.word	0x080088a4
 8006f34:	080088c4 	.word	0x080088c4
 8006f38:	08008884 	.word	0x08008884
 8006f3c:	080088e4 	.word	0x080088e4
 8006f40:	080088ee 	.word	0x080088ee
 8006f44:	00000000 	.word	0x00000000
 8006f48:	08006ccb 	.word	0x08006ccb
 8006f4c:	080088ea 	.word	0x080088ea

08006f50 <_printf_common>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	4616      	mov	r6, r2
 8006f56:	4699      	mov	r9, r3
 8006f58:	688a      	ldr	r2, [r1, #8]
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	bfb8      	it	lt
 8006f64:	4613      	movlt	r3, r2
 8006f66:	6033      	str	r3, [r6, #0]
 8006f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b10a      	cbz	r2, 8006f76 <_printf_common+0x26>
 8006f72:	3301      	adds	r3, #1
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	0699      	lsls	r1, r3, #26
 8006f7a:	bf42      	ittt	mi
 8006f7c:	6833      	ldrmi	r3, [r6, #0]
 8006f7e:	3302      	addmi	r3, #2
 8006f80:	6033      	strmi	r3, [r6, #0]
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	f015 0506 	ands.w	r5, r5, #6
 8006f88:	d106      	bne.n	8006f98 <_printf_common+0x48>
 8006f8a:	f104 0a19 	add.w	sl, r4, #25
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	6832      	ldr	r2, [r6, #0]
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dc26      	bgt.n	8006fe6 <_printf_common+0x96>
 8006f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f9c:	1e13      	subs	r3, r2, #0
 8006f9e:	6822      	ldr	r2, [r4, #0]
 8006fa0:	bf18      	it	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d42b      	bmi.n	8007000 <_printf_common+0xb0>
 8006fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fac:	4649      	mov	r1, r9
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c0      	blx	r8
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d01e      	beq.n	8006ff4 <_printf_common+0xa4>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	68e5      	ldr	r5, [r4, #12]
 8006fba:	6832      	ldr	r2, [r6, #0]
 8006fbc:	f003 0306 	and.w	r3, r3, #6
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	bf08      	it	eq
 8006fc4:	1aad      	subeq	r5, r5, r2
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	6922      	ldr	r2, [r4, #16]
 8006fca:	bf0c      	ite	eq
 8006fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd0:	2500      	movne	r5, #0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bfc4      	itt	gt
 8006fd6:	1a9b      	subgt	r3, r3, r2
 8006fd8:	18ed      	addgt	r5, r5, r3
 8006fda:	2600      	movs	r6, #0
 8006fdc:	341a      	adds	r4, #26
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d11a      	bne.n	8007018 <_printf_common+0xc8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e008      	b.n	8006ff8 <_printf_common+0xa8>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4649      	mov	r1, r9
 8006fec:	4638      	mov	r0, r7
 8006fee:	47c0      	blx	r8
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_printf_common+0xac>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e7c6      	b.n	8006f8e <_printf_common+0x3e>
 8007000:	18e1      	adds	r1, r4, r3
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	2030      	movs	r0, #48	; 0x30
 8007006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800700a:	4422      	add	r2, r4
 800700c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007014:	3302      	adds	r3, #2
 8007016:	e7c7      	b.n	8006fa8 <_printf_common+0x58>
 8007018:	2301      	movs	r3, #1
 800701a:	4622      	mov	r2, r4
 800701c:	4649      	mov	r1, r9
 800701e:	4638      	mov	r0, r7
 8007020:	47c0      	blx	r8
 8007022:	3001      	adds	r0, #1
 8007024:	d0e6      	beq.n	8006ff4 <_printf_common+0xa4>
 8007026:	3601      	adds	r6, #1
 8007028:	e7d9      	b.n	8006fde <_printf_common+0x8e>
	...

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	460c      	mov	r4, r1
 8007032:	4691      	mov	r9, r2
 8007034:	7e27      	ldrb	r7, [r4, #24]
 8007036:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007038:	2f78      	cmp	r7, #120	; 0x78
 800703a:	4680      	mov	r8, r0
 800703c:	469a      	mov	sl, r3
 800703e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	; 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d8 	beq.w	80071fe <_printf_i+0x1d2>
 800704e:	2f58      	cmp	r7, #88	; 0x58
 8007050:	f000 80a3 	beq.w	800719a <_printf_i+0x16e>
 8007054:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a001      	add	r0, pc, #4	; (adr r0, 800706c <_printf_i+0x40>)
 8007068:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071e5 	.word	0x080071e5
 800709c:	08007109 	.word	0x08007109
 80070a0:	080071c7 	.word	0x080071c7
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	08007207 	.word	0x08007207
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007109 	.word	0x08007109
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	080071cf 	.word	0x080071cf
 80070c4:	680b      	ldr	r3, [r1, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	600a      	str	r2, [r1, #0]
 80070cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0a3      	b.n	8007220 <_printf_i+0x1f4>
 80070d8:	6825      	ldr	r5, [r4, #0]
 80070da:	6808      	ldr	r0, [r1, #0]
 80070dc:	062e      	lsls	r6, r5, #24
 80070de:	f100 0304 	add.w	r3, r0, #4
 80070e2:	d50a      	bpl.n	80070fa <_printf_i+0xce>
 80070e4:	6805      	ldr	r5, [r0, #0]
 80070e6:	600b      	str	r3, [r1, #0]
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	da03      	bge.n	80070f4 <_printf_i+0xc8>
 80070ec:	232d      	movs	r3, #45	; 0x2d
 80070ee:	426d      	negs	r5, r5
 80070f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070f4:	485e      	ldr	r0, [pc, #376]	; (8007270 <_printf_i+0x244>)
 80070f6:	230a      	movs	r3, #10
 80070f8:	e019      	b.n	800712e <_printf_i+0x102>
 80070fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070fe:	6805      	ldr	r5, [r0, #0]
 8007100:	600b      	str	r3, [r1, #0]
 8007102:	bf18      	it	ne
 8007104:	b22d      	sxthne	r5, r5
 8007106:	e7ef      	b.n	80070e8 <_printf_i+0xbc>
 8007108:	680b      	ldr	r3, [r1, #0]
 800710a:	6825      	ldr	r5, [r4, #0]
 800710c:	1d18      	adds	r0, r3, #4
 800710e:	6008      	str	r0, [r1, #0]
 8007110:	0628      	lsls	r0, r5, #24
 8007112:	d501      	bpl.n	8007118 <_printf_i+0xec>
 8007114:	681d      	ldr	r5, [r3, #0]
 8007116:	e002      	b.n	800711e <_printf_i+0xf2>
 8007118:	0669      	lsls	r1, r5, #25
 800711a:	d5fb      	bpl.n	8007114 <_printf_i+0xe8>
 800711c:	881d      	ldrh	r5, [r3, #0]
 800711e:	4854      	ldr	r0, [pc, #336]	; (8007270 <_printf_i+0x244>)
 8007120:	2f6f      	cmp	r7, #111	; 0x6f
 8007122:	bf0c      	ite	eq
 8007124:	2308      	moveq	r3, #8
 8007126:	230a      	movne	r3, #10
 8007128:	2100      	movs	r1, #0
 800712a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800712e:	6866      	ldr	r6, [r4, #4]
 8007130:	60a6      	str	r6, [r4, #8]
 8007132:	2e00      	cmp	r6, #0
 8007134:	bfa2      	ittt	ge
 8007136:	6821      	ldrge	r1, [r4, #0]
 8007138:	f021 0104 	bicge.w	r1, r1, #4
 800713c:	6021      	strge	r1, [r4, #0]
 800713e:	b90d      	cbnz	r5, 8007144 <_printf_i+0x118>
 8007140:	2e00      	cmp	r6, #0
 8007142:	d04d      	beq.n	80071e0 <_printf_i+0x1b4>
 8007144:	4616      	mov	r6, r2
 8007146:	fbb5 f1f3 	udiv	r1, r5, r3
 800714a:	fb03 5711 	mls	r7, r3, r1, r5
 800714e:	5dc7      	ldrb	r7, [r0, r7]
 8007150:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007154:	462f      	mov	r7, r5
 8007156:	42bb      	cmp	r3, r7
 8007158:	460d      	mov	r5, r1
 800715a:	d9f4      	bls.n	8007146 <_printf_i+0x11a>
 800715c:	2b08      	cmp	r3, #8
 800715e:	d10b      	bne.n	8007178 <_printf_i+0x14c>
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	07df      	lsls	r7, r3, #31
 8007164:	d508      	bpl.n	8007178 <_printf_i+0x14c>
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	4299      	cmp	r1, r3
 800716c:	bfde      	ittt	le
 800716e:	2330      	movle	r3, #48	; 0x30
 8007170:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007174:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007178:	1b92      	subs	r2, r2, r6
 800717a:	6122      	str	r2, [r4, #16]
 800717c:	f8cd a000 	str.w	sl, [sp]
 8007180:	464b      	mov	r3, r9
 8007182:	aa03      	add	r2, sp, #12
 8007184:	4621      	mov	r1, r4
 8007186:	4640      	mov	r0, r8
 8007188:	f7ff fee2 	bl	8006f50 <_printf_common>
 800718c:	3001      	adds	r0, #1
 800718e:	d14c      	bne.n	800722a <_printf_i+0x1fe>
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	b004      	add	sp, #16
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	4835      	ldr	r0, [pc, #212]	; (8007270 <_printf_i+0x244>)
 800719c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	680e      	ldr	r6, [r1, #0]
 80071a4:	061f      	lsls	r7, r3, #24
 80071a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80071aa:	600e      	str	r6, [r1, #0]
 80071ac:	d514      	bpl.n	80071d8 <_printf_i+0x1ac>
 80071ae:	07d9      	lsls	r1, r3, #31
 80071b0:	bf44      	itt	mi
 80071b2:	f043 0320 	orrmi.w	r3, r3, #32
 80071b6:	6023      	strmi	r3, [r4, #0]
 80071b8:	b91d      	cbnz	r5, 80071c2 <_printf_i+0x196>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	f023 0320 	bic.w	r3, r3, #32
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	2310      	movs	r3, #16
 80071c4:	e7b0      	b.n	8007128 <_printf_i+0xfc>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	f043 0320 	orr.w	r3, r3, #32
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	2378      	movs	r3, #120	; 0x78
 80071d0:	4828      	ldr	r0, [pc, #160]	; (8007274 <_printf_i+0x248>)
 80071d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071d6:	e7e3      	b.n	80071a0 <_printf_i+0x174>
 80071d8:	065e      	lsls	r6, r3, #25
 80071da:	bf48      	it	mi
 80071dc:	b2ad      	uxthmi	r5, r5
 80071de:	e7e6      	b.n	80071ae <_printf_i+0x182>
 80071e0:	4616      	mov	r6, r2
 80071e2:	e7bb      	b.n	800715c <_printf_i+0x130>
 80071e4:	680b      	ldr	r3, [r1, #0]
 80071e6:	6826      	ldr	r6, [r4, #0]
 80071e8:	6960      	ldr	r0, [r4, #20]
 80071ea:	1d1d      	adds	r5, r3, #4
 80071ec:	600d      	str	r5, [r1, #0]
 80071ee:	0635      	lsls	r5, r6, #24
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	d501      	bpl.n	80071f8 <_printf_i+0x1cc>
 80071f4:	6018      	str	r0, [r3, #0]
 80071f6:	e002      	b.n	80071fe <_printf_i+0x1d2>
 80071f8:	0671      	lsls	r1, r6, #25
 80071fa:	d5fb      	bpl.n	80071f4 <_printf_i+0x1c8>
 80071fc:	8018      	strh	r0, [r3, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	6123      	str	r3, [r4, #16]
 8007202:	4616      	mov	r6, r2
 8007204:	e7ba      	b.n	800717c <_printf_i+0x150>
 8007206:	680b      	ldr	r3, [r1, #0]
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	600a      	str	r2, [r1, #0]
 800720c:	681e      	ldr	r6, [r3, #0]
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	2100      	movs	r1, #0
 8007212:	4630      	mov	r0, r6
 8007214:	f7f8 fff4 	bl	8000200 <memchr>
 8007218:	b108      	cbz	r0, 800721e <_printf_i+0x1f2>
 800721a:	1b80      	subs	r0, r0, r6
 800721c:	6060      	str	r0, [r4, #4]
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	2300      	movs	r3, #0
 8007224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007228:	e7a8      	b.n	800717c <_printf_i+0x150>
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	4632      	mov	r2, r6
 800722e:	4649      	mov	r1, r9
 8007230:	4640      	mov	r0, r8
 8007232:	47d0      	blx	sl
 8007234:	3001      	adds	r0, #1
 8007236:	d0ab      	beq.n	8007190 <_printf_i+0x164>
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	079b      	lsls	r3, r3, #30
 800723c:	d413      	bmi.n	8007266 <_printf_i+0x23a>
 800723e:	68e0      	ldr	r0, [r4, #12]
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	4298      	cmp	r0, r3
 8007244:	bfb8      	it	lt
 8007246:	4618      	movlt	r0, r3
 8007248:	e7a4      	b.n	8007194 <_printf_i+0x168>
 800724a:	2301      	movs	r3, #1
 800724c:	4632      	mov	r2, r6
 800724e:	4649      	mov	r1, r9
 8007250:	4640      	mov	r0, r8
 8007252:	47d0      	blx	sl
 8007254:	3001      	adds	r0, #1
 8007256:	d09b      	beq.n	8007190 <_printf_i+0x164>
 8007258:	3501      	adds	r5, #1
 800725a:	68e3      	ldr	r3, [r4, #12]
 800725c:	9903      	ldr	r1, [sp, #12]
 800725e:	1a5b      	subs	r3, r3, r1
 8007260:	42ab      	cmp	r3, r5
 8007262:	dcf2      	bgt.n	800724a <_printf_i+0x21e>
 8007264:	e7eb      	b.n	800723e <_printf_i+0x212>
 8007266:	2500      	movs	r5, #0
 8007268:	f104 0619 	add.w	r6, r4, #25
 800726c:	e7f5      	b.n	800725a <_printf_i+0x22e>
 800726e:	bf00      	nop
 8007270:	080088f5 	.word	0x080088f5
 8007274:	08008906 	.word	0x08008906

08007278 <__sread>:
 8007278:	b510      	push	{r4, lr}
 800727a:	460c      	mov	r4, r1
 800727c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007280:	f000 fa58 	bl	8007734 <_read_r>
 8007284:	2800      	cmp	r0, #0
 8007286:	bfab      	itete	ge
 8007288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800728a:	89a3      	ldrhlt	r3, [r4, #12]
 800728c:	181b      	addge	r3, r3, r0
 800728e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007292:	bfac      	ite	ge
 8007294:	6563      	strge	r3, [r4, #84]	; 0x54
 8007296:	81a3      	strhlt	r3, [r4, #12]
 8007298:	bd10      	pop	{r4, pc}

0800729a <__swrite>:
 800729a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729e:	461f      	mov	r7, r3
 80072a0:	898b      	ldrh	r3, [r1, #12]
 80072a2:	05db      	lsls	r3, r3, #23
 80072a4:	4605      	mov	r5, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	4616      	mov	r6, r2
 80072aa:	d505      	bpl.n	80072b8 <__swrite+0x1e>
 80072ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b0:	2302      	movs	r3, #2
 80072b2:	2200      	movs	r2, #0
 80072b4:	f000 f9c8 	bl	8007648 <_lseek_r>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	4632      	mov	r2, r6
 80072c6:	463b      	mov	r3, r7
 80072c8:	4628      	mov	r0, r5
 80072ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ce:	f000 b869 	b.w	80073a4 <_write_r>

080072d2 <__sseek>:
 80072d2:	b510      	push	{r4, lr}
 80072d4:	460c      	mov	r4, r1
 80072d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072da:	f000 f9b5 	bl	8007648 <_lseek_r>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	bf15      	itete	ne
 80072e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072ee:	81a3      	strheq	r3, [r4, #12]
 80072f0:	bf18      	it	ne
 80072f2:	81a3      	strhne	r3, [r4, #12]
 80072f4:	bd10      	pop	{r4, pc}

080072f6 <__sclose>:
 80072f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fa:	f000 b8d3 	b.w	80074a4 <_close_r>
	...

08007300 <__swbuf_r>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	460e      	mov	r6, r1
 8007304:	4614      	mov	r4, r2
 8007306:	4605      	mov	r5, r0
 8007308:	b118      	cbz	r0, 8007312 <__swbuf_r+0x12>
 800730a:	6983      	ldr	r3, [r0, #24]
 800730c:	b90b      	cbnz	r3, 8007312 <__swbuf_r+0x12>
 800730e:	f7ff fc19 	bl	8006b44 <__sinit>
 8007312:	4b21      	ldr	r3, [pc, #132]	; (8007398 <__swbuf_r+0x98>)
 8007314:	429c      	cmp	r4, r3
 8007316:	d12b      	bne.n	8007370 <__swbuf_r+0x70>
 8007318:	686c      	ldr	r4, [r5, #4]
 800731a:	69a3      	ldr	r3, [r4, #24]
 800731c:	60a3      	str	r3, [r4, #8]
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	071a      	lsls	r2, r3, #28
 8007322:	d52f      	bpl.n	8007384 <__swbuf_r+0x84>
 8007324:	6923      	ldr	r3, [r4, #16]
 8007326:	b36b      	cbz	r3, 8007384 <__swbuf_r+0x84>
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	1ac0      	subs	r0, r0, r3
 800732e:	6963      	ldr	r3, [r4, #20]
 8007330:	b2f6      	uxtb	r6, r6
 8007332:	4283      	cmp	r3, r0
 8007334:	4637      	mov	r7, r6
 8007336:	dc04      	bgt.n	8007342 <__swbuf_r+0x42>
 8007338:	4621      	mov	r1, r4
 800733a:	4628      	mov	r0, r5
 800733c:	f000 f948 	bl	80075d0 <_fflush_r>
 8007340:	bb30      	cbnz	r0, 8007390 <__swbuf_r+0x90>
 8007342:	68a3      	ldr	r3, [r4, #8]
 8007344:	3b01      	subs	r3, #1
 8007346:	60a3      	str	r3, [r4, #8]
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	6022      	str	r2, [r4, #0]
 800734e:	701e      	strb	r6, [r3, #0]
 8007350:	6963      	ldr	r3, [r4, #20]
 8007352:	3001      	adds	r0, #1
 8007354:	4283      	cmp	r3, r0
 8007356:	d004      	beq.n	8007362 <__swbuf_r+0x62>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	07db      	lsls	r3, r3, #31
 800735c:	d506      	bpl.n	800736c <__swbuf_r+0x6c>
 800735e:	2e0a      	cmp	r6, #10
 8007360:	d104      	bne.n	800736c <__swbuf_r+0x6c>
 8007362:	4621      	mov	r1, r4
 8007364:	4628      	mov	r0, r5
 8007366:	f000 f933 	bl	80075d0 <_fflush_r>
 800736a:	b988      	cbnz	r0, 8007390 <__swbuf_r+0x90>
 800736c:	4638      	mov	r0, r7
 800736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007370:	4b0a      	ldr	r3, [pc, #40]	; (800739c <__swbuf_r+0x9c>)
 8007372:	429c      	cmp	r4, r3
 8007374:	d101      	bne.n	800737a <__swbuf_r+0x7a>
 8007376:	68ac      	ldr	r4, [r5, #8]
 8007378:	e7cf      	b.n	800731a <__swbuf_r+0x1a>
 800737a:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <__swbuf_r+0xa0>)
 800737c:	429c      	cmp	r4, r3
 800737e:	bf08      	it	eq
 8007380:	68ec      	ldreq	r4, [r5, #12]
 8007382:	e7ca      	b.n	800731a <__swbuf_r+0x1a>
 8007384:	4621      	mov	r1, r4
 8007386:	4628      	mov	r0, r5
 8007388:	f000 f81e 	bl	80073c8 <__swsetup_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	d0cb      	beq.n	8007328 <__swbuf_r+0x28>
 8007390:	f04f 37ff 	mov.w	r7, #4294967295
 8007394:	e7ea      	b.n	800736c <__swbuf_r+0x6c>
 8007396:	bf00      	nop
 8007398:	080088a4 	.word	0x080088a4
 800739c:	080088c4 	.word	0x080088c4
 80073a0:	08008884 	.word	0x08008884

080073a4 <_write_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d07      	ldr	r5, [pc, #28]	; (80073c4 <_write_r+0x20>)
 80073a8:	4604      	mov	r4, r0
 80073aa:	4608      	mov	r0, r1
 80073ac:	4611      	mov	r1, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f7fa fcaf 	bl	8001d16 <_write>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_write_r+0x1e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_write_r+0x1e>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	20004364 	.word	0x20004364

080073c8 <__swsetup_r>:
 80073c8:	4b32      	ldr	r3, [pc, #200]	; (8007494 <__swsetup_r+0xcc>)
 80073ca:	b570      	push	{r4, r5, r6, lr}
 80073cc:	681d      	ldr	r5, [r3, #0]
 80073ce:	4606      	mov	r6, r0
 80073d0:	460c      	mov	r4, r1
 80073d2:	b125      	cbz	r5, 80073de <__swsetup_r+0x16>
 80073d4:	69ab      	ldr	r3, [r5, #24]
 80073d6:	b913      	cbnz	r3, 80073de <__swsetup_r+0x16>
 80073d8:	4628      	mov	r0, r5
 80073da:	f7ff fbb3 	bl	8006b44 <__sinit>
 80073de:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <__swsetup_r+0xd0>)
 80073e0:	429c      	cmp	r4, r3
 80073e2:	d10f      	bne.n	8007404 <__swsetup_r+0x3c>
 80073e4:	686c      	ldr	r4, [r5, #4]
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073ec:	0719      	lsls	r1, r3, #28
 80073ee:	d42c      	bmi.n	800744a <__swsetup_r+0x82>
 80073f0:	06dd      	lsls	r5, r3, #27
 80073f2:	d411      	bmi.n	8007418 <__swsetup_r+0x50>
 80073f4:	2309      	movs	r3, #9
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073fc:	81a3      	strh	r3, [r4, #12]
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	e03e      	b.n	8007482 <__swsetup_r+0xba>
 8007404:	4b25      	ldr	r3, [pc, #148]	; (800749c <__swsetup_r+0xd4>)
 8007406:	429c      	cmp	r4, r3
 8007408:	d101      	bne.n	800740e <__swsetup_r+0x46>
 800740a:	68ac      	ldr	r4, [r5, #8]
 800740c:	e7eb      	b.n	80073e6 <__swsetup_r+0x1e>
 800740e:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <__swsetup_r+0xd8>)
 8007410:	429c      	cmp	r4, r3
 8007412:	bf08      	it	eq
 8007414:	68ec      	ldreq	r4, [r5, #12]
 8007416:	e7e6      	b.n	80073e6 <__swsetup_r+0x1e>
 8007418:	0758      	lsls	r0, r3, #29
 800741a:	d512      	bpl.n	8007442 <__swsetup_r+0x7a>
 800741c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800741e:	b141      	cbz	r1, 8007432 <__swsetup_r+0x6a>
 8007420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007424:	4299      	cmp	r1, r3
 8007426:	d002      	beq.n	800742e <__swsetup_r+0x66>
 8007428:	4630      	mov	r0, r6
 800742a:	f7ff fa61 	bl	80068f0 <_free_r>
 800742e:	2300      	movs	r3, #0
 8007430:	6363      	str	r3, [r4, #52]	; 0x34
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	2300      	movs	r3, #0
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	6923      	ldr	r3, [r4, #16]
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	89a3      	ldrh	r3, [r4, #12]
 8007444:	f043 0308 	orr.w	r3, r3, #8
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	b94b      	cbnz	r3, 8007462 <__swsetup_r+0x9a>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007458:	d003      	beq.n	8007462 <__swsetup_r+0x9a>
 800745a:	4621      	mov	r1, r4
 800745c:	4630      	mov	r0, r6
 800745e:	f000 f929 	bl	80076b4 <__smakebuf_r>
 8007462:	89a0      	ldrh	r0, [r4, #12]
 8007464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007468:	f010 0301 	ands.w	r3, r0, #1
 800746c:	d00a      	beq.n	8007484 <__swsetup_r+0xbc>
 800746e:	2300      	movs	r3, #0
 8007470:	60a3      	str	r3, [r4, #8]
 8007472:	6963      	ldr	r3, [r4, #20]
 8007474:	425b      	negs	r3, r3
 8007476:	61a3      	str	r3, [r4, #24]
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	b943      	cbnz	r3, 800748e <__swsetup_r+0xc6>
 800747c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007480:	d1ba      	bne.n	80073f8 <__swsetup_r+0x30>
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	0781      	lsls	r1, r0, #30
 8007486:	bf58      	it	pl
 8007488:	6963      	ldrpl	r3, [r4, #20]
 800748a:	60a3      	str	r3, [r4, #8]
 800748c:	e7f4      	b.n	8007478 <__swsetup_r+0xb0>
 800748e:	2000      	movs	r0, #0
 8007490:	e7f7      	b.n	8007482 <__swsetup_r+0xba>
 8007492:	bf00      	nop
 8007494:	20000010 	.word	0x20000010
 8007498:	080088a4 	.word	0x080088a4
 800749c:	080088c4 	.word	0x080088c4
 80074a0:	08008884 	.word	0x08008884

080074a4 <_close_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_close_r+0x1c>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	f7fa fc4d 	bl	8001d4e <_close>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_close_r+0x1a>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_close_r+0x1a>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20004364 	.word	0x20004364

080074c4 <__sflush_r>:
 80074c4:	898a      	ldrh	r2, [r1, #12]
 80074c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	4605      	mov	r5, r0
 80074cc:	0710      	lsls	r0, r2, #28
 80074ce:	460c      	mov	r4, r1
 80074d0:	d458      	bmi.n	8007584 <__sflush_r+0xc0>
 80074d2:	684b      	ldr	r3, [r1, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dc05      	bgt.n	80074e4 <__sflush_r+0x20>
 80074d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074da:	2b00      	cmp	r3, #0
 80074dc:	dc02      	bgt.n	80074e4 <__sflush_r+0x20>
 80074de:	2000      	movs	r0, #0
 80074e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	d0f9      	beq.n	80074de <__sflush_r+0x1a>
 80074ea:	2300      	movs	r3, #0
 80074ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074f0:	682f      	ldr	r7, [r5, #0]
 80074f2:	602b      	str	r3, [r5, #0]
 80074f4:	d032      	beq.n	800755c <__sflush_r+0x98>
 80074f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	075a      	lsls	r2, r3, #29
 80074fc:	d505      	bpl.n	800750a <__sflush_r+0x46>
 80074fe:	6863      	ldr	r3, [r4, #4]
 8007500:	1ac0      	subs	r0, r0, r3
 8007502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007504:	b10b      	cbz	r3, 800750a <__sflush_r+0x46>
 8007506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007508:	1ac0      	subs	r0, r0, r3
 800750a:	2300      	movs	r3, #0
 800750c:	4602      	mov	r2, r0
 800750e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007510:	6a21      	ldr	r1, [r4, #32]
 8007512:	4628      	mov	r0, r5
 8007514:	47b0      	blx	r6
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	d106      	bne.n	800752a <__sflush_r+0x66>
 800751c:	6829      	ldr	r1, [r5, #0]
 800751e:	291d      	cmp	r1, #29
 8007520:	d82c      	bhi.n	800757c <__sflush_r+0xb8>
 8007522:	4a2a      	ldr	r2, [pc, #168]	; (80075cc <__sflush_r+0x108>)
 8007524:	40ca      	lsrs	r2, r1
 8007526:	07d6      	lsls	r6, r2, #31
 8007528:	d528      	bpl.n	800757c <__sflush_r+0xb8>
 800752a:	2200      	movs	r2, #0
 800752c:	6062      	str	r2, [r4, #4]
 800752e:	04d9      	lsls	r1, r3, #19
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	6022      	str	r2, [r4, #0]
 8007534:	d504      	bpl.n	8007540 <__sflush_r+0x7c>
 8007536:	1c42      	adds	r2, r0, #1
 8007538:	d101      	bne.n	800753e <__sflush_r+0x7a>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	b903      	cbnz	r3, 8007540 <__sflush_r+0x7c>
 800753e:	6560      	str	r0, [r4, #84]	; 0x54
 8007540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007542:	602f      	str	r7, [r5, #0]
 8007544:	2900      	cmp	r1, #0
 8007546:	d0ca      	beq.n	80074de <__sflush_r+0x1a>
 8007548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800754c:	4299      	cmp	r1, r3
 800754e:	d002      	beq.n	8007556 <__sflush_r+0x92>
 8007550:	4628      	mov	r0, r5
 8007552:	f7ff f9cd 	bl	80068f0 <_free_r>
 8007556:	2000      	movs	r0, #0
 8007558:	6360      	str	r0, [r4, #52]	; 0x34
 800755a:	e7c1      	b.n	80074e0 <__sflush_r+0x1c>
 800755c:	6a21      	ldr	r1, [r4, #32]
 800755e:	2301      	movs	r3, #1
 8007560:	4628      	mov	r0, r5
 8007562:	47b0      	blx	r6
 8007564:	1c41      	adds	r1, r0, #1
 8007566:	d1c7      	bne.n	80074f8 <__sflush_r+0x34>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c4      	beq.n	80074f8 <__sflush_r+0x34>
 800756e:	2b1d      	cmp	r3, #29
 8007570:	d001      	beq.n	8007576 <__sflush_r+0xb2>
 8007572:	2b16      	cmp	r3, #22
 8007574:	d101      	bne.n	800757a <__sflush_r+0xb6>
 8007576:	602f      	str	r7, [r5, #0]
 8007578:	e7b1      	b.n	80074de <__sflush_r+0x1a>
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	e7ad      	b.n	80074e0 <__sflush_r+0x1c>
 8007584:	690f      	ldr	r7, [r1, #16]
 8007586:	2f00      	cmp	r7, #0
 8007588:	d0a9      	beq.n	80074de <__sflush_r+0x1a>
 800758a:	0793      	lsls	r3, r2, #30
 800758c:	680e      	ldr	r6, [r1, #0]
 800758e:	bf08      	it	eq
 8007590:	694b      	ldreq	r3, [r1, #20]
 8007592:	600f      	str	r7, [r1, #0]
 8007594:	bf18      	it	ne
 8007596:	2300      	movne	r3, #0
 8007598:	eba6 0807 	sub.w	r8, r6, r7
 800759c:	608b      	str	r3, [r1, #8]
 800759e:	f1b8 0f00 	cmp.w	r8, #0
 80075a2:	dd9c      	ble.n	80074de <__sflush_r+0x1a>
 80075a4:	6a21      	ldr	r1, [r4, #32]
 80075a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075a8:	4643      	mov	r3, r8
 80075aa:	463a      	mov	r2, r7
 80075ac:	4628      	mov	r0, r5
 80075ae:	47b0      	blx	r6
 80075b0:	2800      	cmp	r0, #0
 80075b2:	dc06      	bgt.n	80075c2 <__sflush_r+0xfe>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	e78e      	b.n	80074e0 <__sflush_r+0x1c>
 80075c2:	4407      	add	r7, r0
 80075c4:	eba8 0800 	sub.w	r8, r8, r0
 80075c8:	e7e9      	b.n	800759e <__sflush_r+0xda>
 80075ca:	bf00      	nop
 80075cc:	20400001 	.word	0x20400001

080075d0 <_fflush_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	690b      	ldr	r3, [r1, #16]
 80075d4:	4605      	mov	r5, r0
 80075d6:	460c      	mov	r4, r1
 80075d8:	b913      	cbnz	r3, 80075e0 <_fflush_r+0x10>
 80075da:	2500      	movs	r5, #0
 80075dc:	4628      	mov	r0, r5
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	b118      	cbz	r0, 80075ea <_fflush_r+0x1a>
 80075e2:	6983      	ldr	r3, [r0, #24]
 80075e4:	b90b      	cbnz	r3, 80075ea <_fflush_r+0x1a>
 80075e6:	f7ff faad 	bl	8006b44 <__sinit>
 80075ea:	4b14      	ldr	r3, [pc, #80]	; (800763c <_fflush_r+0x6c>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d11b      	bne.n	8007628 <_fflush_r+0x58>
 80075f0:	686c      	ldr	r4, [r5, #4]
 80075f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0ef      	beq.n	80075da <_fflush_r+0xa>
 80075fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075fc:	07d0      	lsls	r0, r2, #31
 80075fe:	d404      	bmi.n	800760a <_fflush_r+0x3a>
 8007600:	0599      	lsls	r1, r3, #22
 8007602:	d402      	bmi.n	800760a <_fflush_r+0x3a>
 8007604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007606:	f7ff fb3b 	bl	8006c80 <__retarget_lock_acquire_recursive>
 800760a:	4628      	mov	r0, r5
 800760c:	4621      	mov	r1, r4
 800760e:	f7ff ff59 	bl	80074c4 <__sflush_r>
 8007612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007614:	07da      	lsls	r2, r3, #31
 8007616:	4605      	mov	r5, r0
 8007618:	d4e0      	bmi.n	80075dc <_fflush_r+0xc>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	059b      	lsls	r3, r3, #22
 800761e:	d4dd      	bmi.n	80075dc <_fflush_r+0xc>
 8007620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007622:	f7ff fb2e 	bl	8006c82 <__retarget_lock_release_recursive>
 8007626:	e7d9      	b.n	80075dc <_fflush_r+0xc>
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <_fflush_r+0x70>)
 800762a:	429c      	cmp	r4, r3
 800762c:	d101      	bne.n	8007632 <_fflush_r+0x62>
 800762e:	68ac      	ldr	r4, [r5, #8]
 8007630:	e7df      	b.n	80075f2 <_fflush_r+0x22>
 8007632:	4b04      	ldr	r3, [pc, #16]	; (8007644 <_fflush_r+0x74>)
 8007634:	429c      	cmp	r4, r3
 8007636:	bf08      	it	eq
 8007638:	68ec      	ldreq	r4, [r5, #12]
 800763a:	e7da      	b.n	80075f2 <_fflush_r+0x22>
 800763c:	080088a4 	.word	0x080088a4
 8007640:	080088c4 	.word	0x080088c4
 8007644:	08008884 	.word	0x08008884

08007648 <_lseek_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_lseek_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7fa fba0 	bl	8001d9c <_lseek>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_lseek_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_lseek_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20004364 	.word	0x20004364

0800766c <__swhatbuf_r>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	460e      	mov	r6, r1
 8007670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007674:	2900      	cmp	r1, #0
 8007676:	b096      	sub	sp, #88	; 0x58
 8007678:	4614      	mov	r4, r2
 800767a:	461d      	mov	r5, r3
 800767c:	da07      	bge.n	800768e <__swhatbuf_r+0x22>
 800767e:	2300      	movs	r3, #0
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	89b3      	ldrh	r3, [r6, #12]
 8007684:	061a      	lsls	r2, r3, #24
 8007686:	d410      	bmi.n	80076aa <__swhatbuf_r+0x3e>
 8007688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800768c:	e00e      	b.n	80076ac <__swhatbuf_r+0x40>
 800768e:	466a      	mov	r2, sp
 8007690:	f000 f862 	bl	8007758 <_fstat_r>
 8007694:	2800      	cmp	r0, #0
 8007696:	dbf2      	blt.n	800767e <__swhatbuf_r+0x12>
 8007698:	9a01      	ldr	r2, [sp, #4]
 800769a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800769e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076a2:	425a      	negs	r2, r3
 80076a4:	415a      	adcs	r2, r3
 80076a6:	602a      	str	r2, [r5, #0]
 80076a8:	e7ee      	b.n	8007688 <__swhatbuf_r+0x1c>
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	2000      	movs	r0, #0
 80076ae:	6023      	str	r3, [r4, #0]
 80076b0:	b016      	add	sp, #88	; 0x58
 80076b2:	bd70      	pop	{r4, r5, r6, pc}

080076b4 <__smakebuf_r>:
 80076b4:	898b      	ldrh	r3, [r1, #12]
 80076b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076b8:	079d      	lsls	r5, r3, #30
 80076ba:	4606      	mov	r6, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	d507      	bpl.n	80076d0 <__smakebuf_r+0x1c>
 80076c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	2301      	movs	r3, #1
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	b002      	add	sp, #8
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	ab01      	add	r3, sp, #4
 80076d2:	466a      	mov	r2, sp
 80076d4:	f7ff ffca 	bl	800766c <__swhatbuf_r>
 80076d8:	9900      	ldr	r1, [sp, #0]
 80076da:	4605      	mov	r5, r0
 80076dc:	4630      	mov	r0, r6
 80076de:	f7ff f957 	bl	8006990 <_malloc_r>
 80076e2:	b948      	cbnz	r0, 80076f8 <__smakebuf_r+0x44>
 80076e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e8:	059a      	lsls	r2, r3, #22
 80076ea:	d4ef      	bmi.n	80076cc <__smakebuf_r+0x18>
 80076ec:	f023 0303 	bic.w	r3, r3, #3
 80076f0:	f043 0302 	orr.w	r3, r3, #2
 80076f4:	81a3      	strh	r3, [r4, #12]
 80076f6:	e7e3      	b.n	80076c0 <__smakebuf_r+0xc>
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <__smakebuf_r+0x7c>)
 80076fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	6020      	str	r0, [r4, #0]
 8007700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	9b00      	ldr	r3, [sp, #0]
 8007708:	6163      	str	r3, [r4, #20]
 800770a:	9b01      	ldr	r3, [sp, #4]
 800770c:	6120      	str	r0, [r4, #16]
 800770e:	b15b      	cbz	r3, 8007728 <__smakebuf_r+0x74>
 8007710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007714:	4630      	mov	r0, r6
 8007716:	f000 f831 	bl	800777c <_isatty_r>
 800771a:	b128      	cbz	r0, 8007728 <__smakebuf_r+0x74>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	f043 0301 	orr.w	r3, r3, #1
 8007726:	81a3      	strh	r3, [r4, #12]
 8007728:	89a0      	ldrh	r0, [r4, #12]
 800772a:	4305      	orrs	r5, r0
 800772c:	81a5      	strh	r5, [r4, #12]
 800772e:	e7cd      	b.n	80076cc <__smakebuf_r+0x18>
 8007730:	08006add 	.word	0x08006add

08007734 <_read_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	4d07      	ldr	r5, [pc, #28]	; (8007754 <_read_r+0x20>)
 8007738:	4604      	mov	r4, r0
 800773a:	4608      	mov	r0, r1
 800773c:	4611      	mov	r1, r2
 800773e:	2200      	movs	r2, #0
 8007740:	602a      	str	r2, [r5, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f7fa faca 	bl	8001cdc <_read>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d102      	bne.n	8007752 <_read_r+0x1e>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	b103      	cbz	r3, 8007752 <_read_r+0x1e>
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	bd38      	pop	{r3, r4, r5, pc}
 8007754:	20004364 	.word	0x20004364

08007758 <_fstat_r>:
 8007758:	b538      	push	{r3, r4, r5, lr}
 800775a:	4d07      	ldr	r5, [pc, #28]	; (8007778 <_fstat_r+0x20>)
 800775c:	2300      	movs	r3, #0
 800775e:	4604      	mov	r4, r0
 8007760:	4608      	mov	r0, r1
 8007762:	4611      	mov	r1, r2
 8007764:	602b      	str	r3, [r5, #0]
 8007766:	f7fa fafe 	bl	8001d66 <_fstat>
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	d102      	bne.n	8007774 <_fstat_r+0x1c>
 800776e:	682b      	ldr	r3, [r5, #0]
 8007770:	b103      	cbz	r3, 8007774 <_fstat_r+0x1c>
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	bd38      	pop	{r3, r4, r5, pc}
 8007776:	bf00      	nop
 8007778:	20004364 	.word	0x20004364

0800777c <_isatty_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d06      	ldr	r5, [pc, #24]	; (8007798 <_isatty_r+0x1c>)
 8007780:	2300      	movs	r3, #0
 8007782:	4604      	mov	r4, r0
 8007784:	4608      	mov	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7fa fafd 	bl	8001d86 <_isatty>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_isatty_r+0x1a>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_isatty_r+0x1a>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	20004364 	.word	0x20004364

0800779c <pow>:
 800779c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a0:	ec59 8b10 	vmov	r8, r9, d0
 80077a4:	ec57 6b11 	vmov	r6, r7, d1
 80077a8:	f000 f8a6 	bl	80078f8 <__ieee754_pow>
 80077ac:	4b4e      	ldr	r3, [pc, #312]	; (80078e8 <pow+0x14c>)
 80077ae:	f993 3000 	ldrsb.w	r3, [r3]
 80077b2:	3301      	adds	r3, #1
 80077b4:	ec55 4b10 	vmov	r4, r5, d0
 80077b8:	d015      	beq.n	80077e6 <pow+0x4a>
 80077ba:	4632      	mov	r2, r6
 80077bc:	463b      	mov	r3, r7
 80077be:	4630      	mov	r0, r6
 80077c0:	4639      	mov	r1, r7
 80077c2:	f7f9 f9c3 	bl	8000b4c <__aeabi_dcmpun>
 80077c6:	b970      	cbnz	r0, 80077e6 <pow+0x4a>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	4640      	mov	r0, r8
 80077ce:	4649      	mov	r1, r9
 80077d0:	f7f9 f9bc 	bl	8000b4c <__aeabi_dcmpun>
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	b148      	cbz	r0, 80077ee <pow+0x52>
 80077da:	4630      	mov	r0, r6
 80077dc:	4639      	mov	r1, r7
 80077de:	f7f9 f983 	bl	8000ae8 <__aeabi_dcmpeq>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d17d      	bne.n	80078e2 <pow+0x146>
 80077e6:	ec45 4b10 	vmov	d0, r4, r5
 80077ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	f7f9 f979 	bl	8000ae8 <__aeabi_dcmpeq>
 80077f6:	b1e0      	cbz	r0, 8007832 <pow+0x96>
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f9 f972 	bl	8000ae8 <__aeabi_dcmpeq>
 8007804:	2800      	cmp	r0, #0
 8007806:	d16c      	bne.n	80078e2 <pow+0x146>
 8007808:	ec47 6b10 	vmov	d0, r6, r7
 800780c:	f000 fe53 	bl	80084b6 <finite>
 8007810:	2800      	cmp	r0, #0
 8007812:	d0e8      	beq.n	80077e6 <pow+0x4a>
 8007814:	2200      	movs	r2, #0
 8007816:	2300      	movs	r3, #0
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f9 f96e 	bl	8000afc <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	d0e0      	beq.n	80077e6 <pow+0x4a>
 8007824:	f7ff f82a 	bl	800687c <__errno>
 8007828:	2321      	movs	r3, #33	; 0x21
 800782a:	6003      	str	r3, [r0, #0]
 800782c:	2400      	movs	r4, #0
 800782e:	4d2f      	ldr	r5, [pc, #188]	; (80078ec <pow+0x150>)
 8007830:	e7d9      	b.n	80077e6 <pow+0x4a>
 8007832:	ec45 4b10 	vmov	d0, r4, r5
 8007836:	f000 fe3e 	bl	80084b6 <finite>
 800783a:	bbb8      	cbnz	r0, 80078ac <pow+0x110>
 800783c:	ec49 8b10 	vmov	d0, r8, r9
 8007840:	f000 fe39 	bl	80084b6 <finite>
 8007844:	b390      	cbz	r0, 80078ac <pow+0x110>
 8007846:	ec47 6b10 	vmov	d0, r6, r7
 800784a:	f000 fe34 	bl	80084b6 <finite>
 800784e:	b368      	cbz	r0, 80078ac <pow+0x110>
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	4620      	mov	r0, r4
 8007856:	4629      	mov	r1, r5
 8007858:	f7f9 f978 	bl	8000b4c <__aeabi_dcmpun>
 800785c:	b160      	cbz	r0, 8007878 <pow+0xdc>
 800785e:	f7ff f80d 	bl	800687c <__errno>
 8007862:	2321      	movs	r3, #33	; 0x21
 8007864:	6003      	str	r3, [r0, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	2300      	movs	r3, #0
 800786a:	4610      	mov	r0, r2
 800786c:	4619      	mov	r1, r3
 800786e:	f7f8 fffd 	bl	800086c <__aeabi_ddiv>
 8007872:	4604      	mov	r4, r0
 8007874:	460d      	mov	r5, r1
 8007876:	e7b6      	b.n	80077e6 <pow+0x4a>
 8007878:	f7ff f800 	bl	800687c <__errno>
 800787c:	2322      	movs	r3, #34	; 0x22
 800787e:	6003      	str	r3, [r0, #0]
 8007880:	2200      	movs	r2, #0
 8007882:	2300      	movs	r3, #0
 8007884:	4640      	mov	r0, r8
 8007886:	4649      	mov	r1, r9
 8007888:	f7f9 f938 	bl	8000afc <__aeabi_dcmplt>
 800788c:	2400      	movs	r4, #0
 800788e:	b158      	cbz	r0, 80078a8 <pow+0x10c>
 8007890:	ec47 6b10 	vmov	d0, r6, r7
 8007894:	f000 fe24 	bl	80084e0 <rint>
 8007898:	4632      	mov	r2, r6
 800789a:	ec51 0b10 	vmov	r0, r1, d0
 800789e:	463b      	mov	r3, r7
 80078a0:	f7f9 f922 	bl	8000ae8 <__aeabi_dcmpeq>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d0c2      	beq.n	800782e <pow+0x92>
 80078a8:	4d11      	ldr	r5, [pc, #68]	; (80078f0 <pow+0x154>)
 80078aa:	e79c      	b.n	80077e6 <pow+0x4a>
 80078ac:	2200      	movs	r2, #0
 80078ae:	2300      	movs	r3, #0
 80078b0:	4620      	mov	r0, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f9 f918 	bl	8000ae8 <__aeabi_dcmpeq>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d094      	beq.n	80077e6 <pow+0x4a>
 80078bc:	ec49 8b10 	vmov	d0, r8, r9
 80078c0:	f000 fdf9 	bl	80084b6 <finite>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d08e      	beq.n	80077e6 <pow+0x4a>
 80078c8:	ec47 6b10 	vmov	d0, r6, r7
 80078cc:	f000 fdf3 	bl	80084b6 <finite>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d088      	beq.n	80077e6 <pow+0x4a>
 80078d4:	f7fe ffd2 	bl	800687c <__errno>
 80078d8:	2322      	movs	r3, #34	; 0x22
 80078da:	6003      	str	r3, [r0, #0]
 80078dc:	2400      	movs	r4, #0
 80078de:	2500      	movs	r5, #0
 80078e0:	e781      	b.n	80077e6 <pow+0x4a>
 80078e2:	4d04      	ldr	r5, [pc, #16]	; (80078f4 <pow+0x158>)
 80078e4:	2400      	movs	r4, #0
 80078e6:	e77e      	b.n	80077e6 <pow+0x4a>
 80078e8:	20000074 	.word	0x20000074
 80078ec:	fff00000 	.word	0xfff00000
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	3ff00000 	.word	0x3ff00000

080078f8 <__ieee754_pow>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	ed2d 8b06 	vpush	{d8-d10}
 8007900:	b08d      	sub	sp, #52	; 0x34
 8007902:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007906:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800790a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800790e:	ea56 0100 	orrs.w	r1, r6, r0
 8007912:	ec53 2b10 	vmov	r2, r3, d0
 8007916:	f000 84d1 	beq.w	80082bc <__ieee754_pow+0x9c4>
 800791a:	497f      	ldr	r1, [pc, #508]	; (8007b18 <__ieee754_pow+0x220>)
 800791c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007920:	428c      	cmp	r4, r1
 8007922:	ee10 8a10 	vmov	r8, s0
 8007926:	4699      	mov	r9, r3
 8007928:	dc09      	bgt.n	800793e <__ieee754_pow+0x46>
 800792a:	d103      	bne.n	8007934 <__ieee754_pow+0x3c>
 800792c:	b97a      	cbnz	r2, 800794e <__ieee754_pow+0x56>
 800792e:	42a6      	cmp	r6, r4
 8007930:	dd02      	ble.n	8007938 <__ieee754_pow+0x40>
 8007932:	e00c      	b.n	800794e <__ieee754_pow+0x56>
 8007934:	428e      	cmp	r6, r1
 8007936:	dc02      	bgt.n	800793e <__ieee754_pow+0x46>
 8007938:	428e      	cmp	r6, r1
 800793a:	d110      	bne.n	800795e <__ieee754_pow+0x66>
 800793c:	b178      	cbz	r0, 800795e <__ieee754_pow+0x66>
 800793e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007942:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007946:	ea54 0308 	orrs.w	r3, r4, r8
 800794a:	f000 84b7 	beq.w	80082bc <__ieee754_pow+0x9c4>
 800794e:	4873      	ldr	r0, [pc, #460]	; (8007b1c <__ieee754_pow+0x224>)
 8007950:	b00d      	add	sp, #52	; 0x34
 8007952:	ecbd 8b06 	vpop	{d8-d10}
 8007956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	f000 bdb9 	b.w	80084d0 <nan>
 800795e:	f1b9 0f00 	cmp.w	r9, #0
 8007962:	da36      	bge.n	80079d2 <__ieee754_pow+0xda>
 8007964:	496e      	ldr	r1, [pc, #440]	; (8007b20 <__ieee754_pow+0x228>)
 8007966:	428e      	cmp	r6, r1
 8007968:	dc51      	bgt.n	8007a0e <__ieee754_pow+0x116>
 800796a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800796e:	428e      	cmp	r6, r1
 8007970:	f340 84af 	ble.w	80082d2 <__ieee754_pow+0x9da>
 8007974:	1531      	asrs	r1, r6, #20
 8007976:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800797a:	2914      	cmp	r1, #20
 800797c:	dd0f      	ble.n	800799e <__ieee754_pow+0xa6>
 800797e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007982:	fa20 fc01 	lsr.w	ip, r0, r1
 8007986:	fa0c f101 	lsl.w	r1, ip, r1
 800798a:	4281      	cmp	r1, r0
 800798c:	f040 84a1 	bne.w	80082d2 <__ieee754_pow+0x9da>
 8007990:	f00c 0c01 	and.w	ip, ip, #1
 8007994:	f1cc 0102 	rsb	r1, ip, #2
 8007998:	9100      	str	r1, [sp, #0]
 800799a:	b180      	cbz	r0, 80079be <__ieee754_pow+0xc6>
 800799c:	e059      	b.n	8007a52 <__ieee754_pow+0x15a>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d155      	bne.n	8007a4e <__ieee754_pow+0x156>
 80079a2:	f1c1 0114 	rsb	r1, r1, #20
 80079a6:	fa46 fc01 	asr.w	ip, r6, r1
 80079aa:	fa0c f101 	lsl.w	r1, ip, r1
 80079ae:	42b1      	cmp	r1, r6
 80079b0:	f040 848c 	bne.w	80082cc <__ieee754_pow+0x9d4>
 80079b4:	f00c 0c01 	and.w	ip, ip, #1
 80079b8:	f1cc 0102 	rsb	r1, ip, #2
 80079bc:	9100      	str	r1, [sp, #0]
 80079be:	4959      	ldr	r1, [pc, #356]	; (8007b24 <__ieee754_pow+0x22c>)
 80079c0:	428e      	cmp	r6, r1
 80079c2:	d12d      	bne.n	8007a20 <__ieee754_pow+0x128>
 80079c4:	2f00      	cmp	r7, #0
 80079c6:	da79      	bge.n	8007abc <__ieee754_pow+0x1c4>
 80079c8:	4956      	ldr	r1, [pc, #344]	; (8007b24 <__ieee754_pow+0x22c>)
 80079ca:	2000      	movs	r0, #0
 80079cc:	f7f8 ff4e 	bl	800086c <__aeabi_ddiv>
 80079d0:	e016      	b.n	8007a00 <__ieee754_pow+0x108>
 80079d2:	2100      	movs	r1, #0
 80079d4:	9100      	str	r1, [sp, #0]
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d13b      	bne.n	8007a52 <__ieee754_pow+0x15a>
 80079da:	494f      	ldr	r1, [pc, #316]	; (8007b18 <__ieee754_pow+0x220>)
 80079dc:	428e      	cmp	r6, r1
 80079de:	d1ee      	bne.n	80079be <__ieee754_pow+0xc6>
 80079e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80079e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80079e8:	ea53 0308 	orrs.w	r3, r3, r8
 80079ec:	f000 8466 	beq.w	80082bc <__ieee754_pow+0x9c4>
 80079f0:	4b4d      	ldr	r3, [pc, #308]	; (8007b28 <__ieee754_pow+0x230>)
 80079f2:	429c      	cmp	r4, r3
 80079f4:	dd0d      	ble.n	8007a12 <__ieee754_pow+0x11a>
 80079f6:	2f00      	cmp	r7, #0
 80079f8:	f280 8464 	bge.w	80082c4 <__ieee754_pow+0x9cc>
 80079fc:	2000      	movs	r0, #0
 80079fe:	2100      	movs	r1, #0
 8007a00:	ec41 0b10 	vmov	d0, r0, r1
 8007a04:	b00d      	add	sp, #52	; 0x34
 8007a06:	ecbd 8b06 	vpop	{d8-d10}
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	2102      	movs	r1, #2
 8007a10:	e7e0      	b.n	80079d4 <__ieee754_pow+0xdc>
 8007a12:	2f00      	cmp	r7, #0
 8007a14:	daf2      	bge.n	80079fc <__ieee754_pow+0x104>
 8007a16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8007a1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007a1e:	e7ef      	b.n	8007a00 <__ieee754_pow+0x108>
 8007a20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007a24:	d104      	bne.n	8007a30 <__ieee754_pow+0x138>
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7f8 fdf5 	bl	8000618 <__aeabi_dmul>
 8007a2e:	e7e7      	b.n	8007a00 <__ieee754_pow+0x108>
 8007a30:	493e      	ldr	r1, [pc, #248]	; (8007b2c <__ieee754_pow+0x234>)
 8007a32:	428f      	cmp	r7, r1
 8007a34:	d10d      	bne.n	8007a52 <__ieee754_pow+0x15a>
 8007a36:	f1b9 0f00 	cmp.w	r9, #0
 8007a3a:	db0a      	blt.n	8007a52 <__ieee754_pow+0x15a>
 8007a3c:	ec43 2b10 	vmov	d0, r2, r3
 8007a40:	b00d      	add	sp, #52	; 0x34
 8007a42:	ecbd 8b06 	vpop	{d8-d10}
 8007a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	f000 bc77 	b.w	800833c <__ieee754_sqrt>
 8007a4e:	2100      	movs	r1, #0
 8007a50:	9100      	str	r1, [sp, #0]
 8007a52:	ec43 2b10 	vmov	d0, r2, r3
 8007a56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a5a:	f000 fd23 	bl	80084a4 <fabs>
 8007a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a62:	ec51 0b10 	vmov	r0, r1, d0
 8007a66:	f1b8 0f00 	cmp.w	r8, #0
 8007a6a:	d12a      	bne.n	8007ac2 <__ieee754_pow+0x1ca>
 8007a6c:	b12c      	cbz	r4, 8007a7a <__ieee754_pow+0x182>
 8007a6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007b24 <__ieee754_pow+0x22c>
 8007a72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007a76:	45e6      	cmp	lr, ip
 8007a78:	d123      	bne.n	8007ac2 <__ieee754_pow+0x1ca>
 8007a7a:	2f00      	cmp	r7, #0
 8007a7c:	da05      	bge.n	8007a8a <__ieee754_pow+0x192>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	2000      	movs	r0, #0
 8007a84:	4927      	ldr	r1, [pc, #156]	; (8007b24 <__ieee754_pow+0x22c>)
 8007a86:	f7f8 fef1 	bl	800086c <__aeabi_ddiv>
 8007a8a:	f1b9 0f00 	cmp.w	r9, #0
 8007a8e:	dab7      	bge.n	8007a00 <__ieee754_pow+0x108>
 8007a90:	9b00      	ldr	r3, [sp, #0]
 8007a92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007a96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a9a:	4323      	orrs	r3, r4
 8007a9c:	d108      	bne.n	8007ab0 <__ieee754_pow+0x1b8>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7f8 fbff 	bl	80002a8 <__aeabi_dsub>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	e78d      	b.n	80079cc <__ieee754_pow+0xd4>
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d1a4      	bne.n	8007a00 <__ieee754_pow+0x108>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007abc:	4610      	mov	r0, r2
 8007abe:	4619      	mov	r1, r3
 8007ac0:	e79e      	b.n	8007a00 <__ieee754_pow+0x108>
 8007ac2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007ac6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007aca:	950a      	str	r5, [sp, #40]	; 0x28
 8007acc:	9d00      	ldr	r5, [sp, #0]
 8007ace:	46ac      	mov	ip, r5
 8007ad0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007ad2:	ea5c 0505 	orrs.w	r5, ip, r5
 8007ad6:	d0e4      	beq.n	8007aa2 <__ieee754_pow+0x1aa>
 8007ad8:	4b15      	ldr	r3, [pc, #84]	; (8007b30 <__ieee754_pow+0x238>)
 8007ada:	429e      	cmp	r6, r3
 8007adc:	f340 80fc 	ble.w	8007cd8 <__ieee754_pow+0x3e0>
 8007ae0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ae4:	429e      	cmp	r6, r3
 8007ae6:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <__ieee754_pow+0x230>)
 8007ae8:	dd07      	ble.n	8007afa <__ieee754_pow+0x202>
 8007aea:	429c      	cmp	r4, r3
 8007aec:	dc0a      	bgt.n	8007b04 <__ieee754_pow+0x20c>
 8007aee:	2f00      	cmp	r7, #0
 8007af0:	da84      	bge.n	80079fc <__ieee754_pow+0x104>
 8007af2:	a307      	add	r3, pc, #28	; (adr r3, 8007b10 <__ieee754_pow+0x218>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	e795      	b.n	8007a26 <__ieee754_pow+0x12e>
 8007afa:	429c      	cmp	r4, r3
 8007afc:	dbf7      	blt.n	8007aee <__ieee754_pow+0x1f6>
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <__ieee754_pow+0x22c>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	dd17      	ble.n	8007b34 <__ieee754_pow+0x23c>
 8007b04:	2f00      	cmp	r7, #0
 8007b06:	dcf4      	bgt.n	8007af2 <__ieee754_pow+0x1fa>
 8007b08:	e778      	b.n	80079fc <__ieee754_pow+0x104>
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w
 8007b10:	8800759c 	.word	0x8800759c
 8007b14:	7e37e43c 	.word	0x7e37e43c
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	080088e9 	.word	0x080088e9
 8007b20:	433fffff 	.word	0x433fffff
 8007b24:	3ff00000 	.word	0x3ff00000
 8007b28:	3fefffff 	.word	0x3fefffff
 8007b2c:	3fe00000 	.word	0x3fe00000
 8007b30:	41e00000 	.word	0x41e00000
 8007b34:	4b64      	ldr	r3, [pc, #400]	; (8007cc8 <__ieee754_pow+0x3d0>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	f7f8 fbb6 	bl	80002a8 <__aeabi_dsub>
 8007b3c:	a356      	add	r3, pc, #344	; (adr r3, 8007c98 <__ieee754_pow+0x3a0>)
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	4604      	mov	r4, r0
 8007b44:	460d      	mov	r5, r1
 8007b46:	f7f8 fd67 	bl	8000618 <__aeabi_dmul>
 8007b4a:	a355      	add	r3, pc, #340	; (adr r3, 8007ca0 <__ieee754_pow+0x3a8>)
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	4606      	mov	r6, r0
 8007b52:	460f      	mov	r7, r1
 8007b54:	4620      	mov	r0, r4
 8007b56:	4629      	mov	r1, r5
 8007b58:	f7f8 fd5e 	bl	8000618 <__aeabi_dmul>
 8007b5c:	4b5b      	ldr	r3, [pc, #364]	; (8007ccc <__ieee754_pow+0x3d4>)
 8007b5e:	4682      	mov	sl, r0
 8007b60:	468b      	mov	fp, r1
 8007b62:	2200      	movs	r2, #0
 8007b64:	4620      	mov	r0, r4
 8007b66:	4629      	mov	r1, r5
 8007b68:	f7f8 fd56 	bl	8000618 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	a14d      	add	r1, pc, #308	; (adr r1, 8007ca8 <__ieee754_pow+0x3b0>)
 8007b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b76:	f7f8 fb97 	bl	80002a8 <__aeabi_dsub>
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	f7f8 fd4b 	bl	8000618 <__aeabi_dmul>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	2000      	movs	r0, #0
 8007b88:	4951      	ldr	r1, [pc, #324]	; (8007cd0 <__ieee754_pow+0x3d8>)
 8007b8a:	f7f8 fb8d 	bl	80002a8 <__aeabi_dsub>
 8007b8e:	4622      	mov	r2, r4
 8007b90:	4680      	mov	r8, r0
 8007b92:	4689      	mov	r9, r1
 8007b94:	462b      	mov	r3, r5
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fd3d 	bl	8000618 <__aeabi_dmul>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	f7f8 fd37 	bl	8000618 <__aeabi_dmul>
 8007baa:	a341      	add	r3, pc, #260	; (adr r3, 8007cb0 <__ieee754_pow+0x3b8>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f7f8 fd32 	bl	8000618 <__aeabi_dmul>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4650      	mov	r0, sl
 8007bba:	4659      	mov	r1, fp
 8007bbc:	f7f8 fb74 	bl	80002a8 <__aeabi_dsub>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 fb6e 	bl	80002ac <__adddf3>
 8007bd0:	2400      	movs	r4, #0
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	460d      	mov	r5, r1
 8007bda:	f7f8 fb65 	bl	80002a8 <__aeabi_dsub>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 fb5f 	bl	80002a8 <__aeabi_dsub>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	4682      	mov	sl, r0
 8007bf4:	468b      	mov	fp, r1
 8007bf6:	f040 81f1 	bne.w	8007fdc <__ieee754_pow+0x6e4>
 8007bfa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007cb8 <__ieee754_pow+0x3c0>
 8007bfe:	eeb0 8a47 	vmov.f32	s16, s14
 8007c02:	eef0 8a67 	vmov.f32	s17, s15
 8007c06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c14:	f7f8 fb48 	bl	80002a8 <__aeabi_dsub>
 8007c18:	4622      	mov	r2, r4
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	f7f8 fcfc 	bl	8000618 <__aeabi_dmul>
 8007c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c24:	4680      	mov	r8, r0
 8007c26:	4689      	mov	r9, r1
 8007c28:	4650      	mov	r0, sl
 8007c2a:	4659      	mov	r1, fp
 8007c2c:	f7f8 fcf4 	bl	8000618 <__aeabi_dmul>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4640      	mov	r0, r8
 8007c36:	4649      	mov	r1, r9
 8007c38:	f7f8 fb38 	bl	80002ac <__adddf3>
 8007c3c:	4632      	mov	r2, r6
 8007c3e:	463b      	mov	r3, r7
 8007c40:	4680      	mov	r8, r0
 8007c42:	4689      	mov	r9, r1
 8007c44:	4620      	mov	r0, r4
 8007c46:	4629      	mov	r1, r5
 8007c48:	f7f8 fce6 	bl	8000618 <__aeabi_dmul>
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4604      	mov	r4, r0
 8007c50:	460d      	mov	r5, r1
 8007c52:	4602      	mov	r2, r0
 8007c54:	4649      	mov	r1, r9
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7f8 fb28 	bl	80002ac <__adddf3>
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <__ieee754_pow+0x3dc>)
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	ec45 4b19 	vmov	d9, r4, r5
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	468b      	mov	fp, r1
 8007c6a:	f340 82fe 	ble.w	800826a <__ieee754_pow+0x972>
 8007c6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007c72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007c76:	4303      	orrs	r3, r0
 8007c78:	f000 81f0 	beq.w	800805c <__ieee754_pow+0x764>
 8007c7c:	a310      	add	r3, pc, #64	; (adr r3, 8007cc0 <__ieee754_pow+0x3c8>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	ec51 0b18 	vmov	r0, r1, d8
 8007c86:	f7f8 fcc7 	bl	8000618 <__aeabi_dmul>
 8007c8a:	a30d      	add	r3, pc, #52	; (adr r3, 8007cc0 <__ieee754_pow+0x3c8>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	e6cb      	b.n	8007a2a <__ieee754_pow+0x132>
 8007c92:	bf00      	nop
 8007c94:	f3af 8000 	nop.w
 8007c98:	60000000 	.word	0x60000000
 8007c9c:	3ff71547 	.word	0x3ff71547
 8007ca0:	f85ddf44 	.word	0xf85ddf44
 8007ca4:	3e54ae0b 	.word	0x3e54ae0b
 8007ca8:	55555555 	.word	0x55555555
 8007cac:	3fd55555 	.word	0x3fd55555
 8007cb0:	652b82fe 	.word	0x652b82fe
 8007cb4:	3ff71547 	.word	0x3ff71547
 8007cb8:	00000000 	.word	0x00000000
 8007cbc:	bff00000 	.word	0xbff00000
 8007cc0:	8800759c 	.word	0x8800759c
 8007cc4:	7e37e43c 	.word	0x7e37e43c
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	3fd00000 	.word	0x3fd00000
 8007cd0:	3fe00000 	.word	0x3fe00000
 8007cd4:	408fffff 	.word	0x408fffff
 8007cd8:	4bd7      	ldr	r3, [pc, #860]	; (8008038 <__ieee754_pow+0x740>)
 8007cda:	ea03 0309 	and.w	r3, r3, r9
 8007cde:	2200      	movs	r2, #0
 8007ce0:	b92b      	cbnz	r3, 8007cee <__ieee754_pow+0x3f6>
 8007ce2:	4bd6      	ldr	r3, [pc, #856]	; (800803c <__ieee754_pow+0x744>)
 8007ce4:	f7f8 fc98 	bl	8000618 <__aeabi_dmul>
 8007ce8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007cec:	460c      	mov	r4, r1
 8007cee:	1523      	asrs	r3, r4, #20
 8007cf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007cf4:	4413      	add	r3, r2
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	4bd1      	ldr	r3, [pc, #836]	; (8008040 <__ieee754_pow+0x748>)
 8007cfa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007cfe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007d02:	429c      	cmp	r4, r3
 8007d04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007d08:	dd08      	ble.n	8007d1c <__ieee754_pow+0x424>
 8007d0a:	4bce      	ldr	r3, [pc, #824]	; (8008044 <__ieee754_pow+0x74c>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	f340 8163 	ble.w	8007fd8 <__ieee754_pow+0x6e0>
 8007d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d14:	3301      	adds	r3, #1
 8007d16:	9309      	str	r3, [sp, #36]	; 0x24
 8007d18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007d1c:	2400      	movs	r4, #0
 8007d1e:	00e3      	lsls	r3, r4, #3
 8007d20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d22:	4bc9      	ldr	r3, [pc, #804]	; (8008048 <__ieee754_pow+0x750>)
 8007d24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d28:	ed93 7b00 	vldr	d7, [r3]
 8007d2c:	4629      	mov	r1, r5
 8007d2e:	ec53 2b17 	vmov	r2, r3, d7
 8007d32:	eeb0 8a47 	vmov.f32	s16, s14
 8007d36:	eef0 8a67 	vmov.f32	s17, s15
 8007d3a:	4682      	mov	sl, r0
 8007d3c:	f7f8 fab4 	bl	80002a8 <__aeabi_dsub>
 8007d40:	4652      	mov	r2, sl
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	462b      	mov	r3, r5
 8007d48:	ec51 0b18 	vmov	r0, r1, d8
 8007d4c:	f7f8 faae 	bl	80002ac <__adddf3>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	2000      	movs	r0, #0
 8007d56:	49bd      	ldr	r1, [pc, #756]	; (800804c <__ieee754_pow+0x754>)
 8007d58:	f7f8 fd88 	bl	800086c <__aeabi_ddiv>
 8007d5c:	ec41 0b19 	vmov	d9, r0, r1
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4630      	mov	r0, r6
 8007d66:	4639      	mov	r1, r7
 8007d68:	f7f8 fc56 	bl	8000618 <__aeabi_dmul>
 8007d6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d78:	2300      	movs	r3, #0
 8007d7a:	9304      	str	r3, [sp, #16]
 8007d7c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007d80:	46ab      	mov	fp, r5
 8007d82:	106d      	asrs	r5, r5, #1
 8007d84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007d88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007d8c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007d90:	2200      	movs	r2, #0
 8007d92:	4640      	mov	r0, r8
 8007d94:	4649      	mov	r1, r9
 8007d96:	4614      	mov	r4, r2
 8007d98:	461d      	mov	r5, r3
 8007d9a:	f7f8 fc3d 	bl	8000618 <__aeabi_dmul>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	f7f8 fa7f 	bl	80002a8 <__aeabi_dsub>
 8007daa:	ec53 2b18 	vmov	r2, r3, d8
 8007dae:	4606      	mov	r6, r0
 8007db0:	460f      	mov	r7, r1
 8007db2:	4620      	mov	r0, r4
 8007db4:	4629      	mov	r1, r5
 8007db6:	f7f8 fa77 	bl	80002a8 <__aeabi_dsub>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	f7f8 fa71 	bl	80002a8 <__aeabi_dsub>
 8007dc6:	4642      	mov	r2, r8
 8007dc8:	464b      	mov	r3, r9
 8007dca:	f7f8 fc25 	bl	8000618 <__aeabi_dmul>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 fa67 	bl	80002a8 <__aeabi_dsub>
 8007dda:	ec53 2b19 	vmov	r2, r3, d9
 8007dde:	f7f8 fc1b 	bl	8000618 <__aeabi_dmul>
 8007de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007de6:	ec41 0b18 	vmov	d8, r0, r1
 8007dea:	4610      	mov	r0, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	f7f8 fc13 	bl	8000618 <__aeabi_dmul>
 8007df2:	a37d      	add	r3, pc, #500	; (adr r3, 8007fe8 <__ieee754_pow+0x6f0>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	f7f8 fc0c 	bl	8000618 <__aeabi_dmul>
 8007e00:	a37b      	add	r3, pc, #492	; (adr r3, 8007ff0 <__ieee754_pow+0x6f8>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fa51 	bl	80002ac <__adddf3>
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	f7f8 fc03 	bl	8000618 <__aeabi_dmul>
 8007e12:	a379      	add	r3, pc, #484	; (adr r3, 8007ff8 <__ieee754_pow+0x700>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 fa48 	bl	80002ac <__adddf3>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	462b      	mov	r3, r5
 8007e20:	f7f8 fbfa 	bl	8000618 <__aeabi_dmul>
 8007e24:	a376      	add	r3, pc, #472	; (adr r3, 8008000 <__ieee754_pow+0x708>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fa3f 	bl	80002ac <__adddf3>
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	f7f8 fbf1 	bl	8000618 <__aeabi_dmul>
 8007e36:	a374      	add	r3, pc, #464	; (adr r3, 8008008 <__ieee754_pow+0x710>)
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 fa36 	bl	80002ac <__adddf3>
 8007e40:	4622      	mov	r2, r4
 8007e42:	462b      	mov	r3, r5
 8007e44:	f7f8 fbe8 	bl	8000618 <__aeabi_dmul>
 8007e48:	a371      	add	r3, pc, #452	; (adr r3, 8008010 <__ieee754_pow+0x718>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f7f8 fa2d 	bl	80002ac <__adddf3>
 8007e52:	4622      	mov	r2, r4
 8007e54:	4606      	mov	r6, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	462b      	mov	r3, r5
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	f7f8 fbdb 	bl	8000618 <__aeabi_dmul>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 fbd5 	bl	8000618 <__aeabi_dmul>
 8007e6e:	4642      	mov	r2, r8
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	464b      	mov	r3, r9
 8007e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e7a:	f7f8 fa17 	bl	80002ac <__adddf3>
 8007e7e:	ec53 2b18 	vmov	r2, r3, d8
 8007e82:	f7f8 fbc9 	bl	8000618 <__aeabi_dmul>
 8007e86:	4622      	mov	r2, r4
 8007e88:	462b      	mov	r3, r5
 8007e8a:	f7f8 fa0f 	bl	80002ac <__adddf3>
 8007e8e:	4642      	mov	r2, r8
 8007e90:	4682      	mov	sl, r0
 8007e92:	468b      	mov	fp, r1
 8007e94:	464b      	mov	r3, r9
 8007e96:	4640      	mov	r0, r8
 8007e98:	4649      	mov	r1, r9
 8007e9a:	f7f8 fbbd 	bl	8000618 <__aeabi_dmul>
 8007e9e:	4b6c      	ldr	r3, [pc, #432]	; (8008050 <__ieee754_pow+0x758>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	f7f8 fa01 	bl	80002ac <__adddf3>
 8007eaa:	4652      	mov	r2, sl
 8007eac:	465b      	mov	r3, fp
 8007eae:	f7f8 f9fd 	bl	80002ac <__adddf3>
 8007eb2:	9c04      	ldr	r4, [sp, #16]
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fbab 	bl	8000618 <__aeabi_dmul>
 8007ec2:	4b63      	ldr	r3, [pc, #396]	; (8008050 <__ieee754_pow+0x758>)
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4620      	mov	r0, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	f7f8 f9eb 	bl	80002a8 <__aeabi_dsub>
 8007ed2:	4632      	mov	r2, r6
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	f7f8 f9e7 	bl	80002a8 <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4650      	mov	r0, sl
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	f7f8 f9e1 	bl	80002a8 <__aeabi_dsub>
 8007ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eea:	f7f8 fb95 	bl	8000618 <__aeabi_dmul>
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	ec51 0b18 	vmov	r0, r1, d8
 8007efa:	f7f8 fb8d 	bl	8000618 <__aeabi_dmul>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4630      	mov	r0, r6
 8007f04:	4639      	mov	r1, r7
 8007f06:	f7f8 f9d1 	bl	80002ac <__adddf3>
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4640      	mov	r0, r8
 8007f14:	4649      	mov	r1, r9
 8007f16:	f7f8 f9c9 	bl	80002ac <__adddf3>
 8007f1a:	9c04      	ldr	r4, [sp, #16]
 8007f1c:	a33e      	add	r3, pc, #248	; (adr r3, 8008018 <__ieee754_pow+0x720>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	4620      	mov	r0, r4
 8007f24:	460d      	mov	r5, r1
 8007f26:	f7f8 fb77 	bl	8000618 <__aeabi_dmul>
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	ec41 0b18 	vmov	d8, r0, r1
 8007f30:	464b      	mov	r3, r9
 8007f32:	4620      	mov	r0, r4
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 f9b7 	bl	80002a8 <__aeabi_dsub>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4630      	mov	r0, r6
 8007f40:	4639      	mov	r1, r7
 8007f42:	f7f8 f9b1 	bl	80002a8 <__aeabi_dsub>
 8007f46:	a336      	add	r3, pc, #216	; (adr r3, 8008020 <__ieee754_pow+0x728>)
 8007f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4c:	f7f8 fb64 	bl	8000618 <__aeabi_dmul>
 8007f50:	a335      	add	r3, pc, #212	; (adr r3, 8008028 <__ieee754_pow+0x730>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7f8 fb5b 	bl	8000618 <__aeabi_dmul>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4630      	mov	r0, r6
 8007f68:	4639      	mov	r1, r7
 8007f6a:	f7f8 f99f 	bl	80002ac <__adddf3>
 8007f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f70:	4b38      	ldr	r3, [pc, #224]	; (8008054 <__ieee754_pow+0x75c>)
 8007f72:	4413      	add	r3, r2
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f998 	bl	80002ac <__adddf3>
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f80:	468b      	mov	fp, r1
 8007f82:	f7f8 fadf 	bl	8000544 <__aeabi_i2d>
 8007f86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f88:	4b33      	ldr	r3, [pc, #204]	; (8008058 <__ieee754_pow+0x760>)
 8007f8a:	4413      	add	r3, r2
 8007f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f90:	4606      	mov	r6, r0
 8007f92:	460f      	mov	r7, r1
 8007f94:	4652      	mov	r2, sl
 8007f96:	465b      	mov	r3, fp
 8007f98:	ec51 0b18 	vmov	r0, r1, d8
 8007f9c:	f7f8 f986 	bl	80002ac <__adddf3>
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	f7f8 f982 	bl	80002ac <__adddf3>
 8007fa8:	4632      	mov	r2, r6
 8007faa:	463b      	mov	r3, r7
 8007fac:	f7f8 f97e 	bl	80002ac <__adddf3>
 8007fb0:	9c04      	ldr	r4, [sp, #16]
 8007fb2:	4632      	mov	r2, r6
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	460d      	mov	r5, r1
 8007fba:	f7f8 f975 	bl	80002a8 <__aeabi_dsub>
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	f7f8 f971 	bl	80002a8 <__aeabi_dsub>
 8007fc6:	ec53 2b18 	vmov	r2, r3, d8
 8007fca:	f7f8 f96d 	bl	80002a8 <__aeabi_dsub>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	e606      	b.n	8007be6 <__ieee754_pow+0x2ee>
 8007fd8:	2401      	movs	r4, #1
 8007fda:	e6a0      	b.n	8007d1e <__ieee754_pow+0x426>
 8007fdc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008030 <__ieee754_pow+0x738>
 8007fe0:	e60d      	b.n	8007bfe <__ieee754_pow+0x306>
 8007fe2:	bf00      	nop
 8007fe4:	f3af 8000 	nop.w
 8007fe8:	4a454eef 	.word	0x4a454eef
 8007fec:	3fca7e28 	.word	0x3fca7e28
 8007ff0:	93c9db65 	.word	0x93c9db65
 8007ff4:	3fcd864a 	.word	0x3fcd864a
 8007ff8:	a91d4101 	.word	0xa91d4101
 8007ffc:	3fd17460 	.word	0x3fd17460
 8008000:	518f264d 	.word	0x518f264d
 8008004:	3fd55555 	.word	0x3fd55555
 8008008:	db6fabff 	.word	0xdb6fabff
 800800c:	3fdb6db6 	.word	0x3fdb6db6
 8008010:	33333303 	.word	0x33333303
 8008014:	3fe33333 	.word	0x3fe33333
 8008018:	e0000000 	.word	0xe0000000
 800801c:	3feec709 	.word	0x3feec709
 8008020:	dc3a03fd 	.word	0xdc3a03fd
 8008024:	3feec709 	.word	0x3feec709
 8008028:	145b01f5 	.word	0x145b01f5
 800802c:	be3e2fe0 	.word	0xbe3e2fe0
 8008030:	00000000 	.word	0x00000000
 8008034:	3ff00000 	.word	0x3ff00000
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	43400000 	.word	0x43400000
 8008040:	0003988e 	.word	0x0003988e
 8008044:	000bb679 	.word	0x000bb679
 8008048:	08008918 	.word	0x08008918
 800804c:	3ff00000 	.word	0x3ff00000
 8008050:	40080000 	.word	0x40080000
 8008054:	08008938 	.word	0x08008938
 8008058:	08008928 	.word	0x08008928
 800805c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008334 <__ieee754_pow+0xa3c>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 f921 	bl	80002ac <__adddf3>
 800806a:	4622      	mov	r2, r4
 800806c:	ec41 0b1a 	vmov	d10, r0, r1
 8008070:	462b      	mov	r3, r5
 8008072:	4630      	mov	r0, r6
 8008074:	4639      	mov	r1, r7
 8008076:	f7f8 f917 	bl	80002a8 <__aeabi_dsub>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	ec51 0b1a 	vmov	r0, r1, d10
 8008082:	f7f8 fd59 	bl	8000b38 <__aeabi_dcmpgt>
 8008086:	2800      	cmp	r0, #0
 8008088:	f47f adf8 	bne.w	8007c7c <__ieee754_pow+0x384>
 800808c:	4aa4      	ldr	r2, [pc, #656]	; (8008320 <__ieee754_pow+0xa28>)
 800808e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008092:	4293      	cmp	r3, r2
 8008094:	f340 810b 	ble.w	80082ae <__ieee754_pow+0x9b6>
 8008098:	151b      	asrs	r3, r3, #20
 800809a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800809e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80080a2:	fa4a f303 	asr.w	r3, sl, r3
 80080a6:	445b      	add	r3, fp
 80080a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80080ac:	4e9d      	ldr	r6, [pc, #628]	; (8008324 <__ieee754_pow+0xa2c>)
 80080ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80080b2:	4116      	asrs	r6, r2
 80080b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80080b8:	2000      	movs	r0, #0
 80080ba:	ea23 0106 	bic.w	r1, r3, r6
 80080be:	f1c2 0214 	rsb	r2, r2, #20
 80080c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80080c6:	fa4a fa02 	asr.w	sl, sl, r2
 80080ca:	f1bb 0f00 	cmp.w	fp, #0
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4620      	mov	r0, r4
 80080d4:	4629      	mov	r1, r5
 80080d6:	bfb8      	it	lt
 80080d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80080dc:	f7f8 f8e4 	bl	80002a8 <__aeabi_dsub>
 80080e0:	ec41 0b19 	vmov	d9, r0, r1
 80080e4:	4642      	mov	r2, r8
 80080e6:	464b      	mov	r3, r9
 80080e8:	ec51 0b19 	vmov	r0, r1, d9
 80080ec:	f7f8 f8de 	bl	80002ac <__adddf3>
 80080f0:	2400      	movs	r4, #0
 80080f2:	a379      	add	r3, pc, #484	; (adr r3, 80082d8 <__ieee754_pow+0x9e0>)
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	4620      	mov	r0, r4
 80080fa:	460d      	mov	r5, r1
 80080fc:	f7f8 fa8c 	bl	8000618 <__aeabi_dmul>
 8008100:	ec53 2b19 	vmov	r2, r3, d9
 8008104:	4606      	mov	r6, r0
 8008106:	460f      	mov	r7, r1
 8008108:	4620      	mov	r0, r4
 800810a:	4629      	mov	r1, r5
 800810c:	f7f8 f8cc 	bl	80002a8 <__aeabi_dsub>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 f8c6 	bl	80002a8 <__aeabi_dsub>
 800811c:	a370      	add	r3, pc, #448	; (adr r3, 80082e0 <__ieee754_pow+0x9e8>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	f7f8 fa79 	bl	8000618 <__aeabi_dmul>
 8008126:	a370      	add	r3, pc, #448	; (adr r3, 80082e8 <__ieee754_pow+0x9f0>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	4680      	mov	r8, r0
 800812e:	4689      	mov	r9, r1
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	f7f8 fa70 	bl	8000618 <__aeabi_dmul>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4640      	mov	r0, r8
 800813e:	4649      	mov	r1, r9
 8008140:	f7f8 f8b4 	bl	80002ac <__adddf3>
 8008144:	4604      	mov	r4, r0
 8008146:	460d      	mov	r5, r1
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4630      	mov	r0, r6
 800814e:	4639      	mov	r1, r7
 8008150:	f7f8 f8ac 	bl	80002ac <__adddf3>
 8008154:	4632      	mov	r2, r6
 8008156:	463b      	mov	r3, r7
 8008158:	4680      	mov	r8, r0
 800815a:	4689      	mov	r9, r1
 800815c:	f7f8 f8a4 	bl	80002a8 <__aeabi_dsub>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4620      	mov	r0, r4
 8008166:	4629      	mov	r1, r5
 8008168:	f7f8 f89e 	bl	80002a8 <__aeabi_dsub>
 800816c:	4642      	mov	r2, r8
 800816e:	4606      	mov	r6, r0
 8008170:	460f      	mov	r7, r1
 8008172:	464b      	mov	r3, r9
 8008174:	4640      	mov	r0, r8
 8008176:	4649      	mov	r1, r9
 8008178:	f7f8 fa4e 	bl	8000618 <__aeabi_dmul>
 800817c:	a35c      	add	r3, pc, #368	; (adr r3, 80082f0 <__ieee754_pow+0x9f8>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	4604      	mov	r4, r0
 8008184:	460d      	mov	r5, r1
 8008186:	f7f8 fa47 	bl	8000618 <__aeabi_dmul>
 800818a:	a35b      	add	r3, pc, #364	; (adr r3, 80082f8 <__ieee754_pow+0xa00>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 f88a 	bl	80002a8 <__aeabi_dsub>
 8008194:	4622      	mov	r2, r4
 8008196:	462b      	mov	r3, r5
 8008198:	f7f8 fa3e 	bl	8000618 <__aeabi_dmul>
 800819c:	a358      	add	r3, pc, #352	; (adr r3, 8008300 <__ieee754_pow+0xa08>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 f883 	bl	80002ac <__adddf3>
 80081a6:	4622      	mov	r2, r4
 80081a8:	462b      	mov	r3, r5
 80081aa:	f7f8 fa35 	bl	8000618 <__aeabi_dmul>
 80081ae:	a356      	add	r3, pc, #344	; (adr r3, 8008308 <__ieee754_pow+0xa10>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 f878 	bl	80002a8 <__aeabi_dsub>
 80081b8:	4622      	mov	r2, r4
 80081ba:	462b      	mov	r3, r5
 80081bc:	f7f8 fa2c 	bl	8000618 <__aeabi_dmul>
 80081c0:	a353      	add	r3, pc, #332	; (adr r3, 8008310 <__ieee754_pow+0xa18>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f871 	bl	80002ac <__adddf3>
 80081ca:	4622      	mov	r2, r4
 80081cc:	462b      	mov	r3, r5
 80081ce:	f7f8 fa23 	bl	8000618 <__aeabi_dmul>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4640      	mov	r0, r8
 80081d8:	4649      	mov	r1, r9
 80081da:	f7f8 f865 	bl	80002a8 <__aeabi_dsub>
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4640      	mov	r0, r8
 80081e8:	4649      	mov	r1, r9
 80081ea:	f7f8 fa15 	bl	8000618 <__aeabi_dmul>
 80081ee:	2200      	movs	r2, #0
 80081f0:	ec41 0b19 	vmov	d9, r0, r1
 80081f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081f8:	4620      	mov	r0, r4
 80081fa:	4629      	mov	r1, r5
 80081fc:	f7f8 f854 	bl	80002a8 <__aeabi_dsub>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	ec51 0b19 	vmov	r0, r1, d9
 8008208:	f7f8 fb30 	bl	800086c <__aeabi_ddiv>
 800820c:	4632      	mov	r2, r6
 800820e:	4604      	mov	r4, r0
 8008210:	460d      	mov	r5, r1
 8008212:	463b      	mov	r3, r7
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	f7f8 f9fe 	bl	8000618 <__aeabi_dmul>
 800821c:	4632      	mov	r2, r6
 800821e:	463b      	mov	r3, r7
 8008220:	f7f8 f844 	bl	80002ac <__adddf3>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4620      	mov	r0, r4
 800822a:	4629      	mov	r1, r5
 800822c:	f7f8 f83c 	bl	80002a8 <__aeabi_dsub>
 8008230:	4642      	mov	r2, r8
 8008232:	464b      	mov	r3, r9
 8008234:	f7f8 f838 	bl	80002a8 <__aeabi_dsub>
 8008238:	460b      	mov	r3, r1
 800823a:	4602      	mov	r2, r0
 800823c:	493a      	ldr	r1, [pc, #232]	; (8008328 <__ieee754_pow+0xa30>)
 800823e:	2000      	movs	r0, #0
 8008240:	f7f8 f832 	bl	80002a8 <__aeabi_dsub>
 8008244:	e9cd 0100 	strd	r0, r1, [sp]
 8008248:	9b01      	ldr	r3, [sp, #4]
 800824a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800824e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008252:	da2f      	bge.n	80082b4 <__ieee754_pow+0x9bc>
 8008254:	4650      	mov	r0, sl
 8008256:	ed9d 0b00 	vldr	d0, [sp]
 800825a:	f000 f9cd 	bl	80085f8 <scalbn>
 800825e:	ec51 0b10 	vmov	r0, r1, d0
 8008262:	ec53 2b18 	vmov	r2, r3, d8
 8008266:	f7ff bbe0 	b.w	8007a2a <__ieee754_pow+0x132>
 800826a:	4b30      	ldr	r3, [pc, #192]	; (800832c <__ieee754_pow+0xa34>)
 800826c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008270:	429e      	cmp	r6, r3
 8008272:	f77f af0b 	ble.w	800808c <__ieee754_pow+0x794>
 8008276:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <__ieee754_pow+0xa38>)
 8008278:	440b      	add	r3, r1
 800827a:	4303      	orrs	r3, r0
 800827c:	d00b      	beq.n	8008296 <__ieee754_pow+0x99e>
 800827e:	a326      	add	r3, pc, #152	; (adr r3, 8008318 <__ieee754_pow+0xa20>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	ec51 0b18 	vmov	r0, r1, d8
 8008288:	f7f8 f9c6 	bl	8000618 <__aeabi_dmul>
 800828c:	a322      	add	r3, pc, #136	; (adr r3, 8008318 <__ieee754_pow+0xa20>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7ff bbca 	b.w	8007a2a <__ieee754_pow+0x132>
 8008296:	4622      	mov	r2, r4
 8008298:	462b      	mov	r3, r5
 800829a:	f7f8 f805 	bl	80002a8 <__aeabi_dsub>
 800829e:	4642      	mov	r2, r8
 80082a0:	464b      	mov	r3, r9
 80082a2:	f7f8 fc3f 	bl	8000b24 <__aeabi_dcmpge>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f43f aef0 	beq.w	800808c <__ieee754_pow+0x794>
 80082ac:	e7e7      	b.n	800827e <__ieee754_pow+0x986>
 80082ae:	f04f 0a00 	mov.w	sl, #0
 80082b2:	e717      	b.n	80080e4 <__ieee754_pow+0x7ec>
 80082b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b8:	4619      	mov	r1, r3
 80082ba:	e7d2      	b.n	8008262 <__ieee754_pow+0x96a>
 80082bc:	491a      	ldr	r1, [pc, #104]	; (8008328 <__ieee754_pow+0xa30>)
 80082be:	2000      	movs	r0, #0
 80082c0:	f7ff bb9e 	b.w	8007a00 <__ieee754_pow+0x108>
 80082c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c8:	f7ff bb9a 	b.w	8007a00 <__ieee754_pow+0x108>
 80082cc:	9000      	str	r0, [sp, #0]
 80082ce:	f7ff bb76 	b.w	80079be <__ieee754_pow+0xc6>
 80082d2:	2100      	movs	r1, #0
 80082d4:	f7ff bb60 	b.w	8007998 <__ieee754_pow+0xa0>
 80082d8:	00000000 	.word	0x00000000
 80082dc:	3fe62e43 	.word	0x3fe62e43
 80082e0:	fefa39ef 	.word	0xfefa39ef
 80082e4:	3fe62e42 	.word	0x3fe62e42
 80082e8:	0ca86c39 	.word	0x0ca86c39
 80082ec:	be205c61 	.word	0xbe205c61
 80082f0:	72bea4d0 	.word	0x72bea4d0
 80082f4:	3e663769 	.word	0x3e663769
 80082f8:	c5d26bf1 	.word	0xc5d26bf1
 80082fc:	3ebbbd41 	.word	0x3ebbbd41
 8008300:	af25de2c 	.word	0xaf25de2c
 8008304:	3f11566a 	.word	0x3f11566a
 8008308:	16bebd93 	.word	0x16bebd93
 800830c:	3f66c16c 	.word	0x3f66c16c
 8008310:	5555553e 	.word	0x5555553e
 8008314:	3fc55555 	.word	0x3fc55555
 8008318:	c2f8f359 	.word	0xc2f8f359
 800831c:	01a56e1f 	.word	0x01a56e1f
 8008320:	3fe00000 	.word	0x3fe00000
 8008324:	000fffff 	.word	0x000fffff
 8008328:	3ff00000 	.word	0x3ff00000
 800832c:	4090cbff 	.word	0x4090cbff
 8008330:	3f6f3400 	.word	0x3f6f3400
 8008334:	652b82fe 	.word	0x652b82fe
 8008338:	3c971547 	.word	0x3c971547

0800833c <__ieee754_sqrt>:
 800833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008340:	ec55 4b10 	vmov	r4, r5, d0
 8008344:	4e56      	ldr	r6, [pc, #344]	; (80084a0 <__ieee754_sqrt+0x164>)
 8008346:	43ae      	bics	r6, r5
 8008348:	ee10 0a10 	vmov	r0, s0
 800834c:	ee10 3a10 	vmov	r3, s0
 8008350:	4629      	mov	r1, r5
 8008352:	462a      	mov	r2, r5
 8008354:	d110      	bne.n	8008378 <__ieee754_sqrt+0x3c>
 8008356:	ee10 2a10 	vmov	r2, s0
 800835a:	462b      	mov	r3, r5
 800835c:	f7f8 f95c 	bl	8000618 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f7 ffa0 	bl	80002ac <__adddf3>
 800836c:	4604      	mov	r4, r0
 800836e:	460d      	mov	r5, r1
 8008370:	ec45 4b10 	vmov	d0, r4, r5
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	2d00      	cmp	r5, #0
 800837a:	dc10      	bgt.n	800839e <__ieee754_sqrt+0x62>
 800837c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008380:	4330      	orrs	r0, r6
 8008382:	d0f5      	beq.n	8008370 <__ieee754_sqrt+0x34>
 8008384:	b15d      	cbz	r5, 800839e <__ieee754_sqrt+0x62>
 8008386:	ee10 2a10 	vmov	r2, s0
 800838a:	462b      	mov	r3, r5
 800838c:	ee10 0a10 	vmov	r0, s0
 8008390:	f7f7 ff8a 	bl	80002a8 <__aeabi_dsub>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	f7f8 fa68 	bl	800086c <__aeabi_ddiv>
 800839c:	e7e6      	b.n	800836c <__ieee754_sqrt+0x30>
 800839e:	1509      	asrs	r1, r1, #20
 80083a0:	d076      	beq.n	8008490 <__ieee754_sqrt+0x154>
 80083a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80083a6:	07ce      	lsls	r6, r1, #31
 80083a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80083ac:	bf5e      	ittt	pl
 80083ae:	0fda      	lsrpl	r2, r3, #31
 80083b0:	005b      	lslpl	r3, r3, #1
 80083b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80083b6:	0fda      	lsrs	r2, r3, #31
 80083b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80083bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80083c0:	2000      	movs	r0, #0
 80083c2:	106d      	asrs	r5, r5, #1
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	f04f 0e16 	mov.w	lr, #22
 80083ca:	4684      	mov	ip, r0
 80083cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083d0:	eb0c 0401 	add.w	r4, ip, r1
 80083d4:	4294      	cmp	r4, r2
 80083d6:	bfde      	ittt	le
 80083d8:	1b12      	suble	r2, r2, r4
 80083da:	eb04 0c01 	addle.w	ip, r4, r1
 80083de:	1840      	addle	r0, r0, r1
 80083e0:	0052      	lsls	r2, r2, #1
 80083e2:	f1be 0e01 	subs.w	lr, lr, #1
 80083e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80083ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083f2:	d1ed      	bne.n	80083d0 <__ieee754_sqrt+0x94>
 80083f4:	4671      	mov	r1, lr
 80083f6:	2720      	movs	r7, #32
 80083f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80083fc:	4562      	cmp	r2, ip
 80083fe:	eb04 060e 	add.w	r6, r4, lr
 8008402:	dc02      	bgt.n	800840a <__ieee754_sqrt+0xce>
 8008404:	d113      	bne.n	800842e <__ieee754_sqrt+0xf2>
 8008406:	429e      	cmp	r6, r3
 8008408:	d811      	bhi.n	800842e <__ieee754_sqrt+0xf2>
 800840a:	2e00      	cmp	r6, #0
 800840c:	eb06 0e04 	add.w	lr, r6, r4
 8008410:	da43      	bge.n	800849a <__ieee754_sqrt+0x15e>
 8008412:	f1be 0f00 	cmp.w	lr, #0
 8008416:	db40      	blt.n	800849a <__ieee754_sqrt+0x15e>
 8008418:	f10c 0801 	add.w	r8, ip, #1
 800841c:	eba2 020c 	sub.w	r2, r2, ip
 8008420:	429e      	cmp	r6, r3
 8008422:	bf88      	it	hi
 8008424:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008428:	1b9b      	subs	r3, r3, r6
 800842a:	4421      	add	r1, r4
 800842c:	46c4      	mov	ip, r8
 800842e:	0052      	lsls	r2, r2, #1
 8008430:	3f01      	subs	r7, #1
 8008432:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008436:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800843a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800843e:	d1dd      	bne.n	80083fc <__ieee754_sqrt+0xc0>
 8008440:	4313      	orrs	r3, r2
 8008442:	d006      	beq.n	8008452 <__ieee754_sqrt+0x116>
 8008444:	1c4c      	adds	r4, r1, #1
 8008446:	bf13      	iteet	ne
 8008448:	3101      	addne	r1, #1
 800844a:	3001      	addeq	r0, #1
 800844c:	4639      	moveq	r1, r7
 800844e:	f021 0101 	bicne.w	r1, r1, #1
 8008452:	1043      	asrs	r3, r0, #1
 8008454:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008458:	0849      	lsrs	r1, r1, #1
 800845a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800845e:	07c2      	lsls	r2, r0, #31
 8008460:	bf48      	it	mi
 8008462:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008466:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800846a:	460c      	mov	r4, r1
 800846c:	463d      	mov	r5, r7
 800846e:	e77f      	b.n	8008370 <__ieee754_sqrt+0x34>
 8008470:	0ada      	lsrs	r2, r3, #11
 8008472:	3815      	subs	r0, #21
 8008474:	055b      	lsls	r3, r3, #21
 8008476:	2a00      	cmp	r2, #0
 8008478:	d0fa      	beq.n	8008470 <__ieee754_sqrt+0x134>
 800847a:	02d7      	lsls	r7, r2, #11
 800847c:	d50a      	bpl.n	8008494 <__ieee754_sqrt+0x158>
 800847e:	f1c1 0420 	rsb	r4, r1, #32
 8008482:	fa23 f404 	lsr.w	r4, r3, r4
 8008486:	1e4d      	subs	r5, r1, #1
 8008488:	408b      	lsls	r3, r1
 800848a:	4322      	orrs	r2, r4
 800848c:	1b41      	subs	r1, r0, r5
 800848e:	e788      	b.n	80083a2 <__ieee754_sqrt+0x66>
 8008490:	4608      	mov	r0, r1
 8008492:	e7f0      	b.n	8008476 <__ieee754_sqrt+0x13a>
 8008494:	0052      	lsls	r2, r2, #1
 8008496:	3101      	adds	r1, #1
 8008498:	e7ef      	b.n	800847a <__ieee754_sqrt+0x13e>
 800849a:	46e0      	mov	r8, ip
 800849c:	e7be      	b.n	800841c <__ieee754_sqrt+0xe0>
 800849e:	bf00      	nop
 80084a0:	7ff00000 	.word	0x7ff00000

080084a4 <fabs>:
 80084a4:	ec51 0b10 	vmov	r0, r1, d0
 80084a8:	ee10 2a10 	vmov	r2, s0
 80084ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084b0:	ec43 2b10 	vmov	d0, r2, r3
 80084b4:	4770      	bx	lr

080084b6 <finite>:
 80084b6:	b082      	sub	sp, #8
 80084b8:	ed8d 0b00 	vstr	d0, [sp]
 80084bc:	9801      	ldr	r0, [sp, #4]
 80084be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80084c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80084c6:	0fc0      	lsrs	r0, r0, #31
 80084c8:	b002      	add	sp, #8
 80084ca:	4770      	bx	lr
 80084cc:	0000      	movs	r0, r0
	...

080084d0 <nan>:
 80084d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084d8 <nan+0x8>
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	00000000 	.word	0x00000000
 80084dc:	7ff80000 	.word	0x7ff80000

080084e0 <rint>:
 80084e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e2:	ec51 0b10 	vmov	r0, r1, d0
 80084e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80084ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80084ee:	2e13      	cmp	r6, #19
 80084f0:	ee10 4a10 	vmov	r4, s0
 80084f4:	460b      	mov	r3, r1
 80084f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80084fa:	dc58      	bgt.n	80085ae <rint+0xce>
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	da2b      	bge.n	8008558 <rint+0x78>
 8008500:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008504:	4302      	orrs	r2, r0
 8008506:	d023      	beq.n	8008550 <rint+0x70>
 8008508:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800850c:	4302      	orrs	r2, r0
 800850e:	4254      	negs	r4, r2
 8008510:	4314      	orrs	r4, r2
 8008512:	0c4b      	lsrs	r3, r1, #17
 8008514:	0b24      	lsrs	r4, r4, #12
 8008516:	045b      	lsls	r3, r3, #17
 8008518:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800851c:	ea44 0103 	orr.w	r1, r4, r3
 8008520:	4b32      	ldr	r3, [pc, #200]	; (80085ec <rint+0x10c>)
 8008522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008526:	e9d3 6700 	ldrd	r6, r7, [r3]
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f7 febb 	bl	80002ac <__adddf3>
 8008536:	e9cd 0100 	strd	r0, r1, [sp]
 800853a:	463b      	mov	r3, r7
 800853c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008540:	4632      	mov	r2, r6
 8008542:	f7f7 feb1 	bl	80002a8 <__aeabi_dsub>
 8008546:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800854a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800854e:	4639      	mov	r1, r7
 8008550:	ec41 0b10 	vmov	d0, r0, r1
 8008554:	b003      	add	sp, #12
 8008556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008558:	4a25      	ldr	r2, [pc, #148]	; (80085f0 <rint+0x110>)
 800855a:	4132      	asrs	r2, r6
 800855c:	ea01 0702 	and.w	r7, r1, r2
 8008560:	4307      	orrs	r7, r0
 8008562:	d0f5      	beq.n	8008550 <rint+0x70>
 8008564:	0851      	lsrs	r1, r2, #1
 8008566:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800856a:	4314      	orrs	r4, r2
 800856c:	d00c      	beq.n	8008588 <rint+0xa8>
 800856e:	ea23 0201 	bic.w	r2, r3, r1
 8008572:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008576:	2e13      	cmp	r6, #19
 8008578:	fa43 f606 	asr.w	r6, r3, r6
 800857c:	bf0c      	ite	eq
 800857e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008582:	2400      	movne	r4, #0
 8008584:	ea42 0306 	orr.w	r3, r2, r6
 8008588:	4918      	ldr	r1, [pc, #96]	; (80085ec <rint+0x10c>)
 800858a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800858e:	4622      	mov	r2, r4
 8008590:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f7 fe88 	bl	80002ac <__adddf3>
 800859c:	e9cd 0100 	strd	r0, r1, [sp]
 80085a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a4:	4622      	mov	r2, r4
 80085a6:	462b      	mov	r3, r5
 80085a8:	f7f7 fe7e 	bl	80002a8 <__aeabi_dsub>
 80085ac:	e7d0      	b.n	8008550 <rint+0x70>
 80085ae:	2e33      	cmp	r6, #51	; 0x33
 80085b0:	dd07      	ble.n	80085c2 <rint+0xe2>
 80085b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80085b6:	d1cb      	bne.n	8008550 <rint+0x70>
 80085b8:	ee10 2a10 	vmov	r2, s0
 80085bc:	f7f7 fe76 	bl	80002ac <__adddf3>
 80085c0:	e7c6      	b.n	8008550 <rint+0x70>
 80085c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80085c6:	f04f 36ff 	mov.w	r6, #4294967295
 80085ca:	40d6      	lsrs	r6, r2
 80085cc:	4230      	tst	r0, r6
 80085ce:	d0bf      	beq.n	8008550 <rint+0x70>
 80085d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80085d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80085d8:	bf1f      	itttt	ne
 80085da:	ea24 0101 	bicne.w	r1, r4, r1
 80085de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80085e2:	fa44 f202 	asrne.w	r2, r4, r2
 80085e6:	ea41 0402 	orrne.w	r4, r1, r2
 80085ea:	e7cd      	b.n	8008588 <rint+0xa8>
 80085ec:	08008948 	.word	0x08008948
 80085f0:	000fffff 	.word	0x000fffff
 80085f4:	00000000 	.word	0x00000000

080085f8 <scalbn>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	ec55 4b10 	vmov	r4, r5, d0
 80085fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008602:	4606      	mov	r6, r0
 8008604:	462b      	mov	r3, r5
 8008606:	b99a      	cbnz	r2, 8008630 <scalbn+0x38>
 8008608:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800860c:	4323      	orrs	r3, r4
 800860e:	d036      	beq.n	800867e <scalbn+0x86>
 8008610:	4b39      	ldr	r3, [pc, #228]	; (80086f8 <scalbn+0x100>)
 8008612:	4629      	mov	r1, r5
 8008614:	ee10 0a10 	vmov	r0, s0
 8008618:	2200      	movs	r2, #0
 800861a:	f7f7 fffd 	bl	8000618 <__aeabi_dmul>
 800861e:	4b37      	ldr	r3, [pc, #220]	; (80086fc <scalbn+0x104>)
 8008620:	429e      	cmp	r6, r3
 8008622:	4604      	mov	r4, r0
 8008624:	460d      	mov	r5, r1
 8008626:	da10      	bge.n	800864a <scalbn+0x52>
 8008628:	a32b      	add	r3, pc, #172	; (adr r3, 80086d8 <scalbn+0xe0>)
 800862a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862e:	e03a      	b.n	80086a6 <scalbn+0xae>
 8008630:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008634:	428a      	cmp	r2, r1
 8008636:	d10c      	bne.n	8008652 <scalbn+0x5a>
 8008638:	ee10 2a10 	vmov	r2, s0
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f7f7 fe34 	bl	80002ac <__adddf3>
 8008644:	4604      	mov	r4, r0
 8008646:	460d      	mov	r5, r1
 8008648:	e019      	b.n	800867e <scalbn+0x86>
 800864a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800864e:	460b      	mov	r3, r1
 8008650:	3a36      	subs	r2, #54	; 0x36
 8008652:	4432      	add	r2, r6
 8008654:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008658:	428a      	cmp	r2, r1
 800865a:	dd08      	ble.n	800866e <scalbn+0x76>
 800865c:	2d00      	cmp	r5, #0
 800865e:	a120      	add	r1, pc, #128	; (adr r1, 80086e0 <scalbn+0xe8>)
 8008660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008664:	da1c      	bge.n	80086a0 <scalbn+0xa8>
 8008666:	a120      	add	r1, pc, #128	; (adr r1, 80086e8 <scalbn+0xf0>)
 8008668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800866c:	e018      	b.n	80086a0 <scalbn+0xa8>
 800866e:	2a00      	cmp	r2, #0
 8008670:	dd08      	ble.n	8008684 <scalbn+0x8c>
 8008672:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008676:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800867a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800867e:	ec45 4b10 	vmov	d0, r4, r5
 8008682:	bd70      	pop	{r4, r5, r6, pc}
 8008684:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008688:	da19      	bge.n	80086be <scalbn+0xc6>
 800868a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800868e:	429e      	cmp	r6, r3
 8008690:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008694:	dd0a      	ble.n	80086ac <scalbn+0xb4>
 8008696:	a112      	add	r1, pc, #72	; (adr r1, 80086e0 <scalbn+0xe8>)
 8008698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e2      	bne.n	8008666 <scalbn+0x6e>
 80086a0:	a30f      	add	r3, pc, #60	; (adr r3, 80086e0 <scalbn+0xe8>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f7f7 ffb7 	bl	8000618 <__aeabi_dmul>
 80086aa:	e7cb      	b.n	8008644 <scalbn+0x4c>
 80086ac:	a10a      	add	r1, pc, #40	; (adr r1, 80086d8 <scalbn+0xe0>)
 80086ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0b8      	beq.n	8008628 <scalbn+0x30>
 80086b6:	a10e      	add	r1, pc, #56	; (adr r1, 80086f0 <scalbn+0xf8>)
 80086b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086bc:	e7b4      	b.n	8008628 <scalbn+0x30>
 80086be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086c2:	3236      	adds	r2, #54	; 0x36
 80086c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80086cc:	4620      	mov	r0, r4
 80086ce:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <scalbn+0x108>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	e7e8      	b.n	80086a6 <scalbn+0xae>
 80086d4:	f3af 8000 	nop.w
 80086d8:	c2f8f359 	.word	0xc2f8f359
 80086dc:	01a56e1f 	.word	0x01a56e1f
 80086e0:	8800759c 	.word	0x8800759c
 80086e4:	7e37e43c 	.word	0x7e37e43c
 80086e8:	8800759c 	.word	0x8800759c
 80086ec:	fe37e43c 	.word	0xfe37e43c
 80086f0:	c2f8f359 	.word	0xc2f8f359
 80086f4:	81a56e1f 	.word	0x81a56e1f
 80086f8:	43500000 	.word	0x43500000
 80086fc:	ffff3cb0 	.word	0xffff3cb0
 8008700:	3c900000 	.word	0x3c900000

08008704 <_init>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr

08008710 <_fini>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr


Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000876c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08008920  08008920  00018920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b58  08008b58  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b60  08008b60  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e8  20000078  08008be0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004360  08008be0  00024360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021616  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048fa  00000000  00000000  000416be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00045fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00047490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f10  00000000  00000000  00048770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fb5  00000000  00000000  00070680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3cc6  00000000  00000000  00089635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d2fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  0016d350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008904 	.word	0x08008904

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008904 	.word	0x08008904

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  char *pdata; // data packet from computer
  char *yaw;
  int pos = 6; // yaw pos
 8000ec8:	2306      	movs	r3, #6
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  double vmax=30000;
 8000ecc:	a31b      	add	r3, pc, #108	; (adr r3, 8000f3c <Gimbal_Task_Function+0x7c>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double max_angle=4096;
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <Gimbal_Task_Function+0x68>)
 8000edc:	e9c7 2306 	strd	r2, r3, [r7, #24]

  int32_t yaw_data = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  yaw = malloc (4);
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	f005 fde3 	bl	8006ab0 <malloc>
 8000eea:	4603      	mov	r3, r0
 8000eec:	613b      	str	r3, [r7, #16]
  pdata = malloc(7); // packet total size, referring to comm protocol
 8000eee:	2007      	movs	r0, #7
 8000ef0:	f005 fdde 	bl	8006ab0 <malloc>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <Gimbal_Task_Function+0x6c>)
 8000efc:	f001 fead 	bl	8002c5a <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <Gimbal_Task_Function+0x70>)
 8000f02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f06:	801a      	strh	r2, [r3, #0]
////			  case '1': HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
////			  case '2': HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);break;
////			  case '123': HAL_GPIO_WritePin(GPIOG, LD_D_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
////		  }
//	  HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);
	  Motor_set_raw_value(&motor_data[0], comm_pack.yaw_data);
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <Gimbal_Task_Function+0x74>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fb19 	bl	8000544 <__aeabi_i2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	ec43 2b10 	vmov	d0, r2, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <Gimbal_Task_Function+0x78>)
 8000f1c:	f000 faa5 	bl	800146a <Motor_set_raw_value>
 8000f20:	e7f2      	b.n	8000f08 <Gimbal_Task_Function+0x48>
 8000f22:	bf00      	nop
 8000f24:	f3af 8000 	nop.w
 8000f28:	40b00000 	.word	0x40b00000
 8000f2c:	2000418c 	.word	0x2000418c
 8000f30:	20004236 	.word	0x20004236
 8000f34:	20004238 	.word	0x20004238
 8000f38:	20004084 	.word	0x20004084
 8000f3c:	00000000 	.word	0x00000000
 8000f40:	40dd4c00 	.word	0x40dd4c00

08000f44 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000f4c:	f000 f818 	bl	8000f80 <shoot_init>
  double fric_wheel_speed_percent=50;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <Shoot_Task_Func+0x34>)
 8000f56:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double mag_load_speed_percent=10;
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <Shoot_Task_Func+0x38>)
 8000f60:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000f64:	ed97 1b04 	vldr	d1, [r7, #16]
 8000f68:	ed97 0b02 	vldr	d0, [r7, #8]
 8000f6c:	f000 f834 	bl	8000fd8 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f004 fba4 	bl	80056be <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000f76:	e7f5      	b.n	8000f64 <Shoot_Task_Func+0x20>
 8000f78:	40490000 	.word	0x40490000
 8000f7c:	40240000 	.word	0x40240000

08000f80 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000f84:	2100      	movs	r1, #0
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <shoot_init+0x50>)
 8000f88:	f003 f882 	bl	8004090 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <shoot_init+0x50>)
 8000f90:	f003 f87e 	bl	8004090 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <shoot_init+0x50>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f640 0298 	movw	r2, #2200	; 0x898
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <shoot_init+0x50>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f640 0298 	movw	r2, #2200	; 0x898
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8000fa8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fac:	f004 fb87 	bl	80056be <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <shoot_init+0x50>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fb8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <shoot_init+0x50>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000fc4:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000fc8:	f004 fb79 	bl	80056be <osDelay>

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20004044 	.word	0x20004044
 8000fd4:	00000000 	.word	0x00000000

08000fd8 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fe2:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <cmd_execute_shoot+0x50>)
 8000fec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ff0:	f7ff fc3c 	bl	800086c <__aeabi_ddiv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	a308      	add	r3, pc, #32	; (adr r3, 8001020 <cmd_execute_shoot+0x48>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff fb09 	bl	8000618 <__aeabi_dmul>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 800100e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <cmd_execute_shoot+0x54>)
 8001014:	f000 fa29 	bl	800146a <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	00000000 	.word	0x00000000
 8001024:	40c38800 	.word	0x40c38800
 8001028:	40590000 	.word	0x40590000
 800102c:	200040d8 	.word	0x200040d8

08001030 <Timer_Task_Func>:
#include <math.h>
#include "Timer_App.h"

extern UART_HandleTypeDef huart7;

void Timer_Task_Func(void const * argument){
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	for (;;){
		// UART catcher
		 char *pdata; // temp data packet buffer from computer
		 char *yaw;
		 // Fix here: may add a switch or what to determine what data needed
		 int pos = 6; // yaw pos
 8001038:	2306      	movs	r3, #6
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
		 yaw = malloc (4);
 800103c:	2004      	movs	r0, #4
 800103e:	f005 fd37 	bl	8006ab0 <malloc>
 8001042:	4603      	mov	r3, r0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
		 pdata = malloc(7); // packet total size, referring to comm protocol
 8001046:	2007      	movs	r0, #7
 8001048:	f005 fd32 	bl	8006ab0 <malloc>
 800104c:	4603      	mov	r3, r0
 800104e:	647b      	str	r3, [r7, #68]	; 0x44

		 if (HAL_UART_Receive(&huart7, (char*)pdata, 7, HAL_MAX_DELAY) == HAL_OK){
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2207      	movs	r2, #7
 8001056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001058:	481a      	ldr	r0, [pc, #104]	; (80010c4 <Timer_Task_Func+0x94>)
 800105a:	f003 fe39 	bl	8004cd0 <HAL_UART_Receive>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10b      	bne.n	800107c <Timer_Task_Func+0x4c>
			  HAL_GPIO_TogglePin(GPIOG, LD_H_Pin);
 8001064:	2102      	movs	r1, #2
 8001066:	4818      	ldr	r0, [pc, #96]	; (80010c8 <Timer_Task_Func+0x98>)
 8001068:	f002 faf3 	bl	8003652 <HAL_GPIO_TogglePin>
			  comm_pack.yaw_data = parse_pack(pdata, yaw, pos);
 800106c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800106e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001070:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001072:	f000 f831 	bl	80010d8 <parse_pack>
 8001076:	4603      	mov	r3, r0
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <Timer_Task_Func+0x9c>)
 800107a:	6013      	str	r3, [r2, #0]
		 }
		 if (comm_pack.yaw_data == 1234){
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <Timer_Task_Func+0x9c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001084:	4293      	cmp	r3, r2
 8001086:	d103      	bne.n	8001090 <Timer_Task_Func+0x60>
		 		HAL_GPIO_TogglePin(GPIOG, LD_B_Pin);
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	480f      	ldr	r0, [pc, #60]	; (80010c8 <Timer_Task_Func+0x98>)
 800108c:	f002 fae1 	bl	8003652 <HAL_GPIO_TogglePin>
		  }

		 // HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);
		 Motor_Data_Read();
 8001090:	f000 f8b0 	bl	80011f4 <Motor_Data_Read>
		 Motor_Data_Sent();
 8001094:	f000 f916 	bl	80012c4 <Motor_Data_Sent>
		 Motor temp_buffer;
		 Motor temp_buffer_3508;
		 get_Motor_buffer(&motor_data[4], &temp_buffer);
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	4619      	mov	r1, r3
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <Timer_Task_Func+0xa0>)
 80010a0:	f000 f996 	bl	80013d0 <get_Motor_buffer>
		 get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <Timer_Task_Func+0xa4>)
 80010ac:	f000 f990 	bl	80013d0 <get_Motor_buffer>

		//printf("Current angle (6020): %d \n", temp_buffer.motor_feedback.rx_angle);
		//printf("Current RPM (3508): %d \n", temp_buffer_3508.motor_feedback.rx_rpm);

		  free(yaw);
 80010b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010b2:	f005 fd05 	bl	8006ac0 <free>
		  free(pdata);
 80010b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010b8:	f005 fd02 	bl	8006ac0 <free>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f004 fafe 	bl	80056be <osDelay>
	for (;;){
 80010c2:	e7b9      	b.n	8001038 <Timer_Task_Func+0x8>
 80010c4:	2000430c 	.word	0x2000430c
 80010c8:	40021800 	.word	0x40021800
 80010cc:	20004238 	.word	0x20004238
 80010d0:	200040f4 	.word	0x200040f4
 80010d4:	20004084 	.word	0x20004084

080010d8 <parse_pack>:
 * 			  @ parse_data: corresponding data variable, could be yaw, pitch, etc
 * 			  @ pos: The position of the last byte of the currently extracted data
 * Return:
 * Author: Haoran Qi, Created on: Jan, 2022
 */
int32_t parse_pack(char* pack, char* parse_data, int pos){
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	466b      	mov	r3, sp
 80010e6:	461e      	mov	r6, r3

    char pdata[(strlen(pack)+1)]; //pack content size + '\0'
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff f881 	bl	80001f0 <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	1c5c      	adds	r4, r3, #1
 80010f2:	4623      	mov	r3, r4
 80010f4:	3b01      	subs	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	4620      	mov	r0, r4
 80010fa:	f04f 0100 	mov.w	r1, #0
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	00cb      	lsls	r3, r1, #3
 8001108:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800110c:	00c2      	lsls	r2, r0, #3
 800110e:	4620      	mov	r0, r4
 8001110:	f04f 0100 	mov.w	r1, #0
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	00cb      	lsls	r3, r1, #3
 800111e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001122:	00c2      	lsls	r2, r0, #3
 8001124:	1de3      	adds	r3, r4, #7
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	ebad 0d03 	sub.w	sp, sp, r3
 800112e:	466b      	mov	r3, sp
 8001130:	3300      	adds	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
    int32_t data = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
    strcpy(pdata, pack);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	f005 fda1 	bl	8006c84 <strcpy>

    if (pdata[0] == 0x41){ //check received correct pack head frame， modify here to 0xAA in real world test
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b41      	cmp	r3, #65	; 0x41
 8001148:	d13f      	bne.n	80011ca <parse_pack+0xf2>
    	HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_RESET); // if correct, turn 1st led on
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	4827      	ldr	r0, [pc, #156]	; (80011f0 <parse_pack+0x118>)
 8001152:	f002 fa65 	bl	8003620 <HAL_GPIO_WritePin>
    	// FIXME: if the data is no longer 4 bytes, e.g. fire cmd only have 1 bytes, there should be an additional Conditional Statements.
		for(int i=0;i<4;i++){
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e032      	b.n	80011c2 <parse_pack+0xea>
			parse_data[i] = pdata[pos-i-1] - '0'; // decoding, referring to the vision code.
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	5cd2      	ldrb	r2, [r2, r3]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	68b9      	ldr	r1, [r7, #8]
 800116c:	440b      	add	r3, r1
 800116e:	3a30      	subs	r2, #48	; 0x30
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
            data += (int32_t)((parse_data[i])*pow(10,i));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9e1 	bl	8000544 <__aeabi_i2d>
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	69f8      	ldr	r0, [r7, #28]
 8001188:	f7ff f9dc 	bl	8000544 <__aeabi_i2d>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	ec43 2b11 	vmov	d1, r2, r3
 8001194:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80011e8 <parse_pack+0x110>
 8001198:	f006 fc00 	bl	800799c <pow>
 800119c:	ec53 2b10 	vmov	r2, r3, d0
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff fa38 	bl	8000618 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fce2 	bl	8000b78 <__aeabi_d2iz>
 80011b4:	4602      	mov	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4413      	add	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
		for(int i=0;i<4;i++){
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	3301      	adds	r3, #1
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	ddc9      	ble.n	800115c <parse_pack+0x84>
 80011c8:	e005      	b.n	80011d6 <parse_pack+0xfe>
		}
    }
	else{
		parse_data[0] = NULL;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
		osDelay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f004 fa74 	bl	80056be <osDelay>
	}


    //data++; // plus 1 to ensure the correct output
    return data;
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	46b5      	mov	sp, r6
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40240000 	.word	0x40240000
 80011f0:	40021800 	.word	0x40021800

080011f4 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e052      	b.n	80012a6 <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8001200:	482d      	ldr	r0, [pc, #180]	; (80012b8 <Motor_Data_Read+0xc4>)
 8001202:	f000 f9e7 	bl	80015d4 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <Motor_Data_Read+0xc8>)
 800120c:	441a      	add	r2, r3
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	6810      	ldr	r0, [r2, #0]
 8001212:	6851      	ldr	r1, [r2, #4]
 8001214:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 8001216:	793b      	ldrb	r3, [r7, #4]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	797b      	ldrb	r3, [r7, #5]
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b218      	sxth	r0, r3
 8001224:	4926      	ldr	r1, [pc, #152]	; (80012c0 <Motor_Data_Read+0xcc>)
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	3310      	adds	r3, #16
 8001234:	4602      	mov	r2, r0
 8001236:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b218      	sxth	r0, r3
 8001246:	491e      	ldr	r1, [pc, #120]	; (80012c0 <Motor_Data_Read+0xcc>)
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	1a9b      	subs	r3, r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3312      	adds	r3, #18
 8001256:	4602      	mov	r2, r0
 8001258:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 800125a:	7a3b      	ldrb	r3, [r7, #8]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7a7b      	ldrb	r3, [r7, #9]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b218      	sxth	r0, r3
 8001268:	4915      	ldr	r1, [pc, #84]	; (80012c0 <Motor_Data_Read+0xcc>)
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4613      	mov	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	3314      	adds	r3, #20
 8001278:	4602      	mov	r2, r0
 800127a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 800127c:	7abb      	ldrb	r3, [r7, #10]
 800127e:	b218      	sxth	r0, r3
 8001280:	490f      	ldr	r1, [pc, #60]	; (80012c0 <Motor_Data_Read+0xcc>)
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3316      	adds	r3, #22
 8001290:	4602      	mov	r2, r0
 8001292:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f004 fa12 	bl	80056be <osDelay>

		can_filter_disable(&hcan1);
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <Motor_Data_Read+0xc4>)
 800129c:	f000 f9bc 	bl	8001618 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	dda9      	ble.n	8001200 <Motor_Data_Read+0xc>
	}
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000418c 	.word	0x2000418c
 80012bc:	200041b4 	.word	0x200041b4
 80012c0:	20004084 	.word	0x20004084

080012c4 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 80012d2:	2308      	movs	r3, #8
 80012d4:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
 80012da:	e06c      	b.n	80013b6 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12b      	bne.n	800133a <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 80012e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e6:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <Motor_Data_Sent+0x104>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	121b      	asrs	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 80012f2:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <Motor_Data_Sent+0x104>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <Motor_Data_Sent+0x104>)
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	121b      	asrs	r3, r3, #8
 8001300:	b2db      	uxtb	r3, r3
 8001302:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001308:	b2db      	uxtb	r3, r3
 800130a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <Motor_Data_Sent+0x104>)
 800130e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001310:	121b      	asrs	r3, r3, #8
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <Motor_Data_Sent+0x104>)
 800131a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001326:	121b      	asrs	r3, r3, #8
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001338:	e032      	b.n	80013a0 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 800133a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800133e:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	121b      	asrs	r3, r3, #8
 8001348:	b2db      	uxtb	r3, r3
 800134a:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <Motor_Data_Sent+0x104>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	b2db      	uxtb	r3, r3
 8001354:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001358:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800135c:	121b      	asrs	r3, r3, #8
 800135e:	b2db      	uxtb	r3, r3
 8001360:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001368:	b2db      	uxtb	r3, r3
 800136a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <Motor_Data_Sent+0x104>)
 800136e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001372:	121b      	asrs	r3, r3, #8
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <Motor_Data_Sent+0x104>)
 800137c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001388:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800138c:	121b      	asrs	r3, r3, #8
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <Motor_Data_Sent+0x104>)
 8001396:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800139a:	b2db      	uxtb	r3, r3
 800139c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	f107 021c 	add.w	r2, r7, #28
 80013a8:	4639      	mov	r1, r7
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <Motor_Data_Sent+0x108>)
 80013ac:	f001 fa68 	bl	8002880 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	3301      	adds	r3, #1
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	dd8f      	ble.n	80012dc <Motor_Data_Sent+0x18>
	}
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20004084 	.word	0x20004084
 80013cc:	2000418c 	.word	0x2000418c

080013d0 <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f811 	bl	8001404 <Motor_Data_Replacement>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80013f4:	6839      	ldr	r1, [r7, #0]
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f804 	bl	8001404 <Motor_Data_Replacement>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699a      	ldr	r2, [r3, #24]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	60da      	str	r2, [r3, #12]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 800146a:	b580      	push	{r7, lr}
 800146c:	b08c      	sub	sp, #48	; 0x30
 800146e:	af00      	add	r7, sp, #0
 8001470:	60f8      	str	r0, [r7, #12]
 8001472:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff ffa7 	bl	80013d0 <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 8001482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001486:	f7ff fb77 	bl	8000b78 <__aeabi_d2iz>
 800148a:	4603      	mov	r3, r0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	68f9      	ldr	r1, [r7, #12]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ffa8 	bl	80013ea <set_Motor_buffer>
}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	; 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80014a8:	2100      	movs	r1, #0
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <buzzer_init+0x10>)
 80014ac:	f002 fdf0 	bl	8004090 <HAL_TIM_PWM_Start>

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200041f4 	.word	0x200041f4

080014b8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_CAN1_Init+0x64>)
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <MX_CAN1_Init+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_CAN1_Init+0x64>)
 80014c4:	2203      	movs	r2, #3
 80014c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_CAN1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_CAN1_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_CAN1_Init+0x64>)
 80014d6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80014da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_CAN1_Init+0x64>)
 80014de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014e2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_CAN1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_CAN1_Init+0x64>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_CAN1_Init+0x64>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_CAN1_Init+0x64>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <MX_CAN1_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_CAN1_Init+0x64>)
 8001504:	2201      	movs	r2, #1
 8001506:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_CAN1_Init+0x64>)
 800150a:	f000 ff99 	bl	8002440 <HAL_CAN_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001514:	f000 fb20 	bl	8001b58 <Error_Handler>
  }

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000418c 	.word	0x2000418c
 8001520:	40006400 	.word	0x40006400

08001524 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a21      	ldr	r2, [pc, #132]	; (80015c8 <HAL_CAN_MspInit+0xa4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d13b      	bne.n	80015be <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_CAN_MspInit+0xa8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_CAN_MspInit+0xa8>)
 8001550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <HAL_CAN_MspInit+0xa8>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_CAN_MspInit+0xa8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_CAN_MspInit+0xa8>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_CAN_MspInit+0xa8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800157e:	2303      	movs	r3, #3
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800158e:	2309      	movs	r3, #9
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <HAL_CAN_MspInit+0xac>)
 800159a:	f001 fe95 	bl	80032c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2105      	movs	r1, #5
 80015a2:	2013      	movs	r0, #19
 80015a4:	f001 fe66 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80015a8:	2013      	movs	r0, #19
 80015aa:	f001 fe7f 	bl	80032ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	2014      	movs	r0, #20
 80015b4:	f001 fe5e 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015b8:	2014      	movs	r0, #20
 80015ba:	f001 fe77 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40006400 	.word	0x40006400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	; 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80015f4:	2301      	movs	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 80015fc:	231b      	movs	r3, #27
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f001 f814 	bl	8002638 <HAL_CAN_ConfigFilter>
}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001638:	2301      	movs	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001640:	231b      	movs	r3, #27
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fff2 	bl	8002638 <HAL_CAN_ConfigFilter>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800166c:	0d5b      	lsrs	r3, r3, #21
 800166e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001672:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 800167e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001686:	4413      	add	r3, r2
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2100      	movs	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f001 f9d1 	bl	8002a36 <HAL_CAN_GetRxMessage>
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200041b4 	.word	0x200041b4

080016a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <vApplicationGetIdleTaskMemory+0x2c>)
 80016b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <vApplicationGetIdleTaskMemory+0x30>)
 80016b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000094 	.word	0x20000094
 80016d0:	200000e8 	.word	0x200000e8

080016d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b0a0      	sub	sp, #128	; 0x80
 80016d8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <MX_FREERTOS_Init+0x98>)
 80016dc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80016e0:	461d      	mov	r5, r3
 80016e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 ff96 	bl	8005626 <osThreadCreate>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <MX_FREERTOS_Init+0x9c>)
 80016fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	//osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
    //ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_FREERTOS_Init+0xa0>)
 8001702:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001706:	461d      	mov	r5, r3
 8001708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8001714:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 ff83 	bl	8005626 <osThreadCreate>
 8001720:	67f8      	str	r0, [r7, #124]	; 0x7c

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_FREERTOS_Init+0xa4>)
 8001724:	f107 0420 	add.w	r4, r7, #32
 8001728:	461d      	mov	r5, r3
 800172a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f003 ff72 	bl	8005626 <osThreadCreate>
 8001742:	67b8      	str	r0, [r7, #120]	; 0x78

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <MX_FREERTOS_Init+0xa8>)
 8001746:	1d3c      	adds	r4, r7, #4
 8001748:	461d      	mov	r5, r3
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f003 ff63 	bl	8005626 <osThreadCreate>
 8001760:	6778      	str	r0, [r7, #116]	; 0x74
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001762:	bf00      	nop
 8001764:	3780      	adds	r7, #128	; 0x80
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	08008950 	.word	0x08008950
 8001770:	20004248 	.word	0x20004248
 8001774:	0800896c 	.word	0x0800896c
 8001778:	08008988 	.word	0x08008988
 800177c:	080089a4 	.word	0x080089a4

08001780 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001788:	2001      	movs	r0, #1
 800178a:	f003 ff98 	bl	80056be <osDelay>
 800178e:	e7fb      	b.n	8001788 <StartDefaultTask+0x8>

08001790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a69      	ldr	r2, [pc, #420]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b5c      	ldr	r3, [pc, #368]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a5b      	ldr	r2, [pc, #364]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b59      	ldr	r3, [pc, #356]	; (8001954 <MX_GPIO_Init+0x1c4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b55      	ldr	r3, [pc, #340]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a54      	ldr	r2, [pc, #336]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b52      	ldr	r3, [pc, #328]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a4d      	ldr	r2, [pc, #308]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a46      	ldr	r2, [pc, #280]	; (8001954 <MX_GPIO_Init+0x1c4>)
 800183c:	f043 0320 	orr.w	r3, r3, #32
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b40      	ldr	r3, [pc, #256]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <MX_GPIO_Init+0x1c4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001870:	4839      	ldr	r0, [pc, #228]	; (8001958 <MX_GPIO_Init+0x1c8>)
 8001872:	f001 fed5 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	211e      	movs	r1, #30
 800187a:	4837      	ldr	r0, [pc, #220]	; (8001958 <MX_GPIO_Init+0x1c8>)
 800187c:	f001 fed0 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001886:	4835      	ldr	r0, [pc, #212]	; (800195c <MX_GPIO_Init+0x1cc>)
 8001888:	f001 feca 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001892:	4833      	ldr	r0, [pc, #204]	; (8001960 <MX_GPIO_Init+0x1d0>)
 8001894:	f001 fec4 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 8001898:	2320      	movs	r3, #32
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	482c      	ldr	r0, [pc, #176]	; (800195c <MX_GPIO_Init+0x1cc>)
 80018ac:	f001 fd0c 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 80018b0:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80018b4:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4823      	ldr	r0, [pc, #140]	; (8001958 <MX_GPIO_Init+0x1c8>)
 80018ca:	f001 fcfd 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 80018ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018d8:	2301      	movs	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	481f      	ldr	r0, [pc, #124]	; (8001960 <MX_GPIO_Init+0x1d0>)
 80018e4:	f001 fcf0 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80018e8:	2304      	movs	r3, #4
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_GPIO_Init+0x1d4>)
 80018ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	481b      	ldr	r0, [pc, #108]	; (8001968 <MX_GPIO_Init+0x1d8>)
 80018fc:	f001 fce4 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <MX_GPIO_Init+0x1cc>)
 800191a:	f001 fcd5 	bl	80032c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 800191e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	480a      	ldr	r0, [pc, #40]	; (8001960 <MX_GPIO_Init+0x1d0>)
 8001938:	f001 fcc6 	bl	80032c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2105      	movs	r1, #5
 8001940:	2008      	movs	r0, #8
 8001942:	f001 fc97 	bl	8003274 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001946:	2008      	movs	r0, #8
 8001948:	f001 fcb0 	bl	80032ac <HAL_NVIC_EnableIRQ>

}
 800194c:	bf00      	nop
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40021800 	.word	0x40021800
 800195c:	40021000 	.word	0x40021000
 8001960:	40021400 	.word	0x40021400
 8001964:	10110000 	.word	0x10110000
 8001968:	40020400 	.word	0x40020400

0800196c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af02      	add	r7, sp, #8
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d12b      	bne.n	80019d4 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 800197c:	4817      	ldr	r0, [pc, #92]	; (80019dc <HAL_GPIO_EXTI_Callback+0x70>)
 800197e:	f7ff fe29 	bl	80015d4 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	6810      	ldr	r0, [r2, #0]
 800198a:	6851      	ldr	r1, [r2, #4]
 800198c:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	7a7b      	ldrb	r3, [r7, #9]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 800199c:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800199e:	7abb      	ldrb	r3, [r7, #10]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80019ac:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 80019ae:	7b3b      	ldrb	r3, [r7, #12]
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80019be:	9201      	str	r2, [sp, #4]
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	2101      	movs	r1, #1
 80019c8:	4806      	ldr	r0, [pc, #24]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x78>)
 80019ca:	f005 f933 	bl	8006c34 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <HAL_GPIO_EXTI_Callback+0x70>)
 80019d0:	f7ff fe22 	bl	8001618 <can_filter_disable>


	}
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000418c 	.word	0x2000418c
 80019e0:	200041b4 	.word	0x200041b4
 80019e4:	080089c0 	.word	0x080089c0

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ec:	f000 fce6 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f0:	f000 f820 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f4:	f7ff fecc 	bl	8001790 <MX_GPIO_Init>
  MX_CAN1_Init();
 80019f8:	f7ff fd5e 	bl	80014b8 <MX_CAN1_Init>
  MX_TIM4_Init();
 80019fc:	f000 fa42 	bl	8001e84 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001a00:	f000 faa6 	bl	8001f50 <MX_TIM12_Init>
  MX_UART7_Init();
 8001a04:	f000 fc3e 	bl	8002284 <MX_UART7_Init>
  MX_TIM14_Init();
 8001a08:	f000 fb0c 	bl	8002024 <MX_TIM14_Init>
  MX_TIM13_Init();
 8001a0c:	f000 fae6 	bl	8001fdc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001a10:	f7ff fd48 	bl	80014a4 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <main+0x44>)
 8001a16:	f000 feef 	bl	80027f8 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <main+0x48>)
 8001a1c:	f002 fae9 	bl	8003ff2 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a20:	f7ff fe58 	bl	80016d4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001a24:	f003 fdf8 	bl	8005618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <main+0x40>
 8001a2a:	bf00      	nop
 8001a2c:	2000418c 	.word	0x2000418c
 8001a30:	2000428c 	.word	0x2000428c

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b094      	sub	sp, #80	; 0x50
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0320 	add.w	r3, r7, #32
 8001a3e:	2230      	movs	r2, #48	; 0x30
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f005 f844 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <SystemClock_Config+0xd0>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <SystemClock_Config+0xd0>)
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	; 0x40
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <SystemClock_Config+0xd0>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <SystemClock_Config+0xd4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a80:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <SystemClock_Config+0xd4>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <SystemClock_Config+0xd4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001aac:	23a8      	movs	r3, #168	; 0xa8
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fdfb 	bl	80036b8 <HAL_RCC_OscConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac8:	f000 f846 	bl	8001b58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001acc:	230f      	movs	r3, #15
 8001ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 f854 	bl	8003b98 <HAL_RCC_ClockConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001af6:	f000 f82f 	bl	8001b58 <Error_Handler>
  }
}
 8001afa:	bf00      	nop
 8001afc:	3750      	adds	r7, #80	; 0x50
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000

08001b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d109      	bne.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b26:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8001b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b2e:	f001 fd90 	bl	8003652 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d101      	bne.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8001b3c:	f000 fc60 	bl	8002400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40001c00 	.word	0x40001c00
 8001b4c:	200002e8 	.word	0x200002e8
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40000c00 	.word	0x40000c00

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_MspInit+0x54>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_MspInit+0x54>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_MspInit+0x54>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_MspInit+0x54>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_MspInit+0x54>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_MspInit+0x54>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	f06f 0001 	mvn.w	r0, #1
 8001baa:	f001 fb63 	bl	8003274 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	; 0x30
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	2032      	movs	r0, #50	; 0x32
 8001bd2:	f001 fb4f 	bl	8003274 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bd6:	2032      	movs	r0, #50	; 0x32
 8001bd8:	f001 fb68 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <HAL_InitTick+0xa4>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_InitTick+0xa4>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_InitTick+0xa4>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bf8:	f107 0210 	add.w	r2, r7, #16
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 f998 	bl	8003f38 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c08:	f002 f96e 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_InitTick+0xa8>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9b      	lsrs	r3, r3, #18
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_InitTick+0xac>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_InitTick+0xb0>)
 8001c24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_InitTick+0xac>)
 8001c28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c2c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_InitTick+0xac>)
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_InitTick+0xac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_InitTick+0xac>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <HAL_InitTick+0xac>)
 8001c42:	f002 f9ab 	bl	8003f9c <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d104      	bne.n	8001c56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_InitTick+0xac>)
 8001c4e:	f002 f9d0 	bl	8003ff2 <HAL_TIM_Base_Start_IT>
 8001c52:	4603      	mov	r3, r0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	2000424c 	.word	0x2000424c
 8001c6c:	40000c00 	.word	0x40000c00

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ca0:	2004      	movs	r0, #4
 8001ca2:	f001 fcf1 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <CAN1_TX_IRQHandler+0x10>)
 8001cb2:	f000 fff8 	bl	8002ca6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000418c 	.word	0x2000418c

08001cc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <CAN1_RX0_IRQHandler+0x10>)
 8001cc6:	f000 ffee 	bl	8002ca6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000418c 	.word	0x2000418c

08001cd4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001cda:	f002 fa17 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000428c 	.word	0x2000428c

08001ce8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cee:	f002 fa0d 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200042cc 	.word	0x200042cc

08001cfc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TIM5_IRQHandler+0x10>)
 8001d02:	f002 fa03 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000424c 	.word	0x2000424c

08001d10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e00a      	b.n	8001d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d22:	f3af 8000 	nop.w
 8001d26:	4601      	mov	r1, r0
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf0      	blt.n	8001d22 <_read+0x12>
	}

return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e009      	b.n	8001d70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fa7b 	bl	8002260 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf1      	blt.n	8001d5c <_write+0x12>
	}
	return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <_close>:

int _close(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001daa:	605a      	str	r2, [r3, #4]
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_isatty>:

int _isatty(int file)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
	return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f004 fe1e 	bl	8006a5c <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20030000 	.word	0x20030000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	200002ec 	.word	0x200002ec
 8001e54:	20004360 	.word	0x20004360

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <SystemInit+0x28>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <SystemInit+0x28>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SystemInit+0x28>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e72:	609a      	str	r2, [r3, #8]
#endif
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	f107 0320 	add.w	r3, r7, #32
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001ea8:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <MX_TIM4_Init+0xc8>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001eac:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001eae:	2253      	movs	r2, #83	; 0x53
 8001eb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001eba:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ebe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ecc:	481e      	ldr	r0, [pc, #120]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001ece:	f002 f8b4 	bl	800403a <HAL_TIM_PWM_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ed8:	f7ff fe3e 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ee4:	f107 0320 	add.w	r3, r7, #32
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4817      	ldr	r0, [pc, #92]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001eec:	f002 fd7a 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ef6:	f7ff fe2f 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efa:	2360      	movs	r3, #96	; 0x60
 8001efc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001f14:	f002 fa02 	bl	800431c <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f1e:	f7ff fe1b 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2208      	movs	r2, #8
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001f2a:	f002 f9f7 	bl	800431c <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001f34:	f7ff fe10 	bl	8001b58 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM4_Init+0xc4>)
 8001f3a:	f000 f92f 	bl	800219c <HAL_TIM_MspPostInit>

}
 8001f3e:	bf00      	nop
 8001f40:	3728      	adds	r7, #40	; 0x28
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20004044 	.word	0x20004044
 8001f4c:	40000800 	.word	0x40000800

08001f50 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <MX_TIM12_Init+0x88>)
 8001f6c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f70:	2223      	movs	r2, #35	; 0x23
 8001f72:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f80:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f8e:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001f90:	f002 f853 	bl	800403a <HAL_TIM_PWM_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001f9a:	f7ff fddd 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9e:	2360      	movs	r3, #96	; 0x60
 8001fa0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001fb6:	f002 f9b1 	bl	800431c <HAL_TIM_PWM_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001fc0:	f7ff fdca 	bl	8001b58 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <MX_TIM12_Init+0x84>)
 8001fc6:	f000 f8e9 	bl	800219c <HAL_TIM_MspPostInit>

}
 8001fca:	bf00      	nop
 8001fcc:	3720      	adds	r7, #32
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200041f4 	.word	0x200041f4
 8001fd8:	40001800 	.word	0x40001800

08001fdc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_TIM13_Init+0x40>)
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <MX_TIM13_Init+0x44>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_TIM13_Init+0x40>)
 8001fe8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001fec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_TIM13_Init+0x40>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_TIM13_Init+0x40>)
 8001ff6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ffa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_TIM13_Init+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_TIM13_Init+0x40>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_TIM13_Init+0x40>)
 800200a:	f001 ffc7 	bl	8003f9c <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002014:	f7ff fda0 	bl	8001b58 <Error_Handler>
  }

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000428c 	.word	0x2000428c
 8002020:	40001c00 	.word	0x40001c00

08002024 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_TIM14_Init+0x40>)
 800202a:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <MX_TIM14_Init+0x44>)
 800202c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <MX_TIM14_Init+0x40>)
 8002030:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002034:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_TIM14_Init+0x40>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_TIM14_Init+0x40>)
 800203e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002042:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <MX_TIM14_Init+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_TIM14_Init+0x40>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_TIM14_Init+0x40>)
 8002052:	f001 ffa3 	bl	8003f9c <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800205c:	f7ff fd7c 	bl	8001b58 <Error_Handler>
  }

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200042cc 	.word	0x200042cc
 8002068:	40002000 	.word	0x40002000

0800206c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_TIM_PWM_MspInit+0x64>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10e      	bne.n	800209c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_TIM_PWM_MspInit+0x68>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_TIM_PWM_MspInit+0x68>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_TIM_PWM_MspInit+0x68>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800209a:	e012      	b.n	80020c2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0d      	ldr	r2, [pc, #52]	; (80020d8 <HAL_TIM_PWM_MspInit+0x6c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10d      	bne.n	80020c2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <HAL_TIM_PWM_MspInit+0x68>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_TIM_PWM_MspInit+0x68>)
 80020b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_TIM_PWM_MspInit+0x68>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40001800 	.word	0x40001800

080020dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a29      	ldr	r2, [pc, #164]	; (8002190 <HAL_TIM_Base_MspInit+0xb4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d116      	bne.n	800211c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	4b28      	ldr	r3, [pc, #160]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a27      	ldr	r2, [pc, #156]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2105      	movs	r1, #5
 800210e:	202c      	movs	r0, #44	; 0x2c
 8002110:	f001 f8b0 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002114:	202c      	movs	r0, #44	; 0x2c
 8002116:	f001 f8c9 	bl	80032ac <HAL_NVIC_EnableIRQ>
 800211a:	e01a      	b.n	8002152 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_TIM_Base_MspInit+0xbc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d115      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2105      	movs	r1, #5
 8002146:	202d      	movs	r0, #45	; 0x2d
 8002148:	f001 f894 	bl	8003274 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800214c:	202d      	movs	r0, #45	; 0x2d
 800214e:	f001 f8ad 	bl	80032ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_TIM_Base_MspInit+0xb4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d115      	bne.n	8002188 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2101      	movs	r1, #1
 800217c:	202c      	movs	r0, #44	; 0x2c
 800217e:	f001 f879 	bl	8003274 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002182:	202c      	movs	r0, #44	; 0x2c
 8002184:	f001 f892 	bl	80032ac <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40001c00 	.word	0x40001c00
 8002194:	40023800 	.word	0x40023800
 8002198:	40002000 	.word	0x40002000

0800219c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <HAL_TIM_MspPostInit+0xb0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11f      	bne.n	80021fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_TIM_MspPostInit+0xb4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a22      	ldr	r2, [pc, #136]	; (8002250 <HAL_TIM_MspPostInit+0xb4>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_TIM_MspPostInit+0xb4>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 80021da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80021de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021ec:	2302      	movs	r3, #2
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	4817      	ldr	r0, [pc, #92]	; (8002254 <HAL_TIM_MspPostInit+0xb8>)
 80021f8:	f001 f866 	bl	80032c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80021fc:	e022      	b.n	8002244 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <HAL_TIM_MspPostInit+0xbc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d11d      	bne.n	8002244 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_TIM_MspPostInit+0xb4>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_TIM_MspPostInit+0xb4>)
 8002212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002216:	6313      	str	r3, [r2, #48]	; 0x30
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_TIM_MspPostInit+0xb4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002224:	2340      	movs	r3, #64	; 0x40
 8002226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002234:	2309      	movs	r3, #9
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	4807      	ldr	r0, [pc, #28]	; (800225c <HAL_TIM_MspPostInit+0xc0>)
 8002240:	f001 f842 	bl	80032c8 <HAL_GPIO_Init>
}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40000800 	.word	0x40000800
 8002250:	40023800 	.word	0x40023800
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40001800 	.word	0x40001800
 800225c:	40021c00 	.word	0x40021c00

08002260 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002268:	1d39      	adds	r1, r7, #4
 800226a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226e:	2201      	movs	r2, #1
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <__io_putchar+0x20>)
 8002272:	f002 fc94 	bl	8004b9e <HAL_UART_Transmit>

  return ch;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2000430c 	.word	0x2000430c

08002284 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_UART7_Init+0x4c>)
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <MX_UART7_Init+0x50>)
 800228c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MX_UART7_Init+0x4c>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_UART7_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_UART7_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_UART7_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_UART7_Init+0x4c>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_UART7_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_UART7_Init+0x4c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_UART7_Init+0x4c>)
 80022bc:	f002 fc22 	bl	8004b04 <HAL_UART_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80022c6:	f7ff fc47 	bl	8001b58 <Error_Handler>
  }

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000430c 	.word	0x2000430c
 80022d4:	40007800 	.word	0x40007800

080022d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_UART_MspInit+0x84>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d12c      	bne.n	8002354 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_UART_MspInit+0x88>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_UART_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_UART_MspInit+0x88>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002332:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002344:	2308      	movs	r3, #8
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_UART_MspInit+0x8c>)
 8002350:	f000 ffba 	bl	80032c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40007800 	.word	0x40007800
 8002360:	40023800 	.word	0x40023800
 8002364:	40021000 	.word	0x40021000

08002368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800236c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800236e:	e003      	b.n	8002378 <LoopCopyDataInit>

08002370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002376:	3104      	adds	r1, #4

08002378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800237c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800237e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002380:	d3f6      	bcc.n	8002370 <CopyDataInit>
  ldr  r2, =_sbss
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002384:	e002      	b.n	800238c <LoopFillZerobss>

08002386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002388:	f842 3b04 	str.w	r3, [r2], #4

0800238c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800238e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002390:	d3f9      	bcc.n	8002386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002392:	f7ff fd61 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f004 fb67 	bl	8006a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800239a:	f7ff fb25 	bl	80019e8 <main>
  bx  lr    
 800239e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80023a4:	08008b68 	.word	0x08008b68
  ldr  r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023ac:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80023b0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80023b4:	20004360 	.word	0x20004360

080023b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC_IRQHandler>
	...

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_Init+0x40>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_Init+0x40>)
 80023c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_Init+0x40>)
 80023d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <HAL_Init+0x40>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e4:	2003      	movs	r0, #3
 80023e6:	f000 ff3a 	bl	800325e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fbe6 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023f0:	f7ff fbb8 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023c00 	.word	0x40023c00

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	2000434c 	.word	0x2000434c

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	2000434c 	.word	0x2000434c

08002440 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0ed      	b.n	800262e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff f860 	bl	8001524 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0202 	bic.w	r2, r2, #2
 8002472:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002474:	f7ff ffd8 	bl	8002428 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800247a:	e012      	b.n	80024a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800247c:	f7ff ffd4 	bl	8002428 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b0a      	cmp	r3, #10
 8002488:	d90b      	bls.n	80024a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2205      	movs	r2, #5
 800249a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0c5      	b.n	800262e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e5      	bne.n	800247c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c0:	f7ff ffb2 	bl	8002428 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024c6:	e012      	b.n	80024ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c8:	f7ff ffae 	bl	8002428 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b0a      	cmp	r3, #10
 80024d4:	d90b      	bls.n	80024ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2205      	movs	r2, #5
 80024e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e09f      	b.n	800262e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0e5      	beq.n	80024c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d108      	bne.n	8002516 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7e5b      	ldrb	r3, [r3, #25]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e007      	b.n	8002550 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e9b      	ldrb	r3, [r3, #26]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0220 	orr.w	r2, r2, #32
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0220 	bic.w	r2, r2, #32
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7edb      	ldrb	r3, [r3, #27]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0210 	bic.w	r2, r2, #16
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0210 	orr.w	r2, r2, #16
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7f1b      	ldrb	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0208 	orr.w	r2, r2, #8
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0208 	bic.w	r2, r2, #8
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7f5b      	ldrb	r3, [r3, #29]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0204 	orr.w	r2, r2, #4
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e007      	b.n	80025f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	ea42 0103 	orr.w	r1, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d003      	beq.n	800265e <HAL_CAN_ConfigFilter+0x26>
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b02      	cmp	r3, #2
 800265a:	f040 80be 	bne.w	80027da <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800265e:	4b65      	ldr	r3, [pc, #404]	; (80027f4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002660:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002678:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2201      	movs	r2, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d123      	bne.n	8002708 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3248      	adds	r2, #72	; 0x48
 80026e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	3348      	adds	r3, #72	; 0x48
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	440b      	add	r3, r1
 8002706:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d122      	bne.n	8002756 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002730:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3248      	adds	r2, #72	; 0x48
 8002736:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800274a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800274c:	6979      	ldr	r1, [r7, #20]
 800274e:	3348      	adds	r3, #72	; 0x48
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	43db      	mvns	r3, r3
 8002768:	401a      	ands	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002770:	e007      	b.n	8002782 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	431a      	orrs	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43db      	mvns	r3, r3
 8002794:	401a      	ands	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800279c:	e007      	b.n	80027ae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	431a      	orrs	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027cc:	f023 0201 	bic.w	r2, r3, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e006      	b.n	80027e8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40006400 	.word	0x40006400

080027f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d12e      	bne.n	800286a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff fe00 	bl	8002428 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800282a:	e012      	b.n	8002852 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282c:	f7ff fdfc 	bl	8002428 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d90b      	bls.n	8002852 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e012      	b.n	8002878 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e006      	b.n	8002878 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002894:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d003      	beq.n	80028ac <HAL_CAN_AddTxMessage+0x2c>
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	f040 80b8 	bne.w	8002a1c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80a0 	beq.w	8002a0c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d907      	bls.n	80028ec <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e09e      	b.n	8002a2a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028ec:	2201      	movs	r2, #1
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	409a      	lsls	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	6809      	ldr	r1, [r1, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3318      	adds	r3, #24
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	440b      	add	r3, r1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e00f      	b.n	800293a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002924:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800292a:	68f9      	ldr	r1, [r7, #12]
 800292c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800292e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3318      	adds	r3, #24
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	440b      	add	r3, r1
 8002938:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3318      	adds	r3, #24
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	440b      	add	r3, r1
 800294a:	3304      	adds	r3, #4
 800294c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	7d1b      	ldrb	r3, [r3, #20]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d111      	bne.n	800297a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3318      	adds	r3, #24
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3318      	adds	r3, #24
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	440b      	add	r3, r1
 8002976:	3304      	adds	r3, #4
 8002978:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3307      	adds	r3, #7
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	061a      	lsls	r2, r3, #24
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3306      	adds	r3, #6
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3305      	adds	r3, #5
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	4313      	orrs	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	3204      	adds	r2, #4
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	4610      	mov	r0, r2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	6811      	ldr	r1, [r2, #0]
 80029a2:	ea43 0200 	orr.w	r2, r3, r0
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3303      	adds	r3, #3
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	061a      	lsls	r2, r3, #24
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3302      	adds	r3, #2
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4313      	orrs	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	4610      	mov	r0, r2
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	ea43 0200 	orr.w	r2, r3, r0
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3318      	adds	r3, #24
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	4413      	add	r3, r2
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6811      	ldr	r1, [r2, #0]
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3318      	adds	r3, #24
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	440b      	add	r3, r1
 8002a06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e00e      	b.n	8002a2a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a36:	b480      	push	{r7}
 8002a38:	b087      	sub	sp, #28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d003      	beq.n	8002a5a <HAL_CAN_GetRxMessage+0x24>
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	f040 80f3 	bne.w	8002c40 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10e      	bne.n	8002a7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0e7      	b.n	8002c4e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0d8      	b.n	8002c4e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	331b      	adds	r3, #27
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0204 	and.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	331b      	adds	r3, #27
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0d5b      	lsrs	r3, r3, #21
 8002aca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e00b      	b.n	8002aec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	331b      	adds	r3, #27
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	4413      	add	r3, r2
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	331b      	adds	r3, #27
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	4413      	add	r3, r2
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0202 	and.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	331b      	adds	r3, #27
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	331b      	adds	r3, #27
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	331b      	adds	r3, #27
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0a1a      	lsrs	r2, r3, #8
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0c1a      	lsrs	r2, r3, #16
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	3302      	adds	r3, #2
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e1a      	lsrs	r2, r3, #24
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3303      	adds	r3, #3
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0a1a      	lsrs	r2, r3, #8
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	3305      	adds	r3, #5
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0c1a      	lsrs	r2, r3, #16
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	3306      	adds	r3, #6
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e1a      	lsrs	r2, r3, #24
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3307      	adds	r3, #7
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d108      	bne.n	8002c2c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0220 	orr.w	r2, r2, #32
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0220 	orr.w	r2, r2, #32
 8002c3a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e006      	b.n	8002c4e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d002      	beq.n	8002c78 <HAL_CAN_ActivateNotification+0x1e>
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d109      	bne.n	8002c8c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6959      	ldr	r1, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e006      	b.n	8002c9a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
  }
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b08a      	sub	sp, #40	; 0x28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d07c      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d023      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f983 	bl	8003014 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d0e:	e016      	b.n	8002d3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d004      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e00c      	b.n	8002d3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
 8002d36:	e002      	b.n	8002d3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f989 	bl	8003050 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d024      	beq.n	8002d92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f963 	bl	8003028 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d62:	e016      	b.n	8002d92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e00c      	b.n	8002d92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8a:	e002      	b.n	8002d92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f969 	bl	8003064 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d024      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002da4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f943 	bl	800303c <HAL_CAN_TxMailbox2CompleteCallback>
 8002db6:	e016      	b.n	8002de6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e00c      	b.n	8002de6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	e002      	b.n	8002de6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f949 	bl	8003078 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00c      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2210      	movs	r2, #16
 8002e08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2208      	movs	r2, #8
 8002e24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f930 	bl	800308c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe fc09 	bl	800165c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00c      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2208      	movs	r2, #8
 8002e88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f912 	bl	80030b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f8f9 	bl	80030a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d006      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8fc 	bl	80030c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2208      	movs	r2, #8
 8002eea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8f5 	bl	80030dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d07b      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d072      	beq.n	8002fec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d043      	beq.n	8002fec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03e      	beq.n	8002fec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f74:	2b60      	cmp	r3, #96	; 0x60
 8002f76:	d02b      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x32a>
 8002f78:	2b60      	cmp	r3, #96	; 0x60
 8002f7a:	d82e      	bhi.n	8002fda <HAL_CAN_IRQHandler+0x334>
 8002f7c:	2b50      	cmp	r3, #80	; 0x50
 8002f7e:	d022      	beq.n	8002fc6 <HAL_CAN_IRQHandler+0x320>
 8002f80:	2b50      	cmp	r3, #80	; 0x50
 8002f82:	d82a      	bhi.n	8002fda <HAL_CAN_IRQHandler+0x334>
 8002f84:	2b40      	cmp	r3, #64	; 0x40
 8002f86:	d019      	beq.n	8002fbc <HAL_CAN_IRQHandler+0x316>
 8002f88:	2b40      	cmp	r3, #64	; 0x40
 8002f8a:	d826      	bhi.n	8002fda <HAL_CAN_IRQHandler+0x334>
 8002f8c:	2b30      	cmp	r3, #48	; 0x30
 8002f8e:	d010      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x30c>
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	d822      	bhi.n	8002fda <HAL_CAN_IRQHandler+0x334>
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d002      	beq.n	8002f9e <HAL_CAN_IRQHandler+0x2f8>
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d005      	beq.n	8002fa8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f9c:	e01d      	b.n	8002fda <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fa6:	e019      	b.n	8002fdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	f043 0310 	orr.w	r3, r3, #16
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fb0:	e014      	b.n	8002fdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	f043 0320 	orr.w	r3, r3, #32
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fba:	e00f      	b.n	8002fdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fc4:	e00a      	b.n	8002fdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fce:	e005      	b.n	8002fdc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fd8:	e000      	b.n	8002fdc <HAL_CAN_IRQHandler+0x336>
            break;
 8002fda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f872 	bl	80030f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800300c:	bf00      	nop
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003120:	4013      	ands	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800312c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003136:	4a04      	ldr	r2, [pc, #16]	; (8003148 <__NVIC_SetPriorityGrouping+0x44>)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	60d3      	str	r3, [r2, #12]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <__NVIC_GetPriorityGrouping+0x18>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	f003 0307 	and.w	r3, r3, #7
}
 800315a:	4618      	mov	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	2b00      	cmp	r3, #0
 8003178:	db0b      	blt.n	8003192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4907      	ldr	r1, [pc, #28]	; (80031a0 <__NVIC_EnableIRQ+0x38>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2001      	movs	r0, #1
 800318a:	fa00 f202 	lsl.w	r2, r0, r2
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000e100 	.word	0xe000e100

080031a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	db0a      	blt.n	80031ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	490c      	ldr	r1, [pc, #48]	; (80031f0 <__NVIC_SetPriority+0x4c>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	0112      	lsls	r2, r2, #4
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	440b      	add	r3, r1
 80031c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031cc:	e00a      	b.n	80031e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <__NVIC_SetPriority+0x50>)
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	3b04      	subs	r3, #4
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	440b      	add	r3, r1
 80031e2:	761a      	strb	r2, [r3, #24]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000e100 	.word	0xe000e100
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f1c3 0307 	rsb	r3, r3, #7
 8003212:	2b04      	cmp	r3, #4
 8003214:	bf28      	it	cs
 8003216:	2304      	movcs	r3, #4
 8003218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3304      	adds	r3, #4
 800321e:	2b06      	cmp	r3, #6
 8003220:	d902      	bls.n	8003228 <NVIC_EncodePriority+0x30>
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3b03      	subs	r3, #3
 8003226:	e000      	b.n	800322a <NVIC_EncodePriority+0x32>
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	f04f 32ff 	mov.w	r2, #4294967295
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43da      	mvns	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	401a      	ands	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003240:	f04f 31ff 	mov.w	r1, #4294967295
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	43d9      	mvns	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	4313      	orrs	r3, r2
         );
}
 8003252:	4618      	mov	r0, r3
 8003254:	3724      	adds	r7, #36	; 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ff4c 	bl	8003104 <__NVIC_SetPriorityGrouping>
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003286:	f7ff ff61 	bl	800314c <__NVIC_GetPriorityGrouping>
 800328a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	6978      	ldr	r0, [r7, #20]
 8003292:	f7ff ffb1 	bl	80031f8 <NVIC_EncodePriority>
 8003296:	4602      	mov	r2, r0
 8003298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ff80 	bl	80031a4 <__NVIC_SetPriority>
}
 80032a4:	bf00      	nop
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff54 	bl	8003168 <__NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e177      	b.n	80035d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e4:	2201      	movs	r2, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	f040 8166 	bne.w	80035ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d00b      	beq.n	8003322 <HAL_GPIO_Init+0x5a>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d007      	beq.n	8003322 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003316:	2b11      	cmp	r3, #17
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b12      	cmp	r3, #18
 8003320:	d130      	bne.n	8003384 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003358:	2201      	movs	r2, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 0201 	and.w	r2, r3, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0xfc>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b12      	cmp	r3, #18
 80033c2:	d123      	bne.n	800340c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	08da      	lsrs	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3208      	adds	r2, #8
 80033cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	08da      	lsrs	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3208      	adds	r2, #8
 8003406:	69b9      	ldr	r1, [r7, #24]
 8003408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0203 	and.w	r2, r3, #3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80c0 	beq.w	80035ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b63      	ldr	r3, [pc, #396]	; (80035ec <HAL_GPIO_Init+0x324>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800346a:	4a61      	ldr	r2, [pc, #388]	; (80035f0 <HAL_GPIO_Init+0x328>)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	089b      	lsrs	r3, r3, #2
 8003470:	3302      	adds	r3, #2
 8003472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a58      	ldr	r2, [pc, #352]	; (80035f4 <HAL_GPIO_Init+0x32c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d037      	beq.n	8003506 <HAL_GPIO_Init+0x23e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a57      	ldr	r2, [pc, #348]	; (80035f8 <HAL_GPIO_Init+0x330>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_GPIO_Init+0x23a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a56      	ldr	r2, [pc, #344]	; (80035fc <HAL_GPIO_Init+0x334>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d02b      	beq.n	80034fe <HAL_GPIO_Init+0x236>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a55      	ldr	r2, [pc, #340]	; (8003600 <HAL_GPIO_Init+0x338>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d025      	beq.n	80034fa <HAL_GPIO_Init+0x232>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a54      	ldr	r2, [pc, #336]	; (8003604 <HAL_GPIO_Init+0x33c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <HAL_GPIO_Init+0x22e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a53      	ldr	r2, [pc, #332]	; (8003608 <HAL_GPIO_Init+0x340>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d019      	beq.n	80034f2 <HAL_GPIO_Init+0x22a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	; (800360c <HAL_GPIO_Init+0x344>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x226>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a51      	ldr	r2, [pc, #324]	; (8003610 <HAL_GPIO_Init+0x348>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x222>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_GPIO_Init+0x34c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	; (8003618 <HAL_GPIO_Init+0x350>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x21a>
 80034de:	2309      	movs	r3, #9
 80034e0:	e012      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e2:	230a      	movs	r3, #10
 80034e4:	e010      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e00e      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ea:	2307      	movs	r3, #7
 80034ec:	e00c      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00a      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f2:	2305      	movs	r3, #5
 80034f4:	e008      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e004      	b.n	8003508 <HAL_GPIO_Init+0x240>
 80034fe:	2302      	movs	r3, #2
 8003500:	e002      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x240>
 8003506:	2300      	movs	r3, #0
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f002 0203 	and.w	r2, r2, #3
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	4093      	lsls	r3, r2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003518:	4935      	ldr	r1, [pc, #212]	; (80035f0 <HAL_GPIO_Init+0x328>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_GPIO_Init+0x354>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800354a:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_GPIO_Init+0x354>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_GPIO_Init+0x354>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003574:	4a29      	ldr	r2, [pc, #164]	; (800361c <HAL_GPIO_Init+0x354>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357a:	4b28      	ldr	r3, [pc, #160]	; (800361c <HAL_GPIO_Init+0x354>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_GPIO_Init+0x354>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_GPIO_Init+0x354>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_GPIO_Init+0x354>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	f67f ae84 	bls.w	80032e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40020800 	.word	0x40020800
 8003600:	40020c00 	.word	0x40020c00
 8003604:	40021000 	.word	0x40021000
 8003608:	40021400 	.word	0x40021400
 800360c:	40021800 	.word	0x40021800
 8003610:	40021c00 	.word	0x40021c00
 8003614:	40022000 	.word	0x40022000
 8003618:	40022400 	.word	0x40022400
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	401a      	ands	r2, r3
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	429a      	cmp	r2, r3
 800366a:	d104      	bne.n	8003676 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	041a      	lsls	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003674:	e002      	b.n	800367c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fe f960 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40013c00 	.word	0x40013c00

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e25b      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d075      	beq.n	80037c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d6:	4ba3      	ldr	r3, [pc, #652]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d00c      	beq.n	80036fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e2:	4ba0      	ldr	r3, [pc, #640]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d112      	bne.n	8003714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b9d      	ldr	r3, [pc, #628]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036fa:	d10b      	bne.n	8003714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fc:	4b99      	ldr	r3, [pc, #612]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05b      	beq.n	80037c0 <HAL_RCC_OscConfig+0x108>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d157      	bne.n	80037c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e236      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371c:	d106      	bne.n	800372c <HAL_RCC_OscConfig+0x74>
 800371e:	4b91      	ldr	r3, [pc, #580]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a90      	ldr	r2, [pc, #576]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e01d      	b.n	8003768 <HAL_RCC_OscConfig+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x98>
 8003736:	4b8b      	ldr	r3, [pc, #556]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a8a      	ldr	r2, [pc, #552]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a87      	ldr	r2, [pc, #540]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0xb0>
 8003750:	4b84      	ldr	r3, [pc, #528]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a83      	ldr	r2, [pc, #524]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a80      	ldr	r2, [pc, #512]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe fe5a 	bl	8002428 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe fe56 	bl	8002428 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e1fb      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0xc0>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fe46 	bl	8002428 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe fe42 	bl	8002428 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1e7      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b6c      	ldr	r3, [pc, #432]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0xe8>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037da:	4b62      	ldr	r3, [pc, #392]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b5f      	ldr	r3, [pc, #380]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x152>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1bb      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b56      	ldr	r3, [pc, #344]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4952      	ldr	r1, [pc, #328]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b4f      	ldr	r3, [pc, #316]	; (8003968 <HAL_RCC_OscConfig+0x2b0>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe fdfb 	bl	8002428 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe fdf7 	bl	8002428 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e19c      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b46      	ldr	r3, [pc, #280]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4940      	ldr	r1, [pc, #256]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_OscConfig+0x2b0>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe fdda 	bl	8002428 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe fdd6 	bl	8002428 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e17b      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d030      	beq.n	8003904 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCC_OscConfig+0x2b4>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe fdba 	bl	8002428 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fe fdb6 	bl	8002428 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e15b      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x200>
 80038d6:	e015      	b.n	8003904 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_OscConfig+0x2b4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038de:	f7fe fda3 	bl	8002428 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fe fd9f 	bl	8002428 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e144      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f8:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a0 	beq.w	8003a52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_OscConfig+0x2b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d121      	bne.n	8003992 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_RCC_OscConfig+0x2b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a07      	ldr	r2, [pc, #28]	; (8003970 <HAL_RCC_OscConfig+0x2b8>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395a:	f7fe fd65 	bl	8002428 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003960:	e011      	b.n	8003986 <HAL_RCC_OscConfig+0x2ce>
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	42470000 	.word	0x42470000
 800396c:	42470e80 	.word	0x42470e80
 8003970:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fe fd58 	bl	8002428 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0fd      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b81      	ldr	r3, [pc, #516]	; (8003b8c <HAL_RCC_OscConfig+0x4d4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d106      	bne.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
 800399a:	4b7d      	ldr	r3, [pc, #500]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a7c      	ldr	r2, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	e01c      	b.n	80039e2 <HAL_RCC_OscConfig+0x32a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d10c      	bne.n	80039ca <HAL_RCC_OscConfig+0x312>
 80039b0:	4b77      	ldr	r3, [pc, #476]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a76      	ldr	r2, [pc, #472]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	4b74      	ldr	r3, [pc, #464]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a73      	ldr	r2, [pc, #460]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	e00b      	b.n	80039e2 <HAL_RCC_OscConfig+0x32a>
 80039ca:	4b71      	ldr	r3, [pc, #452]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a70      	ldr	r2, [pc, #448]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
 80039d6:	4b6e      	ldr	r3, [pc, #440]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a6d      	ldr	r2, [pc, #436]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d015      	beq.n	8003a16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fe fd1d 	bl	8002428 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fe fd19 	bl	8002428 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0bc      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a08:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ee      	beq.n	80039f2 <HAL_RCC_OscConfig+0x33a>
 8003a14:	e014      	b.n	8003a40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe fd07 	bl	8002428 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7fe fd03 	bl	8002428 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0a6      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a34:	4b56      	ldr	r3, [pc, #344]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a46:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4a51      	ldr	r2, [pc, #324]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8092 	beq.w	8003b80 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a5c:	4b4c      	ldr	r3, [pc, #304]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d05c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d141      	bne.n	8003af4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a70:	4b48      	ldr	r3, [pc, #288]	; (8003b94 <HAL_RCC_OscConfig+0x4dc>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fe fcd7 	bl	8002428 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe fcd3 	bl	8002428 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e078      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a90:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f0      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	019b      	lsls	r3, r3, #6
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	061b      	lsls	r3, r3, #24
 8003ac0:	4933      	ldr	r1, [pc, #204]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac6:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <HAL_RCC_OscConfig+0x4dc>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fe fcac 	bl	8002428 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe fca8 	bl	8002428 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e04d      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
 8003af2:	e045      	b.n	8003b80 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <HAL_RCC_OscConfig+0x4dc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fe fc95 	bl	8002428 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b02:	f7fe fc91 	bl	8002428 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e036      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b14:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x44a>
 8003b20:	e02e      	b.n	8003b80 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e029      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HAL_RCC_OscConfig+0x4d8>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d11c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d115      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b56:	4013      	ands	r3, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40007000 	.word	0x40007000
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470060 	.word	0x42470060

08003b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0cc      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d044      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d119      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e067      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fe fbce 	bl	8002428 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fe fbca 	bl	8002428 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e04f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d20c      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f821 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd ff3c 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	08008a68 	.word	0x08008a68
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000004 	.word	0x20000004

08003d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	6079      	str	r1, [r7, #4]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	60f9      	str	r1, [r7, #12]
 8003d72:	2100      	movs	r1, #0
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d76:	2100      	movs	r1, #0
 8003d78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d7a:	4952      	ldr	r1, [pc, #328]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d7c:	6889      	ldr	r1, [r1, #8]
 8003d7e:	f001 010c 	and.w	r1, r1, #12
 8003d82:	2908      	cmp	r1, #8
 8003d84:	d00d      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d86:	2908      	cmp	r1, #8
 8003d88:	f200 8094 	bhi.w	8003eb4 <HAL_RCC_GetSysClockFreq+0x150>
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x32>
 8003d90:	2904      	cmp	r1, #4
 8003d92:	d003      	beq.n	8003d9c <HAL_RCC_GetSysClockFreq+0x38>
 8003d94:	e08e      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d96:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d98:	60bb      	str	r3, [r7, #8]
       break;
 8003d9a:	e08e      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8003d9e:	60bb      	str	r3, [r7, #8]
      break;
 8003da0:	e08b      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da2:	4948      	ldr	r1, [pc, #288]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003da4:	6849      	ldr	r1, [r1, #4]
 8003da6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003daa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dac:	4945      	ldr	r1, [pc, #276]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dae:	6849      	ldr	r1, [r1, #4]
 8003db0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003db4:	2900      	cmp	r1, #0
 8003db6:	d024      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	4942      	ldr	r1, [pc, #264]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003dba:	6849      	ldr	r1, [r1, #4]
 8003dbc:	0989      	lsrs	r1, r1, #6
 8003dbe:	4608      	mov	r0, r1
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003dc8:	f04f 0500 	mov.w	r5, #0
 8003dcc:	ea00 0204 	and.w	r2, r0, r4
 8003dd0:	ea01 0305 	and.w	r3, r1, r5
 8003dd4:	493d      	ldr	r1, [pc, #244]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8003dd6:	fb01 f003 	mul.w	r0, r1, r3
 8003dda:	2100      	movs	r1, #0
 8003ddc:	fb01 f102 	mul.w	r1, r1, r2
 8003de0:	1844      	adds	r4, r0, r1
 8003de2:	493a      	ldr	r1, [pc, #232]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8003de4:	fba2 0101 	umull	r0, r1, r2, r1
 8003de8:	1863      	adds	r3, r4, r1
 8003dea:	4619      	mov	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	f7fc fee8 	bl	8000bc8 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e04a      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	ea02 0400 	and.w	r4, r2, r0
 8003e1a:	ea03 0501 	and.w	r5, r3, r1
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	014b      	lsls	r3, r1, #5
 8003e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e30:	0142      	lsls	r2, r0, #5
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	1b00      	subs	r0, r0, r4
 8003e38:	eb61 0105 	sbc.w	r1, r1, r5
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	018b      	lsls	r3, r1, #6
 8003e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e4a:	0182      	lsls	r2, r0, #6
 8003e4c:	1a12      	subs	r2, r2, r0
 8003e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f04f 0100 	mov.w	r1, #0
 8003e5a:	00d9      	lsls	r1, r3, #3
 8003e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e60:	00d0      	lsls	r0, r2, #3
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	1912      	adds	r2, r2, r4
 8003e68:	eb45 0303 	adc.w	r3, r5, r3
 8003e6c:	f04f 0000 	mov.w	r0, #0
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	0299      	lsls	r1, r3, #10
 8003e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e7a:	0290      	lsls	r0, r2, #10
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	f7fc fe9c 	bl	8000bc8 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	60bb      	str	r3, [r7, #8]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003eb6:	60bb      	str	r3, [r7, #8]
      break;
 8003eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eba:	68bb      	ldr	r3, [r7, #8]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	00b71b00 	.word	0x00b71b00

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000000 	.word	0x20000000

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	08008a78 	.word	0x08008a78

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f14:	f7ff ffdc 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0b5b      	lsrs	r3, r3, #13
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	08008a78 	.word	0x08008a78

08003f38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	220f      	movs	r2, #15
 8003f46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_RCC_GetClockConfig+0x5c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0203 	and.w	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_RCC_GetClockConfig+0x5c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_RCC_GetClockConfig+0x5c>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_GetClockConfig+0x5c>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	08db      	lsrs	r3, r3, #3
 8003f72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f7a:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <HAL_RCC_GetClockConfig+0x60>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40023c00 	.word	0x40023c00

08003f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e01d      	b.n	8003fea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fe f88a 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f000 fa8c 	bl	80044f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b06      	cmp	r3, #6
 800401a:	d007      	beq.n	800402c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e01d      	b.n	8004088 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fe f803 	bl	800206c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f000 fa3d 	bl	80044f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2201      	movs	r2, #1
 80040a0:	6839      	ldr	r1, [r7, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fc78 	bl	8004998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a15      	ldr	r2, [pc, #84]	; (8004104 <HAL_TIM_PWM_Start+0x74>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_PWM_Start+0x2c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <HAL_TIM_PWM_Start+0x78>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_TIM_PWM_Start+0x30>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_TIM_PWM_Start+0x32>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d007      	beq.n	80040f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9b4 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9a6 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f9b7 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0204 	mvn.w	r2, #4
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f98a 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f97c 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f98d 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0208 	mvn.w	r2, #8
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f960 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f952 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f963 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f936 	bl	80044bc <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f928 	bl	80044a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f939 	bl	80044d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0201 	mvn.w	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fc3e 	bl	8001b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fc1a 	bl	8004af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8fe 	bl	80044e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0220 	mvn.w	r2, #32
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fbe4 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004332:	2302      	movs	r3, #2
 8004334:	e0b4      	b.n	80044a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b0c      	cmp	r3, #12
 800434a:	f200 809f 	bhi.w	800448c <HAL_TIM_PWM_ConfigChannel+0x170>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004389 	.word	0x08004389
 8004358:	0800448d 	.word	0x0800448d
 800435c:	0800448d 	.word	0x0800448d
 8004360:	0800448d 	.word	0x0800448d
 8004364:	080043c9 	.word	0x080043c9
 8004368:	0800448d 	.word	0x0800448d
 800436c:	0800448d 	.word	0x0800448d
 8004370:	0800448d 	.word	0x0800448d
 8004374:	0800440b 	.word	0x0800440b
 8004378:	0800448d 	.word	0x0800448d
 800437c:	0800448d 	.word	0x0800448d
 8004380:	0800448d 	.word	0x0800448d
 8004384:	0800444b 	.word	0x0800444b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f952 	bl	8004638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0208 	orr.w	r2, r2, #8
 80043a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	619a      	str	r2, [r3, #24]
      break;
 80043c6:	e062      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f9a2 	bl	8004718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	619a      	str	r2, [r3, #24]
      break;
 8004408:	e041      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f9f7 	bl	8004804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0208 	orr.w	r2, r2, #8
 8004424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0204 	bic.w	r2, r2, #4
 8004434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	61da      	str	r2, [r3, #28]
      break;
 8004448:	e021      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fa4b 	bl	80048ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	021a      	lsls	r2, r3, #8
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	61da      	str	r2, [r3, #28]
      break;
 800448a:	e000      	b.n	800448e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800448c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a40      	ldr	r2, [pc, #256]	; (800460c <TIM_Base_SetConfig+0x114>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d013      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d00f      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a3d      	ldr	r2, [pc, #244]	; (8004610 <TIM_Base_SetConfig+0x118>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00b      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3c      	ldr	r2, [pc, #240]	; (8004614 <TIM_Base_SetConfig+0x11c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d007      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <TIM_Base_SetConfig+0x120>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3a      	ldr	r2, [pc, #232]	; (800461c <TIM_Base_SetConfig+0x124>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d108      	bne.n	800454a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <TIM_Base_SetConfig+0x114>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d02b      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d027      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <TIM_Base_SetConfig+0x118>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d023      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <TIM_Base_SetConfig+0x11c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d01f      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2a      	ldr	r2, [pc, #168]	; (8004618 <TIM_Base_SetConfig+0x120>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01b      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a29      	ldr	r2, [pc, #164]	; (800461c <TIM_Base_SetConfig+0x124>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d017      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a28      	ldr	r2, [pc, #160]	; (8004620 <TIM_Base_SetConfig+0x128>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a27      	ldr	r2, [pc, #156]	; (8004624 <TIM_Base_SetConfig+0x12c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00f      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a26      	ldr	r2, [pc, #152]	; (8004628 <TIM_Base_SetConfig+0x130>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a25      	ldr	r2, [pc, #148]	; (800462c <TIM_Base_SetConfig+0x134>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a24      	ldr	r2, [pc, #144]	; (8004630 <TIM_Base_SetConfig+0x138>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a23      	ldr	r2, [pc, #140]	; (8004634 <TIM_Base_SetConfig+0x13c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <TIM_Base_SetConfig+0x114>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0xf8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a0c      	ldr	r2, [pc, #48]	; (800461c <TIM_Base_SetConfig+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d103      	bne.n	80045f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	615a      	str	r2, [r3, #20]
}
 80045fe:	bf00      	nop
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40010000 	.word	0x40010000
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40010400 	.word	0x40010400
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800
 800462c:	40001800 	.word	0x40001800
 8004630:	40001c00 	.word	0x40001c00
 8004634:	40002000 	.word	0x40002000

08004638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0303 	bic.w	r3, r3, #3
 800466e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 0302 	bic.w	r3, r3, #2
 8004680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a20      	ldr	r2, [pc, #128]	; (8004710 <TIM_OC1_SetConfig+0xd8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC1_SetConfig+0x64>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <TIM_OC1_SetConfig+0xdc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <TIM_OC1_SetConfig+0xd8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_OC1_SetConfig+0x8e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a14      	ldr	r2, [pc, #80]	; (8004714 <TIM_OC1_SetConfig+0xdc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d111      	bne.n	80046ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	621a      	str	r2, [r3, #32]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40010000 	.word	0x40010000
 8004714:	40010400 	.word	0x40010400

08004718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f023 0210 	bic.w	r2, r3, #16
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f023 0320 	bic.w	r3, r3, #32
 8004762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a22      	ldr	r2, [pc, #136]	; (80047fc <TIM_OC2_SetConfig+0xe4>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC2_SetConfig+0x68>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a21      	ldr	r2, [pc, #132]	; (8004800 <TIM_OC2_SetConfig+0xe8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10d      	bne.n	800479c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <TIM_OC2_SetConfig+0xe4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC2_SetConfig+0x94>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a16      	ldr	r2, [pc, #88]	; (8004800 <TIM_OC2_SetConfig+0xe8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d113      	bne.n	80047d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40010400 	.word	0x40010400

08004804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800484c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <TIM_OC3_SetConfig+0xe0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_OC3_SetConfig+0x66>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <TIM_OC3_SetConfig+0xe4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10d      	bne.n	8004886 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a16      	ldr	r2, [pc, #88]	; (80048e4 <TIM_OC3_SetConfig+0xe0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d003      	beq.n	8004896 <TIM_OC3_SetConfig+0x92>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <TIM_OC3_SetConfig+0xe4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d113      	bne.n	80048be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400

080048ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	031b      	lsls	r3, r3, #12
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a12      	ldr	r2, [pc, #72]	; (8004990 <TIM_OC4_SetConfig+0xa4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d003      	beq.n	8004954 <TIM_OC4_SetConfig+0x68>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a11      	ldr	r2, [pc, #68]	; (8004994 <TIM_OC4_SetConfig+0xa8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d109      	bne.n	8004968 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40010400 	.word	0x40010400

08004998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2201      	movs	r2, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e05a      	b.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d022      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d01d      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d018      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d009      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10c      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40000c00 	.word	0x40000c00
 8004ad0:	40010400 	.word	0x40010400
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40001800 	.word	0x40001800

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e03f      	b.n	8004b96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd fbd4 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	; 0x24
 8004b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9b1 	bl	8004eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b088      	sub	sp, #32
 8004ba2:	af02      	add	r7, sp, #8
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 8083 	bne.w	8004cc6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Transmit+0x2e>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e07b      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Transmit+0x40>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e074      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2221      	movs	r2, #33	; 0x21
 8004bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fc18 	bl	8002428 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c0e:	e042      	b.n	8004c96 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d122      	bne.n	8004c6e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f8f2 	bl	8004e1c <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e042      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3302      	adds	r3, #2
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	e017      	b.n	8004c96 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	e013      	b.n	8004c96 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f8cf 	bl	8004e1c <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e01f      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	60ba      	str	r2, [r7, #8]
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1b7      	bne.n	8004c10 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f8b6 	bl	8004e1c <UART_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e006      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	f040 8090 	bne.w	8004e12 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_UART_Receive+0x2e>
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e088      	b.n	8004e14 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_UART_Receive+0x40>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e081      	b.n	8004e14 <HAL_UART_Receive+0x144>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2222      	movs	r2, #34	; 0x22
 8004d22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d26:	f7fd fb7f 	bl	8002428 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d40:	e05c      	b.n	8004dfc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d58:	d12b      	bne.n	8004db2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2120      	movs	r1, #32
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f859 	bl	8004e1c <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e04f      	b.n	8004e14 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10c      	bne.n	8004d9a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3302      	adds	r3, #2
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	e030      	b.n	8004dfc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	3301      	adds	r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	e024      	b.n	8004dfc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2200      	movs	r2, #0
 8004dba:	2120      	movs	r1, #32
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f82d 	bl	8004e1c <UART_WaitOnFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e023      	b.n	8004e14 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	60ba      	str	r2, [r7, #8]
 8004de0:	b2ca      	uxtb	r2, r1
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e00a      	b.n	8004dfc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1c59      	adds	r1, r3, #1
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d19d      	bne.n	8004d42 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
  }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2c:	e02c      	b.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d028      	beq.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e3c:	f7fd faf4 	bl	8002428 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d21d      	bcs.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e00f      	b.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4013      	ands	r3, r2
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d0c3      	beq.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	b0bd      	sub	sp, #244	; 0xf4
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ecc:	68d9      	ldr	r1, [r3, #12]
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	ea40 0301 	orr.w	r3, r0, r1
 8004ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f08:	f021 010c 	bic.w	r1, r1, #12
 8004f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f16:	430b      	orrs	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	6999      	ldr	r1, [r3, #24]
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	ea40 0301 	orr.w	r3, r0, r1
 8004f36:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	f040 81a5 	bne.w	8005290 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4bcd      	ldr	r3, [pc, #820]	; (8005284 <UART_SetConfig+0x3d4>)
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d006      	beq.n	8004f60 <UART_SetConfig+0xb0>
 8004f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4bcb      	ldr	r3, [pc, #812]	; (8005288 <UART_SetConfig+0x3d8>)
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	f040 80cb 	bne.w	80050f6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f60:	f7fe ffd6 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8004f64:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f6c:	461c      	mov	r4, r3
 8004f6e:	f04f 0500 	mov.w	r5, #0
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f86:	1912      	adds	r2, r2, r4
 8004f88:	eb45 0303 	adc.w	r3, r5, r3
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	00d9      	lsls	r1, r3, #3
 8004f96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f9a:	00d0      	lsls	r0, r2, #3
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	1911      	adds	r1, r2, r4
 8004fa2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004fa6:	416b      	adcs	r3, r5
 8004fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fc4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004fc8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004fcc:	f7fb fdfc 	bl	8000bc8 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4bad      	ldr	r3, [pc, #692]	; (800528c <UART_SetConfig+0x3dc>)
 8004fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	011e      	lsls	r6, r3, #4
 8004fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fe2:	461c      	mov	r4, r3
 8004fe4:	f04f 0500 	mov.w	r5, #0
 8004fe8:	4622      	mov	r2, r4
 8004fea:	462b      	mov	r3, r5
 8004fec:	1891      	adds	r1, r2, r2
 8004fee:	67b9      	str	r1, [r7, #120]	; 0x78
 8004ff0:	415b      	adcs	r3, r3
 8004ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ff4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004ff8:	1912      	adds	r2, r2, r4
 8004ffa:	eb45 0303 	adc.w	r3, r5, r3
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	00d9      	lsls	r1, r3, #3
 8005008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800500c:	00d0      	lsls	r0, r2, #3
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	1911      	adds	r1, r2, r4
 8005014:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005018:	416b      	adcs	r3, r5
 800501a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	461a      	mov	r2, r3
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	1891      	adds	r1, r2, r2
 800502c:	6739      	str	r1, [r7, #112]	; 0x70
 800502e:	415b      	adcs	r3, r3
 8005030:	677b      	str	r3, [r7, #116]	; 0x74
 8005032:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005036:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800503a:	f7fb fdc5 	bl	8000bc8 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4b92      	ldr	r3, [pc, #584]	; (800528c <UART_SetConfig+0x3dc>)
 8005044:	fba3 1302 	umull	r1, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2164      	movs	r1, #100	; 0x64
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	3332      	adds	r3, #50	; 0x32
 8005056:	4a8d      	ldr	r2, [pc, #564]	; (800528c <UART_SetConfig+0x3dc>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005064:	441e      	add	r6, r3
 8005066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800506a:	4618      	mov	r0, r3
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	1894      	adds	r4, r2, r2
 8005076:	66bc      	str	r4, [r7, #104]	; 0x68
 8005078:	415b      	adcs	r3, r3
 800507a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800507c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005080:	1812      	adds	r2, r2, r0
 8005082:	eb41 0303 	adc.w	r3, r1, r3
 8005086:	f04f 0400 	mov.w	r4, #0
 800508a:	f04f 0500 	mov.w	r5, #0
 800508e:	00dd      	lsls	r5, r3, #3
 8005090:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005094:	00d4      	lsls	r4, r2, #3
 8005096:	4622      	mov	r2, r4
 8005098:	462b      	mov	r3, r5
 800509a:	1814      	adds	r4, r2, r0
 800509c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80050a0:	414b      	adcs	r3, r1
 80050a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	461a      	mov	r2, r3
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	1891      	adds	r1, r2, r2
 80050b4:	6639      	str	r1, [r7, #96]	; 0x60
 80050b6:	415b      	adcs	r3, r3
 80050b8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80050be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050c2:	f7fb fd81 	bl	8000bc8 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4b70      	ldr	r3, [pc, #448]	; (800528c <UART_SetConfig+0x3dc>)
 80050cc:	fba3 1302 	umull	r1, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2164      	movs	r1, #100	; 0x64
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	3332      	adds	r3, #50	; 0x32
 80050de:	4a6b      	ldr	r2, [pc, #428]	; (800528c <UART_SetConfig+0x3dc>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f003 0207 	and.w	r2, r3, #7
 80050ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4432      	add	r2, r6
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	e26d      	b.n	80055d2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f6:	f7fe fef7 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 80050fa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005102:	461c      	mov	r4, r3
 8005104:	f04f 0500 	mov.w	r5, #0
 8005108:	4622      	mov	r2, r4
 800510a:	462b      	mov	r3, r5
 800510c:	1891      	adds	r1, r2, r2
 800510e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005110:	415b      	adcs	r3, r3
 8005112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005114:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005118:	1912      	adds	r2, r2, r4
 800511a:	eb45 0303 	adc.w	r3, r5, r3
 800511e:	f04f 0000 	mov.w	r0, #0
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	00d9      	lsls	r1, r3, #3
 8005128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800512c:	00d0      	lsls	r0, r2, #3
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	1911      	adds	r1, r2, r4
 8005134:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005138:	416b      	adcs	r3, r5
 800513a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	461a      	mov	r2, r3
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	1891      	adds	r1, r2, r2
 800514c:	6539      	str	r1, [r7, #80]	; 0x50
 800514e:	415b      	adcs	r3, r3
 8005150:	657b      	str	r3, [r7, #84]	; 0x54
 8005152:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005156:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800515a:	f7fb fd35 	bl	8000bc8 <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4b4a      	ldr	r3, [pc, #296]	; (800528c <UART_SetConfig+0x3dc>)
 8005164:	fba3 2302 	umull	r2, r3, r3, r2
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	011e      	lsls	r6, r3, #4
 800516c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005170:	461c      	mov	r4, r3
 8005172:	f04f 0500 	mov.w	r5, #0
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	1891      	adds	r1, r2, r2
 800517c:	64b9      	str	r1, [r7, #72]	; 0x48
 800517e:	415b      	adcs	r3, r3
 8005180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005186:	1912      	adds	r2, r2, r4
 8005188:	eb45 0303 	adc.w	r3, r5, r3
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	00d9      	lsls	r1, r3, #3
 8005196:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800519a:	00d0      	lsls	r0, r2, #3
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	1911      	adds	r1, r2, r4
 80051a2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80051a6:	416b      	adcs	r3, r5
 80051a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	1891      	adds	r1, r2, r2
 80051ba:	6439      	str	r1, [r7, #64]	; 0x40
 80051bc:	415b      	adcs	r3, r3
 80051be:	647b      	str	r3, [r7, #68]	; 0x44
 80051c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80051c8:	f7fb fcfe 	bl	8000bc8 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b2e      	ldr	r3, [pc, #184]	; (800528c <UART_SetConfig+0x3dc>)
 80051d2:	fba3 1302 	umull	r1, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2164      	movs	r1, #100	; 0x64
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	3332      	adds	r3, #50	; 0x32
 80051e4:	4a29      	ldr	r2, [pc, #164]	; (800528c <UART_SetConfig+0x3dc>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f2:	441e      	add	r6, r3
 80051f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f8:	4618      	mov	r0, r3
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	1894      	adds	r4, r2, r2
 8005204:	63bc      	str	r4, [r7, #56]	; 0x38
 8005206:	415b      	adcs	r3, r3
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800520a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800520e:	1812      	adds	r2, r2, r0
 8005210:	eb41 0303 	adc.w	r3, r1, r3
 8005214:	f04f 0400 	mov.w	r4, #0
 8005218:	f04f 0500 	mov.w	r5, #0
 800521c:	00dd      	lsls	r5, r3, #3
 800521e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005222:	00d4      	lsls	r4, r2, #3
 8005224:	4622      	mov	r2, r4
 8005226:	462b      	mov	r3, r5
 8005228:	1814      	adds	r4, r2, r0
 800522a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800522e:	414b      	adcs	r3, r1
 8005230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	461a      	mov	r2, r3
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	1891      	adds	r1, r2, r2
 8005242:	6339      	str	r1, [r7, #48]	; 0x30
 8005244:	415b      	adcs	r3, r3
 8005246:	637b      	str	r3, [r7, #52]	; 0x34
 8005248:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800524c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005250:	f7fb fcba 	bl	8000bc8 <__aeabi_uldivmod>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <UART_SetConfig+0x3dc>)
 800525a:	fba3 1302 	umull	r1, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2164      	movs	r1, #100	; 0x64
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	3332      	adds	r3, #50	; 0x32
 800526c:	4a07      	ldr	r2, [pc, #28]	; (800528c <UART_SetConfig+0x3dc>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	f003 0207 	and.w	r2, r3, #7
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4432      	add	r2, r6
 8005280:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005282:	e1a6      	b.n	80055d2 <UART_SetConfig+0x722>
 8005284:	40011000 	.word	0x40011000
 8005288:	40011400 	.word	0x40011400
 800528c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4bd1      	ldr	r3, [pc, #836]	; (80055dc <UART_SetConfig+0x72c>)
 8005298:	429a      	cmp	r2, r3
 800529a:	d006      	beq.n	80052aa <UART_SetConfig+0x3fa>
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4bcf      	ldr	r3, [pc, #828]	; (80055e0 <UART_SetConfig+0x730>)
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f040 80ca 	bne.w	800543e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80052aa:	f7fe fe31 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 80052ae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052b6:	461c      	mov	r4, r3
 80052b8:	f04f 0500 	mov.w	r5, #0
 80052bc:	4622      	mov	r2, r4
 80052be:	462b      	mov	r3, r5
 80052c0:	1891      	adds	r1, r2, r2
 80052c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80052c4:	415b      	adcs	r3, r3
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052cc:	1912      	adds	r2, r2, r4
 80052ce:	eb45 0303 	adc.w	r3, r5, r3
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	00d9      	lsls	r1, r3, #3
 80052dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052e0:	00d0      	lsls	r0, r2, #3
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	eb12 0a04 	adds.w	sl, r2, r4
 80052ea:	eb43 0b05 	adc.w	fp, r3, r5
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f04f 0100 	mov.w	r1, #0
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	008b      	lsls	r3, r1, #2
 8005304:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005308:	0082      	lsls	r2, r0, #2
 800530a:	4650      	mov	r0, sl
 800530c:	4659      	mov	r1, fp
 800530e:	f7fb fc5b 	bl	8000bc8 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4bb3      	ldr	r3, [pc, #716]	; (80055e4 <UART_SetConfig+0x734>)
 8005318:	fba3 2302 	umull	r2, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	011e      	lsls	r6, r3, #4
 8005320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005324:	4618      	mov	r0, r3
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	1894      	adds	r4, r2, r2
 8005330:	623c      	str	r4, [r7, #32]
 8005332:	415b      	adcs	r3, r3
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
 8005336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800533a:	1812      	adds	r2, r2, r0
 800533c:	eb41 0303 	adc.w	r3, r1, r3
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	f04f 0500 	mov.w	r5, #0
 8005348:	00dd      	lsls	r5, r3, #3
 800534a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800534e:	00d4      	lsls	r4, r2, #3
 8005350:	4622      	mov	r2, r4
 8005352:	462b      	mov	r3, r5
 8005354:	1814      	adds	r4, r2, r0
 8005356:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800535a:	414b      	adcs	r3, r1
 800535c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4618      	mov	r0, r3
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	008b      	lsls	r3, r1, #2
 8005376:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005380:	f7fb fc22 	bl	8000bc8 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b96      	ldr	r3, [pc, #600]	; (80055e4 <UART_SetConfig+0x734>)
 800538a:	fba3 1302 	umull	r1, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2164      	movs	r1, #100	; 0x64
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	3332      	adds	r3, #50	; 0x32
 800539c:	4a91      	ldr	r2, [pc, #580]	; (80055e4 <UART_SetConfig+0x734>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a8:	441e      	add	r6, r3
 80053aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053ae:	4618      	mov	r0, r3
 80053b0:	f04f 0100 	mov.w	r1, #0
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	1894      	adds	r4, r2, r2
 80053ba:	61bc      	str	r4, [r7, #24]
 80053bc:	415b      	adcs	r3, r3
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c4:	1812      	adds	r2, r2, r0
 80053c6:	eb41 0303 	adc.w	r3, r1, r3
 80053ca:	f04f 0400 	mov.w	r4, #0
 80053ce:	f04f 0500 	mov.w	r5, #0
 80053d2:	00dd      	lsls	r5, r3, #3
 80053d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053d8:	00d4      	lsls	r4, r2, #3
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	1814      	adds	r4, r2, r0
 80053e0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80053e4:	414b      	adcs	r3, r1
 80053e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	008b      	lsls	r3, r1, #2
 8005400:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005404:	0082      	lsls	r2, r0, #2
 8005406:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800540a:	f7fb fbdd 	bl	8000bc8 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4b74      	ldr	r3, [pc, #464]	; (80055e4 <UART_SetConfig+0x734>)
 8005414:	fba3 1302 	umull	r1, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	2164      	movs	r1, #100	; 0x64
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	3332      	adds	r3, #50	; 0x32
 8005426:	4a6f      	ldr	r2, [pc, #444]	; (80055e4 <UART_SetConfig+0x734>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4432      	add	r2, r6
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	e0c9      	b.n	80055d2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800543e:	f7fe fd53 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8005442:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005446:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800544a:	461c      	mov	r4, r3
 800544c:	f04f 0500 	mov.w	r5, #0
 8005450:	4622      	mov	r2, r4
 8005452:	462b      	mov	r3, r5
 8005454:	1891      	adds	r1, r2, r2
 8005456:	6139      	str	r1, [r7, #16]
 8005458:	415b      	adcs	r3, r3
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005460:	1912      	adds	r2, r2, r4
 8005462:	eb45 0303 	adc.w	r3, r5, r3
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	00d9      	lsls	r1, r3, #3
 8005470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005474:	00d0      	lsls	r0, r2, #3
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	eb12 0804 	adds.w	r8, r2, r4
 800547e:	eb43 0905 	adc.w	r9, r3, r5
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4618      	mov	r0, r3
 800548a:	f04f 0100 	mov.w	r1, #0
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	008b      	lsls	r3, r1, #2
 8005498:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800549c:	0082      	lsls	r2, r0, #2
 800549e:	4640      	mov	r0, r8
 80054a0:	4649      	mov	r1, r9
 80054a2:	f7fb fb91 	bl	8000bc8 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4b4e      	ldr	r3, [pc, #312]	; (80055e4 <UART_SetConfig+0x734>)
 80054ac:	fba3 2302 	umull	r2, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	011e      	lsls	r6, r3, #4
 80054b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054b8:	4618      	mov	r0, r3
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	1894      	adds	r4, r2, r2
 80054c4:	60bc      	str	r4, [r7, #8]
 80054c6:	415b      	adcs	r3, r3
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ce:	1812      	adds	r2, r2, r0
 80054d0:	eb41 0303 	adc.w	r3, r1, r3
 80054d4:	f04f 0400 	mov.w	r4, #0
 80054d8:	f04f 0500 	mov.w	r5, #0
 80054dc:	00dd      	lsls	r5, r3, #3
 80054de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054e2:	00d4      	lsls	r4, r2, #3
 80054e4:	4622      	mov	r2, r4
 80054e6:	462b      	mov	r3, r5
 80054e8:	1814      	adds	r4, r2, r0
 80054ea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80054ee:	414b      	adcs	r3, r1
 80054f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	008b      	lsls	r3, r1, #2
 800550a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800550e:	0082      	lsls	r2, r0, #2
 8005510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005514:	f7fb fb58 	bl	8000bc8 <__aeabi_uldivmod>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4b31      	ldr	r3, [pc, #196]	; (80055e4 <UART_SetConfig+0x734>)
 800551e:	fba3 1302 	umull	r1, r3, r3, r2
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	2164      	movs	r1, #100	; 0x64
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	3332      	adds	r3, #50	; 0x32
 8005530:	4a2c      	ldr	r2, [pc, #176]	; (80055e4 <UART_SetConfig+0x734>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553c:	441e      	add	r6, r3
 800553e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005542:	4618      	mov	r0, r3
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	1894      	adds	r4, r2, r2
 800554e:	603c      	str	r4, [r7, #0]
 8005550:	415b      	adcs	r3, r3
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005558:	1812      	adds	r2, r2, r0
 800555a:	eb41 0303 	adc.w	r3, r1, r3
 800555e:	f04f 0400 	mov.w	r4, #0
 8005562:	f04f 0500 	mov.w	r5, #0
 8005566:	00dd      	lsls	r5, r3, #3
 8005568:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800556c:	00d4      	lsls	r4, r2, #3
 800556e:	4622      	mov	r2, r4
 8005570:	462b      	mov	r3, r5
 8005572:	1814      	adds	r4, r2, r0
 8005574:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005578:	414b      	adcs	r3, r1
 800557a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800557e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	f04f 0100 	mov.w	r1, #0
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	008b      	lsls	r3, r1, #2
 8005594:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005598:	0082      	lsls	r2, r0, #2
 800559a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800559e:	f7fb fb13 	bl	8000bc8 <__aeabi_uldivmod>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <UART_SetConfig+0x734>)
 80055a8:	fba3 1302 	umull	r1, r3, r3, r2
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	2164      	movs	r1, #100	; 0x64
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	3332      	adds	r3, #50	; 0x32
 80055ba:	4a0a      	ldr	r2, [pc, #40]	; (80055e4 <UART_SetConfig+0x734>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	095b      	lsrs	r3, r3, #5
 80055c2:	f003 020f 	and.w	r2, r3, #15
 80055c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4432      	add	r2, r6
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	e7ff      	b.n	80055d2 <UART_SetConfig+0x722>
 80055d2:	bf00      	nop
 80055d4:	37f4      	adds	r7, #244	; 0xf4
 80055d6:	46bd      	mov	sp, r7
 80055d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	51eb851f 	.word	0x51eb851f

080055e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80055f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055fa:	2b84      	cmp	r3, #132	; 0x84
 80055fc:	d005      	beq.n	800560a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80055fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	3303      	adds	r3, #3
 8005608:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800560a:	68fb      	ldr	r3, [r7, #12]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800561c:	f000 fade 	bl	8005bdc <vTaskStartScheduler>
  
  return osOK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	bd80      	pop	{r7, pc}

08005626 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005628:	b089      	sub	sp, #36	; 0x24
 800562a:	af04      	add	r7, sp, #16
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d020      	beq.n	800567a <osThreadCreate+0x54>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01c      	beq.n	800567a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685c      	ldr	r4, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681d      	ldr	r5, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691e      	ldr	r6, [r3, #16]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ffc8 	bl	80055e8 <makeFreeRtosPriority>
 8005658:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005662:	9202      	str	r2, [sp, #8]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	9100      	str	r1, [sp, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4632      	mov	r2, r6
 800566c:	4629      	mov	r1, r5
 800566e:	4620      	mov	r0, r4
 8005670:	f000 f8ed 	bl	800584e <xTaskCreateStatic>
 8005674:	4603      	mov	r3, r0
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e01c      	b.n	80056b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685c      	ldr	r4, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005686:	b29e      	uxth	r6, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ffaa 	bl	80055e8 <makeFreeRtosPriority>
 8005694:	4602      	mov	r2, r0
 8005696:	f107 030c 	add.w	r3, r7, #12
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	9200      	str	r2, [sp, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	4632      	mov	r2, r6
 80056a2:	4629      	mov	r1, r5
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f92f 	bl	8005908 <xTaskCreate>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056b4:	68fb      	ldr	r3, [r7, #12]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <osDelay+0x16>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	e000      	b.n	80056d6 <osDelay+0x18>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fa4c 	bl	8005b74 <vTaskDelay>
  
  return osOK;
 80056dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f103 0208 	add.w	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 0208 	add.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0208 	add.w	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d103      	bne.n	80057a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	e00c      	b.n	80057c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3308      	adds	r3, #8
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	e002      	b.n	80057b6 <vListInsert+0x2e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d2f6      	bcs.n	80057b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6892      	ldr	r2, [r2, #8]
 8005810:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d103      	bne.n	800582e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	1e5a      	subs	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800584e:	b580      	push	{r7, lr}
 8005850:	b08e      	sub	sp, #56	; 0x38
 8005852:	af04      	add	r7, sp, #16
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <xTaskCreateStatic+0x46>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	61fb      	str	r3, [r7, #28]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005894:	2354      	movs	r3, #84	; 0x54
 8005896:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b54      	cmp	r3, #84	; 0x54
 800589c:	d00a      	beq.n	80058b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	61bb      	str	r3, [r7, #24]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01e      	beq.n	80058fa <xTaskCreateStatic+0xac>
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01b      	beq.n	80058fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058d4:	2300      	movs	r3, #0
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	9301      	str	r3, [sp, #4]
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f850 	bl	8005992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f4:	f000 f8d4 	bl	8005aa0 <prvAddNewTaskToReadyList>
 80058f8:	e001      	b.n	80058fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058fe:	697b      	ldr	r3, [r7, #20]
	}
 8005900:	4618      	mov	r0, r3
 8005902:	3728      	adds	r7, #40	; 0x28
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08c      	sub	sp, #48	; 0x30
 800590c:	af04      	add	r7, sp, #16
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	4613      	mov	r3, r2
 8005916:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4618      	mov	r0, r3
 800591e:	f000 fec3 	bl	80066a8 <pvPortMalloc>
 8005922:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800592a:	2054      	movs	r0, #84	; 0x54
 800592c:	f000 febc 	bl	80066a8 <pvPortMalloc>
 8005930:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
 800593e:	e005      	b.n	800594c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	f000 ff75 	bl	8006830 <vPortFree>
 8005946:	e001      	b.n	800594c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800595a:	88fa      	ldrh	r2, [r7, #6]
 800595c:	2300      	movs	r3, #0
 800595e:	9303      	str	r3, [sp, #12]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	9302      	str	r3, [sp, #8]
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68b9      	ldr	r1, [r7, #8]
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f80e 	bl	8005992 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005976:	69f8      	ldr	r0, [r7, #28]
 8005978:	f000 f892 	bl	8005aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800597c:	2301      	movs	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e002      	b.n	8005988 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005988:	69bb      	ldr	r3, [r7, #24]
	}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b088      	sub	sp, #32
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059aa:	3b01      	subs	r3, #1
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <prvInitialiseNewTask+0x48>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	617b      	str	r3, [r7, #20]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01f      	beq.n	8005a20 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e012      	b.n	8005a0c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	7819      	ldrb	r1, [r3, #0]
 80059ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	3334      	adds	r3, #52	; 0x34
 80059f6:	460a      	mov	r2, r1
 80059f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	d9e9      	bls.n	80059e6 <prvInitialiseNewTask+0x54>
 8005a12:	e000      	b.n	8005a16 <prvInitialiseNewTask+0x84>
			{
				break;
 8005a14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a1e:	e003      	b.n	8005a28 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d901      	bls.n	8005a32 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a2e:	2306      	movs	r3, #6
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2200      	movs	r2, #0
 8005a42:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fe6c 	bl	8005726 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	3318      	adds	r3, #24
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fe67 	bl	8005726 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	f1c3 0207 	rsb	r2, r3, #7
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	2200      	movs	r2, #0
 8005a72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	69b8      	ldr	r0, [r7, #24]
 8005a82:	f000 fc05 	bl	8006290 <pxPortInitialiseStack>
 8005a86:	4602      	mov	r2, r0
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005aa8:	f000 fd1c 	bl	80064e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ab6:	4b29      	ldr	r3, [pc, #164]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005abe:	4a27      	ldr	r2, [pc, #156]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <prvAddNewTaskToReadyList+0xb8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d110      	bne.n	8005aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005acc:	f000 fabc 	bl	8006048 <prvInitialiseTaskLists>
 8005ad0:	e00d      	b.n	8005aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ad2:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <prvAddNewTaskToReadyList+0xc0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d802      	bhi.n	8005aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005aee:	4b1d      	ldr	r3, [pc, #116]	; (8005b64 <prvAddNewTaskToReadyList+0xc4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3301      	adds	r3, #1
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <prvAddNewTaskToReadyList+0xc4>)
 8005af6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	2201      	movs	r2, #1
 8005afe:	409a      	lsls	r2, r3
 8005b00:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <prvAddNewTaskToReadyList+0xc8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <prvAddNewTaskToReadyList+0xc8>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <prvAddNewTaskToReadyList+0xcc>)
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7ff fe0d 	bl	8005740 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b26:	f000 fd0d 	bl	8006544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <prvAddNewTaskToReadyList+0xc0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <prvAddNewTaskToReadyList+0xbc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d207      	bcs.n	8005b50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <prvAddNewTaskToReadyList+0xd0>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	200003f0 	.word	0x200003f0
 8005b5c:	200002f0 	.word	0x200002f0
 8005b60:	200003fc 	.word	0x200003fc
 8005b64:	2000040c 	.word	0x2000040c
 8005b68:	200003f8 	.word	0x200003f8
 8005b6c:	200002f4 	.word	0x200002f4
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b86:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <vTaskDelay+0x60>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <vTaskDelay+0x30>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60bb      	str	r3, [r7, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ba4:	f000 f87a 	bl	8005c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ba8:	2100      	movs	r1, #0
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fb0a 	bl	80061c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bb0:	f000 f882 	bl	8005cb8 <xTaskResumeAll>
 8005bb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <vTaskDelay+0x64>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000418 	.word	0x20000418
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bea:	463a      	mov	r2, r7
 8005bec:	1d39      	adds	r1, r7, #4
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fb fd54 	bl	80016a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	9202      	str	r2, [sp, #8]
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	2300      	movs	r3, #0
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	2300      	movs	r3, #0
 8005c08:	460a      	mov	r2, r1
 8005c0a:	491e      	ldr	r1, [pc, #120]	; (8005c84 <vTaskStartScheduler+0xa8>)
 8005c0c:	481e      	ldr	r0, [pc, #120]	; (8005c88 <vTaskStartScheduler+0xac>)
 8005c0e:	f7ff fe1e 	bl	800584e <xTaskCreateStatic>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <vTaskStartScheduler+0xb0>)
 8005c16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <vTaskStartScheduler+0xb0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c20:	2301      	movs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e001      	b.n	8005c2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d116      	bne.n	8005c5e <vTaskStartScheduler+0x82>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c44:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <vTaskStartScheduler+0xb4>)
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <vTaskStartScheduler+0xb8>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <vTaskStartScheduler+0xbc>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c58:	f000 fba2 	bl	80063a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c5c:	e00e      	b.n	8005c7c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d10a      	bne.n	8005c7c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <vTaskStartScheduler+0x9e>
}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	08008a60 	.word	0x08008a60
 8005c88:	08006019 	.word	0x08006019
 8005c8c:	20000414 	.word	0x20000414
 8005c90:	20000410 	.word	0x20000410
 8005c94:	200003fc 	.word	0x200003fc
 8005c98:	200003f4 	.word	0x200003f4

08005c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000418 	.word	0x20000418

08005cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce4:	f000 fbfe 	bl	80064e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ce8:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a37      	ldr	r2, [pc, #220]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <xTaskResumeAll+0x114>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d161      	bne.n	8005dbe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfa:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05d      	beq.n	8005dbe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d02:	e02e      	b.n	8005d62 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff fd72 	bl	80057fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fd6d 	bl	80057fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2201      	movs	r2, #1
 8005d26:	409a      	lsls	r2, r3
 8005d28:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <xTaskResumeAll+0x124>)
 8005d40:	441a      	add	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3304      	adds	r3, #4
 8005d46:	4619      	mov	r1, r3
 8005d48:	4610      	mov	r0, r2
 8005d4a:	f7ff fcf9 	bl	8005740 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d52:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <xTaskResumeAll+0x128>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005d5c:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d62:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1cc      	bne.n	8005d04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d70:	f000 fa08 	bl	8006184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005d74:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d010      	beq.n	8005da2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d80:	f000 f836 	bl	8005df0 <xTaskIncrementTick>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005d8a:	4b16      	ldr	r3, [pc, #88]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f1      	bne.n	8005d80 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <xTaskResumeAll+0x134>)
 8005db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dbe:	f000 fbc1 	bl	8006544 <vPortExitCritical>

	return xAlreadyYielded;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000418 	.word	0x20000418
 8005dd0:	200003f0 	.word	0x200003f0
 8005dd4:	200003b0 	.word	0x200003b0
 8005dd8:	200003f8 	.word	0x200003f8
 8005ddc:	200002f4 	.word	0x200002f4
 8005de0:	200002f0 	.word	0x200002f0
 8005de4:	20000404 	.word	0x20000404
 8005de8:	20000400 	.word	0x20000400
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dfa:	4b4e      	ldr	r3, [pc, #312]	; (8005f34 <xTaskIncrementTick+0x144>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f040 8088 	bne.w	8005f14 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e04:	4b4c      	ldr	r3, [pc, #304]	; (8005f38 <xTaskIncrementTick+0x148>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	; (8005f38 <xTaskIncrementTick+0x148>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d120      	bne.n	8005e5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e18:	4b48      	ldr	r3, [pc, #288]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	603b      	str	r3, [r7, #0]
}
 8005e34:	bf00      	nop
 8005e36:	e7fe      	b.n	8005e36 <xTaskIncrementTick+0x46>
 8005e38:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	4b40      	ldr	r3, [pc, #256]	; (8005f40 <xTaskIncrementTick+0x150>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a3e      	ldr	r2, [pc, #248]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	4a3e      	ldr	r2, [pc, #248]	; (8005f40 <xTaskIncrementTick+0x150>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <xTaskIncrementTick+0x154>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a3c      	ldr	r2, [pc, #240]	; (8005f44 <xTaskIncrementTick+0x154>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f000 f995 	bl	8006184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <xTaskIncrementTick+0x158>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d348      	bcc.n	8005ef6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e64:	4b35      	ldr	r3, [pc, #212]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d104      	bne.n	8005e78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6e:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <xTaskIncrementTick+0x158>)
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	601a      	str	r2, [r3, #0]
					break;
 8005e76:	e03e      	b.n	8005ef6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <xTaskIncrementTick+0x14c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d203      	bcs.n	8005e98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <xTaskIncrementTick+0x158>)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e96:	e02e      	b.n	8005ef6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fcac 	bl	80057fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	3318      	adds	r3, #24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fca3 	bl	80057fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	2201      	movs	r2, #1
 8005eba:	409a      	lsls	r2, r3
 8005ebc:	4b23      	ldr	r3, [pc, #140]	; (8005f4c <xTaskIncrementTick+0x15c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	4a22      	ldr	r2, [pc, #136]	; (8005f4c <xTaskIncrementTick+0x15c>)
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <xTaskIncrementTick+0x160>)
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	3304      	adds	r3, #4
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7ff fc2f 	bl	8005740 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <xTaskIncrementTick+0x164>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d3b9      	bcc.n	8005e64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ef4:	e7b6      	b.n	8005e64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ef6:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <xTaskIncrementTick+0x164>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4914      	ldr	r1, [pc, #80]	; (8005f50 <xTaskIncrementTick+0x160>)
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d907      	bls.n	8005f1e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	e004      	b.n	8005f1e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005f14:	4b10      	ldr	r3, [pc, #64]	; (8005f58 <xTaskIncrementTick+0x168>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4a0f      	ldr	r2, [pc, #60]	; (8005f58 <xTaskIncrementTick+0x168>)
 8005f1c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <xTaskIncrementTick+0x16c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005f26:	2301      	movs	r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005f2a:	697b      	ldr	r3, [r7, #20]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000418 	.word	0x20000418
 8005f38:	200003f4 	.word	0x200003f4
 8005f3c:	200003a8 	.word	0x200003a8
 8005f40:	200003ac 	.word	0x200003ac
 8005f44:	20000408 	.word	0x20000408
 8005f48:	20000410 	.word	0x20000410
 8005f4c:	200003f8 	.word	0x200003f8
 8005f50:	200002f4 	.word	0x200002f4
 8005f54:	200002f0 	.word	0x200002f0
 8005f58:	20000400 	.word	0x20000400
 8005f5c:	20000404 	.word	0x20000404

08005f60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <vTaskSwitchContext+0xa4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f6e:	4b26      	ldr	r3, [pc, #152]	; (8006008 <vTaskSwitchContext+0xa8>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f74:	e03f      	b.n	8005ff6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <vTaskSwitchContext+0xa8>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7c:	4b23      	ldr	r3, [pc, #140]	; (800600c <vTaskSwitchContext+0xac>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	fab3 f383 	clz	r3, r3
 8005f88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005f8a:	7afb      	ldrb	r3, [r7, #11]
 8005f8c:	f1c3 031f 	rsb	r3, r3, #31
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	491f      	ldr	r1, [pc, #124]	; (8006010 <vTaskSwitchContext+0xb0>)
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <vTaskSwitchContext+0x5c>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	607b      	str	r3, [r7, #4]
}
 8005fb8:	bf00      	nop
 8005fba:	e7fe      	b.n	8005fba <vTaskSwitchContext+0x5a>
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <vTaskSwitchContext+0xb0>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	605a      	str	r2, [r3, #4]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d104      	bne.n	8005fec <vTaskSwitchContext+0x8c>
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	605a      	str	r2, [r3, #4]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	4a08      	ldr	r2, [pc, #32]	; (8006014 <vTaskSwitchContext+0xb4>)
 8005ff4:	6013      	str	r3, [r2, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000418 	.word	0x20000418
 8006008:	20000404 	.word	0x20000404
 800600c:	200003f8 	.word	0x200003f8
 8006010:	200002f4 	.word	0x200002f4
 8006014:	200002f0 	.word	0x200002f0

08006018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006020:	f000 f852 	bl	80060c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <prvIdleTask+0x28>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d9f9      	bls.n	8006020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <prvIdleTask+0x2c>)
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800603c:	e7f0      	b.n	8006020 <prvIdleTask+0x8>
 800603e:	bf00      	nop
 8006040:	200002f4 	.word	0x200002f4
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	e00c      	b.n	800606e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <prvInitialiseTaskLists+0x60>)
 8006060:	4413      	add	r3, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fb3f 	bl	80056e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3301      	adds	r3, #1
 800606c:	607b      	str	r3, [r7, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b06      	cmp	r3, #6
 8006072:	d9ef      	bls.n	8006054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006074:	480d      	ldr	r0, [pc, #52]	; (80060ac <prvInitialiseTaskLists+0x64>)
 8006076:	f7ff fb36 	bl	80056e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800607a:	480d      	ldr	r0, [pc, #52]	; (80060b0 <prvInitialiseTaskLists+0x68>)
 800607c:	f7ff fb33 	bl	80056e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006080:	480c      	ldr	r0, [pc, #48]	; (80060b4 <prvInitialiseTaskLists+0x6c>)
 8006082:	f7ff fb30 	bl	80056e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006086:	480c      	ldr	r0, [pc, #48]	; (80060b8 <prvInitialiseTaskLists+0x70>)
 8006088:	f7ff fb2d 	bl	80056e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800608c:	480b      	ldr	r0, [pc, #44]	; (80060bc <prvInitialiseTaskLists+0x74>)
 800608e:	f7ff fb2a 	bl	80056e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <prvInitialiseTaskLists+0x78>)
 8006094:	4a05      	ldr	r2, [pc, #20]	; (80060ac <prvInitialiseTaskLists+0x64>)
 8006096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <prvInitialiseTaskLists+0x7c>)
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <prvInitialiseTaskLists+0x68>)
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200002f4 	.word	0x200002f4
 80060ac:	20000380 	.word	0x20000380
 80060b0:	20000394 	.word	0x20000394
 80060b4:	200003b0 	.word	0x200003b0
 80060b8:	200003c4 	.word	0x200003c4
 80060bc:	200003dc 	.word	0x200003dc
 80060c0:	200003a8 	.word	0x200003a8
 80060c4:	200003ac 	.word	0x200003ac

080060c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060ce:	e019      	b.n	8006104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060d0:	f000 fa08 	bl	80064e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d4:	4b10      	ldr	r3, [pc, #64]	; (8006118 <prvCheckTasksWaitingTermination+0x50>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fb8a 	bl	80057fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80060e6:	4b0d      	ldr	r3, [pc, #52]	; (800611c <prvCheckTasksWaitingTermination+0x54>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	4a0b      	ldr	r2, [pc, #44]	; (800611c <prvCheckTasksWaitingTermination+0x54>)
 80060ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <prvCheckTasksWaitingTermination+0x58>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <prvCheckTasksWaitingTermination+0x58>)
 80060f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80060fa:	f000 fa23 	bl	8006544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f810 	bl	8006124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <prvCheckTasksWaitingTermination+0x58>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e1      	bne.n	80060d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	200003c4 	.word	0x200003c4
 800611c:	200003f0 	.word	0x200003f0
 8006120:	200003d8 	.word	0x200003d8

08006124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fb78 	bl	8006830 <vPortFree>
				vPortFree( pxTCB );
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fb75 	bl	8006830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006146:	e018      	b.n	800617a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800614e:	2b01      	cmp	r3, #1
 8006150:	d103      	bne.n	800615a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fb6c 	bl	8006830 <vPortFree>
	}
 8006158:	e00f      	b.n	800617a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006160:	2b02      	cmp	r3, #2
 8006162:	d00a      	beq.n	800617a <prvDeleteTCB+0x56>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <prvDeleteTCB+0x54>
	}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvResetNextTaskUnblockTime+0x38>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvResetNextTaskUnblockTime+0x3c>)
 8006196:	f04f 32ff 	mov.w	r2, #4294967295
 800619a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800619c:	e008      	b.n	80061b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <prvResetNextTaskUnblockTime+0x38>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	4a04      	ldr	r2, [pc, #16]	; (80061c0 <prvResetNextTaskUnblockTime+0x3c>)
 80061ae:	6013      	str	r3, [r2, #0]
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	200003a8 	.word	0x200003a8
 80061c0:	20000410 	.word	0x20000410

080061c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061ce:	4b29      	ldr	r3, [pc, #164]	; (8006274 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d4:	4b28      	ldr	r3, [pc, #160]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3304      	adds	r3, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fb0d 	bl	80057fa <uxListRemove>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10b      	bne.n	80061fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061e6:	4b24      	ldr	r3, [pc, #144]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	2201      	movs	r2, #1
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43da      	mvns	r2, r3
 80061f4:	4b21      	ldr	r3, [pc, #132]	; (800627c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4013      	ands	r3, r2
 80061fa:	4a20      	ldr	r2, [pc, #128]	; (800627c <prvAddCurrentTaskToDelayedList+0xb8>)
 80061fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d10a      	bne.n	800621c <prvAddCurrentTaskToDelayedList+0x58>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620c:	4b1a      	ldr	r3, [pc, #104]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3304      	adds	r3, #4
 8006212:	4619      	mov	r1, r3
 8006214:	481a      	ldr	r0, [pc, #104]	; (8006280 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006216:	f7ff fa93 	bl	8005740 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800621a:	e026      	b.n	800626a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4413      	add	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	429a      	cmp	r2, r3
 8006232:	d209      	bcs.n	8006248 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006234:	4b13      	ldr	r3, [pc, #76]	; (8006284 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f7ff faa1 	bl	8005788 <vListInsert>
}
 8006246:	e010      	b.n	800626a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <prvAddCurrentTaskToDelayedList+0xc4>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <prvAddCurrentTaskToDelayedList+0xb4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7ff fa97 	bl	8005788 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800625a:	4b0c      	ldr	r3, [pc, #48]	; (800628c <prvAddCurrentTaskToDelayedList+0xc8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d202      	bcs.n	800626a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006264:	4a09      	ldr	r2, [pc, #36]	; (800628c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6013      	str	r3, [r2, #0]
}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200003f4 	.word	0x200003f4
 8006278:	200002f0 	.word	0x200002f0
 800627c:	200003f8 	.word	0x200003f8
 8006280:	200003dc 	.word	0x200003dc
 8006284:	200003ac 	.word	0x200003ac
 8006288:	200003a8 	.word	0x200003a8
 800628c:	20000410 	.word	0x20000410

08006290 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b04      	subs	r3, #4
 80062a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f023 0201 	bic.w	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b04      	subs	r3, #4
 80062be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062c0:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <pxPortInitialiseStack+0x64>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3b14      	subs	r3, #20
 80062ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f06f 0202 	mvn.w	r2, #2
 80062de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3b20      	subs	r3, #32
 80062e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062e6:	68fb      	ldr	r3, [r7, #12]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	080062f9 	.word	0x080062f9

080062f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <prvTaskExitError+0x54>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d00a      	beq.n	8006322 <prvTaskExitError+0x2a>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <prvTaskExitError+0x28>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	60bb      	str	r3, [r7, #8]
}
 8006334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006336:	bf00      	nop
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0fc      	beq.n	8006338 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	2000000c 	.word	0x2000000c

08006350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <pxCurrentTCBConst2>)
 8006352:	6819      	ldr	r1, [r3, #0]
 8006354:	6808      	ldr	r0, [r1, #0]
 8006356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	f380 8809 	msr	PSP, r0
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f380 8811 	msr	BASEPRI, r0
 800636a:	4770      	bx	lr
 800636c:	f3af 8000 	nop.w

08006370 <pxCurrentTCBConst2>:
 8006370:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop

08006378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006378:	4808      	ldr	r0, [pc, #32]	; (800639c <prvPortStartFirstTask+0x24>)
 800637a:	6800      	ldr	r0, [r0, #0]
 800637c:	6800      	ldr	r0, [r0, #0]
 800637e:	f380 8808 	msr	MSP, r0
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8814 	msr	CONTROL, r0
 800638a:	b662      	cpsie	i
 800638c:	b661      	cpsie	f
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	df00      	svc	0
 8006398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800639a:	bf00      	nop
 800639c:	e000ed08 	.word	0xe000ed08

080063a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063a6:	4b46      	ldr	r3, [pc, #280]	; (80064c0 <xPortStartScheduler+0x120>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a46      	ldr	r2, [pc, #280]	; (80064c4 <xPortStartScheduler+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d10a      	bne.n	80063c6 <xPortStartScheduler+0x26>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	613b      	str	r3, [r7, #16]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <xPortStartScheduler+0x120>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a3f      	ldr	r2, [pc, #252]	; (80064c8 <xPortStartScheduler+0x128>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10a      	bne.n	80063e6 <xPortStartScheduler+0x46>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063e6:	4b39      	ldr	r3, [pc, #228]	; (80064cc <xPortStartScheduler+0x12c>)
 80063e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006408:	b2da      	uxtb	r2, r3
 800640a:	4b31      	ldr	r3, [pc, #196]	; (80064d0 <xPortStartScheduler+0x130>)
 800640c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800640e:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <xPortStartScheduler+0x134>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006414:	e009      	b.n	800642a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <xPortStartScheduler+0x134>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a2d      	ldr	r2, [pc, #180]	; (80064d4 <xPortStartScheduler+0x134>)
 800641e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d0ef      	beq.n	8006416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006436:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <xPortStartScheduler+0x134>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	2b04      	cmp	r3, #4
 8006440:	d00a      	beq.n	8006458 <xPortStartScheduler+0xb8>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006458:	4b1e      	ldr	r3, [pc, #120]	; (80064d4 <xPortStartScheduler+0x134>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	4a1d      	ldr	r2, [pc, #116]	; (80064d4 <xPortStartScheduler+0x134>)
 8006460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006462:	4b1c      	ldr	r3, [pc, #112]	; (80064d4 <xPortStartScheduler+0x134>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800646a:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <xPortStartScheduler+0x134>)
 800646c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <xPortStartScheduler+0x138>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <xPortStartScheduler+0x138>)
 800647c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <xPortStartScheduler+0x138>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <xPortStartScheduler+0x138>)
 8006488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800648c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800648e:	f000 f8dd 	bl	800664c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <xPortStartScheduler+0x13c>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006498:	f000 f8fc 	bl	8006694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <xPortStartScheduler+0x140>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <xPortStartScheduler+0x140>)
 80064a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064a8:	f7ff ff66 	bl	8006378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064ac:	f7ff fd58 	bl	8005f60 <vTaskSwitchContext>
	prvTaskExitError();
 80064b0:	f7ff ff22 	bl	80062f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	e000ed00 	.word	0xe000ed00
 80064c4:	410fc271 	.word	0x410fc271
 80064c8:	410fc270 	.word	0x410fc270
 80064cc:	e000e400 	.word	0xe000e400
 80064d0:	2000041c 	.word	0x2000041c
 80064d4:	20000420 	.word	0x20000420
 80064d8:	e000ed20 	.word	0xe000ed20
 80064dc:	2000000c 	.word	0x2000000c
 80064e0:	e000ef34 	.word	0xe000ef34

080064e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	607b      	str	r3, [r7, #4]
}
 80064fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <vPortEnterCritical+0x58>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a0d      	ldr	r2, [pc, #52]	; (800653c <vPortEnterCritical+0x58>)
 8006506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <vPortEnterCritical+0x58>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d10f      	bne.n	8006530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <vPortEnterCritical+0x5c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <vPortEnterCritical+0x4c>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	603b      	str	r3, [r7, #0]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vPortEnterCritical+0x4a>
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <vPortExitCritical+0x50>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <vPortExitCritical+0x24>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	607b      	str	r3, [r7, #4]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <vPortExitCritical+0x50>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3b01      	subs	r3, #1
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <vPortExitCritical+0x50>)
 8006570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <vPortExitCritical+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d105      	bne.n	8006586 <vPortExitCritical+0x42>
 800657a:	2300      	movs	r3, #0
 800657c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c
	...

080065a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065a0:	f3ef 8009 	mrs	r0, PSP
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <pxCurrentTCBConst>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f01e 0f10 	tst.w	lr, #16
 80065b0:	bf08      	it	eq
 80065b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	6010      	str	r0, [r2, #0]
 80065bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065c4:	f380 8811 	msr	BASEPRI, r0
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f7ff fcc6 	bl	8005f60 <vTaskSwitchContext>
 80065d4:	f04f 0000 	mov.w	r0, #0
 80065d8:	f380 8811 	msr	BASEPRI, r0
 80065dc:	bc09      	pop	{r0, r3}
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	6808      	ldr	r0, [r1, #0]
 80065e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e6:	f01e 0f10 	tst.w	lr, #16
 80065ea:	bf08      	it	eq
 80065ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065f0:	f380 8809 	msr	PSP, r0
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	f3af 8000 	nop.w

08006600 <pxCurrentTCBConst>:
 8006600:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	607b      	str	r3, [r7, #4]
}
 8006620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006622:	f7ff fbe5 	bl	8005df0 <xTaskIncrementTick>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <SysTick_Handler+0x40>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f383 8811 	msr	BASEPRI, r3
}
 800663e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <vPortSetupTimerInterrupt+0x34>)
 8006652:	2200      	movs	r2, #0
 8006654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <vPortSetupTimerInterrupt+0x38>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <vPortSetupTimerInterrupt+0x3c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <vPortSetupTimerInterrupt+0x40>)
 8006662:	fba2 2303 	umull	r2, r3, r2, r3
 8006666:	099b      	lsrs	r3, r3, #6
 8006668:	4a09      	ldr	r2, [pc, #36]	; (8006690 <vPortSetupTimerInterrupt+0x44>)
 800666a:	3b01      	subs	r3, #1
 800666c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800666e:	4b04      	ldr	r3, [pc, #16]	; (8006680 <vPortSetupTimerInterrupt+0x34>)
 8006670:	2207      	movs	r2, #7
 8006672:	601a      	str	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	e000e010 	.word	0xe000e010
 8006684:	e000e018 	.word	0xe000e018
 8006688:	20000000 	.word	0x20000000
 800668c:	10624dd3 	.word	0x10624dd3
 8006690:	e000e014 	.word	0xe000e014

08006694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066a4 <vPortEnableVFP+0x10>
 8006698:	6801      	ldr	r1, [r0, #0]
 800669a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800669e:	6001      	str	r1, [r0, #0]
 80066a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066a2:	bf00      	nop
 80066a4:	e000ed88 	.word	0xe000ed88

080066a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b4:	f7ff faf2 	bl	8005c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066b8:	4b58      	ldr	r3, [pc, #352]	; (800681c <pvPortMalloc+0x174>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066c0:	f000 f910 	bl	80068e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c4:	4b56      	ldr	r3, [pc, #344]	; (8006820 <pvPortMalloc+0x178>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 808e 	bne.w	80067ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066d8:	2208      	movs	r2, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f023 0307 	bic.w	r3, r3, #7
 80066f0:	3308      	adds	r3, #8
 80066f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <pvPortMalloc+0x6c>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	617b      	str	r3, [r7, #20]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d069      	beq.n	80067ee <pvPortMalloc+0x146>
 800671a:	4b42      	ldr	r3, [pc, #264]	; (8006824 <pvPortMalloc+0x17c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d864      	bhi.n	80067ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006724:	4b40      	ldr	r3, [pc, #256]	; (8006828 <pvPortMalloc+0x180>)
 8006726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006728:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <pvPortMalloc+0x180>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672e:	e004      	b.n	800673a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <pvPortMalloc+0xa4>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674c:	4b33      	ldr	r3, [pc, #204]	; (800681c <pvPortMalloc+0x174>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d04b      	beq.n	80067ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2308      	movs	r3, #8
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d91f      	bls.n	80067b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <pvPortMalloc+0xf8>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	613b      	str	r3, [r7, #16]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f000 f8f8 	bl	80069a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <pvPortMalloc+0x17c>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a18      	ldr	r2, [pc, #96]	; (8006824 <pvPortMalloc+0x17c>)
 80067c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067c6:	4b17      	ldr	r3, [pc, #92]	; (8006824 <pvPortMalloc+0x17c>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <pvPortMalloc+0x184>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d2:	4b14      	ldr	r3, [pc, #80]	; (8006824 <pvPortMalloc+0x17c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a15      	ldr	r2, [pc, #84]	; (800682c <pvPortMalloc+0x184>)
 80067d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <pvPortMalloc+0x178>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067ee:	f7ff fa63 	bl	8005cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <pvPortMalloc+0x16a>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <pvPortMalloc+0x168>
	return pvReturn;
 8006812:	69fb      	ldr	r3, [r7, #28]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3728      	adds	r7, #40	; 0x28
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	2000402c 	.word	0x2000402c
 8006820:	20004038 	.word	0x20004038
 8006824:	20004030 	.word	0x20004030
 8006828:	20004024 	.word	0x20004024
 800682c:	20004034 	.word	0x20004034

08006830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d048      	beq.n	80068d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006842:	2308      	movs	r3, #8
 8006844:	425b      	negs	r3, r3
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	4b21      	ldr	r3, [pc, #132]	; (80068dc <vPortFree+0xac>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <vPortFree+0x44>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <vPortFree+0x62>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60bb      	str	r3, [r7, #8]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <vPortFree+0xac>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d019      	beq.n	80068d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d115      	bne.n	80068d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <vPortFree+0xac>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	43db      	mvns	r3, r3
 80068b2:	401a      	ands	r2, r3
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068b8:	f7ff f9f0 	bl	8005c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <vPortFree+0xb0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4413      	add	r3, r2
 80068c6:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <vPortFree+0xb0>)
 80068c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f000 f86c 	bl	80069a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80068d0:	f7ff f9f2 	bl	8005cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068d4:	bf00      	nop
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20004038 	.word	0x20004038
 80068e0:	20004030 	.word	0x20004030

080068e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <prvHeapInit+0xac>)
 80068f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3307      	adds	r3, #7
 8006902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <prvHeapInit+0xac>)
 8006914:	4413      	add	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <prvHeapInit+0xb0>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <prvHeapInit+0xb0>)
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006930:	2208      	movs	r2, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a15      	ldr	r2, [pc, #84]	; (8006998 <prvHeapInit+0xb4>)
 8006944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <prvHeapInit+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800694e:	4b12      	ldr	r3, [pc, #72]	; (8006998 <prvHeapInit+0xb4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	1ad2      	subs	r2, r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006964:	4b0c      	ldr	r3, [pc, #48]	; (8006998 <prvHeapInit+0xb4>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4a0a      	ldr	r2, [pc, #40]	; (800699c <prvHeapInit+0xb8>)
 8006972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <prvHeapInit+0xbc>)
 800697a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <prvHeapInit+0xc0>)
 800697e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000424 	.word	0x20000424
 8006994:	20004024 	.word	0x20004024
 8006998:	2000402c 	.word	0x2000402c
 800699c:	20004034 	.word	0x20004034
 80069a0:	20004030 	.word	0x20004030
 80069a4:	20004038 	.word	0x20004038

080069a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069b0:	4b28      	ldr	r3, [pc, #160]	; (8006a54 <prvInsertBlockIntoFreeList+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e002      	b.n	80069bc <prvInsertBlockIntoFreeList+0x14>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d8f7      	bhi.n	80069b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	441a      	add	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d118      	bne.n	8006a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d00d      	beq.n	8006a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e008      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a26:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e003      	b.n	8006a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d002      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20004024 	.word	0x20004024
 8006a58:	2000402c 	.word	0x2000402c

08006a5c <__errno>:
 8006a5c:	4b01      	ldr	r3, [pc, #4]	; (8006a64 <__errno+0x8>)
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	20000010 	.word	0x20000010

08006a68 <__libc_init_array>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4d0d      	ldr	r5, [pc, #52]	; (8006aa0 <__libc_init_array+0x38>)
 8006a6c:	4c0d      	ldr	r4, [pc, #52]	; (8006aa4 <__libc_init_array+0x3c>)
 8006a6e:	1b64      	subs	r4, r4, r5
 8006a70:	10a4      	asrs	r4, r4, #2
 8006a72:	2600      	movs	r6, #0
 8006a74:	42a6      	cmp	r6, r4
 8006a76:	d109      	bne.n	8006a8c <__libc_init_array+0x24>
 8006a78:	4d0b      	ldr	r5, [pc, #44]	; (8006aa8 <__libc_init_array+0x40>)
 8006a7a:	4c0c      	ldr	r4, [pc, #48]	; (8006aac <__libc_init_array+0x44>)
 8006a7c:	f001 ff42 	bl	8008904 <_init>
 8006a80:	1b64      	subs	r4, r4, r5
 8006a82:	10a4      	asrs	r4, r4, #2
 8006a84:	2600      	movs	r6, #0
 8006a86:	42a6      	cmp	r6, r4
 8006a88:	d105      	bne.n	8006a96 <__libc_init_array+0x2e>
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a90:	4798      	blx	r3
 8006a92:	3601      	adds	r6, #1
 8006a94:	e7ee      	b.n	8006a74 <__libc_init_array+0xc>
 8006a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9a:	4798      	blx	r3
 8006a9c:	3601      	adds	r6, #1
 8006a9e:	e7f2      	b.n	8006a86 <__libc_init_array+0x1e>
 8006aa0:	08008b60 	.word	0x08008b60
 8006aa4:	08008b60 	.word	0x08008b60
 8006aa8:	08008b60 	.word	0x08008b60
 8006aac:	08008b64 	.word	0x08008b64

08006ab0 <malloc>:
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <malloc+0xc>)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f000 b863 	b.w	8006b80 <_malloc_r>
 8006aba:	bf00      	nop
 8006abc:	20000010 	.word	0x20000010

08006ac0 <free>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <free+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f000 b80b 	b.w	8006ae0 <_free_r>
 8006aca:	bf00      	nop
 8006acc:	20000010 	.word	0x20000010

08006ad0 <memset>:
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <_free_r>:
 8006ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae2:	2900      	cmp	r1, #0
 8006ae4:	d048      	beq.n	8006b78 <_free_r+0x98>
 8006ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aea:	9001      	str	r0, [sp, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f1a1 0404 	sub.w	r4, r1, #4
 8006af2:	bfb8      	it	lt
 8006af4:	18e4      	addlt	r4, r4, r3
 8006af6:	f000 f9c5 	bl	8006e84 <__malloc_lock>
 8006afa:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <_free_r+0x9c>)
 8006afc:	9801      	ldr	r0, [sp, #4]
 8006afe:	6813      	ldr	r3, [r2, #0]
 8006b00:	4615      	mov	r5, r2
 8006b02:	b933      	cbnz	r3, 8006b12 <_free_r+0x32>
 8006b04:	6063      	str	r3, [r4, #4]
 8006b06:	6014      	str	r4, [r2, #0]
 8006b08:	b003      	add	sp, #12
 8006b0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b0e:	f000 b9bf 	b.w	8006e90 <__malloc_unlock>
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	d90b      	bls.n	8006b2e <_free_r+0x4e>
 8006b16:	6821      	ldr	r1, [r4, #0]
 8006b18:	1862      	adds	r2, r4, r1
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	bf04      	itt	eq
 8006b1e:	681a      	ldreq	r2, [r3, #0]
 8006b20:	685b      	ldreq	r3, [r3, #4]
 8006b22:	6063      	str	r3, [r4, #4]
 8006b24:	bf04      	itt	eq
 8006b26:	1852      	addeq	r2, r2, r1
 8006b28:	6022      	streq	r2, [r4, #0]
 8006b2a:	602c      	str	r4, [r5, #0]
 8006b2c:	e7ec      	b.n	8006b08 <_free_r+0x28>
 8006b2e:	461a      	mov	r2, r3
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b10b      	cbz	r3, 8006b38 <_free_r+0x58>
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d9fa      	bls.n	8006b2e <_free_r+0x4e>
 8006b38:	6811      	ldr	r1, [r2, #0]
 8006b3a:	1855      	adds	r5, r2, r1
 8006b3c:	42a5      	cmp	r5, r4
 8006b3e:	d10b      	bne.n	8006b58 <_free_r+0x78>
 8006b40:	6824      	ldr	r4, [r4, #0]
 8006b42:	4421      	add	r1, r4
 8006b44:	1854      	adds	r4, r2, r1
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	6011      	str	r1, [r2, #0]
 8006b4a:	d1dd      	bne.n	8006b08 <_free_r+0x28>
 8006b4c:	681c      	ldr	r4, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	6053      	str	r3, [r2, #4]
 8006b52:	4421      	add	r1, r4
 8006b54:	6011      	str	r1, [r2, #0]
 8006b56:	e7d7      	b.n	8006b08 <_free_r+0x28>
 8006b58:	d902      	bls.n	8006b60 <_free_r+0x80>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	6003      	str	r3, [r0, #0]
 8006b5e:	e7d3      	b.n	8006b08 <_free_r+0x28>
 8006b60:	6825      	ldr	r5, [r4, #0]
 8006b62:	1961      	adds	r1, r4, r5
 8006b64:	428b      	cmp	r3, r1
 8006b66:	bf04      	itt	eq
 8006b68:	6819      	ldreq	r1, [r3, #0]
 8006b6a:	685b      	ldreq	r3, [r3, #4]
 8006b6c:	6063      	str	r3, [r4, #4]
 8006b6e:	bf04      	itt	eq
 8006b70:	1949      	addeq	r1, r1, r5
 8006b72:	6021      	streq	r1, [r4, #0]
 8006b74:	6054      	str	r4, [r2, #4]
 8006b76:	e7c7      	b.n	8006b08 <_free_r+0x28>
 8006b78:	b003      	add	sp, #12
 8006b7a:	bd30      	pop	{r4, r5, pc}
 8006b7c:	2000403c 	.word	0x2000403c

08006b80 <_malloc_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	1ccd      	adds	r5, r1, #3
 8006b84:	f025 0503 	bic.w	r5, r5, #3
 8006b88:	3508      	adds	r5, #8
 8006b8a:	2d0c      	cmp	r5, #12
 8006b8c:	bf38      	it	cc
 8006b8e:	250c      	movcc	r5, #12
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	4606      	mov	r6, r0
 8006b94:	db01      	blt.n	8006b9a <_malloc_r+0x1a>
 8006b96:	42a9      	cmp	r1, r5
 8006b98:	d903      	bls.n	8006ba2 <_malloc_r+0x22>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	6033      	str	r3, [r6, #0]
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba2:	f000 f96f 	bl	8006e84 <__malloc_lock>
 8006ba6:	4921      	ldr	r1, [pc, #132]	; (8006c2c <_malloc_r+0xac>)
 8006ba8:	680a      	ldr	r2, [r1, #0]
 8006baa:	4614      	mov	r4, r2
 8006bac:	b99c      	cbnz	r4, 8006bd6 <_malloc_r+0x56>
 8006bae:	4f20      	ldr	r7, [pc, #128]	; (8006c30 <_malloc_r+0xb0>)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	b923      	cbnz	r3, 8006bbe <_malloc_r+0x3e>
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f854 	bl	8006c64 <_sbrk_r>
 8006bbc:	6038      	str	r0, [r7, #0]
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f84f 	bl	8006c64 <_sbrk_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d123      	bne.n	8006c12 <_malloc_r+0x92>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f000 f95e 	bl	8006e90 <__malloc_unlock>
 8006bd4:	e7e3      	b.n	8006b9e <_malloc_r+0x1e>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	1b5b      	subs	r3, r3, r5
 8006bda:	d417      	bmi.n	8006c0c <_malloc_r+0x8c>
 8006bdc:	2b0b      	cmp	r3, #11
 8006bde:	d903      	bls.n	8006be8 <_malloc_r+0x68>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	441c      	add	r4, r3
 8006be4:	6025      	str	r5, [r4, #0]
 8006be6:	e004      	b.n	8006bf2 <_malloc_r+0x72>
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	42a2      	cmp	r2, r4
 8006bec:	bf0c      	ite	eq
 8006bee:	600b      	streq	r3, [r1, #0]
 8006bf0:	6053      	strne	r3, [r2, #4]
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f000 f94c 	bl	8006e90 <__malloc_unlock>
 8006bf8:	f104 000b 	add.w	r0, r4, #11
 8006bfc:	1d23      	adds	r3, r4, #4
 8006bfe:	f020 0007 	bic.w	r0, r0, #7
 8006c02:	1ac2      	subs	r2, r0, r3
 8006c04:	d0cc      	beq.n	8006ba0 <_malloc_r+0x20>
 8006c06:	1a1b      	subs	r3, r3, r0
 8006c08:	50a3      	str	r3, [r4, r2]
 8006c0a:	e7c9      	b.n	8006ba0 <_malloc_r+0x20>
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	6864      	ldr	r4, [r4, #4]
 8006c10:	e7cc      	b.n	8006bac <_malloc_r+0x2c>
 8006c12:	1cc4      	adds	r4, r0, #3
 8006c14:	f024 0403 	bic.w	r4, r4, #3
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d0e3      	beq.n	8006be4 <_malloc_r+0x64>
 8006c1c:	1a21      	subs	r1, r4, r0
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 f820 	bl	8006c64 <_sbrk_r>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d1dd      	bne.n	8006be4 <_malloc_r+0x64>
 8006c28:	e7cf      	b.n	8006bca <_malloc_r+0x4a>
 8006c2a:	bf00      	nop
 8006c2c:	2000403c 	.word	0x2000403c
 8006c30:	20004040 	.word	0x20004040

08006c34 <iprintf>:
 8006c34:	b40f      	push	{r0, r1, r2, r3}
 8006c36:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <iprintf+0x2c>)
 8006c38:	b513      	push	{r0, r1, r4, lr}
 8006c3a:	681c      	ldr	r4, [r3, #0]
 8006c3c:	b124      	cbz	r4, 8006c48 <iprintf+0x14>
 8006c3e:	69a3      	ldr	r3, [r4, #24]
 8006c40:	b913      	cbnz	r3, 8006c48 <iprintf+0x14>
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 f87e 	bl	8006d44 <__sinit>
 8006c48:	ab05      	add	r3, sp, #20
 8006c4a:	9a04      	ldr	r2, [sp, #16]
 8006c4c:	68a1      	ldr	r1, [r4, #8]
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f94d 	bl	8006ef0 <_vfiprintf_r>
 8006c56:	b002      	add	sp, #8
 8006c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5c:	b004      	add	sp, #16
 8006c5e:	4770      	bx	lr
 8006c60:	20000010 	.word	0x20000010

08006c64 <_sbrk_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d06      	ldr	r5, [pc, #24]	; (8006c80 <_sbrk_r+0x1c>)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	f7fb f8bc 	bl	8001dec <_sbrk>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_sbrk_r+0x1a>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_sbrk_r+0x1a>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	2000435c 	.word	0x2000435c

08006c84 <strcpy>:
 8006c84:	4603      	mov	r3, r0
 8006c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c8a:	f803 2b01 	strb.w	r2, [r3], #1
 8006c8e:	2a00      	cmp	r2, #0
 8006c90:	d1f9      	bne.n	8006c86 <strcpy+0x2>
 8006c92:	4770      	bx	lr

08006c94 <std>:
 8006c94:	2300      	movs	r3, #0
 8006c96:	b510      	push	{r4, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ca2:	6083      	str	r3, [r0, #8]
 8006ca4:	8181      	strh	r1, [r0, #12]
 8006ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ca8:	81c2      	strh	r2, [r0, #14]
 8006caa:	6183      	str	r3, [r0, #24]
 8006cac:	4619      	mov	r1, r3
 8006cae:	2208      	movs	r2, #8
 8006cb0:	305c      	adds	r0, #92	; 0x5c
 8006cb2:	f7ff ff0d 	bl	8006ad0 <memset>
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <std+0x38>)
 8006cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <std+0x3c>)
 8006cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <std+0x40>)
 8006cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <std+0x44>)
 8006cc4:	6224      	str	r4, [r4, #32]
 8006cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8006cc8:	bd10      	pop	{r4, pc}
 8006cca:	bf00      	nop
 8006ccc:	08007479 	.word	0x08007479
 8006cd0:	0800749b 	.word	0x0800749b
 8006cd4:	080074d3 	.word	0x080074d3
 8006cd8:	080074f7 	.word	0x080074f7

08006cdc <_cleanup_r>:
 8006cdc:	4901      	ldr	r1, [pc, #4]	; (8006ce4 <_cleanup_r+0x8>)
 8006cde:	f000 b8af 	b.w	8006e40 <_fwalk_reent>
 8006ce2:	bf00      	nop
 8006ce4:	080077d1 	.word	0x080077d1

08006ce8 <__sfmoreglue>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	1e4a      	subs	r2, r1, #1
 8006cec:	2568      	movs	r5, #104	; 0x68
 8006cee:	4355      	muls	r5, r2
 8006cf0:	460e      	mov	r6, r1
 8006cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cf6:	f7ff ff43 	bl	8006b80 <_malloc_r>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	b140      	cbz	r0, 8006d10 <__sfmoreglue+0x28>
 8006cfe:	2100      	movs	r1, #0
 8006d00:	e9c0 1600 	strd	r1, r6, [r0]
 8006d04:	300c      	adds	r0, #12
 8006d06:	60a0      	str	r0, [r4, #8]
 8006d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d0c:	f7ff fee0 	bl	8006ad0 <memset>
 8006d10:	4620      	mov	r0, r4
 8006d12:	bd70      	pop	{r4, r5, r6, pc}

08006d14 <__sfp_lock_acquire>:
 8006d14:	4801      	ldr	r0, [pc, #4]	; (8006d1c <__sfp_lock_acquire+0x8>)
 8006d16:	f000 b8b3 	b.w	8006e80 <__retarget_lock_acquire_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20004358 	.word	0x20004358

08006d20 <__sfp_lock_release>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__sfp_lock_release+0x8>)
 8006d22:	f000 b8ae 	b.w	8006e82 <__retarget_lock_release_recursive>
 8006d26:	bf00      	nop
 8006d28:	20004358 	.word	0x20004358

08006d2c <__sinit_lock_acquire>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__sinit_lock_acquire+0x8>)
 8006d2e:	f000 b8a7 	b.w	8006e80 <__retarget_lock_acquire_recursive>
 8006d32:	bf00      	nop
 8006d34:	20004353 	.word	0x20004353

08006d38 <__sinit_lock_release>:
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <__sinit_lock_release+0x8>)
 8006d3a:	f000 b8a2 	b.w	8006e82 <__retarget_lock_release_recursive>
 8006d3e:	bf00      	nop
 8006d40:	20004353 	.word	0x20004353

08006d44 <__sinit>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	4604      	mov	r4, r0
 8006d48:	f7ff fff0 	bl	8006d2c <__sinit_lock_acquire>
 8006d4c:	69a3      	ldr	r3, [r4, #24]
 8006d4e:	b11b      	cbz	r3, 8006d58 <__sinit+0x14>
 8006d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d54:	f7ff bff0 	b.w	8006d38 <__sinit_lock_release>
 8006d58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <__sinit+0x68>)
 8006d60:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <__sinit+0x6c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	bf04      	itt	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	61a3      	streq	r3, [r4, #24]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 f820 	bl	8006db4 <__sfp>
 8006d74:	6060      	str	r0, [r4, #4]
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f81c 	bl	8006db4 <__sfp>
 8006d7c:	60a0      	str	r0, [r4, #8]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 f818 	bl	8006db4 <__sfp>
 8006d84:	2200      	movs	r2, #0
 8006d86:	60e0      	str	r0, [r4, #12]
 8006d88:	2104      	movs	r1, #4
 8006d8a:	6860      	ldr	r0, [r4, #4]
 8006d8c:	f7ff ff82 	bl	8006c94 <std>
 8006d90:	68a0      	ldr	r0, [r4, #8]
 8006d92:	2201      	movs	r2, #1
 8006d94:	2109      	movs	r1, #9
 8006d96:	f7ff ff7d 	bl	8006c94 <std>
 8006d9a:	68e0      	ldr	r0, [r4, #12]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	2112      	movs	r1, #18
 8006da0:	f7ff ff78 	bl	8006c94 <std>
 8006da4:	2301      	movs	r3, #1
 8006da6:	61a3      	str	r3, [r4, #24]
 8006da8:	e7d2      	b.n	8006d50 <__sinit+0xc>
 8006daa:	bf00      	nop
 8006dac:	08008a80 	.word	0x08008a80
 8006db0:	08006cdd 	.word	0x08006cdd

08006db4 <__sfp>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	4607      	mov	r7, r0
 8006db8:	f7ff ffac 	bl	8006d14 <__sfp_lock_acquire>
 8006dbc:	4b1e      	ldr	r3, [pc, #120]	; (8006e38 <__sfp+0x84>)
 8006dbe:	681e      	ldr	r6, [r3, #0]
 8006dc0:	69b3      	ldr	r3, [r6, #24]
 8006dc2:	b913      	cbnz	r3, 8006dca <__sfp+0x16>
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff ffbd 	bl	8006d44 <__sinit>
 8006dca:	3648      	adds	r6, #72	; 0x48
 8006dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	d503      	bpl.n	8006ddc <__sfp+0x28>
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	b30b      	cbz	r3, 8006e1c <__sfp+0x68>
 8006dd8:	6836      	ldr	r6, [r6, #0]
 8006dda:	e7f7      	b.n	8006dcc <__sfp+0x18>
 8006ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006de0:	b9d5      	cbnz	r5, 8006e18 <__sfp+0x64>
 8006de2:	4b16      	ldr	r3, [pc, #88]	; (8006e3c <__sfp+0x88>)
 8006de4:	60e3      	str	r3, [r4, #12]
 8006de6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dea:	6665      	str	r5, [r4, #100]	; 0x64
 8006dec:	f000 f847 	bl	8006e7e <__retarget_lock_init_recursive>
 8006df0:	f7ff ff96 	bl	8006d20 <__sfp_lock_release>
 8006df4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006df8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dfc:	6025      	str	r5, [r4, #0]
 8006dfe:	61a5      	str	r5, [r4, #24]
 8006e00:	2208      	movs	r2, #8
 8006e02:	4629      	mov	r1, r5
 8006e04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e08:	f7ff fe62 	bl	8006ad0 <memset>
 8006e0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e14:	4620      	mov	r0, r4
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e18:	3468      	adds	r4, #104	; 0x68
 8006e1a:	e7d9      	b.n	8006dd0 <__sfp+0x1c>
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7ff ff62 	bl	8006ce8 <__sfmoreglue>
 8006e24:	4604      	mov	r4, r0
 8006e26:	6030      	str	r0, [r6, #0]
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d1d5      	bne.n	8006dd8 <__sfp+0x24>
 8006e2c:	f7ff ff78 	bl	8006d20 <__sfp_lock_release>
 8006e30:	230c      	movs	r3, #12
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	e7ee      	b.n	8006e14 <__sfp+0x60>
 8006e36:	bf00      	nop
 8006e38:	08008a80 	.word	0x08008a80
 8006e3c:	ffff0001 	.word	0xffff0001

08006e40 <_fwalk_reent>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	4606      	mov	r6, r0
 8006e46:	4688      	mov	r8, r1
 8006e48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e4c:	2700      	movs	r7, #0
 8006e4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e52:	f1b9 0901 	subs.w	r9, r9, #1
 8006e56:	d505      	bpl.n	8006e64 <_fwalk_reent+0x24>
 8006e58:	6824      	ldr	r4, [r4, #0]
 8006e5a:	2c00      	cmp	r4, #0
 8006e5c:	d1f7      	bne.n	8006e4e <_fwalk_reent+0xe>
 8006e5e:	4638      	mov	r0, r7
 8006e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e64:	89ab      	ldrh	r3, [r5, #12]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d907      	bls.n	8006e7a <_fwalk_reent+0x3a>
 8006e6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	d003      	beq.n	8006e7a <_fwalk_reent+0x3a>
 8006e72:	4629      	mov	r1, r5
 8006e74:	4630      	mov	r0, r6
 8006e76:	47c0      	blx	r8
 8006e78:	4307      	orrs	r7, r0
 8006e7a:	3568      	adds	r5, #104	; 0x68
 8006e7c:	e7e9      	b.n	8006e52 <_fwalk_reent+0x12>

08006e7e <__retarget_lock_init_recursive>:
 8006e7e:	4770      	bx	lr

08006e80 <__retarget_lock_acquire_recursive>:
 8006e80:	4770      	bx	lr

08006e82 <__retarget_lock_release_recursive>:
 8006e82:	4770      	bx	lr

08006e84 <__malloc_lock>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__malloc_lock+0x8>)
 8006e86:	f7ff bffb 	b.w	8006e80 <__retarget_lock_acquire_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	20004354 	.word	0x20004354

08006e90 <__malloc_unlock>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__malloc_unlock+0x8>)
 8006e92:	f7ff bff6 	b.w	8006e82 <__retarget_lock_release_recursive>
 8006e96:	bf00      	nop
 8006e98:	20004354 	.word	0x20004354

08006e9c <__sfputc_r>:
 8006e9c:	6893      	ldr	r3, [r2, #8]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	b410      	push	{r4}
 8006ea4:	6093      	str	r3, [r2, #8]
 8006ea6:	da08      	bge.n	8006eba <__sfputc_r+0x1e>
 8006ea8:	6994      	ldr	r4, [r2, #24]
 8006eaa:	42a3      	cmp	r3, r4
 8006eac:	db01      	blt.n	8006eb2 <__sfputc_r+0x16>
 8006eae:	290a      	cmp	r1, #10
 8006eb0:	d103      	bne.n	8006eba <__sfputc_r+0x1e>
 8006eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eb6:	f000 bb23 	b.w	8007500 <__swbuf_r>
 8006eba:	6813      	ldr	r3, [r2, #0]
 8006ebc:	1c58      	adds	r0, r3, #1
 8006ebe:	6010      	str	r0, [r2, #0]
 8006ec0:	7019      	strb	r1, [r3, #0]
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <__sfputs_r>:
 8006eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ecc:	4606      	mov	r6, r0
 8006ece:	460f      	mov	r7, r1
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	18d5      	adds	r5, r2, r3
 8006ed4:	42ac      	cmp	r4, r5
 8006ed6:	d101      	bne.n	8006edc <__sfputs_r+0x12>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e007      	b.n	8006eec <__sfputs_r+0x22>
 8006edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee0:	463a      	mov	r2, r7
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ffda 	bl	8006e9c <__sfputc_r>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d1f3      	bne.n	8006ed4 <__sfputs_r+0xa>
 8006eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ef0 <_vfiprintf_r>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	460d      	mov	r5, r1
 8006ef6:	b09d      	sub	sp, #116	; 0x74
 8006ef8:	4614      	mov	r4, r2
 8006efa:	4698      	mov	r8, r3
 8006efc:	4606      	mov	r6, r0
 8006efe:	b118      	cbz	r0, 8006f08 <_vfiprintf_r+0x18>
 8006f00:	6983      	ldr	r3, [r0, #24]
 8006f02:	b90b      	cbnz	r3, 8006f08 <_vfiprintf_r+0x18>
 8006f04:	f7ff ff1e 	bl	8006d44 <__sinit>
 8006f08:	4b89      	ldr	r3, [pc, #548]	; (8007130 <_vfiprintf_r+0x240>)
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	d11b      	bne.n	8006f46 <_vfiprintf_r+0x56>
 8006f0e:	6875      	ldr	r5, [r6, #4]
 8006f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f12:	07d9      	lsls	r1, r3, #31
 8006f14:	d405      	bmi.n	8006f22 <_vfiprintf_r+0x32>
 8006f16:	89ab      	ldrh	r3, [r5, #12]
 8006f18:	059a      	lsls	r2, r3, #22
 8006f1a:	d402      	bmi.n	8006f22 <_vfiprintf_r+0x32>
 8006f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f1e:	f7ff ffaf 	bl	8006e80 <__retarget_lock_acquire_recursive>
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	071b      	lsls	r3, r3, #28
 8006f26:	d501      	bpl.n	8006f2c <_vfiprintf_r+0x3c>
 8006f28:	692b      	ldr	r3, [r5, #16]
 8006f2a:	b9eb      	cbnz	r3, 8006f68 <_vfiprintf_r+0x78>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 fb4a 	bl	80075c8 <__swsetup_r>
 8006f34:	b1c0      	cbz	r0, 8006f68 <_vfiprintf_r+0x78>
 8006f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f38:	07dc      	lsls	r4, r3, #31
 8006f3a:	d50e      	bpl.n	8006f5a <_vfiprintf_r+0x6a>
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f40:	b01d      	add	sp, #116	; 0x74
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	4b7b      	ldr	r3, [pc, #492]	; (8007134 <_vfiprintf_r+0x244>)
 8006f48:	429d      	cmp	r5, r3
 8006f4a:	d101      	bne.n	8006f50 <_vfiprintf_r+0x60>
 8006f4c:	68b5      	ldr	r5, [r6, #8]
 8006f4e:	e7df      	b.n	8006f10 <_vfiprintf_r+0x20>
 8006f50:	4b79      	ldr	r3, [pc, #484]	; (8007138 <_vfiprintf_r+0x248>)
 8006f52:	429d      	cmp	r5, r3
 8006f54:	bf08      	it	eq
 8006f56:	68f5      	ldreq	r5, [r6, #12]
 8006f58:	e7da      	b.n	8006f10 <_vfiprintf_r+0x20>
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	0598      	lsls	r0, r3, #22
 8006f5e:	d4ed      	bmi.n	8006f3c <_vfiprintf_r+0x4c>
 8006f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f62:	f7ff ff8e 	bl	8006e82 <__retarget_lock_release_recursive>
 8006f66:	e7e9      	b.n	8006f3c <_vfiprintf_r+0x4c>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6c:	2320      	movs	r3, #32
 8006f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f76:	2330      	movs	r3, #48	; 0x30
 8006f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800713c <_vfiprintf_r+0x24c>
 8006f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f80:	f04f 0901 	mov.w	r9, #1
 8006f84:	4623      	mov	r3, r4
 8006f86:	469a      	mov	sl, r3
 8006f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f8c:	b10a      	cbz	r2, 8006f92 <_vfiprintf_r+0xa2>
 8006f8e:	2a25      	cmp	r2, #37	; 0x25
 8006f90:	d1f9      	bne.n	8006f86 <_vfiprintf_r+0x96>
 8006f92:	ebba 0b04 	subs.w	fp, sl, r4
 8006f96:	d00b      	beq.n	8006fb0 <_vfiprintf_r+0xc0>
 8006f98:	465b      	mov	r3, fp
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff ff93 	bl	8006eca <__sfputs_r>
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	f000 80aa 	beq.w	80070fe <_vfiprintf_r+0x20e>
 8006faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fac:	445a      	add	r2, fp
 8006fae:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80a2 	beq.w	80070fe <_vfiprintf_r+0x20e>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fc4:	f10a 0a01 	add.w	sl, sl, #1
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	9307      	str	r3, [sp, #28]
 8006fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fd2:	4654      	mov	r4, sl
 8006fd4:	2205      	movs	r2, #5
 8006fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fda:	4858      	ldr	r0, [pc, #352]	; (800713c <_vfiprintf_r+0x24c>)
 8006fdc:	f7f9 f910 	bl	8000200 <memchr>
 8006fe0:	9a04      	ldr	r2, [sp, #16]
 8006fe2:	b9d8      	cbnz	r0, 800701c <_vfiprintf_r+0x12c>
 8006fe4:	06d1      	lsls	r1, r2, #27
 8006fe6:	bf44      	itt	mi
 8006fe8:	2320      	movmi	r3, #32
 8006fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fee:	0713      	lsls	r3, r2, #28
 8006ff0:	bf44      	itt	mi
 8006ff2:	232b      	movmi	r3, #43	; 0x2b
 8006ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ffe:	d015      	beq.n	800702c <_vfiprintf_r+0x13c>
 8007000:	9a07      	ldr	r2, [sp, #28]
 8007002:	4654      	mov	r4, sl
 8007004:	2000      	movs	r0, #0
 8007006:	f04f 0c0a 	mov.w	ip, #10
 800700a:	4621      	mov	r1, r4
 800700c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007010:	3b30      	subs	r3, #48	; 0x30
 8007012:	2b09      	cmp	r3, #9
 8007014:	d94e      	bls.n	80070b4 <_vfiprintf_r+0x1c4>
 8007016:	b1b0      	cbz	r0, 8007046 <_vfiprintf_r+0x156>
 8007018:	9207      	str	r2, [sp, #28]
 800701a:	e014      	b.n	8007046 <_vfiprintf_r+0x156>
 800701c:	eba0 0308 	sub.w	r3, r0, r8
 8007020:	fa09 f303 	lsl.w	r3, r9, r3
 8007024:	4313      	orrs	r3, r2
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	46a2      	mov	sl, r4
 800702a:	e7d2      	b.n	8006fd2 <_vfiprintf_r+0xe2>
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	1d19      	adds	r1, r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	9103      	str	r1, [sp, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	bfbb      	ittet	lt
 8007038:	425b      	neglt	r3, r3
 800703a:	f042 0202 	orrlt.w	r2, r2, #2
 800703e:	9307      	strge	r3, [sp, #28]
 8007040:	9307      	strlt	r3, [sp, #28]
 8007042:	bfb8      	it	lt
 8007044:	9204      	strlt	r2, [sp, #16]
 8007046:	7823      	ldrb	r3, [r4, #0]
 8007048:	2b2e      	cmp	r3, #46	; 0x2e
 800704a:	d10c      	bne.n	8007066 <_vfiprintf_r+0x176>
 800704c:	7863      	ldrb	r3, [r4, #1]
 800704e:	2b2a      	cmp	r3, #42	; 0x2a
 8007050:	d135      	bne.n	80070be <_vfiprintf_r+0x1ce>
 8007052:	9b03      	ldr	r3, [sp, #12]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	9203      	str	r2, [sp, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	bfb8      	it	lt
 800705e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007062:	3402      	adds	r4, #2
 8007064:	9305      	str	r3, [sp, #20]
 8007066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800714c <_vfiprintf_r+0x25c>
 800706a:	7821      	ldrb	r1, [r4, #0]
 800706c:	2203      	movs	r2, #3
 800706e:	4650      	mov	r0, sl
 8007070:	f7f9 f8c6 	bl	8000200 <memchr>
 8007074:	b140      	cbz	r0, 8007088 <_vfiprintf_r+0x198>
 8007076:	2340      	movs	r3, #64	; 0x40
 8007078:	eba0 000a 	sub.w	r0, r0, sl
 800707c:	fa03 f000 	lsl.w	r0, r3, r0
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	4303      	orrs	r3, r0
 8007084:	3401      	adds	r4, #1
 8007086:	9304      	str	r3, [sp, #16]
 8007088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708c:	482c      	ldr	r0, [pc, #176]	; (8007140 <_vfiprintf_r+0x250>)
 800708e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007092:	2206      	movs	r2, #6
 8007094:	f7f9 f8b4 	bl	8000200 <memchr>
 8007098:	2800      	cmp	r0, #0
 800709a:	d03f      	beq.n	800711c <_vfiprintf_r+0x22c>
 800709c:	4b29      	ldr	r3, [pc, #164]	; (8007144 <_vfiprintf_r+0x254>)
 800709e:	bb1b      	cbnz	r3, 80070e8 <_vfiprintf_r+0x1f8>
 80070a0:	9b03      	ldr	r3, [sp, #12]
 80070a2:	3307      	adds	r3, #7
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	3308      	adds	r3, #8
 80070aa:	9303      	str	r3, [sp, #12]
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ae:	443b      	add	r3, r7
 80070b0:	9309      	str	r3, [sp, #36]	; 0x24
 80070b2:	e767      	b.n	8006f84 <_vfiprintf_r+0x94>
 80070b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80070b8:	460c      	mov	r4, r1
 80070ba:	2001      	movs	r0, #1
 80070bc:	e7a5      	b.n	800700a <_vfiprintf_r+0x11a>
 80070be:	2300      	movs	r3, #0
 80070c0:	3401      	adds	r4, #1
 80070c2:	9305      	str	r3, [sp, #20]
 80070c4:	4619      	mov	r1, r3
 80070c6:	f04f 0c0a 	mov.w	ip, #10
 80070ca:	4620      	mov	r0, r4
 80070cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d0:	3a30      	subs	r2, #48	; 0x30
 80070d2:	2a09      	cmp	r2, #9
 80070d4:	d903      	bls.n	80070de <_vfiprintf_r+0x1ee>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0c5      	beq.n	8007066 <_vfiprintf_r+0x176>
 80070da:	9105      	str	r1, [sp, #20]
 80070dc:	e7c3      	b.n	8007066 <_vfiprintf_r+0x176>
 80070de:	fb0c 2101 	mla	r1, ip, r1, r2
 80070e2:	4604      	mov	r4, r0
 80070e4:	2301      	movs	r3, #1
 80070e6:	e7f0      	b.n	80070ca <_vfiprintf_r+0x1da>
 80070e8:	ab03      	add	r3, sp, #12
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	462a      	mov	r2, r5
 80070ee:	4b16      	ldr	r3, [pc, #88]	; (8007148 <_vfiprintf_r+0x258>)
 80070f0:	a904      	add	r1, sp, #16
 80070f2:	4630      	mov	r0, r6
 80070f4:	f3af 8000 	nop.w
 80070f8:	4607      	mov	r7, r0
 80070fa:	1c78      	adds	r0, r7, #1
 80070fc:	d1d6      	bne.n	80070ac <_vfiprintf_r+0x1bc>
 80070fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007100:	07d9      	lsls	r1, r3, #31
 8007102:	d405      	bmi.n	8007110 <_vfiprintf_r+0x220>
 8007104:	89ab      	ldrh	r3, [r5, #12]
 8007106:	059a      	lsls	r2, r3, #22
 8007108:	d402      	bmi.n	8007110 <_vfiprintf_r+0x220>
 800710a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800710c:	f7ff feb9 	bl	8006e82 <__retarget_lock_release_recursive>
 8007110:	89ab      	ldrh	r3, [r5, #12]
 8007112:	065b      	lsls	r3, r3, #25
 8007114:	f53f af12 	bmi.w	8006f3c <_vfiprintf_r+0x4c>
 8007118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800711a:	e711      	b.n	8006f40 <_vfiprintf_r+0x50>
 800711c:	ab03      	add	r3, sp, #12
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	462a      	mov	r2, r5
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <_vfiprintf_r+0x258>)
 8007124:	a904      	add	r1, sp, #16
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f880 	bl	800722c <_printf_i>
 800712c:	e7e4      	b.n	80070f8 <_vfiprintf_r+0x208>
 800712e:	bf00      	nop
 8007130:	08008aa4 	.word	0x08008aa4
 8007134:	08008ac4 	.word	0x08008ac4
 8007138:	08008a84 	.word	0x08008a84
 800713c:	08008ae4 	.word	0x08008ae4
 8007140:	08008aee 	.word	0x08008aee
 8007144:	00000000 	.word	0x00000000
 8007148:	08006ecb 	.word	0x08006ecb
 800714c:	08008aea 	.word	0x08008aea

08007150 <_printf_common>:
 8007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	4616      	mov	r6, r2
 8007156:	4699      	mov	r9, r3
 8007158:	688a      	ldr	r2, [r1, #8]
 800715a:	690b      	ldr	r3, [r1, #16]
 800715c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007160:	4293      	cmp	r3, r2
 8007162:	bfb8      	it	lt
 8007164:	4613      	movlt	r3, r2
 8007166:	6033      	str	r3, [r6, #0]
 8007168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800716c:	4607      	mov	r7, r0
 800716e:	460c      	mov	r4, r1
 8007170:	b10a      	cbz	r2, 8007176 <_printf_common+0x26>
 8007172:	3301      	adds	r3, #1
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	0699      	lsls	r1, r3, #26
 800717a:	bf42      	ittt	mi
 800717c:	6833      	ldrmi	r3, [r6, #0]
 800717e:	3302      	addmi	r3, #2
 8007180:	6033      	strmi	r3, [r6, #0]
 8007182:	6825      	ldr	r5, [r4, #0]
 8007184:	f015 0506 	ands.w	r5, r5, #6
 8007188:	d106      	bne.n	8007198 <_printf_common+0x48>
 800718a:	f104 0a19 	add.w	sl, r4, #25
 800718e:	68e3      	ldr	r3, [r4, #12]
 8007190:	6832      	ldr	r2, [r6, #0]
 8007192:	1a9b      	subs	r3, r3, r2
 8007194:	42ab      	cmp	r3, r5
 8007196:	dc26      	bgt.n	80071e6 <_printf_common+0x96>
 8007198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800719c:	1e13      	subs	r3, r2, #0
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	bf18      	it	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	0692      	lsls	r2, r2, #26
 80071a6:	d42b      	bmi.n	8007200 <_printf_common+0xb0>
 80071a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071ac:	4649      	mov	r1, r9
 80071ae:	4638      	mov	r0, r7
 80071b0:	47c0      	blx	r8
 80071b2:	3001      	adds	r0, #1
 80071b4:	d01e      	beq.n	80071f4 <_printf_common+0xa4>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	68e5      	ldr	r5, [r4, #12]
 80071ba:	6832      	ldr	r2, [r6, #0]
 80071bc:	f003 0306 	and.w	r3, r3, #6
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	bf08      	it	eq
 80071c4:	1aad      	subeq	r5, r5, r2
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	bf0c      	ite	eq
 80071cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d0:	2500      	movne	r5, #0
 80071d2:	4293      	cmp	r3, r2
 80071d4:	bfc4      	itt	gt
 80071d6:	1a9b      	subgt	r3, r3, r2
 80071d8:	18ed      	addgt	r5, r5, r3
 80071da:	2600      	movs	r6, #0
 80071dc:	341a      	adds	r4, #26
 80071de:	42b5      	cmp	r5, r6
 80071e0:	d11a      	bne.n	8007218 <_printf_common+0xc8>
 80071e2:	2000      	movs	r0, #0
 80071e4:	e008      	b.n	80071f8 <_printf_common+0xa8>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4652      	mov	r2, sl
 80071ea:	4649      	mov	r1, r9
 80071ec:	4638      	mov	r0, r7
 80071ee:	47c0      	blx	r8
 80071f0:	3001      	adds	r0, #1
 80071f2:	d103      	bne.n	80071fc <_printf_common+0xac>
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fc:	3501      	adds	r5, #1
 80071fe:	e7c6      	b.n	800718e <_printf_common+0x3e>
 8007200:	18e1      	adds	r1, r4, r3
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	2030      	movs	r0, #48	; 0x30
 8007206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800720a:	4422      	add	r2, r4
 800720c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007214:	3302      	adds	r3, #2
 8007216:	e7c7      	b.n	80071a8 <_printf_common+0x58>
 8007218:	2301      	movs	r3, #1
 800721a:	4622      	mov	r2, r4
 800721c:	4649      	mov	r1, r9
 800721e:	4638      	mov	r0, r7
 8007220:	47c0      	blx	r8
 8007222:	3001      	adds	r0, #1
 8007224:	d0e6      	beq.n	80071f4 <_printf_common+0xa4>
 8007226:	3601      	adds	r6, #1
 8007228:	e7d9      	b.n	80071de <_printf_common+0x8e>
	...

0800722c <_printf_i>:
 800722c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	460c      	mov	r4, r1
 8007232:	4691      	mov	r9, r2
 8007234:	7e27      	ldrb	r7, [r4, #24]
 8007236:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007238:	2f78      	cmp	r7, #120	; 0x78
 800723a:	4680      	mov	r8, r0
 800723c:	469a      	mov	sl, r3
 800723e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007242:	d807      	bhi.n	8007254 <_printf_i+0x28>
 8007244:	2f62      	cmp	r7, #98	; 0x62
 8007246:	d80a      	bhi.n	800725e <_printf_i+0x32>
 8007248:	2f00      	cmp	r7, #0
 800724a:	f000 80d8 	beq.w	80073fe <_printf_i+0x1d2>
 800724e:	2f58      	cmp	r7, #88	; 0x58
 8007250:	f000 80a3 	beq.w	800739a <_printf_i+0x16e>
 8007254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800725c:	e03a      	b.n	80072d4 <_printf_i+0xa8>
 800725e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007262:	2b15      	cmp	r3, #21
 8007264:	d8f6      	bhi.n	8007254 <_printf_i+0x28>
 8007266:	a001      	add	r0, pc, #4	; (adr r0, 800726c <_printf_i+0x40>)
 8007268:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800726c:	080072c5 	.word	0x080072c5
 8007270:	080072d9 	.word	0x080072d9
 8007274:	08007255 	.word	0x08007255
 8007278:	08007255 	.word	0x08007255
 800727c:	08007255 	.word	0x08007255
 8007280:	08007255 	.word	0x08007255
 8007284:	080072d9 	.word	0x080072d9
 8007288:	08007255 	.word	0x08007255
 800728c:	08007255 	.word	0x08007255
 8007290:	08007255 	.word	0x08007255
 8007294:	08007255 	.word	0x08007255
 8007298:	080073e5 	.word	0x080073e5
 800729c:	08007309 	.word	0x08007309
 80072a0:	080073c7 	.word	0x080073c7
 80072a4:	08007255 	.word	0x08007255
 80072a8:	08007255 	.word	0x08007255
 80072ac:	08007407 	.word	0x08007407
 80072b0:	08007255 	.word	0x08007255
 80072b4:	08007309 	.word	0x08007309
 80072b8:	08007255 	.word	0x08007255
 80072bc:	08007255 	.word	0x08007255
 80072c0:	080073cf 	.word	0x080073cf
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	1d1a      	adds	r2, r3, #4
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	600a      	str	r2, [r1, #0]
 80072cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0a3      	b.n	8007420 <_printf_i+0x1f4>
 80072d8:	6825      	ldr	r5, [r4, #0]
 80072da:	6808      	ldr	r0, [r1, #0]
 80072dc:	062e      	lsls	r6, r5, #24
 80072de:	f100 0304 	add.w	r3, r0, #4
 80072e2:	d50a      	bpl.n	80072fa <_printf_i+0xce>
 80072e4:	6805      	ldr	r5, [r0, #0]
 80072e6:	600b      	str	r3, [r1, #0]
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	da03      	bge.n	80072f4 <_printf_i+0xc8>
 80072ec:	232d      	movs	r3, #45	; 0x2d
 80072ee:	426d      	negs	r5, r5
 80072f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f4:	485e      	ldr	r0, [pc, #376]	; (8007470 <_printf_i+0x244>)
 80072f6:	230a      	movs	r3, #10
 80072f8:	e019      	b.n	800732e <_printf_i+0x102>
 80072fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80072fe:	6805      	ldr	r5, [r0, #0]
 8007300:	600b      	str	r3, [r1, #0]
 8007302:	bf18      	it	ne
 8007304:	b22d      	sxthne	r5, r5
 8007306:	e7ef      	b.n	80072e8 <_printf_i+0xbc>
 8007308:	680b      	ldr	r3, [r1, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	1d18      	adds	r0, r3, #4
 800730e:	6008      	str	r0, [r1, #0]
 8007310:	0628      	lsls	r0, r5, #24
 8007312:	d501      	bpl.n	8007318 <_printf_i+0xec>
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	e002      	b.n	800731e <_printf_i+0xf2>
 8007318:	0669      	lsls	r1, r5, #25
 800731a:	d5fb      	bpl.n	8007314 <_printf_i+0xe8>
 800731c:	881d      	ldrh	r5, [r3, #0]
 800731e:	4854      	ldr	r0, [pc, #336]	; (8007470 <_printf_i+0x244>)
 8007320:	2f6f      	cmp	r7, #111	; 0x6f
 8007322:	bf0c      	ite	eq
 8007324:	2308      	moveq	r3, #8
 8007326:	230a      	movne	r3, #10
 8007328:	2100      	movs	r1, #0
 800732a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800732e:	6866      	ldr	r6, [r4, #4]
 8007330:	60a6      	str	r6, [r4, #8]
 8007332:	2e00      	cmp	r6, #0
 8007334:	bfa2      	ittt	ge
 8007336:	6821      	ldrge	r1, [r4, #0]
 8007338:	f021 0104 	bicge.w	r1, r1, #4
 800733c:	6021      	strge	r1, [r4, #0]
 800733e:	b90d      	cbnz	r5, 8007344 <_printf_i+0x118>
 8007340:	2e00      	cmp	r6, #0
 8007342:	d04d      	beq.n	80073e0 <_printf_i+0x1b4>
 8007344:	4616      	mov	r6, r2
 8007346:	fbb5 f1f3 	udiv	r1, r5, r3
 800734a:	fb03 5711 	mls	r7, r3, r1, r5
 800734e:	5dc7      	ldrb	r7, [r0, r7]
 8007350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007354:	462f      	mov	r7, r5
 8007356:	42bb      	cmp	r3, r7
 8007358:	460d      	mov	r5, r1
 800735a:	d9f4      	bls.n	8007346 <_printf_i+0x11a>
 800735c:	2b08      	cmp	r3, #8
 800735e:	d10b      	bne.n	8007378 <_printf_i+0x14c>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	07df      	lsls	r7, r3, #31
 8007364:	d508      	bpl.n	8007378 <_printf_i+0x14c>
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	6861      	ldr	r1, [r4, #4]
 800736a:	4299      	cmp	r1, r3
 800736c:	bfde      	ittt	le
 800736e:	2330      	movle	r3, #48	; 0x30
 8007370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007378:	1b92      	subs	r2, r2, r6
 800737a:	6122      	str	r2, [r4, #16]
 800737c:	f8cd a000 	str.w	sl, [sp]
 8007380:	464b      	mov	r3, r9
 8007382:	aa03      	add	r2, sp, #12
 8007384:	4621      	mov	r1, r4
 8007386:	4640      	mov	r0, r8
 8007388:	f7ff fee2 	bl	8007150 <_printf_common>
 800738c:	3001      	adds	r0, #1
 800738e:	d14c      	bne.n	800742a <_printf_i+0x1fe>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	b004      	add	sp, #16
 8007396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739a:	4835      	ldr	r0, [pc, #212]	; (8007470 <_printf_i+0x244>)
 800739c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	680e      	ldr	r6, [r1, #0]
 80073a4:	061f      	lsls	r7, r3, #24
 80073a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80073aa:	600e      	str	r6, [r1, #0]
 80073ac:	d514      	bpl.n	80073d8 <_printf_i+0x1ac>
 80073ae:	07d9      	lsls	r1, r3, #31
 80073b0:	bf44      	itt	mi
 80073b2:	f043 0320 	orrmi.w	r3, r3, #32
 80073b6:	6023      	strmi	r3, [r4, #0]
 80073b8:	b91d      	cbnz	r5, 80073c2 <_printf_i+0x196>
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	f023 0320 	bic.w	r3, r3, #32
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	2310      	movs	r3, #16
 80073c4:	e7b0      	b.n	8007328 <_printf_i+0xfc>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	f043 0320 	orr.w	r3, r3, #32
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	2378      	movs	r3, #120	; 0x78
 80073d0:	4828      	ldr	r0, [pc, #160]	; (8007474 <_printf_i+0x248>)
 80073d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073d6:	e7e3      	b.n	80073a0 <_printf_i+0x174>
 80073d8:	065e      	lsls	r6, r3, #25
 80073da:	bf48      	it	mi
 80073dc:	b2ad      	uxthmi	r5, r5
 80073de:	e7e6      	b.n	80073ae <_printf_i+0x182>
 80073e0:	4616      	mov	r6, r2
 80073e2:	e7bb      	b.n	800735c <_printf_i+0x130>
 80073e4:	680b      	ldr	r3, [r1, #0]
 80073e6:	6826      	ldr	r6, [r4, #0]
 80073e8:	6960      	ldr	r0, [r4, #20]
 80073ea:	1d1d      	adds	r5, r3, #4
 80073ec:	600d      	str	r5, [r1, #0]
 80073ee:	0635      	lsls	r5, r6, #24
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	d501      	bpl.n	80073f8 <_printf_i+0x1cc>
 80073f4:	6018      	str	r0, [r3, #0]
 80073f6:	e002      	b.n	80073fe <_printf_i+0x1d2>
 80073f8:	0671      	lsls	r1, r6, #25
 80073fa:	d5fb      	bpl.n	80073f4 <_printf_i+0x1c8>
 80073fc:	8018      	strh	r0, [r3, #0]
 80073fe:	2300      	movs	r3, #0
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	4616      	mov	r6, r2
 8007404:	e7ba      	b.n	800737c <_printf_i+0x150>
 8007406:	680b      	ldr	r3, [r1, #0]
 8007408:	1d1a      	adds	r2, r3, #4
 800740a:	600a      	str	r2, [r1, #0]
 800740c:	681e      	ldr	r6, [r3, #0]
 800740e:	6862      	ldr	r2, [r4, #4]
 8007410:	2100      	movs	r1, #0
 8007412:	4630      	mov	r0, r6
 8007414:	f7f8 fef4 	bl	8000200 <memchr>
 8007418:	b108      	cbz	r0, 800741e <_printf_i+0x1f2>
 800741a:	1b80      	subs	r0, r0, r6
 800741c:	6060      	str	r0, [r4, #4]
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	2300      	movs	r3, #0
 8007424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007428:	e7a8      	b.n	800737c <_printf_i+0x150>
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	4632      	mov	r2, r6
 800742e:	4649      	mov	r1, r9
 8007430:	4640      	mov	r0, r8
 8007432:	47d0      	blx	sl
 8007434:	3001      	adds	r0, #1
 8007436:	d0ab      	beq.n	8007390 <_printf_i+0x164>
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	079b      	lsls	r3, r3, #30
 800743c:	d413      	bmi.n	8007466 <_printf_i+0x23a>
 800743e:	68e0      	ldr	r0, [r4, #12]
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	4298      	cmp	r0, r3
 8007444:	bfb8      	it	lt
 8007446:	4618      	movlt	r0, r3
 8007448:	e7a4      	b.n	8007394 <_printf_i+0x168>
 800744a:	2301      	movs	r3, #1
 800744c:	4632      	mov	r2, r6
 800744e:	4649      	mov	r1, r9
 8007450:	4640      	mov	r0, r8
 8007452:	47d0      	blx	sl
 8007454:	3001      	adds	r0, #1
 8007456:	d09b      	beq.n	8007390 <_printf_i+0x164>
 8007458:	3501      	adds	r5, #1
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	9903      	ldr	r1, [sp, #12]
 800745e:	1a5b      	subs	r3, r3, r1
 8007460:	42ab      	cmp	r3, r5
 8007462:	dcf2      	bgt.n	800744a <_printf_i+0x21e>
 8007464:	e7eb      	b.n	800743e <_printf_i+0x212>
 8007466:	2500      	movs	r5, #0
 8007468:	f104 0619 	add.w	r6, r4, #25
 800746c:	e7f5      	b.n	800745a <_printf_i+0x22e>
 800746e:	bf00      	nop
 8007470:	08008af5 	.word	0x08008af5
 8007474:	08008b06 	.word	0x08008b06

08007478 <__sread>:
 8007478:	b510      	push	{r4, lr}
 800747a:	460c      	mov	r4, r1
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	f000 fa58 	bl	8007934 <_read_r>
 8007484:	2800      	cmp	r0, #0
 8007486:	bfab      	itete	ge
 8007488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800748a:	89a3      	ldrhlt	r3, [r4, #12]
 800748c:	181b      	addge	r3, r3, r0
 800748e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007492:	bfac      	ite	ge
 8007494:	6563      	strge	r3, [r4, #84]	; 0x54
 8007496:	81a3      	strhlt	r3, [r4, #12]
 8007498:	bd10      	pop	{r4, pc}

0800749a <__swrite>:
 800749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	461f      	mov	r7, r3
 80074a0:	898b      	ldrh	r3, [r1, #12]
 80074a2:	05db      	lsls	r3, r3, #23
 80074a4:	4605      	mov	r5, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4616      	mov	r6, r2
 80074aa:	d505      	bpl.n	80074b8 <__swrite+0x1e>
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	2302      	movs	r3, #2
 80074b2:	2200      	movs	r2, #0
 80074b4:	f000 f9c8 	bl	8007848 <_lseek_r>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	4632      	mov	r2, r6
 80074c6:	463b      	mov	r3, r7
 80074c8:	4628      	mov	r0, r5
 80074ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	f000 b869 	b.w	80075a4 <_write_r>

080074d2 <__sseek>:
 80074d2:	b510      	push	{r4, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074da:	f000 f9b5 	bl	8007848 <_lseek_r>
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	bf15      	itete	ne
 80074e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ee:	81a3      	strheq	r3, [r4, #12]
 80074f0:	bf18      	it	ne
 80074f2:	81a3      	strhne	r3, [r4, #12]
 80074f4:	bd10      	pop	{r4, pc}

080074f6 <__sclose>:
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 b8d3 	b.w	80076a4 <_close_r>
	...

08007500 <__swbuf_r>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	460e      	mov	r6, r1
 8007504:	4614      	mov	r4, r2
 8007506:	4605      	mov	r5, r0
 8007508:	b118      	cbz	r0, 8007512 <__swbuf_r+0x12>
 800750a:	6983      	ldr	r3, [r0, #24]
 800750c:	b90b      	cbnz	r3, 8007512 <__swbuf_r+0x12>
 800750e:	f7ff fc19 	bl	8006d44 <__sinit>
 8007512:	4b21      	ldr	r3, [pc, #132]	; (8007598 <__swbuf_r+0x98>)
 8007514:	429c      	cmp	r4, r3
 8007516:	d12b      	bne.n	8007570 <__swbuf_r+0x70>
 8007518:	686c      	ldr	r4, [r5, #4]
 800751a:	69a3      	ldr	r3, [r4, #24]
 800751c:	60a3      	str	r3, [r4, #8]
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	071a      	lsls	r2, r3, #28
 8007522:	d52f      	bpl.n	8007584 <__swbuf_r+0x84>
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	b36b      	cbz	r3, 8007584 <__swbuf_r+0x84>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	1ac0      	subs	r0, r0, r3
 800752e:	6963      	ldr	r3, [r4, #20]
 8007530:	b2f6      	uxtb	r6, r6
 8007532:	4283      	cmp	r3, r0
 8007534:	4637      	mov	r7, r6
 8007536:	dc04      	bgt.n	8007542 <__swbuf_r+0x42>
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f000 f948 	bl	80077d0 <_fflush_r>
 8007540:	bb30      	cbnz	r0, 8007590 <__swbuf_r+0x90>
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	3b01      	subs	r3, #1
 8007546:	60a3      	str	r3, [r4, #8]
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	6022      	str	r2, [r4, #0]
 800754e:	701e      	strb	r6, [r3, #0]
 8007550:	6963      	ldr	r3, [r4, #20]
 8007552:	3001      	adds	r0, #1
 8007554:	4283      	cmp	r3, r0
 8007556:	d004      	beq.n	8007562 <__swbuf_r+0x62>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	07db      	lsls	r3, r3, #31
 800755c:	d506      	bpl.n	800756c <__swbuf_r+0x6c>
 800755e:	2e0a      	cmp	r6, #10
 8007560:	d104      	bne.n	800756c <__swbuf_r+0x6c>
 8007562:	4621      	mov	r1, r4
 8007564:	4628      	mov	r0, r5
 8007566:	f000 f933 	bl	80077d0 <_fflush_r>
 800756a:	b988      	cbnz	r0, 8007590 <__swbuf_r+0x90>
 800756c:	4638      	mov	r0, r7
 800756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <__swbuf_r+0x9c>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d101      	bne.n	800757a <__swbuf_r+0x7a>
 8007576:	68ac      	ldr	r4, [r5, #8]
 8007578:	e7cf      	b.n	800751a <__swbuf_r+0x1a>
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <__swbuf_r+0xa0>)
 800757c:	429c      	cmp	r4, r3
 800757e:	bf08      	it	eq
 8007580:	68ec      	ldreq	r4, [r5, #12]
 8007582:	e7ca      	b.n	800751a <__swbuf_r+0x1a>
 8007584:	4621      	mov	r1, r4
 8007586:	4628      	mov	r0, r5
 8007588:	f000 f81e 	bl	80075c8 <__swsetup_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	d0cb      	beq.n	8007528 <__swbuf_r+0x28>
 8007590:	f04f 37ff 	mov.w	r7, #4294967295
 8007594:	e7ea      	b.n	800756c <__swbuf_r+0x6c>
 8007596:	bf00      	nop
 8007598:	08008aa4 	.word	0x08008aa4
 800759c:	08008ac4 	.word	0x08008ac4
 80075a0:	08008a84 	.word	0x08008a84

080075a4 <_write_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_write_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7fa fbc9 	bl	8001d4a <_write>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_write_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_write_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	2000435c 	.word	0x2000435c

080075c8 <__swsetup_r>:
 80075c8:	4b32      	ldr	r3, [pc, #200]	; (8007694 <__swsetup_r+0xcc>)
 80075ca:	b570      	push	{r4, r5, r6, lr}
 80075cc:	681d      	ldr	r5, [r3, #0]
 80075ce:	4606      	mov	r6, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	b125      	cbz	r5, 80075de <__swsetup_r+0x16>
 80075d4:	69ab      	ldr	r3, [r5, #24]
 80075d6:	b913      	cbnz	r3, 80075de <__swsetup_r+0x16>
 80075d8:	4628      	mov	r0, r5
 80075da:	f7ff fbb3 	bl	8006d44 <__sinit>
 80075de:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <__swsetup_r+0xd0>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	d10f      	bne.n	8007604 <__swsetup_r+0x3c>
 80075e4:	686c      	ldr	r4, [r5, #4]
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ec:	0719      	lsls	r1, r3, #28
 80075ee:	d42c      	bmi.n	800764a <__swsetup_r+0x82>
 80075f0:	06dd      	lsls	r5, r3, #27
 80075f2:	d411      	bmi.n	8007618 <__swsetup_r+0x50>
 80075f4:	2309      	movs	r3, #9
 80075f6:	6033      	str	r3, [r6, #0]
 80075f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e03e      	b.n	8007682 <__swsetup_r+0xba>
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <__swsetup_r+0xd4>)
 8007606:	429c      	cmp	r4, r3
 8007608:	d101      	bne.n	800760e <__swsetup_r+0x46>
 800760a:	68ac      	ldr	r4, [r5, #8]
 800760c:	e7eb      	b.n	80075e6 <__swsetup_r+0x1e>
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <__swsetup_r+0xd8>)
 8007610:	429c      	cmp	r4, r3
 8007612:	bf08      	it	eq
 8007614:	68ec      	ldreq	r4, [r5, #12]
 8007616:	e7e6      	b.n	80075e6 <__swsetup_r+0x1e>
 8007618:	0758      	lsls	r0, r3, #29
 800761a:	d512      	bpl.n	8007642 <__swsetup_r+0x7a>
 800761c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800761e:	b141      	cbz	r1, 8007632 <__swsetup_r+0x6a>
 8007620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007624:	4299      	cmp	r1, r3
 8007626:	d002      	beq.n	800762e <__swsetup_r+0x66>
 8007628:	4630      	mov	r0, r6
 800762a:	f7ff fa59 	bl	8006ae0 <_free_r>
 800762e:	2300      	movs	r3, #0
 8007630:	6363      	str	r3, [r4, #52]	; 0x34
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	2300      	movs	r3, #0
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f043 0308 	orr.w	r3, r3, #8
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	b94b      	cbnz	r3, 8007662 <__swsetup_r+0x9a>
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007658:	d003      	beq.n	8007662 <__swsetup_r+0x9a>
 800765a:	4621      	mov	r1, r4
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f929 	bl	80078b4 <__smakebuf_r>
 8007662:	89a0      	ldrh	r0, [r4, #12]
 8007664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007668:	f010 0301 	ands.w	r3, r0, #1
 800766c:	d00a      	beq.n	8007684 <__swsetup_r+0xbc>
 800766e:	2300      	movs	r3, #0
 8007670:	60a3      	str	r3, [r4, #8]
 8007672:	6963      	ldr	r3, [r4, #20]
 8007674:	425b      	negs	r3, r3
 8007676:	61a3      	str	r3, [r4, #24]
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	b943      	cbnz	r3, 800768e <__swsetup_r+0xc6>
 800767c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007680:	d1ba      	bne.n	80075f8 <__swsetup_r+0x30>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	0781      	lsls	r1, r0, #30
 8007686:	bf58      	it	pl
 8007688:	6963      	ldrpl	r3, [r4, #20]
 800768a:	60a3      	str	r3, [r4, #8]
 800768c:	e7f4      	b.n	8007678 <__swsetup_r+0xb0>
 800768e:	2000      	movs	r0, #0
 8007690:	e7f7      	b.n	8007682 <__swsetup_r+0xba>
 8007692:	bf00      	nop
 8007694:	20000010 	.word	0x20000010
 8007698:	08008aa4 	.word	0x08008aa4
 800769c:	08008ac4 	.word	0x08008ac4
 80076a0:	08008a84 	.word	0x08008a84

080076a4 <_close_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d06      	ldr	r5, [pc, #24]	; (80076c0 <_close_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7fa fb67 	bl	8001d82 <_close>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_close_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_close_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	2000435c 	.word	0x2000435c

080076c4 <__sflush_r>:
 80076c4:	898a      	ldrh	r2, [r1, #12]
 80076c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ca:	4605      	mov	r5, r0
 80076cc:	0710      	lsls	r0, r2, #28
 80076ce:	460c      	mov	r4, r1
 80076d0:	d458      	bmi.n	8007784 <__sflush_r+0xc0>
 80076d2:	684b      	ldr	r3, [r1, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dc05      	bgt.n	80076e4 <__sflush_r+0x20>
 80076d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	dc02      	bgt.n	80076e4 <__sflush_r+0x20>
 80076de:	2000      	movs	r0, #0
 80076e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076e6:	2e00      	cmp	r6, #0
 80076e8:	d0f9      	beq.n	80076de <__sflush_r+0x1a>
 80076ea:	2300      	movs	r3, #0
 80076ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076f0:	682f      	ldr	r7, [r5, #0]
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	d032      	beq.n	800775c <__sflush_r+0x98>
 80076f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	075a      	lsls	r2, r3, #29
 80076fc:	d505      	bpl.n	800770a <__sflush_r+0x46>
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	1ac0      	subs	r0, r0, r3
 8007702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007704:	b10b      	cbz	r3, 800770a <__sflush_r+0x46>
 8007706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007708:	1ac0      	subs	r0, r0, r3
 800770a:	2300      	movs	r3, #0
 800770c:	4602      	mov	r2, r0
 800770e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007710:	6a21      	ldr	r1, [r4, #32]
 8007712:	4628      	mov	r0, r5
 8007714:	47b0      	blx	r6
 8007716:	1c43      	adds	r3, r0, #1
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	d106      	bne.n	800772a <__sflush_r+0x66>
 800771c:	6829      	ldr	r1, [r5, #0]
 800771e:	291d      	cmp	r1, #29
 8007720:	d82c      	bhi.n	800777c <__sflush_r+0xb8>
 8007722:	4a2a      	ldr	r2, [pc, #168]	; (80077cc <__sflush_r+0x108>)
 8007724:	40ca      	lsrs	r2, r1
 8007726:	07d6      	lsls	r6, r2, #31
 8007728:	d528      	bpl.n	800777c <__sflush_r+0xb8>
 800772a:	2200      	movs	r2, #0
 800772c:	6062      	str	r2, [r4, #4]
 800772e:	04d9      	lsls	r1, r3, #19
 8007730:	6922      	ldr	r2, [r4, #16]
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	d504      	bpl.n	8007740 <__sflush_r+0x7c>
 8007736:	1c42      	adds	r2, r0, #1
 8007738:	d101      	bne.n	800773e <__sflush_r+0x7a>
 800773a:	682b      	ldr	r3, [r5, #0]
 800773c:	b903      	cbnz	r3, 8007740 <__sflush_r+0x7c>
 800773e:	6560      	str	r0, [r4, #84]	; 0x54
 8007740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007742:	602f      	str	r7, [r5, #0]
 8007744:	2900      	cmp	r1, #0
 8007746:	d0ca      	beq.n	80076de <__sflush_r+0x1a>
 8007748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800774c:	4299      	cmp	r1, r3
 800774e:	d002      	beq.n	8007756 <__sflush_r+0x92>
 8007750:	4628      	mov	r0, r5
 8007752:	f7ff f9c5 	bl	8006ae0 <_free_r>
 8007756:	2000      	movs	r0, #0
 8007758:	6360      	str	r0, [r4, #52]	; 0x34
 800775a:	e7c1      	b.n	80076e0 <__sflush_r+0x1c>
 800775c:	6a21      	ldr	r1, [r4, #32]
 800775e:	2301      	movs	r3, #1
 8007760:	4628      	mov	r0, r5
 8007762:	47b0      	blx	r6
 8007764:	1c41      	adds	r1, r0, #1
 8007766:	d1c7      	bne.n	80076f8 <__sflush_r+0x34>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0c4      	beq.n	80076f8 <__sflush_r+0x34>
 800776e:	2b1d      	cmp	r3, #29
 8007770:	d001      	beq.n	8007776 <__sflush_r+0xb2>
 8007772:	2b16      	cmp	r3, #22
 8007774:	d101      	bne.n	800777a <__sflush_r+0xb6>
 8007776:	602f      	str	r7, [r5, #0]
 8007778:	e7b1      	b.n	80076de <__sflush_r+0x1a>
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	e7ad      	b.n	80076e0 <__sflush_r+0x1c>
 8007784:	690f      	ldr	r7, [r1, #16]
 8007786:	2f00      	cmp	r7, #0
 8007788:	d0a9      	beq.n	80076de <__sflush_r+0x1a>
 800778a:	0793      	lsls	r3, r2, #30
 800778c:	680e      	ldr	r6, [r1, #0]
 800778e:	bf08      	it	eq
 8007790:	694b      	ldreq	r3, [r1, #20]
 8007792:	600f      	str	r7, [r1, #0]
 8007794:	bf18      	it	ne
 8007796:	2300      	movne	r3, #0
 8007798:	eba6 0807 	sub.w	r8, r6, r7
 800779c:	608b      	str	r3, [r1, #8]
 800779e:	f1b8 0f00 	cmp.w	r8, #0
 80077a2:	dd9c      	ble.n	80076de <__sflush_r+0x1a>
 80077a4:	6a21      	ldr	r1, [r4, #32]
 80077a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077a8:	4643      	mov	r3, r8
 80077aa:	463a      	mov	r2, r7
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b0      	blx	r6
 80077b0:	2800      	cmp	r0, #0
 80077b2:	dc06      	bgt.n	80077c2 <__sflush_r+0xfe>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e78e      	b.n	80076e0 <__sflush_r+0x1c>
 80077c2:	4407      	add	r7, r0
 80077c4:	eba8 0800 	sub.w	r8, r8, r0
 80077c8:	e7e9      	b.n	800779e <__sflush_r+0xda>
 80077ca:	bf00      	nop
 80077cc:	20400001 	.word	0x20400001

080077d0 <_fflush_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	690b      	ldr	r3, [r1, #16]
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	b913      	cbnz	r3, 80077e0 <_fflush_r+0x10>
 80077da:	2500      	movs	r5, #0
 80077dc:	4628      	mov	r0, r5
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	b118      	cbz	r0, 80077ea <_fflush_r+0x1a>
 80077e2:	6983      	ldr	r3, [r0, #24]
 80077e4:	b90b      	cbnz	r3, 80077ea <_fflush_r+0x1a>
 80077e6:	f7ff faad 	bl	8006d44 <__sinit>
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <_fflush_r+0x6c>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	d11b      	bne.n	8007828 <_fflush_r+0x58>
 80077f0:	686c      	ldr	r4, [r5, #4]
 80077f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0ef      	beq.n	80077da <_fflush_r+0xa>
 80077fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077fc:	07d0      	lsls	r0, r2, #31
 80077fe:	d404      	bmi.n	800780a <_fflush_r+0x3a>
 8007800:	0599      	lsls	r1, r3, #22
 8007802:	d402      	bmi.n	800780a <_fflush_r+0x3a>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f7ff fb3b 	bl	8006e80 <__retarget_lock_acquire_recursive>
 800780a:	4628      	mov	r0, r5
 800780c:	4621      	mov	r1, r4
 800780e:	f7ff ff59 	bl	80076c4 <__sflush_r>
 8007812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007814:	07da      	lsls	r2, r3, #31
 8007816:	4605      	mov	r5, r0
 8007818:	d4e0      	bmi.n	80077dc <_fflush_r+0xc>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	059b      	lsls	r3, r3, #22
 800781e:	d4dd      	bmi.n	80077dc <_fflush_r+0xc>
 8007820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007822:	f7ff fb2e 	bl	8006e82 <__retarget_lock_release_recursive>
 8007826:	e7d9      	b.n	80077dc <_fflush_r+0xc>
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <_fflush_r+0x70>)
 800782a:	429c      	cmp	r4, r3
 800782c:	d101      	bne.n	8007832 <_fflush_r+0x62>
 800782e:	68ac      	ldr	r4, [r5, #8]
 8007830:	e7df      	b.n	80077f2 <_fflush_r+0x22>
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <_fflush_r+0x74>)
 8007834:	429c      	cmp	r4, r3
 8007836:	bf08      	it	eq
 8007838:	68ec      	ldreq	r4, [r5, #12]
 800783a:	e7da      	b.n	80077f2 <_fflush_r+0x22>
 800783c:	08008aa4 	.word	0x08008aa4
 8007840:	08008ac4 	.word	0x08008ac4
 8007844:	08008a84 	.word	0x08008a84

08007848 <_lseek_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	; (8007868 <_lseek_r+0x20>)
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7fa faba 	bl	8001dd0 <_lseek>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_lseek_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_lseek_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	2000435c 	.word	0x2000435c

0800786c <__swhatbuf_r>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	460e      	mov	r6, r1
 8007870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007874:	2900      	cmp	r1, #0
 8007876:	b096      	sub	sp, #88	; 0x58
 8007878:	4614      	mov	r4, r2
 800787a:	461d      	mov	r5, r3
 800787c:	da07      	bge.n	800788e <__swhatbuf_r+0x22>
 800787e:	2300      	movs	r3, #0
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	89b3      	ldrh	r3, [r6, #12]
 8007884:	061a      	lsls	r2, r3, #24
 8007886:	d410      	bmi.n	80078aa <__swhatbuf_r+0x3e>
 8007888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800788c:	e00e      	b.n	80078ac <__swhatbuf_r+0x40>
 800788e:	466a      	mov	r2, sp
 8007890:	f000 f862 	bl	8007958 <_fstat_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	dbf2      	blt.n	800787e <__swhatbuf_r+0x12>
 8007898:	9a01      	ldr	r2, [sp, #4]
 800789a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800789e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078a2:	425a      	negs	r2, r3
 80078a4:	415a      	adcs	r2, r3
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	e7ee      	b.n	8007888 <__swhatbuf_r+0x1c>
 80078aa:	2340      	movs	r3, #64	; 0x40
 80078ac:	2000      	movs	r0, #0
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	b016      	add	sp, #88	; 0x58
 80078b2:	bd70      	pop	{r4, r5, r6, pc}

080078b4 <__smakebuf_r>:
 80078b4:	898b      	ldrh	r3, [r1, #12]
 80078b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078b8:	079d      	lsls	r5, r3, #30
 80078ba:	4606      	mov	r6, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	d507      	bpl.n	80078d0 <__smakebuf_r+0x1c>
 80078c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	2301      	movs	r3, #1
 80078ca:	6163      	str	r3, [r4, #20]
 80078cc:	b002      	add	sp, #8
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	ab01      	add	r3, sp, #4
 80078d2:	466a      	mov	r2, sp
 80078d4:	f7ff ffca 	bl	800786c <__swhatbuf_r>
 80078d8:	9900      	ldr	r1, [sp, #0]
 80078da:	4605      	mov	r5, r0
 80078dc:	4630      	mov	r0, r6
 80078de:	f7ff f94f 	bl	8006b80 <_malloc_r>
 80078e2:	b948      	cbnz	r0, 80078f8 <__smakebuf_r+0x44>
 80078e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e8:	059a      	lsls	r2, r3, #22
 80078ea:	d4ef      	bmi.n	80078cc <__smakebuf_r+0x18>
 80078ec:	f023 0303 	bic.w	r3, r3, #3
 80078f0:	f043 0302 	orr.w	r3, r3, #2
 80078f4:	81a3      	strh	r3, [r4, #12]
 80078f6:	e7e3      	b.n	80078c0 <__smakebuf_r+0xc>
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <__smakebuf_r+0x7c>)
 80078fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	6020      	str	r0, [r4, #0]
 8007900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	9b00      	ldr	r3, [sp, #0]
 8007908:	6163      	str	r3, [r4, #20]
 800790a:	9b01      	ldr	r3, [sp, #4]
 800790c:	6120      	str	r0, [r4, #16]
 800790e:	b15b      	cbz	r3, 8007928 <__smakebuf_r+0x74>
 8007910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007914:	4630      	mov	r0, r6
 8007916:	f000 f831 	bl	800797c <_isatty_r>
 800791a:	b128      	cbz	r0, 8007928 <__smakebuf_r+0x74>
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	f023 0303 	bic.w	r3, r3, #3
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	89a0      	ldrh	r0, [r4, #12]
 800792a:	4305      	orrs	r5, r0
 800792c:	81a5      	strh	r5, [r4, #12]
 800792e:	e7cd      	b.n	80078cc <__smakebuf_r+0x18>
 8007930:	08006cdd 	.word	0x08006cdd

08007934 <_read_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	; (8007954 <_read_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fa f9e4 	bl	8001d10 <_read>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_read_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_read_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	2000435c 	.word	0x2000435c

08007958 <_fstat_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_fstat_r+0x20>)
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	f7fa fa18 	bl	8001d9a <_fstat>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_fstat_r+0x1c>
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	b103      	cbz	r3, 8007974 <_fstat_r+0x1c>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	2000435c 	.word	0x2000435c

0800797c <_isatty_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_isatty_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fa fa17 	bl	8001dba <_isatty>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_isatty_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_isatty_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	2000435c 	.word	0x2000435c

0800799c <pow>:
 800799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a0:	ec59 8b10 	vmov	r8, r9, d0
 80079a4:	ec57 6b11 	vmov	r6, r7, d1
 80079a8:	f000 f8a6 	bl	8007af8 <__ieee754_pow>
 80079ac:	4b4e      	ldr	r3, [pc, #312]	; (8007ae8 <pow+0x14c>)
 80079ae:	f993 3000 	ldrsb.w	r3, [r3]
 80079b2:	3301      	adds	r3, #1
 80079b4:	ec55 4b10 	vmov	r4, r5, d0
 80079b8:	d015      	beq.n	80079e6 <pow+0x4a>
 80079ba:	4632      	mov	r2, r6
 80079bc:	463b      	mov	r3, r7
 80079be:	4630      	mov	r0, r6
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7f9 f8c3 	bl	8000b4c <__aeabi_dcmpun>
 80079c6:	b970      	cbnz	r0, 80079e6 <pow+0x4a>
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	f7f9 f8bc 	bl	8000b4c <__aeabi_dcmpun>
 80079d4:	2200      	movs	r2, #0
 80079d6:	2300      	movs	r3, #0
 80079d8:	b148      	cbz	r0, 80079ee <pow+0x52>
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	f7f9 f883 	bl	8000ae8 <__aeabi_dcmpeq>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d17d      	bne.n	8007ae2 <pow+0x146>
 80079e6:	ec45 4b10 	vmov	d0, r4, r5
 80079ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f9 f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80079f6:	b1e0      	cbz	r0, 8007a32 <pow+0x96>
 80079f8:	2200      	movs	r2, #0
 80079fa:	2300      	movs	r3, #0
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f9 f872 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d16c      	bne.n	8007ae2 <pow+0x146>
 8007a08:	ec47 6b10 	vmov	d0, r6, r7
 8007a0c:	f000 fe53 	bl	80086b6 <finite>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d0e8      	beq.n	80079e6 <pow+0x4a>
 8007a14:	2200      	movs	r2, #0
 8007a16:	2300      	movs	r3, #0
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	f7f9 f86e 	bl	8000afc <__aeabi_dcmplt>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d0e0      	beq.n	80079e6 <pow+0x4a>
 8007a24:	f7ff f81a 	bl	8006a5c <__errno>
 8007a28:	2321      	movs	r3, #33	; 0x21
 8007a2a:	6003      	str	r3, [r0, #0]
 8007a2c:	2400      	movs	r4, #0
 8007a2e:	4d2f      	ldr	r5, [pc, #188]	; (8007aec <pow+0x150>)
 8007a30:	e7d9      	b.n	80079e6 <pow+0x4a>
 8007a32:	ec45 4b10 	vmov	d0, r4, r5
 8007a36:	f000 fe3e 	bl	80086b6 <finite>
 8007a3a:	bbb8      	cbnz	r0, 8007aac <pow+0x110>
 8007a3c:	ec49 8b10 	vmov	d0, r8, r9
 8007a40:	f000 fe39 	bl	80086b6 <finite>
 8007a44:	b390      	cbz	r0, 8007aac <pow+0x110>
 8007a46:	ec47 6b10 	vmov	d0, r6, r7
 8007a4a:	f000 fe34 	bl	80086b6 <finite>
 8007a4e:	b368      	cbz	r0, 8007aac <pow+0x110>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f9 f878 	bl	8000b4c <__aeabi_dcmpun>
 8007a5c:	b160      	cbz	r0, 8007a78 <pow+0xdc>
 8007a5e:	f7fe fffd 	bl	8006a5c <__errno>
 8007a62:	2321      	movs	r3, #33	; 0x21
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7f8 fefd 	bl	800086c <__aeabi_ddiv>
 8007a72:	4604      	mov	r4, r0
 8007a74:	460d      	mov	r5, r1
 8007a76:	e7b6      	b.n	80079e6 <pow+0x4a>
 8007a78:	f7fe fff0 	bl	8006a5c <__errno>
 8007a7c:	2322      	movs	r3, #34	; 0x22
 8007a7e:	6003      	str	r3, [r0, #0]
 8007a80:	2200      	movs	r2, #0
 8007a82:	2300      	movs	r3, #0
 8007a84:	4640      	mov	r0, r8
 8007a86:	4649      	mov	r1, r9
 8007a88:	f7f9 f838 	bl	8000afc <__aeabi_dcmplt>
 8007a8c:	2400      	movs	r4, #0
 8007a8e:	b158      	cbz	r0, 8007aa8 <pow+0x10c>
 8007a90:	ec47 6b10 	vmov	d0, r6, r7
 8007a94:	f000 fe24 	bl	80086e0 <rint>
 8007a98:	4632      	mov	r2, r6
 8007a9a:	ec51 0b10 	vmov	r0, r1, d0
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	f7f9 f822 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0c2      	beq.n	8007a2e <pow+0x92>
 8007aa8:	4d11      	ldr	r5, [pc, #68]	; (8007af0 <pow+0x154>)
 8007aaa:	e79c      	b.n	80079e6 <pow+0x4a>
 8007aac:	2200      	movs	r2, #0
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f9 f818 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d094      	beq.n	80079e6 <pow+0x4a>
 8007abc:	ec49 8b10 	vmov	d0, r8, r9
 8007ac0:	f000 fdf9 	bl	80086b6 <finite>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d08e      	beq.n	80079e6 <pow+0x4a>
 8007ac8:	ec47 6b10 	vmov	d0, r6, r7
 8007acc:	f000 fdf3 	bl	80086b6 <finite>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d088      	beq.n	80079e6 <pow+0x4a>
 8007ad4:	f7fe ffc2 	bl	8006a5c <__errno>
 8007ad8:	2322      	movs	r3, #34	; 0x22
 8007ada:	6003      	str	r3, [r0, #0]
 8007adc:	2400      	movs	r4, #0
 8007ade:	2500      	movs	r5, #0
 8007ae0:	e781      	b.n	80079e6 <pow+0x4a>
 8007ae2:	4d04      	ldr	r5, [pc, #16]	; (8007af4 <pow+0x158>)
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	e77e      	b.n	80079e6 <pow+0x4a>
 8007ae8:	20000074 	.word	0x20000074
 8007aec:	fff00000 	.word	0xfff00000
 8007af0:	7ff00000 	.word	0x7ff00000
 8007af4:	3ff00000 	.word	0x3ff00000

08007af8 <__ieee754_pow>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	ed2d 8b06 	vpush	{d8-d10}
 8007b00:	b08d      	sub	sp, #52	; 0x34
 8007b02:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007b06:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8007b0a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007b0e:	ea56 0100 	orrs.w	r1, r6, r0
 8007b12:	ec53 2b10 	vmov	r2, r3, d0
 8007b16:	f000 84d1 	beq.w	80084bc <__ieee754_pow+0x9c4>
 8007b1a:	497f      	ldr	r1, [pc, #508]	; (8007d18 <__ieee754_pow+0x220>)
 8007b1c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007b20:	428c      	cmp	r4, r1
 8007b22:	ee10 8a10 	vmov	r8, s0
 8007b26:	4699      	mov	r9, r3
 8007b28:	dc09      	bgt.n	8007b3e <__ieee754_pow+0x46>
 8007b2a:	d103      	bne.n	8007b34 <__ieee754_pow+0x3c>
 8007b2c:	b97a      	cbnz	r2, 8007b4e <__ieee754_pow+0x56>
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	dd02      	ble.n	8007b38 <__ieee754_pow+0x40>
 8007b32:	e00c      	b.n	8007b4e <__ieee754_pow+0x56>
 8007b34:	428e      	cmp	r6, r1
 8007b36:	dc02      	bgt.n	8007b3e <__ieee754_pow+0x46>
 8007b38:	428e      	cmp	r6, r1
 8007b3a:	d110      	bne.n	8007b5e <__ieee754_pow+0x66>
 8007b3c:	b178      	cbz	r0, 8007b5e <__ieee754_pow+0x66>
 8007b3e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b42:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b46:	ea54 0308 	orrs.w	r3, r4, r8
 8007b4a:	f000 84b7 	beq.w	80084bc <__ieee754_pow+0x9c4>
 8007b4e:	4873      	ldr	r0, [pc, #460]	; (8007d1c <__ieee754_pow+0x224>)
 8007b50:	b00d      	add	sp, #52	; 0x34
 8007b52:	ecbd 8b06 	vpop	{d8-d10}
 8007b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f000 bdb9 	b.w	80086d0 <nan>
 8007b5e:	f1b9 0f00 	cmp.w	r9, #0
 8007b62:	da36      	bge.n	8007bd2 <__ieee754_pow+0xda>
 8007b64:	496e      	ldr	r1, [pc, #440]	; (8007d20 <__ieee754_pow+0x228>)
 8007b66:	428e      	cmp	r6, r1
 8007b68:	dc51      	bgt.n	8007c0e <__ieee754_pow+0x116>
 8007b6a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007b6e:	428e      	cmp	r6, r1
 8007b70:	f340 84af 	ble.w	80084d2 <__ieee754_pow+0x9da>
 8007b74:	1531      	asrs	r1, r6, #20
 8007b76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007b7a:	2914      	cmp	r1, #20
 8007b7c:	dd0f      	ble.n	8007b9e <__ieee754_pow+0xa6>
 8007b7e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007b82:	fa20 fc01 	lsr.w	ip, r0, r1
 8007b86:	fa0c f101 	lsl.w	r1, ip, r1
 8007b8a:	4281      	cmp	r1, r0
 8007b8c:	f040 84a1 	bne.w	80084d2 <__ieee754_pow+0x9da>
 8007b90:	f00c 0c01 	and.w	ip, ip, #1
 8007b94:	f1cc 0102 	rsb	r1, ip, #2
 8007b98:	9100      	str	r1, [sp, #0]
 8007b9a:	b180      	cbz	r0, 8007bbe <__ieee754_pow+0xc6>
 8007b9c:	e059      	b.n	8007c52 <__ieee754_pow+0x15a>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d155      	bne.n	8007c4e <__ieee754_pow+0x156>
 8007ba2:	f1c1 0114 	rsb	r1, r1, #20
 8007ba6:	fa46 fc01 	asr.w	ip, r6, r1
 8007baa:	fa0c f101 	lsl.w	r1, ip, r1
 8007bae:	42b1      	cmp	r1, r6
 8007bb0:	f040 848c 	bne.w	80084cc <__ieee754_pow+0x9d4>
 8007bb4:	f00c 0c01 	and.w	ip, ip, #1
 8007bb8:	f1cc 0102 	rsb	r1, ip, #2
 8007bbc:	9100      	str	r1, [sp, #0]
 8007bbe:	4959      	ldr	r1, [pc, #356]	; (8007d24 <__ieee754_pow+0x22c>)
 8007bc0:	428e      	cmp	r6, r1
 8007bc2:	d12d      	bne.n	8007c20 <__ieee754_pow+0x128>
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	da79      	bge.n	8007cbc <__ieee754_pow+0x1c4>
 8007bc8:	4956      	ldr	r1, [pc, #344]	; (8007d24 <__ieee754_pow+0x22c>)
 8007bca:	2000      	movs	r0, #0
 8007bcc:	f7f8 fe4e 	bl	800086c <__aeabi_ddiv>
 8007bd0:	e016      	b.n	8007c00 <__ieee754_pow+0x108>
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	9100      	str	r1, [sp, #0]
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d13b      	bne.n	8007c52 <__ieee754_pow+0x15a>
 8007bda:	494f      	ldr	r1, [pc, #316]	; (8007d18 <__ieee754_pow+0x220>)
 8007bdc:	428e      	cmp	r6, r1
 8007bde:	d1ee      	bne.n	8007bbe <__ieee754_pow+0xc6>
 8007be0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007be4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007be8:	ea53 0308 	orrs.w	r3, r3, r8
 8007bec:	f000 8466 	beq.w	80084bc <__ieee754_pow+0x9c4>
 8007bf0:	4b4d      	ldr	r3, [pc, #308]	; (8007d28 <__ieee754_pow+0x230>)
 8007bf2:	429c      	cmp	r4, r3
 8007bf4:	dd0d      	ble.n	8007c12 <__ieee754_pow+0x11a>
 8007bf6:	2f00      	cmp	r7, #0
 8007bf8:	f280 8464 	bge.w	80084c4 <__ieee754_pow+0x9cc>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	2100      	movs	r1, #0
 8007c00:	ec41 0b10 	vmov	d0, r0, r1
 8007c04:	b00d      	add	sp, #52	; 0x34
 8007c06:	ecbd 8b06 	vpop	{d8-d10}
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	2102      	movs	r1, #2
 8007c10:	e7e0      	b.n	8007bd4 <__ieee754_pow+0xdc>
 8007c12:	2f00      	cmp	r7, #0
 8007c14:	daf2      	bge.n	8007bfc <__ieee754_pow+0x104>
 8007c16:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8007c1a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c1e:	e7ef      	b.n	8007c00 <__ieee754_pow+0x108>
 8007c20:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007c24:	d104      	bne.n	8007c30 <__ieee754_pow+0x138>
 8007c26:	4610      	mov	r0, r2
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f7f8 fcf5 	bl	8000618 <__aeabi_dmul>
 8007c2e:	e7e7      	b.n	8007c00 <__ieee754_pow+0x108>
 8007c30:	493e      	ldr	r1, [pc, #248]	; (8007d2c <__ieee754_pow+0x234>)
 8007c32:	428f      	cmp	r7, r1
 8007c34:	d10d      	bne.n	8007c52 <__ieee754_pow+0x15a>
 8007c36:	f1b9 0f00 	cmp.w	r9, #0
 8007c3a:	db0a      	blt.n	8007c52 <__ieee754_pow+0x15a>
 8007c3c:	ec43 2b10 	vmov	d0, r2, r3
 8007c40:	b00d      	add	sp, #52	; 0x34
 8007c42:	ecbd 8b06 	vpop	{d8-d10}
 8007c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4a:	f000 bc77 	b.w	800853c <__ieee754_sqrt>
 8007c4e:	2100      	movs	r1, #0
 8007c50:	9100      	str	r1, [sp, #0]
 8007c52:	ec43 2b10 	vmov	d0, r2, r3
 8007c56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c5a:	f000 fd23 	bl	80086a4 <fabs>
 8007c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c62:	ec51 0b10 	vmov	r0, r1, d0
 8007c66:	f1b8 0f00 	cmp.w	r8, #0
 8007c6a:	d12a      	bne.n	8007cc2 <__ieee754_pow+0x1ca>
 8007c6c:	b12c      	cbz	r4, 8007c7a <__ieee754_pow+0x182>
 8007c6e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007d24 <__ieee754_pow+0x22c>
 8007c72:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007c76:	45e6      	cmp	lr, ip
 8007c78:	d123      	bne.n	8007cc2 <__ieee754_pow+0x1ca>
 8007c7a:	2f00      	cmp	r7, #0
 8007c7c:	da05      	bge.n	8007c8a <__ieee754_pow+0x192>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	2000      	movs	r0, #0
 8007c84:	4927      	ldr	r1, [pc, #156]	; (8007d24 <__ieee754_pow+0x22c>)
 8007c86:	f7f8 fdf1 	bl	800086c <__aeabi_ddiv>
 8007c8a:	f1b9 0f00 	cmp.w	r9, #0
 8007c8e:	dab7      	bge.n	8007c00 <__ieee754_pow+0x108>
 8007c90:	9b00      	ldr	r3, [sp, #0]
 8007c92:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c96:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c9a:	4323      	orrs	r3, r4
 8007c9c:	d108      	bne.n	8007cb0 <__ieee754_pow+0x1b8>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f7f8 faff 	bl	80002a8 <__aeabi_dsub>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	e78d      	b.n	8007bcc <__ieee754_pow+0xd4>
 8007cb0:	9b00      	ldr	r3, [sp, #0]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d1a4      	bne.n	8007c00 <__ieee754_pow+0x108>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	e79e      	b.n	8007c00 <__ieee754_pow+0x108>
 8007cc2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007cc6:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007cca:	950a      	str	r5, [sp, #40]	; 0x28
 8007ccc:	9d00      	ldr	r5, [sp, #0]
 8007cce:	46ac      	mov	ip, r5
 8007cd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007cd2:	ea5c 0505 	orrs.w	r5, ip, r5
 8007cd6:	d0e4      	beq.n	8007ca2 <__ieee754_pow+0x1aa>
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <__ieee754_pow+0x238>)
 8007cda:	429e      	cmp	r6, r3
 8007cdc:	f340 80fc 	ble.w	8007ed8 <__ieee754_pow+0x3e0>
 8007ce0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ce4:	429e      	cmp	r6, r3
 8007ce6:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <__ieee754_pow+0x230>)
 8007ce8:	dd07      	ble.n	8007cfa <__ieee754_pow+0x202>
 8007cea:	429c      	cmp	r4, r3
 8007cec:	dc0a      	bgt.n	8007d04 <__ieee754_pow+0x20c>
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	da84      	bge.n	8007bfc <__ieee754_pow+0x104>
 8007cf2:	a307      	add	r3, pc, #28	; (adr r3, 8007d10 <__ieee754_pow+0x218>)
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	e795      	b.n	8007c26 <__ieee754_pow+0x12e>
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	dbf7      	blt.n	8007cee <__ieee754_pow+0x1f6>
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <__ieee754_pow+0x22c>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	dd17      	ble.n	8007d34 <__ieee754_pow+0x23c>
 8007d04:	2f00      	cmp	r7, #0
 8007d06:	dcf4      	bgt.n	8007cf2 <__ieee754_pow+0x1fa>
 8007d08:	e778      	b.n	8007bfc <__ieee754_pow+0x104>
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w
 8007d10:	8800759c 	.word	0x8800759c
 8007d14:	7e37e43c 	.word	0x7e37e43c
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	08008ae9 	.word	0x08008ae9
 8007d20:	433fffff 	.word	0x433fffff
 8007d24:	3ff00000 	.word	0x3ff00000
 8007d28:	3fefffff 	.word	0x3fefffff
 8007d2c:	3fe00000 	.word	0x3fe00000
 8007d30:	41e00000 	.word	0x41e00000
 8007d34:	4b64      	ldr	r3, [pc, #400]	; (8007ec8 <__ieee754_pow+0x3d0>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	f7f8 fab6 	bl	80002a8 <__aeabi_dsub>
 8007d3c:	a356      	add	r3, pc, #344	; (adr r3, 8007e98 <__ieee754_pow+0x3a0>)
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	4604      	mov	r4, r0
 8007d44:	460d      	mov	r5, r1
 8007d46:	f7f8 fc67 	bl	8000618 <__aeabi_dmul>
 8007d4a:	a355      	add	r3, pc, #340	; (adr r3, 8007ea0 <__ieee754_pow+0x3a8>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	4606      	mov	r6, r0
 8007d52:	460f      	mov	r7, r1
 8007d54:	4620      	mov	r0, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	f7f8 fc5e 	bl	8000618 <__aeabi_dmul>
 8007d5c:	4b5b      	ldr	r3, [pc, #364]	; (8007ecc <__ieee754_pow+0x3d4>)
 8007d5e:	4682      	mov	sl, r0
 8007d60:	468b      	mov	fp, r1
 8007d62:	2200      	movs	r2, #0
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fc56 	bl	8000618 <__aeabi_dmul>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	a14d      	add	r1, pc, #308	; (adr r1, 8007ea8 <__ieee754_pow+0x3b0>)
 8007d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d76:	f7f8 fa97 	bl	80002a8 <__aeabi_dsub>
 8007d7a:	4622      	mov	r2, r4
 8007d7c:	462b      	mov	r3, r5
 8007d7e:	f7f8 fc4b 	bl	8000618 <__aeabi_dmul>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	2000      	movs	r0, #0
 8007d88:	4951      	ldr	r1, [pc, #324]	; (8007ed0 <__ieee754_pow+0x3d8>)
 8007d8a:	f7f8 fa8d 	bl	80002a8 <__aeabi_dsub>
 8007d8e:	4622      	mov	r2, r4
 8007d90:	4680      	mov	r8, r0
 8007d92:	4689      	mov	r9, r1
 8007d94:	462b      	mov	r3, r5
 8007d96:	4620      	mov	r0, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	f7f8 fc3d 	bl	8000618 <__aeabi_dmul>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4640      	mov	r0, r8
 8007da4:	4649      	mov	r1, r9
 8007da6:	f7f8 fc37 	bl	8000618 <__aeabi_dmul>
 8007daa:	a341      	add	r3, pc, #260	; (adr r3, 8007eb0 <__ieee754_pow+0x3b8>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	f7f8 fc32 	bl	8000618 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4650      	mov	r0, sl
 8007dba:	4659      	mov	r1, fp
 8007dbc:	f7f8 fa74 	bl	80002a8 <__aeabi_dsub>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	4689      	mov	r9, r1
 8007dc8:	4630      	mov	r0, r6
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f7f8 fa6e 	bl	80002ac <__adddf3>
 8007dd0:	2400      	movs	r4, #0
 8007dd2:	4632      	mov	r2, r6
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	460d      	mov	r5, r1
 8007dda:	f7f8 fa65 	bl	80002a8 <__aeabi_dsub>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fa5f 	bl	80002a8 <__aeabi_dsub>
 8007dea:	9b00      	ldr	r3, [sp, #0]
 8007dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dee:	3b01      	subs	r3, #1
 8007df0:	4313      	orrs	r3, r2
 8007df2:	4682      	mov	sl, r0
 8007df4:	468b      	mov	fp, r1
 8007df6:	f040 81f1 	bne.w	80081dc <__ieee754_pow+0x6e4>
 8007dfa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007eb8 <__ieee754_pow+0x3c0>
 8007dfe:	eeb0 8a47 	vmov.f32	s16, s14
 8007e02:	eef0 8a67 	vmov.f32	s17, s15
 8007e06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e0a:	2600      	movs	r6, #0
 8007e0c:	4632      	mov	r2, r6
 8007e0e:	463b      	mov	r3, r7
 8007e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e14:	f7f8 fa48 	bl	80002a8 <__aeabi_dsub>
 8007e18:	4622      	mov	r2, r4
 8007e1a:	462b      	mov	r3, r5
 8007e1c:	f7f8 fbfc 	bl	8000618 <__aeabi_dmul>
 8007e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e24:	4680      	mov	r8, r0
 8007e26:	4689      	mov	r9, r1
 8007e28:	4650      	mov	r0, sl
 8007e2a:	4659      	mov	r1, fp
 8007e2c:	f7f8 fbf4 	bl	8000618 <__aeabi_dmul>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4640      	mov	r0, r8
 8007e36:	4649      	mov	r1, r9
 8007e38:	f7f8 fa38 	bl	80002ac <__adddf3>
 8007e3c:	4632      	mov	r2, r6
 8007e3e:	463b      	mov	r3, r7
 8007e40:	4680      	mov	r8, r0
 8007e42:	4689      	mov	r9, r1
 8007e44:	4620      	mov	r0, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7f8 fbe6 	bl	8000618 <__aeabi_dmul>
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4604      	mov	r4, r0
 8007e50:	460d      	mov	r5, r1
 8007e52:	4602      	mov	r2, r0
 8007e54:	4649      	mov	r1, r9
 8007e56:	4640      	mov	r0, r8
 8007e58:	f7f8 fa28 	bl	80002ac <__adddf3>
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ed4 <__ieee754_pow+0x3dc>)
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	ec45 4b19 	vmov	d9, r4, r5
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	468b      	mov	fp, r1
 8007e6a:	f340 82fe 	ble.w	800846a <__ieee754_pow+0x972>
 8007e6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007e72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007e76:	4303      	orrs	r3, r0
 8007e78:	f000 81f0 	beq.w	800825c <__ieee754_pow+0x764>
 8007e7c:	a310      	add	r3, pc, #64	; (adr r3, 8007ec0 <__ieee754_pow+0x3c8>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	ec51 0b18 	vmov	r0, r1, d8
 8007e86:	f7f8 fbc7 	bl	8000618 <__aeabi_dmul>
 8007e8a:	a30d      	add	r3, pc, #52	; (adr r3, 8007ec0 <__ieee754_pow+0x3c8>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	e6cb      	b.n	8007c2a <__ieee754_pow+0x132>
 8007e92:	bf00      	nop
 8007e94:	f3af 8000 	nop.w
 8007e98:	60000000 	.word	0x60000000
 8007e9c:	3ff71547 	.word	0x3ff71547
 8007ea0:	f85ddf44 	.word	0xf85ddf44
 8007ea4:	3e54ae0b 	.word	0x3e54ae0b
 8007ea8:	55555555 	.word	0x55555555
 8007eac:	3fd55555 	.word	0x3fd55555
 8007eb0:	652b82fe 	.word	0x652b82fe
 8007eb4:	3ff71547 	.word	0x3ff71547
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	bff00000 	.word	0xbff00000
 8007ec0:	8800759c 	.word	0x8800759c
 8007ec4:	7e37e43c 	.word	0x7e37e43c
 8007ec8:	3ff00000 	.word	0x3ff00000
 8007ecc:	3fd00000 	.word	0x3fd00000
 8007ed0:	3fe00000 	.word	0x3fe00000
 8007ed4:	408fffff 	.word	0x408fffff
 8007ed8:	4bd7      	ldr	r3, [pc, #860]	; (8008238 <__ieee754_pow+0x740>)
 8007eda:	ea03 0309 	and.w	r3, r3, r9
 8007ede:	2200      	movs	r2, #0
 8007ee0:	b92b      	cbnz	r3, 8007eee <__ieee754_pow+0x3f6>
 8007ee2:	4bd6      	ldr	r3, [pc, #856]	; (800823c <__ieee754_pow+0x744>)
 8007ee4:	f7f8 fb98 	bl	8000618 <__aeabi_dmul>
 8007ee8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007eec:	460c      	mov	r4, r1
 8007eee:	1523      	asrs	r3, r4, #20
 8007ef0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ef4:	4413      	add	r3, r2
 8007ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef8:	4bd1      	ldr	r3, [pc, #836]	; (8008240 <__ieee754_pow+0x748>)
 8007efa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007efe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007f02:	429c      	cmp	r4, r3
 8007f04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f08:	dd08      	ble.n	8007f1c <__ieee754_pow+0x424>
 8007f0a:	4bce      	ldr	r3, [pc, #824]	; (8008244 <__ieee754_pow+0x74c>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	f340 8163 	ble.w	80081d8 <__ieee754_pow+0x6e0>
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	3301      	adds	r3, #1
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007f1c:	2400      	movs	r4, #0
 8007f1e:	00e3      	lsls	r3, r4, #3
 8007f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f22:	4bc9      	ldr	r3, [pc, #804]	; (8008248 <__ieee754_pow+0x750>)
 8007f24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f28:	ed93 7b00 	vldr	d7, [r3]
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	ec53 2b17 	vmov	r2, r3, d7
 8007f32:	eeb0 8a47 	vmov.f32	s16, s14
 8007f36:	eef0 8a67 	vmov.f32	s17, s15
 8007f3a:	4682      	mov	sl, r0
 8007f3c:	f7f8 f9b4 	bl	80002a8 <__aeabi_dsub>
 8007f40:	4652      	mov	r2, sl
 8007f42:	4606      	mov	r6, r0
 8007f44:	460f      	mov	r7, r1
 8007f46:	462b      	mov	r3, r5
 8007f48:	ec51 0b18 	vmov	r0, r1, d8
 8007f4c:	f7f8 f9ae 	bl	80002ac <__adddf3>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	2000      	movs	r0, #0
 8007f56:	49bd      	ldr	r1, [pc, #756]	; (800824c <__ieee754_pow+0x754>)
 8007f58:	f7f8 fc88 	bl	800086c <__aeabi_ddiv>
 8007f5c:	ec41 0b19 	vmov	d9, r0, r1
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 fb56 	bl	8000618 <__aeabi_dmul>
 8007f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007f80:	46ab      	mov	fp, r5
 8007f82:	106d      	asrs	r5, r5, #1
 8007f84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007f88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007f8c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007f90:	2200      	movs	r2, #0
 8007f92:	4640      	mov	r0, r8
 8007f94:	4649      	mov	r1, r9
 8007f96:	4614      	mov	r4, r2
 8007f98:	461d      	mov	r5, r3
 8007f9a:	f7f8 fb3d 	bl	8000618 <__aeabi_dmul>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 f97f 	bl	80002a8 <__aeabi_dsub>
 8007faa:	ec53 2b18 	vmov	r2, r3, d8
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	f7f8 f977 	bl	80002a8 <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	f7f8 f971 	bl	80002a8 <__aeabi_dsub>
 8007fc6:	4642      	mov	r2, r8
 8007fc8:	464b      	mov	r3, r9
 8007fca:	f7f8 fb25 	bl	8000618 <__aeabi_dmul>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	f7f8 f967 	bl	80002a8 <__aeabi_dsub>
 8007fda:	ec53 2b19 	vmov	r2, r3, d9
 8007fde:	f7f8 fb1b 	bl	8000618 <__aeabi_dmul>
 8007fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fe6:	ec41 0b18 	vmov	d8, r0, r1
 8007fea:	4610      	mov	r0, r2
 8007fec:	4619      	mov	r1, r3
 8007fee:	f7f8 fb13 	bl	8000618 <__aeabi_dmul>
 8007ff2:	a37d      	add	r3, pc, #500	; (adr r3, 80081e8 <__ieee754_pow+0x6f0>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	f7f8 fb0c 	bl	8000618 <__aeabi_dmul>
 8008000:	a37b      	add	r3, pc, #492	; (adr r3, 80081f0 <__ieee754_pow+0x6f8>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f7f8 f951 	bl	80002ac <__adddf3>
 800800a:	4622      	mov	r2, r4
 800800c:	462b      	mov	r3, r5
 800800e:	f7f8 fb03 	bl	8000618 <__aeabi_dmul>
 8008012:	a379      	add	r3, pc, #484	; (adr r3, 80081f8 <__ieee754_pow+0x700>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 f948 	bl	80002ac <__adddf3>
 800801c:	4622      	mov	r2, r4
 800801e:	462b      	mov	r3, r5
 8008020:	f7f8 fafa 	bl	8000618 <__aeabi_dmul>
 8008024:	a376      	add	r3, pc, #472	; (adr r3, 8008200 <__ieee754_pow+0x708>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f93f 	bl	80002ac <__adddf3>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f7f8 faf1 	bl	8000618 <__aeabi_dmul>
 8008036:	a374      	add	r3, pc, #464	; (adr r3, 8008208 <__ieee754_pow+0x710>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 f936 	bl	80002ac <__adddf3>
 8008040:	4622      	mov	r2, r4
 8008042:	462b      	mov	r3, r5
 8008044:	f7f8 fae8 	bl	8000618 <__aeabi_dmul>
 8008048:	a371      	add	r3, pc, #452	; (adr r3, 8008210 <__ieee754_pow+0x718>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 f92d 	bl	80002ac <__adddf3>
 8008052:	4622      	mov	r2, r4
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	462b      	mov	r3, r5
 800805a:	4620      	mov	r0, r4
 800805c:	4629      	mov	r1, r5
 800805e:	f7f8 fadb 	bl	8000618 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 fad5 	bl	8000618 <__aeabi_dmul>
 800806e:	4642      	mov	r2, r8
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	464b      	mov	r3, r9
 8008076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807a:	f7f8 f917 	bl	80002ac <__adddf3>
 800807e:	ec53 2b18 	vmov	r2, r3, d8
 8008082:	f7f8 fac9 	bl	8000618 <__aeabi_dmul>
 8008086:	4622      	mov	r2, r4
 8008088:	462b      	mov	r3, r5
 800808a:	f7f8 f90f 	bl	80002ac <__adddf3>
 800808e:	4642      	mov	r2, r8
 8008090:	4682      	mov	sl, r0
 8008092:	468b      	mov	fp, r1
 8008094:	464b      	mov	r3, r9
 8008096:	4640      	mov	r0, r8
 8008098:	4649      	mov	r1, r9
 800809a:	f7f8 fabd 	bl	8000618 <__aeabi_dmul>
 800809e:	4b6c      	ldr	r3, [pc, #432]	; (8008250 <__ieee754_pow+0x758>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4606      	mov	r6, r0
 80080a4:	460f      	mov	r7, r1
 80080a6:	f7f8 f901 	bl	80002ac <__adddf3>
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	f7f8 f8fd 	bl	80002ac <__adddf3>
 80080b2:	9c04      	ldr	r4, [sp, #16]
 80080b4:	460d      	mov	r5, r1
 80080b6:	4622      	mov	r2, r4
 80080b8:	460b      	mov	r3, r1
 80080ba:	4640      	mov	r0, r8
 80080bc:	4649      	mov	r1, r9
 80080be:	f7f8 faab 	bl	8000618 <__aeabi_dmul>
 80080c2:	4b63      	ldr	r3, [pc, #396]	; (8008250 <__ieee754_pow+0x758>)
 80080c4:	4680      	mov	r8, r0
 80080c6:	4689      	mov	r9, r1
 80080c8:	2200      	movs	r2, #0
 80080ca:	4620      	mov	r0, r4
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7f8 f8eb 	bl	80002a8 <__aeabi_dsub>
 80080d2:	4632      	mov	r2, r6
 80080d4:	463b      	mov	r3, r7
 80080d6:	f7f8 f8e7 	bl	80002a8 <__aeabi_dsub>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4650      	mov	r0, sl
 80080e0:	4659      	mov	r1, fp
 80080e2:	f7f8 f8e1 	bl	80002a8 <__aeabi_dsub>
 80080e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080ea:	f7f8 fa95 	bl	8000618 <__aeabi_dmul>
 80080ee:	4622      	mov	r2, r4
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	462b      	mov	r3, r5
 80080f6:	ec51 0b18 	vmov	r0, r1, d8
 80080fa:	f7f8 fa8d 	bl	8000618 <__aeabi_dmul>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7f8 f8d1 	bl	80002ac <__adddf3>
 800810a:	4606      	mov	r6, r0
 800810c:	460f      	mov	r7, r1
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4640      	mov	r0, r8
 8008114:	4649      	mov	r1, r9
 8008116:	f7f8 f8c9 	bl	80002ac <__adddf3>
 800811a:	9c04      	ldr	r4, [sp, #16]
 800811c:	a33e      	add	r3, pc, #248	; (adr r3, 8008218 <__ieee754_pow+0x720>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	4620      	mov	r0, r4
 8008124:	460d      	mov	r5, r1
 8008126:	f7f8 fa77 	bl	8000618 <__aeabi_dmul>
 800812a:	4642      	mov	r2, r8
 800812c:	ec41 0b18 	vmov	d8, r0, r1
 8008130:	464b      	mov	r3, r9
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	f7f8 f8b7 	bl	80002a8 <__aeabi_dsub>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4630      	mov	r0, r6
 8008140:	4639      	mov	r1, r7
 8008142:	f7f8 f8b1 	bl	80002a8 <__aeabi_dsub>
 8008146:	a336      	add	r3, pc, #216	; (adr r3, 8008220 <__ieee754_pow+0x728>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 fa64 	bl	8000618 <__aeabi_dmul>
 8008150:	a335      	add	r3, pc, #212	; (adr r3, 8008228 <__ieee754_pow+0x730>)
 8008152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008156:	4606      	mov	r6, r0
 8008158:	460f      	mov	r7, r1
 800815a:	4620      	mov	r0, r4
 800815c:	4629      	mov	r1, r5
 800815e:	f7f8 fa5b 	bl	8000618 <__aeabi_dmul>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4630      	mov	r0, r6
 8008168:	4639      	mov	r1, r7
 800816a:	f7f8 f89f 	bl	80002ac <__adddf3>
 800816e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008170:	4b38      	ldr	r3, [pc, #224]	; (8008254 <__ieee754_pow+0x75c>)
 8008172:	4413      	add	r3, r2
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 f898 	bl	80002ac <__adddf3>
 800817c:	4682      	mov	sl, r0
 800817e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008180:	468b      	mov	fp, r1
 8008182:	f7f8 f9df 	bl	8000544 <__aeabi_i2d>
 8008186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008188:	4b33      	ldr	r3, [pc, #204]	; (8008258 <__ieee754_pow+0x760>)
 800818a:	4413      	add	r3, r2
 800818c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008190:	4606      	mov	r6, r0
 8008192:	460f      	mov	r7, r1
 8008194:	4652      	mov	r2, sl
 8008196:	465b      	mov	r3, fp
 8008198:	ec51 0b18 	vmov	r0, r1, d8
 800819c:	f7f8 f886 	bl	80002ac <__adddf3>
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	f7f8 f882 	bl	80002ac <__adddf3>
 80081a8:	4632      	mov	r2, r6
 80081aa:	463b      	mov	r3, r7
 80081ac:	f7f8 f87e 	bl	80002ac <__adddf3>
 80081b0:	9c04      	ldr	r4, [sp, #16]
 80081b2:	4632      	mov	r2, r6
 80081b4:	463b      	mov	r3, r7
 80081b6:	4620      	mov	r0, r4
 80081b8:	460d      	mov	r5, r1
 80081ba:	f7f8 f875 	bl	80002a8 <__aeabi_dsub>
 80081be:	4642      	mov	r2, r8
 80081c0:	464b      	mov	r3, r9
 80081c2:	f7f8 f871 	bl	80002a8 <__aeabi_dsub>
 80081c6:	ec53 2b18 	vmov	r2, r3, d8
 80081ca:	f7f8 f86d 	bl	80002a8 <__aeabi_dsub>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4650      	mov	r0, sl
 80081d4:	4659      	mov	r1, fp
 80081d6:	e606      	b.n	8007de6 <__ieee754_pow+0x2ee>
 80081d8:	2401      	movs	r4, #1
 80081da:	e6a0      	b.n	8007f1e <__ieee754_pow+0x426>
 80081dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008230 <__ieee754_pow+0x738>
 80081e0:	e60d      	b.n	8007dfe <__ieee754_pow+0x306>
 80081e2:	bf00      	nop
 80081e4:	f3af 8000 	nop.w
 80081e8:	4a454eef 	.word	0x4a454eef
 80081ec:	3fca7e28 	.word	0x3fca7e28
 80081f0:	93c9db65 	.word	0x93c9db65
 80081f4:	3fcd864a 	.word	0x3fcd864a
 80081f8:	a91d4101 	.word	0xa91d4101
 80081fc:	3fd17460 	.word	0x3fd17460
 8008200:	518f264d 	.word	0x518f264d
 8008204:	3fd55555 	.word	0x3fd55555
 8008208:	db6fabff 	.word	0xdb6fabff
 800820c:	3fdb6db6 	.word	0x3fdb6db6
 8008210:	33333303 	.word	0x33333303
 8008214:	3fe33333 	.word	0x3fe33333
 8008218:	e0000000 	.word	0xe0000000
 800821c:	3feec709 	.word	0x3feec709
 8008220:	dc3a03fd 	.word	0xdc3a03fd
 8008224:	3feec709 	.word	0x3feec709
 8008228:	145b01f5 	.word	0x145b01f5
 800822c:	be3e2fe0 	.word	0xbe3e2fe0
 8008230:	00000000 	.word	0x00000000
 8008234:	3ff00000 	.word	0x3ff00000
 8008238:	7ff00000 	.word	0x7ff00000
 800823c:	43400000 	.word	0x43400000
 8008240:	0003988e 	.word	0x0003988e
 8008244:	000bb679 	.word	0x000bb679
 8008248:	08008b18 	.word	0x08008b18
 800824c:	3ff00000 	.word	0x3ff00000
 8008250:	40080000 	.word	0x40080000
 8008254:	08008b38 	.word	0x08008b38
 8008258:	08008b28 	.word	0x08008b28
 800825c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008534 <__ieee754_pow+0xa3c>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	f7f8 f821 	bl	80002ac <__adddf3>
 800826a:	4622      	mov	r2, r4
 800826c:	ec41 0b1a 	vmov	d10, r0, r1
 8008270:	462b      	mov	r3, r5
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 f817 	bl	80002a8 <__aeabi_dsub>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	ec51 0b1a 	vmov	r0, r1, d10
 8008282:	f7f8 fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8008286:	2800      	cmp	r0, #0
 8008288:	f47f adf8 	bne.w	8007e7c <__ieee754_pow+0x384>
 800828c:	4aa4      	ldr	r2, [pc, #656]	; (8008520 <__ieee754_pow+0xa28>)
 800828e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008292:	4293      	cmp	r3, r2
 8008294:	f340 810b 	ble.w	80084ae <__ieee754_pow+0x9b6>
 8008298:	151b      	asrs	r3, r3, #20
 800829a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800829e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80082a2:	fa4a f303 	asr.w	r3, sl, r3
 80082a6:	445b      	add	r3, fp
 80082a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80082ac:	4e9d      	ldr	r6, [pc, #628]	; (8008524 <__ieee754_pow+0xa2c>)
 80082ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80082b2:	4116      	asrs	r6, r2
 80082b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80082b8:	2000      	movs	r0, #0
 80082ba:	ea23 0106 	bic.w	r1, r3, r6
 80082be:	f1c2 0214 	rsb	r2, r2, #20
 80082c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80082c6:	fa4a fa02 	asr.w	sl, sl, r2
 80082ca:	f1bb 0f00 	cmp.w	fp, #0
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	bfb8      	it	lt
 80082d8:	f1ca 0a00 	rsblt	sl, sl, #0
 80082dc:	f7f7 ffe4 	bl	80002a8 <__aeabi_dsub>
 80082e0:	ec41 0b19 	vmov	d9, r0, r1
 80082e4:	4642      	mov	r2, r8
 80082e6:	464b      	mov	r3, r9
 80082e8:	ec51 0b19 	vmov	r0, r1, d9
 80082ec:	f7f7 ffde 	bl	80002ac <__adddf3>
 80082f0:	2400      	movs	r4, #0
 80082f2:	a379      	add	r3, pc, #484	; (adr r3, 80084d8 <__ieee754_pow+0x9e0>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	4620      	mov	r0, r4
 80082fa:	460d      	mov	r5, r1
 80082fc:	f7f8 f98c 	bl	8000618 <__aeabi_dmul>
 8008300:	ec53 2b19 	vmov	r2, r3, d9
 8008304:	4606      	mov	r6, r0
 8008306:	460f      	mov	r7, r1
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f7 ffcc 	bl	80002a8 <__aeabi_dsub>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f7 ffc6 	bl	80002a8 <__aeabi_dsub>
 800831c:	a370      	add	r3, pc, #448	; (adr r3, 80084e0 <__ieee754_pow+0x9e8>)
 800831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008322:	f7f8 f979 	bl	8000618 <__aeabi_dmul>
 8008326:	a370      	add	r3, pc, #448	; (adr r3, 80084e8 <__ieee754_pow+0x9f0>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	4680      	mov	r8, r0
 800832e:	4689      	mov	r9, r1
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f8 f970 	bl	8000618 <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4640      	mov	r0, r8
 800833e:	4649      	mov	r1, r9
 8008340:	f7f7 ffb4 	bl	80002ac <__adddf3>
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f7 ffac 	bl	80002ac <__adddf3>
 8008354:	4632      	mov	r2, r6
 8008356:	463b      	mov	r3, r7
 8008358:	4680      	mov	r8, r0
 800835a:	4689      	mov	r9, r1
 800835c:	f7f7 ffa4 	bl	80002a8 <__aeabi_dsub>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f7 ff9e 	bl	80002a8 <__aeabi_dsub>
 800836c:	4642      	mov	r2, r8
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	464b      	mov	r3, r9
 8008374:	4640      	mov	r0, r8
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 f94e 	bl	8000618 <__aeabi_dmul>
 800837c:	a35c      	add	r3, pc, #368	; (adr r3, 80084f0 <__ieee754_pow+0x9f8>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	4604      	mov	r4, r0
 8008384:	460d      	mov	r5, r1
 8008386:	f7f8 f947 	bl	8000618 <__aeabi_dmul>
 800838a:	a35b      	add	r3, pc, #364	; (adr r3, 80084f8 <__ieee754_pow+0xa00>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	f7f7 ff8a 	bl	80002a8 <__aeabi_dsub>
 8008394:	4622      	mov	r2, r4
 8008396:	462b      	mov	r3, r5
 8008398:	f7f8 f93e 	bl	8000618 <__aeabi_dmul>
 800839c:	a358      	add	r3, pc, #352	; (adr r3, 8008500 <__ieee754_pow+0xa08>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff83 	bl	80002ac <__adddf3>
 80083a6:	4622      	mov	r2, r4
 80083a8:	462b      	mov	r3, r5
 80083aa:	f7f8 f935 	bl	8000618 <__aeabi_dmul>
 80083ae:	a356      	add	r3, pc, #344	; (adr r3, 8008508 <__ieee754_pow+0xa10>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff78 	bl	80002a8 <__aeabi_dsub>
 80083b8:	4622      	mov	r2, r4
 80083ba:	462b      	mov	r3, r5
 80083bc:	f7f8 f92c 	bl	8000618 <__aeabi_dmul>
 80083c0:	a353      	add	r3, pc, #332	; (adr r3, 8008510 <__ieee754_pow+0xa18>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f7 ff71 	bl	80002ac <__adddf3>
 80083ca:	4622      	mov	r2, r4
 80083cc:	462b      	mov	r3, r5
 80083ce:	f7f8 f923 	bl	8000618 <__aeabi_dmul>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	4640      	mov	r0, r8
 80083d8:	4649      	mov	r1, r9
 80083da:	f7f7 ff65 	bl	80002a8 <__aeabi_dsub>
 80083de:	4604      	mov	r4, r0
 80083e0:	460d      	mov	r5, r1
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	f7f8 f915 	bl	8000618 <__aeabi_dmul>
 80083ee:	2200      	movs	r2, #0
 80083f0:	ec41 0b19 	vmov	d9, r0, r1
 80083f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083f8:	4620      	mov	r0, r4
 80083fa:	4629      	mov	r1, r5
 80083fc:	f7f7 ff54 	bl	80002a8 <__aeabi_dsub>
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	ec51 0b19 	vmov	r0, r1, d9
 8008408:	f7f8 fa30 	bl	800086c <__aeabi_ddiv>
 800840c:	4632      	mov	r2, r6
 800840e:	4604      	mov	r4, r0
 8008410:	460d      	mov	r5, r1
 8008412:	463b      	mov	r3, r7
 8008414:	4640      	mov	r0, r8
 8008416:	4649      	mov	r1, r9
 8008418:	f7f8 f8fe 	bl	8000618 <__aeabi_dmul>
 800841c:	4632      	mov	r2, r6
 800841e:	463b      	mov	r3, r7
 8008420:	f7f7 ff44 	bl	80002ac <__adddf3>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4620      	mov	r0, r4
 800842a:	4629      	mov	r1, r5
 800842c:	f7f7 ff3c 	bl	80002a8 <__aeabi_dsub>
 8008430:	4642      	mov	r2, r8
 8008432:	464b      	mov	r3, r9
 8008434:	f7f7 ff38 	bl	80002a8 <__aeabi_dsub>
 8008438:	460b      	mov	r3, r1
 800843a:	4602      	mov	r2, r0
 800843c:	493a      	ldr	r1, [pc, #232]	; (8008528 <__ieee754_pow+0xa30>)
 800843e:	2000      	movs	r0, #0
 8008440:	f7f7 ff32 	bl	80002a8 <__aeabi_dsub>
 8008444:	e9cd 0100 	strd	r0, r1, [sp]
 8008448:	9b01      	ldr	r3, [sp, #4]
 800844a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008452:	da2f      	bge.n	80084b4 <__ieee754_pow+0x9bc>
 8008454:	4650      	mov	r0, sl
 8008456:	ed9d 0b00 	vldr	d0, [sp]
 800845a:	f000 f9cd 	bl	80087f8 <scalbn>
 800845e:	ec51 0b10 	vmov	r0, r1, d0
 8008462:	ec53 2b18 	vmov	r2, r3, d8
 8008466:	f7ff bbe0 	b.w	8007c2a <__ieee754_pow+0x132>
 800846a:	4b30      	ldr	r3, [pc, #192]	; (800852c <__ieee754_pow+0xa34>)
 800846c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008470:	429e      	cmp	r6, r3
 8008472:	f77f af0b 	ble.w	800828c <__ieee754_pow+0x794>
 8008476:	4b2e      	ldr	r3, [pc, #184]	; (8008530 <__ieee754_pow+0xa38>)
 8008478:	440b      	add	r3, r1
 800847a:	4303      	orrs	r3, r0
 800847c:	d00b      	beq.n	8008496 <__ieee754_pow+0x99e>
 800847e:	a326      	add	r3, pc, #152	; (adr r3, 8008518 <__ieee754_pow+0xa20>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	ec51 0b18 	vmov	r0, r1, d8
 8008488:	f7f8 f8c6 	bl	8000618 <__aeabi_dmul>
 800848c:	a322      	add	r3, pc, #136	; (adr r3, 8008518 <__ieee754_pow+0xa20>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7ff bbca 	b.w	8007c2a <__ieee754_pow+0x132>
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	f7f7 ff05 	bl	80002a8 <__aeabi_dsub>
 800849e:	4642      	mov	r2, r8
 80084a0:	464b      	mov	r3, r9
 80084a2:	f7f8 fb3f 	bl	8000b24 <__aeabi_dcmpge>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f aef0 	beq.w	800828c <__ieee754_pow+0x794>
 80084ac:	e7e7      	b.n	800847e <__ieee754_pow+0x986>
 80084ae:	f04f 0a00 	mov.w	sl, #0
 80084b2:	e717      	b.n	80082e4 <__ieee754_pow+0x7ec>
 80084b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b8:	4619      	mov	r1, r3
 80084ba:	e7d2      	b.n	8008462 <__ieee754_pow+0x96a>
 80084bc:	491a      	ldr	r1, [pc, #104]	; (8008528 <__ieee754_pow+0xa30>)
 80084be:	2000      	movs	r0, #0
 80084c0:	f7ff bb9e 	b.w	8007c00 <__ieee754_pow+0x108>
 80084c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084c8:	f7ff bb9a 	b.w	8007c00 <__ieee754_pow+0x108>
 80084cc:	9000      	str	r0, [sp, #0]
 80084ce:	f7ff bb76 	b.w	8007bbe <__ieee754_pow+0xc6>
 80084d2:	2100      	movs	r1, #0
 80084d4:	f7ff bb60 	b.w	8007b98 <__ieee754_pow+0xa0>
 80084d8:	00000000 	.word	0x00000000
 80084dc:	3fe62e43 	.word	0x3fe62e43
 80084e0:	fefa39ef 	.word	0xfefa39ef
 80084e4:	3fe62e42 	.word	0x3fe62e42
 80084e8:	0ca86c39 	.word	0x0ca86c39
 80084ec:	be205c61 	.word	0xbe205c61
 80084f0:	72bea4d0 	.word	0x72bea4d0
 80084f4:	3e663769 	.word	0x3e663769
 80084f8:	c5d26bf1 	.word	0xc5d26bf1
 80084fc:	3ebbbd41 	.word	0x3ebbbd41
 8008500:	af25de2c 	.word	0xaf25de2c
 8008504:	3f11566a 	.word	0x3f11566a
 8008508:	16bebd93 	.word	0x16bebd93
 800850c:	3f66c16c 	.word	0x3f66c16c
 8008510:	5555553e 	.word	0x5555553e
 8008514:	3fc55555 	.word	0x3fc55555
 8008518:	c2f8f359 	.word	0xc2f8f359
 800851c:	01a56e1f 	.word	0x01a56e1f
 8008520:	3fe00000 	.word	0x3fe00000
 8008524:	000fffff 	.word	0x000fffff
 8008528:	3ff00000 	.word	0x3ff00000
 800852c:	4090cbff 	.word	0x4090cbff
 8008530:	3f6f3400 	.word	0x3f6f3400
 8008534:	652b82fe 	.word	0x652b82fe
 8008538:	3c971547 	.word	0x3c971547

0800853c <__ieee754_sqrt>:
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	ec55 4b10 	vmov	r4, r5, d0
 8008544:	4e56      	ldr	r6, [pc, #344]	; (80086a0 <__ieee754_sqrt+0x164>)
 8008546:	43ae      	bics	r6, r5
 8008548:	ee10 0a10 	vmov	r0, s0
 800854c:	ee10 3a10 	vmov	r3, s0
 8008550:	4629      	mov	r1, r5
 8008552:	462a      	mov	r2, r5
 8008554:	d110      	bne.n	8008578 <__ieee754_sqrt+0x3c>
 8008556:	ee10 2a10 	vmov	r2, s0
 800855a:	462b      	mov	r3, r5
 800855c:	f7f8 f85c 	bl	8000618 <__aeabi_dmul>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f7 fea0 	bl	80002ac <__adddf3>
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	ec45 4b10 	vmov	d0, r4, r5
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	2d00      	cmp	r5, #0
 800857a:	dc10      	bgt.n	800859e <__ieee754_sqrt+0x62>
 800857c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008580:	4330      	orrs	r0, r6
 8008582:	d0f5      	beq.n	8008570 <__ieee754_sqrt+0x34>
 8008584:	b15d      	cbz	r5, 800859e <__ieee754_sqrt+0x62>
 8008586:	ee10 2a10 	vmov	r2, s0
 800858a:	462b      	mov	r3, r5
 800858c:	ee10 0a10 	vmov	r0, s0
 8008590:	f7f7 fe8a 	bl	80002a8 <__aeabi_dsub>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	f7f8 f968 	bl	800086c <__aeabi_ddiv>
 800859c:	e7e6      	b.n	800856c <__ieee754_sqrt+0x30>
 800859e:	1509      	asrs	r1, r1, #20
 80085a0:	d076      	beq.n	8008690 <__ieee754_sqrt+0x154>
 80085a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80085a6:	07ce      	lsls	r6, r1, #31
 80085a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80085ac:	bf5e      	ittt	pl
 80085ae:	0fda      	lsrpl	r2, r3, #31
 80085b0:	005b      	lslpl	r3, r3, #1
 80085b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80085b6:	0fda      	lsrs	r2, r3, #31
 80085b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80085bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80085c0:	2000      	movs	r0, #0
 80085c2:	106d      	asrs	r5, r5, #1
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	f04f 0e16 	mov.w	lr, #22
 80085ca:	4684      	mov	ip, r0
 80085cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085d0:	eb0c 0401 	add.w	r4, ip, r1
 80085d4:	4294      	cmp	r4, r2
 80085d6:	bfde      	ittt	le
 80085d8:	1b12      	suble	r2, r2, r4
 80085da:	eb04 0c01 	addle.w	ip, r4, r1
 80085de:	1840      	addle	r0, r0, r1
 80085e0:	0052      	lsls	r2, r2, #1
 80085e2:	f1be 0e01 	subs.w	lr, lr, #1
 80085e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80085ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80085ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085f2:	d1ed      	bne.n	80085d0 <__ieee754_sqrt+0x94>
 80085f4:	4671      	mov	r1, lr
 80085f6:	2720      	movs	r7, #32
 80085f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80085fc:	4562      	cmp	r2, ip
 80085fe:	eb04 060e 	add.w	r6, r4, lr
 8008602:	dc02      	bgt.n	800860a <__ieee754_sqrt+0xce>
 8008604:	d113      	bne.n	800862e <__ieee754_sqrt+0xf2>
 8008606:	429e      	cmp	r6, r3
 8008608:	d811      	bhi.n	800862e <__ieee754_sqrt+0xf2>
 800860a:	2e00      	cmp	r6, #0
 800860c:	eb06 0e04 	add.w	lr, r6, r4
 8008610:	da43      	bge.n	800869a <__ieee754_sqrt+0x15e>
 8008612:	f1be 0f00 	cmp.w	lr, #0
 8008616:	db40      	blt.n	800869a <__ieee754_sqrt+0x15e>
 8008618:	f10c 0801 	add.w	r8, ip, #1
 800861c:	eba2 020c 	sub.w	r2, r2, ip
 8008620:	429e      	cmp	r6, r3
 8008622:	bf88      	it	hi
 8008624:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008628:	1b9b      	subs	r3, r3, r6
 800862a:	4421      	add	r1, r4
 800862c:	46c4      	mov	ip, r8
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	3f01      	subs	r7, #1
 8008632:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008636:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800863a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800863e:	d1dd      	bne.n	80085fc <__ieee754_sqrt+0xc0>
 8008640:	4313      	orrs	r3, r2
 8008642:	d006      	beq.n	8008652 <__ieee754_sqrt+0x116>
 8008644:	1c4c      	adds	r4, r1, #1
 8008646:	bf13      	iteet	ne
 8008648:	3101      	addne	r1, #1
 800864a:	3001      	addeq	r0, #1
 800864c:	4639      	moveq	r1, r7
 800864e:	f021 0101 	bicne.w	r1, r1, #1
 8008652:	1043      	asrs	r3, r0, #1
 8008654:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008658:	0849      	lsrs	r1, r1, #1
 800865a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800865e:	07c2      	lsls	r2, r0, #31
 8008660:	bf48      	it	mi
 8008662:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008666:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800866a:	460c      	mov	r4, r1
 800866c:	463d      	mov	r5, r7
 800866e:	e77f      	b.n	8008570 <__ieee754_sqrt+0x34>
 8008670:	0ada      	lsrs	r2, r3, #11
 8008672:	3815      	subs	r0, #21
 8008674:	055b      	lsls	r3, r3, #21
 8008676:	2a00      	cmp	r2, #0
 8008678:	d0fa      	beq.n	8008670 <__ieee754_sqrt+0x134>
 800867a:	02d7      	lsls	r7, r2, #11
 800867c:	d50a      	bpl.n	8008694 <__ieee754_sqrt+0x158>
 800867e:	f1c1 0420 	rsb	r4, r1, #32
 8008682:	fa23 f404 	lsr.w	r4, r3, r4
 8008686:	1e4d      	subs	r5, r1, #1
 8008688:	408b      	lsls	r3, r1
 800868a:	4322      	orrs	r2, r4
 800868c:	1b41      	subs	r1, r0, r5
 800868e:	e788      	b.n	80085a2 <__ieee754_sqrt+0x66>
 8008690:	4608      	mov	r0, r1
 8008692:	e7f0      	b.n	8008676 <__ieee754_sqrt+0x13a>
 8008694:	0052      	lsls	r2, r2, #1
 8008696:	3101      	adds	r1, #1
 8008698:	e7ef      	b.n	800867a <__ieee754_sqrt+0x13e>
 800869a:	46e0      	mov	r8, ip
 800869c:	e7be      	b.n	800861c <__ieee754_sqrt+0xe0>
 800869e:	bf00      	nop
 80086a0:	7ff00000 	.word	0x7ff00000

080086a4 <fabs>:
 80086a4:	ec51 0b10 	vmov	r0, r1, d0
 80086a8:	ee10 2a10 	vmov	r2, s0
 80086ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80086b0:	ec43 2b10 	vmov	d0, r2, r3
 80086b4:	4770      	bx	lr

080086b6 <finite>:
 80086b6:	b082      	sub	sp, #8
 80086b8:	ed8d 0b00 	vstr	d0, [sp]
 80086bc:	9801      	ldr	r0, [sp, #4]
 80086be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80086c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80086c6:	0fc0      	lsrs	r0, r0, #31
 80086c8:	b002      	add	sp, #8
 80086ca:	4770      	bx	lr
 80086cc:	0000      	movs	r0, r0
	...

080086d0 <nan>:
 80086d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086d8 <nan+0x8>
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	00000000 	.word	0x00000000
 80086dc:	7ff80000 	.word	0x7ff80000

080086e0 <rint>:
 80086e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086e2:	ec51 0b10 	vmov	r0, r1, d0
 80086e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80086ee:	2e13      	cmp	r6, #19
 80086f0:	ee10 4a10 	vmov	r4, s0
 80086f4:	460b      	mov	r3, r1
 80086f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80086fa:	dc58      	bgt.n	80087ae <rint+0xce>
 80086fc:	2e00      	cmp	r6, #0
 80086fe:	da2b      	bge.n	8008758 <rint+0x78>
 8008700:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008704:	4302      	orrs	r2, r0
 8008706:	d023      	beq.n	8008750 <rint+0x70>
 8008708:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800870c:	4302      	orrs	r2, r0
 800870e:	4254      	negs	r4, r2
 8008710:	4314      	orrs	r4, r2
 8008712:	0c4b      	lsrs	r3, r1, #17
 8008714:	0b24      	lsrs	r4, r4, #12
 8008716:	045b      	lsls	r3, r3, #17
 8008718:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800871c:	ea44 0103 	orr.w	r1, r4, r3
 8008720:	4b32      	ldr	r3, [pc, #200]	; (80087ec <rint+0x10c>)
 8008722:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008726:	e9d3 6700 	ldrd	r6, r7, [r3]
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4630      	mov	r0, r6
 8008730:	4639      	mov	r1, r7
 8008732:	f7f7 fdbb 	bl	80002ac <__adddf3>
 8008736:	e9cd 0100 	strd	r0, r1, [sp]
 800873a:	463b      	mov	r3, r7
 800873c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008740:	4632      	mov	r2, r6
 8008742:	f7f7 fdb1 	bl	80002a8 <__aeabi_dsub>
 8008746:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800874a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800874e:	4639      	mov	r1, r7
 8008750:	ec41 0b10 	vmov	d0, r0, r1
 8008754:	b003      	add	sp, #12
 8008756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008758:	4a25      	ldr	r2, [pc, #148]	; (80087f0 <rint+0x110>)
 800875a:	4132      	asrs	r2, r6
 800875c:	ea01 0702 	and.w	r7, r1, r2
 8008760:	4307      	orrs	r7, r0
 8008762:	d0f5      	beq.n	8008750 <rint+0x70>
 8008764:	0851      	lsrs	r1, r2, #1
 8008766:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800876a:	4314      	orrs	r4, r2
 800876c:	d00c      	beq.n	8008788 <rint+0xa8>
 800876e:	ea23 0201 	bic.w	r2, r3, r1
 8008772:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008776:	2e13      	cmp	r6, #19
 8008778:	fa43 f606 	asr.w	r6, r3, r6
 800877c:	bf0c      	ite	eq
 800877e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008782:	2400      	movne	r4, #0
 8008784:	ea42 0306 	orr.w	r3, r2, r6
 8008788:	4918      	ldr	r1, [pc, #96]	; (80087ec <rint+0x10c>)
 800878a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800878e:	4622      	mov	r2, r4
 8008790:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008794:	4620      	mov	r0, r4
 8008796:	4629      	mov	r1, r5
 8008798:	f7f7 fd88 	bl	80002ac <__adddf3>
 800879c:	e9cd 0100 	strd	r0, r1, [sp]
 80087a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087a4:	4622      	mov	r2, r4
 80087a6:	462b      	mov	r3, r5
 80087a8:	f7f7 fd7e 	bl	80002a8 <__aeabi_dsub>
 80087ac:	e7d0      	b.n	8008750 <rint+0x70>
 80087ae:	2e33      	cmp	r6, #51	; 0x33
 80087b0:	dd07      	ble.n	80087c2 <rint+0xe2>
 80087b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80087b6:	d1cb      	bne.n	8008750 <rint+0x70>
 80087b8:	ee10 2a10 	vmov	r2, s0
 80087bc:	f7f7 fd76 	bl	80002ac <__adddf3>
 80087c0:	e7c6      	b.n	8008750 <rint+0x70>
 80087c2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80087c6:	f04f 36ff 	mov.w	r6, #4294967295
 80087ca:	40d6      	lsrs	r6, r2
 80087cc:	4230      	tst	r0, r6
 80087ce:	d0bf      	beq.n	8008750 <rint+0x70>
 80087d0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80087d4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80087d8:	bf1f      	itttt	ne
 80087da:	ea24 0101 	bicne.w	r1, r4, r1
 80087de:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80087e2:	fa44 f202 	asrne.w	r2, r4, r2
 80087e6:	ea41 0402 	orrne.w	r4, r1, r2
 80087ea:	e7cd      	b.n	8008788 <rint+0xa8>
 80087ec:	08008b48 	.word	0x08008b48
 80087f0:	000fffff 	.word	0x000fffff
 80087f4:	00000000 	.word	0x00000000

080087f8 <scalbn>:
 80087f8:	b570      	push	{r4, r5, r6, lr}
 80087fa:	ec55 4b10 	vmov	r4, r5, d0
 80087fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008802:	4606      	mov	r6, r0
 8008804:	462b      	mov	r3, r5
 8008806:	b99a      	cbnz	r2, 8008830 <scalbn+0x38>
 8008808:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800880c:	4323      	orrs	r3, r4
 800880e:	d036      	beq.n	800887e <scalbn+0x86>
 8008810:	4b39      	ldr	r3, [pc, #228]	; (80088f8 <scalbn+0x100>)
 8008812:	4629      	mov	r1, r5
 8008814:	ee10 0a10 	vmov	r0, s0
 8008818:	2200      	movs	r2, #0
 800881a:	f7f7 fefd 	bl	8000618 <__aeabi_dmul>
 800881e:	4b37      	ldr	r3, [pc, #220]	; (80088fc <scalbn+0x104>)
 8008820:	429e      	cmp	r6, r3
 8008822:	4604      	mov	r4, r0
 8008824:	460d      	mov	r5, r1
 8008826:	da10      	bge.n	800884a <scalbn+0x52>
 8008828:	a32b      	add	r3, pc, #172	; (adr r3, 80088d8 <scalbn+0xe0>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	e03a      	b.n	80088a6 <scalbn+0xae>
 8008830:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008834:	428a      	cmp	r2, r1
 8008836:	d10c      	bne.n	8008852 <scalbn+0x5a>
 8008838:	ee10 2a10 	vmov	r2, s0
 800883c:	4620      	mov	r0, r4
 800883e:	4629      	mov	r1, r5
 8008840:	f7f7 fd34 	bl	80002ac <__adddf3>
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	e019      	b.n	800887e <scalbn+0x86>
 800884a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800884e:	460b      	mov	r3, r1
 8008850:	3a36      	subs	r2, #54	; 0x36
 8008852:	4432      	add	r2, r6
 8008854:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008858:	428a      	cmp	r2, r1
 800885a:	dd08      	ble.n	800886e <scalbn+0x76>
 800885c:	2d00      	cmp	r5, #0
 800885e:	a120      	add	r1, pc, #128	; (adr r1, 80088e0 <scalbn+0xe8>)
 8008860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008864:	da1c      	bge.n	80088a0 <scalbn+0xa8>
 8008866:	a120      	add	r1, pc, #128	; (adr r1, 80088e8 <scalbn+0xf0>)
 8008868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800886c:	e018      	b.n	80088a0 <scalbn+0xa8>
 800886e:	2a00      	cmp	r2, #0
 8008870:	dd08      	ble.n	8008884 <scalbn+0x8c>
 8008872:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008876:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800887a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800887e:	ec45 4b10 	vmov	d0, r4, r5
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008888:	da19      	bge.n	80088be <scalbn+0xc6>
 800888a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800888e:	429e      	cmp	r6, r3
 8008890:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008894:	dd0a      	ble.n	80088ac <scalbn+0xb4>
 8008896:	a112      	add	r1, pc, #72	; (adr r1, 80088e0 <scalbn+0xe8>)
 8008898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e2      	bne.n	8008866 <scalbn+0x6e>
 80088a0:	a30f      	add	r3, pc, #60	; (adr r3, 80088e0 <scalbn+0xe8>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 feb7 	bl	8000618 <__aeabi_dmul>
 80088aa:	e7cb      	b.n	8008844 <scalbn+0x4c>
 80088ac:	a10a      	add	r1, pc, #40	; (adr r1, 80088d8 <scalbn+0xe0>)
 80088ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0b8      	beq.n	8008828 <scalbn+0x30>
 80088b6:	a10e      	add	r1, pc, #56	; (adr r1, 80088f0 <scalbn+0xf8>)
 80088b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088bc:	e7b4      	b.n	8008828 <scalbn+0x30>
 80088be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088c2:	3236      	adds	r2, #54	; 0x36
 80088c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80088cc:	4620      	mov	r0, r4
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <scalbn+0x108>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	e7e8      	b.n	80088a6 <scalbn+0xae>
 80088d4:	f3af 8000 	nop.w
 80088d8:	c2f8f359 	.word	0xc2f8f359
 80088dc:	01a56e1f 	.word	0x01a56e1f
 80088e0:	8800759c 	.word	0x8800759c
 80088e4:	7e37e43c 	.word	0x7e37e43c
 80088e8:	8800759c 	.word	0x8800759c
 80088ec:	fe37e43c 	.word	0xfe37e43c
 80088f0:	c2f8f359 	.word	0xc2f8f359
 80088f4:	81a56e1f 	.word	0x81a56e1f
 80088f8:	43500000 	.word	0x43500000
 80088fc:	ffff3cb0 	.word	0xffff3cb0
 8008900:	3c900000 	.word	0x3c900000

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr

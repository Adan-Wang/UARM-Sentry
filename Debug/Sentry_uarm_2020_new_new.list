
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005040  08005040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005108  08005108  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040e4  20000010  08005120  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040f4  08005120  000240f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001495c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e61  00000000  00000000  0003499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00037800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  00038880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002471a  00000000  00000000  00039798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7a6  00000000  00000000  0005deb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de14b  00000000  00000000  0006c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a7a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004428  00000000  00000000  0014a820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005028 	.word	0x08005028

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005028 	.word	0x08005028

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b972 	b.w	8000cd8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9e08      	ldr	r6, [sp, #32]
 8000a12:	4604      	mov	r4, r0
 8000a14:	4688      	mov	r8, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d14b      	bne.n	8000ab2 <__udivmoddi4+0xa6>
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	d967      	bls.n	8000af0 <__udivmoddi4+0xe4>
 8000a20:	fab2 f282 	clz	r2, r2
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0720 	rsb	r7, r2, #32
 8000a2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a32:	4095      	lsls	r5, r2
 8000a34:	ea47 0803 	orr.w	r8, r7, r3
 8000a38:	4094      	lsls	r4, r2
 8000a3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a3e:	0c23      	lsrs	r3, r4, #16
 8000a40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a44:	fa1f fc85 	uxth.w	ip, r5
 8000a48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a50:	fb07 f10c 	mul.w	r1, r7, ip
 8000a54:	4299      	cmp	r1, r3
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x60>
 8000a58:	18eb      	adds	r3, r5, r3
 8000a5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a5e:	f080 811b 	bcs.w	8000c98 <__udivmoddi4+0x28c>
 8000a62:	4299      	cmp	r1, r3
 8000a64:	f240 8118 	bls.w	8000c98 <__udivmoddi4+0x28c>
 8000a68:	3f02      	subs	r7, #2
 8000a6a:	442b      	add	r3, r5
 8000a6c:	1a5b      	subs	r3, r3, r1
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a80:	45a4      	cmp	ip, r4
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x8c>
 8000a84:	192c      	adds	r4, r5, r4
 8000a86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a8a:	f080 8107 	bcs.w	8000c9c <__udivmoddi4+0x290>
 8000a8e:	45a4      	cmp	ip, r4
 8000a90:	f240 8104 	bls.w	8000c9c <__udivmoddi4+0x290>
 8000a94:	3802      	subs	r0, #2
 8000a96:	442c      	add	r4, r5
 8000a98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a9c:	eba4 040c 	sub.w	r4, r4, ip
 8000aa0:	2700      	movs	r7, #0
 8000aa2:	b11e      	cbz	r6, 8000aac <__udivmoddi4+0xa0>
 8000aa4:	40d4      	lsrs	r4, r2
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d909      	bls.n	8000aca <__udivmoddi4+0xbe>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	f000 80eb 	beq.w	8000c92 <__udivmoddi4+0x286>
 8000abc:	2700      	movs	r7, #0
 8000abe:	e9c6 0100 	strd	r0, r1, [r6]
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	4639      	mov	r1, r7
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	fab3 f783 	clz	r7, r3
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d147      	bne.n	8000b62 <__udivmoddi4+0x156>
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xd0>
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	f200 80fa 	bhi.w	8000cd0 <__udivmoddi4+0x2c4>
 8000adc:	1a84      	subs	r4, r0, r2
 8000ade:	eb61 0303 	sbc.w	r3, r1, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d0e0      	beq.n	8000aac <__udivmoddi4+0xa0>
 8000aea:	e9c6 4800 	strd	r4, r8, [r6]
 8000aee:	e7dd      	b.n	8000aac <__udivmoddi4+0xa0>
 8000af0:	b902      	cbnz	r2, 8000af4 <__udivmoddi4+0xe8>
 8000af2:	deff      	udf	#255	; 0xff
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	2a00      	cmp	r2, #0
 8000afa:	f040 808f 	bne.w	8000c1c <__udivmoddi4+0x210>
 8000afe:	1b49      	subs	r1, r1, r5
 8000b00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b04:	fa1f f885 	uxth.w	r8, r5
 8000b08:	2701      	movs	r7, #1
 8000b0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b18:	fb08 f10c 	mul.w	r1, r8, ip
 8000b1c:	4299      	cmp	r1, r3
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x124>
 8000b20:	18eb      	adds	r3, r5, r3
 8000b22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x122>
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	f200 80cd 	bhi.w	8000cc8 <__udivmoddi4+0x2bc>
 8000b2e:	4684      	mov	ip, r0
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	b2a3      	uxth	r3, r4
 8000b34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b40:	fb08 f800 	mul.w	r8, r8, r0
 8000b44:	45a0      	cmp	r8, r4
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x14c>
 8000b48:	192c      	adds	r4, r5, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x14a>
 8000b50:	45a0      	cmp	r8, r4
 8000b52:	f200 80b6 	bhi.w	8000cc2 <__udivmoddi4+0x2b6>
 8000b56:	4618      	mov	r0, r3
 8000b58:	eba4 0408 	sub.w	r4, r4, r8
 8000b5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b60:	e79f      	b.n	8000aa2 <__udivmoddi4+0x96>
 8000b62:	f1c7 0c20 	rsb	ip, r7, #32
 8000b66:	40bb      	lsls	r3, r7
 8000b68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b70:	fa01 f407 	lsl.w	r4, r1, r7
 8000b74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b80:	4325      	orrs	r5, r4
 8000b82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b86:	0c2c      	lsrs	r4, r5, #16
 8000b88:	fb08 3319 	mls	r3, r8, r9, r3
 8000b8c:	fa1f fa8e 	uxth.w	sl, lr
 8000b90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b94:	fb09 f40a 	mul.w	r4, r9, sl
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ba2:	d90b      	bls.n	8000bbc <__udivmoddi4+0x1b0>
 8000ba4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ba8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bac:	f080 8087 	bcs.w	8000cbe <__udivmoddi4+0x2b2>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f240 8084 	bls.w	8000cbe <__udivmoddi4+0x2b2>
 8000bb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bba:	4473      	add	r3, lr
 8000bbc:	1b1b      	subs	r3, r3, r4
 8000bbe:	b2ad      	uxth	r5, r5
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bd0:	45a2      	cmp	sl, r4
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x1da>
 8000bd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bdc:	d26b      	bcs.n	8000cb6 <__udivmoddi4+0x2aa>
 8000bde:	45a2      	cmp	sl, r4
 8000be0:	d969      	bls.n	8000cb6 <__udivmoddi4+0x2aa>
 8000be2:	3802      	subs	r0, #2
 8000be4:	4474      	add	r4, lr
 8000be6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bea:	fba0 8902 	umull	r8, r9, r0, r2
 8000bee:	eba4 040a 	sub.w	r4, r4, sl
 8000bf2:	454c      	cmp	r4, r9
 8000bf4:	46c2      	mov	sl, r8
 8000bf6:	464b      	mov	r3, r9
 8000bf8:	d354      	bcc.n	8000ca4 <__udivmoddi4+0x298>
 8000bfa:	d051      	beq.n	8000ca0 <__udivmoddi4+0x294>
 8000bfc:	2e00      	cmp	r6, #0
 8000bfe:	d069      	beq.n	8000cd4 <__udivmoddi4+0x2c8>
 8000c00:	ebb1 050a 	subs.w	r5, r1, sl
 8000c04:	eb64 0403 	sbc.w	r4, r4, r3
 8000c08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c0c:	40fd      	lsrs	r5, r7
 8000c0e:	40fc      	lsrs	r4, r7
 8000c10:	ea4c 0505 	orr.w	r5, ip, r5
 8000c14:	e9c6 5400 	strd	r5, r4, [r6]
 8000c18:	2700      	movs	r7, #0
 8000c1a:	e747      	b.n	8000aac <__udivmoddi4+0xa0>
 8000c1c:	f1c2 0320 	rsb	r3, r2, #32
 8000c20:	fa20 f703 	lsr.w	r7, r0, r3
 8000c24:	4095      	lsls	r5, r2
 8000c26:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	4338      	orrs	r0, r7
 8000c34:	0c01      	lsrs	r1, r0, #16
 8000c36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c3a:	fa1f f885 	uxth.w	r8, r5
 8000c3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c46:	fb07 f308 	mul.w	r3, r7, r8
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x256>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c58:	d22f      	bcs.n	8000cba <__udivmoddi4+0x2ae>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d92d      	bls.n	8000cba <__udivmoddi4+0x2ae>
 8000c5e:	3f02      	subs	r7, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	b281      	uxth	r1, r0
 8000c66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c72:	fb00 f308 	mul.w	r3, r0, r8
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x27e>
 8000c7a:	1869      	adds	r1, r5, r1
 8000c7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c80:	d217      	bcs.n	8000cb2 <__udivmoddi4+0x2a6>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d915      	bls.n	8000cb2 <__udivmoddi4+0x2a6>
 8000c86:	3802      	subs	r0, #2
 8000c88:	4429      	add	r1, r5
 8000c8a:	1ac9      	subs	r1, r1, r3
 8000c8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c90:	e73b      	b.n	8000b0a <__udivmoddi4+0xfe>
 8000c92:	4637      	mov	r7, r6
 8000c94:	4630      	mov	r0, r6
 8000c96:	e709      	b.n	8000aac <__udivmoddi4+0xa0>
 8000c98:	4607      	mov	r7, r0
 8000c9a:	e6e7      	b.n	8000a6c <__udivmoddi4+0x60>
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	e6fb      	b.n	8000a98 <__udivmoddi4+0x8c>
 8000ca0:	4541      	cmp	r1, r8
 8000ca2:	d2ab      	bcs.n	8000bfc <__udivmoddi4+0x1f0>
 8000ca4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ca8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cac:	3801      	subs	r0, #1
 8000cae:	4613      	mov	r3, r2
 8000cb0:	e7a4      	b.n	8000bfc <__udivmoddi4+0x1f0>
 8000cb2:	4660      	mov	r0, ip
 8000cb4:	e7e9      	b.n	8000c8a <__udivmoddi4+0x27e>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	e795      	b.n	8000be6 <__udivmoddi4+0x1da>
 8000cba:	4667      	mov	r7, ip
 8000cbc:	e7d1      	b.n	8000c62 <__udivmoddi4+0x256>
 8000cbe:	4681      	mov	r9, r0
 8000cc0:	e77c      	b.n	8000bbc <__udivmoddi4+0x1b0>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	442c      	add	r4, r5
 8000cc6:	e747      	b.n	8000b58 <__udivmoddi4+0x14c>
 8000cc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ccc:	442b      	add	r3, r5
 8000cce:	e72f      	b.n	8000b30 <__udivmoddi4+0x124>
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	e708      	b.n	8000ae6 <__udivmoddi4+0xda>
 8000cd4:	4637      	mov	r7, r6
 8000cd6:	e6e9      	b.n	8000aac <__udivmoddi4+0xa0>

08000cd8 <__aeabi_idiv0>:
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD_B_GPIO_Port,LD_B_Pin);
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <Chassis_Task_Func+0x20>)
 8000ce8:	f001 fd21 	bl	800272e <HAL_GPIO_TogglePin>
  /* USER CODE BEGIN Chassis_Task_Func */
  /* Infinite loop */
  for(;;)
  {

    osDelay(500);
 8000cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf0:	f002 ffbb 	bl	8003c6a <osDelay>
    osDelay(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f002 ffb8 	bl	8003c6a <osDelay>
    osDelay(500);
 8000cfa:	e7f7      	b.n	8000cec <Chassis_Task_Func+0x10>
 8000cfc:	40021800 	.word	0x40021800

08000d00 <Gimbal_Task_Function>:

#include "Gimbal_App.h"


void Gimbal_Task_Function(void const * argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Gimbal_Task_Function */
  /* Infinite loop */
	buzzer_play_chromatic(100);
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f000 fa5f 	bl	80011cc <buzzer_play_chromatic>
	buzzer_play_o_canada(100);
 8000d0e:	2064      	movs	r0, #100	; 0x64
 8000d10:	f000 fa8c 	bl	800122c <buzzer_play_o_canada>

  for(;;)
  {
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000d14:	2140      	movs	r1, #64	; 0x40
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <Gimbal_Task_Function+0x2c>)
 8000d18:	f001 fd09 	bl	800272e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f002 ffa3 	bl	8003c6a <osDelay>
	  osDelay(1);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f002 ffa0 	bl	8003c6a <osDelay>
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000d2a:	e7f3      	b.n	8000d14 <Gimbal_Task_Function+0x14>
 8000d2c:	40021800 	.word	0x40021800

08000d30 <Shoot_Task_Func>:
 */
#include "Shoot_App.h"
void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000d38:	f000 f81c 	bl	8000d74 <shoot_init>
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <Shoot_Task_Func+0x3c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <Shoot_Task_Func+0x3c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 8000d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <Shoot_Task_Func+0x40>)
 8000d56:	f001 fcea 	bl	800272e <HAL_GPIO_TogglePin>
    osDelay(500);
 8000d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5e:	f002 ff84 	bl	8003c6a <osDelay>
    osDelay(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f002 ff81 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000d68:	e7e8      	b.n	8000d3c <Shoot_Task_Func+0xc>
 8000d6a:	bf00      	nop
 8000d6c:	20003fd0 	.word	0x20003fd0
 8000d70:	40021800 	.word	0x40021800

08000d74 <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <shoot_init+0x50>)
 8000d7c:	f002 f9d0 	bl	8003120 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000d80:	2108      	movs	r1, #8
 8000d82:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <shoot_init+0x50>)
 8000d84:	f002 f9cc 	bl	8003120 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,2000);
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <shoot_init+0x50>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d90:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000);
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <shoot_init+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000d9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da0:	f002 ff63 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <shoot_init+0x50>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1000);
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <shoot_init+0x50>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000db8:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000dbc:	f002 ff55 	bl	8003c6a <osDelay>

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20003fd0 	.word	0x20003fd0

08000dc8 <buzzer_init>:
 *      Author: AzureRin
 */

#include "buzzer.h"

void buzzer_init(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <buzzer_init+0x10>)
 8000dd0:	f002 f9a6 	bl	8003120 <HAL_TIM_PWM_Start>

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20004060 	.word	0x20004060

08000ddc <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <buzzer_play_c1+0x44>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <buzzer_play_c1+0x44>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <buzzer_play_c1+0x44>)
 8000df8:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8000dfc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <buzzer_play_c1+0x44>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2264      	movs	r2, #100	; 0x64
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 ff2e 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <buzzer_play_c1+0x44>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20004060 	.word	0x20004060

08000e24 <buzzer_play_cs1>:

void buzzer_play_cs1(int32_t duration){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <buzzer_play_cs1+0x44>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,6733);
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <buzzer_play_cs1+0x44>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f641 224d 	movw	r2, #6733	; 0x1a4d
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <buzzer_play_cs1+0x44>)
 8000e40:	f641 224d 	movw	r2, #6733	; 0x1a4d
 8000e44:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <buzzer_play_cs1+0x44>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2264      	movs	r2, #100	; 0x64
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 ff0a 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <buzzer_play_cs1+0x44>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20004060 	.word	0x20004060

08000e6c <buzzer_play_d1>:

void buzzer_play_d1(int32_t duration){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 28);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <buzzer_play_d1+0x44>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,6355);
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <buzzer_play_d1+0x44>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f641 02d3 	movw	r2, #6355	; 0x18d3
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <buzzer_play_d1+0x44>)
 8000e88:	f641 02d3 	movw	r2, #6355	; 0x18d3
 8000e8c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <buzzer_play_d1+0x44>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2264      	movs	r2, #100	; 0x64
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 fee6 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <buzzer_play_d1+0x44>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20004060 	.word	0x20004060

08000eb4 <buzzer_play_ds1>:

void buzzer_play_ds1(int32_t duration){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 28);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <buzzer_play_ds1+0x44>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5999);
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <buzzer_play_ds1+0x44>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f241 726f 	movw	r2, #5999	; 0x176f
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <buzzer_play_ds1+0x44>)
 8000ed0:	f241 726f 	movw	r2, #5999	; 0x176f
 8000ed4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <buzzer_play_ds1+0x44>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2264      	movs	r2, #100	; 0x64
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fec2 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <buzzer_play_ds1+0x44>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20004060 	.word	0x20004060

08000efc <buzzer_play_e1>:

void buzzer_play_e1(int32_t duration){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <buzzer_play_e1+0x44>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <buzzer_play_e1+0x44>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f241 621e 	movw	r2, #5662	; 0x161e
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <buzzer_play_e1+0x44>)
 8000f18:	f241 621e 	movw	r2, #5662	; 0x161e
 8000f1c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <buzzer_play_e1+0x44>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2264      	movs	r2, #100	; 0x64
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fe9e 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <buzzer_play_e1+0x44>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20004060 	.word	0x20004060

08000f44 <buzzer_play_f1>:

void buzzer_play_f1(int32_t duration){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 24);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <buzzer_play_f1+0x44>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5345);
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <buzzer_play_f1+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f241 42e1 	movw	r2, #5345	; 0x14e1
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <buzzer_play_f1+0x44>)
 8000f60:	f241 42e1 	movw	r2, #5345	; 0x14e1
 8000f64:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <buzzer_play_f1+0x44>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2264      	movs	r2, #100	; 0x64
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fe7a 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <buzzer_play_f1+0x44>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20004060 	.word	0x20004060

08000f8c <buzzer_play_fs1>:

void buzzer_play_fs1(int32_t duration){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 24);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <buzzer_play_fs1+0x44>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5044);
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <buzzer_play_fs1+0x44>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f241 32b4 	movw	r2, #5044	; 0x13b4
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <buzzer_play_fs1+0x44>)
 8000fa8:	f241 32b4 	movw	r2, #5044	; 0x13b4
 8000fac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <buzzer_play_fs1+0x44>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2264      	movs	r2, #100	; 0x64
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f002 fe56 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <buzzer_play_fs1+0x44>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20004060 	.word	0x20004060

08000fd4 <buzzer_play_g1>:

void buzzer_play_g1(int32_t duration){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <buzzer_play_g1+0x44>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <buzzer_play_g1+0x44>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f241 2299 	movw	r2, #4761	; 0x1299
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <buzzer_play_g1+0x44>)
 8000ff0:	f241 2299 	movw	r2, #4761	; 0x1299
 8000ff4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <buzzer_play_g1+0x44>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2264      	movs	r2, #100	; 0x64
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	f002 fe32 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <buzzer_play_g1+0x44>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20004060 	.word	0x20004060

0800101c <buzzer_play_gs1>:


void buzzer_play_gs1(int32_t duration){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <buzzer_play_gs1+0x44>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4494);
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <buzzer_play_gs1+0x44>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f241 128e 	movw	r2, #4494	; 0x118e
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <buzzer_play_gs1+0x44>)
 8001038:	f241 128e 	movw	r2, #4494	; 0x118e
 800103c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <buzzer_play_gs1+0x44>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2264      	movs	r2, #100	; 0x64
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fe0e 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <buzzer_play_gs1+0x44>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20004060 	.word	0x20004060

08001064 <buzzer_play_a1>:

void buzzer_play_a1(int32_t duration){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 19);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <buzzer_play_a1+0x44>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4241);
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <buzzer_play_a1+0x44>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f241 0291 	movw	r2, #4241	; 0x1091
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <buzzer_play_a1+0x44>)
 8001080:	f241 0291 	movw	r2, #4241	; 0x1091
 8001084:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <buzzer_play_a1+0x44>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2264      	movs	r2, #100	; 0x64
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fdea 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <buzzer_play_a1+0x44>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20004060 	.word	0x20004060

080010ac <buzzer_play_as1>:

void buzzer_play_as1(int32_t duration){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 19);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <buzzer_play_as1+0x44>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4003);
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <buzzer_play_as1+0x44>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f640 72a3 	movw	r2, #4003	; 0xfa3
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <buzzer_play_as1+0x44>)
 80010c8:	f640 72a3 	movw	r2, #4003	; 0xfa3
 80010cc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <buzzer_play_as1+0x44>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2264      	movs	r2, #100	; 0x64
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 fdc6 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <buzzer_play_as1+0x44>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20004060 	.word	0x20004060

080010f4 <buzzer_play_b1>:

void buzzer_play_b1(int32_t duration){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 17);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <buzzer_play_b1+0x44>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,3778);
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <buzzer_play_b1+0x44>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f640 62c2 	movw	r2, #3778	; 0xec2
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <buzzer_play_b1+0x44>)
 8001110:	f640 62c2 	movw	r2, #3778	; 0xec2
 8001114:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <buzzer_play_b1+0x44>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2264      	movs	r2, #100	; 0x64
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fda2 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <buzzer_play_b1+0x44>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20004060 	.word	0x20004060

0800113c <buzzer_play_c2>:

void buzzer_play_c2(int32_t duration){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 16);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <buzzer_play_c2+0x44>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,3566);
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <buzzer_play_c2+0x44>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f640 52ee 	movw	r2, #3566	; 0xdee
 8001154:	62da      	str	r2, [r3, #44]	; 0x2c
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <buzzer_play_c2+0x44>)
 8001158:	f640 52ee 	movw	r2, #3566	; 0xdee
 800115c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <buzzer_play_c2+0x44>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2264      	movs	r2, #100	; 0x64
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fd7e 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <buzzer_play_c2+0x44>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20004060 	.word	0x20004060

08001184 <buzzer_play_d2>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_d2(int32_t duration){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 16);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <buzzer_play_d2+0x44>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,3177);
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <buzzer_play_d2+0x44>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f640 4269 	movw	r2, #3177	; 0xc69
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <buzzer_play_d2+0x44>)
 80011a0:	f640 4269 	movw	r2, #3177	; 0xc69
 80011a4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <buzzer_play_d2+0x44>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2264      	movs	r2, #100	; 0x64
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 fd5a 	bl	8003c6a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <buzzer_play_d2+0x44>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20004060 	.word	0x20004060

080011cc <buzzer_play_chromatic>:
	buzzer_play_a1(duration);
	buzzer_play_b1(duration);
	buzzer_play_c2(duration);
}

void buzzer_play_chromatic(int32_t duration){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	buzzer_play_c1(duration);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fe01 	bl	8000ddc <buzzer_play_c1>
	buzzer_play_cs1(duration);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fe22 	bl	8000e24 <buzzer_play_cs1>
	buzzer_play_d1(duration);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fe43 	bl	8000e6c <buzzer_play_d1>
	buzzer_play_ds1(duration);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe64 	bl	8000eb4 <buzzer_play_ds1>
	buzzer_play_e1(duration);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fe85 	bl	8000efc <buzzer_play_e1>
	buzzer_play_f1(duration);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fea6 	bl	8000f44 <buzzer_play_f1>
	buzzer_play_fs1(duration);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fec7 	bl	8000f8c <buzzer_play_fs1>
	buzzer_play_g1(duration);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fee8 	bl	8000fd4 <buzzer_play_g1>
	buzzer_play_gs1(duration);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff09 	bl	800101c <buzzer_play_gs1>
	buzzer_play_a1(duration);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff2a 	bl	8001064 <buzzer_play_a1>
	buzzer_play_as1(duration);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff4b 	bl	80010ac <buzzer_play_as1>
	buzzer_play_b1(duration);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff6c 	bl	80010f4 <buzzer_play_b1>
	buzzer_play_c2(duration);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff8d 	bl	800113c <buzzer_play_c2>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <buzzer_play_o_canada>:

void buzzer_play_o_canada(int32_t bpm){
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b08d      	sub	sp, #52	; 0x34
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f92d 	bl	8000494 <__aeabi_i2d>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	461a      	mov	r2, r3
 8001240:	4623      	mov	r3, r4
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	49bf      	ldr	r1, [pc, #764]	; (8001544 <buzzer_play_o_canada+0x318>)
 8001248:	f7ff fab8 	bl	80007bc <__aeabi_ddiv>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	4618      	mov	r0, r3
 8001252:	4621      	mov	r1, r4
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4bbb      	ldr	r3, [pc, #748]	; (8001548 <buzzer_play_o_canada+0x31c>)
 800125a:	f7ff f985 	bl	8000568 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	4618      	mov	r0, r3
 8001264:	4621      	mov	r1, r4
 8001266:	f7ff fb91 	bl	800098c <__aeabi_d2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff f910 	bl	8000494 <__aeabi_i2d>
 8001274:	4603      	mov	r3, r0
 8001276:	460c      	mov	r4, r1
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	f04f 0000 	mov.w	r0, #0
 8001280:	49b0      	ldr	r1, [pc, #704]	; (8001544 <buzzer_play_o_canada+0x318>)
 8001282:	f7ff fa9b 	bl	80007bc <__aeabi_ddiv>
 8001286:	4603      	mov	r3, r0
 8001288:	460c      	mov	r4, r1
 800128a:	4618      	mov	r0, r3
 800128c:	4621      	mov	r1, r4
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4bad      	ldr	r3, [pc, #692]	; (8001548 <buzzer_play_o_canada+0x31c>)
 8001294:	f7ff f968 	bl	8000568 <__aeabi_dmul>
 8001298:	4603      	mov	r3, r0
 800129a:	460c      	mov	r4, r1
 800129c:	4618      	mov	r0, r3
 800129e:	4621      	mov	r1, r4
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	4ba9      	ldr	r3, [pc, #676]	; (800154c <buzzer_play_o_canada+0x320>)
 80012a6:	f7ff f95f 	bl	8000568 <__aeabi_dmul>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff fb6b 	bl	800098c <__aeabi_d2iz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff f8ea 	bl	8000494 <__aeabi_i2d>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	461a      	mov	r2, r3
 80012c6:	4623      	mov	r3, r4
 80012c8:	f04f 0000 	mov.w	r0, #0
 80012cc:	499d      	ldr	r1, [pc, #628]	; (8001544 <buzzer_play_o_canada+0x318>)
 80012ce:	f7ff fa75 	bl	80007bc <__aeabi_ddiv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	460c      	mov	r4, r1
 80012d6:	4618      	mov	r0, r3
 80012d8:	4621      	mov	r1, r4
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b9a      	ldr	r3, [pc, #616]	; (8001548 <buzzer_play_o_canada+0x31c>)
 80012e0:	f7ff f942 	bl	8000568 <__aeabi_dmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	4618      	mov	r0, r3
 80012ea:	4621      	mov	r1, r4
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b97      	ldr	r3, [pc, #604]	; (8001550 <buzzer_play_o_canada+0x324>)
 80012f2:	f7ff f939 	bl	8000568 <__aeabi_dmul>
 80012f6:	4603      	mov	r3, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	4618      	mov	r0, r3
 80012fc:	4621      	mov	r1, r4
 80012fe:	f7ff fb45 	bl	800098c <__aeabi_d2iz>
 8001302:	4603      	mov	r3, r0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f8c4 	bl	8000494 <__aeabi_i2d>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	f04f 0000 	mov.w	r0, #0
 8001318:	498a      	ldr	r1, [pc, #552]	; (8001544 <buzzer_play_o_canada+0x318>)
 800131a:	f7ff fa4f 	bl	80007bc <__aeabi_ddiv>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b87      	ldr	r3, [pc, #540]	; (8001548 <buzzer_play_o_canada+0x31c>)
 800132c:	f7ff f91c 	bl	8000568 <__aeabi_dmul>
 8001330:	4603      	mov	r3, r0
 8001332:	460c      	mov	r4, r1
 8001334:	4618      	mov	r0, r3
 8001336:	4621      	mov	r1, r4
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <buzzer_play_o_canada+0x324>)
 800133e:	f7ff f913 	bl	8000568 <__aeabi_dmul>
 8001342:	4603      	mov	r3, r0
 8001344:	460c      	mov	r4, r1
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b7f      	ldr	r3, [pc, #508]	; (800154c <buzzer_play_o_canada+0x320>)
 8001350:	f7ff f90a 	bl	8000568 <__aeabi_dmul>
 8001354:	4603      	mov	r3, r0
 8001356:	460c      	mov	r4, r1
 8001358:	4618      	mov	r0, r3
 800135a:	4621      	mov	r1, r4
 800135c:	f7ff fb16 	bl	800098c <__aeabi_d2iz>
 8001360:	4603      	mov	r3, r0
 8001362:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff f895 	bl	8000494 <__aeabi_i2d>
 800136a:	4603      	mov	r3, r0
 800136c:	460c      	mov	r4, r1
 800136e:	461a      	mov	r2, r3
 8001370:	4623      	mov	r3, r4
 8001372:	f04f 0000 	mov.w	r0, #0
 8001376:	4973      	ldr	r1, [pc, #460]	; (8001544 <buzzer_play_o_canada+0x318>)
 8001378:	f7ff fa20 	bl	80007bc <__aeabi_ddiv>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <buzzer_play_o_canada+0x328>)
 800138a:	f7ff f8ed 	bl	8000568 <__aeabi_dmul>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	4618      	mov	r0, r3
 8001394:	4621      	mov	r1, r4
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b6b      	ldr	r3, [pc, #428]	; (8001548 <buzzer_play_o_canada+0x31c>)
 800139c:	f7ff f8e4 	bl	8000568 <__aeabi_dmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	4618      	mov	r0, r3
 80013a6:	4621      	mov	r1, r4
 80013a8:	f7ff faf0 	bl	800098c <__aeabi_d2iz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff f86f 	bl	8000494 <__aeabi_i2d>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	461a      	mov	r2, r3
 80013bc:	4623      	mov	r3, r4
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	4960      	ldr	r1, [pc, #384]	; (8001544 <buzzer_play_o_canada+0x318>)
 80013c4:	f7ff f9fa 	bl	80007bc <__aeabi_ddiv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <buzzer_play_o_canada+0x328>)
 80013d6:	f7ff f8c7 	bl	8000568 <__aeabi_dmul>
 80013da:	4603      	mov	r3, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	4618      	mov	r0, r3
 80013e0:	4621      	mov	r1, r4
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b58      	ldr	r3, [pc, #352]	; (8001548 <buzzer_play_o_canada+0x31c>)
 80013e8:	f7ff f8be 	bl	8000568 <__aeabi_dmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <buzzer_play_o_canada+0x320>)
 80013fa:	f7ff f8b5 	bl	8000568 <__aeabi_dmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fac1 	bl	800098c <__aeabi_d2iz>
 800140a:	4603      	mov	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff f840 	bl	8000494 <__aeabi_i2d>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	4948      	ldr	r1, [pc, #288]	; (8001544 <buzzer_play_o_canada+0x318>)
 8001422:	f7ff f9cb 	bl	80007bc <__aeabi_ddiv>
 8001426:	4603      	mov	r3, r0
 8001428:	460c      	mov	r4, r1
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	f7fe fee3 	bl	80001fc <__adddf3>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	4618      	mov	r0, r3
 800143c:	4621      	mov	r1, r4
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <buzzer_play_o_canada+0x31c>)
 8001444:	f7ff f890 	bl	8000568 <__aeabi_dmul>
 8001448:	4603      	mov	r3, r0
 800144a:	460c      	mov	r4, r1
 800144c:	4618      	mov	r0, r3
 800144e:	4621      	mov	r1, r4
 8001450:	f7ff fa9c 	bl	800098c <__aeabi_d2iz>
 8001454:	4603      	mov	r3, r0
 8001456:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff f81b 	bl	8000494 <__aeabi_i2d>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	461a      	mov	r2, r3
 8001464:	4623      	mov	r3, r4
 8001466:	f04f 0000 	mov.w	r0, #0
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <buzzer_play_o_canada+0x318>)
 800146c:	f7ff f9a6 	bl	80007bc <__aeabi_ddiv>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	4618      	mov	r0, r3
 8001476:	4621      	mov	r1, r4
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	f7fe febe 	bl	80001fc <__adddf3>
 8001480:	4603      	mov	r3, r0
 8001482:	460c      	mov	r4, r1
 8001484:	4618      	mov	r0, r3
 8001486:	4621      	mov	r1, r4
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <buzzer_play_o_canada+0x31c>)
 800148e:	f7ff f86b 	bl	8000568 <__aeabi_dmul>
 8001492:	4603      	mov	r3, r0
 8001494:	460c      	mov	r4, r1
 8001496:	4618      	mov	r0, r3
 8001498:	4621      	mov	r1, r4
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b2b      	ldr	r3, [pc, #172]	; (800154c <buzzer_play_o_canada+0x320>)
 80014a0:	f7ff f862 	bl	8000568 <__aeabi_dmul>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	f7ff fa6e 	bl	800098c <__aeabi_d2iz>
 80014b0:	4603      	mov	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe ffed 	bl	8000494 <__aeabi_i2d>
 80014ba:	4603      	mov	r3, r0
 80014bc:	460c      	mov	r4, r1
 80014be:	461a      	mov	r2, r3
 80014c0:	4623      	mov	r3, r4
 80014c2:	f04f 0000 	mov.w	r0, #0
 80014c6:	491f      	ldr	r1, [pc, #124]	; (8001544 <buzzer_play_o_canada+0x318>)
 80014c8:	f7ff f978 	bl	80007bc <__aeabi_ddiv>
 80014cc:	4603      	mov	r3, r0
 80014ce:	460c      	mov	r4, r1
 80014d0:	4618      	mov	r0, r3
 80014d2:	4621      	mov	r1, r4
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <buzzer_play_o_canada+0x32c>)
 80014da:	f7ff f845 	bl	8000568 <__aeabi_dmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <buzzer_play_o_canada+0x31c>)
 80014ec:	f7ff f83c 	bl	8000568 <__aeabi_dmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fa48 	bl	800098c <__aeabi_d2iz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]

	buzzer_play_a1(half);
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f7ff fdaf 	bl	8001064 <buzzer_play_a1>
	buzzer_play_c2(quarter_dot);
 8001506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001508:	f7ff fe18 	bl	800113c <buzzer_play_c2>
	buzzer_play_c2(eighth);
 800150c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800150e:	f7ff fe15 	bl	800113c <buzzer_play_c2>
	buzzer_play_f1(half_dot);
 8001512:	6938      	ldr	r0, [r7, #16]
 8001514:	f7ff fd16 	bl	8000f44 <buzzer_play_f1>
	buzzer_play_g1(quarter);
 8001518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800151a:	f7ff fd5b 	bl	8000fd4 <buzzer_play_g1>
	buzzer_play_a1(quarter);
 800151e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001520:	f7ff fda0 	bl	8001064 <buzzer_play_a1>
	buzzer_play_as1(quarter);
 8001524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001526:	f7ff fdc1 	bl	80010ac <buzzer_play_as1>
	buzzer_play_c2(quarter);
 800152a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800152c:	f7ff fe06 	bl	800113c <buzzer_play_c2>
	buzzer_play_d2(quarter);
 8001530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001532:	f7ff fe27 	bl	8001184 <buzzer_play_d2>
	buzzer_play_g1(half_dot);
 8001536:	6938      	ldr	r0, [r7, #16]
 8001538:	f7ff fd4c 	bl	8000fd4 <buzzer_play_g1>



}
 800153c:	bf00      	nop
 800153e:	3734      	adds	r7, #52	; 0x34
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	404e0000 	.word	0x404e0000
 8001548:	408f4000 	.word	0x408f4000
 800154c:	3ff80000 	.word	0x3ff80000
 8001550:	3fe00000 	.word	0x3fe00000
 8001554:	3fd00000 	.word	0x3fd00000
 8001558:	40100000 	.word	0x40100000

0800155c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <vApplicationGetIdleTaskMemory+0x2c>)
 800156c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <vApplicationGetIdleTaskMemory+0x30>)
 8001572:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	2000002c 	.word	0x2000002c
 800158c:	20000080 	.word	0x20000080

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b09c      	sub	sp, #112	; 0x70
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001596:	f000 fce7 	bl	8001f68 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159a:	f000 f869 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159e:	f000 f9e7 	bl	8001970 <MX_GPIO_Init>
  MX_CAN1_Init();
 80015a2:	f000 f8cf 	bl	8001744 <MX_CAN1_Init>
  MX_CAN2_Init();
 80015a6:	f000 f903 	bl	80017b0 <MX_CAN2_Init>
  MX_TIM4_Init();
 80015aa:	f000 f935 	bl	8001818 <MX_TIM4_Init>
  MX_TIM12_Init();
 80015ae:	f000 f999 	bl	80018e4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80015b2:	f7ff fc09 	bl	8000dc8 <buzzer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <main+0xc0>)
 80015b8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80015bc:	461d      	mov	r5, r3
 80015be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fafe 	bl	8003bd2 <osThreadCreate>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <main+0xc4>)
 80015da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <main+0xc8>)
 80015de:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80015e2:	461d      	mov	r5, r3
 80015e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 80015f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 faeb 	bl	8003bd2 <osThreadCreate>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <main+0xcc>)
 8001600:	601a      	str	r2, [r3, #0]

  osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <main+0xd0>)
 8001604:	f107 041c 	add.w	r4, r7, #28
 8001608:	461d      	mov	r5, r3
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f002 fad8 	bl	8003bd2 <osThreadCreate>
 8001622:	4602      	mov	r2, r0
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <main+0xd4>)
 8001626:	601a      	str	r2, [r3, #0]

  osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <main+0xd8>)
 800162a:	463c      	mov	r4, r7
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 800163a:	463b      	mov	r3, r7
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f002 fac7 	bl	8003bd2 <osThreadCreate>
 8001644:	4602      	mov	r2, r0
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <main+0xdc>)
 8001648:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800164a:	f002 fabb 	bl	8003bc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800164e:	e7fe      	b.n	800164e <main+0xbe>
 8001650:	0800504c 	.word	0x0800504c
 8001654:	200040a0 	.word	0x200040a0
 8001658:	08005074 	.word	0x08005074
 800165c:	200040a4 	.word	0x200040a4
 8001660:	0800509c 	.word	0x0800509c
 8001664:	200040ac 	.word	0x200040ac
 8001668:	080050c4 	.word	0x080050c4
 800166c:	200040a8 	.word	0x200040a8

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	; 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	2230      	movs	r2, #48	; 0x30
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f003 fcca 	bl	8005018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <SystemClock_Config+0xcc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <SystemClock_Config+0xcc>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <SystemClock_Config+0xd0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <SystemClock_Config+0xd0>)
 80016ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80016e0:	2306      	movs	r3, #6
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e4:	23a8      	movs	r3, #168	; 0xa8
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 f835 	bl	8002764 <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001700:	f000 fa0e 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2105      	movs	r1, #5
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fa8e 	bl	8002c44 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172e:	f000 f9f7 	bl	8001b20 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_CAN1_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <MX_CAN1_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001750:	2207      	movs	r2, #7
 8001752:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_CAN1_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001766:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_CAN1_Init+0x64>)
 800176a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800176e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_CAN1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_CAN1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_CAN1_Init+0x64>)
 8001796:	f000 fc29 	bl	8001fec <HAL_CAN_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f000 f9be 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20004038 	.word	0x20004038
 80017ac:	40006400 	.word	0x40006400

080017b0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_CAN2_Init+0x60>)
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <MX_CAN2_Init+0x64>)
 80017b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_CAN2_Init+0x60>)
 80017bc:	2210      	movs	r2, #16
 80017be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_CAN2_Init+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_CAN2_Init+0x60>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_CAN2_Init+0x60>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_CAN2_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_CAN2_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_CAN2_Init+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <MX_CAN2_Init+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_CAN2_Init+0x60>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <MX_CAN2_Init+0x60>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_CAN2_Init+0x60>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <MX_CAN2_Init+0x60>)
 80017fe:	f000 fbf5 	bl	8001fec <HAL_CAN_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001808:	f000 f98a 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20004010 	.word	0x20004010
 8001814:	40006800 	.word	0x40006800

08001818 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800183a:	4b28      	ldr	r3, [pc, #160]	; (80018dc <MX_TIM4_Init+0xc4>)
 800183c:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <MX_TIM4_Init+0xc8>)
 800183e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001840:	4b26      	ldr	r3, [pc, #152]	; (80018dc <MX_TIM4_Init+0xc4>)
 8001842:	2253      	movs	r2, #83	; 0x53
 8001844:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <MX_TIM4_Init+0xc4>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <MX_TIM4_Init+0xc4>)
 800184e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001852:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b21      	ldr	r3, [pc, #132]	; (80018dc <MX_TIM4_Init+0xc4>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_TIM4_Init+0xc4>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001860:	481e      	ldr	r0, [pc, #120]	; (80018dc <MX_TIM4_Init+0xc4>)
 8001862:	f001 fc32 	bl	80030ca <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800186c:	f000 f958 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	4619      	mov	r1, r3
 800187e:	4817      	ldr	r0, [pc, #92]	; (80018dc <MX_TIM4_Init+0xc4>)
 8001880:	f002 f8f8 	bl	8003a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800188a:	f000 f949 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <MX_TIM4_Init+0xc4>)
 80018a8:	f001 fd80 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80018b2:	f000 f935 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2208      	movs	r2, #8
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <MX_TIM4_Init+0xc4>)
 80018be:	f001 fd75 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80018c8:	f000 f92a 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018cc:	4803      	ldr	r0, [pc, #12]	; (80018dc <MX_TIM4_Init+0xc4>)
 80018ce:	f000 fa2f 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20003fd0 	.word	0x20003fd0
 80018e0:	40000800 	.word	0x40000800

080018e4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM12_Init+0x84>)
 80018fe:	4a1b      	ldr	r2, [pc, #108]	; (800196c <MX_TIM12_Init+0x88>)
 8001900:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_TIM12_Init+0x84>)
 8001904:	2223      	movs	r2, #35	; 0x23
 8001906:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <MX_TIM12_Init+0x84>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_TIM12_Init+0x84>)
 8001910:	f242 720f 	movw	r2, #9999	; 0x270f
 8001914:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <MX_TIM12_Init+0x84>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_TIM12_Init+0x84>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001922:	4811      	ldr	r0, [pc, #68]	; (8001968 <MX_TIM12_Init+0x84>)
 8001924:	f001 fbd1 	bl	80030ca <HAL_TIM_PWM_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800192e:	f000 f8f7 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001932:	2360      	movs	r3, #96	; 0x60
 8001934:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	4619      	mov	r1, r3
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <MX_TIM12_Init+0x84>)
 800194a:	f001 fd2f 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001954:	f000 f8e4 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001958:	4803      	ldr	r0, [pc, #12]	; (8001968 <MX_TIM12_Init+0x84>)
 800195a:	f000 f9e9 	bl	8001d30 <HAL_TIM_MspPostInit>

}
 800195e:	bf00      	nop
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20004060 	.word	0x20004060
 800196c:	40001800 	.word	0x40001800

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <MX_GPIO_Init+0x16c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a53      	ldr	r2, [pc, #332]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b51      	ldr	r3, [pc, #324]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
 80019a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019ac:	f043 0308 	orr.w	r3, r3, #8
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a45      	ldr	r2, [pc, #276]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <MX_GPIO_Init+0x16c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a37      	ldr	r2, [pc, #220]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b35      	ldr	r3, [pc, #212]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b31      	ldr	r3, [pc, #196]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a30      	ldr	r2, [pc, #192]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a29      	ldr	r2, [pc, #164]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <MX_GPIO_Init+0x16c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <MX_GPIO_Init+0x170>)
 8001a52:	f000 fe53 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8001a56:	2200      	movs	r2, #0
 8001a58:	211e      	movs	r1, #30
 8001a5a:	4821      	ldr	r0, [pc, #132]	; (8001ae0 <MX_GPIO_Init+0x170>)
 8001a5c:	f000 fe4e 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a66:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <MX_GPIO_Init+0x174>)
 8001a68:	f000 fe48 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a72:	481d      	ldr	r0, [pc, #116]	; (8001ae8 <MX_GPIO_Init+0x178>)
 8001a74:	f000 fe42 	bl	80026fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_A_Pin LD_B_Pin LD_C_Pin LD_D_Pin
                           LD_E_Pin LD_F_Pin LD_G_Pin LD_H_Pin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8001a78:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001a7c:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4813      	ldr	r0, [pc, #76]	; (8001ae0 <MX_GPIO_Init+0x170>)
 8001a92:	f000 fc89 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_GPIO_Init+0x174>)
 8001ab0:	f000 fc7a 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_GPIO_Init+0x178>)
 8001ace:	f000 fc6b 	bl	80023a8 <HAL_GPIO_Init>

}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40021400 	.word	0x40021400

08001aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
    osDelay(1);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f002 f8b8 	bl	8003c6a <osDelay>
 8001afa:	e7fb      	b.n	8001af4 <StartDefaultTask+0x8>

08001afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b0e:	f000 fa4d 	bl	8001fac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40000c00 	.word	0x40000c00

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <Error_Handler+0x6>

08001b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_MspInit+0x54>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_MspInit+0x54>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_MspInit+0x54>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_MspInit+0x54>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_MspInit+0x54>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_MspInit+0x54>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	210f      	movs	r1, #15
 8001b6a:	f06f 0001 	mvn.w	r0, #1
 8001b6e:	f000 fbf1 	bl	8002354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <HAL_CAN_MspInit+0x128>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d135      	bne.n	8001c0e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ba2:	4b42      	ldr	r3, [pc, #264]	; (8001cac <HAL_CAN_MspInit+0x12c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a40      	ldr	r2, [pc, #256]	; (8001cac <HAL_CAN_MspInit+0x12c>)
 8001baa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_CAN_MspInit+0x12c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a3c      	ldr	r2, [pc, #240]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a35      	ldr	r2, [pc, #212]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bec:	2303      	movs	r3, #3
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482b      	ldr	r0, [pc, #172]	; (8001cb4 <HAL_CAN_MspInit+0x134>)
 8001c08:	f000 fbce 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c0c:	e048      	b.n	8001ca0 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_CAN_MspInit+0x138>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d143      	bne.n	8001ca0 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_CAN_MspInit+0x12c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_CAN_MspInit+0x12c>)
 8001c3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_CAN_MspInit+0x12c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10d      	bne.n	8001c62 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_CAN_MspInit+0x130>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001c90:	2309      	movs	r3, #9
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <HAL_CAN_MspInit+0x13c>)
 8001c9c:	f000 fb84 	bl	80023a8 <HAL_GPIO_Init>
}
 8001ca0:	bf00      	nop
 8001ca2:	3730      	adds	r7, #48	; 0x30
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40006400 	.word	0x40006400
 8001cac:	20000280 	.word	0x20000280
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40006800 	.word	0x40006800
 8001cbc:	40020400 	.word	0x40020400

08001cc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_TIM_PWM_MspInit+0x64>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_TIM_PWM_MspInit+0x68>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_TIM_PWM_MspInit+0x68>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_PWM_MspInit+0x68>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001cee:	e012      	b.n	8001d16 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_TIM_PWM_MspInit+0x6c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_TIM_PWM_MspInit+0x68>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_TIM_PWM_MspInit+0x68>)
 8001d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_TIM_PWM_MspInit+0x68>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40000800 	.word	0x40000800
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40001800 	.word	0x40001800

08001d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <HAL_TIM_MspPostInit+0xb0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d11f      	bne.n	8001d92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001d6e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d80:	2302      	movs	r3, #2
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <HAL_TIM_MspPostInit+0xb8>)
 8001d8c:	f000 fb0c 	bl	80023a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001d90:	e022      	b.n	8001dd8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_TIM_MspPostInit+0xbc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d11d      	bne.n	8001dd8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
 8001da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_TIM_MspPostInit+0xb4>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001db8:	2340      	movs	r3, #64	; 0x40
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001dc8:	2309      	movs	r3, #9
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <HAL_TIM_MspPostInit+0xc0>)
 8001dd4:	f000 fae8 	bl	80023a8 <HAL_GPIO_Init>
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40001800 	.word	0x40001800
 8001df0:	40021c00 	.word	0x40021c00

08001df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	2032      	movs	r0, #50	; 0x32
 8001e0a:	f000 faa3 	bl	8002354 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e0e:	2032      	movs	r0, #50	; 0x32
 8001e10:	f000 fabc 	bl	800238c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <HAL_InitTick+0xa4>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	; (8001e98 <HAL_InitTick+0xa4>)
 8001e1e:	f043 0308 	orr.w	r3, r3, #8
 8001e22:	6413      	str	r3, [r2, #64]	; 0x40
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_InitTick+0xa4>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e30:	f107 0210 	add.w	r2, r7, #16
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 f8ba 	bl	8002fb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e40:	f001 f8a4 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8001e44:	4603      	mov	r3, r0
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	3b01      	subs	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_InitTick+0xb0>)
 8001e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e64:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001e78:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e7a:	f001 f8cd 	bl	8003018 <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e86:	f001 f8fc 	bl	8003082 <HAL_TIM_Base_Start_IT>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3730      	adds	r7, #48	; 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	200040b0 	.word	0x200040b0
 8001ea4:	40000c00 	.word	0x40000c00

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <NMI_Handler+0x4>

08001eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <HardFault_Handler+0x4>

08001eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <MemManage_Handler+0x4>

08001eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <TIM5_IRQHandler+0x10>)
 8001eda:	f001 f95f 	bl	800319c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200040b0 	.word	0x200040b0

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SystemInit+0x28>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <SystemInit+0x28>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SystemInit+0x28>)
 8001efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f02:	609a      	str	r2, [r3, #8]
#endif
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f1a:	e003      	b.n	8001f24 <LoopCopyDataInit>

08001f1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f22:	3104      	adds	r1, #4

08001f24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f2c:	d3f6      	bcc.n	8001f1c <CopyDataInit>
  ldr  r2, =_sbss
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f30:	e002      	b.n	8001f38 <LoopFillZerobss>

08001f32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f34:	f842 3b04 	str.w	r3, [r2], #4

08001f38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f3c:	d3f9      	bcc.n	8001f32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f3e:	f7ff ffd3 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f42:	f003 f845 	bl	8004fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff fb23 	bl	8001590 <main>
  bx  lr    
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f50:	08005110 	.word	0x08005110
  ldr  r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f58:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001f5c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001f60:	200040f4 	.word	0x200040f4

08001f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_Init+0x40>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_Init+0x40>)
 8001f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_Init+0x40>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_Init+0x40>)
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f000 f9d4 	bl	800233e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff ff2c 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f9c:	f7ff fdc4 	bl	8001b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	200040f0 	.word	0x200040f0

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200040f0 	.word	0x200040f0

08001fec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0ed      	b.n	80021da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fdb8 	bl	8001b80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0202 	bic.w	r2, r2, #2
 800201e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002020:	f7ff ffd8 	bl	8001fd4 <HAL_GetTick>
 8002024:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002026:	e012      	b.n	800204e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002028:	f7ff ffd4 	bl	8001fd4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d90b      	bls.n	800204e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2205      	movs	r2, #5
 8002046:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0c5      	b.n	80021da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e5      	bne.n	8002028 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800206c:	f7ff ffb2 	bl	8001fd4 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002072:	e012      	b.n	800209a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002074:	f7ff ffae 	bl	8001fd4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b0a      	cmp	r3, #10
 8002080:	d90b      	bls.n	800209a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e09f      	b.n	80021da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0e5      	beq.n	8002074 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e1b      	ldrb	r3, [r3, #24]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d108      	bne.n	80020c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e007      	b.n	80020d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7e5b      	ldrb	r3, [r3, #25]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d108      	bne.n	80020ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e007      	b.n	80020fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e9b      	ldrb	r3, [r3, #26]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0220 	orr.w	r2, r2, #32
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e007      	b.n	8002126 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0220 	bic.w	r2, r2, #32
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7edb      	ldrb	r3, [r3, #27]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d108      	bne.n	8002140 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0210 	bic.w	r2, r2, #16
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e007      	b.n	8002150 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0210 	orr.w	r2, r2, #16
 800214e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7f1b      	ldrb	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e007      	b.n	800217a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0208 	bic.w	r2, r2, #8
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7f5b      	ldrb	r3, [r3, #29]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d108      	bne.n	8002194 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0204 	orr.w	r2, r2, #4
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e007      	b.n	80021a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0204 	bic.w	r2, r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	ea42 0103 	orr.w	r1, r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff4c 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002366:	f7ff ff61 	bl	800222c <__NVIC_GetPriorityGrouping>
 800236a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	6978      	ldr	r0, [r7, #20]
 8002372:	f7ff ffb1 	bl	80022d8 <NVIC_EncodePriority>
 8002376:	4602      	mov	r2, r0
 8002378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff80 	bl	8002284 <__NVIC_SetPriority>
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff54 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	e177      	b.n	80026b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	429a      	cmp	r2, r3
 80023de:	f040 8166 	bne.w	80026ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d00b      	beq.n	8002402 <HAL_GPIO_Init+0x5a>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d007      	beq.n	8002402 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f6:	2b11      	cmp	r3, #17
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b12      	cmp	r3, #18
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0xfc>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b12      	cmp	r3, #18
 80024a2:	d123      	bne.n	80024ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80c0 	beq.w	80026ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	4a64      	ldr	r2, [pc, #400]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253c:	6453      	str	r3, [r2, #68]	; 0x44
 800253e:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_GPIO_Init+0x320>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254a:	4a60      	ldr	r2, [pc, #384]	; (80026cc <HAL_GPIO_Init+0x324>)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	089b      	lsrs	r3, r3, #2
 8002550:	3302      	adds	r3, #2
 8002552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	220f      	movs	r2, #15
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_GPIO_Init+0x328>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d037      	beq.n	80025e6 <HAL_GPIO_Init+0x23e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <HAL_GPIO_Init+0x32c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_GPIO_Init+0x23a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_GPIO_Init+0x330>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02b      	beq.n	80025de <HAL_GPIO_Init+0x236>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_GPIO_Init+0x334>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x232>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_GPIO_Init+0x338>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x22e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x33c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x22a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_GPIO_Init+0x340>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_GPIO_Init+0x344>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <HAL_GPIO_Init+0x348>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4e      	ldr	r2, [pc, #312]	; (80026f4 <HAL_GPIO_Init+0x34c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x21a>
 80025be:	2309      	movs	r3, #9
 80025c0:	e012      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c2:	230a      	movs	r3, #10
 80025c4:	e010      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025c6:	2308      	movs	r3, #8
 80025c8:	e00e      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ca:	2307      	movs	r3, #7
 80025cc:	e00c      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00a      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d2:	2305      	movs	r3, #5
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x240>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f8:	4934      	ldr	r1, [pc, #208]	; (80026cc <HAL_GPIO_Init+0x324>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002606:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262a:	4a33      	ldr	r2, [pc, #204]	; (80026f8 <HAL_GPIO_Init+0x350>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_GPIO_Init+0x350>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_GPIO_Init+0x350>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_GPIO_Init+0x350>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f ae84 	bls.w	80023c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	3724      	adds	r7, #36	; 0x24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40013800 	.word	0x40013800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020c00 	.word	0x40020c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40022400 	.word	0x40022400
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	401a      	ands	r2, r3
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	429a      	cmp	r2, r3
 8002746:	d104      	bne.n	8002752 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002750:	e002      	b.n	8002758 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e25b      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002782:	4ba3      	ldr	r3, [pc, #652]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4ba0      	ldr	r3, [pc, #640]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b99      	ldr	r3, [pc, #612]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05b      	beq.n	800286c <HAL_RCC_OscConfig+0x108>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d157      	bne.n	800286c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e236      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x74>
 80027ca:	4b91      	ldr	r3, [pc, #580]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a90      	ldr	r2, [pc, #576]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a87      	ldr	r2, [pc, #540]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027fc:	4b84      	ldr	r3, [pc, #528]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a80      	ldr	r2, [pc, #512]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fbda 	bl	8001fd4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7ff fbd6 	bl	8001fd4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1fb      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xc0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fbc6 	bl	8001fd4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff fbc2 	bl	8001fd4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1e7      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0xe8>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d063      	beq.n	8002942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1bb      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4952      	ldr	r1, [pc, #328]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <HAL_RCC_OscConfig+0x2b0>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7ff fb7b 	bl	8001fd4 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7ff fb77 	bl	8001fd4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e19c      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4940      	ldr	r1, [pc, #256]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x2b0>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff fb5a 	bl	8001fd4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7ff fb56 	bl	8001fd4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e17b      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d030      	beq.n	80029b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_RCC_OscConfig+0x2b4>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7ff fb3a 	bl	8001fd4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7ff fb36 	bl	8001fd4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e15b      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x200>
 8002982:	e015      	b.n	80029b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_OscConfig+0x2b4>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7ff fb23 	bl	8001fd4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7ff fb1f 	bl	8001fd4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e144      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a0 	beq.w	8002afe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a0e      	ldr	r2, [pc, #56]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x2b8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d121      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_RCC_OscConfig+0x2b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_RCC_OscConfig+0x2b8>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7ff fae5 	bl	8001fd4 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e011      	b.n	8002a32 <HAL_RCC_OscConfig+0x2ce>
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
 8002a1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7ff fad8 	bl	8001fd4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0fd      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x4d4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2f0>
 8002a46:	4b7d      	ldr	r3, [pc, #500]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	4a7c      	ldr	r2, [pc, #496]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	; 0x70
 8002a52:	e01c      	b.n	8002a8e <HAL_RCC_OscConfig+0x32a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x312>
 8002a5c:	4b77      	ldr	r3, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a76      	ldr	r2, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
 8002a68:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a73      	ldr	r2, [pc, #460]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0x32a>
 8002a76:	4b71      	ldr	r3, [pc, #452]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7a:	4a70      	ldr	r2, [pc, #448]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6713      	str	r3, [r2, #112]	; 0x70
 8002a82:	4b6e      	ldr	r3, [pc, #440]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	4a6d      	ldr	r2, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002a88:	f023 0304 	bic.w	r3, r3, #4
 8002a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d015      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7ff fa9d 	bl	8001fd4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7ff fa99 	bl	8001fd4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0bc      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ee      	beq.n	8002a9e <HAL_RCC_OscConfig+0x33a>
 8002ac0:	e014      	b.n	8002aec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff fa87 	bl	8001fd4 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7ff fa83 	bl	8001fd4 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e0a6      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ee      	bne.n	8002aca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b52      	ldr	r3, [pc, #328]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a51      	ldr	r2, [pc, #324]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8092 	beq.w	8002c2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d05c      	beq.n	8002bce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d141      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <HAL_RCC_OscConfig+0x4dc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7ff fa57 	bl	8001fd4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7ff fa53 	bl	8001fd4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e078      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	019b      	lsls	r3, r3, #6
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	3b01      	subs	r3, #1
 8002b62:	041b      	lsls	r3, r3, #16
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	061b      	lsls	r3, r3, #24
 8002b6c:	4933      	ldr	r1, [pc, #204]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x4dc>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff fa2c 	bl	8001fd4 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7ff fa28 	bl	8001fd4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04d      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x41c>
 8002b9e:	e045      	b.n	8002c2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x4dc>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7ff fa15 	bl	8001fd4 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bae:	f7ff fa11 	bl	8001fd4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e036      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x44a>
 8002bcc:	e02e      	b.n	8002c2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e029      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_RCC_OscConfig+0x4d8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d115      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c02:	4013      	ands	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	42470060 	.word	0x42470060

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cc      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90c      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e067      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4934      	ldr	r1, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7ff f94e 	bl	8001fd4 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7ff f94a 	bl	8001fd4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20c      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4601      	mov	r1, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	5cd3      	ldrb	r3, [r2, r3]
 8002dde:	fa21 f303 	lsr.w	r3, r1, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f802 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	080050e8 	.word	0x080050e8
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e26:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d007      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x32>
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d008      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x38>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 808d 	bne.w	8002f56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e3e:	60bb      	str	r3, [r7, #8]
       break;
 8002e40:	e08c      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e42:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e44:	60bb      	str	r3, [r7, #8]
      break;
 8002e46:	e089      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d023      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	f04f 0400 	mov.w	r4, #0
 8002e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	ea03 0501 	and.w	r5, r3, r1
 8002e74:	ea04 0602 	and.w	r6, r4, r2
 8002e78:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e7a:	fb02 f106 	mul.w	r1, r2, r6
 8002e7e:	2200      	movs	r2, #0
 8002e80:	fb02 f205 	mul.w	r2, r2, r5
 8002e84:	440a      	add	r2, r1
 8002e86:	493a      	ldr	r1, [pc, #232]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e88:	fba5 0101 	umull	r0, r1, r5, r1
 8002e8c:	1853      	adds	r3, r2, r1
 8002e8e:	4619      	mov	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	461a      	mov	r2, r3
 8002e98:	4623      	mov	r3, r4
 8002e9a:	f7fd fd9f 	bl	80009dc <__aeabi_uldivmod>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e049      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	ea03 0501 	and.w	r5, r3, r1
 8002ebc:	ea04 0602 	and.w	r6, r4, r2
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4632      	mov	r2, r6
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	f04f 0400 	mov.w	r4, #0
 8002ecc:	0154      	lsls	r4, r2, #5
 8002ece:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ed2:	014b      	lsls	r3, r1, #5
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	1b49      	subs	r1, r1, r5
 8002eda:	eb62 0206 	sbc.w	r2, r2, r6
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	f04f 0400 	mov.w	r4, #0
 8002ee6:	0194      	lsls	r4, r2, #6
 8002ee8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002eec:	018b      	lsls	r3, r1, #6
 8002eee:	1a5b      	subs	r3, r3, r1
 8002ef0:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	00e2      	lsls	r2, r4, #3
 8002efe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f02:	00d9      	lsls	r1, r3, #3
 8002f04:	460b      	mov	r3, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	195b      	adds	r3, r3, r5
 8002f0a:	eb44 0406 	adc.w	r4, r4, r6
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	02a2      	lsls	r2, r4, #10
 8002f18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f1c:	0299      	lsls	r1, r3, #10
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4614      	mov	r4, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	4621      	mov	r1, r4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	f7fd fd54 	bl	80009dc <__aeabi_uldivmod>
 8002f34:	4603      	mov	r3, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	3301      	adds	r3, #1
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f52:	60bb      	str	r3, [r7, #8]
      break;
 8002f54:	e002      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f58:	60bb      	str	r3, [r7, #8]
      break;
 8002f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	00b71b00 	.word	0x00b71b00

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4601      	mov	r1, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	080050f8 	.word	0x080050f8

08002fb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_GetClockConfig+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 020f 	and.w	r2, r3, #15
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800
 8003014:	40023c00 	.word	0x40023c00

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e01d      	b.n	8003066 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f815 	bl	800306e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 fa96 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d007      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e01d      	b.n	8003118 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fe fde5 	bl	8001cc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f000 fa3d 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	6839      	ldr	r1, [r7, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fc78 	bl	8003a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a15      	ldr	r2, [pc, #84]	; (8003194 <HAL_TIM_PWM_Start+0x74>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_PWM_Start+0x2c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a14      	ldr	r2, [pc, #80]	; (8003198 <HAL_TIM_PWM_Start+0x78>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_TIM_PWM_Start+0x30>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_TIM_PWM_Start+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b06      	cmp	r3, #6
 8003176:	d007      	beq.n	8003188 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40010000 	.word	0x40010000
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0202 	mvn.w	r2, #2
 80031c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f9b4 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9a6 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9b7 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b04      	cmp	r3, #4
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0204 	mvn.w	r2, #4
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f98a 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f97c 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f98d 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b08      	cmp	r3, #8
 8003258:	d122      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0308 	and.w	r3, r3, #8
 8003264:	2b08      	cmp	r3, #8
 8003266:	d11b      	bne.n	80032a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0208 	mvn.w	r2, #8
 8003270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f960 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 800328c:	e005      	b.n	800329a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f952 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f963 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0210 	mvn.w	r2, #16
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2208      	movs	r2, #8
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f936 	bl	800354c <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f928 	bl	8003538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f939 	bl	8003560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe fbee 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b80      	cmp	r3, #128	; 0x80
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fc1a 	bl	8003b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003364:	2b40      	cmp	r3, #64	; 0x40
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8fe 	bl	8003574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b20      	cmp	r3, #32
 8003384:	d10e      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b20      	cmp	r3, #32
 8003392:	d107      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0220 	mvn.w	r2, #32
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fbe4 	bl	8003b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0b4      	b.n	8003530 <HAL_TIM_PWM_ConfigChannel+0x184>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	f200 809f 	bhi.w	800351c <HAL_TIM_PWM_ConfigChannel+0x170>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003419 	.word	0x08003419
 80033e8:	0800351d 	.word	0x0800351d
 80033ec:	0800351d 	.word	0x0800351d
 80033f0:	0800351d 	.word	0x0800351d
 80033f4:	08003459 	.word	0x08003459
 80033f8:	0800351d 	.word	0x0800351d
 80033fc:	0800351d 	.word	0x0800351d
 8003400:	0800351d 	.word	0x0800351d
 8003404:	0800349b 	.word	0x0800349b
 8003408:	0800351d 	.word	0x0800351d
 800340c:	0800351d 	.word	0x0800351d
 8003410:	0800351d 	.word	0x0800351d
 8003414:	080034db 	.word	0x080034db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f952 	bl	80036c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0208 	orr.w	r2, r2, #8
 8003432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
      break;
 8003456:	e062      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f9a2 	bl	80037a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6999      	ldr	r1, [r3, #24]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	619a      	str	r2, [r3, #24]
      break;
 8003498:	e041      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f9f7 	bl	8003894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0208 	orr.w	r2, r2, #8
 80034b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0204 	bic.w	r2, r2, #4
 80034c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69d9      	ldr	r1, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	61da      	str	r2, [r3, #28]
      break;
 80034d8:	e021      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fa4b 	bl	800397c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69d9      	ldr	r1, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	021a      	lsls	r2, r3, #8
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	61da      	str	r2, [r3, #28]
      break;
 800351a:	e000      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800351c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	; (800369c <TIM_Base_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3c      	ldr	r2, [pc, #240]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3b      	ldr	r2, [pc, #236]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3a      	ldr	r2, [pc, #232]	; (80036ac <TIM_Base_SetConfig+0x124>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x114>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d027      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <TIM_Base_SetConfig+0x118>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d023      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2b      	ldr	r2, [pc, #172]	; (80036a4 <TIM_Base_SetConfig+0x11c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <TIM_Base_SetConfig+0x120>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a29      	ldr	r2, [pc, #164]	; (80036ac <TIM_Base_SetConfig+0x124>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d017      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <TIM_Base_SetConfig+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <TIM_Base_SetConfig+0x12c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00f      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a26      	ldr	r2, [pc, #152]	; (80036b8 <TIM_Base_SetConfig+0x130>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00b      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a25      	ldr	r2, [pc, #148]	; (80036bc <TIM_Base_SetConfig+0x134>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <TIM_Base_SetConfig+0x138>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d003      	beq.n	800363a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <TIM_Base_SetConfig+0x13c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <TIM_Base_SetConfig+0x114>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_Base_SetConfig+0xf8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <TIM_Base_SetConfig+0x124>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d103      	bne.n	8003688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	615a      	str	r2, [r3, #20]
}
 800368e:	bf00      	nop
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800
 80036bc:	40001800 	.word	0x40001800
 80036c0:	40001c00 	.word	0x40001c00
 80036c4:	40002000 	.word	0x40002000

080036c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f023 0201 	bic.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f023 0302 	bic.w	r3, r3, #2
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a20      	ldr	r2, [pc, #128]	; (80037a0 <TIM_OC1_SetConfig+0xd8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC1_SetConfig+0x64>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <TIM_OC1_SetConfig+0xdc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10c      	bne.n	8003746 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0308 	bic.w	r3, r3, #8
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a15      	ldr	r2, [pc, #84]	; (80037a0 <TIM_OC1_SetConfig+0xd8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_OC1_SetConfig+0x8e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC1_SetConfig+0xdc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40010400 	.word	0x40010400

080037a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0320 	bic.w	r3, r3, #32
 80037f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <TIM_OC2_SetConfig+0xe4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC2_SetConfig+0x68>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <TIM_OC2_SetConfig+0xe8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <TIM_OC2_SetConfig+0xe4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0x94>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a16      	ldr	r2, [pc, #88]	; (8003890 <TIM_OC2_SetConfig+0xe8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <TIM_OC3_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_OC3_SetConfig+0x66>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <TIM_OC3_SetConfig+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10d      	bne.n	8003916 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <TIM_OC3_SetConfig+0xe0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_OC3_SetConfig+0x92>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <TIM_OC3_SetConfig+0xe4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d113      	bne.n	800394e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800392c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <TIM_OC4_SetConfig+0xa4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_OC4_SetConfig+0x68>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <TIM_OC4_SetConfig+0xa8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d109      	bne.n	80039f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400

08003a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1a      	ldr	r2, [r3, #32]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e05a      	b.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d022      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d01d      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1d      	ldr	r2, [pc, #116]	; (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d018      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1a      	ldr	r2, [pc, #104]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10c      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800
 8003b5c:	40000c00 	.word	0x40000c00
 8003b60:	40010400 	.word	0x40010400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40001800 	.word	0x40001800

08003b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba6:	2b84      	cmp	r3, #132	; 0x84
 8003ba8:	d005      	beq.n	8003bb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003baa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3303      	adds	r3, #3
 8003bb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bc8:	f000 fada 	bl	8004180 <vTaskStartScheduler>
  
  return osOK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd4:	b089      	sub	sp, #36	; 0x24
 8003bd6:	af04      	add	r7, sp, #16
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <osThreadCreate+0x54>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01c      	beq.n	8003c26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685c      	ldr	r4, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681d      	ldr	r5, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691e      	ldr	r6, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ffc8 	bl	8003b94 <makeFreeRtosPriority>
 8003c04:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c0e:	9202      	str	r2, [sp, #8]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	9100      	str	r1, [sp, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4632      	mov	r2, r6
 8003c18:	4629      	mov	r1, r5
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f000 f8ed 	bl	8003dfa <xTaskCreateStatic>
 8003c20:	4603      	mov	r3, r0
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e01c      	b.n	8003c60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685c      	ldr	r4, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c32:	b29e      	uxth	r6, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff ffaa 	bl	8003b94 <makeFreeRtosPriority>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f107 030c 	add.w	r3, r7, #12
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	9200      	str	r2, [sp, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	4632      	mov	r2, r6
 8003c4e:	4629      	mov	r1, r5
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 f92c 	bl	8003eae <xTaskCreate>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d001      	beq.n	8003c60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c60:	68fb      	ldr	r3, [r7, #12]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <osDelay+0x16>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	e000      	b.n	8003c82 <osDelay+0x18>
 8003c80:	2301      	movs	r3, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fa48 	bl	8004118 <vTaskDelay>
  
  return osOK;
 8003c88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f103 0208 	add.w	r2, r3, #8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8003caa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f103 0208 	add.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f103 0208 	add.w	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d103      	bne.n	8003d54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e00c      	b.n	8003d6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3308      	adds	r3, #8
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e002      	b.n	8003d62 <vListInsert+0x2e>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d2f6      	bcs.n	8003d5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6892      	ldr	r2, [r2, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6852      	ldr	r2, [r2, #4]
 8003dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d103      	bne.n	8003dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b08e      	sub	sp, #56	; 0x38
 8003dfe:	af04      	add	r7, sp, #16
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	e7fe      	b.n	8003e20 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <xTaskCreateStatic+0x42>
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e7fe      	b.n	8003e3a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e3c:	2354      	movs	r3, #84	; 0x54
 8003e3e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b54      	cmp	r3, #84	; 0x54
 8003e44:	d009      	beq.n	8003e5a <xTaskCreateStatic+0x60>
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e7fe      	b.n	8003e58 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01e      	beq.n	8003ea0 <xTaskCreateStatic+0xa6>
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01b      	beq.n	8003ea0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9303      	str	r3, [sp, #12]
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	f107 0314 	add.w	r3, r7, #20
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f850 	bl	8003f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e9a:	f000 f8d3 	bl	8004044 <prvAddNewTaskToReadyList>
 8003e9e:	e001      	b.n	8003ea4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ea4:	697b      	ldr	r3, [r7, #20]
	}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b08c      	sub	sp, #48	; 0x30
 8003eb2:	af04      	add	r7, sp, #16
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 feae 	bl	8004c24 <pvPortMalloc>
 8003ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00e      	beq.n	8003eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ed0:	2054      	movs	r0, #84	; 0x54
 8003ed2:	f000 fea7 	bl	8004c24 <pvPortMalloc>
 8003ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee4:	e005      	b.n	8003ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ee6:	6978      	ldr	r0, [r7, #20]
 8003ee8:	f000 ff5e 	bl	8004da8 <vPortFree>
 8003eec:	e001      	b.n	8003ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	9302      	str	r3, [sp, #8]
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f80e 	bl	8003f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f1c:	69f8      	ldr	r0, [r7, #28]
 8003f1e:	f000 f891 	bl	8004044 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e002      	b.n	8003f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f50:	3b01      	subs	r3, #1
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <prvInitialiseNewTask+0x46>
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e7fe      	b.n	8003f7c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01f      	beq.n	8003fc4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e012      	b.n	8003fb0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	7819      	ldrb	r1, [r3, #0]
 8003f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	3334      	adds	r3, #52	; 0x34
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3301      	adds	r3, #1
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d9e9      	bls.n	8003f8a <prvInitialiseNewTask+0x52>
 8003fb6:	e000      	b.n	8003fba <prvInitialiseNewTask+0x82>
			{
				break;
 8003fb8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc2:	e003      	b.n	8003fcc <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	2b06      	cmp	r3, #6
 8003fd0:	d901      	bls.n	8003fd6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fd2:	2306      	movs	r3, #6
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fe70 	bl	8003cd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fe6b 	bl	8003cd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004000:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	f1c3 0207 	rsb	r2, r3, #7
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004010:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	69b8      	ldr	r0, [r7, #24]
 8004026:	f000 fbfd 	bl	8004824 <pxPortInitialiseStack>
 800402a:	4602      	mov	r2, r0
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800404c:	f000 fd0e 	bl	8004a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004050:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <prvAddNewTaskToReadyList+0xb8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	4a29      	ldr	r2, [pc, #164]	; (80040fc <prvAddNewTaskToReadyList+0xb8>)
 8004058:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800405a:	4b29      	ldr	r3, [pc, #164]	; (8004100 <prvAddNewTaskToReadyList+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004062:	4a27      	ldr	r2, [pc, #156]	; (8004100 <prvAddNewTaskToReadyList+0xbc>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004068:	4b24      	ldr	r3, [pc, #144]	; (80040fc <prvAddNewTaskToReadyList+0xb8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d110      	bne.n	8004092 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004070:	f000 fab8 	bl	80045e4 <prvInitialiseTaskLists>
 8004074:	e00d      	b.n	8004092 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004076:	4b23      	ldr	r3, [pc, #140]	; (8004104 <prvAddNewTaskToReadyList+0xc0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <prvAddNewTaskToReadyList+0xbc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	429a      	cmp	r2, r3
 800408a:	d802      	bhi.n	8004092 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800408c:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <prvAddNewTaskToReadyList+0xbc>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <prvAddNewTaskToReadyList+0xc4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <prvAddNewTaskToReadyList+0xc4>)
 800409a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <prvAddNewTaskToReadyList+0xc8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <prvAddNewTaskToReadyList+0xc8>)
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4a15      	ldr	r2, [pc, #84]	; (8004110 <prvAddNewTaskToReadyList+0xcc>)
 80040bc:	441a      	add	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f7ff fe11 	bl	8003cec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040ca:	f000 fcfd 	bl	8004ac8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ce:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <prvAddNewTaskToReadyList+0xc0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00e      	beq.n	80040f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <prvAddNewTaskToReadyList+0xbc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d207      	bcs.n	80040f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <prvAddNewTaskToReadyList+0xd0>)
 80040e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000384 	.word	0x20000384
 8004100:	20000284 	.word	0x20000284
 8004104:	20000390 	.word	0x20000390
 8004108:	200003a0 	.word	0x200003a0
 800410c:	2000038c 	.word	0x2000038c
 8004110:	20000288 	.word	0x20000288
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <vTaskDelay+0x60>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <vTaskDelay+0x2e>
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	e7fe      	b.n	8004144 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004146:	f000 f879 	bl	800423c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800414a:	2100      	movs	r1, #0
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fb03 	bl	8004758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004152:	f000 f881 	bl	8004258 <xTaskResumeAll>
 8004156:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d107      	bne.n	800416e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <vTaskDelay+0x64>)
 8004160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200003ac 	.word	0x200003ac
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800418e:	463a      	mov	r2, r7
 8004190:	1d39      	adds	r1, r7, #4
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd f9e0 	bl	800155c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800419c:	6839      	ldr	r1, [r7, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	9202      	str	r2, [sp, #8]
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	2300      	movs	r3, #0
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2300      	movs	r3, #0
 80041ac:	460a      	mov	r2, r1
 80041ae:	491d      	ldr	r1, [pc, #116]	; (8004224 <vTaskStartScheduler+0xa4>)
 80041b0:	481d      	ldr	r0, [pc, #116]	; (8004228 <vTaskStartScheduler+0xa8>)
 80041b2:	f7ff fe22 	bl	8003dfa <xTaskCreateStatic>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b1c      	ldr	r3, [pc, #112]	; (800422c <vTaskStartScheduler+0xac>)
 80041ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <vTaskStartScheduler+0xac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e001      	b.n	80041ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d115      	bne.n	8004200 <vTaskStartScheduler+0x80>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <vTaskStartScheduler+0xb0>)
 80041e8:	f04f 32ff 	mov.w	r2, #4294967295
 80041ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041ee:	4b11      	ldr	r3, [pc, #68]	; (8004234 <vTaskStartScheduler+0xb4>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <vTaskStartScheduler+0xb8>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041fa:	f000 fb99 	bl	8004930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041fe:	e00d      	b.n	800421c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004206:	d109      	bne.n	800421c <vTaskStartScheduler+0x9c>
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e7fe      	b.n	800421a <vTaskStartScheduler+0x9a>
}
 800421c:	bf00      	nop
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	080050e0 	.word	0x080050e0
 8004228:	080045b5 	.word	0x080045b5
 800422c:	200003a8 	.word	0x200003a8
 8004230:	200003a4 	.word	0x200003a4
 8004234:	20000390 	.word	0x20000390
 8004238:	20000388 	.word	0x20000388

0800423c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <vTaskSuspendAll+0x18>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	4a03      	ldr	r2, [pc, #12]	; (8004254 <vTaskSuspendAll+0x18>)
 8004248:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	200003ac 	.word	0x200003ac

08004258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <xTaskResumeAll+0x114>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <xTaskResumeAll+0x2a>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	e7fe      	b.n	8004280 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004282:	f000 fbf3 	bl	8004a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <xTaskResumeAll+0x114>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3b01      	subs	r3, #1
 800428c:	4a37      	ldr	r2, [pc, #220]	; (800436c <xTaskResumeAll+0x114>)
 800428e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004290:	4b36      	ldr	r3, [pc, #216]	; (800436c <xTaskResumeAll+0x114>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d161      	bne.n	800435c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <xTaskResumeAll+0x118>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05d      	beq.n	800435c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042a0:	e02e      	b.n	8004300 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a2:	4b34      	ldr	r3, [pc, #208]	; (8004374 <xTaskResumeAll+0x11c>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3318      	adds	r3, #24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd79 	bl	8003da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff fd74 	bl	8003da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c2:	2201      	movs	r2, #1
 80042c4:	409a      	lsls	r2, r3
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <xTaskResumeAll+0x120>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <xTaskResumeAll+0x120>)
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4a27      	ldr	r2, [pc, #156]	; (800437c <xTaskResumeAll+0x124>)
 80042de:	441a      	add	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7ff fd00 	bl	8003cec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f0:	4b23      	ldr	r3, [pc, #140]	; (8004380 <xTaskResumeAll+0x128>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <xTaskResumeAll+0x12c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <xTaskResumeAll+0x11c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1cc      	bne.n	80042a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800430e:	f000 fa03 	bl	8004718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <xTaskResumeAll+0x130>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d010      	beq.n	8004340 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800431e:	f000 f837 	bl	8004390 <xTaskIncrementTick>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004328:	4b16      	ldr	r3, [pc, #88]	; (8004384 <xTaskResumeAll+0x12c>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3b01      	subs	r3, #1
 8004332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f1      	bne.n	800431e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <xTaskResumeAll+0x130>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <xTaskResumeAll+0x12c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <xTaskResumeAll+0x134>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800435c:	f000 fbb4 	bl	8004ac8 <vPortExitCritical>

	return xAlreadyYielded;
 8004360:	68bb      	ldr	r3, [r7, #8]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200003ac 	.word	0x200003ac
 8004370:	20000384 	.word	0x20000384
 8004374:	20000344 	.word	0x20000344
 8004378:	2000038c 	.word	0x2000038c
 800437c:	20000288 	.word	0x20000288
 8004380:	20000284 	.word	0x20000284
 8004384:	20000398 	.word	0x20000398
 8004388:	20000394 	.word	0x20000394
 800438c:	e000ed04 	.word	0xe000ed04

08004390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439a:	4b4e      	ldr	r3, [pc, #312]	; (80044d4 <xTaskIncrementTick+0x144>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 8087 	bne.w	80044b2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <xTaskIncrementTick+0x148>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043ac:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <xTaskIncrementTick+0x148>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11f      	bne.n	80043f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043b8:	4b48      	ldr	r3, [pc, #288]	; (80044dc <xTaskIncrementTick+0x14c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <xTaskIncrementTick+0x46>
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	e7fe      	b.n	80043d4 <xTaskIncrementTick+0x44>
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <xTaskIncrementTick+0x14c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	4b40      	ldr	r3, [pc, #256]	; (80044e0 <xTaskIncrementTick+0x150>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3e      	ldr	r2, [pc, #248]	; (80044dc <xTaskIncrementTick+0x14c>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4a3e      	ldr	r2, [pc, #248]	; (80044e0 <xTaskIncrementTick+0x150>)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <xTaskIncrementTick+0x154>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3301      	adds	r3, #1
 80043f0:	4a3c      	ldr	r2, [pc, #240]	; (80044e4 <xTaskIncrementTick+0x154>)
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	f000 f990 	bl	8004718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043f8:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <xTaskIncrementTick+0x158>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d348      	bcc.n	8004494 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <xTaskIncrementTick+0x14c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d104      	bne.n	8004416 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <xTaskIncrementTick+0x158>)
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	601a      	str	r2, [r3, #0]
					break;
 8004414:	e03e      	b.n	8004494 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004416:	4b31      	ldr	r3, [pc, #196]	; (80044dc <xTaskIncrementTick+0x14c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	429a      	cmp	r2, r3
 800442c:	d203      	bcs.n	8004436 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800442e:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <xTaskIncrementTick+0x158>)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004434:	e02e      	b.n	8004494 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3304      	adds	r3, #4
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fcb3 	bl	8003da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	3318      	adds	r3, #24
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fcaa 	bl	8003da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	2201      	movs	r2, #1
 8004458:	409a      	lsls	r2, r3
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <xTaskIncrementTick+0x15c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4313      	orrs	r3, r2
 8004460:	4a22      	ldr	r2, [pc, #136]	; (80044ec <xTaskIncrementTick+0x15c>)
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <xTaskIncrementTick+0x160>)
 8004472:	441a      	add	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f7ff fc36 	bl	8003cec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <xTaskIncrementTick+0x164>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	429a      	cmp	r2, r3
 800448c:	d3b9      	bcc.n	8004402 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800448e:	2301      	movs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004492:	e7b6      	b.n	8004402 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <xTaskIncrementTick+0x164>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	4915      	ldr	r1, [pc, #84]	; (80044f0 <xTaskIncrementTick+0x160>)
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d907      	bls.n	80044bc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e004      	b.n	80044bc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <xTaskIncrementTick+0x168>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	4a0f      	ldr	r2, [pc, #60]	; (80044f8 <xTaskIncrementTick+0x168>)
 80044ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044bc:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <xTaskIncrementTick+0x16c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044c8:	697b      	ldr	r3, [r7, #20]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200003ac 	.word	0x200003ac
 80044d8:	20000388 	.word	0x20000388
 80044dc:	2000033c 	.word	0x2000033c
 80044e0:	20000340 	.word	0x20000340
 80044e4:	2000039c 	.word	0x2000039c
 80044e8:	200003a4 	.word	0x200003a4
 80044ec:	2000038c 	.word	0x2000038c
 80044f0:	20000288 	.word	0x20000288
 80044f4:	20000284 	.word	0x20000284
 80044f8:	20000394 	.word	0x20000394
 80044fc:	20000398 	.word	0x20000398

08004500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <vTaskSwitchContext+0xa0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800450e:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <vTaskSwitchContext+0xa4>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004514:	e03e      	b.n	8004594 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004516:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <vTaskSwitchContext+0xa4>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451c:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <vTaskSwitchContext+0xa8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800452a:	7afb      	ldrb	r3, [r7, #11]
 800452c:	f1c3 031f 	rsb	r3, r3, #31
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	491e      	ldr	r1, [pc, #120]	; (80045ac <vTaskSwitchContext+0xac>)
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <vTaskSwitchContext+0x5a>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	e7fe      	b.n	8004558 <vTaskSwitchContext+0x58>
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a11      	ldr	r2, [pc, #68]	; (80045ac <vTaskSwitchContext+0xac>)
 8004566:	4413      	add	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3308      	adds	r3, #8
 800457c:	429a      	cmp	r2, r3
 800457e:	d104      	bne.n	800458a <vTaskSwitchContext+0x8a>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <vTaskSwitchContext+0xb0>)
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	200003ac 	.word	0x200003ac
 80045a4:	20000398 	.word	0x20000398
 80045a8:	2000038c 	.word	0x2000038c
 80045ac:	20000288 	.word	0x20000288
 80045b0:	20000284 	.word	0x20000284

080045b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045bc:	f000 f852 	bl	8004664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvIdleTask+0x28>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d9f9      	bls.n	80045bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <prvIdleTask+0x2c>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045d8:	e7f0      	b.n	80045bc <prvIdleTask+0x8>
 80045da:	bf00      	nop
 80045dc:	20000288 	.word	0x20000288
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	e00c      	b.n	800460a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <prvInitialiseTaskLists+0x60>)
 80045fc:	4413      	add	r3, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb47 	bl	8003c92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3301      	adds	r3, #1
 8004608:	607b      	str	r3, [r7, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b06      	cmp	r3, #6
 800460e:	d9ef      	bls.n	80045f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004610:	480d      	ldr	r0, [pc, #52]	; (8004648 <prvInitialiseTaskLists+0x64>)
 8004612:	f7ff fb3e 	bl	8003c92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <prvInitialiseTaskLists+0x68>)
 8004618:	f7ff fb3b 	bl	8003c92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800461c:	480c      	ldr	r0, [pc, #48]	; (8004650 <prvInitialiseTaskLists+0x6c>)
 800461e:	f7ff fb38 	bl	8003c92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004622:	480c      	ldr	r0, [pc, #48]	; (8004654 <prvInitialiseTaskLists+0x70>)
 8004624:	f7ff fb35 	bl	8003c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004628:	480b      	ldr	r0, [pc, #44]	; (8004658 <prvInitialiseTaskLists+0x74>)
 800462a:	f7ff fb32 	bl	8003c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <prvInitialiseTaskLists+0x78>)
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <prvInitialiseTaskLists+0x64>)
 8004632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvInitialiseTaskLists+0x7c>)
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <prvInitialiseTaskLists+0x68>)
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000288 	.word	0x20000288
 8004648:	20000314 	.word	0x20000314
 800464c:	20000328 	.word	0x20000328
 8004650:	20000344 	.word	0x20000344
 8004654:	20000358 	.word	0x20000358
 8004658:	20000370 	.word	0x20000370
 800465c:	2000033c 	.word	0x2000033c
 8004660:	20000340 	.word	0x20000340

08004664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800466a:	e019      	b.n	80046a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800466c:	f000 f9fe 	bl	8004a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <prvCheckTasksWaitingTermination+0x4c>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fb92 	bl	8003da6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <prvCheckTasksWaitingTermination+0x50>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3b01      	subs	r3, #1
 8004688:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <prvCheckTasksWaitingTermination+0x50>)
 800468a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <prvCheckTasksWaitingTermination+0x54>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3b01      	subs	r3, #1
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <prvCheckTasksWaitingTermination+0x54>)
 8004694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004696:	f000 fa17 	bl	8004ac8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f80e 	bl	80046bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <prvCheckTasksWaitingTermination+0x54>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e1      	bne.n	800466c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000358 	.word	0x20000358
 80046b4:	20000384 	.word	0x20000384
 80046b8:	2000036c 	.word	0x2000036c

080046bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fb68 	bl	8004da8 <vPortFree>
				vPortFree( pxTCB );
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb65 	bl	8004da8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046de:	e017      	b.n	8004710 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d103      	bne.n	80046f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fb5c 	bl	8004da8 <vPortFree>
	}
 80046f0:	e00e      	b.n	8004710 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d009      	beq.n	8004710 <prvDeleteTCB+0x54>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e7fe      	b.n	800470e <prvDeleteTCB+0x52>
	}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471e:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <prvResetNextTaskUnblockTime+0x38>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <prvResetNextTaskUnblockTime+0x3c>)
 800472a:	f04f 32ff 	mov.w	r2, #4294967295
 800472e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004730:	e008      	b.n	8004744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <prvResetNextTaskUnblockTime+0x38>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <prvResetNextTaskUnblockTime+0x3c>)
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	2000033c 	.word	0x2000033c
 8004754:	200003a4 	.word	0x200003a4

08004758 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004762:	4b29      	ldr	r3, [pc, #164]	; (8004808 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004768:	4b28      	ldr	r3, [pc, #160]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fb19 	bl	8003da6 <uxListRemove>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	2201      	movs	r2, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	4b21      	ldr	r3, [pc, #132]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4013      	ands	r3, r2
 800478e:	4a20      	ldr	r2, [pc, #128]	; (8004810 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004790:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d10a      	bne.n	80047b0 <prvAddCurrentTaskToDelayedList+0x58>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	481a      	ldr	r0, [pc, #104]	; (8004814 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047aa:	f7ff fa9f 	bl	8003cec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ae:	e026      	b.n	80047fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d209      	bcs.n	80047dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <prvAddCurrentTaskToDelayedList+0xc0>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f7ff faad 	bl	8003d34 <vListInsert>
}
 80047da:	e010      	b.n	80047fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <prvAddCurrentTaskToDelayedList+0xc4>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4610      	mov	r0, r2
 80047ea:	f7ff faa3 	bl	8003d34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d202      	bcs.n	80047fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047f8:	4a09      	ldr	r2, [pc, #36]	; (8004820 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6013      	str	r3, [r2, #0]
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000388 	.word	0x20000388
 800480c:	20000284 	.word	0x20000284
 8004810:	2000038c 	.word	0x2000038c
 8004814:	20000370 	.word	0x20000370
 8004818:	20000340 	.word	0x20000340
 800481c:	2000033c 	.word	0x2000033c
 8004820:	200003a4 	.word	0x200003a4

08004824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3b04      	subs	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800483c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3b04      	subs	r3, #4
 8004842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3b04      	subs	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004854:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <pxPortInitialiseStack+0x64>)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3b14      	subs	r3, #20
 800485e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b04      	subs	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f06f 0202 	mvn.w	r2, #2
 8004872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3b20      	subs	r3, #32
 8004878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	0800488d 	.word	0x0800488d

0800488c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <prvTaskExitError+0x50>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489e:	d009      	beq.n	80048b4 <prvTaskExitError+0x28>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e7fe      	b.n	80048b2 <prvTaskExitError+0x26>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80048c6:	bf00      	nop
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0fc      	beq.n	80048c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000000c 	.word	0x2000000c

080048e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <pxCurrentTCBConst2>)
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	6808      	ldr	r0, [r1, #0]
 80048e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	f380 8809 	msr	PSP, r0
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f380 8811 	msr	BASEPRI, r0
 80048fa:	4770      	bx	lr
 80048fc:	f3af 8000 	nop.w

08004900 <pxCurrentTCBConst2>:
 8004900:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004908:	4808      	ldr	r0, [pc, #32]	; (800492c <prvPortStartFirstTask+0x24>)
 800490a:	6800      	ldr	r0, [r0, #0]
 800490c:	6800      	ldr	r0, [r0, #0]
 800490e:	f380 8808 	msr	MSP, r0
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f380 8814 	msr	CONTROL, r0
 800491a:	b662      	cpsie	i
 800491c:	b661      	cpsie	f
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	df00      	svc	0
 8004928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800492a:	bf00      	nop
 800492c:	e000ed08 	.word	0xe000ed08

08004930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004936:	4b44      	ldr	r3, [pc, #272]	; (8004a48 <xPortStartScheduler+0x118>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a44      	ldr	r2, [pc, #272]	; (8004a4c <xPortStartScheduler+0x11c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <xPortStartScheduler+0x24>
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e7fe      	b.n	8004952 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <xPortStartScheduler+0x118>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3d      	ldr	r2, [pc, #244]	; (8004a50 <xPortStartScheduler+0x120>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d109      	bne.n	8004972 <xPortStartScheduler+0x42>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e7fe      	b.n	8004970 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <xPortStartScheduler+0x124>)
 8004974:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004994:	b2da      	uxtb	r2, r3
 8004996:	4b30      	ldr	r3, [pc, #192]	; (8004a58 <xPortStartScheduler+0x128>)
 8004998:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <xPortStartScheduler+0x12c>)
 800499c:	2207      	movs	r2, #7
 800499e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049a0:	e009      	b.n	80049b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	d0ef      	beq.n	80049a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1c3 0307 	rsb	r3, r3, #7
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d009      	beq.n	80049e2 <xPortStartScheduler+0xb2>
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	e7fe      	b.n	80049e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	021b      	lsls	r3, r3, #8
 80049e8:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <xPortStartScheduler+0x12c>)
 80049f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <xPortStartScheduler+0x130>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <xPortStartScheduler+0x130>)
 8004a06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <xPortStartScheduler+0x130>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <xPortStartScheduler+0x130>)
 8004a12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a18:	f000 f8d6 	bl	8004bc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <xPortStartScheduler+0x134>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a22:	f000 f8f5 	bl	8004c10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <xPortStartScheduler+0x138>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <xPortStartScheduler+0x138>)
 8004a2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a32:	f7ff ff69 	bl	8004908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a36:	f7ff fd63 	bl	8004500 <vTaskSwitchContext>
	prvTaskExitError();
 8004a3a:	f7ff ff27 	bl	800488c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	e000ed00 	.word	0xe000ed00
 8004a4c:	410fc271 	.word	0x410fc271
 8004a50:	410fc270 	.word	0x410fc270
 8004a54:	e000e400 	.word	0xe000e400
 8004a58:	200003b0 	.word	0x200003b0
 8004a5c:	200003b4 	.word	0x200003b4
 8004a60:	e000ed20 	.word	0xe000ed20
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	e000ef34 	.word	0xe000ef34

08004a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <vPortEnterCritical+0x54>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <vPortEnterCritical+0x54>)
 8004a8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <vPortEnterCritical+0x54>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10e      	bne.n	8004ab4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <vPortEnterCritical+0x58>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d009      	beq.n	8004ab4 <vPortEnterCritical+0x48>
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	e7fe      	b.n	8004ab2 <vPortEnterCritical+0x46>
	}
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	2000000c 	.word	0x2000000c
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ace:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <vPortExitCritical+0x4c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <vPortExitCritical+0x22>
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	607b      	str	r3, [r7, #4]
 8004ae8:	e7fe      	b.n	8004ae8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <vPortExitCritical+0x4c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <vPortExitCritical+0x4c>)
 8004af2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <vPortExitCritical+0x4c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <vPortExitCritical+0x3e>
 8004afc:	2300      	movs	r3, #0
 8004afe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000000c 	.word	0x2000000c
	...

08004b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b20:	f3ef 8009 	mrs	r0, PSP
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <pxCurrentTCBConst>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f01e 0f10 	tst.w	lr, #16
 8004b30:	bf08      	it	eq
 8004b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b44:	f380 8811 	msr	BASEPRI, r0
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f7ff fcd6 	bl	8004500 <vTaskSwitchContext>
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f380 8811 	msr	BASEPRI, r0
 8004b5c:	bc09      	pop	{r0, r3}
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	6808      	ldr	r0, [r1, #0]
 8004b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b66:	f01e 0f10 	tst.w	lr, #16
 8004b6a:	bf08      	it	eq
 8004b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b70:	f380 8809 	msr	PSP, r0
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst>:
 8004b80:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ba0:	f7ff fbf6 	bl	8004390 <xTaskIncrementTick>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <SysTick_Handler+0x3c>)
 8004bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <vPortSetupTimerInterrupt+0x34>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <vPortSetupTimerInterrupt+0x38>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <vPortSetupTimerInterrupt+0x3c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <vPortSetupTimerInterrupt+0x40>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <vPortSetupTimerInterrupt+0x44>)
 8004be6:	3b01      	subs	r3, #1
 8004be8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bea:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <vPortSetupTimerInterrupt+0x34>)
 8004bec:	2207      	movs	r2, #7
 8004bee:	601a      	str	r2, [r3, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	e000e010 	.word	0xe000e010
 8004c00:	e000e018 	.word	0xe000e018
 8004c04:	20000000 	.word	0x20000000
 8004c08:	10624dd3 	.word	0x10624dd3
 8004c0c:	e000e014 	.word	0xe000e014

08004c10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c20 <vPortEnableVFP+0x10>
 8004c14:	6801      	ldr	r1, [r0, #0]
 8004c16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c1a:	6001      	str	r1, [r0, #0]
 8004c1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c1e:	bf00      	nop
 8004c20:	e000ed88 	.word	0xe000ed88

08004c24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c30:	f7ff fb04 	bl	800423c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c34:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <pvPortMalloc+0x170>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c3c:	f000 f90c 	bl	8004e58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c40:	4b55      	ldr	r3, [pc, #340]	; (8004d98 <pvPortMalloc+0x174>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 808c 	bne.w	8004d66 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01c      	beq.n	8004c8e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c54:	2208      	movs	r2, #8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f023 0307 	bic.w	r3, r3, #7
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <pvPortMalloc+0x6a>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e7fe      	b.n	8004c8c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d068      	beq.n	8004d66 <pvPortMalloc+0x142>
 8004c94:	4b41      	ldr	r3, [pc, #260]	; (8004d9c <pvPortMalloc+0x178>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d863      	bhi.n	8004d66 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c9e:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <pvPortMalloc+0x17c>)
 8004ca0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <pvPortMalloc+0x17c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ca8:	e004      	b.n	8004cb4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d903      	bls.n	8004cc6 <pvPortMalloc+0xa2>
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f1      	bne.n	8004caa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cc6:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <pvPortMalloc+0x170>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d04a      	beq.n	8004d66 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	2308      	movs	r3, #8
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d91e      	bls.n	8004d30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <pvPortMalloc+0xf4>
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e7fe      	b.n	8004d16 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d2a:	69b8      	ldr	r0, [r7, #24]
 8004d2c:	f000 f8f6 	bl	8004f1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <pvPortMalloc+0x178>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <pvPortMalloc+0x178>)
 8004d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d3e:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <pvPortMalloc+0x178>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <pvPortMalloc+0x180>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <pvPortMalloc+0x178>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <pvPortMalloc+0x180>)
 8004d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <pvPortMalloc+0x174>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d66:	f7ff fa77 	bl	8004258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <pvPortMalloc+0x164>
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	e7fe      	b.n	8004d86 <pvPortMalloc+0x162>
	return pvReturn;
 8004d88:	69fb      	ldr	r3, [r7, #28]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3728      	adds	r7, #40	; 0x28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20003fc0 	.word	0x20003fc0
 8004d98:	20003fcc 	.word	0x20003fcc
 8004d9c:	20003fc4 	.word	0x20003fc4
 8004da0:	20003fb8 	.word	0x20003fb8
 8004da4:	20003fc8 	.word	0x20003fc8

08004da8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d046      	beq.n	8004e48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dba:	2308      	movs	r3, #8
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <vPortFree+0xa8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <vPortFree+0x42>
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e7fe      	b.n	8004de8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <vPortFree+0x5e>
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	e7fe      	b.n	8004e04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <vPortFree+0xa8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d115      	bne.n	8004e48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <vPortFree+0xa8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	401a      	ands	r2, r3
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e2c:	f7ff fa06 	bl	800423c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <vPortFree+0xac>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <vPortFree+0xac>)
 8004e3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e3e:	6938      	ldr	r0, [r7, #16]
 8004e40:	f000 f86c 	bl	8004f1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e44:	f7ff fa08 	bl	8004258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e48:	bf00      	nop
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20003fcc 	.word	0x20003fcc
 8004e54:	20003fc4 	.word	0x20003fc4

08004e58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e5e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e64:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <prvHeapInit+0xac>)
 8004e66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3307      	adds	r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <prvHeapInit+0xac>)
 8004e88:	4413      	add	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <prvHeapInit+0xb0>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e96:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <prvHeapInit+0xb0>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <prvHeapInit+0xb4>)
 8004eb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eba:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <prvHeapInit+0xb4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <prvHeapInit+0xb4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <prvHeapInit+0xb4>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <prvHeapInit+0xb8>)
 8004ee6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <prvHeapInit+0xbc>)
 8004eee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <prvHeapInit+0xc0>)
 8004ef2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ef6:	601a      	str	r2, [r3, #0]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	200003b8 	.word	0x200003b8
 8004f08:	20003fb8 	.word	0x20003fb8
 8004f0c:	20003fc0 	.word	0x20003fc0
 8004f10:	20003fc8 	.word	0x20003fc8
 8004f14:	20003fc4 	.word	0x20003fc4
 8004f18:	20003fcc 	.word	0x20003fcc

08004f1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f24:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <prvInsertBlockIntoFreeList+0xac>)
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e002      	b.n	8004f30 <prvInsertBlockIntoFreeList+0x14>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d8f7      	bhi.n	8004f2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	4413      	add	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d108      	bne.n	8004f5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	441a      	add	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d118      	bne.n	8004fa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <prvInsertBlockIntoFreeList+0xb0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d00d      	beq.n	8004f9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	441a      	add	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e008      	b.n	8004fac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f9a:	4b0c      	ldr	r3, [pc, #48]	; (8004fcc <prvInsertBlockIntoFreeList+0xb0>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e003      	b.n	8004fac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d002      	beq.n	8004fba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20003fb8 	.word	0x20003fb8
 8004fcc:	20003fc0 	.word	0x20003fc0

08004fd0 <__libc_init_array>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4e0d      	ldr	r6, [pc, #52]	; (8005008 <__libc_init_array+0x38>)
 8004fd4:	4c0d      	ldr	r4, [pc, #52]	; (800500c <__libc_init_array+0x3c>)
 8004fd6:	1ba4      	subs	r4, r4, r6
 8004fd8:	10a4      	asrs	r4, r4, #2
 8004fda:	2500      	movs	r5, #0
 8004fdc:	42a5      	cmp	r5, r4
 8004fde:	d109      	bne.n	8004ff4 <__libc_init_array+0x24>
 8004fe0:	4e0b      	ldr	r6, [pc, #44]	; (8005010 <__libc_init_array+0x40>)
 8004fe2:	4c0c      	ldr	r4, [pc, #48]	; (8005014 <__libc_init_array+0x44>)
 8004fe4:	f000 f820 	bl	8005028 <_init>
 8004fe8:	1ba4      	subs	r4, r4, r6
 8004fea:	10a4      	asrs	r4, r4, #2
 8004fec:	2500      	movs	r5, #0
 8004fee:	42a5      	cmp	r5, r4
 8004ff0:	d105      	bne.n	8004ffe <__libc_init_array+0x2e>
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff8:	4798      	blx	r3
 8004ffa:	3501      	adds	r5, #1
 8004ffc:	e7ee      	b.n	8004fdc <__libc_init_array+0xc>
 8004ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005002:	4798      	blx	r3
 8005004:	3501      	adds	r5, #1
 8005006:	e7f2      	b.n	8004fee <__libc_init_array+0x1e>
 8005008:	08005108 	.word	0x08005108
 800500c:	08005108 	.word	0x08005108
 8005010:	08005108 	.word	0x08005108
 8005014:	0800510c 	.word	0x0800510c

08005018 <memset>:
 8005018:	4402      	add	r2, r0
 800501a:	4603      	mov	r3, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	f803 1b01 	strb.w	r1, [r3], #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	bf00      	nop
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

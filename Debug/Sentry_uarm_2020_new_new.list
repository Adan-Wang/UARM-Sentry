
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007644  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079ec  080079ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080079ec  080079ec  000179ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f4  080079f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080079fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d8  20000074  08007a70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000434c  08007a70  0002434c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208f6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047f9  00000000  00000000  0004099a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00045198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00046670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c67  00000000  00000000  00047950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d32  00000000  00000000  0006f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3482  00000000  00000000  000882e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b76b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cec  00000000  00000000  0016b7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080077dc 	.word	0x080077dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080077dc 	.word	0x080077dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96e 	b.w	8000d80 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468c      	mov	ip, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 8083 	bne.w	8000bd2 <__udivmoddi4+0x116>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4617      	mov	r7, r2
 8000ad0:	d947      	bls.n	8000b62 <__udivmoddi4+0xa6>
 8000ad2:	fab2 f282 	clz	r2, r2
 8000ad6:	b142      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad8:	f1c2 0020 	rsb	r0, r2, #32
 8000adc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	4097      	lsls	r7, r2
 8000ae4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbbc f6f8 	udiv	r6, ip, r8
 8000af4:	fa1f fe87 	uxth.w	lr, r7
 8000af8:	fb08 c116 	mls	r1, r8, r6, ip
 8000afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b00:	fb06 f10e 	mul.w	r1, r6, lr
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b0e:	f080 8119 	bcs.w	8000d44 <__udivmoddi4+0x288>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8116 	bls.w	8000d44 <__udivmoddi4+0x288>
 8000b18:	3e02      	subs	r6, #2
 8000b1a:	443b      	add	r3, r7
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3310 	mls	r3, r8, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b30:	45a6      	cmp	lr, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	193c      	adds	r4, r7, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8105 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b3e:	45a6      	cmp	lr, r4
 8000b40:	f240 8102 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4c:	eba4 040e 	sub.w	r4, r4, lr
 8000b50:	2600      	movs	r6, #0
 8000b52:	b11d      	cbz	r5, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c5 4300 	strd	r4, r3, [r5]
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	b902      	cbnz	r2, 8000b66 <__udivmoddi4+0xaa>
 8000b64:	deff      	udf	#255	; 0xff
 8000b66:	fab2 f282 	clz	r2, r2
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d150      	bne.n	8000c10 <__udivmoddi4+0x154>
 8000b6e:	1bcb      	subs	r3, r1, r7
 8000b70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b74:	fa1f f887 	uxth.w	r8, r7
 8000b78:	2601      	movs	r6, #1
 8000b7a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b7e:	0c21      	lsrs	r1, r4, #16
 8000b80:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b88:	fb08 f30c 	mul.w	r3, r8, ip
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000b90:	1879      	adds	r1, r7, r1
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0xe2>
 8000b98:	428b      	cmp	r3, r1
 8000b9a:	f200 80e9 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1ac9      	subs	r1, r1, r3
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x10c>
 8000bb8:	193c      	adds	r4, r7, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x10a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80d9 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e7bf      	b.n	8000b52 <__udivmoddi4+0x96>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x12e>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	f000 80b1 	beq.w	8000d3e <__udivmoddi4+0x282>
 8000bdc:	2600      	movs	r6, #0
 8000bde:	e9c5 0100 	strd	r0, r1, [r5]
 8000be2:	4630      	mov	r0, r6
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f683 	clz	r6, r3
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d14a      	bne.n	8000c88 <__udivmoddi4+0x1cc>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0x140>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80b8 	bhi.w	8000d6c <__udivmoddi4+0x2b0>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0103 	sbc.w	r1, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	468c      	mov	ip, r1
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0a8      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000c0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000c10:	f1c2 0320 	rsb	r3, r2, #32
 8000c14:	fa20 f603 	lsr.w	r6, r0, r3
 8000c18:	4097      	lsls	r7, r2
 8000c1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c22:	40d9      	lsrs	r1, r3
 8000c24:	4330      	orrs	r0, r6
 8000c26:	0c03      	lsrs	r3, r0, #16
 8000c28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb06 f108 	mul.w	r1, r6, r8
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x19c>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c4a:	f080 808d 	bcs.w	8000d68 <__udivmoddi4+0x2ac>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 808a 	bls.w	8000d68 <__udivmoddi4+0x2ac>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b281      	uxth	r1, r0
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb00 f308 	mul.w	r3, r0, r8
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x1c4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c76:	d273      	bcs.n	8000d60 <__udivmoddi4+0x2a4>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d971      	bls.n	8000d60 <__udivmoddi4+0x2a4>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4439      	add	r1, r7
 8000c80:	1acb      	subs	r3, r1, r3
 8000c82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c86:	e778      	b.n	8000b7a <__udivmoddi4+0xbe>
 8000c88:	f1c6 0c20 	rsb	ip, r6, #32
 8000c8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c94:	431c      	orrs	r4, r3
 8000c96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ca2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ca6:	431f      	orrs	r7, r3
 8000ca8:	0c3b      	lsrs	r3, r7, #16
 8000caa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cae:	fa1f f884 	uxth.w	r8, r4
 8000cb2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cb6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cba:	fb09 fa08 	mul.w	sl, r9, r8
 8000cbe:	458a      	cmp	sl, r1
 8000cc0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cc4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x220>
 8000cca:	1861      	adds	r1, r4, r1
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	d248      	bcs.n	8000d64 <__udivmoddi4+0x2a8>
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	d946      	bls.n	8000d64 <__udivmoddi4+0x2a8>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4421      	add	r1, r4
 8000cdc:	eba1 010a 	sub.w	r1, r1, sl
 8000ce0:	b2bf      	uxth	r7, r7
 8000ce2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cee:	fb00 f808 	mul.w	r8, r0, r8
 8000cf2:	45b8      	cmp	r8, r7
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x24a>
 8000cf6:	19e7      	adds	r7, r4, r7
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d22e      	bcs.n	8000d5c <__udivmoddi4+0x2a0>
 8000cfe:	45b8      	cmp	r8, r7
 8000d00:	d92c      	bls.n	8000d5c <__udivmoddi4+0x2a0>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4427      	add	r7, r4
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	eba7 0708 	sub.w	r7, r7, r8
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	454f      	cmp	r7, r9
 8000d14:	46c6      	mov	lr, r8
 8000d16:	4649      	mov	r1, r9
 8000d18:	d31a      	bcc.n	8000d50 <__udivmoddi4+0x294>
 8000d1a:	d017      	beq.n	8000d4c <__udivmoddi4+0x290>
 8000d1c:	b15d      	cbz	r5, 8000d36 <__udivmoddi4+0x27a>
 8000d1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d22:	eb67 0701 	sbc.w	r7, r7, r1
 8000d26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d2a:	40f2      	lsrs	r2, r6
 8000d2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d30:	40f7      	lsrs	r7, r6
 8000d32:	e9c5 2700 	strd	r2, r7, [r5]
 8000d36:	2600      	movs	r6, #0
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e70b      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6fd      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d4c:	4543      	cmp	r3, r8
 8000d4e:	d2e5      	bcs.n	8000d1c <__udivmoddi4+0x260>
 8000d50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d54:	eb69 0104 	sbc.w	r1, r9, r4
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7df      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e7d2      	b.n	8000d06 <__udivmoddi4+0x24a>
 8000d60:	4660      	mov	r0, ip
 8000d62:	e78d      	b.n	8000c80 <__udivmoddi4+0x1c4>
 8000d64:	4681      	mov	r9, r0
 8000d66:	e7b9      	b.n	8000cdc <__udivmoddi4+0x220>
 8000d68:	4666      	mov	r6, ip
 8000d6a:	e775      	b.n	8000c58 <__udivmoddi4+0x19c>
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	e74a      	b.n	8000c06 <__udivmoddi4+0x14a>
 8000d70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d74:	4439      	add	r1, r7
 8000d76:	e713      	b.n	8000ba0 <__udivmoddi4+0xe4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	443c      	add	r4, r7
 8000d7c:	e724      	b.n	8000bc8 <__udivmoddi4+0x10c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	0000      	movs	r0, r0
	...

08000d88 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  char *pdata; // data packet from computer
  char *yaw;
  double vmax=30000;
 8000d90:	a329      	add	r3, pc, #164	; (adr r3, 8000e38 <Gimbal_Task_Function+0xb0>)
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double max_angle=4096;
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <Gimbal_Task_Function+0x98>)
 8000da0:	e9c7 2304 	strd	r2, r3, [r7, #16]

  int32_t yaw_data = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24

  yaw = malloc (4);
 8000da8:	2004      	movs	r0, #4
 8000daa:	f005 fda9 	bl	8006900 <malloc>
 8000dae:	4603      	mov	r3, r0
 8000db0:	60fb      	str	r3, [r7, #12]
  pdata = malloc(7); // packet total size, referring to comm protocol
 8000db2:	2007      	movs	r0, #7
 8000db4:	f005 fda4 	bl	8006900 <malloc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4819      	ldr	r0, [pc, #100]	; (8000e24 <Gimbal_Task_Function+0x9c>)
 8000dc0:	f001 fe6d 	bl	8002a9e <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <Gimbal_Task_Function+0xa0>)
 8000dc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dca:	801a      	strh	r2, [r3, #0]

  for(;;)
  {
	  //Motor_pid_set_angle(&motor_data[4],360,vmax/max_angle,0,0);
	  //HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
	  if (HAL_UART_Receive(&huart7, (char*)pdata, 7, HAL_MAX_DELAY) == HAL_OK){
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <Gimbal_Task_Function+0xa4>)
 8000dd6:	f003 fe9d 	bl	8004b14 <HAL_UART_Receive>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d109      	bne.n	8000df4 <Gimbal_Task_Function+0x6c>
		  HAL_GPIO_WritePin(GPIOG, LD_H_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2102      	movs	r1, #2
 8000de4:	4812      	ldr	r0, [pc, #72]	; (8000e30 <Gimbal_Task_Function+0xa8>)
 8000de6:	f002 fb3d 	bl	8003464 <HAL_GPIO_WritePin>
		  yaw_data = parse_pack(pdata, yaw);
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	68b8      	ldr	r0, [r7, #8]
 8000dee:	f000 f827 	bl	8000e40 <parse_pack>
 8000df2:	6278      	str	r0, [r7, #36]	; 0x24
//			  case '0': HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
//			  case '1': HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
//			  case '2': HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);break;
//			  case '123': HAL_GPIO_WritePin(GPIOG, LD_D_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
//		  }
	  HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <Gimbal_Task_Function+0xa8>)
 8000dfa:	f002 fb33 	bl	8003464 <HAL_GPIO_WritePin>
	  Motor_set_raw_value(&motor_data[0], yaw_data);
 8000dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e00:	f7ff fba0 	bl	8000544 <__aeabi_i2d>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	ec43 2b10 	vmov	d0, r2, r3
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <Gimbal_Task_Function+0xac>)
 8000e0e:	f000 fa4e 	bl	80012ae <Motor_set_raw_value>
	  osDelay(1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f004 fb75 	bl	8005502 <osDelay>
	  if (HAL_UART_Receive(&huart7, (char*)pdata, 7, HAL_MAX_DELAY) == HAL_OK){
 8000e18:	e7d8      	b.n	8000dcc <Gimbal_Task_Function+0x44>
 8000e1a:	bf00      	nop
 8000e1c:	f3af 8000 	nop.w
 8000e20:	40b00000 	.word	0x40b00000
 8000e24:	20004188 	.word	0x20004188
 8000e28:	20004232 	.word	0x20004232
 8000e2c:	200042f8 	.word	0x200042f8
 8000e30:	40021800 	.word	0x40021800
 8000e34:	20004080 	.word	0x20004080
 8000e38:	00000000 	.word	0x00000000
 8000e3c:	40dd4c00 	.word	0x40dd4c00

08000e40 <parse_pack>:
  free(pdata);

  /* USER CODE END Gimbal_Task_Function */
}

int32_t parse_pack(char* pack, char* yaw_data){
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	466b      	mov	r3, sp
 8000e4c:	461d      	mov	r5, r3

    char pdata[(strlen(pack)+1)]; //pack content size + '\0'
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff f9ce 	bl	80001f0 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	1c5c      	adds	r4, r3, #1
 8000e58:	4623      	mov	r3, r4
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f04f 0100 	mov.w	r1, #0
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	00cb      	lsls	r3, r1, #3
 8000e6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e72:	00c2      	lsls	r2, r0, #3
 8000e74:	4620      	mov	r0, r4
 8000e76:	f04f 0100 	mov.w	r1, #0
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	00cb      	lsls	r3, r1, #3
 8000e84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e88:	00c2      	lsls	r2, r0, #3
 8000e8a:	1de3      	adds	r3, r4, #7
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	ebad 0d03 	sub.w	sp, sp, r3
 8000e94:	466b      	mov	r3, sp
 8000e96:	3300      	adds	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
    int32_t yaw = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
    strcpy(pdata, pack);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 fe0e 	bl	8006ac4 <strcpy>

    if (pdata[0] == 0x41){ //check header， modify here
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b41      	cmp	r3, #65	; 0x41
 8000eae:	d127      	bne.n	8000f00 <parse_pack+0xc0>
    	HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	4817      	ldr	r0, [pc, #92]	; (8000f14 <parse_pack+0xd4>)
 8000eb8:	f002 fad4 	bl	8003464 <HAL_GPIO_WritePin>
		for(int i=0;i<4;i++){
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e01a      	b.n	8000ef8 <parse_pack+0xb8>
            yaw_data[i] = pdata[6-i-1] - '0'; // decoding, referring to the vision code.
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f1c3 0305 	rsb	r3, r3, #5
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	5cd2      	ldrb	r2, [r2, r3]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	6839      	ldr	r1, [r7, #0]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3a30      	subs	r2, #48	; 0x30
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
            yaw += ((int)yaw_data[i])*(10^i);
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f083 030a 	eor.w	r3, r3, #10
 8000ee8:	fb03 f302 	mul.w	r3, r3, r2
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4413      	add	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
		for(int i=0;i<4;i++){
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	dde1      	ble.n	8000ec2 <parse_pack+0x82>
 8000efe:	e002      	b.n	8000f06 <parse_pack+0xc6>
		}
    }
	else
		yaw_data[0] = NULL;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

    return yaw;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	46ad      	mov	sp, r5
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021800 	.word	0x40021800

08000f18 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000f20:	f000 f818 	bl	8000f54 <shoot_init>
  double fric_wheel_speed_percent=50;
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <Shoot_Task_Func+0x34>)
 8000f2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double mag_load_speed_percent=10;
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <Shoot_Task_Func+0x38>)
 8000f34:	e9c7 2302 	strd	r2, r3, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000f38:	ed97 1b04 	vldr	d1, [r7, #16]
 8000f3c:	ed97 0b02 	vldr	d0, [r7, #8]
 8000f40:	f000 f832 	bl	8000fa8 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f004 fadc 	bl	8005502 <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000f4a:	e7f5      	b.n	8000f38 <Shoot_Task_Func+0x20>
 8000f4c:	40490000 	.word	0x40490000
 8000f50:	40240000 	.word	0x40240000

08000f54 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <shoot_init+0x50>)
 8000f5c:	f002 ffba 	bl	8003ed4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000f60:	2108      	movs	r1, #8
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <shoot_init+0x50>)
 8000f64:	f002 ffb6 	bl	8003ed4 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <shoot_init+0x50>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f640 0298 	movw	r2, #2200	; 0x898
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <shoot_init+0x50>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f640 0298 	movw	r2, #2200	; 0x898
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8000f7c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f80:	f004 fabf 	bl	8005502 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <shoot_init+0x50>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <shoot_init+0x50>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000f98:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000f9c:	f004 fab1 	bl	8005502 <osDelay>

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20004040 	.word	0x20004040

08000fa8 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	ed87 0b02 	vstr	d0, [r7, #8]
 8000fb2:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <cmd_execute_shoot+0x50>)
 8000fbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fc0:	f7ff fc54 	bl	800086c <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	a308      	add	r3, pc, #32	; (adr r3, 8000ff0 <cmd_execute_shoot+0x48>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fb21 	bl	8000618 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9c7 2304 	strd	r2, r3, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 8000fde:	ed97 0b04 	vldr	d0, [r7, #16]
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <cmd_execute_shoot+0x54>)
 8000fe4:	f000 f963 	bl	80012ae <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40c38800 	.word	0x40c38800
 8000ff8:	40590000 	.word	0x40590000
 8000ffc:	200040d4 	.word	0x200040d4

08001000 <Timer_Task_Func>:

#include "Timer_App.h"



void Timer_Task_Func(void const * argument){
 8001000:	b580      	push	{r7, lr}
 8001002:	b090      	sub	sp, #64	; 0x40
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

uint32_t tick;
	for (;;){
		Motor_Data_Read();
 8001008:	f000 f816 	bl	8001038 <Motor_Data_Read>
		Motor_Data_Sent();
 800100c:	f000 f87c 	bl	8001108 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <Timer_Task_Func+0x30>)
 8001018:	f000 f8fc 	bl	8001214 <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4619      	mov	r1, r3
 8001022:	4804      	ldr	r0, [pc, #16]	; (8001034 <Timer_Task_Func+0x34>)
 8001024:	f000 f8f6 	bl	8001214 <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f004 fa6a 	bl	8005502 <osDelay>
	for (;;){
 800102e:	e7eb      	b.n	8001008 <Timer_Task_Func+0x8>
 8001030:	200040f0 	.word	0x200040f0
 8001034:	20004080 	.word	0x20004080

08001038 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e052      	b.n	80010ea <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8001044:	482d      	ldr	r0, [pc, #180]	; (80010fc <Motor_Data_Read+0xc4>)
 8001046:	f000 f9e7 	bl	8001418 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <Motor_Data_Read+0xc8>)
 8001050:	441a      	add	r2, r3
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	6810      	ldr	r0, [r2, #0]
 8001056:	6851      	ldr	r1, [r2, #4]
 8001058:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 800105a:	793b      	ldrb	r3, [r7, #4]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b218      	sxth	r0, r3
 8001068:	4926      	ldr	r1, [pc, #152]	; (8001104 <Motor_Data_Read+0xcc>)
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	1a9b      	subs	r3, r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	3310      	adds	r3, #16
 8001078:	4602      	mov	r2, r0
 800107a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b218      	sxth	r0, r3
 800108a:	491e      	ldr	r1, [pc, #120]	; (8001104 <Motor_Data_Read+0xcc>)
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3312      	adds	r3, #18
 800109a:	4602      	mov	r2, r0
 800109c:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 800109e:	7a3b      	ldrb	r3, [r7, #8]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7a7b      	ldrb	r3, [r7, #9]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b218      	sxth	r0, r3
 80010ac:	4915      	ldr	r1, [pc, #84]	; (8001104 <Motor_Data_Read+0xcc>)
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3314      	adds	r3, #20
 80010bc:	4602      	mov	r2, r0
 80010be:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 80010c0:	7abb      	ldrb	r3, [r7, #10]
 80010c2:	b218      	sxth	r0, r3
 80010c4:	490f      	ldr	r1, [pc, #60]	; (8001104 <Motor_Data_Read+0xcc>)
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3316      	adds	r3, #22
 80010d4:	4602      	mov	r2, r0
 80010d6:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f004 fa12 	bl	8005502 <osDelay>

		can_filter_disable(&hcan1);
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <Motor_Data_Read+0xc4>)
 80010e0:	f000 f9bc 	bl	800145c <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b07      	cmp	r3, #7
 80010ee:	dda9      	ble.n	8001044 <Motor_Data_Read+0xc>
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20004188 	.word	0x20004188
 8001100:	200041b0 	.word	0x200041b0
 8001104:	20004080 	.word	0x20004080

08001108 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 8001116:	2308      	movs	r3, #8
 8001118:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
 800111e:	e06c      	b.n	80011fa <Motor_Data_Sent+0xf2>
		if (i == 0) {
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d12b      	bne.n	800117e <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <Motor_Data_Sent+0x104>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	121b      	asrs	r3, r3, #8
 8001132:	b2db      	uxtb	r3, r3
 8001134:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <Motor_Data_Sent+0x104>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <Motor_Data_Sent+0x104>)
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	121b      	asrs	r3, r3, #8
 8001144:	b2db      	uxtb	r3, r3
 8001146:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <Motor_Data_Sent+0x104>)
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	b2db      	uxtb	r3, r3
 800114e:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <Motor_Data_Sent+0x104>)
 8001152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001154:	121b      	asrs	r3, r3, #8
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <Motor_Data_Sent+0x104>)
 800115e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <Motor_Data_Sent+0x104>)
 8001168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800116a:	121b      	asrs	r3, r3, #8
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <Motor_Data_Sent+0x104>)
 8001174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800117c:	e032      	b.n	80011e4 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 800117e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001182:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <Motor_Data_Sent+0x104>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	121b      	asrs	r3, r3, #8
 800118c:	b2db      	uxtb	r3, r3
 800118e:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <Motor_Data_Sent+0x104>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	b2db      	uxtb	r3, r3
 8001198:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <Motor_Data_Sent+0x104>)
 800119c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011a0:	121b      	asrs	r3, r3, #8
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <Motor_Data_Sent+0x104>)
 80011a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <Motor_Data_Sent+0x104>)
 80011b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80011b6:	121b      	asrs	r3, r3, #8
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <Motor_Data_Sent+0x104>)
 80011c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <Motor_Data_Sent+0x104>)
 80011cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011d0:	121b      	asrs	r3, r3, #8
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <Motor_Data_Sent+0x104>)
 80011da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	f107 021c 	add.w	r2, r7, #28
 80011ec:	4639      	mov	r1, r7
 80011ee:	4808      	ldr	r0, [pc, #32]	; (8001210 <Motor_Data_Sent+0x108>)
 80011f0:	f001 fa68 	bl	80026c4 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3301      	adds	r3, #1
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	dd8f      	ble.n	8001120 <Motor_Data_Sent+0x18>
	}
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20004080 	.word	0x20004080
 8001210:	20004188 	.word	0x20004188

08001214 <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 f811 	bl	8001248 <Motor_Data_Replacement>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f804 	bl	8001248 <Motor_Data_Replacement>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	60da      	str	r2, [r3, #12]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b08c      	sub	sp, #48	; 0x30
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ffa7 	bl	8001214 <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 80012c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012ca:	f7ff fbb7 	bl	8000a3c <__aeabi_d2iz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ffa8 	bl	800122e <set_Motor_buffer>
}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4802      	ldr	r0, [pc, #8]	; (80012f8 <buzzer_init+0x10>)
 80012f0:	f002 fdf0 	bl	8003ed4 <HAL_TIM_PWM_Start>

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200041f0 	.word	0x200041f0

080012fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_CAN1_Init+0x64>)
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <MX_CAN1_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_CAN1_Init+0x64>)
 8001308:	2203      	movs	r2, #3
 800130a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_CAN1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_CAN1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_CAN1_Init+0x64>)
 800131a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800131e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_CAN1_Init+0x64>)
 8001322:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001326:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_CAN1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_CAN1_Init+0x64>)
 8001330:	2201      	movs	r2, #1
 8001332:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_CAN1_Init+0x64>)
 8001336:	2201      	movs	r2, #1
 8001338:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_CAN1_Init+0x64>)
 800133c:	2201      	movs	r2, #1
 800133e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_CAN1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_CAN1_Init+0x64>)
 8001348:	2201      	movs	r2, #1
 800134a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_CAN1_Init+0x64>)
 800134e:	f000 ff99 	bl	8002284 <HAL_CAN_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001358:	f000 fb20 	bl	800199c <Error_Handler>
  }

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20004188 	.word	0x20004188
 8001364:	40006400 	.word	0x40006400

08001368 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a21      	ldr	r2, [pc, #132]	; (800140c <HAL_CAN_MspInit+0xa4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d13b      	bne.n	8001402 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_CAN_MspInit+0xa8>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_CAN_MspInit+0xa8>)
 8001394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_CAN_MspInit+0xa8>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_CAN_MspInit+0xa8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_CAN_MspInit+0xa8>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_CAN_MspInit+0xa8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013c2:	2303      	movs	r3, #3
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013d2:	2309      	movs	r3, #9
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <HAL_CAN_MspInit+0xac>)
 80013de:	f001 fe95 	bl	800310c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2105      	movs	r1, #5
 80013e6:	2013      	movs	r0, #19
 80013e8:	f001 fe66 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80013ec:	2013      	movs	r0, #19
 80013ee:	f001 fe7f 	bl	80030f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2014      	movs	r0, #20
 80013f8:	f001 fe5e 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013fc:	2014      	movs	r0, #20
 80013fe:	f001 fe77 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40006400 	.word	0x40006400
 8001410:	40023800 	.word	0x40023800
 8001414:	40020c00 	.word	0x40020c00

08001418 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001440:	231b      	movs	r3, #27
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4619      	mov	r1, r3
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 f814 	bl	800247c <HAL_CAN_ConfigFilter>
}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800147c:	2301      	movs	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001484:	231b      	movs	r3, #27
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fff2 	bl	800247c <HAL_CAN_ConfigFilter>
}
 8001498:	bf00      	nop
 800149a:	3730      	adds	r7, #48	; 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80014b0:	0d5b      	lsrs	r3, r3, #21
 80014b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b6:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	3b01      	subs	r3, #1
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80014ca:	4413      	add	r3, r2
 80014cc:	f107 0208 	add.w	r2, r7, #8
 80014d0:	2100      	movs	r1, #0
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f001 f9d1 	bl	800287a <HAL_CAN_GetRxMessage>
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200041b0 	.word	0x200041b0

080014e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <vApplicationGetIdleTaskMemory+0x2c>)
 80014f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <vApplicationGetIdleTaskMemory+0x30>)
 80014fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000090 	.word	0x20000090
 8001514:	200000e4 	.word	0x200000e4

08001518 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b0a0      	sub	sp, #128	; 0x80
 800151c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <MX_FREERTOS_Init+0x98>)
 8001520:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001524:	461d      	mov	r5, r3
 8001526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001532:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f003 ff96 	bl	800546a <osThreadCreate>
 800153e:	4603      	mov	r3, r0
 8001540:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <MX_FREERTOS_Init+0x9c>)
 8001542:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	//osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
    //ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_FREERTOS_Init+0xa0>)
 8001546:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800154a:	461d      	mov	r5, r3
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001554:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8001558:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 ff83 	bl	800546a <osThreadCreate>
 8001564:	67f8      	str	r0, [r7, #124]	; 0x7c

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_FREERTOS_Init+0xa4>)
 8001568:	f107 0420 	add.w	r4, r7, #32
 800156c:	461d      	mov	r5, r3
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f003 ff72 	bl	800546a <osThreadCreate>
 8001586:	67b8      	str	r0, [r7, #120]	; 0x78

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <MX_FREERTOS_Init+0xa8>)
 800158a:	1d3c      	adds	r4, r7, #4
 800158c:	461d      	mov	r5, r3
 800158e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 ff63 	bl	800546a <osThreadCreate>
 80015a4:	6778      	str	r0, [r7, #116]	; 0x74
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80015a6:	bf00      	nop
 80015a8:	3780      	adds	r7, #128	; 0x80
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08007824 	.word	0x08007824
 80015b4:	20004234 	.word	0x20004234
 80015b8:	08007840 	.word	0x08007840
 80015bc:	0800785c 	.word	0x0800785c
 80015c0:	08007878 	.word	0x08007878

080015c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f003 ff98 	bl	8005502 <osDelay>
 80015d2:	e7fb      	b.n	80015cc <StartDefaultTask+0x8>

080015d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	; 0x30
 80015d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	4b6a      	ldr	r3, [pc, #424]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a69      	ldr	r2, [pc, #420]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a62      	ldr	r2, [pc, #392]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b60      	ldr	r3, [pc, #384]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b55      	ldr	r3, [pc, #340]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a54      	ldr	r2, [pc, #336]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b52      	ldr	r3, [pc, #328]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a4d      	ldr	r2, [pc, #308]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a46      	ldr	r2, [pc, #280]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b44      	ldr	r3, [pc, #272]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b40      	ldr	r3, [pc, #256]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a3f      	ldr	r2, [pc, #252]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80016b4:	4839      	ldr	r0, [pc, #228]	; (800179c <MX_GPIO_Init+0x1c8>)
 80016b6:	f001 fed5 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	211e      	movs	r1, #30
 80016be:	4837      	ldr	r0, [pc, #220]	; (800179c <MX_GPIO_Init+0x1c8>)
 80016c0:	f001 fed0 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ca:	4835      	ldr	r0, [pc, #212]	; (80017a0 <MX_GPIO_Init+0x1cc>)
 80016cc:	f001 feca 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d6:	4833      	ldr	r0, [pc, #204]	; (80017a4 <MX_GPIO_Init+0x1d0>)
 80016d8:	f001 fec4 	bl	8003464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 80016dc:	2320      	movs	r3, #32
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	482c      	ldr	r0, [pc, #176]	; (80017a0 <MX_GPIO_Init+0x1cc>)
 80016f0:	f001 fd0c 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 80016f4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80016f8:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4823      	ldr	r0, [pc, #140]	; (800179c <MX_GPIO_Init+0x1c8>)
 800170e:	f001 fcfd 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 8001712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	481f      	ldr	r0, [pc, #124]	; (80017a4 <MX_GPIO_Init+0x1d0>)
 8001728:	f001 fcf0 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800172c:	2304      	movs	r3, #4
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_GPIO_Init+0x1d4>)
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	481b      	ldr	r0, [pc, #108]	; (80017ac <MX_GPIO_Init+0x1d8>)
 8001740:	f001 fce4 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	4810      	ldr	r0, [pc, #64]	; (80017a0 <MX_GPIO_Init+0x1cc>)
 800175e:	f001 fcd5 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	480a      	ldr	r0, [pc, #40]	; (80017a4 <MX_GPIO_Init+0x1d0>)
 800177c:	f001 fcc6 	bl	800310c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2008      	movs	r0, #8
 8001786:	f001 fc97 	bl	80030b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800178a:	2008      	movs	r0, #8
 800178c:	f001 fcb0 	bl	80030f0 <HAL_NVIC_EnableIRQ>

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40021800 	.word	0x40021800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40021400 	.word	0x40021400
 80017a8:	10110000 	.word	0x10110000
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4603      	mov	r3, r0
 80017b8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d12b      	bne.n	8001818 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 80017c0:	4817      	ldr	r0, [pc, #92]	; (8001820 <HAL_GPIO_EXTI_Callback+0x70>)
 80017c2:	f7ff fe29 	bl	8001418 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <HAL_GPIO_EXTI_Callback+0x74>)
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	6810      	ldr	r0, [r2, #0]
 80017ce:	6851      	ldr	r1, [r2, #4]
 80017d0:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 80017d2:	7a3b      	ldrb	r3, [r7, #8]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b21a      	sxth	r2, r3
 80017d8:	7a7b      	ldrb	r3, [r7, #9]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80017e0:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 80017e2:	7abb      	ldrb	r3, [r7, #10]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80017f0:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	4603      	mov	r3, r0
 8001808:	460a      	mov	r2, r1
 800180a:	2101      	movs	r1, #1
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <HAL_GPIO_EXTI_Callback+0x78>)
 800180e:	f005 f931 	bl	8006a74 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <HAL_GPIO_EXTI_Callback+0x70>)
 8001814:	f7ff fe22 	bl	800145c <can_filter_disable>


	}
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20004188 	.word	0x20004188
 8001824:	200041b0 	.word	0x200041b0
 8001828:	08007894 	.word	0x08007894

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001830:	f000 fce6 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001834:	f000 f820 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001838:	f7ff fecc 	bl	80015d4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800183c:	f7ff fd5e 	bl	80012fc <MX_CAN1_Init>
  MX_TIM4_Init();
 8001840:	f000 fa42 	bl	8001cc8 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001844:	f000 faa6 	bl	8001d94 <MX_TIM12_Init>
  MX_UART7_Init();
 8001848:	f000 fc3e 	bl	80020c8 <MX_UART7_Init>
  MX_TIM14_Init();
 800184c:	f000 fb0c 	bl	8001e68 <MX_TIM14_Init>
  MX_TIM13_Init();
 8001850:	f000 fae6 	bl	8001e20 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001854:	f7ff fd48 	bl	80012e8 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8001858:	4805      	ldr	r0, [pc, #20]	; (8001870 <main+0x44>)
 800185a:	f000 feef 	bl	800263c <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <main+0x48>)
 8001860:	f002 fae9 	bl	8003e36 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001864:	f7ff fe58 	bl	8001518 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001868:	f003 fdf8 	bl	800545c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800186c:	e7fe      	b.n	800186c <main+0x40>
 800186e:	bf00      	nop
 8001870:	20004188 	.word	0x20004188
 8001874:	20004278 	.word	0x20004278

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	; 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	; 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f842 	bl	8006910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <SystemClock_Config+0xd0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a28      	ldr	r2, [pc, #160]	; (8001948 <SystemClock_Config+0xd0>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <SystemClock_Config+0xd0>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <SystemClock_Config+0xd4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c4:	4a21      	ldr	r2, [pc, #132]	; (800194c <SystemClock_Config+0xd4>)
 80018c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <SystemClock_Config+0xd4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d8:	2301      	movs	r3, #1
 80018da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80018ec:	2306      	movs	r3, #6
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018f0:	23a8      	movs	r3, #168	; 0xa8
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fdfb 	bl	80034fc <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800190c:	f000 f846 	bl	800199c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001914:	2302      	movs	r3, #2
 8001916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f854 	bl	80039dc <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800193a:	f000 f82f 	bl	800199c <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	; 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d109      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800196a:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 800196c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001970:	4808      	ldr	r0, [pc, #32]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001972:	f001 fd90 	bl	8003496 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8001980:	f000 fc60 	bl	8002244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40001c00 	.word	0x40001c00
 8001990:	200002e4 	.word	0x200002e4
 8001994:	40021000 	.word	0x40021000
 8001998:	40000c00 	.word	0x40000c00

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_MspInit+0x54>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a11      	ldr	r2, [pc, #68]	; (80019fc <HAL_MspInit+0x54>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_MspInit+0x54>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_MspInit+0x54>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_MspInit+0x54>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_MspInit+0x54>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f001 fb63 	bl	80030b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	2032      	movs	r0, #50	; 0x32
 8001a16:	f001 fb4f 	bl	80030b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a1a:	2032      	movs	r0, #50	; 0x32
 8001a1c:	f001 fb68 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_InitTick+0xa4>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_InitTick+0xa4>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_InitTick+0xa4>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a3c:	f107 0210 	add.w	r2, r7, #16
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 f998 	bl	8003d7c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a4c:	f002 f96e 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8001a50:	4603      	mov	r3, r0
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_InitTick+0xa8>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0c9b      	lsrs	r3, r3, #18
 8001a60:	3b01      	subs	r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_InitTick+0xac>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_InitTick+0xb0>)
 8001a68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_InitTick+0xac>)
 8001a6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a70:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_InitTick+0xac>)
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_InitTick+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_InitTick+0xac>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_InitTick+0xac>)
 8001a86:	f002 f9ab 	bl	8003de0 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d104      	bne.n	8001a9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <HAL_InitTick+0xac>)
 8001a92:	f002 f9d0 	bl	8003e36 <HAL_TIM_Base_Start_IT>
 8001a96:	4603      	mov	r3, r0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	20004238 	.word	0x20004238
 8001ab0:	40000c00 	.word	0x40000c00

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ae4:	2004      	movs	r0, #4
 8001ae6:	f001 fcf1 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <CAN1_TX_IRQHandler+0x10>)
 8001af6:	f000 fff8 	bl	8002aea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20004188 	.word	0x20004188

08001b04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <CAN1_RX0_IRQHandler+0x10>)
 8001b0a:	f000 ffee 	bl	8002aea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20004188 	.word	0x20004188

08001b18 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001b1e:	f002 fa17 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20004278 	.word	0x20004278

08001b2c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001b32:	f002 fa0d 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200042b8 	.word	0x200042b8

08001b40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM5_IRQHandler+0x10>)
 8001b46:	f002 fa03 	bl	8003f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20004238 	.word	0x20004238

08001b54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e00a      	b.n	8001b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b66:	f3af 8000 	nop.w
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf0      	blt.n	8001b66 <_read+0x12>
	}

return len;
 8001b84:	687b      	ldr	r3, [r7, #4]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	e009      	b.n	8001bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	60ba      	str	r2, [r7, #8]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fa7b 	bl	80020a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf1      	blt.n	8001ba0 <_write+0x12>
	}
	return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_close>:

int _close(int file)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bee:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_isatty>:

int _isatty(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	return 1;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f004 fe24 	bl	80068ac <__errno>
 8001c64:	4603      	mov	r3, r0
 8001c66:	220c      	movs	r2, #12
 8001c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20030000 	.word	0x20030000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	200002e8 	.word	0x200002e8
 8001c98:	20004350 	.word	0x20004350

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <SystemInit+0x28>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <SystemInit+0x28>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SystemInit+0x28>)
 8001cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001cec:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <MX_TIM4_Init+0xc8>)
 8001cee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001cf2:	2253      	movs	r2, #83	; 0x53
 8001cf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001cfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d04:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d10:	481e      	ldr	r0, [pc, #120]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d12:	f002 f8b4 	bl	8003e7e <HAL_TIM_PWM_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d1c:	f7ff fe3e 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4817      	ldr	r0, [pc, #92]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d30:	f002 fd7a 	bl	8004828 <HAL_TIMEx_MasterConfigSynchronization>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d3a:	f7ff fe2f 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d3e:	2360      	movs	r3, #96	; 0x60
 8001d40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d58:	f002 fa02 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d62:	f7ff fe1b 	bl	800199c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2208      	movs	r2, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d6e:	f002 f9f7 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001d78:	f7ff fe10 	bl	800199c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <MX_TIM4_Init+0xc4>)
 8001d7e:	f000 f92f 	bl	8001fe0 <HAL_TIM_MspPostInit>

}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20004040 	.word	0x20004040
 8001d90:	40000800 	.word	0x40000800

08001d94 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]
 8001daa:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <MX_TIM12_Init+0x88>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001db4:	2223      	movs	r2, #35	; 0x23
 8001db6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dc4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dd2:	4811      	ldr	r0, [pc, #68]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dd4:	f002 f853 	bl	8003e7e <HAL_TIM_PWM_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001dde:	f7ff fddd 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de2:	2360      	movs	r3, #96	; 0x60
 8001de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001dfa:	f002 f9b1 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e04:	f7ff fdca 	bl	800199c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <MX_TIM12_Init+0x84>)
 8001e0a:	f000 f8e9 	bl	8001fe0 <HAL_TIM_MspPostInit>

}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200041f0 	.word	0x200041f0
 8001e1c:	40001800 	.word	0x40001800

08001e20 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <MX_TIM13_Init+0x44>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e2c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001e30:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e3e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <MX_TIM13_Init+0x40>)
 8001e4e:	f001 ffc7 	bl	8003de0 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001e58:	f7ff fda0 	bl	800199c <Error_Handler>
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20004278 	.word	0x20004278
 8001e64:	40001c00 	.word	0x40001c00

08001e68 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <MX_TIM14_Init+0x44>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e74:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001e78:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e82:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e86:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_TIM14_Init+0x40>)
 8001e96:	f001 ffa3 	bl	8003de0 <HAL_TIM_Base_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001ea0:	f7ff fd7c 	bl	800199c <Error_Handler>
  }

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200042b8 	.word	0x200042b8
 8001eac:	40002000 	.word	0x40002000

08001eb0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_TIM_PWM_MspInit+0x64>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10e      	bne.n	8001ee0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <HAL_TIM_PWM_MspInit+0x68>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <HAL_TIM_PWM_MspInit+0x68>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_TIM_PWM_MspInit+0x68>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001ede:	e012      	b.n	8001f06 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_TIM_PWM_MspInit+0x6c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10d      	bne.n	8001f06 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_TIM_PWM_MspInit+0x68>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_TIM_PWM_MspInit+0x68>)
 8001ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_TIM_PWM_MspInit+0x68>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40000800 	.word	0x40000800
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d116      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2105      	movs	r1, #5
 8001f52:	202c      	movs	r0, #44	; 0x2c
 8001f54:	f001 f8b0 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f58:	202c      	movs	r0, #44	; 0x2c
 8001f5a:	f001 f8c9 	bl	80030f0 <HAL_NVIC_EnableIRQ>
 8001f5e:	e01a      	b.n	8001f96 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_TIM_Base_MspInit+0xbc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d115      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	202d      	movs	r0, #45	; 0x2d
 8001f8c:	f001 f894 	bl	80030b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f90:	202d      	movs	r0, #45	; 0x2d
 8001f92:	f001 f8ad 	bl	80030f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_TIM_Base_MspInit+0xb4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d115      	bne.n	8001fcc <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_TIM_Base_MspInit+0xb8>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	202c      	movs	r0, #44	; 0x2c
 8001fc2:	f001 f879 	bl	80030b8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001fc6:	202c      	movs	r0, #44	; 0x2c
 8001fc8:	f001 f892 	bl	80030f0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40001c00 	.word	0x40001c00
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40002000 	.word	0x40002000

08001fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a24      	ldr	r2, [pc, #144]	; (8002090 <HAL_TIM_MspPostInit+0xb0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d11f      	bne.n	8002042 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_TIM_MspPostInit+0xb4>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_TIM_MspPostInit+0xb4>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_TIM_MspPostInit+0xb4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 800201e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002030:	2302      	movs	r3, #2
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4817      	ldr	r0, [pc, #92]	; (8002098 <HAL_TIM_MspPostInit+0xb8>)
 800203c:	f001 f866 	bl	800310c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002040:	e022      	b.n	8002088 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a15      	ldr	r2, [pc, #84]	; (800209c <HAL_TIM_MspPostInit+0xbc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d11d      	bne.n	8002088 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_TIM_MspPostInit+0xb4>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_TIM_MspPostInit+0xb4>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205a:	6313      	str	r3, [r2, #48]	; 0x30
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_TIM_MspPostInit+0xb4>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002068:	2340      	movs	r3, #64	; 0x40
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002078:	2309      	movs	r3, #9
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <HAL_TIM_MspPostInit+0xc0>)
 8002084:	f001 f842 	bl	800310c <HAL_GPIO_Init>
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40000800 	.word	0x40000800
 8002094:	40023800 	.word	0x40023800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40001800 	.word	0x40001800
 80020a0:	40021c00 	.word	0x40021c00

080020a4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 80020ac:	1d39      	adds	r1, r7, #4
 80020ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b2:	2201      	movs	r2, #1
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <__io_putchar+0x20>)
 80020b6:	f002 fc94 	bl	80049e2 <HAL_UART_Transmit>

  return ch;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200042f8 	.word	0x200042f8

080020c8 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_UART7_Init+0x4c>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <MX_UART7_Init+0x50>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <MX_UART7_Init+0x4c>)
 80020d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_UART7_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_UART7_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_UART7_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_UART7_Init+0x4c>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <MX_UART7_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_UART7_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_UART7_Init+0x4c>)
 8002100:	f002 fc22 	bl	8004948 <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800210a:	f7ff fc47 	bl	800199c <Error_Handler>
  }

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200042f8 	.word	0x200042f8
 8002118:	40007800 	.word	0x40007800

0800211c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_UART_MspInit+0x84>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d12c      	bne.n	8002198 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_UART_MspInit+0x88>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_UART_MspInit+0x88>)
 8002148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_UART_MspInit+0x88>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_UART_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_UART_MspInit+0x88>)
 8002164:	f043 0310 	orr.w	r3, r3, #16
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_UART_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002176:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800217a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002180:	2301      	movs	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002188:	2308      	movs	r3, #8
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_UART_MspInit+0x8c>)
 8002194:	f000 ffba 	bl	800310c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40007800 	.word	0x40007800
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021000 	.word	0x40021000

080021ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021b2:	e003      	b.n	80021bc <LoopCopyDataInit>

080021b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021ba:	3104      	adds	r1, #4

080021bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021be:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021c4:	d3f6      	bcc.n	80021b4 <CopyDataInit>
  ldr  r2, =_sbss
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021c8:	e002      	b.n	80021d0 <LoopFillZerobss>

080021ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021cc:	f842 3b04 	str.w	r3, [r2], #4

080021d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021d4:	d3f9      	bcc.n	80021ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021d6:	f7ff fd61 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021da:	f004 fb6d 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021de:	f7ff fb25 	bl	800182c <main>
  bx  lr    
 80021e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80021e8:	080079fc 	.word	0x080079fc
  ldr  r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021f0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80021f4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80021f8:	2000434c 	.word	0x2000434c

080021fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC_IRQHandler>
	...

08002200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0d      	ldr	r2, [pc, #52]	; (8002240 <HAL_Init+0x40>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <HAL_Init+0x40>)
 8002216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x40>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 ff3a 	bl	80030a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff fbe6 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fbb8 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008
 8002268:	20004338 	.word	0x20004338

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20004338 	.word	0x20004338

08002284 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0ed      	b.n	8002472 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f860 	bl	8001368 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0202 	bic.w	r2, r2, #2
 80022b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b8:	f7ff ffd8 	bl	800226c <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022be:	e012      	b.n	80022e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022c0:	f7ff ffd4 	bl	800226c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d90b      	bls.n	80022e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2205      	movs	r2, #5
 80022de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0c5      	b.n	8002472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e5      	bne.n	80022c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002304:	f7ff ffb2 	bl	800226c <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800230a:	e012      	b.n	8002332 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800230c:	f7ff ffae 	bl	800226c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b0a      	cmp	r3, #10
 8002318:	d90b      	bls.n	8002332 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e09f      	b.n	8002472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0e5      	beq.n	800230c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7e1b      	ldrb	r3, [r3, #24]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e007      	b.n	800236a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7e5b      	ldrb	r3, [r3, #25]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d108      	bne.n	8002384 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e007      	b.n	8002394 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e9b      	ldrb	r3, [r3, #26]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0220 	orr.w	r2, r2, #32
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e007      	b.n	80023be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0220 	bic.w	r2, r2, #32
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7edb      	ldrb	r3, [r3, #27]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0210 	bic.w	r2, r2, #16
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e007      	b.n	80023e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0210 	orr.w	r2, r2, #16
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7f1b      	ldrb	r3, [r3, #28]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0208 	orr.w	r2, r2, #8
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0208 	bic.w	r2, r2, #8
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7f5b      	ldrb	r3, [r3, #29]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0204 	orr.w	r2, r2, #4
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e007      	b.n	800243c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	ea42 0103 	orr.w	r1, r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002492:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d003      	beq.n	80024a2 <HAL_CAN_ConfigFilter+0x26>
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b02      	cmp	r3, #2
 800249e:	f040 80be 	bne.w	800261e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_CAN_ConfigFilter+0x1bc>)
 80024a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	431a      	orrs	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2201      	movs	r2, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	401a      	ands	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d123      	bne.n	800254c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002526:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3248      	adds	r2, #72	; 0x48
 800252c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002540:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	3348      	adds	r3, #72	; 0x48
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d122      	bne.n	800259a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002574:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3248      	adds	r2, #72	; 0x48
 800257a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800258e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002590:	6979      	ldr	r1, [r7, #20]
 8002592:	3348      	adds	r3, #72	; 0x48
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80025b4:	e007      	b.n	80025c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	401a      	ands	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025e0:	e007      	b.n	80025f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	431a      	orrs	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002610:	f023 0201 	bic.w	r2, r3, #1
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e006      	b.n	800262c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40006400 	.word	0x40006400

0800263c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d12e      	bne.n	80026ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002668:	f7ff fe00 	bl	800226c <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800266e:	e012      	b.n	8002696 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002670:	f7ff fdfc 	bl	800226c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b0a      	cmp	r3, #10
 800267c:	d90b      	bls.n	8002696 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e012      	b.n	80026bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e5      	bne.n	8002670 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e006      	b.n	80026bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026e2:	7ffb      	ldrb	r3, [r7, #31]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d003      	beq.n	80026f0 <HAL_CAN_AddTxMessage+0x2c>
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	f040 80b8 	bne.w	8002860 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80a0 	beq.w	8002850 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	0e1b      	lsrs	r3, r3, #24
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d907      	bls.n	8002730 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e09e      	b.n	800286e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002730:	2201      	movs	r2, #1
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	409a      	lsls	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	6809      	ldr	r1, [r1, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3318      	adds	r3, #24
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	440b      	add	r3, r1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e00f      	b.n	800277e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002768:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002772:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3318      	adds	r3, #24
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	440b      	add	r3, r1
 800277c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3318      	adds	r3, #24
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	440b      	add	r3, r1
 800278e:	3304      	adds	r3, #4
 8002790:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	7d1b      	ldrb	r3, [r3, #20]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d111      	bne.n	80027be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3318      	adds	r3, #24
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6811      	ldr	r1, [r2, #0]
 80027ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3318      	adds	r3, #24
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	440b      	add	r3, r1
 80027ba:	3304      	adds	r3, #4
 80027bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3307      	adds	r3, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	061a      	lsls	r2, r3, #24
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3306      	adds	r3, #6
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3305      	adds	r3, #5
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	4313      	orrs	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	3204      	adds	r2, #4
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	4610      	mov	r0, r2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	6811      	ldr	r1, [r2, #0]
 80027e6:	ea43 0200 	orr.w	r2, r3, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3303      	adds	r3, #3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	061a      	lsls	r2, r3, #24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	4313      	orrs	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	4610      	mov	r0, r2
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6811      	ldr	r1, [r2, #0]
 800281c:	ea43 0200 	orr.w	r2, r3, r0
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	440b      	add	r3, r1
 8002826:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800282a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3318      	adds	r3, #24
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4413      	add	r3, r2
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	6811      	ldr	r1, [r2, #0]
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3318      	adds	r3, #24
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	440b      	add	r3, r1
 800284a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e00e      	b.n	800286e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e006      	b.n	800286e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d003      	beq.n	800289e <HAL_CAN_GetRxMessage+0x24>
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b02      	cmp	r3, #2
 800289a:	f040 80f3 	bne.w	8002a84 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0e7      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d8      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	331b      	adds	r3, #27
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0204 	and.w	r2, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	331b      	adds	r3, #27
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0d5b      	lsrs	r3, r3, #21
 800290e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e00b      	b.n	8002930 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	331b      	adds	r3, #27
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	4413      	add	r3, r2
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0202 	and.w	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	331b      	adds	r3, #27
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	331b      	adds	r3, #27
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	b2da      	uxtb	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	331b      	adds	r3, #27
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	b29a      	uxth	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0a1a      	lsrs	r2, r3, #8
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0c1a      	lsrs	r2, r3, #16
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3302      	adds	r3, #2
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e1a      	lsrs	r2, r3, #24
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3303      	adds	r3, #3
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0a1a      	lsrs	r2, r3, #8
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3305      	adds	r3, #5
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0c1a      	lsrs	r2, r3, #16
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3306      	adds	r3, #6
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0e1a      	lsrs	r2, r3, #24
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3307      	adds	r3, #7
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0220 	orr.w	r2, r2, #32
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e007      	b.n	8002a80 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e006      	b.n	8002a92 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
  }
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d002      	beq.n	8002abc <HAL_CAN_ActivateNotification+0x1e>
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d109      	bne.n	8002ad0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6959      	ldr	r1, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e006      	b.n	8002ade <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b08a      	sub	sp, #40	; 0x28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d07c      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d023      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f983 	bl	8002e58 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b52:	e016      	b.n	8002b82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	e00c      	b.n	8002b82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d004      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	e002      	b.n	8002b82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f989 	bl	8002e94 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d024      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f963 	bl	8002e6c <HAL_CAN_TxMailbox1CompleteCallback>
 8002ba6:	e016      	b.n	8002bd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	e00c      	b.n	8002bd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e002      	b.n	8002bd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f969 	bl	8002ea8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d024      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002be8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f943 	bl	8002e80 <HAL_CAN_TxMailbox2CompleteCallback>
 8002bfa:	e016      	b.n	8002c2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	e00c      	b.n	8002c2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	e002      	b.n	8002c2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f949 	bl	8002ebc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00c      	beq.n	8002c4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2208      	movs	r2, #8
 8002c68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f930 	bl	8002ed0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe fc09 	bl	80014a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2210      	movs	r2, #16
 8002cb0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2208      	movs	r2, #8
 8002ccc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f912 	bl	8002ef8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8f9 	bl	8002ee4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8fc 	bl	8002f0c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f8f5 	bl	8002f20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d07b      	beq.n	8002e38 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d072      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d043      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d03e      	beq.n	8002e30 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002db8:	2b60      	cmp	r3, #96	; 0x60
 8002dba:	d02b      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x32a>
 8002dbc:	2b60      	cmp	r3, #96	; 0x60
 8002dbe:	d82e      	bhi.n	8002e1e <HAL_CAN_IRQHandler+0x334>
 8002dc0:	2b50      	cmp	r3, #80	; 0x50
 8002dc2:	d022      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x320>
 8002dc4:	2b50      	cmp	r3, #80	; 0x50
 8002dc6:	d82a      	bhi.n	8002e1e <HAL_CAN_IRQHandler+0x334>
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d019      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x316>
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d826      	bhi.n	8002e1e <HAL_CAN_IRQHandler+0x334>
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d010      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x30c>
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d822      	bhi.n	8002e1e <HAL_CAN_IRQHandler+0x334>
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d002      	beq.n	8002de2 <HAL_CAN_IRQHandler+0x2f8>
 8002ddc:	2b20      	cmp	r3, #32
 8002dde:	d005      	beq.n	8002dec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002de0:	e01d      	b.n	8002e1e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f043 0308 	orr.w	r3, r3, #8
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dea:	e019      	b.n	8002e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	f043 0310 	orr.w	r3, r3, #16
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002df4:	e014      	b.n	8002e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f043 0320 	orr.w	r3, r3, #32
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dfe:	e00f      	b.n	8002e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e08:	e00a      	b.n	8002e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e12:	e005      	b.n	8002e20 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e1c:	e000      	b.n	8002e20 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e1e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e2e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2204      	movs	r2, #4
 8002e36:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f872 	bl	8002f34 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e50:	bf00      	nop
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4907      	ldr	r1, [pc, #28]	; (8002fe4 <__NVIC_EnableIRQ+0x38>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	db0a      	blt.n	8003012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	490c      	ldr	r1, [pc, #48]	; (8003034 <__NVIC_SetPriority+0x4c>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	0112      	lsls	r2, r2, #4
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	440b      	add	r3, r1
 800300c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003010:	e00a      	b.n	8003028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <__NVIC_SetPriority+0x50>)
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3b04      	subs	r3, #4
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	440b      	add	r3, r1
 8003026:	761a      	strb	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e100 	.word	0xe000e100
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f1c3 0307 	rsb	r3, r3, #7
 8003056:	2b04      	cmp	r3, #4
 8003058:	bf28      	it	cs
 800305a:	2304      	movcs	r3, #4
 800305c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	2b06      	cmp	r3, #6
 8003064:	d902      	bls.n	800306c <NVIC_EncodePriority+0x30>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3b03      	subs	r3, #3
 800306a:	e000      	b.n	800306e <NVIC_EncodePriority+0x32>
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43da      	mvns	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	401a      	ands	r2, r3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003084:	f04f 31ff 	mov.w	r1, #4294967295
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	43d9      	mvns	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	4313      	orrs	r3, r2
         );
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff4c 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ca:	f7ff ff61 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 80030ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f7ff ffb1 	bl	800303c <NVIC_EncodePriority>
 80030da:	4602      	mov	r2, r0
 80030dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ff80 	bl	8002fe8 <__NVIC_SetPriority>
}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ff54 	bl	8002fac <__NVIC_EnableIRQ>
}
 8003104:	bf00      	nop
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e177      	b.n	8003418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 8166 	bne.w	8003412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d00b      	beq.n	8003166 <HAL_GPIO_Init+0x5a>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800315a:	2b11      	cmp	r3, #17
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b12      	cmp	r3, #18
 8003164:	d130      	bne.n	80031c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 0201 	and.w	r2, r3, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0xfc>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b12      	cmp	r3, #18
 8003206:	d123      	bne.n	8003250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80c0 	beq.w	8003412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_GPIO_Init+0x324>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a65      	ldr	r2, [pc, #404]	; (8003430 <HAL_GPIO_Init+0x324>)
 800329c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_GPIO_Init+0x324>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ae:	4a61      	ldr	r2, [pc, #388]	; (8003434 <HAL_GPIO_Init+0x328>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_GPIO_Init+0x32c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d037      	beq.n	800334a <HAL_GPIO_Init+0x23e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_GPIO_Init+0x330>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_GPIO_Init+0x23a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_GPIO_Init+0x334>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <HAL_GPIO_Init+0x236>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a55      	ldr	r2, [pc, #340]	; (8003444 <HAL_GPIO_Init+0x338>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d025      	beq.n	800333e <HAL_GPIO_Init+0x232>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a54      	ldr	r2, [pc, #336]	; (8003448 <HAL_GPIO_Init+0x33c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01f      	beq.n	800333a <HAL_GPIO_Init+0x22e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a53      	ldr	r2, [pc, #332]	; (800344c <HAL_GPIO_Init+0x340>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d019      	beq.n	8003336 <HAL_GPIO_Init+0x22a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_GPIO_Init+0x344>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_GPIO_Init+0x226>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_GPIO_Init+0x348>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00d      	beq.n	800332e <HAL_GPIO_Init+0x222>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a50      	ldr	r2, [pc, #320]	; (8003458 <HAL_GPIO_Init+0x34c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x21e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4f      	ldr	r2, [pc, #316]	; (800345c <HAL_GPIO_Init+0x350>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_GPIO_Init+0x21a>
 8003322:	2309      	movs	r3, #9
 8003324:	e012      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003326:	230a      	movs	r3, #10
 8003328:	e010      	b.n	800334c <HAL_GPIO_Init+0x240>
 800332a:	2308      	movs	r3, #8
 800332c:	e00e      	b.n	800334c <HAL_GPIO_Init+0x240>
 800332e:	2307      	movs	r3, #7
 8003330:	e00c      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003332:	2306      	movs	r3, #6
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003336:	2305      	movs	r3, #5
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x240>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x240>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x240>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800335c:	4935      	ldr	r1, [pc, #212]	; (8003434 <HAL_GPIO_Init+0x328>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_GPIO_Init+0x354>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <HAL_GPIO_Init+0x354>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_GPIO_Init+0x354>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b8:	4a29      	ldr	r2, [pc, #164]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_GPIO_Init+0x354>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f ae84 	bls.w	8003128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3724      	adds	r7, #36	; 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020800 	.word	0x40020800
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40021400 	.word	0x40021400
 8003450:	40021800 	.word	0x40021800
 8003454:	40021c00 	.word	0x40021c00
 8003458:	40022000 	.word	0x40022000
 800345c:	40022400 	.word	0x40022400
 8003460:	40013c00 	.word	0x40013c00

08003464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
 8003470:	4613      	mov	r3, r2
 8003472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003474:	787b      	ldrb	r3, [r7, #1]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003480:	e003      	b.n	800348a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003482:	887b      	ldrh	r3, [r7, #2]
 8003484:	041a      	lsls	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	619a      	str	r2, [r3, #24]
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	887b      	ldrh	r3, [r7, #2]
 80034a8:	401a      	ands	r2, r3
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d104      	bne.n	80034ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	041a      	lsls	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80034b8:	e002      	b.n	80034c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe f960 	bl	80017b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e25b      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d075      	beq.n	8003606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351a:	4ba3      	ldr	r3, [pc, #652]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d00c      	beq.n	8003540 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4ba0      	ldr	r3, [pc, #640]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352e:	2b08      	cmp	r3, #8
 8003530:	d112      	bne.n	8003558 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003532:	4b9d      	ldr	r3, [pc, #628]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353e:	d10b      	bne.n	8003558 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4b99      	ldr	r3, [pc, #612]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05b      	beq.n	8003604 <HAL_RCC_OscConfig+0x108>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d157      	bne.n	8003604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e236      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d106      	bne.n	8003570 <HAL_RCC_OscConfig+0x74>
 8003562:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a90      	ldr	r2, [pc, #576]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01d      	b.n	80035ac <HAL_RCC_OscConfig+0xb0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x98>
 800357a:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a8a      	ldr	r2, [pc, #552]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xb0>
 8003594:	4b84      	ldr	r3, [pc, #528]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a83      	ldr	r2, [pc, #524]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b81      	ldr	r3, [pc, #516]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a80      	ldr	r2, [pc, #512]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe fe5a 	bl	800226c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fe fe56 	bl	800226c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1fb      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0xc0>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fe46 	bl	800226c <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fe fe42 	bl	800226c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1e7      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	4b6c      	ldr	r3, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0xe8>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d063      	beq.n	80036da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003612:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003626:	2b08      	cmp	r3, #8
 8003628:	d11c      	bne.n	8003664 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d116      	bne.n	8003664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_RCC_OscConfig+0x152>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e1bb      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364e:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4952      	ldr	r1, [pc, #328]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	e03a      	b.n	80036da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_OscConfig+0x2b0>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe fdfb 	bl	800226c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800367a:	f7fe fdf7 	bl	800226c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e19c      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4940      	ldr	r1, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
 80036ac:	e015      	b.n	80036da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_RCC_OscConfig+0x2b0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fdda 	bl	800226c <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036bc:	f7fe fdd6 	bl	800226c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e17b      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d030      	beq.n	8003748 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ee:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <HAL_RCC_OscConfig+0x2b4>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fe fdba 	bl	800226c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe fdb6 	bl	800226c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e15b      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x200>
 800371a:	e015      	b.n	8003748 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <HAL_RCC_OscConfig+0x2b4>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fe fda3 	bl	800226c <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe fd9f 	bl	800226c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e144      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a0 	beq.w	8003896 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_OscConfig+0x2b8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d121      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCC_OscConfig+0x2b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_RCC_OscConfig+0x2b8>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379e:	f7fe fd65 	bl	800226c <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	e011      	b.n	80037ca <HAL_RCC_OscConfig+0x2ce>
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	42470000 	.word	0x42470000
 80037b0:	42470e80 	.word	0x42470e80
 80037b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fe fd58 	bl	800226c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e0fd      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <HAL_RCC_OscConfig+0x4d4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d106      	bne.n	80037ec <HAL_RCC_OscConfig+0x2f0>
 80037de:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	e01c      	b.n	8003826 <HAL_RCC_OscConfig+0x32a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d10c      	bne.n	800380e <HAL_RCC_OscConfig+0x312>
 80037f4:	4b77      	ldr	r3, [pc, #476]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a73      	ldr	r2, [pc, #460]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	e00b      	b.n	8003826 <HAL_RCC_OscConfig+0x32a>
 800380e:	4b71      	ldr	r3, [pc, #452]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a70      	ldr	r2, [pc, #448]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b6e      	ldr	r3, [pc, #440]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a6d      	ldr	r2, [pc, #436]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fe fd1d 	bl	800226c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fd19 	bl	800226c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0bc      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	4b61      	ldr	r3, [pc, #388]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ee      	beq.n	8003836 <HAL_RCC_OscConfig+0x33a>
 8003858:	e014      	b.n	8003884 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fd07 	bl	800226c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fd03 	bl	800226c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0a6      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b56      	ldr	r3, [pc, #344]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ee      	bne.n	8003862 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b52      	ldr	r3, [pc, #328]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a51      	ldr	r2, [pc, #324]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8092 	beq.w	80039c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a0:	4b4c      	ldr	r3, [pc, #304]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d05c      	beq.n	8003966 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d141      	bne.n	8003938 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe fcd7 	bl	800226c <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fe fcd3 	bl	800226c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e078      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	019b      	lsls	r3, r3, #6
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	041b      	lsls	r3, r3, #16
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	061b      	lsls	r3, r3, #24
 8003904:	4933      	ldr	r1, [pc, #204]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390a:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fcac 	bl	800226c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003918:	f7fe fca8 	bl	800226c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04d      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x41c>
 8003936:	e045      	b.n	80039c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003938:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x4dc>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fe fc95 	bl	800226c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003946:	f7fe fc91 	bl	800226c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e036      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x44a>
 8003964:	e02e      	b.n	80039c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e029      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_RCC_OscConfig+0x4d8>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d115      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800399a:	4013      	ands	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d10d      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40007000 	.word	0x40007000
 80039d4:	40023800 	.word	0x40023800
 80039d8:	42470060 	.word	0x42470060

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fe fbce 	bl	800226c <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe fbca 	bl	800226c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd ff3c 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800793c 	.word	0x0800793c
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000004 	.word	0x20000004

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b5b0      	push	{r4, r5, r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bae:	2100      	movs	r1, #0
 8003bb0:	6079      	str	r1, [r7, #4]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	60f9      	str	r1, [r7, #12]
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bba:	2100      	movs	r1, #0
 8003bbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bbe:	4952      	ldr	r1, [pc, #328]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bc0:	6889      	ldr	r1, [r1, #8]
 8003bc2:	f001 010c 	and.w	r1, r1, #12
 8003bc6:	2908      	cmp	r1, #8
 8003bc8:	d00d      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003bca:	2908      	cmp	r1, #8
 8003bcc:	f200 8094 	bhi.w	8003cf8 <HAL_RCC_GetSysClockFreq+0x150>
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x32>
 8003bd4:	2904      	cmp	r1, #4
 8003bd6:	d003      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x38>
 8003bd8:	e08e      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bda:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x164>)
 8003bdc:	60bb      	str	r3, [r7, #8]
       break;
 8003bde:	e08e      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be0:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x168>)
 8003be2:	60bb      	str	r3, [r7, #8]
      break;
 8003be4:	e08b      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be6:	4948      	ldr	r1, [pc, #288]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be8:	6849      	ldr	r1, [r1, #4]
 8003bea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003bee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf0:	4945      	ldr	r1, [pc, #276]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bf2:	6849      	ldr	r1, [r1, #4]
 8003bf4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003bf8:	2900      	cmp	r1, #0
 8003bfa:	d024      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfc:	4942      	ldr	r1, [pc, #264]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bfe:	6849      	ldr	r1, [r1, #4]
 8003c00:	0989      	lsrs	r1, r1, #6
 8003c02:	4608      	mov	r0, r1
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003c0c:	f04f 0500 	mov.w	r5, #0
 8003c10:	ea00 0204 	and.w	r2, r0, r4
 8003c14:	ea01 0305 	and.w	r3, r1, r5
 8003c18:	493d      	ldr	r1, [pc, #244]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c1a:	fb01 f003 	mul.w	r0, r1, r3
 8003c1e:	2100      	movs	r1, #0
 8003c20:	fb01 f102 	mul.w	r1, r1, r2
 8003c24:	1844      	adds	r4, r0, r1
 8003c26:	493a      	ldr	r1, [pc, #232]	; (8003d10 <HAL_RCC_GetSysClockFreq+0x168>)
 8003c28:	fba2 0101 	umull	r0, r1, r2, r1
 8003c2c:	1863      	adds	r3, r4, r1
 8003c2e:	4619      	mov	r1, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f7fc ff28 	bl	8000a8c <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e04a      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b30      	ldr	r3, [pc, #192]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	ea02 0400 	and.w	r4, r2, r0
 8003c5e:	ea03 0501 	and.w	r5, r3, r1
 8003c62:	4620      	mov	r0, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	014b      	lsls	r3, r1, #5
 8003c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c74:	0142      	lsls	r2, r0, #5
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	1b00      	subs	r0, r0, r4
 8003c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	018b      	lsls	r3, r1, #6
 8003c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c8e:	0182      	lsls	r2, r0, #6
 8003c90:	1a12      	subs	r2, r2, r0
 8003c92:	eb63 0301 	sbc.w	r3, r3, r1
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	00d9      	lsls	r1, r3, #3
 8003ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca4:	00d0      	lsls	r0, r2, #3
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	1912      	adds	r2, r2, r4
 8003cac:	eb45 0303 	adc.w	r3, r5, r3
 8003cb0:	f04f 0000 	mov.w	r0, #0
 8003cb4:	f04f 0100 	mov.w	r1, #0
 8003cb8:	0299      	lsls	r1, r3, #10
 8003cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cbe:	0290      	lsls	r0, r2, #10
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f7fc fedc 	bl	8000a8c <__aeabi_uldivmod>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
      break;
 8003cf6:	e002      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_RCC_GetSysClockFreq+0x164>)
 8003cfa:	60bb      	str	r3, [r7, #8]
      break;
 8003cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bdb0      	pop	{r4, r5, r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	00b71b00 	.word	0x00b71b00

08003d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d18:	4b03      	ldr	r3, [pc, #12]	; (8003d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d30:	f7ff fff0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0a9b      	lsrs	r3, r3, #10
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	0800794c 	.word	0x0800794c

08003d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d58:	f7ff ffdc 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	0b5b      	lsrs	r3, r3, #13
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	4903      	ldr	r1, [pc, #12]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6a:	5ccb      	ldrb	r3, [r1, r3]
 8003d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	0800794c 	.word	0x0800794c

08003d7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	220f      	movs	r2, #15
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0203 	and.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <HAL_RCC_GetClockConfig+0x60>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	601a      	str	r2, [r3, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40023c00 	.word	0x40023c00

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e01d      	b.n	8003e2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe f88a 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 fa8c 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b06      	cmp	r3, #6
 8003e5e:	d007      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e01d      	b.n	8003ecc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fe f803 	bl	8001eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f000 fa3d 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	6839      	ldr	r1, [r7, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fc78 	bl	80047dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <HAL_TIM_PWM_Start+0x74>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIM_PWM_Start+0x2c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <HAL_TIM_PWM_Start+0x78>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_PWM_Start+0x30>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_TIM_PWM_Start+0x32>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b06      	cmp	r3, #6
 8003f2a:	d007      	beq.n	8003f3c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40010400 	.word	0x40010400

08003f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d122      	bne.n	8003fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d11b      	bne.n	8003fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0202 	mvn.w	r2, #2
 8003f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f9b4 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8003f98:	e005      	b.n	8003fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f9a6 	bl	80042ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f9b7 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d122      	bne.n	8004000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d11b      	bne.n	8004000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0204 	mvn.w	r2, #4
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f98a 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f97c 	bl	80042ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f98d 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b08      	cmp	r3, #8
 800400c:	d122      	bne.n	8004054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d11b      	bne.n	8004054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0208 	mvn.w	r2, #8
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2204      	movs	r2, #4
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f960 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f952 	bl	80042ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f963 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b10      	cmp	r3, #16
 8004060:	d122      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b10      	cmp	r3, #16
 800406e:	d11b      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0210 	mvn.w	r2, #16
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f936 	bl	8004300 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f928 	bl	80042ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f939 	bl	8004314 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0201 	mvn.w	r2, #1
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd fc3e 	bl	8001950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b80      	cmp	r3, #128	; 0x80
 80040e0:	d10e      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d107      	bne.n	8004100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fc1a 	bl	8004934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d10e      	bne.n	800412c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d107      	bne.n	800412c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8fe 	bl	8004328 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b20      	cmp	r3, #32
 8004138:	d10e      	bne.n	8004158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b20      	cmp	r3, #32
 8004146:	d107      	bne.n	8004158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0220 	mvn.w	r2, #32
 8004150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fbe4 	bl	8004920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004176:	2302      	movs	r3, #2
 8004178:	e0b4      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b0c      	cmp	r3, #12
 800418e:	f200 809f 	bhi.w	80042d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041cd 	.word	0x080041cd
 800419c:	080042d1 	.word	0x080042d1
 80041a0:	080042d1 	.word	0x080042d1
 80041a4:	080042d1 	.word	0x080042d1
 80041a8:	0800420d 	.word	0x0800420d
 80041ac:	080042d1 	.word	0x080042d1
 80041b0:	080042d1 	.word	0x080042d1
 80041b4:	080042d1 	.word	0x080042d1
 80041b8:	0800424f 	.word	0x0800424f
 80041bc:	080042d1 	.word	0x080042d1
 80041c0:	080042d1 	.word	0x080042d1
 80041c4:	080042d1 	.word	0x080042d1
 80041c8:	0800428f 	.word	0x0800428f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f952 	bl	800447c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0208 	orr.w	r2, r2, #8
 80041e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0204 	bic.w	r2, r2, #4
 80041f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6999      	ldr	r1, [r3, #24]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	619a      	str	r2, [r3, #24]
      break;
 800420a:	e062      	b.n	80042d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f9a2 	bl	800455c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6999      	ldr	r1, [r3, #24]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	619a      	str	r2, [r3, #24]
      break;
 800424c:	e041      	b.n	80042d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f9f7 	bl	8004648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0208 	orr.w	r2, r2, #8
 8004268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0204 	bic.w	r2, r2, #4
 8004278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69d9      	ldr	r1, [r3, #28]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	61da      	str	r2, [r3, #28]
      break;
 800428c:	e021      	b.n	80042d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fa4b 	bl	8004730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69d9      	ldr	r1, [r3, #28]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	021a      	lsls	r2, r3, #8
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	61da      	str	r2, [r3, #28]
      break;
 80042ce:	e000      	b.n	80042d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a40      	ldr	r2, [pc, #256]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <TIM_Base_SetConfig+0x118>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <TIM_Base_SetConfig+0x11c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3b      	ldr	r2, [pc, #236]	; (800445c <TIM_Base_SetConfig+0x120>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <TIM_Base_SetConfig+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d027      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <TIM_Base_SetConfig+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d023      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <TIM_Base_SetConfig+0x11c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	; (800445c <TIM_Base_SetConfig+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a29      	ldr	r2, [pc, #164]	; (8004460 <TIM_Base_SetConfig+0x124>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d017      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a28      	ldr	r2, [pc, #160]	; (8004464 <TIM_Base_SetConfig+0x128>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a27      	ldr	r2, [pc, #156]	; (8004468 <TIM_Base_SetConfig+0x12c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a26      	ldr	r2, [pc, #152]	; (800446c <TIM_Base_SetConfig+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <TIM_Base_SetConfig+0x134>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a24      	ldr	r2, [pc, #144]	; (8004474 <TIM_Base_SetConfig+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <TIM_Base_SetConfig+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0xf8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <TIM_Base_SetConfig+0x124>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	40001800 	.word	0x40001800
 8004474:	40001c00 	.word	0x40001c00
 8004478:	40002000 	.word	0x40002000

0800447c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	f023 0201 	bic.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 0302 	bic.w	r3, r3, #2
 80044c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a20      	ldr	r2, [pc, #128]	; (8004554 <TIM_OC1_SetConfig+0xd8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d003      	beq.n	80044e0 <TIM_OC1_SetConfig+0x64>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <TIM_OC1_SetConfig+0xdc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10c      	bne.n	80044fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f023 0308 	bic.w	r3, r3, #8
 80044e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <TIM_OC1_SetConfig+0xd8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_OC1_SetConfig+0x8e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <TIM_OC1_SetConfig+0xdc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d111      	bne.n	800452e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	621a      	str	r2, [r3, #32]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400

0800455c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0210 	bic.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a22      	ldr	r2, [pc, #136]	; (8004640 <TIM_OC2_SetConfig+0xe4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_OC2_SetConfig+0x68>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a21      	ldr	r2, [pc, #132]	; (8004644 <TIM_OC2_SetConfig+0xe8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10d      	bne.n	80045e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a17      	ldr	r2, [pc, #92]	; (8004640 <TIM_OC2_SetConfig+0xe4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC2_SetConfig+0x94>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <TIM_OC2_SetConfig+0xe8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d113      	bne.n	8004618 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40010000 	.word	0x40010000
 8004644:	40010400 	.word	0x40010400

08004648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a21      	ldr	r2, [pc, #132]	; (8004728 <TIM_OC3_SetConfig+0xe0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d003      	beq.n	80046ae <TIM_OC3_SetConfig+0x66>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a20      	ldr	r2, [pc, #128]	; (800472c <TIM_OC3_SetConfig+0xe4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10d      	bne.n	80046ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a16      	ldr	r2, [pc, #88]	; (8004728 <TIM_OC3_SetConfig+0xe0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC3_SetConfig+0x92>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a15      	ldr	r2, [pc, #84]	; (800472c <TIM_OC3_SetConfig+0xe4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d113      	bne.n	8004702 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40010000 	.word	0x40010000
 800472c:	40010400 	.word	0x40010400

08004730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800477a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	031b      	lsls	r3, r3, #12
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <TIM_OC4_SetConfig+0xa4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC4_SetConfig+0x68>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a11      	ldr	r2, [pc, #68]	; (80047d8 <TIM_OC4_SetConfig+0xa8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800479e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	019b      	lsls	r3, r3, #6
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	621a      	str	r2, [r3, #32]
}
 80047c6:	bf00      	nop
 80047c8:	371c      	adds	r7, #28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400

080047dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2201      	movs	r2, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800483c:	2302      	movs	r3, #2
 800483e:	e05a      	b.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d01d      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10c      	bne.n	80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010400 	.word	0x40010400
 8004918:	40014000 	.word	0x40014000
 800491c:	40001800 	.word	0x40001800

08004920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e03f      	b.n	80049da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fd fbd4 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2224      	movs	r2, #36	; 0x24
 8004978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800498a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f9b1 	bl	8004cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b088      	sub	sp, #32
 80049e6:	af02      	add	r7, sp, #8
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	f040 8083 	bne.w	8004b0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_UART_Transmit+0x2e>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e07b      	b.n	8004b0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_UART_Transmit+0x40>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e074      	b.n	8004b0c <HAL_UART_Transmit+0x12a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2221      	movs	r2, #33	; 0x21
 8004a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a38:	f7fd fc18 	bl	800226c <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	88fa      	ldrh	r2, [r7, #6]
 8004a42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a52:	e042      	b.n	8004ada <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6a:	d122      	bne.n	8004ab2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f8f2 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e042      	b.n	8004b0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a98:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	e017      	b.n	8004ada <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	e013      	b.n	8004ada <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f8cf 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e01f      	b.n	8004b0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	60ba      	str	r2, [r7, #8]
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1b7      	bne.n	8004a54 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2140      	movs	r1, #64	; 0x40
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8b6 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e006      	b.n	8004b0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	f040 8090 	bne.w	8004c56 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_UART_Receive+0x2e>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e088      	b.n	8004c58 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Receive+0x40>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e081      	b.n	8004c58 <HAL_UART_Receive+0x144>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2222      	movs	r2, #34	; 0x22
 8004b66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b6a:	f7fd fb7f 	bl	800226c <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	88fa      	ldrh	r2, [r7, #6]
 8004b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b84:	e05c      	b.n	8004c40 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d12b      	bne.n	8004bf6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f859 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e04f      	b.n	8004c58 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3302      	adds	r3, #2
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	e030      	b.n	8004c40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	e024      	b.n	8004c40 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2120      	movs	r1, #32
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f000 f82d 	bl	8004c60 <UART_WaitOnFlagUntilTimeout>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e023      	b.n	8004c58 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6859      	ldr	r1, [r3, #4]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	60ba      	str	r2, [r7, #8]
 8004c24:	b2ca      	uxtb	r2, r1
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	e00a      	b.n	8004c40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d19d      	bne.n	8004b86 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e000      	b.n	8004c58 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c70:	e02c      	b.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d028      	beq.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c80:	f7fd faf4 	bl	800226c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d21d      	bcs.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e00f      	b.n	8004cec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d0c3      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	b0bd      	sub	sp, #244	; 0xf4
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	68d9      	ldr	r1, [r3, #12]
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	ea40 0301 	orr.w	r3, r0, r1
 8004d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d4c:	f021 010c 	bic.w	r1, r1, #12
 8004d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	6999      	ldr	r1, [r3, #24]
 8004d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	ea40 0301 	orr.w	r3, r0, r1
 8004d7a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d86:	f040 81a5 	bne.w	80050d4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4bcd      	ldr	r3, [pc, #820]	; (80050c8 <UART_SetConfig+0x3d4>)
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d006      	beq.n	8004da4 <UART_SetConfig+0xb0>
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4bcb      	ldr	r3, [pc, #812]	; (80050cc <UART_SetConfig+0x3d8>)
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	f040 80cb 	bne.w	8004f3a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004da4:	f7fe ffd6 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 8004da8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004db0:	461c      	mov	r4, r3
 8004db2:	f04f 0500 	mov.w	r5, #0
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	1891      	adds	r1, r2, r2
 8004dbc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004dc6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004dca:	1912      	adds	r2, r2, r4
 8004dcc:	eb45 0303 	adc.w	r3, r5, r3
 8004dd0:	f04f 0000 	mov.w	r0, #0
 8004dd4:	f04f 0100 	mov.w	r1, #0
 8004dd8:	00d9      	lsls	r1, r3, #3
 8004dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dde:	00d0      	lsls	r0, r2, #3
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	1911      	adds	r1, r2, r4
 8004de6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004dea:	416b      	adcs	r3, r5
 8004dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004e02:	415b      	adcs	r3, r3
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e08:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004e0c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004e10:	f7fb fe3c 	bl	8000a8c <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4bad      	ldr	r3, [pc, #692]	; (80050d0 <UART_SetConfig+0x3dc>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011e      	lsls	r6, r3, #4
 8004e22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e26:	461c      	mov	r4, r3
 8004e28:	f04f 0500 	mov.w	r5, #0
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	67b9      	str	r1, [r7, #120]	; 0x78
 8004e34:	415b      	adcs	r3, r3
 8004e36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004e3c:	1912      	adds	r2, r2, r4
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	00d9      	lsls	r1, r3, #3
 8004e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e50:	00d0      	lsls	r0, r2, #3
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	1911      	adds	r1, r2, r4
 8004e58:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004e5c:	416b      	adcs	r3, r5
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	6739      	str	r1, [r7, #112]	; 0x70
 8004e72:	415b      	adcs	r3, r3
 8004e74:	677b      	str	r3, [r7, #116]	; 0x74
 8004e76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e7a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004e7e:	f7fb fe05 	bl	8000a8c <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4b92      	ldr	r3, [pc, #584]	; (80050d0 <UART_SetConfig+0x3dc>)
 8004e88:	fba3 1302 	umull	r1, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	2164      	movs	r1, #100	; 0x64
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	3332      	adds	r3, #50	; 0x32
 8004e9a:	4a8d      	ldr	r2, [pc, #564]	; (80050d0 <UART_SetConfig+0x3dc>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ea8:	441e      	add	r6, r3
 8004eaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	1894      	adds	r4, r2, r2
 8004eba:	66bc      	str	r4, [r7, #104]	; 0x68
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ec0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ec4:	1812      	adds	r2, r2, r0
 8004ec6:	eb41 0303 	adc.w	r3, r1, r3
 8004eca:	f04f 0400 	mov.w	r4, #0
 8004ece:	f04f 0500 	mov.w	r5, #0
 8004ed2:	00dd      	lsls	r5, r3, #3
 8004ed4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ed8:	00d4      	lsls	r4, r2, #3
 8004eda:	4622      	mov	r2, r4
 8004edc:	462b      	mov	r3, r5
 8004ede:	1814      	adds	r4, r2, r0
 8004ee0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	1891      	adds	r1, r2, r2
 8004ef8:	6639      	str	r1, [r7, #96]	; 0x60
 8004efa:	415b      	adcs	r3, r3
 8004efc:	667b      	str	r3, [r7, #100]	; 0x64
 8004efe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f06:	f7fb fdc1 	bl	8000a8c <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <UART_SetConfig+0x3dc>)
 8004f10:	fba3 1302 	umull	r1, r3, r3, r2
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	2164      	movs	r1, #100	; 0x64
 8004f18:	fb01 f303 	mul.w	r3, r1, r3
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	3332      	adds	r3, #50	; 0x32
 8004f22:	4a6b      	ldr	r2, [pc, #428]	; (80050d0 <UART_SetConfig+0x3dc>)
 8004f24:	fba2 2303 	umull	r2, r3, r2, r3
 8004f28:	095b      	lsrs	r3, r3, #5
 8004f2a:	f003 0207 	and.w	r2, r3, #7
 8004f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4432      	add	r2, r6
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	e26d      	b.n	8005416 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f3a:	f7fe fef7 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8004f3e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f46:	461c      	mov	r4, r3
 8004f48:	f04f 0500 	mov.w	r5, #0
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	462b      	mov	r3, r5
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f54:	415b      	adcs	r3, r3
 8004f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f5c:	1912      	adds	r2, r2, r4
 8004f5e:	eb45 0303 	adc.w	r3, r5, r3
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	00d9      	lsls	r1, r3, #3
 8004f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f70:	00d0      	lsls	r0, r2, #3
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	1911      	adds	r1, r2, r4
 8004f78:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004f7c:	416b      	adcs	r3, r5
 8004f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	1891      	adds	r1, r2, r2
 8004f90:	6539      	str	r1, [r7, #80]	; 0x50
 8004f92:	415b      	adcs	r3, r3
 8004f94:	657b      	str	r3, [r7, #84]	; 0x54
 8004f96:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f9a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004f9e:	f7fb fd75 	bl	8000a8c <__aeabi_uldivmod>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <UART_SetConfig+0x3dc>)
 8004fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	011e      	lsls	r6, r3, #4
 8004fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fb4:	461c      	mov	r4, r3
 8004fb6:	f04f 0500 	mov.w	r5, #0
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	1891      	adds	r1, r2, r2
 8004fc0:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fca:	1912      	adds	r2, r2, r4
 8004fcc:	eb45 0303 	adc.w	r3, r5, r3
 8004fd0:	f04f 0000 	mov.w	r0, #0
 8004fd4:	f04f 0100 	mov.w	r1, #0
 8004fd8:	00d9      	lsls	r1, r3, #3
 8004fda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fde:	00d0      	lsls	r0, r2, #3
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	1911      	adds	r1, r2, r4
 8004fe6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004fea:	416b      	adcs	r3, r5
 8004fec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	1891      	adds	r1, r2, r2
 8004ffe:	6439      	str	r1, [r7, #64]	; 0x40
 8005000:	415b      	adcs	r3, r3
 8005002:	647b      	str	r3, [r7, #68]	; 0x44
 8005004:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005008:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800500c:	f7fb fd3e 	bl	8000a8c <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <UART_SetConfig+0x3dc>)
 8005016:	fba3 1302 	umull	r1, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2164      	movs	r1, #100	; 0x64
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	3332      	adds	r3, #50	; 0x32
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <UART_SetConfig+0x3dc>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005036:	441e      	add	r6, r3
 8005038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800503c:	4618      	mov	r0, r3
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	1894      	adds	r4, r2, r2
 8005048:	63bc      	str	r4, [r7, #56]	; 0x38
 800504a:	415b      	adcs	r3, r3
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005052:	1812      	adds	r2, r2, r0
 8005054:	eb41 0303 	adc.w	r3, r1, r3
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	f04f 0500 	mov.w	r5, #0
 8005060:	00dd      	lsls	r5, r3, #3
 8005062:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005066:	00d4      	lsls	r4, r2, #3
 8005068:	4622      	mov	r2, r4
 800506a:	462b      	mov	r3, r5
 800506c:	1814      	adds	r4, r2, r0
 800506e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005072:	414b      	adcs	r3, r1
 8005074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	461a      	mov	r2, r3
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	1891      	adds	r1, r2, r2
 8005086:	6339      	str	r1, [r7, #48]	; 0x30
 8005088:	415b      	adcs	r3, r3
 800508a:	637b      	str	r3, [r7, #52]	; 0x34
 800508c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005090:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005094:	f7fb fcfa 	bl	8000a8c <__aeabi_uldivmod>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <UART_SetConfig+0x3dc>)
 800509e:	fba3 1302 	umull	r1, r3, r3, r2
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	2164      	movs	r1, #100	; 0x64
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	3332      	adds	r3, #50	; 0x32
 80050b0:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <UART_SetConfig+0x3dc>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	f003 0207 	and.w	r2, r3, #7
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4432      	add	r2, r6
 80050c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050c6:	e1a6      	b.n	8005416 <UART_SetConfig+0x722>
 80050c8:	40011000 	.word	0x40011000
 80050cc:	40011400 	.word	0x40011400
 80050d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4bd1      	ldr	r3, [pc, #836]	; (8005420 <UART_SetConfig+0x72c>)
 80050dc:	429a      	cmp	r2, r3
 80050de:	d006      	beq.n	80050ee <UART_SetConfig+0x3fa>
 80050e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4bcf      	ldr	r3, [pc, #828]	; (8005424 <UART_SetConfig+0x730>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	f040 80ca 	bne.w	8005282 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ee:	f7fe fe31 	bl	8003d54 <HAL_RCC_GetPCLK2Freq>
 80050f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050fa:	461c      	mov	r4, r3
 80050fc:	f04f 0500 	mov.w	r5, #0
 8005100:	4622      	mov	r2, r4
 8005102:	462b      	mov	r3, r5
 8005104:	1891      	adds	r1, r2, r2
 8005106:	62b9      	str	r1, [r7, #40]	; 0x28
 8005108:	415b      	adcs	r3, r3
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005110:	1912      	adds	r2, r2, r4
 8005112:	eb45 0303 	adc.w	r3, r5, r3
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	00d9      	lsls	r1, r3, #3
 8005120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005124:	00d0      	lsls	r0, r2, #3
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	eb12 0a04 	adds.w	sl, r2, r4
 800512e:	eb43 0b05 	adc.w	fp, r3, r5
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800514c:	0082      	lsls	r2, r0, #2
 800514e:	4650      	mov	r0, sl
 8005150:	4659      	mov	r1, fp
 8005152:	f7fb fc9b 	bl	8000a8c <__aeabi_uldivmod>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4bb3      	ldr	r3, [pc, #716]	; (8005428 <UART_SetConfig+0x734>)
 800515c:	fba3 2302 	umull	r2, r3, r3, r2
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	011e      	lsls	r6, r3, #4
 8005164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005168:	4618      	mov	r0, r3
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	1894      	adds	r4, r2, r2
 8005174:	623c      	str	r4, [r7, #32]
 8005176:	415b      	adcs	r3, r3
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
 800517a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800517e:	1812      	adds	r2, r2, r0
 8005180:	eb41 0303 	adc.w	r3, r1, r3
 8005184:	f04f 0400 	mov.w	r4, #0
 8005188:	f04f 0500 	mov.w	r5, #0
 800518c:	00dd      	lsls	r5, r3, #3
 800518e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005192:	00d4      	lsls	r4, r2, #3
 8005194:	4622      	mov	r2, r4
 8005196:	462b      	mov	r3, r5
 8005198:	1814      	adds	r4, r2, r0
 800519a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800519e:	414b      	adcs	r3, r1
 80051a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	008b      	lsls	r3, r1, #2
 80051ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051be:	0082      	lsls	r2, r0, #2
 80051c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80051c4:	f7fb fc62 	bl	8000a8c <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4b96      	ldr	r3, [pc, #600]	; (8005428 <UART_SetConfig+0x734>)
 80051ce:	fba3 1302 	umull	r1, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2164      	movs	r1, #100	; 0x64
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	3332      	adds	r3, #50	; 0x32
 80051e0:	4a91      	ldr	r2, [pc, #580]	; (8005428 <UART_SetConfig+0x734>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ec:	441e      	add	r6, r3
 80051ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f2:	4618      	mov	r0, r3
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	1894      	adds	r4, r2, r2
 80051fe:	61bc      	str	r4, [r7, #24]
 8005200:	415b      	adcs	r3, r3
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005208:	1812      	adds	r2, r2, r0
 800520a:	eb41 0303 	adc.w	r3, r1, r3
 800520e:	f04f 0400 	mov.w	r4, #0
 8005212:	f04f 0500 	mov.w	r5, #0
 8005216:	00dd      	lsls	r5, r3, #3
 8005218:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800521c:	00d4      	lsls	r4, r2, #3
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	1814      	adds	r4, r2, r0
 8005224:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005228:	414b      	adcs	r3, r1
 800522a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4618      	mov	r0, r3
 8005236:	f04f 0100 	mov.w	r1, #0
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005248:	0082      	lsls	r2, r0, #2
 800524a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800524e:	f7fb fc1d 	bl	8000a8c <__aeabi_uldivmod>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4b74      	ldr	r3, [pc, #464]	; (8005428 <UART_SetConfig+0x734>)
 8005258:	fba3 1302 	umull	r1, r3, r3, r2
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	2164      	movs	r1, #100	; 0x64
 8005260:	fb01 f303 	mul.w	r3, r1, r3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	3332      	adds	r3, #50	; 0x32
 800526a:	4a6f      	ldr	r2, [pc, #444]	; (8005428 <UART_SetConfig+0x734>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f003 020f 	and.w	r2, r3, #15
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4432      	add	r2, r6
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	e0c9      	b.n	8005416 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005282:	f7fe fd53 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8005286:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800528a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800528e:	461c      	mov	r4, r3
 8005290:	f04f 0500 	mov.w	r5, #0
 8005294:	4622      	mov	r2, r4
 8005296:	462b      	mov	r3, r5
 8005298:	1891      	adds	r1, r2, r2
 800529a:	6139      	str	r1, [r7, #16]
 800529c:	415b      	adcs	r3, r3
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052a4:	1912      	adds	r2, r2, r4
 80052a6:	eb45 0303 	adc.w	r3, r5, r3
 80052aa:	f04f 0000 	mov.w	r0, #0
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	00d9      	lsls	r1, r3, #3
 80052b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052b8:	00d0      	lsls	r0, r2, #3
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	eb12 0804 	adds.w	r8, r2, r4
 80052c2:	eb43 0905 	adc.w	r9, r3, r5
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	008b      	lsls	r3, r1, #2
 80052dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e0:	0082      	lsls	r2, r0, #2
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fb fbd1 	bl	8000a8c <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4b4e      	ldr	r3, [pc, #312]	; (8005428 <UART_SetConfig+0x734>)
 80052f0:	fba3 2302 	umull	r2, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	011e      	lsls	r6, r3, #4
 80052f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052fc:	4618      	mov	r0, r3
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	1894      	adds	r4, r2, r2
 8005308:	60bc      	str	r4, [r7, #8]
 800530a:	415b      	adcs	r3, r3
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005312:	1812      	adds	r2, r2, r0
 8005314:	eb41 0303 	adc.w	r3, r1, r3
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	f04f 0500 	mov.w	r5, #0
 8005320:	00dd      	lsls	r5, r3, #3
 8005322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005326:	00d4      	lsls	r4, r2, #3
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	1814      	adds	r4, r2, r0
 800532e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005332:	414b      	adcs	r3, r1
 8005334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	008b      	lsls	r3, r1, #2
 800534e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005352:	0082      	lsls	r2, r0, #2
 8005354:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005358:	f7fb fb98 	bl	8000a8c <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <UART_SetConfig+0x734>)
 8005362:	fba3 1302 	umull	r1, r3, r3, r2
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	2164      	movs	r1, #100	; 0x64
 800536a:	fb01 f303 	mul.w	r3, r1, r3
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	3332      	adds	r3, #50	; 0x32
 8005374:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <UART_SetConfig+0x734>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005380:	441e      	add	r6, r3
 8005382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005386:	4618      	mov	r0, r3
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	1894      	adds	r4, r2, r2
 8005392:	603c      	str	r4, [r7, #0]
 8005394:	415b      	adcs	r3, r3
 8005396:	607b      	str	r3, [r7, #4]
 8005398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800539c:	1812      	adds	r2, r2, r0
 800539e:	eb41 0303 	adc.w	r3, r1, r3
 80053a2:	f04f 0400 	mov.w	r4, #0
 80053a6:	f04f 0500 	mov.w	r5, #0
 80053aa:	00dd      	lsls	r5, r3, #3
 80053ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053b0:	00d4      	lsls	r4, r2, #3
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	1814      	adds	r4, r2, r0
 80053b8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80053bc:	414b      	adcs	r3, r1
 80053be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f04f 0100 	mov.w	r1, #0
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053dc:	0082      	lsls	r2, r0, #2
 80053de:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80053e2:	f7fb fb53 	bl	8000a8c <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <UART_SetConfig+0x734>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <UART_SetConfig+0x734>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4432      	add	r2, r6
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	e7ff      	b.n	8005416 <UART_SetConfig+0x722>
 8005416:	bf00      	nop
 8005418:	37f4      	adds	r7, #244	; 0xf4
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005420:	40011000 	.word	0x40011000
 8005424:	40011400 	.word	0x40011400
 8005428:	51eb851f 	.word	0x51eb851f

0800542c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800543a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800543e:	2b84      	cmp	r3, #132	; 0x84
 8005440:	d005      	beq.n	800544e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005442:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	3303      	adds	r3, #3
 800544c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800544e:	68fb      	ldr	r3, [r7, #12]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005460:	f000 fade 	bl	8005a20 <vTaskStartScheduler>
  
  return osOK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	bd80      	pop	{r7, pc}

0800546a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800546a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546c:	b089      	sub	sp, #36	; 0x24
 800546e:	af04      	add	r7, sp, #16
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <osThreadCreate+0x54>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01c      	beq.n	80054be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685c      	ldr	r4, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681d      	ldr	r5, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691e      	ldr	r6, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff ffc8 	bl	800542c <makeFreeRtosPriority>
 800549c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054a6:	9202      	str	r2, [sp, #8]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	9100      	str	r1, [sp, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4632      	mov	r2, r6
 80054b0:	4629      	mov	r1, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f8ed 	bl	8005692 <xTaskCreateStatic>
 80054b8:	4603      	mov	r3, r0
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e01c      	b.n	80054f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685c      	ldr	r4, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ca:	b29e      	uxth	r6, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ffaa 	bl	800542c <makeFreeRtosPriority>
 80054d8:	4602      	mov	r2, r0
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	9200      	str	r2, [sp, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	4632      	mov	r2, r6
 80054e6:	4629      	mov	r1, r5
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 f92f 	bl	800574c <xTaskCreate>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005502 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <osDelay+0x16>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	e000      	b.n	800551a <osDelay+0x18>
 8005518:	2301      	movs	r3, #1
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fa4c 	bl	80059b8 <vTaskDelay>
  
  return osOK;
 8005520:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f103 0208 	add.w	r2, r3, #8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f103 0208 	add.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f103 0208 	add.w	r2, r3, #8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d103      	bne.n	80055ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e00c      	b.n	8005606 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3308      	adds	r3, #8
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e002      	b.n	80055fa <vListInsert+0x2e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	429a      	cmp	r2, r3
 8005604:	d2f6      	bcs.n	80055f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6892      	ldr	r2, [r2, #8]
 8005654:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6852      	ldr	r2, [r2, #4]
 800565e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d103      	bne.n	8005672 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08e      	sub	sp, #56	; 0x38
 8005696:	af04      	add	r7, sp, #16
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	61fb      	str	r3, [r7, #28]
}
 80056d4:	bf00      	nop
 80056d6:	e7fe      	b.n	80056d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056d8:	2354      	movs	r3, #84	; 0x54
 80056da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b54      	cmp	r3, #84	; 0x54
 80056e0:	d00a      	beq.n	80056f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	61bb      	str	r3, [r7, #24]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01e      	beq.n	800573e <xTaskCreateStatic+0xac>
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01b      	beq.n	800573e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800570e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	2202      	movs	r2, #2
 8005714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005718:	2300      	movs	r3, #0
 800571a:	9303      	str	r3, [sp, #12]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	9302      	str	r3, [sp, #8]
 8005720:	f107 0314 	add.w	r3, r7, #20
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f850 	bl	80057d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005738:	f000 f8d4 	bl	80058e4 <prvAddNewTaskToReadyList>
 800573c:	e001      	b.n	8005742 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005742:	697b      	ldr	r3, [r7, #20]
	}
 8005744:	4618      	mov	r0, r3
 8005746:	3728      	adds	r7, #40	; 0x28
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af04      	add	r7, sp, #16
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	4613      	mov	r3, r2
 800575a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fec9 	bl	80064f8 <pvPortMalloc>
 8005766:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00e      	beq.n	800578c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800576e:	2054      	movs	r0, #84	; 0x54
 8005770:	f000 fec2 	bl	80064f8 <pvPortMalloc>
 8005774:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
 8005782:	e005      	b.n	8005790 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005784:	6978      	ldr	r0, [r7, #20]
 8005786:	f000 ff7b 	bl	8006680 <vPortFree>
 800578a:	e001      	b.n	8005790 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d017      	beq.n	80057c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	2300      	movs	r3, #0
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	9302      	str	r3, [sp, #8]
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f80e 	bl	80057d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ba:	69f8      	ldr	r0, [r7, #28]
 80057bc:	f000 f892 	bl	80058e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057c0:	2301      	movs	r3, #1
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e002      	b.n	80057cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057cc:	69bb      	ldr	r3, [r7, #24]
	}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b088      	sub	sp, #32
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057ee:	3b01      	subs	r3, #1
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f023 0307 	bic.w	r3, r3, #7
 80057fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <prvInitialiseNewTask+0x48>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	617b      	str	r3, [r7, #20]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01f      	beq.n	8005864 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	e012      	b.n	8005850 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	7819      	ldrb	r1, [r3, #0]
 8005832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	3334      	adds	r3, #52	; 0x34
 800583a:	460a      	mov	r2, r1
 800583c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d006      	beq.n	8005858 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	3301      	adds	r3, #1
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b0f      	cmp	r3, #15
 8005854:	d9e9      	bls.n	800582a <prvInitialiseNewTask+0x54>
 8005856:	e000      	b.n	800585a <prvInitialiseNewTask+0x84>
			{
				break;
 8005858:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005862:	e003      	b.n	800586c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b06      	cmp	r3, #6
 8005870:	d901      	bls.n	8005876 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005872:	2306      	movs	r3, #6
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	2200      	movs	r2, #0
 8005886:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	3304      	adds	r3, #4
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fe6c 	bl	800556a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	3318      	adds	r3, #24
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff fe67 	bl	800556a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	f1c3 0207 	rsb	r2, r3, #7
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2200      	movs	r2, #0
 80058b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	69b8      	ldr	r0, [r7, #24]
 80058c6:	f000 fc05 	bl	80060d4 <pxPortInitialiseStack>
 80058ca:	4602      	mov	r2, r0
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058dc:	bf00      	nop
 80058de:	3720      	adds	r7, #32
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058ec:	f000 fd22 	bl	8006334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058f0:	4b2a      	ldr	r3, [pc, #168]	; (800599c <prvAddNewTaskToReadyList+0xb8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	4a29      	ldr	r2, [pc, #164]	; (800599c <prvAddNewTaskToReadyList+0xb8>)
 80058f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058fa:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <prvAddNewTaskToReadyList+0xbc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005902:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <prvAddNewTaskToReadyList+0xbc>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005908:	4b24      	ldr	r3, [pc, #144]	; (800599c <prvAddNewTaskToReadyList+0xb8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d110      	bne.n	8005932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005910:	f000 fabc 	bl	8005e8c <prvInitialiseTaskLists>
 8005914:	e00d      	b.n	8005932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <prvAddNewTaskToReadyList+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800591e:	4b20      	ldr	r3, [pc, #128]	; (80059a0 <prvAddNewTaskToReadyList+0xbc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	429a      	cmp	r2, r3
 800592a:	d802      	bhi.n	8005932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800592c:	4a1c      	ldr	r2, [pc, #112]	; (80059a0 <prvAddNewTaskToReadyList+0xbc>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005932:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <prvAddNewTaskToReadyList+0xc4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3301      	adds	r3, #1
 8005938:	4a1b      	ldr	r2, [pc, #108]	; (80059a8 <prvAddNewTaskToReadyList+0xc4>)
 800593a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	2201      	movs	r2, #1
 8005942:	409a      	lsls	r2, r3
 8005944:	4b19      	ldr	r3, [pc, #100]	; (80059ac <prvAddNewTaskToReadyList+0xc8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4313      	orrs	r3, r2
 800594a:	4a18      	ldr	r2, [pc, #96]	; (80059ac <prvAddNewTaskToReadyList+0xc8>)
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	4613      	mov	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <prvAddNewTaskToReadyList+0xcc>)
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f7ff fe0d 	bl	8005584 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800596a:	f000 fd13 	bl	8006394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <prvAddNewTaskToReadyList+0xc0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvAddNewTaskToReadyList+0xbc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	429a      	cmp	r2, r3
 8005982:	d207      	bcs.n	8005994 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <prvAddNewTaskToReadyList+0xd0>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200003ec 	.word	0x200003ec
 80059a0:	200002ec 	.word	0x200002ec
 80059a4:	200003f8 	.word	0x200003f8
 80059a8:	20000408 	.word	0x20000408
 80059ac:	200003f4 	.word	0x200003f4
 80059b0:	200002f0 	.word	0x200002f0
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d017      	beq.n	80059fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <vTaskDelay+0x60>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <vTaskDelay+0x30>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60bb      	str	r3, [r7, #8]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059e8:	f000 f87a 	bl	8005ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fb0a 	bl	8006008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059f4:	f000 f882 	bl	8005afc <xTaskResumeAll>
 80059f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <vTaskDelay+0x64>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000414 	.word	0x20000414
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a2e:	463a      	mov	r2, r7
 8005a30:	1d39      	adds	r1, r7, #4
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fb fd54 	bl	80014e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	9202      	str	r2, [sp, #8]
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	491e      	ldr	r1, [pc, #120]	; (8005ac8 <vTaskStartScheduler+0xa8>)
 8005a50:	481e      	ldr	r0, [pc, #120]	; (8005acc <vTaskStartScheduler+0xac>)
 8005a52:	f7ff fe1e 	bl	8005692 <xTaskCreateStatic>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <vTaskStartScheduler+0xb0>)
 8005a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a5c:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <vTaskStartScheduler+0xb0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a64:	2301      	movs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e001      	b.n	8005a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d116      	bne.n	8005aa2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	613b      	str	r3, [r7, #16]
}
 8005a86:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a88:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <vTaskStartScheduler+0xb4>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a90:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <vTaskStartScheduler+0xb8>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <vTaskStartScheduler+0xbc>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a9c:	f000 fba8 	bl	80061f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aa0:	e00e      	b.n	8005ac0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d10a      	bne.n	8005ac0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60fb      	str	r3, [r7, #12]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <vTaskStartScheduler+0x9e>
}
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	08007934 	.word	0x08007934
 8005acc:	08005e5d 	.word	0x08005e5d
 8005ad0:	20000410 	.word	0x20000410
 8005ad4:	2000040c 	.word	0x2000040c
 8005ad8:	200003f8 	.word	0x200003f8
 8005adc:	200003f0 	.word	0x200003f0

08005ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ae4:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <vTaskSuspendAll+0x18>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4a03      	ldr	r2, [pc, #12]	; (8005af8 <vTaskSuspendAll+0x18>)
 8005aec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000414 	.word	0x20000414

08005afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b0a:	4b41      	ldr	r3, [pc, #260]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	603b      	str	r3, [r7, #0]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b28:	f000 fc04 	bl	8006334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b2c:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4a37      	ldr	r2, [pc, #220]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b36:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <xTaskResumeAll+0x114>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d161      	bne.n	8005c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b3e:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <xTaskResumeAll+0x118>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d05d      	beq.n	8005c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b46:	e02e      	b.n	8005ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b48:	4b33      	ldr	r3, [pc, #204]	; (8005c18 <xTaskResumeAll+0x11c>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3318      	adds	r3, #24
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fd72 	bl	800563e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff fd6d 	bl	800563e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	2201      	movs	r2, #1
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <xTaskResumeAll+0x120>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	4a2a      	ldr	r2, [pc, #168]	; (8005c1c <xTaskResumeAll+0x120>)
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <xTaskResumeAll+0x124>)
 8005b84:	441a      	add	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f7ff fcf9 	bl	8005584 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	4b23      	ldr	r3, [pc, #140]	; (8005c24 <xTaskResumeAll+0x128>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d302      	bcc.n	8005ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <xTaskResumeAll+0x12c>)
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ba6:	4b1c      	ldr	r3, [pc, #112]	; (8005c18 <xTaskResumeAll+0x11c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1cc      	bne.n	8005b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bb4:	f000 fa08 	bl	8005fc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005bb8:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <xTaskResumeAll+0x130>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d010      	beq.n	8005be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bc4:	f000 f836 	bl	8005c34 <xTaskIncrementTick>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <xTaskResumeAll+0x12c>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f1      	bne.n	8005bc4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <xTaskResumeAll+0x130>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <xTaskResumeAll+0x12c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <xTaskResumeAll+0x134>)
 8005bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c02:	f000 fbc7 	bl	8006394 <vPortExitCritical>

	return xAlreadyYielded;
 8005c06:	68bb      	ldr	r3, [r7, #8]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000414 	.word	0x20000414
 8005c14:	200003ec 	.word	0x200003ec
 8005c18:	200003ac 	.word	0x200003ac
 8005c1c:	200003f4 	.word	0x200003f4
 8005c20:	200002f0 	.word	0x200002f0
 8005c24:	200002ec 	.word	0x200002ec
 8005c28:	20000400 	.word	0x20000400
 8005c2c:	200003fc 	.word	0x200003fc
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c3e:	4b4e      	ldr	r3, [pc, #312]	; (8005d78 <xTaskIncrementTick+0x144>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 8088 	bne.w	8005d58 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c48:	4b4c      	ldr	r3, [pc, #304]	; (8005d7c <xTaskIncrementTick+0x148>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c50:	4a4a      	ldr	r2, [pc, #296]	; (8005d7c <xTaskIncrementTick+0x148>)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d120      	bne.n	8005c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c5c:	4b48      	ldr	r3, [pc, #288]	; (8005d80 <xTaskIncrementTick+0x14c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	603b      	str	r3, [r7, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xTaskIncrementTick+0x46>
 8005c7c:	4b40      	ldr	r3, [pc, #256]	; (8005d80 <xTaskIncrementTick+0x14c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	4b40      	ldr	r3, [pc, #256]	; (8005d84 <xTaskIncrementTick+0x150>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a3e      	ldr	r2, [pc, #248]	; (8005d80 <xTaskIncrementTick+0x14c>)
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4a3e      	ldr	r2, [pc, #248]	; (8005d84 <xTaskIncrementTick+0x150>)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4b3d      	ldr	r3, [pc, #244]	; (8005d88 <xTaskIncrementTick+0x154>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4a3c      	ldr	r2, [pc, #240]	; (8005d88 <xTaskIncrementTick+0x154>)
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	f000 f995 	bl	8005fc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <xTaskIncrementTick+0x158>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d348      	bcc.n	8005d3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca8:	4b35      	ldr	r3, [pc, #212]	; (8005d80 <xTaskIncrementTick+0x14c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb2:	4b36      	ldr	r3, [pc, #216]	; (8005d8c <xTaskIncrementTick+0x158>)
 8005cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb8:	601a      	str	r2, [r3, #0]
					break;
 8005cba:	e03e      	b.n	8005d3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cbc:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <xTaskIncrementTick+0x14c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d203      	bcs.n	8005cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cd4:	4a2d      	ldr	r2, [pc, #180]	; (8005d8c <xTaskIncrementTick+0x158>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cda:	e02e      	b.n	8005d3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fcac 	bl	800563e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d004      	beq.n	8005cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	3318      	adds	r3, #24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fca3 	bl	800563e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	4b23      	ldr	r3, [pc, #140]	; (8005d90 <xTaskIncrementTick+0x15c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <xTaskIncrementTick+0x15c>)
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <xTaskIncrementTick+0x160>)
 8005d18:	441a      	add	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7ff fc2f 	bl	8005584 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <xTaskIncrementTick+0x164>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3b9      	bcc.n	8005ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d38:	e7b6      	b.n	8005ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d3a:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <xTaskIncrementTick+0x164>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4914      	ldr	r1, [pc, #80]	; (8005d94 <xTaskIncrementTick+0x160>)
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d907      	bls.n	8005d62 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e004      	b.n	8005d62 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d58:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <xTaskIncrementTick+0x168>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	4a0f      	ldr	r2, [pc, #60]	; (8005d9c <xTaskIncrementTick+0x168>)
 8005d60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d62:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <xTaskIncrementTick+0x16c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	20000414 	.word	0x20000414
 8005d7c:	200003f0 	.word	0x200003f0
 8005d80:	200003a4 	.word	0x200003a4
 8005d84:	200003a8 	.word	0x200003a8
 8005d88:	20000404 	.word	0x20000404
 8005d8c:	2000040c 	.word	0x2000040c
 8005d90:	200003f4 	.word	0x200003f4
 8005d94:	200002f0 	.word	0x200002f0
 8005d98:	200002ec 	.word	0x200002ec
 8005d9c:	200003fc 	.word	0x200003fc
 8005da0:	20000400 	.word	0x20000400

08005da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005daa:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <vTaskSwitchContext+0xa4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005db2:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <vTaskSwitchContext+0xa8>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005db8:	e03f      	b.n	8005e3a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <vTaskSwitchContext+0xa8>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc0:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <vTaskSwitchContext+0xac>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	fab3 f383 	clz	r3, r3
 8005dcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	f1c3 031f 	rsb	r3, r3, #31
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	491f      	ldr	r1, [pc, #124]	; (8005e54 <vTaskSwitchContext+0xb0>)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	607b      	str	r3, [r7, #4]
}
 8005dfc:	bf00      	nop
 8005dfe:	e7fe      	b.n	8005dfe <vTaskSwitchContext+0x5a>
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <vTaskSwitchContext+0xb0>)
 8005e0c:	4413      	add	r3, r2
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3308      	adds	r3, #8
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d104      	bne.n	8005e30 <vTaskSwitchContext+0x8c>
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <vTaskSwitchContext+0xb4>)
 8005e38:	6013      	str	r3, [r2, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20000414 	.word	0x20000414
 8005e4c:	20000400 	.word	0x20000400
 8005e50:	200003f4 	.word	0x200003f4
 8005e54:	200002f0 	.word	0x200002f0
 8005e58:	200002ec 	.word	0x200002ec

08005e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e64:	f000 f852 	bl	8005f0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <prvIdleTask+0x28>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d9f9      	bls.n	8005e64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <prvIdleTask+0x2c>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e80:	e7f0      	b.n	8005e64 <prvIdleTask+0x8>
 8005e82:	bf00      	nop
 8005e84:	200002f0 	.word	0x200002f0
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e92:	2300      	movs	r3, #0
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	e00c      	b.n	8005eb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <prvInitialiseTaskLists+0x60>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fb3f 	bl	800552a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b06      	cmp	r3, #6
 8005eb6:	d9ef      	bls.n	8005e98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb8:	480d      	ldr	r0, [pc, #52]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eba:	f7ff fb36 	bl	800552a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ebe:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ec0:	f7ff fb33 	bl	800552a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ec4:	480c      	ldr	r0, [pc, #48]	; (8005ef8 <prvInitialiseTaskLists+0x6c>)
 8005ec6:	f7ff fb30 	bl	800552a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eca:	480c      	ldr	r0, [pc, #48]	; (8005efc <prvInitialiseTaskLists+0x70>)
 8005ecc:	f7ff fb2d 	bl	800552a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ed0:	480b      	ldr	r0, [pc, #44]	; (8005f00 <prvInitialiseTaskLists+0x74>)
 8005ed2:	f7ff fb2a 	bl	800552a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <prvInitialiseTaskLists+0x78>)
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <prvInitialiseTaskLists+0x64>)
 8005eda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005edc:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <prvInitialiseTaskLists+0x7c>)
 8005ede:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <prvInitialiseTaskLists+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200002f0 	.word	0x200002f0
 8005ef0:	2000037c 	.word	0x2000037c
 8005ef4:	20000390 	.word	0x20000390
 8005ef8:	200003ac 	.word	0x200003ac
 8005efc:	200003c0 	.word	0x200003c0
 8005f00:	200003d8 	.word	0x200003d8
 8005f04:	200003a4 	.word	0x200003a4
 8005f08:	200003a8 	.word	0x200003a8

08005f0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f12:	e019      	b.n	8005f48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f14:	f000 fa0e 	bl	8006334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <prvCheckTasksWaitingTermination+0x50>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fb8a 	bl	800563e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <prvCheckTasksWaitingTermination+0x54>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a0b      	ldr	r2, [pc, #44]	; (8005f60 <prvCheckTasksWaitingTermination+0x54>)
 8005f32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f3e:	f000 fa29 	bl	8006394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f810 	bl	8005f68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <prvCheckTasksWaitingTermination+0x58>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e1      	bne.n	8005f14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f50:	bf00      	nop
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200003c0 	.word	0x200003c0
 8005f60:	200003ec 	.word	0x200003ec
 8005f64:	200003d4 	.word	0x200003d4

08005f68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fb7e 	bl	8006680 <vPortFree>
				vPortFree( pxTCB );
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb7b 	bl	8006680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f8a:	e018      	b.n	8005fbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d103      	bne.n	8005f9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fb72 	bl	8006680 <vPortFree>
	}
 8005f9c:	e00f      	b.n	8005fbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d00a      	beq.n	8005fbe <prvDeleteTCB+0x56>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	60fb      	str	r3, [r7, #12]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <prvDeleteTCB+0x54>
	}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <prvResetNextTaskUnblockTime+0x38>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <prvResetNextTaskUnblockTime+0x3c>)
 8005fda:	f04f 32ff 	mov.w	r2, #4294967295
 8005fde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fe0:	e008      	b.n	8005ff4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <prvResetNextTaskUnblockTime+0x38>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <prvResetNextTaskUnblockTime+0x3c>)
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	200003a4 	.word	0x200003a4
 8006004:	2000040c 	.word	0x2000040c

08006008 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006012:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006018:	4b28      	ldr	r3, [pc, #160]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3304      	adds	r3, #4
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fb0d 	bl	800563e <uxListRemove>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	2201      	movs	r2, #1
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43da      	mvns	r2, r3
 8006038:	4b21      	ldr	r3, [pc, #132]	; (80060c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4013      	ands	r3, r2
 800603e:	4a20      	ldr	r2, [pc, #128]	; (80060c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006040:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d10a      	bne.n	8006060 <prvAddCurrentTaskToDelayedList+0x58>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	481a      	ldr	r0, [pc, #104]	; (80060c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800605a:	f7ff fa93 	bl	8005584 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800605e:	e026      	b.n	80060ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	429a      	cmp	r2, r3
 8006076:	d209      	bcs.n	800608c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006078:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7ff faa1 	bl	80055cc <vListInsert>
}
 800608a:	e010      	b.n	80060ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f7ff fa97 	bl	80055cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d202      	bcs.n	80060ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	6013      	str	r3, [r2, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200003f0 	.word	0x200003f0
 80060bc:	200002ec 	.word	0x200002ec
 80060c0:	200003f4 	.word	0x200003f4
 80060c4:	200003d8 	.word	0x200003d8
 80060c8:	200003a8 	.word	0x200003a8
 80060cc:	200003a4 	.word	0x200003a4
 80060d0:	2000040c 	.word	0x2000040c

080060d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3b04      	subs	r3, #4
 80060e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b04      	subs	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006104:	4a0c      	ldr	r2, [pc, #48]	; (8006138 <pxPortInitialiseStack+0x64>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3b14      	subs	r3, #20
 800610e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b04      	subs	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f06f 0202 	mvn.w	r2, #2
 8006122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3b20      	subs	r3, #32
 8006128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	0800613d 	.word	0x0800613d

0800613c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <prvTaskExitError+0x54>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d00a      	beq.n	8006166 <prvTaskExitError+0x2a>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60fb      	str	r3, [r7, #12]
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <prvTaskExitError+0x28>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60bb      	str	r3, [r7, #8]
}
 8006178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800617a:	bf00      	nop
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0fc      	beq.n	800617c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	2000000c 	.word	0x2000000c
	...

080061a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <pxCurrentTCBConst2>)
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	6808      	ldr	r0, [r1, #0]
 80061a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	f380 8809 	msr	PSP, r0
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8811 	msr	BASEPRI, r0
 80061ba:	4770      	bx	lr
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst2>:
 80061c0:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061c8:	4808      	ldr	r0, [pc, #32]	; (80061ec <prvPortStartFirstTask+0x24>)
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f380 8808 	msr	MSP, r0
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8814 	msr	CONTROL, r0
 80061da:	b662      	cpsie	i
 80061dc:	b661      	cpsie	f
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	df00      	svc	0
 80061e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ea:	bf00      	nop
 80061ec:	e000ed08 	.word	0xe000ed08

080061f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061f6:	4b46      	ldr	r3, [pc, #280]	; (8006310 <xPortStartScheduler+0x120>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a46      	ldr	r2, [pc, #280]	; (8006314 <xPortStartScheduler+0x124>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10a      	bne.n	8006216 <xPortStartScheduler+0x26>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006216:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <xPortStartScheduler+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a3f      	ldr	r2, [pc, #252]	; (8006318 <xPortStartScheduler+0x128>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10a      	bne.n	8006236 <xPortStartScheduler+0x46>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006236:	4b39      	ldr	r3, [pc, #228]	; (800631c <xPortStartScheduler+0x12c>)
 8006238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b31      	ldr	r3, [pc, #196]	; (8006320 <xPortStartScheduler+0x130>)
 800625c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800625e:	4b31      	ldr	r3, [pc, #196]	; (8006324 <xPortStartScheduler+0x134>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006264:	e009      	b.n	800627a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006266:	4b2f      	ldr	r3, [pc, #188]	; (8006324 <xPortStartScheduler+0x134>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3b01      	subs	r3, #1
 800626c:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <xPortStartScheduler+0x134>)
 800626e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d0ef      	beq.n	8006266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006286:	4b27      	ldr	r3, [pc, #156]	; (8006324 <xPortStartScheduler+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1c3 0307 	rsb	r3, r3, #7
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00a      	beq.n	80062a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60bb      	str	r3, [r7, #8]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062a8:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <xPortStartScheduler+0x134>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <xPortStartScheduler+0x134>)
 80062b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062b2:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <xPortStartScheduler+0x134>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ba:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <xPortStartScheduler+0x134>)
 80062bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062c6:	4b18      	ldr	r3, [pc, #96]	; (8006328 <xPortStartScheduler+0x138>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <xPortStartScheduler+0x138>)
 80062cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062d2:	4b15      	ldr	r3, [pc, #84]	; (8006328 <xPortStartScheduler+0x138>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a14      	ldr	r2, [pc, #80]	; (8006328 <xPortStartScheduler+0x138>)
 80062d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062de:	f000 f8dd 	bl	800649c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <xPortStartScheduler+0x13c>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062e8:	f000 f8fc 	bl	80064e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062ec:	4b10      	ldr	r3, [pc, #64]	; (8006330 <xPortStartScheduler+0x140>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0f      	ldr	r2, [pc, #60]	; (8006330 <xPortStartScheduler+0x140>)
 80062f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062f8:	f7ff ff66 	bl	80061c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062fc:	f7ff fd52 	bl	8005da4 <vTaskSwitchContext>
	prvTaskExitError();
 8006300:	f7ff ff1c 	bl	800613c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	e000ed00 	.word	0xe000ed00
 8006314:	410fc271 	.word	0x410fc271
 8006318:	410fc270 	.word	0x410fc270
 800631c:	e000e400 	.word	0xe000e400
 8006320:	20000418 	.word	0x20000418
 8006324:	2000041c 	.word	0x2000041c
 8006328:	e000ed20 	.word	0xe000ed20
 800632c:	2000000c 	.word	0x2000000c
 8006330:	e000ef34 	.word	0xe000ef34

08006334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	607b      	str	r3, [r7, #4]
}
 800634c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <vPortEnterCritical+0x58>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	4a0d      	ldr	r2, [pc, #52]	; (800638c <vPortEnterCritical+0x58>)
 8006356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <vPortEnterCritical+0x58>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10f      	bne.n	8006380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <vPortEnterCritical+0x5c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <vPortEnterCritical+0x4c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	603b      	str	r3, [r7, #0]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <vPortEnterCritical+0x4a>
	}
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	2000000c 	.word	0x2000000c
 8006390:	e000ed04 	.word	0xe000ed04

08006394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800639a:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <vPortExitCritical+0x50>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <vPortExitCritical+0x24>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	607b      	str	r3, [r7, #4]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <vPortExitCritical+0x50>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3b01      	subs	r3, #1
 80063be:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <vPortExitCritical+0x50>)
 80063c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <vPortExitCritical+0x50>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <vPortExitCritical+0x42>
 80063ca:	2300      	movs	r3, #0
 80063cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000000c 	.word	0x2000000c
	...

080063f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063f0:	f3ef 8009 	mrs	r0, PSP
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <pxCurrentTCBConst>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f01e 0f10 	tst.w	lr, #16
 8006400:	bf08      	it	eq
 8006402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	6010      	str	r0, [r2, #0]
 800640c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006414:	f380 8811 	msr	BASEPRI, r0
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f7ff fcc0 	bl	8005da4 <vTaskSwitchContext>
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	f380 8811 	msr	BASEPRI, r0
 800642c:	bc09      	pop	{r0, r3}
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	6808      	ldr	r0, [r1, #0]
 8006432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006436:	f01e 0f10 	tst.w	lr, #16
 800643a:	bf08      	it	eq
 800643c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006440:	f380 8809 	msr	PSP, r0
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst>:
 8006450:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006472:	f7ff fbdf 	bl	8005c34 <xTaskIncrementTick>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <SysTick_Handler+0x40>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064a0:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <vPortSetupTimerInterrupt+0x34>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <vPortSetupTimerInterrupt+0x38>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <vPortSetupTimerInterrupt+0x3c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <vPortSetupTimerInterrupt+0x40>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	099b      	lsrs	r3, r3, #6
 80064b8:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <vPortSetupTimerInterrupt+0x44>)
 80064ba:	3b01      	subs	r3, #1
 80064bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064be:	4b04      	ldr	r3, [pc, #16]	; (80064d0 <vPortSetupTimerInterrupt+0x34>)
 80064c0:	2207      	movs	r2, #7
 80064c2:	601a      	str	r2, [r3, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	e000e010 	.word	0xe000e010
 80064d4:	e000e018 	.word	0xe000e018
 80064d8:	20000000 	.word	0x20000000
 80064dc:	10624dd3 	.word	0x10624dd3
 80064e0:	e000e014 	.word	0xe000e014

080064e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064f4 <vPortEnableVFP+0x10>
 80064e8:	6801      	ldr	r1, [r0, #0]
 80064ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80064ee:	6001      	str	r1, [r0, #0]
 80064f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064f2:	bf00      	nop
 80064f4:	e000ed88 	.word	0xe000ed88

080064f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006504:	f7ff faec 	bl	8005ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006508:	4b58      	ldr	r3, [pc, #352]	; (800666c <pvPortMalloc+0x174>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006510:	f000 f910 	bl	8006734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006514:	4b56      	ldr	r3, [pc, #344]	; (8006670 <pvPortMalloc+0x178>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 808e 	bne.w	800663e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01d      	beq.n	8006564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006528:	2208      	movs	r2, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b00      	cmp	r3, #0
 8006538:	d014      	beq.n	8006564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f023 0307 	bic.w	r3, r3, #7
 8006540:	3308      	adds	r3, #8
 8006542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <pvPortMalloc+0x6c>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	617b      	str	r3, [r7, #20]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d069      	beq.n	800663e <pvPortMalloc+0x146>
 800656a:	4b42      	ldr	r3, [pc, #264]	; (8006674 <pvPortMalloc+0x17c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d864      	bhi.n	800663e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006574:	4b40      	ldr	r3, [pc, #256]	; (8006678 <pvPortMalloc+0x180>)
 8006576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006578:	4b3f      	ldr	r3, [pc, #252]	; (8006678 <pvPortMalloc+0x180>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800657e:	e004      	b.n	800658a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d903      	bls.n	800659c <pvPortMalloc+0xa4>
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f1      	bne.n	8006580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <pvPortMalloc+0x174>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d04b      	beq.n	800663e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2208      	movs	r2, #8
 80065ac:	4413      	add	r3, r2
 80065ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	1ad2      	subs	r2, r2, r3
 80065c0:	2308      	movs	r3, #8
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d91f      	bls.n	8006608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00a      	beq.n	80065f0 <pvPortMalloc+0xf8>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	613b      	str	r3, [r7, #16]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	1ad2      	subs	r2, r2, r3
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006602:	69b8      	ldr	r0, [r7, #24]
 8006604:	f000 f8f8 	bl	80067f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006608:	4b1a      	ldr	r3, [pc, #104]	; (8006674 <pvPortMalloc+0x17c>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	4a18      	ldr	r2, [pc, #96]	; (8006674 <pvPortMalloc+0x17c>)
 8006614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006616:	4b17      	ldr	r3, [pc, #92]	; (8006674 <pvPortMalloc+0x17c>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b18      	ldr	r3, [pc, #96]	; (800667c <pvPortMalloc+0x184>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d203      	bcs.n	800662a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <pvPortMalloc+0x17c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a15      	ldr	r2, [pc, #84]	; (800667c <pvPortMalloc+0x184>)
 8006628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <pvPortMalloc+0x178>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	431a      	orrs	r2, r3
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800663e:	f7ff fa5d 	bl	8005afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <pvPortMalloc+0x16a>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	60fb      	str	r3, [r7, #12]
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <pvPortMalloc+0x168>
	return pvReturn;
 8006662:	69fb      	ldr	r3, [r7, #28]
}
 8006664:	4618      	mov	r0, r3
 8006666:	3728      	adds	r7, #40	; 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20004028 	.word	0x20004028
 8006670:	20004034 	.word	0x20004034
 8006674:	2000402c 	.word	0x2000402c
 8006678:	20004020 	.word	0x20004020
 800667c:	20004030 	.word	0x20004030

08006680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d048      	beq.n	8006724 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006692:	2308      	movs	r3, #8
 8006694:	425b      	negs	r3, r3
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4413      	add	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	4b21      	ldr	r3, [pc, #132]	; (800672c <vPortFree+0xac>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <vPortFree+0x44>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60fb      	str	r3, [r7, #12]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <vPortFree+0x62>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60bb      	str	r3, [r7, #8]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <vPortFree+0xac>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d019      	beq.n	8006724 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d115      	bne.n	8006724 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <vPortFree+0xac>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006708:	f7ff f9ea 	bl	8005ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <vPortFree+0xb0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4413      	add	r3, r2
 8006716:	4a06      	ldr	r2, [pc, #24]	; (8006730 <vPortFree+0xb0>)
 8006718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800671a:	6938      	ldr	r0, [r7, #16]
 800671c:	f000 f86c 	bl	80067f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006720:	f7ff f9ec 	bl	8005afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006724:	bf00      	nop
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20004034 	.word	0x20004034
 8006730:	2000402c 	.word	0x2000402c

08006734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800673a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800673e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006740:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <prvHeapInit+0xac>)
 8006742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3307      	adds	r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <prvHeapInit+0xac>)
 8006764:	4413      	add	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800676c:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <prvHeapInit+0xb0>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <prvHeapInit+0xb0>)
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4413      	add	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006780:	2208      	movs	r2, #8
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <prvHeapInit+0xb4>)
 8006794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <prvHeapInit+0xb4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2200      	movs	r2, #0
 800679c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <prvHeapInit+0xb4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <prvHeapInit+0xb4>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <prvHeapInit+0xb8>)
 80067c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <prvHeapInit+0xbc>)
 80067ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067cc:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <prvHeapInit+0xc0>)
 80067ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067d2:	601a      	str	r2, [r3, #0]
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000420 	.word	0x20000420
 80067e4:	20004020 	.word	0x20004020
 80067e8:	20004028 	.word	0x20004028
 80067ec:	20004030 	.word	0x20004030
 80067f0:	2000402c 	.word	0x2000402c
 80067f4:	20004034 	.word	0x20004034

080067f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <prvInsertBlockIntoFreeList+0xac>)
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e002      	b.n	800680c <prvInsertBlockIntoFreeList+0x14>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	429a      	cmp	r2, r3
 8006814:	d8f7      	bhi.n	8006806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	4413      	add	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d108      	bne.n	800683a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	441a      	add	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	441a      	add	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d118      	bne.n	8006880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d00d      	beq.n	8006876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	441a      	add	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e008      	b.n	8006888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e003      	b.n	8006888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d002      	beq.n	8006896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20004020 	.word	0x20004020
 80068a8:	20004028 	.word	0x20004028

080068ac <__errno>:
 80068ac:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <__errno+0x8>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000010 	.word	0x20000010

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4d0d      	ldr	r5, [pc, #52]	; (80068f0 <__libc_init_array+0x38>)
 80068bc:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068be:	1b64      	subs	r4, r4, r5
 80068c0:	10a4      	asrs	r4, r4, #2
 80068c2:	2600      	movs	r6, #0
 80068c4:	42a6      	cmp	r6, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	4d0b      	ldr	r5, [pc, #44]	; (80068f8 <__libc_init_array+0x40>)
 80068ca:	4c0c      	ldr	r4, [pc, #48]	; (80068fc <__libc_init_array+0x44>)
 80068cc:	f000 ff86 	bl	80077dc <_init>
 80068d0:	1b64      	subs	r4, r4, r5
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	2600      	movs	r6, #0
 80068d6:	42a6      	cmp	r6, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068e0:	4798      	blx	r3
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ea:	4798      	blx	r3
 80068ec:	3601      	adds	r6, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	080079f4 	.word	0x080079f4
 80068f4:	080079f4 	.word	0x080079f4
 80068f8:	080079f4 	.word	0x080079f4
 80068fc:	080079f8 	.word	0x080079f8

08006900 <malloc>:
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <malloc+0xc>)
 8006902:	4601      	mov	r1, r0
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f000 b85b 	b.w	80069c0 <_malloc_r>
 800690a:	bf00      	nop
 800690c:	20000010 	.word	0x20000010

08006910 <memset>:
 8006910:	4402      	add	r2, r0
 8006912:	4603      	mov	r3, r0
 8006914:	4293      	cmp	r3, r2
 8006916:	d100      	bne.n	800691a <memset+0xa>
 8006918:	4770      	bx	lr
 800691a:	f803 1b01 	strb.w	r1, [r3], #1
 800691e:	e7f9      	b.n	8006914 <memset+0x4>

08006920 <_free_r>:
 8006920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006922:	2900      	cmp	r1, #0
 8006924:	d048      	beq.n	80069b8 <_free_r+0x98>
 8006926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800692a:	9001      	str	r0, [sp, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f1a1 0404 	sub.w	r4, r1, #4
 8006932:	bfb8      	it	lt
 8006934:	18e4      	addlt	r4, r4, r3
 8006936:	f000 f9c5 	bl	8006cc4 <__malloc_lock>
 800693a:	4a20      	ldr	r2, [pc, #128]	; (80069bc <_free_r+0x9c>)
 800693c:	9801      	ldr	r0, [sp, #4]
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	4615      	mov	r5, r2
 8006942:	b933      	cbnz	r3, 8006952 <_free_r+0x32>
 8006944:	6063      	str	r3, [r4, #4]
 8006946:	6014      	str	r4, [r2, #0]
 8006948:	b003      	add	sp, #12
 800694a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800694e:	f000 b9bf 	b.w	8006cd0 <__malloc_unlock>
 8006952:	42a3      	cmp	r3, r4
 8006954:	d90b      	bls.n	800696e <_free_r+0x4e>
 8006956:	6821      	ldr	r1, [r4, #0]
 8006958:	1862      	adds	r2, r4, r1
 800695a:	4293      	cmp	r3, r2
 800695c:	bf04      	itt	eq
 800695e:	681a      	ldreq	r2, [r3, #0]
 8006960:	685b      	ldreq	r3, [r3, #4]
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	bf04      	itt	eq
 8006966:	1852      	addeq	r2, r2, r1
 8006968:	6022      	streq	r2, [r4, #0]
 800696a:	602c      	str	r4, [r5, #0]
 800696c:	e7ec      	b.n	8006948 <_free_r+0x28>
 800696e:	461a      	mov	r2, r3
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b10b      	cbz	r3, 8006978 <_free_r+0x58>
 8006974:	42a3      	cmp	r3, r4
 8006976:	d9fa      	bls.n	800696e <_free_r+0x4e>
 8006978:	6811      	ldr	r1, [r2, #0]
 800697a:	1855      	adds	r5, r2, r1
 800697c:	42a5      	cmp	r5, r4
 800697e:	d10b      	bne.n	8006998 <_free_r+0x78>
 8006980:	6824      	ldr	r4, [r4, #0]
 8006982:	4421      	add	r1, r4
 8006984:	1854      	adds	r4, r2, r1
 8006986:	42a3      	cmp	r3, r4
 8006988:	6011      	str	r1, [r2, #0]
 800698a:	d1dd      	bne.n	8006948 <_free_r+0x28>
 800698c:	681c      	ldr	r4, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	6053      	str	r3, [r2, #4]
 8006992:	4421      	add	r1, r4
 8006994:	6011      	str	r1, [r2, #0]
 8006996:	e7d7      	b.n	8006948 <_free_r+0x28>
 8006998:	d902      	bls.n	80069a0 <_free_r+0x80>
 800699a:	230c      	movs	r3, #12
 800699c:	6003      	str	r3, [r0, #0]
 800699e:	e7d3      	b.n	8006948 <_free_r+0x28>
 80069a0:	6825      	ldr	r5, [r4, #0]
 80069a2:	1961      	adds	r1, r4, r5
 80069a4:	428b      	cmp	r3, r1
 80069a6:	bf04      	itt	eq
 80069a8:	6819      	ldreq	r1, [r3, #0]
 80069aa:	685b      	ldreq	r3, [r3, #4]
 80069ac:	6063      	str	r3, [r4, #4]
 80069ae:	bf04      	itt	eq
 80069b0:	1949      	addeq	r1, r1, r5
 80069b2:	6021      	streq	r1, [r4, #0]
 80069b4:	6054      	str	r4, [r2, #4]
 80069b6:	e7c7      	b.n	8006948 <_free_r+0x28>
 80069b8:	b003      	add	sp, #12
 80069ba:	bd30      	pop	{r4, r5, pc}
 80069bc:	20004038 	.word	0x20004038

080069c0 <_malloc_r>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	1ccd      	adds	r5, r1, #3
 80069c4:	f025 0503 	bic.w	r5, r5, #3
 80069c8:	3508      	adds	r5, #8
 80069ca:	2d0c      	cmp	r5, #12
 80069cc:	bf38      	it	cc
 80069ce:	250c      	movcc	r5, #12
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	4606      	mov	r6, r0
 80069d4:	db01      	blt.n	80069da <_malloc_r+0x1a>
 80069d6:	42a9      	cmp	r1, r5
 80069d8:	d903      	bls.n	80069e2 <_malloc_r+0x22>
 80069da:	230c      	movs	r3, #12
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	2000      	movs	r0, #0
 80069e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e2:	f000 f96f 	bl	8006cc4 <__malloc_lock>
 80069e6:	4921      	ldr	r1, [pc, #132]	; (8006a6c <_malloc_r+0xac>)
 80069e8:	680a      	ldr	r2, [r1, #0]
 80069ea:	4614      	mov	r4, r2
 80069ec:	b99c      	cbnz	r4, 8006a16 <_malloc_r+0x56>
 80069ee:	4f20      	ldr	r7, [pc, #128]	; (8006a70 <_malloc_r+0xb0>)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	b923      	cbnz	r3, 80069fe <_malloc_r+0x3e>
 80069f4:	4621      	mov	r1, r4
 80069f6:	4630      	mov	r0, r6
 80069f8:	f000 f854 	bl	8006aa4 <_sbrk_r>
 80069fc:	6038      	str	r0, [r7, #0]
 80069fe:	4629      	mov	r1, r5
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 f84f 	bl	8006aa4 <_sbrk_r>
 8006a06:	1c43      	adds	r3, r0, #1
 8006a08:	d123      	bne.n	8006a52 <_malloc_r+0x92>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	6033      	str	r3, [r6, #0]
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f000 f95e 	bl	8006cd0 <__malloc_unlock>
 8006a14:	e7e3      	b.n	80069de <_malloc_r+0x1e>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	1b5b      	subs	r3, r3, r5
 8006a1a:	d417      	bmi.n	8006a4c <_malloc_r+0x8c>
 8006a1c:	2b0b      	cmp	r3, #11
 8006a1e:	d903      	bls.n	8006a28 <_malloc_r+0x68>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	441c      	add	r4, r3
 8006a24:	6025      	str	r5, [r4, #0]
 8006a26:	e004      	b.n	8006a32 <_malloc_r+0x72>
 8006a28:	6863      	ldr	r3, [r4, #4]
 8006a2a:	42a2      	cmp	r2, r4
 8006a2c:	bf0c      	ite	eq
 8006a2e:	600b      	streq	r3, [r1, #0]
 8006a30:	6053      	strne	r3, [r2, #4]
 8006a32:	4630      	mov	r0, r6
 8006a34:	f000 f94c 	bl	8006cd0 <__malloc_unlock>
 8006a38:	f104 000b 	add.w	r0, r4, #11
 8006a3c:	1d23      	adds	r3, r4, #4
 8006a3e:	f020 0007 	bic.w	r0, r0, #7
 8006a42:	1ac2      	subs	r2, r0, r3
 8006a44:	d0cc      	beq.n	80069e0 <_malloc_r+0x20>
 8006a46:	1a1b      	subs	r3, r3, r0
 8006a48:	50a3      	str	r3, [r4, r2]
 8006a4a:	e7c9      	b.n	80069e0 <_malloc_r+0x20>
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	6864      	ldr	r4, [r4, #4]
 8006a50:	e7cc      	b.n	80069ec <_malloc_r+0x2c>
 8006a52:	1cc4      	adds	r4, r0, #3
 8006a54:	f024 0403 	bic.w	r4, r4, #3
 8006a58:	42a0      	cmp	r0, r4
 8006a5a:	d0e3      	beq.n	8006a24 <_malloc_r+0x64>
 8006a5c:	1a21      	subs	r1, r4, r0
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 f820 	bl	8006aa4 <_sbrk_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1dd      	bne.n	8006a24 <_malloc_r+0x64>
 8006a68:	e7cf      	b.n	8006a0a <_malloc_r+0x4a>
 8006a6a:	bf00      	nop
 8006a6c:	20004038 	.word	0x20004038
 8006a70:	2000403c 	.word	0x2000403c

08006a74 <iprintf>:
 8006a74:	b40f      	push	{r0, r1, r2, r3}
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <iprintf+0x2c>)
 8006a78:	b513      	push	{r0, r1, r4, lr}
 8006a7a:	681c      	ldr	r4, [r3, #0]
 8006a7c:	b124      	cbz	r4, 8006a88 <iprintf+0x14>
 8006a7e:	69a3      	ldr	r3, [r4, #24]
 8006a80:	b913      	cbnz	r3, 8006a88 <iprintf+0x14>
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 f87e 	bl	8006b84 <__sinit>
 8006a88:	ab05      	add	r3, sp, #20
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	68a1      	ldr	r1, [r4, #8]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 f94d 	bl	8006d30 <_vfiprintf_r>
 8006a96:	b002      	add	sp, #8
 8006a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a9c:	b004      	add	sp, #16
 8006a9e:	4770      	bx	lr
 8006aa0:	20000010 	.word	0x20000010

08006aa4 <_sbrk_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d06      	ldr	r5, [pc, #24]	; (8006ac0 <_sbrk_r+0x1c>)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	602b      	str	r3, [r5, #0]
 8006ab0:	f7fb f8be 	bl	8001c30 <_sbrk>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_sbrk_r+0x1a>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_sbrk_r+0x1a>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	20004348 	.word	0x20004348

08006ac4 <strcpy>:
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aca:	f803 2b01 	strb.w	r2, [r3], #1
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	d1f9      	bne.n	8006ac6 <strcpy+0x2>
 8006ad2:	4770      	bx	lr

08006ad4 <std>:
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
 8006ada:	e9c0 3300 	strd	r3, r3, [r0]
 8006ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ae2:	6083      	str	r3, [r0, #8]
 8006ae4:	8181      	strh	r1, [r0, #12]
 8006ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae8:	81c2      	strh	r2, [r0, #14]
 8006aea:	6183      	str	r3, [r0, #24]
 8006aec:	4619      	mov	r1, r3
 8006aee:	2208      	movs	r2, #8
 8006af0:	305c      	adds	r0, #92	; 0x5c
 8006af2:	f7ff ff0d 	bl	8006910 <memset>
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x38>)
 8006af8:	6263      	str	r3, [r4, #36]	; 0x24
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x3c>)
 8006afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x40>)
 8006b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <std+0x44>)
 8006b04:	6224      	str	r4, [r4, #32]
 8006b06:	6323      	str	r3, [r4, #48]	; 0x30
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	080072b9 	.word	0x080072b9
 8006b10:	080072db 	.word	0x080072db
 8006b14:	08007313 	.word	0x08007313
 8006b18:	08007337 	.word	0x08007337

08006b1c <_cleanup_r>:
 8006b1c:	4901      	ldr	r1, [pc, #4]	; (8006b24 <_cleanup_r+0x8>)
 8006b1e:	f000 b8af 	b.w	8006c80 <_fwalk_reent>
 8006b22:	bf00      	nop
 8006b24:	08007611 	.word	0x08007611

08006b28 <__sfmoreglue>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	1e4a      	subs	r2, r1, #1
 8006b2c:	2568      	movs	r5, #104	; 0x68
 8006b2e:	4355      	muls	r5, r2
 8006b30:	460e      	mov	r6, r1
 8006b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b36:	f7ff ff43 	bl	80069c0 <_malloc_r>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b140      	cbz	r0, 8006b50 <__sfmoreglue+0x28>
 8006b3e:	2100      	movs	r1, #0
 8006b40:	e9c0 1600 	strd	r1, r6, [r0]
 8006b44:	300c      	adds	r0, #12
 8006b46:	60a0      	str	r0, [r4, #8]
 8006b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b4c:	f7ff fee0 	bl	8006910 <memset>
 8006b50:	4620      	mov	r0, r4
 8006b52:	bd70      	pop	{r4, r5, r6, pc}

08006b54 <__sfp_lock_acquire>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__sfp_lock_acquire+0x8>)
 8006b56:	f000 b8b3 	b.w	8006cc0 <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20004344 	.word	0x20004344

08006b60 <__sfp_lock_release>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__sfp_lock_release+0x8>)
 8006b62:	f000 b8ae 	b.w	8006cc2 <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	20004344 	.word	0x20004344

08006b6c <__sinit_lock_acquire>:
 8006b6c:	4801      	ldr	r0, [pc, #4]	; (8006b74 <__sinit_lock_acquire+0x8>)
 8006b6e:	f000 b8a7 	b.w	8006cc0 <__retarget_lock_acquire_recursive>
 8006b72:	bf00      	nop
 8006b74:	2000433f 	.word	0x2000433f

08006b78 <__sinit_lock_release>:
 8006b78:	4801      	ldr	r0, [pc, #4]	; (8006b80 <__sinit_lock_release+0x8>)
 8006b7a:	f000 b8a2 	b.w	8006cc2 <__retarget_lock_release_recursive>
 8006b7e:	bf00      	nop
 8006b80:	2000433f 	.word	0x2000433f

08006b84 <__sinit>:
 8006b84:	b510      	push	{r4, lr}
 8006b86:	4604      	mov	r4, r0
 8006b88:	f7ff fff0 	bl	8006b6c <__sinit_lock_acquire>
 8006b8c:	69a3      	ldr	r3, [r4, #24]
 8006b8e:	b11b      	cbz	r3, 8006b98 <__sinit+0x14>
 8006b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b94:	f7ff bff0 	b.w	8006b78 <__sinit_lock_release>
 8006b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <__sinit+0x68>)
 8006ba0:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <__sinit+0x6c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	bf04      	itt	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	61a3      	streq	r3, [r4, #24]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f820 	bl	8006bf4 <__sfp>
 8006bb4:	6060      	str	r0, [r4, #4]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f81c 	bl	8006bf4 <__sfp>
 8006bbc:	60a0      	str	r0, [r4, #8]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 f818 	bl	8006bf4 <__sfp>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	60e0      	str	r0, [r4, #12]
 8006bc8:	2104      	movs	r1, #4
 8006bca:	6860      	ldr	r0, [r4, #4]
 8006bcc:	f7ff ff82 	bl	8006ad4 <std>
 8006bd0:	68a0      	ldr	r0, [r4, #8]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	2109      	movs	r1, #9
 8006bd6:	f7ff ff7d 	bl	8006ad4 <std>
 8006bda:	68e0      	ldr	r0, [r4, #12]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	2112      	movs	r1, #18
 8006be0:	f7ff ff78 	bl	8006ad4 <std>
 8006be4:	2301      	movs	r3, #1
 8006be6:	61a3      	str	r3, [r4, #24]
 8006be8:	e7d2      	b.n	8006b90 <__sinit+0xc>
 8006bea:	bf00      	nop
 8006bec:	08007954 	.word	0x08007954
 8006bf0:	08006b1d 	.word	0x08006b1d

08006bf4 <__sfp>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	f7ff ffac 	bl	8006b54 <__sfp_lock_acquire>
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <__sfp+0x84>)
 8006bfe:	681e      	ldr	r6, [r3, #0]
 8006c00:	69b3      	ldr	r3, [r6, #24]
 8006c02:	b913      	cbnz	r3, 8006c0a <__sfp+0x16>
 8006c04:	4630      	mov	r0, r6
 8006c06:	f7ff ffbd 	bl	8006b84 <__sinit>
 8006c0a:	3648      	adds	r6, #72	; 0x48
 8006c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	d503      	bpl.n	8006c1c <__sfp+0x28>
 8006c14:	6833      	ldr	r3, [r6, #0]
 8006c16:	b30b      	cbz	r3, 8006c5c <__sfp+0x68>
 8006c18:	6836      	ldr	r6, [r6, #0]
 8006c1a:	e7f7      	b.n	8006c0c <__sfp+0x18>
 8006c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c20:	b9d5      	cbnz	r5, 8006c58 <__sfp+0x64>
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <__sfp+0x88>)
 8006c24:	60e3      	str	r3, [r4, #12]
 8006c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c2c:	f000 f847 	bl	8006cbe <__retarget_lock_init_recursive>
 8006c30:	f7ff ff96 	bl	8006b60 <__sfp_lock_release>
 8006c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c3c:	6025      	str	r5, [r4, #0]
 8006c3e:	61a5      	str	r5, [r4, #24]
 8006c40:	2208      	movs	r2, #8
 8006c42:	4629      	mov	r1, r5
 8006c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c48:	f7ff fe62 	bl	8006910 <memset>
 8006c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c54:	4620      	mov	r0, r4
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c58:	3468      	adds	r4, #104	; 0x68
 8006c5a:	e7d9      	b.n	8006c10 <__sfp+0x1c>
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f7ff ff62 	bl	8006b28 <__sfmoreglue>
 8006c64:	4604      	mov	r4, r0
 8006c66:	6030      	str	r0, [r6, #0]
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d1d5      	bne.n	8006c18 <__sfp+0x24>
 8006c6c:	f7ff ff78 	bl	8006b60 <__sfp_lock_release>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	e7ee      	b.n	8006c54 <__sfp+0x60>
 8006c76:	bf00      	nop
 8006c78:	08007954 	.word	0x08007954
 8006c7c:	ffff0001 	.word	0xffff0001

08006c80 <_fwalk_reent>:
 8006c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c84:	4606      	mov	r6, r0
 8006c86:	4688      	mov	r8, r1
 8006c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c8c:	2700      	movs	r7, #0
 8006c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c92:	f1b9 0901 	subs.w	r9, r9, #1
 8006c96:	d505      	bpl.n	8006ca4 <_fwalk_reent+0x24>
 8006c98:	6824      	ldr	r4, [r4, #0]
 8006c9a:	2c00      	cmp	r4, #0
 8006c9c:	d1f7      	bne.n	8006c8e <_fwalk_reent+0xe>
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca4:	89ab      	ldrh	r3, [r5, #12]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d907      	bls.n	8006cba <_fwalk_reent+0x3a>
 8006caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	d003      	beq.n	8006cba <_fwalk_reent+0x3a>
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	47c0      	blx	r8
 8006cb8:	4307      	orrs	r7, r0
 8006cba:	3568      	adds	r5, #104	; 0x68
 8006cbc:	e7e9      	b.n	8006c92 <_fwalk_reent+0x12>

08006cbe <__retarget_lock_init_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__retarget_lock_acquire_recursive>:
 8006cc0:	4770      	bx	lr

08006cc2 <__retarget_lock_release_recursive>:
 8006cc2:	4770      	bx	lr

08006cc4 <__malloc_lock>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	; (8006ccc <__malloc_lock+0x8>)
 8006cc6:	f7ff bffb 	b.w	8006cc0 <__retarget_lock_acquire_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20004340 	.word	0x20004340

08006cd0 <__malloc_unlock>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	; (8006cd8 <__malloc_unlock+0x8>)
 8006cd2:	f7ff bff6 	b.w	8006cc2 <__retarget_lock_release_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	20004340 	.word	0x20004340

08006cdc <__sfputc_r>:
 8006cdc:	6893      	ldr	r3, [r2, #8]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	b410      	push	{r4}
 8006ce4:	6093      	str	r3, [r2, #8]
 8006ce6:	da08      	bge.n	8006cfa <__sfputc_r+0x1e>
 8006ce8:	6994      	ldr	r4, [r2, #24]
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	db01      	blt.n	8006cf2 <__sfputc_r+0x16>
 8006cee:	290a      	cmp	r1, #10
 8006cf0:	d103      	bne.n	8006cfa <__sfputc_r+0x1e>
 8006cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf6:	f000 bb23 	b.w	8007340 <__swbuf_r>
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	1c58      	adds	r0, r3, #1
 8006cfe:	6010      	str	r0, [r2, #0]
 8006d00:	7019      	strb	r1, [r3, #0]
 8006d02:	4608      	mov	r0, r1
 8006d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <__sfputs_r>:
 8006d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	460f      	mov	r7, r1
 8006d10:	4614      	mov	r4, r2
 8006d12:	18d5      	adds	r5, r2, r3
 8006d14:	42ac      	cmp	r4, r5
 8006d16:	d101      	bne.n	8006d1c <__sfputs_r+0x12>
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e007      	b.n	8006d2c <__sfputs_r+0x22>
 8006d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d20:	463a      	mov	r2, r7
 8006d22:	4630      	mov	r0, r6
 8006d24:	f7ff ffda 	bl	8006cdc <__sfputc_r>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d1f3      	bne.n	8006d14 <__sfputs_r+0xa>
 8006d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d30 <_vfiprintf_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	460d      	mov	r5, r1
 8006d36:	b09d      	sub	sp, #116	; 0x74
 8006d38:	4614      	mov	r4, r2
 8006d3a:	4698      	mov	r8, r3
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	b118      	cbz	r0, 8006d48 <_vfiprintf_r+0x18>
 8006d40:	6983      	ldr	r3, [r0, #24]
 8006d42:	b90b      	cbnz	r3, 8006d48 <_vfiprintf_r+0x18>
 8006d44:	f7ff ff1e 	bl	8006b84 <__sinit>
 8006d48:	4b89      	ldr	r3, [pc, #548]	; (8006f70 <_vfiprintf_r+0x240>)
 8006d4a:	429d      	cmp	r5, r3
 8006d4c:	d11b      	bne.n	8006d86 <_vfiprintf_r+0x56>
 8006d4e:	6875      	ldr	r5, [r6, #4]
 8006d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d52:	07d9      	lsls	r1, r3, #31
 8006d54:	d405      	bmi.n	8006d62 <_vfiprintf_r+0x32>
 8006d56:	89ab      	ldrh	r3, [r5, #12]
 8006d58:	059a      	lsls	r2, r3, #22
 8006d5a:	d402      	bmi.n	8006d62 <_vfiprintf_r+0x32>
 8006d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d5e:	f7ff ffaf 	bl	8006cc0 <__retarget_lock_acquire_recursive>
 8006d62:	89ab      	ldrh	r3, [r5, #12]
 8006d64:	071b      	lsls	r3, r3, #28
 8006d66:	d501      	bpl.n	8006d6c <_vfiprintf_r+0x3c>
 8006d68:	692b      	ldr	r3, [r5, #16]
 8006d6a:	b9eb      	cbnz	r3, 8006da8 <_vfiprintf_r+0x78>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f000 fb4a 	bl	8007408 <__swsetup_r>
 8006d74:	b1c0      	cbz	r0, 8006da8 <_vfiprintf_r+0x78>
 8006d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d78:	07dc      	lsls	r4, r3, #31
 8006d7a:	d50e      	bpl.n	8006d9a <_vfiprintf_r+0x6a>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	b01d      	add	sp, #116	; 0x74
 8006d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d86:	4b7b      	ldr	r3, [pc, #492]	; (8006f74 <_vfiprintf_r+0x244>)
 8006d88:	429d      	cmp	r5, r3
 8006d8a:	d101      	bne.n	8006d90 <_vfiprintf_r+0x60>
 8006d8c:	68b5      	ldr	r5, [r6, #8]
 8006d8e:	e7df      	b.n	8006d50 <_vfiprintf_r+0x20>
 8006d90:	4b79      	ldr	r3, [pc, #484]	; (8006f78 <_vfiprintf_r+0x248>)
 8006d92:	429d      	cmp	r5, r3
 8006d94:	bf08      	it	eq
 8006d96:	68f5      	ldreq	r5, [r6, #12]
 8006d98:	e7da      	b.n	8006d50 <_vfiprintf_r+0x20>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	0598      	lsls	r0, r3, #22
 8006d9e:	d4ed      	bmi.n	8006d7c <_vfiprintf_r+0x4c>
 8006da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006da2:	f7ff ff8e 	bl	8006cc2 <__retarget_lock_release_recursive>
 8006da6:	e7e9      	b.n	8006d7c <_vfiprintf_r+0x4c>
 8006da8:	2300      	movs	r3, #0
 8006daa:	9309      	str	r3, [sp, #36]	; 0x24
 8006dac:	2320      	movs	r3, #32
 8006dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db6:	2330      	movs	r3, #48	; 0x30
 8006db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f7c <_vfiprintf_r+0x24c>
 8006dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc0:	f04f 0901 	mov.w	r9, #1
 8006dc4:	4623      	mov	r3, r4
 8006dc6:	469a      	mov	sl, r3
 8006dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dcc:	b10a      	cbz	r2, 8006dd2 <_vfiprintf_r+0xa2>
 8006dce:	2a25      	cmp	r2, #37	; 0x25
 8006dd0:	d1f9      	bne.n	8006dc6 <_vfiprintf_r+0x96>
 8006dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd6:	d00b      	beq.n	8006df0 <_vfiprintf_r+0xc0>
 8006dd8:	465b      	mov	r3, fp
 8006dda:	4622      	mov	r2, r4
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7ff ff93 	bl	8006d0a <__sfputs_r>
 8006de4:	3001      	adds	r0, #1
 8006de6:	f000 80aa 	beq.w	8006f3e <_vfiprintf_r+0x20e>
 8006dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dec:	445a      	add	r2, fp
 8006dee:	9209      	str	r2, [sp, #36]	; 0x24
 8006df0:	f89a 3000 	ldrb.w	r3, [sl]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80a2 	beq.w	8006f3e <_vfiprintf_r+0x20e>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e04:	f10a 0a01 	add.w	sl, sl, #1
 8006e08:	9304      	str	r3, [sp, #16]
 8006e0a:	9307      	str	r3, [sp, #28]
 8006e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e10:	931a      	str	r3, [sp, #104]	; 0x68
 8006e12:	4654      	mov	r4, sl
 8006e14:	2205      	movs	r2, #5
 8006e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1a:	4858      	ldr	r0, [pc, #352]	; (8006f7c <_vfiprintf_r+0x24c>)
 8006e1c:	f7f9 f9f0 	bl	8000200 <memchr>
 8006e20:	9a04      	ldr	r2, [sp, #16]
 8006e22:	b9d8      	cbnz	r0, 8006e5c <_vfiprintf_r+0x12c>
 8006e24:	06d1      	lsls	r1, r2, #27
 8006e26:	bf44      	itt	mi
 8006e28:	2320      	movmi	r3, #32
 8006e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e2e:	0713      	lsls	r3, r2, #28
 8006e30:	bf44      	itt	mi
 8006e32:	232b      	movmi	r3, #43	; 0x2b
 8006e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e38:	f89a 3000 	ldrb.w	r3, [sl]
 8006e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e3e:	d015      	beq.n	8006e6c <_vfiprintf_r+0x13c>
 8006e40:	9a07      	ldr	r2, [sp, #28]
 8006e42:	4654      	mov	r4, sl
 8006e44:	2000      	movs	r0, #0
 8006e46:	f04f 0c0a 	mov.w	ip, #10
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e50:	3b30      	subs	r3, #48	; 0x30
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d94e      	bls.n	8006ef4 <_vfiprintf_r+0x1c4>
 8006e56:	b1b0      	cbz	r0, 8006e86 <_vfiprintf_r+0x156>
 8006e58:	9207      	str	r2, [sp, #28]
 8006e5a:	e014      	b.n	8006e86 <_vfiprintf_r+0x156>
 8006e5c:	eba0 0308 	sub.w	r3, r0, r8
 8006e60:	fa09 f303 	lsl.w	r3, r9, r3
 8006e64:	4313      	orrs	r3, r2
 8006e66:	9304      	str	r3, [sp, #16]
 8006e68:	46a2      	mov	sl, r4
 8006e6a:	e7d2      	b.n	8006e12 <_vfiprintf_r+0xe2>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	1d19      	adds	r1, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	9103      	str	r1, [sp, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bfbb      	ittet	lt
 8006e78:	425b      	neglt	r3, r3
 8006e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e7e:	9307      	strge	r3, [sp, #28]
 8006e80:	9307      	strlt	r3, [sp, #28]
 8006e82:	bfb8      	it	lt
 8006e84:	9204      	strlt	r2, [sp, #16]
 8006e86:	7823      	ldrb	r3, [r4, #0]
 8006e88:	2b2e      	cmp	r3, #46	; 0x2e
 8006e8a:	d10c      	bne.n	8006ea6 <_vfiprintf_r+0x176>
 8006e8c:	7863      	ldrb	r3, [r4, #1]
 8006e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e90:	d135      	bne.n	8006efe <_vfiprintf_r+0x1ce>
 8006e92:	9b03      	ldr	r3, [sp, #12]
 8006e94:	1d1a      	adds	r2, r3, #4
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	9203      	str	r2, [sp, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	bfb8      	it	lt
 8006e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ea2:	3402      	adds	r4, #2
 8006ea4:	9305      	str	r3, [sp, #20]
 8006ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f8c <_vfiprintf_r+0x25c>
 8006eaa:	7821      	ldrb	r1, [r4, #0]
 8006eac:	2203      	movs	r2, #3
 8006eae:	4650      	mov	r0, sl
 8006eb0:	f7f9 f9a6 	bl	8000200 <memchr>
 8006eb4:	b140      	cbz	r0, 8006ec8 <_vfiprintf_r+0x198>
 8006eb6:	2340      	movs	r3, #64	; 0x40
 8006eb8:	eba0 000a 	sub.w	r0, r0, sl
 8006ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	4303      	orrs	r3, r0
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ecc:	482c      	ldr	r0, [pc, #176]	; (8006f80 <_vfiprintf_r+0x250>)
 8006ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ed2:	2206      	movs	r2, #6
 8006ed4:	f7f9 f994 	bl	8000200 <memchr>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d03f      	beq.n	8006f5c <_vfiprintf_r+0x22c>
 8006edc:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <_vfiprintf_r+0x254>)
 8006ede:	bb1b      	cbnz	r3, 8006f28 <_vfiprintf_r+0x1f8>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	3307      	adds	r3, #7
 8006ee4:	f023 0307 	bic.w	r3, r3, #7
 8006ee8:	3308      	adds	r3, #8
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eee:	443b      	add	r3, r7
 8006ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef2:	e767      	b.n	8006dc4 <_vfiprintf_r+0x94>
 8006ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2001      	movs	r0, #1
 8006efc:	e7a5      	b.n	8006e4a <_vfiprintf_r+0x11a>
 8006efe:	2300      	movs	r3, #0
 8006f00:	3401      	adds	r4, #1
 8006f02:	9305      	str	r3, [sp, #20]
 8006f04:	4619      	mov	r1, r3
 8006f06:	f04f 0c0a 	mov.w	ip, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f10:	3a30      	subs	r2, #48	; 0x30
 8006f12:	2a09      	cmp	r2, #9
 8006f14:	d903      	bls.n	8006f1e <_vfiprintf_r+0x1ee>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0c5      	beq.n	8006ea6 <_vfiprintf_r+0x176>
 8006f1a:	9105      	str	r1, [sp, #20]
 8006f1c:	e7c3      	b.n	8006ea6 <_vfiprintf_r+0x176>
 8006f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f22:	4604      	mov	r4, r0
 8006f24:	2301      	movs	r3, #1
 8006f26:	e7f0      	b.n	8006f0a <_vfiprintf_r+0x1da>
 8006f28:	ab03      	add	r3, sp, #12
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <_vfiprintf_r+0x258>)
 8006f30:	a904      	add	r1, sp, #16
 8006f32:	4630      	mov	r0, r6
 8006f34:	f3af 8000 	nop.w
 8006f38:	4607      	mov	r7, r0
 8006f3a:	1c78      	adds	r0, r7, #1
 8006f3c:	d1d6      	bne.n	8006eec <_vfiprintf_r+0x1bc>
 8006f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f40:	07d9      	lsls	r1, r3, #31
 8006f42:	d405      	bmi.n	8006f50 <_vfiprintf_r+0x220>
 8006f44:	89ab      	ldrh	r3, [r5, #12]
 8006f46:	059a      	lsls	r2, r3, #22
 8006f48:	d402      	bmi.n	8006f50 <_vfiprintf_r+0x220>
 8006f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f4c:	f7ff feb9 	bl	8006cc2 <__retarget_lock_release_recursive>
 8006f50:	89ab      	ldrh	r3, [r5, #12]
 8006f52:	065b      	lsls	r3, r3, #25
 8006f54:	f53f af12 	bmi.w	8006d7c <_vfiprintf_r+0x4c>
 8006f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f5a:	e711      	b.n	8006d80 <_vfiprintf_r+0x50>
 8006f5c:	ab03      	add	r3, sp, #12
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	462a      	mov	r2, r5
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <_vfiprintf_r+0x258>)
 8006f64:	a904      	add	r1, sp, #16
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 f880 	bl	800706c <_printf_i>
 8006f6c:	e7e4      	b.n	8006f38 <_vfiprintf_r+0x208>
 8006f6e:	bf00      	nop
 8006f70:	08007978 	.word	0x08007978
 8006f74:	08007998 	.word	0x08007998
 8006f78:	08007958 	.word	0x08007958
 8006f7c:	080079b8 	.word	0x080079b8
 8006f80:	080079c2 	.word	0x080079c2
 8006f84:	00000000 	.word	0x00000000
 8006f88:	08006d0b 	.word	0x08006d0b
 8006f8c:	080079be 	.word	0x080079be

08006f90 <_printf_common>:
 8006f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f94:	4616      	mov	r6, r2
 8006f96:	4699      	mov	r9, r3
 8006f98:	688a      	ldr	r2, [r1, #8]
 8006f9a:	690b      	ldr	r3, [r1, #16]
 8006f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	bfb8      	it	lt
 8006fa4:	4613      	movlt	r3, r2
 8006fa6:	6033      	str	r3, [r6, #0]
 8006fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fac:	4607      	mov	r7, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b10a      	cbz	r2, 8006fb6 <_printf_common+0x26>
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	6033      	str	r3, [r6, #0]
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	0699      	lsls	r1, r3, #26
 8006fba:	bf42      	ittt	mi
 8006fbc:	6833      	ldrmi	r3, [r6, #0]
 8006fbe:	3302      	addmi	r3, #2
 8006fc0:	6033      	strmi	r3, [r6, #0]
 8006fc2:	6825      	ldr	r5, [r4, #0]
 8006fc4:	f015 0506 	ands.w	r5, r5, #6
 8006fc8:	d106      	bne.n	8006fd8 <_printf_common+0x48>
 8006fca:	f104 0a19 	add.w	sl, r4, #25
 8006fce:	68e3      	ldr	r3, [r4, #12]
 8006fd0:	6832      	ldr	r2, [r6, #0]
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	dc26      	bgt.n	8007026 <_printf_common+0x96>
 8006fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fdc:	1e13      	subs	r3, r2, #0
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	bf18      	it	ne
 8006fe2:	2301      	movne	r3, #1
 8006fe4:	0692      	lsls	r2, r2, #26
 8006fe6:	d42b      	bmi.n	8007040 <_printf_common+0xb0>
 8006fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fec:	4649      	mov	r1, r9
 8006fee:	4638      	mov	r0, r7
 8006ff0:	47c0      	blx	r8
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d01e      	beq.n	8007034 <_printf_common+0xa4>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	68e5      	ldr	r5, [r4, #12]
 8006ffa:	6832      	ldr	r2, [r6, #0]
 8006ffc:	f003 0306 	and.w	r3, r3, #6
 8007000:	2b04      	cmp	r3, #4
 8007002:	bf08      	it	eq
 8007004:	1aad      	subeq	r5, r5, r2
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	6922      	ldr	r2, [r4, #16]
 800700a:	bf0c      	ite	eq
 800700c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007010:	2500      	movne	r5, #0
 8007012:	4293      	cmp	r3, r2
 8007014:	bfc4      	itt	gt
 8007016:	1a9b      	subgt	r3, r3, r2
 8007018:	18ed      	addgt	r5, r5, r3
 800701a:	2600      	movs	r6, #0
 800701c:	341a      	adds	r4, #26
 800701e:	42b5      	cmp	r5, r6
 8007020:	d11a      	bne.n	8007058 <_printf_common+0xc8>
 8007022:	2000      	movs	r0, #0
 8007024:	e008      	b.n	8007038 <_printf_common+0xa8>
 8007026:	2301      	movs	r3, #1
 8007028:	4652      	mov	r2, sl
 800702a:	4649      	mov	r1, r9
 800702c:	4638      	mov	r0, r7
 800702e:	47c0      	blx	r8
 8007030:	3001      	adds	r0, #1
 8007032:	d103      	bne.n	800703c <_printf_common+0xac>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703c:	3501      	adds	r5, #1
 800703e:	e7c6      	b.n	8006fce <_printf_common+0x3e>
 8007040:	18e1      	adds	r1, r4, r3
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	2030      	movs	r0, #48	; 0x30
 8007046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800704a:	4422      	add	r2, r4
 800704c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007054:	3302      	adds	r3, #2
 8007056:	e7c7      	b.n	8006fe8 <_printf_common+0x58>
 8007058:	2301      	movs	r3, #1
 800705a:	4622      	mov	r2, r4
 800705c:	4649      	mov	r1, r9
 800705e:	4638      	mov	r0, r7
 8007060:	47c0      	blx	r8
 8007062:	3001      	adds	r0, #1
 8007064:	d0e6      	beq.n	8007034 <_printf_common+0xa4>
 8007066:	3601      	adds	r6, #1
 8007068:	e7d9      	b.n	800701e <_printf_common+0x8e>
	...

0800706c <_printf_i>:
 800706c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	460c      	mov	r4, r1
 8007072:	4691      	mov	r9, r2
 8007074:	7e27      	ldrb	r7, [r4, #24]
 8007076:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007078:	2f78      	cmp	r7, #120	; 0x78
 800707a:	4680      	mov	r8, r0
 800707c:	469a      	mov	sl, r3
 800707e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007082:	d807      	bhi.n	8007094 <_printf_i+0x28>
 8007084:	2f62      	cmp	r7, #98	; 0x62
 8007086:	d80a      	bhi.n	800709e <_printf_i+0x32>
 8007088:	2f00      	cmp	r7, #0
 800708a:	f000 80d8 	beq.w	800723e <_printf_i+0x1d2>
 800708e:	2f58      	cmp	r7, #88	; 0x58
 8007090:	f000 80a3 	beq.w	80071da <_printf_i+0x16e>
 8007094:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800709c:	e03a      	b.n	8007114 <_printf_i+0xa8>
 800709e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070a2:	2b15      	cmp	r3, #21
 80070a4:	d8f6      	bhi.n	8007094 <_printf_i+0x28>
 80070a6:	a001      	add	r0, pc, #4	; (adr r0, 80070ac <_printf_i+0x40>)
 80070a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070ac:	08007105 	.word	0x08007105
 80070b0:	08007119 	.word	0x08007119
 80070b4:	08007095 	.word	0x08007095
 80070b8:	08007095 	.word	0x08007095
 80070bc:	08007095 	.word	0x08007095
 80070c0:	08007095 	.word	0x08007095
 80070c4:	08007119 	.word	0x08007119
 80070c8:	08007095 	.word	0x08007095
 80070cc:	08007095 	.word	0x08007095
 80070d0:	08007095 	.word	0x08007095
 80070d4:	08007095 	.word	0x08007095
 80070d8:	08007225 	.word	0x08007225
 80070dc:	08007149 	.word	0x08007149
 80070e0:	08007207 	.word	0x08007207
 80070e4:	08007095 	.word	0x08007095
 80070e8:	08007095 	.word	0x08007095
 80070ec:	08007247 	.word	0x08007247
 80070f0:	08007095 	.word	0x08007095
 80070f4:	08007149 	.word	0x08007149
 80070f8:	08007095 	.word	0x08007095
 80070fc:	08007095 	.word	0x08007095
 8007100:	0800720f 	.word	0x0800720f
 8007104:	680b      	ldr	r3, [r1, #0]
 8007106:	1d1a      	adds	r2, r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	600a      	str	r2, [r1, #0]
 800710c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007114:	2301      	movs	r3, #1
 8007116:	e0a3      	b.n	8007260 <_printf_i+0x1f4>
 8007118:	6825      	ldr	r5, [r4, #0]
 800711a:	6808      	ldr	r0, [r1, #0]
 800711c:	062e      	lsls	r6, r5, #24
 800711e:	f100 0304 	add.w	r3, r0, #4
 8007122:	d50a      	bpl.n	800713a <_printf_i+0xce>
 8007124:	6805      	ldr	r5, [r0, #0]
 8007126:	600b      	str	r3, [r1, #0]
 8007128:	2d00      	cmp	r5, #0
 800712a:	da03      	bge.n	8007134 <_printf_i+0xc8>
 800712c:	232d      	movs	r3, #45	; 0x2d
 800712e:	426d      	negs	r5, r5
 8007130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007134:	485e      	ldr	r0, [pc, #376]	; (80072b0 <_printf_i+0x244>)
 8007136:	230a      	movs	r3, #10
 8007138:	e019      	b.n	800716e <_printf_i+0x102>
 800713a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800713e:	6805      	ldr	r5, [r0, #0]
 8007140:	600b      	str	r3, [r1, #0]
 8007142:	bf18      	it	ne
 8007144:	b22d      	sxthne	r5, r5
 8007146:	e7ef      	b.n	8007128 <_printf_i+0xbc>
 8007148:	680b      	ldr	r3, [r1, #0]
 800714a:	6825      	ldr	r5, [r4, #0]
 800714c:	1d18      	adds	r0, r3, #4
 800714e:	6008      	str	r0, [r1, #0]
 8007150:	0628      	lsls	r0, r5, #24
 8007152:	d501      	bpl.n	8007158 <_printf_i+0xec>
 8007154:	681d      	ldr	r5, [r3, #0]
 8007156:	e002      	b.n	800715e <_printf_i+0xf2>
 8007158:	0669      	lsls	r1, r5, #25
 800715a:	d5fb      	bpl.n	8007154 <_printf_i+0xe8>
 800715c:	881d      	ldrh	r5, [r3, #0]
 800715e:	4854      	ldr	r0, [pc, #336]	; (80072b0 <_printf_i+0x244>)
 8007160:	2f6f      	cmp	r7, #111	; 0x6f
 8007162:	bf0c      	ite	eq
 8007164:	2308      	moveq	r3, #8
 8007166:	230a      	movne	r3, #10
 8007168:	2100      	movs	r1, #0
 800716a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800716e:	6866      	ldr	r6, [r4, #4]
 8007170:	60a6      	str	r6, [r4, #8]
 8007172:	2e00      	cmp	r6, #0
 8007174:	bfa2      	ittt	ge
 8007176:	6821      	ldrge	r1, [r4, #0]
 8007178:	f021 0104 	bicge.w	r1, r1, #4
 800717c:	6021      	strge	r1, [r4, #0]
 800717e:	b90d      	cbnz	r5, 8007184 <_printf_i+0x118>
 8007180:	2e00      	cmp	r6, #0
 8007182:	d04d      	beq.n	8007220 <_printf_i+0x1b4>
 8007184:	4616      	mov	r6, r2
 8007186:	fbb5 f1f3 	udiv	r1, r5, r3
 800718a:	fb03 5711 	mls	r7, r3, r1, r5
 800718e:	5dc7      	ldrb	r7, [r0, r7]
 8007190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007194:	462f      	mov	r7, r5
 8007196:	42bb      	cmp	r3, r7
 8007198:	460d      	mov	r5, r1
 800719a:	d9f4      	bls.n	8007186 <_printf_i+0x11a>
 800719c:	2b08      	cmp	r3, #8
 800719e:	d10b      	bne.n	80071b8 <_printf_i+0x14c>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	07df      	lsls	r7, r3, #31
 80071a4:	d508      	bpl.n	80071b8 <_printf_i+0x14c>
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	6861      	ldr	r1, [r4, #4]
 80071aa:	4299      	cmp	r1, r3
 80071ac:	bfde      	ittt	le
 80071ae:	2330      	movle	r3, #48	; 0x30
 80071b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071b8:	1b92      	subs	r2, r2, r6
 80071ba:	6122      	str	r2, [r4, #16]
 80071bc:	f8cd a000 	str.w	sl, [sp]
 80071c0:	464b      	mov	r3, r9
 80071c2:	aa03      	add	r2, sp, #12
 80071c4:	4621      	mov	r1, r4
 80071c6:	4640      	mov	r0, r8
 80071c8:	f7ff fee2 	bl	8006f90 <_printf_common>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d14c      	bne.n	800726a <_printf_i+0x1fe>
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	b004      	add	sp, #16
 80071d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071da:	4835      	ldr	r0, [pc, #212]	; (80072b0 <_printf_i+0x244>)
 80071dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	680e      	ldr	r6, [r1, #0]
 80071e4:	061f      	lsls	r7, r3, #24
 80071e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80071ea:	600e      	str	r6, [r1, #0]
 80071ec:	d514      	bpl.n	8007218 <_printf_i+0x1ac>
 80071ee:	07d9      	lsls	r1, r3, #31
 80071f0:	bf44      	itt	mi
 80071f2:	f043 0320 	orrmi.w	r3, r3, #32
 80071f6:	6023      	strmi	r3, [r4, #0]
 80071f8:	b91d      	cbnz	r5, 8007202 <_printf_i+0x196>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	f023 0320 	bic.w	r3, r3, #32
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	2310      	movs	r3, #16
 8007204:	e7b0      	b.n	8007168 <_printf_i+0xfc>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	f043 0320 	orr.w	r3, r3, #32
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	2378      	movs	r3, #120	; 0x78
 8007210:	4828      	ldr	r0, [pc, #160]	; (80072b4 <_printf_i+0x248>)
 8007212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007216:	e7e3      	b.n	80071e0 <_printf_i+0x174>
 8007218:	065e      	lsls	r6, r3, #25
 800721a:	bf48      	it	mi
 800721c:	b2ad      	uxthmi	r5, r5
 800721e:	e7e6      	b.n	80071ee <_printf_i+0x182>
 8007220:	4616      	mov	r6, r2
 8007222:	e7bb      	b.n	800719c <_printf_i+0x130>
 8007224:	680b      	ldr	r3, [r1, #0]
 8007226:	6826      	ldr	r6, [r4, #0]
 8007228:	6960      	ldr	r0, [r4, #20]
 800722a:	1d1d      	adds	r5, r3, #4
 800722c:	600d      	str	r5, [r1, #0]
 800722e:	0635      	lsls	r5, r6, #24
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	d501      	bpl.n	8007238 <_printf_i+0x1cc>
 8007234:	6018      	str	r0, [r3, #0]
 8007236:	e002      	b.n	800723e <_printf_i+0x1d2>
 8007238:	0671      	lsls	r1, r6, #25
 800723a:	d5fb      	bpl.n	8007234 <_printf_i+0x1c8>
 800723c:	8018      	strh	r0, [r3, #0]
 800723e:	2300      	movs	r3, #0
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	4616      	mov	r6, r2
 8007244:	e7ba      	b.n	80071bc <_printf_i+0x150>
 8007246:	680b      	ldr	r3, [r1, #0]
 8007248:	1d1a      	adds	r2, r3, #4
 800724a:	600a      	str	r2, [r1, #0]
 800724c:	681e      	ldr	r6, [r3, #0]
 800724e:	6862      	ldr	r2, [r4, #4]
 8007250:	2100      	movs	r1, #0
 8007252:	4630      	mov	r0, r6
 8007254:	f7f8 ffd4 	bl	8000200 <memchr>
 8007258:	b108      	cbz	r0, 800725e <_printf_i+0x1f2>
 800725a:	1b80      	subs	r0, r0, r6
 800725c:	6060      	str	r0, [r4, #4]
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	2300      	movs	r3, #0
 8007264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007268:	e7a8      	b.n	80071bc <_printf_i+0x150>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	4632      	mov	r2, r6
 800726e:	4649      	mov	r1, r9
 8007270:	4640      	mov	r0, r8
 8007272:	47d0      	blx	sl
 8007274:	3001      	adds	r0, #1
 8007276:	d0ab      	beq.n	80071d0 <_printf_i+0x164>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	079b      	lsls	r3, r3, #30
 800727c:	d413      	bmi.n	80072a6 <_printf_i+0x23a>
 800727e:	68e0      	ldr	r0, [r4, #12]
 8007280:	9b03      	ldr	r3, [sp, #12]
 8007282:	4298      	cmp	r0, r3
 8007284:	bfb8      	it	lt
 8007286:	4618      	movlt	r0, r3
 8007288:	e7a4      	b.n	80071d4 <_printf_i+0x168>
 800728a:	2301      	movs	r3, #1
 800728c:	4632      	mov	r2, r6
 800728e:	4649      	mov	r1, r9
 8007290:	4640      	mov	r0, r8
 8007292:	47d0      	blx	sl
 8007294:	3001      	adds	r0, #1
 8007296:	d09b      	beq.n	80071d0 <_printf_i+0x164>
 8007298:	3501      	adds	r5, #1
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	9903      	ldr	r1, [sp, #12]
 800729e:	1a5b      	subs	r3, r3, r1
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dcf2      	bgt.n	800728a <_printf_i+0x21e>
 80072a4:	e7eb      	b.n	800727e <_printf_i+0x212>
 80072a6:	2500      	movs	r5, #0
 80072a8:	f104 0619 	add.w	r6, r4, #25
 80072ac:	e7f5      	b.n	800729a <_printf_i+0x22e>
 80072ae:	bf00      	nop
 80072b0:	080079c9 	.word	0x080079c9
 80072b4:	080079da 	.word	0x080079da

080072b8 <__sread>:
 80072b8:	b510      	push	{r4, lr}
 80072ba:	460c      	mov	r4, r1
 80072bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c0:	f000 fa58 	bl	8007774 <_read_r>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	bfab      	itete	ge
 80072c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ca:	89a3      	ldrhlt	r3, [r4, #12]
 80072cc:	181b      	addge	r3, r3, r0
 80072ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072d2:	bfac      	ite	ge
 80072d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072d6:	81a3      	strhlt	r3, [r4, #12]
 80072d8:	bd10      	pop	{r4, pc}

080072da <__swrite>:
 80072da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072de:	461f      	mov	r7, r3
 80072e0:	898b      	ldrh	r3, [r1, #12]
 80072e2:	05db      	lsls	r3, r3, #23
 80072e4:	4605      	mov	r5, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	4616      	mov	r6, r2
 80072ea:	d505      	bpl.n	80072f8 <__swrite+0x1e>
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	2302      	movs	r3, #2
 80072f2:	2200      	movs	r2, #0
 80072f4:	f000 f9c8 	bl	8007688 <_lseek_r>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	4632      	mov	r2, r6
 8007306:	463b      	mov	r3, r7
 8007308:	4628      	mov	r0, r5
 800730a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800730e:	f000 b869 	b.w	80073e4 <_write_r>

08007312 <__sseek>:
 8007312:	b510      	push	{r4, lr}
 8007314:	460c      	mov	r4, r1
 8007316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731a:	f000 f9b5 	bl	8007688 <_lseek_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	bf15      	itete	ne
 8007324:	6560      	strne	r0, [r4, #84]	; 0x54
 8007326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800732a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800732e:	81a3      	strheq	r3, [r4, #12]
 8007330:	bf18      	it	ne
 8007332:	81a3      	strhne	r3, [r4, #12]
 8007334:	bd10      	pop	{r4, pc}

08007336 <__sclose>:
 8007336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800733a:	f000 b8d3 	b.w	80074e4 <_close_r>
	...

08007340 <__swbuf_r>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	460e      	mov	r6, r1
 8007344:	4614      	mov	r4, r2
 8007346:	4605      	mov	r5, r0
 8007348:	b118      	cbz	r0, 8007352 <__swbuf_r+0x12>
 800734a:	6983      	ldr	r3, [r0, #24]
 800734c:	b90b      	cbnz	r3, 8007352 <__swbuf_r+0x12>
 800734e:	f7ff fc19 	bl	8006b84 <__sinit>
 8007352:	4b21      	ldr	r3, [pc, #132]	; (80073d8 <__swbuf_r+0x98>)
 8007354:	429c      	cmp	r4, r3
 8007356:	d12b      	bne.n	80073b0 <__swbuf_r+0x70>
 8007358:	686c      	ldr	r4, [r5, #4]
 800735a:	69a3      	ldr	r3, [r4, #24]
 800735c:	60a3      	str	r3, [r4, #8]
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	071a      	lsls	r2, r3, #28
 8007362:	d52f      	bpl.n	80073c4 <__swbuf_r+0x84>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	b36b      	cbz	r3, 80073c4 <__swbuf_r+0x84>
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	1ac0      	subs	r0, r0, r3
 800736e:	6963      	ldr	r3, [r4, #20]
 8007370:	b2f6      	uxtb	r6, r6
 8007372:	4283      	cmp	r3, r0
 8007374:	4637      	mov	r7, r6
 8007376:	dc04      	bgt.n	8007382 <__swbuf_r+0x42>
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f948 	bl	8007610 <_fflush_r>
 8007380:	bb30      	cbnz	r0, 80073d0 <__swbuf_r+0x90>
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	3b01      	subs	r3, #1
 8007386:	60a3      	str	r3, [r4, #8]
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	6022      	str	r2, [r4, #0]
 800738e:	701e      	strb	r6, [r3, #0]
 8007390:	6963      	ldr	r3, [r4, #20]
 8007392:	3001      	adds	r0, #1
 8007394:	4283      	cmp	r3, r0
 8007396:	d004      	beq.n	80073a2 <__swbuf_r+0x62>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	07db      	lsls	r3, r3, #31
 800739c:	d506      	bpl.n	80073ac <__swbuf_r+0x6c>
 800739e:	2e0a      	cmp	r6, #10
 80073a0:	d104      	bne.n	80073ac <__swbuf_r+0x6c>
 80073a2:	4621      	mov	r1, r4
 80073a4:	4628      	mov	r0, r5
 80073a6:	f000 f933 	bl	8007610 <_fflush_r>
 80073aa:	b988      	cbnz	r0, 80073d0 <__swbuf_r+0x90>
 80073ac:	4638      	mov	r0, r7
 80073ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <__swbuf_r+0x9c>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	d101      	bne.n	80073ba <__swbuf_r+0x7a>
 80073b6:	68ac      	ldr	r4, [r5, #8]
 80073b8:	e7cf      	b.n	800735a <__swbuf_r+0x1a>
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <__swbuf_r+0xa0>)
 80073bc:	429c      	cmp	r4, r3
 80073be:	bf08      	it	eq
 80073c0:	68ec      	ldreq	r4, [r5, #12]
 80073c2:	e7ca      	b.n	800735a <__swbuf_r+0x1a>
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f81e 	bl	8007408 <__swsetup_r>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d0cb      	beq.n	8007368 <__swbuf_r+0x28>
 80073d0:	f04f 37ff 	mov.w	r7, #4294967295
 80073d4:	e7ea      	b.n	80073ac <__swbuf_r+0x6c>
 80073d6:	bf00      	nop
 80073d8:	08007978 	.word	0x08007978
 80073dc:	08007998 	.word	0x08007998
 80073e0:	08007958 	.word	0x08007958

080073e4 <_write_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4d07      	ldr	r5, [pc, #28]	; (8007404 <_write_r+0x20>)
 80073e8:	4604      	mov	r4, r0
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	602a      	str	r2, [r5, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f7fa fbcb 	bl	8001b8e <_write>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_write_r+0x1e>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_write_r+0x1e>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	20004348 	.word	0x20004348

08007408 <__swsetup_r>:
 8007408:	4b32      	ldr	r3, [pc, #200]	; (80074d4 <__swsetup_r+0xcc>)
 800740a:	b570      	push	{r4, r5, r6, lr}
 800740c:	681d      	ldr	r5, [r3, #0]
 800740e:	4606      	mov	r6, r0
 8007410:	460c      	mov	r4, r1
 8007412:	b125      	cbz	r5, 800741e <__swsetup_r+0x16>
 8007414:	69ab      	ldr	r3, [r5, #24]
 8007416:	b913      	cbnz	r3, 800741e <__swsetup_r+0x16>
 8007418:	4628      	mov	r0, r5
 800741a:	f7ff fbb3 	bl	8006b84 <__sinit>
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <__swsetup_r+0xd0>)
 8007420:	429c      	cmp	r4, r3
 8007422:	d10f      	bne.n	8007444 <__swsetup_r+0x3c>
 8007424:	686c      	ldr	r4, [r5, #4]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800742c:	0719      	lsls	r1, r3, #28
 800742e:	d42c      	bmi.n	800748a <__swsetup_r+0x82>
 8007430:	06dd      	lsls	r5, r3, #27
 8007432:	d411      	bmi.n	8007458 <__swsetup_r+0x50>
 8007434:	2309      	movs	r3, #9
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	f04f 30ff 	mov.w	r0, #4294967295
 8007442:	e03e      	b.n	80074c2 <__swsetup_r+0xba>
 8007444:	4b25      	ldr	r3, [pc, #148]	; (80074dc <__swsetup_r+0xd4>)
 8007446:	429c      	cmp	r4, r3
 8007448:	d101      	bne.n	800744e <__swsetup_r+0x46>
 800744a:	68ac      	ldr	r4, [r5, #8]
 800744c:	e7eb      	b.n	8007426 <__swsetup_r+0x1e>
 800744e:	4b24      	ldr	r3, [pc, #144]	; (80074e0 <__swsetup_r+0xd8>)
 8007450:	429c      	cmp	r4, r3
 8007452:	bf08      	it	eq
 8007454:	68ec      	ldreq	r4, [r5, #12]
 8007456:	e7e6      	b.n	8007426 <__swsetup_r+0x1e>
 8007458:	0758      	lsls	r0, r3, #29
 800745a:	d512      	bpl.n	8007482 <__swsetup_r+0x7a>
 800745c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800745e:	b141      	cbz	r1, 8007472 <__swsetup_r+0x6a>
 8007460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007464:	4299      	cmp	r1, r3
 8007466:	d002      	beq.n	800746e <__swsetup_r+0x66>
 8007468:	4630      	mov	r0, r6
 800746a:	f7ff fa59 	bl	8006920 <_free_r>
 800746e:	2300      	movs	r3, #0
 8007470:	6363      	str	r3, [r4, #52]	; 0x34
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007478:	81a3      	strh	r3, [r4, #12]
 800747a:	2300      	movs	r3, #0
 800747c:	6063      	str	r3, [r4, #4]
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	f043 0308 	orr.w	r3, r3, #8
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	b94b      	cbnz	r3, 80074a2 <__swsetup_r+0x9a>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007498:	d003      	beq.n	80074a2 <__swsetup_r+0x9a>
 800749a:	4621      	mov	r1, r4
 800749c:	4630      	mov	r0, r6
 800749e:	f000 f929 	bl	80076f4 <__smakebuf_r>
 80074a2:	89a0      	ldrh	r0, [r4, #12]
 80074a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074a8:	f010 0301 	ands.w	r3, r0, #1
 80074ac:	d00a      	beq.n	80074c4 <__swsetup_r+0xbc>
 80074ae:	2300      	movs	r3, #0
 80074b0:	60a3      	str	r3, [r4, #8]
 80074b2:	6963      	ldr	r3, [r4, #20]
 80074b4:	425b      	negs	r3, r3
 80074b6:	61a3      	str	r3, [r4, #24]
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	b943      	cbnz	r3, 80074ce <__swsetup_r+0xc6>
 80074bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074c0:	d1ba      	bne.n	8007438 <__swsetup_r+0x30>
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	0781      	lsls	r1, r0, #30
 80074c6:	bf58      	it	pl
 80074c8:	6963      	ldrpl	r3, [r4, #20]
 80074ca:	60a3      	str	r3, [r4, #8]
 80074cc:	e7f4      	b.n	80074b8 <__swsetup_r+0xb0>
 80074ce:	2000      	movs	r0, #0
 80074d0:	e7f7      	b.n	80074c2 <__swsetup_r+0xba>
 80074d2:	bf00      	nop
 80074d4:	20000010 	.word	0x20000010
 80074d8:	08007978 	.word	0x08007978
 80074dc:	08007998 	.word	0x08007998
 80074e0:	08007958 	.word	0x08007958

080074e4 <_close_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d06      	ldr	r5, [pc, #24]	; (8007500 <_close_r+0x1c>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	602b      	str	r3, [r5, #0]
 80074f0:	f7fa fb69 	bl	8001bc6 <_close>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_close_r+0x1a>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_close_r+0x1a>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20004348 	.word	0x20004348

08007504 <__sflush_r>:
 8007504:	898a      	ldrh	r2, [r1, #12]
 8007506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750a:	4605      	mov	r5, r0
 800750c:	0710      	lsls	r0, r2, #28
 800750e:	460c      	mov	r4, r1
 8007510:	d458      	bmi.n	80075c4 <__sflush_r+0xc0>
 8007512:	684b      	ldr	r3, [r1, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dc05      	bgt.n	8007524 <__sflush_r+0x20>
 8007518:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	dc02      	bgt.n	8007524 <__sflush_r+0x20>
 800751e:	2000      	movs	r0, #0
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007524:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007526:	2e00      	cmp	r6, #0
 8007528:	d0f9      	beq.n	800751e <__sflush_r+0x1a>
 800752a:	2300      	movs	r3, #0
 800752c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007530:	682f      	ldr	r7, [r5, #0]
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	d032      	beq.n	800759c <__sflush_r+0x98>
 8007536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	075a      	lsls	r2, r3, #29
 800753c:	d505      	bpl.n	800754a <__sflush_r+0x46>
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	1ac0      	subs	r0, r0, r3
 8007542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007544:	b10b      	cbz	r3, 800754a <__sflush_r+0x46>
 8007546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007548:	1ac0      	subs	r0, r0, r3
 800754a:	2300      	movs	r3, #0
 800754c:	4602      	mov	r2, r0
 800754e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007550:	6a21      	ldr	r1, [r4, #32]
 8007552:	4628      	mov	r0, r5
 8007554:	47b0      	blx	r6
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	d106      	bne.n	800756a <__sflush_r+0x66>
 800755c:	6829      	ldr	r1, [r5, #0]
 800755e:	291d      	cmp	r1, #29
 8007560:	d82c      	bhi.n	80075bc <__sflush_r+0xb8>
 8007562:	4a2a      	ldr	r2, [pc, #168]	; (800760c <__sflush_r+0x108>)
 8007564:	40ca      	lsrs	r2, r1
 8007566:	07d6      	lsls	r6, r2, #31
 8007568:	d528      	bpl.n	80075bc <__sflush_r+0xb8>
 800756a:	2200      	movs	r2, #0
 800756c:	6062      	str	r2, [r4, #4]
 800756e:	04d9      	lsls	r1, r3, #19
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	d504      	bpl.n	8007580 <__sflush_r+0x7c>
 8007576:	1c42      	adds	r2, r0, #1
 8007578:	d101      	bne.n	800757e <__sflush_r+0x7a>
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	b903      	cbnz	r3, 8007580 <__sflush_r+0x7c>
 800757e:	6560      	str	r0, [r4, #84]	; 0x54
 8007580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007582:	602f      	str	r7, [r5, #0]
 8007584:	2900      	cmp	r1, #0
 8007586:	d0ca      	beq.n	800751e <__sflush_r+0x1a>
 8007588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800758c:	4299      	cmp	r1, r3
 800758e:	d002      	beq.n	8007596 <__sflush_r+0x92>
 8007590:	4628      	mov	r0, r5
 8007592:	f7ff f9c5 	bl	8006920 <_free_r>
 8007596:	2000      	movs	r0, #0
 8007598:	6360      	str	r0, [r4, #52]	; 0x34
 800759a:	e7c1      	b.n	8007520 <__sflush_r+0x1c>
 800759c:	6a21      	ldr	r1, [r4, #32]
 800759e:	2301      	movs	r3, #1
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	1c41      	adds	r1, r0, #1
 80075a6:	d1c7      	bne.n	8007538 <__sflush_r+0x34>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0c4      	beq.n	8007538 <__sflush_r+0x34>
 80075ae:	2b1d      	cmp	r3, #29
 80075b0:	d001      	beq.n	80075b6 <__sflush_r+0xb2>
 80075b2:	2b16      	cmp	r3, #22
 80075b4:	d101      	bne.n	80075ba <__sflush_r+0xb6>
 80075b6:	602f      	str	r7, [r5, #0]
 80075b8:	e7b1      	b.n	800751e <__sflush_r+0x1a>
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	e7ad      	b.n	8007520 <__sflush_r+0x1c>
 80075c4:	690f      	ldr	r7, [r1, #16]
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	d0a9      	beq.n	800751e <__sflush_r+0x1a>
 80075ca:	0793      	lsls	r3, r2, #30
 80075cc:	680e      	ldr	r6, [r1, #0]
 80075ce:	bf08      	it	eq
 80075d0:	694b      	ldreq	r3, [r1, #20]
 80075d2:	600f      	str	r7, [r1, #0]
 80075d4:	bf18      	it	ne
 80075d6:	2300      	movne	r3, #0
 80075d8:	eba6 0807 	sub.w	r8, r6, r7
 80075dc:	608b      	str	r3, [r1, #8]
 80075de:	f1b8 0f00 	cmp.w	r8, #0
 80075e2:	dd9c      	ble.n	800751e <__sflush_r+0x1a>
 80075e4:	6a21      	ldr	r1, [r4, #32]
 80075e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075e8:	4643      	mov	r3, r8
 80075ea:	463a      	mov	r2, r7
 80075ec:	4628      	mov	r0, r5
 80075ee:	47b0      	blx	r6
 80075f0:	2800      	cmp	r0, #0
 80075f2:	dc06      	bgt.n	8007602 <__sflush_r+0xfe>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e78e      	b.n	8007520 <__sflush_r+0x1c>
 8007602:	4407      	add	r7, r0
 8007604:	eba8 0800 	sub.w	r8, r8, r0
 8007608:	e7e9      	b.n	80075de <__sflush_r+0xda>
 800760a:	bf00      	nop
 800760c:	20400001 	.word	0x20400001

08007610 <_fflush_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	690b      	ldr	r3, [r1, #16]
 8007614:	4605      	mov	r5, r0
 8007616:	460c      	mov	r4, r1
 8007618:	b913      	cbnz	r3, 8007620 <_fflush_r+0x10>
 800761a:	2500      	movs	r5, #0
 800761c:	4628      	mov	r0, r5
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	b118      	cbz	r0, 800762a <_fflush_r+0x1a>
 8007622:	6983      	ldr	r3, [r0, #24]
 8007624:	b90b      	cbnz	r3, 800762a <_fflush_r+0x1a>
 8007626:	f7ff faad 	bl	8006b84 <__sinit>
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <_fflush_r+0x6c>)
 800762c:	429c      	cmp	r4, r3
 800762e:	d11b      	bne.n	8007668 <_fflush_r+0x58>
 8007630:	686c      	ldr	r4, [r5, #4]
 8007632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0ef      	beq.n	800761a <_fflush_r+0xa>
 800763a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800763c:	07d0      	lsls	r0, r2, #31
 800763e:	d404      	bmi.n	800764a <_fflush_r+0x3a>
 8007640:	0599      	lsls	r1, r3, #22
 8007642:	d402      	bmi.n	800764a <_fflush_r+0x3a>
 8007644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007646:	f7ff fb3b 	bl	8006cc0 <__retarget_lock_acquire_recursive>
 800764a:	4628      	mov	r0, r5
 800764c:	4621      	mov	r1, r4
 800764e:	f7ff ff59 	bl	8007504 <__sflush_r>
 8007652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007654:	07da      	lsls	r2, r3, #31
 8007656:	4605      	mov	r5, r0
 8007658:	d4e0      	bmi.n	800761c <_fflush_r+0xc>
 800765a:	89a3      	ldrh	r3, [r4, #12]
 800765c:	059b      	lsls	r3, r3, #22
 800765e:	d4dd      	bmi.n	800761c <_fflush_r+0xc>
 8007660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007662:	f7ff fb2e 	bl	8006cc2 <__retarget_lock_release_recursive>
 8007666:	e7d9      	b.n	800761c <_fflush_r+0xc>
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <_fflush_r+0x70>)
 800766a:	429c      	cmp	r4, r3
 800766c:	d101      	bne.n	8007672 <_fflush_r+0x62>
 800766e:	68ac      	ldr	r4, [r5, #8]
 8007670:	e7df      	b.n	8007632 <_fflush_r+0x22>
 8007672:	4b04      	ldr	r3, [pc, #16]	; (8007684 <_fflush_r+0x74>)
 8007674:	429c      	cmp	r4, r3
 8007676:	bf08      	it	eq
 8007678:	68ec      	ldreq	r4, [r5, #12]
 800767a:	e7da      	b.n	8007632 <_fflush_r+0x22>
 800767c:	08007978 	.word	0x08007978
 8007680:	08007998 	.word	0x08007998
 8007684:	08007958 	.word	0x08007958

08007688 <_lseek_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	; (80076a8 <_lseek_r+0x20>)
 800768c:	4604      	mov	r4, r0
 800768e:	4608      	mov	r0, r1
 8007690:	4611      	mov	r1, r2
 8007692:	2200      	movs	r2, #0
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f7fa fabc 	bl	8001c14 <_lseek>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d102      	bne.n	80076a6 <_lseek_r+0x1e>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	b103      	cbz	r3, 80076a6 <_lseek_r+0x1e>
 80076a4:	6023      	str	r3, [r4, #0]
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	20004348 	.word	0x20004348

080076ac <__swhatbuf_r>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	460e      	mov	r6, r1
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	2900      	cmp	r1, #0
 80076b6:	b096      	sub	sp, #88	; 0x58
 80076b8:	4614      	mov	r4, r2
 80076ba:	461d      	mov	r5, r3
 80076bc:	da07      	bge.n	80076ce <__swhatbuf_r+0x22>
 80076be:	2300      	movs	r3, #0
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	89b3      	ldrh	r3, [r6, #12]
 80076c4:	061a      	lsls	r2, r3, #24
 80076c6:	d410      	bmi.n	80076ea <__swhatbuf_r+0x3e>
 80076c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076cc:	e00e      	b.n	80076ec <__swhatbuf_r+0x40>
 80076ce:	466a      	mov	r2, sp
 80076d0:	f000 f862 	bl	8007798 <_fstat_r>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	dbf2      	blt.n	80076be <__swhatbuf_r+0x12>
 80076d8:	9a01      	ldr	r2, [sp, #4]
 80076da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076e2:	425a      	negs	r2, r3
 80076e4:	415a      	adcs	r2, r3
 80076e6:	602a      	str	r2, [r5, #0]
 80076e8:	e7ee      	b.n	80076c8 <__swhatbuf_r+0x1c>
 80076ea:	2340      	movs	r3, #64	; 0x40
 80076ec:	2000      	movs	r0, #0
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	b016      	add	sp, #88	; 0x58
 80076f2:	bd70      	pop	{r4, r5, r6, pc}

080076f4 <__smakebuf_r>:
 80076f4:	898b      	ldrh	r3, [r1, #12]
 80076f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076f8:	079d      	lsls	r5, r3, #30
 80076fa:	4606      	mov	r6, r0
 80076fc:	460c      	mov	r4, r1
 80076fe:	d507      	bpl.n	8007710 <__smakebuf_r+0x1c>
 8007700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	2301      	movs	r3, #1
 800770a:	6163      	str	r3, [r4, #20]
 800770c:	b002      	add	sp, #8
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	ab01      	add	r3, sp, #4
 8007712:	466a      	mov	r2, sp
 8007714:	f7ff ffca 	bl	80076ac <__swhatbuf_r>
 8007718:	9900      	ldr	r1, [sp, #0]
 800771a:	4605      	mov	r5, r0
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff f94f 	bl	80069c0 <_malloc_r>
 8007722:	b948      	cbnz	r0, 8007738 <__smakebuf_r+0x44>
 8007724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007728:	059a      	lsls	r2, r3, #22
 800772a:	d4ef      	bmi.n	800770c <__smakebuf_r+0x18>
 800772c:	f023 0303 	bic.w	r3, r3, #3
 8007730:	f043 0302 	orr.w	r3, r3, #2
 8007734:	81a3      	strh	r3, [r4, #12]
 8007736:	e7e3      	b.n	8007700 <__smakebuf_r+0xc>
 8007738:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <__smakebuf_r+0x7c>)
 800773a:	62b3      	str	r3, [r6, #40]	; 0x28
 800773c:	89a3      	ldrh	r3, [r4, #12]
 800773e:	6020      	str	r0, [r4, #0]
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	81a3      	strh	r3, [r4, #12]
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	6163      	str	r3, [r4, #20]
 800774a:	9b01      	ldr	r3, [sp, #4]
 800774c:	6120      	str	r0, [r4, #16]
 800774e:	b15b      	cbz	r3, 8007768 <__smakebuf_r+0x74>
 8007750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007754:	4630      	mov	r0, r6
 8007756:	f000 f831 	bl	80077bc <_isatty_r>
 800775a:	b128      	cbz	r0, 8007768 <__smakebuf_r+0x74>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	89a0      	ldrh	r0, [r4, #12]
 800776a:	4305      	orrs	r5, r0
 800776c:	81a5      	strh	r5, [r4, #12]
 800776e:	e7cd      	b.n	800770c <__smakebuf_r+0x18>
 8007770:	08006b1d 	.word	0x08006b1d

08007774 <_read_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d07      	ldr	r5, [pc, #28]	; (8007794 <_read_r+0x20>)
 8007778:	4604      	mov	r4, r0
 800777a:	4608      	mov	r0, r1
 800777c:	4611      	mov	r1, r2
 800777e:	2200      	movs	r2, #0
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7fa f9e6 	bl	8001b54 <_read>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_read_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_read_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	20004348 	.word	0x20004348

08007798 <_fstat_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d07      	ldr	r5, [pc, #28]	; (80077b8 <_fstat_r+0x20>)
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	4608      	mov	r0, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	602b      	str	r3, [r5, #0]
 80077a6:	f7fa fa1a 	bl	8001bde <_fstat>
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	d102      	bne.n	80077b4 <_fstat_r+0x1c>
 80077ae:	682b      	ldr	r3, [r5, #0]
 80077b0:	b103      	cbz	r3, 80077b4 <_fstat_r+0x1c>
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	bd38      	pop	{r3, r4, r5, pc}
 80077b6:	bf00      	nop
 80077b8:	20004348 	.word	0x20004348

080077bc <_isatty_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d06      	ldr	r5, [pc, #24]	; (80077d8 <_isatty_r+0x1c>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7fa fa19 	bl	8001bfe <_isatty>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_isatty_r+0x1a>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_isatty_r+0x1a>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	20004348 	.word	0x20004348

080077dc <_init>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr

080077e8 <_fini>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr

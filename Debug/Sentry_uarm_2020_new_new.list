
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce4  08005ce4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cec  08005cec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004144  20000074  08005d68  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041b8  08005d68  000241b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aee2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b94  00000000  00000000  0003af86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  0003eb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003fee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bfb  00000000  00000000  000410c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001271e  00000000  00000000  00067cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e284d  00000000  00000000  0007a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015cc2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005550  00000000  00000000  0015ccac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005b94 	.word	0x08005b94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005b94 	.word	0x08005b94

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);
  /* Infinite loop */
  for(;;)
  {
	printf("\nWelcome to RM-EE\n");
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <Chassis_Task_Func+0x20>)
 80004fa:	f004 ff3f 	bl	800537c <puts>
    osDelay(500);
 80004fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000502:	f003 fcf6 	bl	8003ef2 <osDelay>
    osDelay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f003 fcf3 	bl	8003ef2 <osDelay>
  {
 800050c:	e7f4      	b.n	80004f8 <Chassis_Task_Func+0x8>
 800050e:	bf00      	nop
 8000510:	08005bac 	.word	0x08005bac

08000514 <Gimbal_Task_Function>:

extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart7;

void Gimbal_Task_Function(void const * argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;
	HAL_CAN_Start(&hcan1);
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <Gimbal_Task_Function+0x28>)
 800051e:	f000 ff92 	bl	8001446 <HAL_CAN_Start>



  for(;;)
  {
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000522:	2140      	movs	r1, #64	; 0x40
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <Gimbal_Task_Function+0x2c>)
 8000526:	f001 fd86 	bl	8002036 <HAL_GPIO_TogglePin>
	  CAN_Send_Gimbal(7500,0);
 800052a:	2100      	movs	r1, #0
 800052c:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000530:	f000 f808 	bl	8000544 <CAN_Send_Gimbal>



	  //osDelay(500);
	  osDelay(3);
 8000534:	2003      	movs	r0, #3
 8000536:	f003 fcdc 	bl	8003ef2 <osDelay>
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 800053a:	e7f2      	b.n	8000522 <Gimbal_Task_Function+0xe>
 800053c:	200040c4 	.word	0x200040c4
 8000540:	40021800 	.word	0x40021800

08000544 <CAN_Send_Gimbal>:
  }
  /* USER CODE END Gimbal_Task_Function */
}

void CAN_Send_Gimbal(int16_t yaw_raw, int16_t pitch_raw)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	80fb      	strh	r3, [r7, #6]
 8000550:	4613      	mov	r3, r2
 8000552:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    //chassis_tx_message.StdId = 0x200;  // 3508
	chassis_tx_message.StdId = 0x1FF;  // gimbal
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <CAN_Send_Gimbal+0x84>)
 8000556:	f240 12ff 	movw	r2, #511	; 0x1ff
 800055a:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <CAN_Send_Gimbal+0x84>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <CAN_Send_Gimbal+0x84>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <CAN_Send_Gimbal+0x84>)
 800056a:	2208      	movs	r2, #8
 800056c:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = yaw_raw >> 8;
 800056e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000572:	121b      	asrs	r3, r3, #8
 8000574:	b21b      	sxth	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <CAN_Send_Gimbal+0x88>)
 800057a:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = yaw_raw;
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <CAN_Send_Gimbal+0x88>)
 8000582:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = pitch_raw >> 8;
 8000584:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000588:	121b      	asrs	r3, r3, #8
 800058a:	b21b      	sxth	r3, r3
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <CAN_Send_Gimbal+0x88>)
 8000590:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = pitch_raw;
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <CAN_Send_Gimbal+0x88>)
 8000598:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = 0;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <CAN_Send_Gimbal+0x88>)
 800059c:	2200      	movs	r2, #0
 800059e:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = 0;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <CAN_Send_Gimbal+0x88>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <CAN_Send_Gimbal+0x88>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = 0;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <CAN_Send_Gimbal+0x88>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	71da      	strb	r2, [r3, #7]


    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <CAN_Send_Gimbal+0x88>)
 80005b8:	4903      	ldr	r1, [pc, #12]	; (80005c8 <CAN_Send_Gimbal+0x84>)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <CAN_Send_Gimbal+0x8c>)
 80005bc:	f000 ff87 	bl	80014ce <HAL_CAN_AddTxMessage>
//    else{
//    	buzzer_play_c1(100);
//    	buzzer_play_d1(100);
//    	buzzer_play_e1(100);
//    }
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000098 	.word	0x20000098
 80005cc:	20000090 	.word	0x20000090
 80005d0:	200040c4 	.word	0x200040c4

080005d4 <Shoot_Task_Func>:
 */
#include "Shoot_App.h"
void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 80005dc:	f000 f81c 	bl	8000618 <shoot_init>
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <Shoot_Task_Func+0x3c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <Shoot_Task_Func+0x3c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005f2:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 80005f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <Shoot_Task_Func+0x40>)
 80005fa:	f001 fd1c 	bl	8002036 <HAL_GPIO_TogglePin>
    osDelay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000602:	f003 fc76 	bl	8003ef2 <osDelay>
    osDelay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f003 fc73 	bl	8003ef2 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 800060c:	e7e8      	b.n	80005e0 <Shoot_Task_Func+0xc>
 800060e:	bf00      	nop
 8000610:	2000405c 	.word	0x2000405c
 8000614:	40021800 	.word	0x40021800

08000618 <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 800061c:	2100      	movs	r1, #0
 800061e:	4812      	ldr	r0, [pc, #72]	; (8000668 <shoot_init+0x50>)
 8000620:	f002 fa16 	bl	8002a50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000624:	2108      	movs	r1, #8
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <shoot_init+0x50>)
 8000628:	f002 fa12 	bl	8002a50 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,2000);
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <shoot_init+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000);
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <shoot_init+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800063e:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f003 fc55 	bl	8003ef2 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <shoot_init+0x50>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1000);
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <shoot_init+0x50>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 800065c:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000660:	f003 fc47 	bl	8003ef2 <osDelay>

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000405c 	.word	0x2000405c

0800066c <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	4802      	ldr	r0, [pc, #8]	; (800067c <buzzer_init+0x10>)
 8000674:	f002 f9ec 	bl	8002a50 <HAL_TIM_PWM_Start>

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200040ec 	.word	0x200040ec

08000680 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_CAN1_Init+0x64>)
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <MX_CAN1_Init+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_CAN1_Init+0x64>)
 800068c:	2203      	movs	r2, #3
 800068e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_CAN1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_CAN1_Init+0x64>)
 800069e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80006a2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006aa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_CAN1_Init+0x64>)
 80006d2:	f000 fdbd 	bl	8001250 <HAL_CAN_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006dc:	f000 fa14 	bl	8000b08 <Error_Handler>
  }

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200040c4 	.word	0x200040c4
 80006e8:	40006400 	.word	0x40006400

080006ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <HAL_CAN_MspInit+0x94>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d133      	bne.n	8000776 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <HAL_CAN_MspInit+0x98>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <HAL_CAN_MspInit+0x98>)
 8000718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <HAL_CAN_MspInit+0x98>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_CAN_MspInit+0x98>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_CAN_MspInit+0x98>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_CAN_MspInit+0x98>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000746:	2303      	movs	r3, #3
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000756:	2309      	movs	r3, #9
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <HAL_CAN_MspInit+0x9c>)
 8000762:	f001 faa5 	bl	8001cb0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2105      	movs	r1, #5
 800076a:	2014      	movs	r0, #20
 800076c:	f001 fa76 	bl	8001c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000770:	2014      	movs	r0, #20
 8000772:	f001 fa8f 	bl	8001c94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40006400 	.word	0x40006400
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00

0800078c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800079c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <vApplicationGetIdleTaskMemory+0x30>)
 80007a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	200000b0 	.word	0x200000b0
 80007bc:	20000104 	.word	0x20000104

080007c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b0a0      	sub	sp, #128	; 0x80
 80007c4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_FREERTOS_Init+0x98>)
 80007c8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007cc:	461d      	mov	r5, r3
 80007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fb3a 	bl	8003e5a <osThreadCreate>
 80007e6:	4602      	mov	r2, r0
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_FREERTOS_Init+0x9c>)
 80007ea:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80007ec:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_FREERTOS_Init+0xa0>)
 80007ee:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007f2:	461d      	mov	r5, r3
 80007f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8000800:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fb27 	bl	8003e5a <osThreadCreate>
 800080c:	67f8      	str	r0, [r7, #124]	; 0x7c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_FREERTOS_Init+0xa4>)
 8000810:	f107 0420 	add.w	r4, r7, #32
 8000814:	461d      	mov	r5, r3
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f003 fb16 	bl	8003e5a <osThreadCreate>
 800082e:	67b8      	str	r0, [r7, #120]	; 0x78

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_FREERTOS_Init+0xa8>)
 8000832:	1d3c      	adds	r4, r7, #4
 8000834:	461d      	mov	r5, r3
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fb07 	bl	8003e5a <osThreadCreate>
 800084c:	6778      	str	r0, [r7, #116]	; 0x74
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800084e:	bf00      	nop
 8000850:	3780      	adds	r7, #128	; 0x80
 8000852:	46bd      	mov	sp, r7
 8000854:	bdb0      	pop	{r4, r5, r7, pc}
 8000856:	bf00      	nop
 8000858:	08005bcc 	.word	0x08005bcc
 800085c:	2000412c 	.word	0x2000412c
 8000860:	08005bf4 	.word	0x08005bf4
 8000864:	08005c1c 	.word	0x08005c1c
 8000868:	08005c44 	.word	0x08005c44

0800086c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000874:	2001      	movs	r0, #1
 8000876:	f003 fb3c 	bl	8003ef2 <osDelay>
 800087a:	e7fb      	b.n	8000874 <StartDefaultTask+0x8>

0800087c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <MX_GPIO_Init+0x150>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4c      	ldr	r2, [pc, #304]	; (80009cc <MX_GPIO_Init+0x150>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <MX_GPIO_Init+0x150>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <MX_GPIO_Init+0x150>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a45      	ldr	r2, [pc, #276]	; (80009cc <MX_GPIO_Init+0x150>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <MX_GPIO_Init+0x150>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <MX_GPIO_Init+0x150>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3e      	ldr	r2, [pc, #248]	; (80009cc <MX_GPIO_Init+0x150>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <MX_GPIO_Init+0x150>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b38      	ldr	r3, [pc, #224]	; (80009cc <MX_GPIO_Init+0x150>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a37      	ldr	r2, [pc, #220]	; (80009cc <MX_GPIO_Init+0x150>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_GPIO_Init+0x150>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <MX_GPIO_Init+0x150>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <MX_GPIO_Init+0x150>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <MX_GPIO_Init+0x150>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_GPIO_Init+0x150>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a29      	ldr	r2, [pc, #164]	; (80009cc <MX_GPIO_Init+0x150>)
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_GPIO_Init+0x150>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0320 	and.w	r3, r3, #32
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000940:	4823      	ldr	r0, [pc, #140]	; (80009d0 <MX_GPIO_Init+0x154>)
 8000942:	f001 fb5f 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	211e      	movs	r1, #30
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x154>)
 800094c:	f001 fb5a 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	481f      	ldr	r0, [pc, #124]	; (80009d4 <MX_GPIO_Init+0x158>)
 8000958:	f001 fb54 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	481d      	ldr	r0, [pc, #116]	; (80009d8 <MX_GPIO_Init+0x15c>)
 8000964:	f001 fb4e 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8000968:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800096c:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_GPIO_Init+0x154>)
 8000982:	f001 f995 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8000986:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_GPIO_Init+0x158>)
 80009a0:	f001 f986 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80009a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_GPIO_Init+0x15c>)
 80009be:	f001 f977 	bl	8001cb0 <HAL_GPIO_Init>

}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	; 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021800 	.word	0x40021800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40021400 	.word	0x40021400

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fbf4 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f812 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff ff48 	bl	800087c <MX_GPIO_Init>
  MX_CAN1_Init();
 80009ec:	f7ff fe48 	bl	8000680 <MX_CAN1_Init>
  MX_TIM4_Init();
 80009f0:	f000 f9f8 	bl	8000de4 <MX_TIM4_Init>
  MX_TIM12_Init();
 80009f4:	f000 fa5c 	bl	8000eb0 <MX_TIM12_Init>
  MX_UART7_Init();
 80009f8:	f000 fb4c 	bl	8001094 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80009fc:	f7ff fe36 	bl	800066c <buzzer_init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a00:	f7ff fede 	bl	80007c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a04:	f003 fa22 	bl	8003e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x2c>
	...

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	; 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fc4a 	bl	80052b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemClock_Config+0xd0>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <SystemClock_Config+0xd0>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SystemClock_Config+0xd0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a76:	2302      	movs	r3, #2
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000a80:	2306      	movs	r3, #6
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a84:	23a8      	movs	r3, #168	; 0xa8
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fae9 	bl	800206c <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aa0:	f000 f832 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fd42 	bl	800254c <HAL_RCC_ClockConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ace:	f000 f81b 	bl	8000b08 <Error_Handler>
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3750      	adds	r7, #80	; 0x50
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af6:	f000 fb8b 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40000c00 	.word	0x40000c00

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <Error_Handler+0x6>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_MspInit+0x54>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_MspInit+0x54>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x54>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_MspInit+0x54>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_MspInit+0x54>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_MspInit+0x54>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	f06f 0001 	mvn.w	r0, #1
 8000b56:	f001 f881 	bl	8001c5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	2032      	movs	r0, #50	; 0x32
 8000b7e:	f001 f86d 	bl	8001c5c <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b82:	2032      	movs	r0, #50	; 0x32
 8000b84:	f001 f886 	bl	8001c94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_InitTick+0xa4>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <HAL_InitTick+0xa4>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_InitTick+0xa4>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba4:	f107 0210 	add.w	r2, r7, #16
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fe98 	bl	80028e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000bb4:	f001 fe6e 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc0:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_InitTick+0xa8>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	0c9b      	lsrs	r3, r3, #18
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_InitTick+0xac>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <HAL_InitTick+0xb0>)
 8000bd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_InitTick+0xac>)
 8000bd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_InitTick+0xac>)
 8000bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bde:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_InitTick+0xac>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_InitTick+0xac>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <HAL_InitTick+0xac>)
 8000bee:	f001 feab 	bl	8002948 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d104      	bne.n	8000c02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <HAL_InitTick+0xac>)
 8000bfa:	f001 feda 	bl	80029b2 <HAL_TIM_Base_Start_IT>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	431bde83 	.word	0x431bde83
 8000c14:	20004130 	.word	0x20004130
 8000c18:	40000c00 	.word	0x40000c00

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <CAN1_RX0_IRQHandler+0x10>)
 8000c4e:	f000 fd19 	bl	8001684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200040c4 	.word	0x200040c4

08000c5c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM5_IRQHandler+0x10>)
 8000c62:	f001 ff33 	bl	8002acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20004130 	.word	0x20004130

08000c70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e00a      	b.n	8000c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c82:	f3af 8000 	nop.w
 8000c86:	4601      	mov	r1, r0
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	b2ca      	uxtb	r2, r1
 8000c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbf0      	blt.n	8000c82 <_read+0x12>
	}

return len;
 8000ca0:	687b      	ldr	r3, [r7, #4]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e009      	b.n	8000cd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60ba      	str	r2, [r7, #8]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f9d3 	bl	8001070 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	dbf1      	blt.n	8000cbc <_write+0x12>
	}
	return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <_close>:

int _close(int file)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d0a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_isatty>:

int _isatty(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	return 1;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f004 fa70 	bl	8005260 <__errno>
 8000d80:	4602      	mov	r2, r0
 8000d82:	230c      	movs	r3, #12
 8000d84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20030000 	.word	0x20030000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	20000304 	.word	0x20000304
 8000db4:	200041b8 	.word	0x200041b8

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SystemInit+0x28>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <SystemInit+0x28>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SystemInit+0x28>)
 8000dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dd2:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e08:	4a28      	ldr	r2, [pc, #160]	; (8000eac <MX_TIM4_Init+0xc8>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e0e:	2253      	movs	r2, #83	; 0x53
 8000e10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e2c:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e2e:	f001 fde4 	bl	80029fa <HAL_TIM_PWM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000e38:	f7ff fe66 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e4c:	f002 faaa 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e56:	f7ff fe57 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5a:	2360      	movs	r3, #96	; 0x60
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e74:	f001 ff32 	bl	8002cdc <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e7e:	f7ff fe43 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2208      	movs	r2, #8
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e8a:	f001 ff27 	bl	8002cdc <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000e94:	f7ff fe38 	bl	8000b08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <MX_TIM4_Init+0xc4>)
 8000e9a:	f000 f887 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000405c 	.word	0x2000405c
 8000eac:	40000800 	.word	0x40000800

08000eb0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_TIM12_Init+0x88>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000ed0:	2223      	movs	r2, #35	; 0x23
 8000ed2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000edc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ee0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000ef0:	f001 fd83 	bl	80029fa <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000efa:	f7ff fe05 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000efe:	2360      	movs	r3, #96	; 0x60
 8000f00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000f16:	f001 fee1 	bl	8002cdc <HAL_TIM_PWM_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000f20:	f7ff fdf2 	bl	8000b08 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MX_TIM12_Init+0x84>)
 8000f26:	f000 f841 	bl	8000fac <HAL_TIM_MspPostInit>

}
 8000f2a:	bf00      	nop
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200040ec 	.word	0x200040ec
 8000f38:	40001800 	.word	0x40001800

08000f3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <HAL_TIM_PWM_MspInit+0x64>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10e      	bne.n	8000f6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8000f6a:	e012      	b.n	8000f92 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <HAL_TIM_PWM_MspInit+0x6c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10d      	bne.n	8000f92 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8000f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <HAL_TIM_PWM_MspInit+0x68>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40000800 	.word	0x40000800
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40001800 	.word	0x40001800

08000fac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a24      	ldr	r2, [pc, #144]	; (800105c <HAL_TIM_MspPostInit+0xb0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11f      	bne.n	800100e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_TIM_MspPostInit+0xb4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <HAL_TIM_MspPostInit+0xb4>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_TIM_MspPostInit+0xb4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8000fea:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <HAL_TIM_MspPostInit+0xb8>)
 8001008:	f000 fe52 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800100c:	e022      	b.n	8001054 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <HAL_TIM_MspPostInit+0xbc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d11d      	bne.n	8001054 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <HAL_TIM_MspPostInit+0xb4>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_TIM_MspPostInit+0xb4>)
 8001022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_TIM_MspPostInit+0xb4>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001034:	2340      	movs	r3, #64	; 0x40
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001044:	2309      	movs	r3, #9
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_TIM_MspPostInit+0xc0>)
 8001050:	f000 fe2e 	bl	8001cb0 <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40000800 	.word	0x40000800
 8001060:	40023800 	.word	0x40023800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40001800 	.word	0x40001800
 800106c:	40021c00 	.word	0x40021c00

08001070 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8001078:	1d39      	adds	r1, r7, #4
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107e:	2201      	movs	r2, #1
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <__io_putchar+0x20>)
 8001082:	f002 fa6c 	bl	800355e <HAL_UART_Transmit>

  return ch;
 8001086:	687b      	ldr	r3, [r7, #4]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20004170 	.word	0x20004170

08001094 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_UART7_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_UART7_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_UART7_Init+0x4c>)
 80010cc:	f002 f9fa 	bl	80034c4 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80010d6:	f7ff fd17 	bl	8000b08 <Error_Handler>
  }

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20004170 	.word	0x20004170
 80010e4:	40007800 	.word	0x40007800

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_UART_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12c      	bne.n	8001164 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_UART_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_UART_MspInit+0x88>)
 8001114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_UART_MspInit+0x88>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_UART_MspInit+0x88>)
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_UART_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001142:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001154:	2308      	movs	r3, #8
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_UART_MspInit+0x8c>)
 8001160:	f000 fda6 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40007800 	.word	0x40007800
 8001170:	40023800 	.word	0x40023800
 8001174:	40021000 	.word	0x40021000

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800117c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800117e:	e003      	b.n	8001188 <LoopCopyDataInit>

08001180 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001182:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001184:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001186:	3104      	adds	r1, #4

08001188 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800118c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001190:	d3f6      	bcc.n	8001180 <CopyDataInit>
  ldr  r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001194:	e002      	b.n	800119c <LoopFillZerobss>

08001196 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001196:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001198:	f842 3b04 	str.w	r3, [r2], #4

0800119c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011a0:	d3f9      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011a2:	f7ff fe09 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f004 f861 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fc17 	bl	80009dc <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80011b4:	08005cf4 	.word	0x08005cf4
  ldr  r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011bc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80011c0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80011c4:	200041b8 	.word	0x200041b8

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_Init+0x40>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x40>)
 80011e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x40>)
 80011ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fd26 	bl	8001c46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fcb4 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fc86 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023c00 	.word	0x40023c00

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	200041b0 	.word	0x200041b0

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	200041b0 	.word	0x200041b0

08001250 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0ed      	b.n	800143e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fa3c 	bl	80006ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0202 	bic.w	r2, r2, #2
 8001282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff ffd8 	bl	8001238 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128a:	e012      	b.n	80012b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800128c:	f7ff ffd4 	bl	8001238 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b0a      	cmp	r3, #10
 8001298:	d90b      	bls.n	80012b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0c5      	b.n	800143e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e5      	bne.n	800128c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff ffb2 	bl	8001238 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012d6:	e012      	b.n	80012fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012d8:	f7ff ffae 	bl	8001238 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b0a      	cmp	r3, #10
 80012e4:	d90b      	bls.n	80012fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2205      	movs	r2, #5
 80012f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e09f      	b.n	800143e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0e5      	beq.n	80012d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e007      	b.n	8001336 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7e5b      	ldrb	r3, [r3, #25]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d108      	bne.n	8001350 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800135e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7e9b      	ldrb	r3, [r3, #26]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d108      	bne.n	800137a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e007      	b.n	800138a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0220 	bic.w	r2, r2, #32
 8001388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7edb      	ldrb	r3, [r3, #27]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0210 	bic.w	r2, r2, #16
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0210 	orr.w	r2, r2, #16
 80013b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7f1b      	ldrb	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0208 	orr.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	e007      	b.n	80013de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0208 	bic.w	r2, r2, #8
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7f5b      	ldrb	r3, [r3, #29]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0204 	bic.w	r2, r2, #4
 8001406:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	ea42 0103 	orr.w	r1, r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d12e      	bne.n	80014b8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2202      	movs	r2, #2
 800145e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001472:	f7ff fee1 	bl	8001238 <HAL_GetTick>
 8001476:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001478:	e012      	b.n	80014a0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800147a:	f7ff fedd 	bl	8001238 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b0a      	cmp	r3, #10
 8001486:	d90b      	bls.n	80014a0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2205      	movs	r2, #5
 8001498:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e012      	b.n	80014c6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1e5      	bne.n	800147a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e006      	b.n	80014c6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
  }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b089      	sub	sp, #36	; 0x24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d003      	beq.n	80014fa <HAL_CAN_AddTxMessage+0x2c>
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	f040 80b8 	bne.w	800166a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10a      	bne.n	800151a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80a0 	beq.w	800165a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	0e1b      	lsrs	r3, r3, #24
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d907      	bls.n	800153a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e09e      	b.n	8001678 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800153a:	2201      	movs	r2, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10d      	bne.n	8001568 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001556:	68f9      	ldr	r1, [r7, #12]
 8001558:	6809      	ldr	r1, [r1, #0]
 800155a:	431a      	orrs	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3318      	adds	r3, #24
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	440b      	add	r3, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e00f      	b.n	8001588 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001572:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800157c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3318      	adds	r3, #24
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	440b      	add	r3, r1
 8001586:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6819      	ldr	r1, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3318      	adds	r3, #24
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	440b      	add	r3, r1
 8001598:	3304      	adds	r3, #4
 800159a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	7d1b      	ldrb	r3, [r3, #20]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d111      	bne.n	80015c8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3318      	adds	r3, #24
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4413      	add	r3, r2
 80015b0:	3304      	adds	r3, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	6811      	ldr	r1, [r2, #0]
 80015b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3318      	adds	r3, #24
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	440b      	add	r3, r1
 80015c4:	3304      	adds	r3, #4
 80015c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3307      	adds	r3, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	061a      	lsls	r2, r3, #24
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3306      	adds	r3, #6
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3305      	adds	r3, #5
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	4313      	orrs	r3, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	3204      	adds	r2, #4
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	4610      	mov	r0, r2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6811      	ldr	r1, [r2, #0]
 80015f0:	ea43 0200 	orr.w	r2, r3, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	440b      	add	r3, r1
 80015fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3303      	adds	r3, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	061a      	lsls	r2, r3, #24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3302      	adds	r3, #2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	041b      	lsls	r3, r3, #16
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3301      	adds	r3, #1
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	4313      	orrs	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	4610      	mov	r0, r2
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	6811      	ldr	r1, [r2, #0]
 8001626:	ea43 0200 	orr.w	r2, r3, r0
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	440b      	add	r3, r1
 8001630:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001634:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3318      	adds	r3, #24
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	6811      	ldr	r1, [r2, #0]
 8001648:	f043 0201 	orr.w	r2, r3, #1
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3318      	adds	r3, #24
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e00e      	b.n	8001678 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e006      	b.n	8001678 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
  }
}
 8001678:	4618      	mov	r0, r3
 800167a:	3724      	adds	r7, #36	; 0x24
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d07c      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d023      	beq.n	800171c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f97d 	bl	80019e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80016ec:	e016      	b.n	800171c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001700:	e00c      	b.n	800171c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e002      	b.n	800171c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f983 	bl	8001a22 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d024      	beq.n	8001770 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f95d 	bl	80019fa <HAL_CAN_TxMailbox1CompleteCallback>
 8001740:	e016      	b.n	8001770 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e00c      	b.n	8001770 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e002      	b.n	8001770 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f963 	bl	8001a36 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d024      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f93d 	bl	8001a0e <HAL_CAN_TxMailbox2CompleteCallback>
 8001794:	e016      	b.n	80017c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
 80017a8:	e00c      	b.n	80017c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e002      	b.n	80017c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f943 	bl	8001a4a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00c      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2208      	movs	r2, #8
 8001802:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f934 	bl	8001a72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f91b 	bl	8001a5e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00c      	beq.n	800184c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2210      	movs	r2, #16
 800184a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2208      	movs	r2, #8
 8001866:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f916 	bl	8001a9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f8fd 	bl	8001a86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2210      	movs	r2, #16
 80018a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f900 	bl	8001aae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00b      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2208      	movs	r2, #8
 80018c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8f9 	bl	8001ac2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d075      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d06c      	beq.n	80019be <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d008      	beq.n	8001938 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800193e:	2b00      	cmp	r3, #0
 8001940:	d03d      	beq.n	80019be <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001948:	2b00      	cmp	r3, #0
 800194a:	d038      	beq.n	80019be <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001952:	2b30      	cmp	r3, #48	; 0x30
 8001954:	d017      	beq.n	8001986 <HAL_CAN_IRQHandler+0x302>
 8001956:	2b30      	cmp	r3, #48	; 0x30
 8001958:	d804      	bhi.n	8001964 <HAL_CAN_IRQHandler+0x2e0>
 800195a:	2b10      	cmp	r3, #16
 800195c:	d009      	beq.n	8001972 <HAL_CAN_IRQHandler+0x2ee>
 800195e:	2b20      	cmp	r3, #32
 8001960:	d00c      	beq.n	800197c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001962:	e024      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001964:	2b50      	cmp	r3, #80	; 0x50
 8001966:	d018      	beq.n	800199a <HAL_CAN_IRQHandler+0x316>
 8001968:	2b60      	cmp	r3, #96	; 0x60
 800196a:	d01b      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x320>
 800196c:	2b40      	cmp	r3, #64	; 0x40
 800196e:	d00f      	beq.n	8001990 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001970:	e01d      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800197a:	e018      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001984:	e013      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800198e:	e00e      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001998:	e009      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019a2:	e004      	b.n	80019ae <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f87c 	bl	8001ad6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ff4c 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6e:	f7ff ff61 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001c72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	6978      	ldr	r0, [r7, #20]
 8001c7a:	f7ff ffb1 	bl	8001be0 <NVIC_EncodePriority>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff80 	bl	8001b8c <__NVIC_SetPriority>
}
 8001c8c:	bf00      	nop
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff54 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e177      	b.n	8001fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8166 	bne.w	8001fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00b      	beq.n	8001d0a <HAL_GPIO_Init+0x5a>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cfe:	2b11      	cmp	r3, #17
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0xfc>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80c0 	beq.w	8001fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a64      	ldr	r2, [pc, #400]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e52:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <HAL_GPIO_Init+0x328>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d037      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d031      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d025      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01f      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x21a>
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	e012      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eca:	230a      	movs	r3, #10
 8001ecc:	e010      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e00e      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00c      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00a      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x240>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4934      	ldr	r1, [pc, #208]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f32:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f38:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f5c:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_GPIO_Init+0x350>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f ae84 	bls.w	8001ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	401a      	ands	r2, r3
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	429a      	cmp	r2, r3
 800204e:	d104      	bne.n	800205a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002058:	e002      	b.n	8002060 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e25b      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d075      	beq.n	8002176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800208a:	4ba3      	ldr	r3, [pc, #652]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d00c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4ba0      	ldr	r3, [pc, #640]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d112      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a2:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	4b99      	ldr	r3, [pc, #612]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d05b      	beq.n	8002174 <HAL_RCC_OscConfig+0x108>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d157      	bne.n	8002174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e236      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x74>
 80020d2:	4b91      	ldr	r3, [pc, #580]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a90      	ldr	r2, [pc, #576]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e01d      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a8a      	ldr	r2, [pc, #552]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a87      	ldr	r2, [pc, #540]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 8002104:	4b84      	ldr	r3, [pc, #528]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a83      	ldr	r2, [pc, #524]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a80      	ldr	r2, [pc, #512]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f888 	bl	8001238 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f884 	bl	8001238 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1fb      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0xc0>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f874 	bl	8001238 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f870 	bl	8001238 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1e7      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0xe8>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e1bb      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4952      	ldr	r1, [pc, #328]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e03a      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_OscConfig+0x2b0>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7ff f829 	bl	8001238 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7ff f825 	bl	8001238 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e19c      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4940      	ldr	r1, [pc, #256]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <HAL_RCC_OscConfig+0x2b0>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f808 	bl	8001238 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222c:	f7ff f804 	bl	8001238 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e17b      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d030      	beq.n	80022b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_RCC_OscConfig+0x2b4>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe ffe8 	bl	8001238 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226c:	f7fe ffe4 	bl	8001238 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e15b      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x200>
 800228a:	e015      	b.n	80022b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_OscConfig+0x2b4>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7fe ffd1 	bl	8001238 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229a:	f7fe ffcd 	bl	8001238 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e144      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f0      	bne.n	800229a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a0 	beq.w	8002406 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_OscConfig+0x2b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d121      	bne.n	8002346 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCC_OscConfig+0x2b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_RCC_OscConfig+0x2b8>)
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230e:	f7fe ff93 	bl	8001238 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	e011      	b.n	800233a <HAL_RCC_OscConfig+0x2ce>
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	42470000 	.word	0x42470000
 8002320:	42470e80 	.word	0x42470e80
 8002324:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe ff86 	bl	8001238 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0fd      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b81      	ldr	r3, [pc, #516]	; (8002540 <HAL_RCC_OscConfig+0x4d4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x2f0>
 800234e:	4b7d      	ldr	r3, [pc, #500]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a7c      	ldr	r2, [pc, #496]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x32a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x312>
 8002364:	4b77      	ldr	r3, [pc, #476]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a76      	ldr	r2, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	4b74      	ldr	r3, [pc, #464]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	4a73      	ldr	r2, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6713      	str	r3, [r2, #112]	; 0x70
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x32a>
 800237e:	4b71      	ldr	r3, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a70      	ldr	r2, [pc, #448]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	4b6e      	ldr	r3, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a6d      	ldr	r2, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe ff4b 	bl	8001238 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe ff47 	bl	8001238 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0bc      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x33a>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe ff35 	bl	8001238 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe ff31 	bl	8001238 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0a6      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b56      	ldr	r3, [pc, #344]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a51      	ldr	r2, [pc, #324]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8092 	beq.w	8002534 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d05c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d141      	bne.n	80024a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_RCC_OscConfig+0x4dc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe ff05 	bl	8001238 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe ff01 	bl	8001238 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e078      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	019b      	lsls	r3, r3, #6
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	3b01      	subs	r3, #1
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	061b      	lsls	r3, r3, #24
 8002474:	4933      	ldr	r1, [pc, #204]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_RCC_OscConfig+0x4dc>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe feda 	bl	8001238 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fed6 	bl	8001238 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04d      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x41c>
 80024a6:	e045      	b.n	8002534 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x4dc>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fec3 	bl	8001238 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b6:	f7fe febf 	bl	8001238 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e036      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f0      	bne.n	80024b6 <HAL_RCC_OscConfig+0x44a>
 80024d4:	e02e      	b.n	8002534 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e029      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_OscConfig+0x4d8>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d115      	bne.n	8002530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002510:	4293      	cmp	r3, r2
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800251e:	429a      	cmp	r2, r3
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40007000 	.word	0x40007000
 8002544:	40023800 	.word	0x40023800
 8002548:	42470060 	.word	0x42470060

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cc      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d90c      	bls.n	8002588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d044      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d119      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	2b03      	cmp	r3, #3
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e06f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e067      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4934      	ldr	r1, [pc, #208]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe fdfc 	bl	8001238 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe fdf8 	bl	8001238 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d20c      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4601      	mov	r1, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	fa21 f303 	lsr.w	r3, r1, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fa38 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00
 8002708:	40023800 	.word	0x40023800
 800270c:	08005c68 	.word	0x08005c68
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800272e:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_GetSysClockFreq+0x158>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b04      	cmp	r3, #4
 8002738:	d007      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x32>
 800273a:	2b08      	cmp	r3, #8
 800273c:	d008      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x38>
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 808d 	bne.w	800285e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002746:	60bb      	str	r3, [r7, #8]
       break;
 8002748:	e08c      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_RCC_GetSysClockFreq+0x160>)
 800274c:	60bb      	str	r3, [r7, #8]
      break;
 800274e:	e089      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCC_GetSysClockFreq+0x158>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002758:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <HAL_RCC_GetSysClockFreq+0x158>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCC_GetSysClockFreq+0x158>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	f04f 0400 	mov.w	r4, #0
 8002770:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	ea03 0501 	and.w	r5, r3, r1
 800277c:	ea04 0602 	and.w	r6, r4, r2
 8002780:	4a3d      	ldr	r2, [pc, #244]	; (8002878 <HAL_RCC_GetSysClockFreq+0x160>)
 8002782:	fb02 f106 	mul.w	r1, r2, r6
 8002786:	2200      	movs	r2, #0
 8002788:	fb02 f205 	mul.w	r2, r2, r5
 800278c:	440a      	add	r2, r1
 800278e:	493a      	ldr	r1, [pc, #232]	; (8002878 <HAL_RCC_GetSysClockFreq+0x160>)
 8002790:	fba5 0101 	umull	r0, r1, r5, r1
 8002794:	1853      	adds	r3, r2, r1
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f04f 0400 	mov.w	r4, #0
 800279e:	461a      	mov	r2, r3
 80027a0:	4623      	mov	r3, r4
 80027a2:	f7fd fd25 	bl	80001f0 <__aeabi_uldivmod>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e049      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_RCC_GetSysClockFreq+0x158>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	099b      	lsrs	r3, r3, #6
 80027b4:	f04f 0400 	mov.w	r4, #0
 80027b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	ea03 0501 	and.w	r5, r3, r1
 80027c4:	ea04 0602 	and.w	r6, r4, r2
 80027c8:	4629      	mov	r1, r5
 80027ca:	4632      	mov	r2, r6
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	f04f 0400 	mov.w	r4, #0
 80027d4:	0154      	lsls	r4, r2, #5
 80027d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027da:	014b      	lsls	r3, r1, #5
 80027dc:	4619      	mov	r1, r3
 80027de:	4622      	mov	r2, r4
 80027e0:	1b49      	subs	r1, r1, r5
 80027e2:	eb62 0206 	sbc.w	r2, r2, r6
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	f04f 0400 	mov.w	r4, #0
 80027ee:	0194      	lsls	r4, r2, #6
 80027f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027f4:	018b      	lsls	r3, r1, #6
 80027f6:	1a5b      	subs	r3, r3, r1
 80027f8:	eb64 0402 	sbc.w	r4, r4, r2
 80027fc:	f04f 0100 	mov.w	r1, #0
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	00e2      	lsls	r2, r4, #3
 8002806:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800280a:	00d9      	lsls	r1, r3, #3
 800280c:	460b      	mov	r3, r1
 800280e:	4614      	mov	r4, r2
 8002810:	195b      	adds	r3, r3, r5
 8002812:	eb44 0406 	adc.w	r4, r4, r6
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	02a2      	lsls	r2, r4, #10
 8002820:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002824:	0299      	lsls	r1, r3, #10
 8002826:	460b      	mov	r3, r1
 8002828:	4614      	mov	r4, r2
 800282a:	4618      	mov	r0, r3
 800282c:	4621      	mov	r1, r4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	461a      	mov	r2, r3
 8002836:	4623      	mov	r3, r4
 8002838:	f7fd fcda 	bl	80001f0 <__aeabi_uldivmod>
 800283c:	4603      	mov	r3, r0
 800283e:	460c      	mov	r4, r1
 8002840:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_GetSysClockFreq+0x158>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0c1b      	lsrs	r3, r3, #16
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	3301      	adds	r3, #1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	fbb2 f3f3 	udiv	r3, r2, r3
 800285a:	60bb      	str	r3, [r7, #8]
      break;
 800285c:	e002      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002860:	60bb      	str	r3, [r7, #8]
      break;
 8002862:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002864:	68bb      	ldr	r3, [r7, #8]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	00f42400 	.word	0x00f42400
 8002878:	00b71b00 	.word	0x00b71b00

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_RCC_GetHCLKFreq+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000000 	.word	0x20000000

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002898:	f7ff fff0 	bl	800287c <HAL_RCC_GetHCLKFreq>
 800289c:	4601      	mov	r1, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0a9b      	lsrs	r3, r3, #10
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4a03      	ldr	r2, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	08005c78 	.word	0x08005c78

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f7ff ffdc 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028c4:	4601      	mov	r1, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0b5b      	lsrs	r3, r3, #13
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4a03      	ldr	r2, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08005c78 	.word	0x08005c78

080028e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	220f      	movs	r2, #15
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_RCC_GetClockConfig+0x60>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40023c00 	.word	0x40023c00

08002948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e01d      	b.n	8002996 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f815 	bl	800299e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f000 fa96 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d007      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e01d      	b.n	8002a48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fa8b 	bl	8000f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f000 fa3d 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fc78 	bl	8003358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <HAL_TIM_PWM_Start+0x74>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_TIM_PWM_Start+0x2c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_TIM_PWM_Start+0x78>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIM_PWM_Start+0x30>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_TIM_PWM_Start+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d007      	beq.n	8002ab8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010400 	.word	0x40010400

08002acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0202 	mvn.w	r2, #2
 8002af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f9b4 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f9a6 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f9b7 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0204 	mvn.w	r2, #4
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f98a 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f97c 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f98d 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0208 	mvn.w	r2, #8
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f960 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f952 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f963 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0210 	mvn.w	r2, #16
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f936 	bl	8002e7c <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f928 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f939 	bl	8002e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0201 	mvn.w	r2, #1
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd ff4a 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fc1a 	bl	80034b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d107      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8fe 	bl	8002ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0220 	mvn.w	r2, #32
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fbe4 	bl	800349c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0b4      	b.n	8002e60 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	f200 809f 	bhi.w	8002e4c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d49 	.word	0x08002d49
 8002d18:	08002e4d 	.word	0x08002e4d
 8002d1c:	08002e4d 	.word	0x08002e4d
 8002d20:	08002e4d 	.word	0x08002e4d
 8002d24:	08002d89 	.word	0x08002d89
 8002d28:	08002e4d 	.word	0x08002e4d
 8002d2c:	08002e4d 	.word	0x08002e4d
 8002d30:	08002e4d 	.word	0x08002e4d
 8002d34:	08002dcb 	.word	0x08002dcb
 8002d38:	08002e4d 	.word	0x08002e4d
 8002d3c:	08002e4d 	.word	0x08002e4d
 8002d40:	08002e4d 	.word	0x08002e4d
 8002d44:	08002e0b 	.word	0x08002e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f952 	bl	8002ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699a      	ldr	r2, [r3, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0208 	orr.w	r2, r2, #8
 8002d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0204 	bic.w	r2, r2, #4
 8002d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6999      	ldr	r1, [r3, #24]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	619a      	str	r2, [r3, #24]
      break;
 8002d86:	e062      	b.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f9a2 	bl	80030d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	021a      	lsls	r2, r3, #8
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	619a      	str	r2, [r3, #24]
      break;
 8002dc8:	e041      	b.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f9f7 	bl	80031c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0208 	orr.w	r2, r2, #8
 8002de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0204 	bic.w	r2, r2, #4
 8002df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69d9      	ldr	r1, [r3, #28]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	61da      	str	r2, [r3, #28]
      break;
 8002e08:	e021      	b.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fa4b 	bl	80032ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	021a      	lsls	r2, r3, #8
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	61da      	str	r2, [r3, #28]
      break;
 8002e4a:	e000      	b.n	8002e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e4c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a40      	ldr	r2, [pc, #256]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d013      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3d      	ldr	r2, [pc, #244]	; (8002fd0 <TIM_Base_SetConfig+0x118>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00b      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	; (8002fd4 <TIM_Base_SetConfig+0x11c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3b      	ldr	r2, [pc, #236]	; (8002fd8 <TIM_Base_SetConfig+0x120>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d027      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	; (8002fd0 <TIM_Base_SetConfig+0x118>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d023      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <TIM_Base_SetConfig+0x11c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <TIM_Base_SetConfig+0x120>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d017      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a28      	ldr	r2, [pc, #160]	; (8002fe0 <TIM_Base_SetConfig+0x128>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <TIM_Base_SetConfig+0x12c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00f      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <TIM_Base_SetConfig+0x130>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a25      	ldr	r2, [pc, #148]	; (8002fec <TIM_Base_SetConfig+0x134>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <TIM_Base_SetConfig+0x138>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <TIM_Base_SetConfig+0x13c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <TIM_Base_SetConfig+0x114>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0xf8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <TIM_Base_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40010400 	.word	0x40010400
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800
 8002fec:	40001800 	.word	0x40001800
 8002ff0:	40001c00 	.word	0x40001c00
 8002ff4:	40002000 	.word	0x40002000

08002ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 0302 	bic.w	r3, r3, #2
 8003040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a20      	ldr	r2, [pc, #128]	; (80030d0 <TIM_OC1_SetConfig+0xd8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d003      	beq.n	800305c <TIM_OC1_SetConfig+0x64>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <TIM_OC1_SetConfig+0xdc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10c      	bne.n	8003076 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0308 	bic.w	r3, r3, #8
 8003062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <TIM_OC1_SetConfig+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_OC1_SetConfig+0x8e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <TIM_OC1_SetConfig+0xdc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800308c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40010400 	.word	0x40010400

080030d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	f023 0210 	bic.w	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f023 0320 	bic.w	r3, r3, #32
 8003122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <TIM_OC2_SetConfig+0xe4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_OC2_SetConfig+0x68>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <TIM_OC2_SetConfig+0xe8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d10d      	bne.n	800315c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <TIM_OC2_SetConfig+0xe4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_OC2_SetConfig+0x94>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <TIM_OC2_SetConfig+0xe8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d113      	bne.n	8003194 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800317a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010400 	.word	0x40010400

080031c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800320c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <TIM_OC3_SetConfig+0xe0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_OC3_SetConfig+0x66>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <TIM_OC3_SetConfig+0xe4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10d      	bne.n	8003246 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <TIM_OC3_SetConfig+0xe0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_OC3_SetConfig+0x92>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <TIM_OC3_SetConfig+0xe4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d113      	bne.n	800327e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	621a      	str	r2, [r3, #32]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010400 	.word	0x40010400

080032ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <TIM_OC4_SetConfig+0xa4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC4_SetConfig+0x68>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <TIM_OC4_SetConfig+0xa8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000
 8003354:	40010400 	.word	0x40010400

08003358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2201      	movs	r2, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a1a      	ldr	r2, [r3, #32]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e05a      	b.n	8003472 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d01d      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d018      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a15      	ldr	r2, [pc, #84]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d10c      	bne.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4313      	orrs	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40010400 	.word	0x40010400
 8003494:	40014000 	.word	0x40014000
 8003498:	40001800 	.word	0x40001800

0800349c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e03f      	b.n	8003556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fdfc 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f90b 	bl	8003724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b088      	sub	sp, #32
 8003562:	af02      	add	r7, sp, #8
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 8083 	bne.w	8003686 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Transmit+0x2e>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e07b      	b.n	8003688 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_UART_Transmit+0x40>
 800359a:	2302      	movs	r3, #2
 800359c:	e074      	b.n	8003688 <HAL_UART_Transmit+0x12a>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2221      	movs	r2, #33	; 0x21
 80035b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035b4:	f7fd fe40 	bl	8001238 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80035ce:	e042      	b.n	8003656 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	d122      	bne.n	800362e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f84c 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e042      	b.n	8003688 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003614:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3302      	adds	r3, #2
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	e017      	b.n	8003656 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	3301      	adds	r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	e013      	b.n	8003656 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f829 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e01f      	b.n	8003688 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	60ba      	str	r2, [r7, #8]
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1b7      	bne.n	80035d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2200      	movs	r2, #0
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f810 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e006      	b.n	8003688 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	e02c      	b.n	80036fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d028      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036b0:	f7fd fdc2 	bl	8001238 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d21d      	bcs.n	80036fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e00f      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	d0c3      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003766:	f023 030c 	bic.w	r3, r3, #12
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	430b      	orrs	r3, r1
 8003772:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	f040 818b 	bne.w	8003aac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4ac1      	ldr	r2, [pc, #772]	; (8003aa0 <UART_SetConfig+0x37c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d005      	beq.n	80037ac <UART_SetConfig+0x88>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4abf      	ldr	r2, [pc, #764]	; (8003aa4 <UART_SetConfig+0x380>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	f040 80bd 	bne.w	8003926 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff f886 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 80037b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	461d      	mov	r5, r3
 80037b6:	f04f 0600 	mov.w	r6, #0
 80037ba:	46a8      	mov	r8, r5
 80037bc:	46b1      	mov	r9, r6
 80037be:	eb18 0308 	adds.w	r3, r8, r8
 80037c2:	eb49 0409 	adc.w	r4, r9, r9
 80037c6:	4698      	mov	r8, r3
 80037c8:	46a1      	mov	r9, r4
 80037ca:	eb18 0805 	adds.w	r8, r8, r5
 80037ce:	eb49 0906 	adc.w	r9, r9, r6
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037e6:	4688      	mov	r8, r1
 80037e8:	4691      	mov	r9, r2
 80037ea:	eb18 0005 	adds.w	r0, r8, r5
 80037ee:	eb49 0106 	adc.w	r1, r9, r6
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	461d      	mov	r5, r3
 80037f8:	f04f 0600 	mov.w	r6, #0
 80037fc:	196b      	adds	r3, r5, r5
 80037fe:	eb46 0406 	adc.w	r4, r6, r6
 8003802:	461a      	mov	r2, r3
 8003804:	4623      	mov	r3, r4
 8003806:	f7fc fcf3 	bl	80001f0 <__aeabi_uldivmod>
 800380a:	4603      	mov	r3, r0
 800380c:	460c      	mov	r4, r1
 800380e:	461a      	mov	r2, r3
 8003810:	4ba5      	ldr	r3, [pc, #660]	; (8003aa8 <UART_SetConfig+0x384>)
 8003812:	fba3 2302 	umull	r2, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	461d      	mov	r5, r3
 8003820:	f04f 0600 	mov.w	r6, #0
 8003824:	46a9      	mov	r9, r5
 8003826:	46b2      	mov	sl, r6
 8003828:	eb19 0309 	adds.w	r3, r9, r9
 800382c:	eb4a 040a 	adc.w	r4, sl, sl
 8003830:	4699      	mov	r9, r3
 8003832:	46a2      	mov	sl, r4
 8003834:	eb19 0905 	adds.w	r9, r9, r5
 8003838:	eb4a 0a06 	adc.w	sl, sl, r6
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800384c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003850:	4689      	mov	r9, r1
 8003852:	4692      	mov	sl, r2
 8003854:	eb19 0005 	adds.w	r0, r9, r5
 8003858:	eb4a 0106 	adc.w	r1, sl, r6
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	461d      	mov	r5, r3
 8003862:	f04f 0600 	mov.w	r6, #0
 8003866:	196b      	adds	r3, r5, r5
 8003868:	eb46 0406 	adc.w	r4, r6, r6
 800386c:	461a      	mov	r2, r3
 800386e:	4623      	mov	r3, r4
 8003870:	f7fc fcbe 	bl	80001f0 <__aeabi_uldivmod>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	461a      	mov	r2, r3
 800387a:	4b8b      	ldr	r3, [pc, #556]	; (8003aa8 <UART_SetConfig+0x384>)
 800387c:	fba3 1302 	umull	r1, r3, r3, r2
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	2164      	movs	r1, #100	; 0x64
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	3332      	adds	r3, #50	; 0x32
 800388e:	4a86      	ldr	r2, [pc, #536]	; (8003aa8 <UART_SetConfig+0x384>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800389c:	4498      	add	r8, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	461d      	mov	r5, r3
 80038a2:	f04f 0600 	mov.w	r6, #0
 80038a6:	46a9      	mov	r9, r5
 80038a8:	46b2      	mov	sl, r6
 80038aa:	eb19 0309 	adds.w	r3, r9, r9
 80038ae:	eb4a 040a 	adc.w	r4, sl, sl
 80038b2:	4699      	mov	r9, r3
 80038b4:	46a2      	mov	sl, r4
 80038b6:	eb19 0905 	adds.w	r9, r9, r5
 80038ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038d2:	4689      	mov	r9, r1
 80038d4:	4692      	mov	sl, r2
 80038d6:	eb19 0005 	adds.w	r0, r9, r5
 80038da:	eb4a 0106 	adc.w	r1, sl, r6
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	461d      	mov	r5, r3
 80038e4:	f04f 0600 	mov.w	r6, #0
 80038e8:	196b      	adds	r3, r5, r5
 80038ea:	eb46 0406 	adc.w	r4, r6, r6
 80038ee:	461a      	mov	r2, r3
 80038f0:	4623      	mov	r3, r4
 80038f2:	f7fc fc7d 	bl	80001f0 <__aeabi_uldivmod>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <UART_SetConfig+0x384>)
 80038fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2164      	movs	r1, #100	; 0x64
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	3332      	adds	r3, #50	; 0x32
 8003910:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <UART_SetConfig+0x384>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	f003 0207 	and.w	r2, r3, #7
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4442      	add	r2, r8
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	e26f      	b.n	8003e06 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003926:	f7fe ffb5 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 800392a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	461d      	mov	r5, r3
 8003930:	f04f 0600 	mov.w	r6, #0
 8003934:	46a8      	mov	r8, r5
 8003936:	46b1      	mov	r9, r6
 8003938:	eb18 0308 	adds.w	r3, r8, r8
 800393c:	eb49 0409 	adc.w	r4, r9, r9
 8003940:	4698      	mov	r8, r3
 8003942:	46a1      	mov	r9, r4
 8003944:	eb18 0805 	adds.w	r8, r8, r5
 8003948:	eb49 0906 	adc.w	r9, r9, r6
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003958:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800395c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003960:	4688      	mov	r8, r1
 8003962:	4691      	mov	r9, r2
 8003964:	eb18 0005 	adds.w	r0, r8, r5
 8003968:	eb49 0106 	adc.w	r1, r9, r6
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	461d      	mov	r5, r3
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	196b      	adds	r3, r5, r5
 8003978:	eb46 0406 	adc.w	r4, r6, r6
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	f7fc fc36 	bl	80001f0 <__aeabi_uldivmod>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	461a      	mov	r2, r3
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <UART_SetConfig+0x384>)
 800398c:	fba3 2302 	umull	r2, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	461d      	mov	r5, r3
 800399a:	f04f 0600 	mov.w	r6, #0
 800399e:	46a9      	mov	r9, r5
 80039a0:	46b2      	mov	sl, r6
 80039a2:	eb19 0309 	adds.w	r3, r9, r9
 80039a6:	eb4a 040a 	adc.w	r4, sl, sl
 80039aa:	4699      	mov	r9, r3
 80039ac:	46a2      	mov	sl, r4
 80039ae:	eb19 0905 	adds.w	r9, r9, r5
 80039b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80039b6:	f04f 0100 	mov.w	r1, #0
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ca:	4689      	mov	r9, r1
 80039cc:	4692      	mov	sl, r2
 80039ce:	eb19 0005 	adds.w	r0, r9, r5
 80039d2:	eb4a 0106 	adc.w	r1, sl, r6
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	461d      	mov	r5, r3
 80039dc:	f04f 0600 	mov.w	r6, #0
 80039e0:	196b      	adds	r3, r5, r5
 80039e2:	eb46 0406 	adc.w	r4, r6, r6
 80039e6:	461a      	mov	r2, r3
 80039e8:	4623      	mov	r3, r4
 80039ea:	f7fc fc01 	bl	80001f0 <__aeabi_uldivmod>
 80039ee:	4603      	mov	r3, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <UART_SetConfig+0x384>)
 80039f6:	fba3 1302 	umull	r1, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2164      	movs	r1, #100	; 0x64
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	3332      	adds	r3, #50	; 0x32
 8003a08:	4a27      	ldr	r2, [pc, #156]	; (8003aa8 <UART_SetConfig+0x384>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a16:	4498      	add	r8, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	f04f 0600 	mov.w	r6, #0
 8003a20:	46a9      	mov	r9, r5
 8003a22:	46b2      	mov	sl, r6
 8003a24:	eb19 0309 	adds.w	r3, r9, r9
 8003a28:	eb4a 040a 	adc.w	r4, sl, sl
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	46a2      	mov	sl, r4
 8003a30:	eb19 0905 	adds.w	r9, r9, r5
 8003a34:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a4c:	4689      	mov	r9, r1
 8003a4e:	4692      	mov	sl, r2
 8003a50:	eb19 0005 	adds.w	r0, r9, r5
 8003a54:	eb4a 0106 	adc.w	r1, sl, r6
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	f04f 0600 	mov.w	r6, #0
 8003a62:	196b      	adds	r3, r5, r5
 8003a64:	eb46 0406 	adc.w	r4, r6, r6
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	f7fc fbc0 	bl	80001f0 <__aeabi_uldivmod>
 8003a70:	4603      	mov	r3, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <UART_SetConfig+0x384>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a07      	ldr	r2, [pc, #28]	; (8003aa8 <UART_SetConfig+0x384>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 0207 	and.w	r2, r3, #7
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4442      	add	r2, r8
 8003a9c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a9e:	e1b2      	b.n	8003e06 <UART_SetConfig+0x6e2>
 8003aa0:	40011000 	.word	0x40011000
 8003aa4:	40011400 	.word	0x40011400
 8003aa8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4ad7      	ldr	r2, [pc, #860]	; (8003e10 <UART_SetConfig+0x6ec>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d005      	beq.n	8003ac2 <UART_SetConfig+0x39e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4ad6      	ldr	r2, [pc, #856]	; (8003e14 <UART_SetConfig+0x6f0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	f040 80d1 	bne.w	8003c64 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ac2:	f7fe fefb 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 8003ac6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	469a      	mov	sl, r3
 8003acc:	f04f 0b00 	mov.w	fp, #0
 8003ad0:	46d0      	mov	r8, sl
 8003ad2:	46d9      	mov	r9, fp
 8003ad4:	eb18 0308 	adds.w	r3, r8, r8
 8003ad8:	eb49 0409 	adc.w	r4, r9, r9
 8003adc:	4698      	mov	r8, r3
 8003ade:	46a1      	mov	r9, r4
 8003ae0:	eb18 080a 	adds.w	r8, r8, sl
 8003ae4:	eb49 090b 	adc.w	r9, r9, fp
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003af4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003af8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003afc:	4688      	mov	r8, r1
 8003afe:	4691      	mov	r9, r2
 8003b00:	eb1a 0508 	adds.w	r5, sl, r8
 8003b04:	eb4b 0609 	adc.w	r6, fp, r9
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f04f 0400 	mov.w	r4, #0
 8003b1a:	0094      	lsls	r4, r2, #2
 8003b1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b20:	008b      	lsls	r3, r1, #2
 8003b22:	461a      	mov	r2, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	4631      	mov	r1, r6
 8003b2a:	f7fc fb61 	bl	80001f0 <__aeabi_uldivmod>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	461a      	mov	r2, r3
 8003b34:	4bb8      	ldr	r3, [pc, #736]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003b36:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	469b      	mov	fp, r3
 8003b44:	f04f 0c00 	mov.w	ip, #0
 8003b48:	46d9      	mov	r9, fp
 8003b4a:	46e2      	mov	sl, ip
 8003b4c:	eb19 0309 	adds.w	r3, r9, r9
 8003b50:	eb4a 040a 	adc.w	r4, sl, sl
 8003b54:	4699      	mov	r9, r3
 8003b56:	46a2      	mov	sl, r4
 8003b58:	eb19 090b 	adds.w	r9, r9, fp
 8003b5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b74:	4689      	mov	r9, r1
 8003b76:	4692      	mov	sl, r2
 8003b78:	eb1b 0509 	adds.w	r5, fp, r9
 8003b7c:	eb4c 060a 	adc.w	r6, ip, sl
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4619      	mov	r1, r3
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	f04f 0400 	mov.w	r4, #0
 8003b92:	0094      	lsls	r4, r2, #2
 8003b94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b98:	008b      	lsls	r3, r1, #2
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	f7fc fb25 	bl	80001f0 <__aeabi_uldivmod>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b9a      	ldr	r3, [pc, #616]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003bae:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2164      	movs	r1, #100	; 0x64
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	3332      	adds	r3, #50	; 0x32
 8003bc0:	4a95      	ldr	r2, [pc, #596]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	4498      	add	r8, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	469b      	mov	fp, r3
 8003bd2:	f04f 0c00 	mov.w	ip, #0
 8003bd6:	46d9      	mov	r9, fp
 8003bd8:	46e2      	mov	sl, ip
 8003bda:	eb19 0309 	adds.w	r3, r9, r9
 8003bde:	eb4a 040a 	adc.w	r4, sl, sl
 8003be2:	4699      	mov	r9, r3
 8003be4:	46a2      	mov	sl, r4
 8003be6:	eb19 090b 	adds.w	r9, r9, fp
 8003bea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c02:	4689      	mov	r9, r1
 8003c04:	4692      	mov	sl, r2
 8003c06:	eb1b 0509 	adds.w	r5, fp, r9
 8003c0a:	eb4c 060a 	adc.w	r6, ip, sl
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4619      	mov	r1, r3
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f04f 0400 	mov.w	r4, #0
 8003c20:	0094      	lsls	r4, r2, #2
 8003c22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c26:	008b      	lsls	r3, r1, #2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4623      	mov	r3, r4
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	4631      	mov	r1, r6
 8003c30:	f7fc fade 	bl	80001f0 <__aeabi_uldivmod>
 8003c34:	4603      	mov	r3, r0
 8003c36:	460c      	mov	r4, r1
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b77      	ldr	r3, [pc, #476]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	2164      	movs	r1, #100	; 0x64
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	3332      	adds	r3, #50	; 0x32
 8003c4e:	4a72      	ldr	r2, [pc, #456]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4442      	add	r2, r8
 8003c60:	609a      	str	r2, [r3, #8]
 8003c62:	e0d0      	b.n	8003e06 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c64:	f7fe fe16 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8003c68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	469a      	mov	sl, r3
 8003c6e:	f04f 0b00 	mov.w	fp, #0
 8003c72:	46d0      	mov	r8, sl
 8003c74:	46d9      	mov	r9, fp
 8003c76:	eb18 0308 	adds.w	r3, r8, r8
 8003c7a:	eb49 0409 	adc.w	r4, r9, r9
 8003c7e:	4698      	mov	r8, r3
 8003c80:	46a1      	mov	r9, r4
 8003c82:	eb18 080a 	adds.w	r8, r8, sl
 8003c86:	eb49 090b 	adc.w	r9, r9, fp
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c9e:	4688      	mov	r8, r1
 8003ca0:	4691      	mov	r9, r2
 8003ca2:	eb1a 0508 	adds.w	r5, sl, r8
 8003ca6:	eb4b 0609 	adc.w	r6, fp, r9
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	f04f 0400 	mov.w	r4, #0
 8003cbc:	0094      	lsls	r4, r2, #2
 8003cbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cc2:	008b      	lsls	r3, r1, #2
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	4631      	mov	r1, r6
 8003ccc:	f7fc fa90 	bl	80001f0 <__aeabi_uldivmod>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	469b      	mov	fp, r3
 8003ce6:	f04f 0c00 	mov.w	ip, #0
 8003cea:	46d9      	mov	r9, fp
 8003cec:	46e2      	mov	sl, ip
 8003cee:	eb19 0309 	adds.w	r3, r9, r9
 8003cf2:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	46a2      	mov	sl, r4
 8003cfa:	eb19 090b 	adds.w	r9, r9, fp
 8003cfe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d16:	4689      	mov	r9, r1
 8003d18:	4692      	mov	sl, r2
 8003d1a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d1e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4619      	mov	r1, r3
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	0094      	lsls	r4, r2, #2
 8003d36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d3a:	008b      	lsls	r3, r1, #2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	4628      	mov	r0, r5
 8003d42:	4631      	mov	r1, r6
 8003d44:	f7fc fa54 	bl	80001f0 <__aeabi_uldivmod>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003d50:	fba3 1302 	umull	r1, r3, r3, r2
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	2164      	movs	r1, #100	; 0x64
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	3332      	adds	r3, #50	; 0x32
 8003d62:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6e:	4498      	add	r8, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	469b      	mov	fp, r3
 8003d74:	f04f 0c00 	mov.w	ip, #0
 8003d78:	46d9      	mov	r9, fp
 8003d7a:	46e2      	mov	sl, ip
 8003d7c:	eb19 0309 	adds.w	r3, r9, r9
 8003d80:	eb4a 040a 	adc.w	r4, sl, sl
 8003d84:	4699      	mov	r9, r3
 8003d86:	46a2      	mov	sl, r4
 8003d88:	eb19 090b 	adds.w	r9, r9, fp
 8003d8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d90:	f04f 0100 	mov.w	r1, #0
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da4:	4689      	mov	r9, r1
 8003da6:	4692      	mov	sl, r2
 8003da8:	eb1b 0509 	adds.w	r5, fp, r9
 8003dac:	eb4c 060a 	adc.w	r6, ip, sl
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	0094      	lsls	r4, r2, #2
 8003dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc8:	008b      	lsls	r3, r1, #2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4623      	mov	r3, r4
 8003dce:	4628      	mov	r0, r5
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	f7fc fa0d 	bl	80001f0 <__aeabi_uldivmod>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003dde:	fba3 1302 	umull	r1, r3, r3, r2
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2164      	movs	r1, #100	; 0x64
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	3332      	adds	r3, #50	; 0x32
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <UART_SetConfig+0x6f4>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4442      	add	r2, r8
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	e7ff      	b.n	8003e06 <UART_SetConfig+0x6e2>
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40011400 	.word	0x40011400
 8003e18:	51eb851f 	.word	0x51eb851f

08003e1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2e:	2b84      	cmp	r3, #132	; 0x84
 8003e30:	d005      	beq.n	8003e3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3303      	adds	r3, #3
 8003e3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e50:	f000 fada 	bl	8004408 <vTaskStartScheduler>
  
  return osOK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5c:	b089      	sub	sp, #36	; 0x24
 8003e5e:	af04      	add	r7, sp, #16
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <osThreadCreate+0x54>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01c      	beq.n	8003eae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685c      	ldr	r4, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681d      	ldr	r5, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691e      	ldr	r6, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff ffc8 	bl	8003e1c <makeFreeRtosPriority>
 8003e8c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e96:	9202      	str	r2, [sp, #8]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	9100      	str	r1, [sp, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4632      	mov	r2, r6
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 f8ed 	bl	8004082 <xTaskCreateStatic>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e01c      	b.n	8003ee8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685c      	ldr	r4, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eba:	b29e      	uxth	r6, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ffaa 	bl	8003e1c <makeFreeRtosPriority>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	9200      	str	r2, [sp, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	4632      	mov	r2, r6
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 f92c 	bl	8004136 <xTaskCreate>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d001      	beq.n	8003ee8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ef2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <osDelay+0x16>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	e000      	b.n	8003f0a <osDelay+0x18>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fa48 	bl	80043a0 <vTaskDelay>
  
  return osOK;
 8003f10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f103 0208 	add.w	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f103 0208 	add.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0208 	add.w	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d103      	bne.n	8003fdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00c      	b.n	8003ff6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <vListInsert+0x2e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d2f6      	bcs.n	8003fe4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6892      	ldr	r2, [r2, #8]
 8004044:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6852      	ldr	r2, [r2, #4]
 800404e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d103      	bne.n	8004062 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004082:	b580      	push	{r7, lr}
 8004084:	b08e      	sub	sp, #56	; 0x38
 8004086:	af04      	add	r7, sp, #16
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	e7fe      	b.n	80040a8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <xTaskCreateStatic+0x42>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	e7fe      	b.n	80040c2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040c4:	2354      	movs	r3, #84	; 0x54
 80040c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b54      	cmp	r3, #84	; 0x54
 80040cc:	d009      	beq.n	80040e2 <xTaskCreateStatic+0x60>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	e7fe      	b.n	80040e0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01e      	beq.n	8004128 <xTaskCreateStatic+0xa6>
 80040ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004102:	2300      	movs	r3, #0
 8004104:	9303      	str	r3, [sp, #12]
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	9302      	str	r3, [sp, #8]
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f850 	bl	80041c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004122:	f000 f8d3 	bl	80042cc <prvAddNewTaskToReadyList>
 8004126:	e001      	b.n	800412c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800412c:	697b      	ldr	r3, [r7, #20]
	}
 800412e:	4618      	mov	r0, r3
 8004130:	3728      	adds	r7, #40	; 0x28
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004136:	b580      	push	{r7, lr}
 8004138:	b08c      	sub	sp, #48	; 0x30
 800413a:	af04      	add	r7, sp, #16
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4618      	mov	r0, r3
 800414c:	f000 feb2 	bl	8004eb4 <pvPortMalloc>
 8004150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004158:	2054      	movs	r0, #84	; 0x54
 800415a:	f000 feab 	bl	8004eb4 <pvPortMalloc>
 800415e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
 800416c:	e005      	b.n	800417a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f000 ff62 	bl	8005038 <vPortFree>
 8004174:	e001      	b.n	800417a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	2300      	movs	r3, #0
 800418c:	9303      	str	r3, [sp, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	9302      	str	r3, [sp, #8]
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	9301      	str	r3, [sp, #4]
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f80e 	bl	80041c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041a4:	69f8      	ldr	r0, [r7, #28]
 80041a6:	f000 f891 	bl	80042cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e002      	b.n	80041b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041b6:	69bb      	ldr	r3, [r7, #24]
	}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041d8:	3b01      	subs	r3, #1
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f023 0307 	bic.w	r3, r3, #7
 80041e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <prvInitialiseNewTask+0x46>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e7fe      	b.n	8004204 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01f      	beq.n	800424c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	e012      	b.n	8004238 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	7819      	ldrb	r1, [r3, #0]
 800421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	3334      	adds	r3, #52	; 0x34
 8004222:	460a      	mov	r2, r1
 8004224:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	d9e9      	bls.n	8004212 <prvInitialiseNewTask+0x52>
 800423e:	e000      	b.n	8004242 <prvInitialiseNewTask+0x82>
			{
				break;
 8004240:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800424a:	e003      	b.n	8004254 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	2b06      	cmp	r3, #6
 8004258:	d901      	bls.n	800425e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800425a:	2306      	movs	r3, #6
 800425c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004262:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	2200      	movs	r2, #0
 800426e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	3304      	adds	r3, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fe70 	bl	8003f5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	3318      	adds	r3, #24
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fe6b 	bl	8003f5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004288:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f1c3 0207 	rsb	r2, r3, #7
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004298:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2200      	movs	r2, #0
 800429e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	69b8      	ldr	r0, [r7, #24]
 80042ae:	f000 fbfd 	bl	8004aac <pxPortInitialiseStack>
 80042b2:	4602      	mov	r2, r0
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042c4:	bf00      	nop
 80042c6:	3720      	adds	r7, #32
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042d4:	f000 fd12 	bl	8004cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <prvAddNewTaskToReadyList+0xb8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	4a29      	ldr	r2, [pc, #164]	; (8004384 <prvAddNewTaskToReadyList+0xb8>)
 80042e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042e2:	4b29      	ldr	r3, [pc, #164]	; (8004388 <prvAddNewTaskToReadyList+0xbc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ea:	4a27      	ldr	r2, [pc, #156]	; (8004388 <prvAddNewTaskToReadyList+0xbc>)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <prvAddNewTaskToReadyList+0xb8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d110      	bne.n	800431a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042f8:	f000 fab8 	bl	800486c <prvInitialiseTaskLists>
 80042fc:	e00d      	b.n	800431a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <prvAddNewTaskToReadyList+0xc0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004306:	4b20      	ldr	r3, [pc, #128]	; (8004388 <prvAddNewTaskToReadyList+0xbc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	429a      	cmp	r2, r3
 8004312:	d802      	bhi.n	800431a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <prvAddNewTaskToReadyList+0xbc>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <prvAddNewTaskToReadyList+0xc4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <prvAddNewTaskToReadyList+0xc4>)
 8004322:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	2201      	movs	r2, #1
 800432a:	409a      	lsls	r2, r3
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <prvAddNewTaskToReadyList+0xc8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	4a18      	ldr	r2, [pc, #96]	; (8004394 <prvAddNewTaskToReadyList+0xc8>)
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4a15      	ldr	r2, [pc, #84]	; (8004398 <prvAddNewTaskToReadyList+0xcc>)
 8004344:	441a      	add	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7ff fe11 	bl	8003f74 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004352:	f000 fd01 	bl	8004d58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <prvAddNewTaskToReadyList+0xc0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <prvAddNewTaskToReadyList+0xbc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d207      	bcs.n	800437c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <prvAddNewTaskToReadyList+0xd0>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000408 	.word	0x20000408
 8004388:	20000308 	.word	0x20000308
 800438c:	20000414 	.word	0x20000414
 8004390:	20000424 	.word	0x20000424
 8004394:	20000410 	.word	0x20000410
 8004398:	2000030c 	.word	0x2000030c
 800439c:	e000ed04 	.word	0xe000ed04

080043a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <vTaskDelay+0x60>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <vTaskDelay+0x2e>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	e7fe      	b.n	80043cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80043ce:	f000 f879 	bl	80044c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043d2:	2100      	movs	r1, #0
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb03 	bl	80049e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043da:	f000 f881 	bl	80044e0 <xTaskResumeAll>
 80043de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <vTaskDelay+0x64>)
 80043e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000430 	.word	0x20000430
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004416:	463a      	mov	r2, r7
 8004418:	1d39      	adds	r1, r7, #4
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f9b4 	bl	800078c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	9202      	str	r2, [sp, #8]
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	2300      	movs	r3, #0
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2300      	movs	r3, #0
 8004434:	460a      	mov	r2, r1
 8004436:	491d      	ldr	r1, [pc, #116]	; (80044ac <vTaskStartScheduler+0xa4>)
 8004438:	481d      	ldr	r0, [pc, #116]	; (80044b0 <vTaskStartScheduler+0xa8>)
 800443a:	f7ff fe22 	bl	8004082 <xTaskCreateStatic>
 800443e:	4602      	mov	r2, r0
 8004440:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <vTaskStartScheduler+0xac>)
 8004442:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <vTaskStartScheduler+0xac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e001      	b.n	8004456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d115      	bne.n	8004488 <vTaskStartScheduler+0x80>
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <vTaskStartScheduler+0xb0>)
 8004470:	f04f 32ff 	mov.w	r2, #4294967295
 8004474:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <vTaskStartScheduler+0xb4>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <vTaskStartScheduler+0xb8>)
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004482:	f000 fb9d 	bl	8004bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004486:	e00d      	b.n	80044a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d109      	bne.n	80044a4 <vTaskStartScheduler+0x9c>
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e7fe      	b.n	80044a2 <vTaskStartScheduler+0x9a>
}
 80044a4:	bf00      	nop
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08005c60 	.word	0x08005c60
 80044b0:	0800483d 	.word	0x0800483d
 80044b4:	2000042c 	.word	0x2000042c
 80044b8:	20000428 	.word	0x20000428
 80044bc:	20000414 	.word	0x20000414
 80044c0:	2000040c 	.word	0x2000040c

080044c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <vTaskSuspendAll+0x18>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	4a03      	ldr	r2, [pc, #12]	; (80044dc <vTaskSuspendAll+0x18>)
 80044d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	20000430 	.word	0x20000430

080044e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ee:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <xTaskResumeAll+0x114>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <xTaskResumeAll+0x2a>
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	e7fe      	b.n	8004508 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800450a:	f000 fbf7 	bl	8004cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800450e:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <xTaskResumeAll+0x114>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3b01      	subs	r3, #1
 8004514:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <xTaskResumeAll+0x114>)
 8004516:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <xTaskResumeAll+0x114>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d161      	bne.n	80045e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <xTaskResumeAll+0x118>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d05d      	beq.n	80045e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004528:	e02e      	b.n	8004588 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452a:	4b34      	ldr	r3, [pc, #208]	; (80045fc <xTaskResumeAll+0x11c>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3318      	adds	r3, #24
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fd79 	bl	800402e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fd74 	bl	800402e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <xTaskResumeAll+0x120>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <xTaskResumeAll+0x120>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a27      	ldr	r2, [pc, #156]	; (8004604 <xTaskResumeAll+0x124>)
 8004566:	441a      	add	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7ff fd00 	bl	8003f74 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b23      	ldr	r3, [pc, #140]	; (8004608 <xTaskResumeAll+0x128>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <xTaskResumeAll+0x12c>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004588:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <xTaskResumeAll+0x11c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1cc      	bne.n	800452a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004596:	f000 fa03 	bl	80049a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800459a:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <xTaskResumeAll+0x130>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d010      	beq.n	80045c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045a6:	f000 f837 	bl	8004618 <xTaskIncrementTick>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045b0:	4b16      	ldr	r3, [pc, #88]	; (800460c <xTaskResumeAll+0x12c>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f1      	bne.n	80045a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <xTaskResumeAll+0x130>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <xTaskResumeAll+0x12c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <xTaskResumeAll+0x134>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045e4:	f000 fbb8 	bl	8004d58 <vPortExitCritical>

	return xAlreadyYielded;
 80045e8:	68bb      	ldr	r3, [r7, #8]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000430 	.word	0x20000430
 80045f8:	20000408 	.word	0x20000408
 80045fc:	200003c8 	.word	0x200003c8
 8004600:	20000410 	.word	0x20000410
 8004604:	2000030c 	.word	0x2000030c
 8004608:	20000308 	.word	0x20000308
 800460c:	2000041c 	.word	0x2000041c
 8004610:	20000418 	.word	0x20000418
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004622:	4b4e      	ldr	r3, [pc, #312]	; (800475c <xTaskIncrementTick+0x144>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8087 	bne.w	800473a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <xTaskIncrementTick+0x148>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004634:	4a4a      	ldr	r2, [pc, #296]	; (8004760 <xTaskIncrementTick+0x148>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11f      	bne.n	8004680 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <xTaskIncrementTick+0x14c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <xTaskIncrementTick+0x46>
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	e7fe      	b.n	800465c <xTaskIncrementTick+0x44>
 800465e:	4b41      	ldr	r3, [pc, #260]	; (8004764 <xTaskIncrementTick+0x14c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	4b40      	ldr	r3, [pc, #256]	; (8004768 <xTaskIncrementTick+0x150>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3e      	ldr	r2, [pc, #248]	; (8004764 <xTaskIncrementTick+0x14c>)
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4a3e      	ldr	r2, [pc, #248]	; (8004768 <xTaskIncrementTick+0x150>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b3e      	ldr	r3, [pc, #248]	; (800476c <xTaskIncrementTick+0x154>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	4a3c      	ldr	r2, [pc, #240]	; (800476c <xTaskIncrementTick+0x154>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	f000 f990 	bl	80049a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004680:	4b3b      	ldr	r3, [pc, #236]	; (8004770 <xTaskIncrementTick+0x158>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	429a      	cmp	r2, r3
 8004688:	d348      	bcc.n	800471c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468a:	4b36      	ldr	r3, [pc, #216]	; (8004764 <xTaskIncrementTick+0x14c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <xTaskIncrementTick+0x158>)
 8004696:	f04f 32ff 	mov.w	r2, #4294967295
 800469a:	601a      	str	r2, [r3, #0]
					break;
 800469c:	e03e      	b.n	800471c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800469e:	4b31      	ldr	r3, [pc, #196]	; (8004764 <xTaskIncrementTick+0x14c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d203      	bcs.n	80046be <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046b6:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <xTaskIncrementTick+0x158>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046bc:	e02e      	b.n	800471c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fcb3 	bl	800402e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	3318      	adds	r3, #24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fcaa 	bl	800402e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	2201      	movs	r2, #1
 80046e0:	409a      	lsls	r2, r3
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <xTaskIncrementTick+0x15c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	4a22      	ldr	r2, [pc, #136]	; (8004774 <xTaskIncrementTick+0x15c>)
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <xTaskIncrementTick+0x160>)
 80046fa:	441a      	add	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7ff fc36 	bl	8003f74 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <xTaskIncrementTick+0x164>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	429a      	cmp	r2, r3
 8004714:	d3b9      	bcc.n	800468a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004716:	2301      	movs	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471a:	e7b6      	b.n	800468a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <xTaskIncrementTick+0x164>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	4915      	ldr	r1, [pc, #84]	; (8004778 <xTaskIncrementTick+0x160>)
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d907      	bls.n	8004744 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004734:	2301      	movs	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e004      	b.n	8004744 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <xTaskIncrementTick+0x168>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <xTaskIncrementTick+0x168>)
 8004742:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <xTaskIncrementTick+0x16c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004750:	697b      	ldr	r3, [r7, #20]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000430 	.word	0x20000430
 8004760:	2000040c 	.word	0x2000040c
 8004764:	200003c0 	.word	0x200003c0
 8004768:	200003c4 	.word	0x200003c4
 800476c:	20000420 	.word	0x20000420
 8004770:	20000428 	.word	0x20000428
 8004774:	20000410 	.word	0x20000410
 8004778:	2000030c 	.word	0x2000030c
 800477c:	20000308 	.word	0x20000308
 8004780:	20000418 	.word	0x20000418
 8004784:	2000041c 	.word	0x2000041c

08004788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <vTaskSwitchContext+0xa0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004796:	4b25      	ldr	r3, [pc, #148]	; (800482c <vTaskSwitchContext+0xa4>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800479c:	e03e      	b.n	800481c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800479e:	4b23      	ldr	r3, [pc, #140]	; (800482c <vTaskSwitchContext+0xa4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <vTaskSwitchContext+0xa8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	f1c3 031f 	rsb	r3, r3, #31
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	491e      	ldr	r1, [pc, #120]	; (8004834 <vTaskSwitchContext+0xac>)
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	e7fe      	b.n	80047e0 <vTaskSwitchContext+0x58>
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <vTaskSwitchContext+0xac>)
 80047ee:	4413      	add	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3308      	adds	r3, #8
 8004804:	429a      	cmp	r2, r3
 8004806:	d104      	bne.n	8004812 <vTaskSwitchContext+0x8a>
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a07      	ldr	r2, [pc, #28]	; (8004838 <vTaskSwitchContext+0xb0>)
 800481a:	6013      	str	r3, [r2, #0]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000430 	.word	0x20000430
 800482c:	2000041c 	.word	0x2000041c
 8004830:	20000410 	.word	0x20000410
 8004834:	2000030c 	.word	0x2000030c
 8004838:	20000308 	.word	0x20000308

0800483c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004844:	f000 f852 	bl	80048ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <prvIdleTask+0x28>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d9f9      	bls.n	8004844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <prvIdleTask+0x2c>)
 8004852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004860:	e7f0      	b.n	8004844 <prvIdleTask+0x8>
 8004862:	bf00      	nop
 8004864:	2000030c 	.word	0x2000030c
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	e00c      	b.n	8004892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <prvInitialiseTaskLists+0x60>)
 8004884:	4413      	add	r3, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fb47 	bl	8003f1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3301      	adds	r3, #1
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b06      	cmp	r3, #6
 8004896:	d9ef      	bls.n	8004878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004898:	480d      	ldr	r0, [pc, #52]	; (80048d0 <prvInitialiseTaskLists+0x64>)
 800489a:	f7ff fb3e 	bl	8003f1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800489e:	480d      	ldr	r0, [pc, #52]	; (80048d4 <prvInitialiseTaskLists+0x68>)
 80048a0:	f7ff fb3b 	bl	8003f1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048a4:	480c      	ldr	r0, [pc, #48]	; (80048d8 <prvInitialiseTaskLists+0x6c>)
 80048a6:	f7ff fb38 	bl	8003f1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048aa:	480c      	ldr	r0, [pc, #48]	; (80048dc <prvInitialiseTaskLists+0x70>)
 80048ac:	f7ff fb35 	bl	8003f1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048b0:	480b      	ldr	r0, [pc, #44]	; (80048e0 <prvInitialiseTaskLists+0x74>)
 80048b2:	f7ff fb32 	bl	8003f1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <prvInitialiseTaskLists+0x78>)
 80048b8:	4a05      	ldr	r2, [pc, #20]	; (80048d0 <prvInitialiseTaskLists+0x64>)
 80048ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <prvInitialiseTaskLists+0x7c>)
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <prvInitialiseTaskLists+0x68>)
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	2000030c 	.word	0x2000030c
 80048d0:	20000398 	.word	0x20000398
 80048d4:	200003ac 	.word	0x200003ac
 80048d8:	200003c8 	.word	0x200003c8
 80048dc:	200003dc 	.word	0x200003dc
 80048e0:	200003f4 	.word	0x200003f4
 80048e4:	200003c0 	.word	0x200003c0
 80048e8:	200003c4 	.word	0x200003c4

080048ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048f2:	e019      	b.n	8004928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048f4:	f000 fa02 	bl	8004cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <prvCheckTasksWaitingTermination+0x4c>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fb92 	bl	800402e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <prvCheckTasksWaitingTermination+0x50>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3b01      	subs	r3, #1
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <prvCheckTasksWaitingTermination+0x50>)
 8004912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <prvCheckTasksWaitingTermination+0x54>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3b01      	subs	r3, #1
 800491a:	4a09      	ldr	r2, [pc, #36]	; (8004940 <prvCheckTasksWaitingTermination+0x54>)
 800491c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800491e:	f000 fa1b 	bl	8004d58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f80e 	bl	8004944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <prvCheckTasksWaitingTermination+0x54>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e1      	bne.n	80048f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	200003dc 	.word	0x200003dc
 800493c:	20000408 	.word	0x20000408
 8004940:	200003f0 	.word	0x200003f0

08004944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fb6c 	bl	8005038 <vPortFree>
				vPortFree( pxTCB );
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fb69 	bl	8005038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004966:	e017      	b.n	8004998 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496e:	2b01      	cmp	r3, #1
 8004970:	d103      	bne.n	800497a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb60 	bl	8005038 <vPortFree>
	}
 8004978:	e00e      	b.n	8004998 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004980:	2b02      	cmp	r3, #2
 8004982:	d009      	beq.n	8004998 <prvDeleteTCB+0x54>
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e7fe      	b.n	8004996 <prvDeleteTCB+0x52>
	}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <prvResetNextTaskUnblockTime+0x38>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d104      	bne.n	80049ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <prvResetNextTaskUnblockTime+0x3c>)
 80049b2:	f04f 32ff 	mov.w	r2, #4294967295
 80049b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049b8:	e008      	b.n	80049cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <prvResetNextTaskUnblockTime+0x38>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <prvResetNextTaskUnblockTime+0x3c>)
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	200003c0 	.word	0x200003c0
 80049dc:	20000428 	.word	0x20000428

080049e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049ea:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f0:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fb19 	bl	800402e <uxListRemove>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a02:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	2201      	movs	r2, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4013      	ands	r3, r2
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d10a      	bne.n	8004a38 <prvAddCurrentTaskToDelayedList+0x58>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	481a      	ldr	r0, [pc, #104]	; (8004a9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a32:	f7ff fa9f 	bl	8003f74 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a36:	e026      	b.n	8004a86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d209      	bcs.n	8004a64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7ff faad 	bl	8003fbc <vListInsert>
}
 8004a62:	e010      	b.n	8004a86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7ff faa3 	bl	8003fbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d202      	bcs.n	8004a86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a80:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6013      	str	r3, [r2, #0]
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	2000040c 	.word	0x2000040c
 8004a94:	20000308 	.word	0x20000308
 8004a98:	20000410 	.word	0x20000410
 8004a9c:	200003f4 	.word	0x200003f4
 8004aa0:	200003c4 	.word	0x200003c4
 8004aa4:	200003c0 	.word	0x200003c0
 8004aa8:	20000428 	.word	0x20000428

08004aac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b04      	subs	r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b04      	subs	r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004adc:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <pxPortInitialiseStack+0x64>)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b14      	subs	r3, #20
 8004ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3b04      	subs	r3, #4
 8004af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f06f 0202 	mvn.w	r2, #2
 8004afa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b20      	subs	r3, #32
 8004b00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b02:	68fb      	ldr	r3, [r7, #12]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	08004b15 	.word	0x08004b15

08004b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b1e:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <prvTaskExitError+0x50>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d009      	beq.n	8004b3c <prvTaskExitError+0x28>
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e7fe      	b.n	8004b3a <prvTaskExitError+0x26>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b4e:	bf00      	nop
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0fc      	beq.n	8004b50 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	2000000c 	.word	0x2000000c
	...

08004b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <pxCurrentTCBConst2>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7a:	f380 8809 	msr	PSP, r0
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	4770      	bx	lr
 8004b8c:	f3af 8000 	nop.w

08004b90 <pxCurrentTCBConst2>:
 8004b90:	20000308 	.word	0x20000308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop

08004b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b98:	4808      	ldr	r0, [pc, #32]	; (8004bbc <prvPortStartFirstTask+0x24>)
 8004b9a:	6800      	ldr	r0, [r0, #0]
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f380 8808 	msr	MSP, r0
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f380 8814 	msr	CONTROL, r0
 8004baa:	b662      	cpsie	i
 8004bac:	b661      	cpsie	f
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	df00      	svc	0
 8004bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bba:	bf00      	nop
 8004bbc:	e000ed08 	.word	0xe000ed08

08004bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bc6:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <xPortStartScheduler+0x118>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a44      	ldr	r2, [pc, #272]	; (8004cdc <xPortStartScheduler+0x11c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d109      	bne.n	8004be4 <xPortStartScheduler+0x24>
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e7fe      	b.n	8004be2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004be4:	4b3c      	ldr	r3, [pc, #240]	; (8004cd8 <xPortStartScheduler+0x118>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <xPortStartScheduler+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d109      	bne.n	8004c02 <xPortStartScheduler+0x42>
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e7fe      	b.n	8004c00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c02:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <xPortStartScheduler+0x124>)
 8004c04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <xPortStartScheduler+0x128>)
 8004c28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c2a:	4b30      	ldr	r3, [pc, #192]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c2c:	2207      	movs	r2, #7
 8004c2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c30:	e009      	b.n	8004c46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c3c:	78fb      	ldrb	r3, [r7, #3]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d0ef      	beq.n	8004c32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d009      	beq.n	8004c72 <xPortStartScheduler+0xb2>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	e7fe      	b.n	8004c70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <xPortStartScheduler+0x130>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <xPortStartScheduler+0x130>)
 8004c96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c9c:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <xPortStartScheduler+0x130>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <xPortStartScheduler+0x130>)
 8004ca2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ca6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ca8:	f000 f8d6 	bl	8004e58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cb2:	f000 f8f5 	bl	8004ea0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004cbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cc2:	f7ff ff69 	bl	8004b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cc6:	f7ff fd5f 	bl	8004788 <vTaskSwitchContext>
	prvTaskExitError();
 8004cca:	f7ff ff23 	bl	8004b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	e000ed00 	.word	0xe000ed00
 8004cdc:	410fc271 	.word	0x410fc271
 8004ce0:	410fc270 	.word	0x410fc270
 8004ce4:	e000e400 	.word	0xe000e400
 8004ce8:	20000434 	.word	0x20000434
 8004cec:	20000438 	.word	0x20000438
 8004cf0:	e000ed20 	.word	0xe000ed20
 8004cf4:	2000000c 	.word	0x2000000c
 8004cf8:	e000ef34 	.word	0xe000ef34

08004cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <vPortEnterCritical+0x54>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <vPortEnterCritical+0x54>)
 8004d1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <vPortEnterCritical+0x54>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10e      	bne.n	8004d44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <vPortEnterCritical+0x58>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <vPortEnterCritical+0x48>
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	e7fe      	b.n	8004d42 <vPortEnterCritical+0x46>
	}
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	e000ed04 	.word	0xe000ed04

08004d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <vPortExitCritical+0x4c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <vPortExitCritical+0x22>
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e7fe      	b.n	8004d78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <vPortExitCritical+0x4c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	4a08      	ldr	r2, [pc, #32]	; (8004da4 <vPortExitCritical+0x4c>)
 8004d82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <vPortExitCritical+0x4c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <vPortExitCritical+0x3e>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	2000000c 	.word	0x2000000c
	...

08004db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004db0:	f3ef 8009 	mrs	r0, PSP
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <pxCurrentTCBConst>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f01e 0f10 	tst.w	lr, #16
 8004dc0:	bf08      	it	eq
 8004dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dca:	6010      	str	r0, [r2, #0]
 8004dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dd4:	f380 8811 	msr	BASEPRI, r0
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f7ff fcd2 	bl	8004788 <vTaskSwitchContext>
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f380 8811 	msr	BASEPRI, r0
 8004dec:	bc09      	pop	{r0, r3}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df6:	f01e 0f10 	tst.w	lr, #16
 8004dfa:	bf08      	it	eq
 8004dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e00:	f380 8809 	msr	PSP, r0
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst>:
 8004e10:	20000308 	.word	0x20000308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e30:	f7ff fbf2 	bl	8004618 <xTaskIncrementTick>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <SysTick_Handler+0x3c>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	2300      	movs	r3, #0
 8004e44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <vPortSetupTimerInterrupt+0x34>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <vPortSetupTimerInterrupt+0x38>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <vPortSetupTimerInterrupt+0x3c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <vPortSetupTimerInterrupt+0x40>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <vPortSetupTimerInterrupt+0x44>)
 8004e76:	3b01      	subs	r3, #1
 8004e78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e7a:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <vPortSetupTimerInterrupt+0x34>)
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	601a      	str	r2, [r3, #0]
}
 8004e80:	bf00      	nop
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	e000e010 	.word	0xe000e010
 8004e90:	e000e018 	.word	0xe000e018
 8004e94:	20000000 	.word	0x20000000
 8004e98:	10624dd3 	.word	0x10624dd3
 8004e9c:	e000e014 	.word	0xe000e014

08004ea0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ea0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004eb0 <vPortEnableVFP+0x10>
 8004ea4:	6801      	ldr	r1, [r0, #0]
 8004ea6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004eaa:	6001      	str	r1, [r0, #0]
 8004eac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004eae:	bf00      	nop
 8004eb0:	e000ed88 	.word	0xe000ed88

08004eb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ec0:	f7ff fb00 	bl	80044c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ec4:	4b57      	ldr	r3, [pc, #348]	; (8005024 <pvPortMalloc+0x170>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ecc:	f000 f90c 	bl	80050e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ed0:	4b55      	ldr	r3, [pc, #340]	; (8005028 <pvPortMalloc+0x174>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f040 808c 	bne.w	8004ff6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4413      	add	r3, r2
 8004eea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f023 0307 	bic.w	r3, r3, #7
 8004efc:	3308      	adds	r3, #8
 8004efe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <pvPortMalloc+0x6a>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e7fe      	b.n	8004f1c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d068      	beq.n	8004ff6 <pvPortMalloc+0x142>
 8004f24:	4b41      	ldr	r3, [pc, #260]	; (800502c <pvPortMalloc+0x178>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d863      	bhi.n	8004ff6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f2e:	4b40      	ldr	r3, [pc, #256]	; (8005030 <pvPortMalloc+0x17c>)
 8004f30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f32:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <pvPortMalloc+0x17c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f38:	e004      	b.n	8004f44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d903      	bls.n	8004f56 <pvPortMalloc+0xa2>
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f1      	bne.n	8004f3a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f56:	4b33      	ldr	r3, [pc, #204]	; (8005024 <pvPortMalloc+0x170>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d04a      	beq.n	8004ff6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2208      	movs	r2, #8
 8004f66:	4413      	add	r3, r2
 8004f68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	1ad2      	subs	r2, r2, r3
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d91e      	bls.n	8004fc0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <pvPortMalloc+0xf4>
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	e7fe      	b.n	8004fa6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fba:	69b8      	ldr	r0, [r7, #24]
 8004fbc:	f000 f8f6 	bl	80051ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	; (800502c <pvPortMalloc+0x178>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	4a18      	ldr	r2, [pc, #96]	; (800502c <pvPortMalloc+0x178>)
 8004fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <pvPortMalloc+0x178>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b18      	ldr	r3, [pc, #96]	; (8005034 <pvPortMalloc+0x180>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d203      	bcs.n	8004fe2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <pvPortMalloc+0x178>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <pvPortMalloc+0x180>)
 8004fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <pvPortMalloc+0x174>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ff6:	f7ff fa73 	bl	80044e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	2b00      	cmp	r3, #0
 8005002:	d009      	beq.n	8005018 <pvPortMalloc+0x164>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e7fe      	b.n	8005016 <pvPortMalloc+0x162>
	return pvReturn;
 8005018:	69fb      	ldr	r3, [r7, #28]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3728      	adds	r7, #40	; 0x28
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20004044 	.word	0x20004044
 8005028:	20004050 	.word	0x20004050
 800502c:	20004048 	.word	0x20004048
 8005030:	2000403c 	.word	0x2000403c
 8005034:	2000404c 	.word	0x2000404c

08005038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d046      	beq.n	80050d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800504a:	2308      	movs	r3, #8
 800504c:	425b      	negs	r3, r3
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <vPortFree+0xa8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <vPortFree+0x42>
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e7fe      	b.n	8005078 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <vPortFree+0x5e>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	e7fe      	b.n	8005094 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <vPortFree+0xa8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d019      	beq.n	80050d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d115      	bne.n	80050d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortFree+0xa8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	43db      	mvns	r3, r3
 80050b6:	401a      	ands	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050bc:	f7ff fa02 	bl	80044c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <vPortFree+0xac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	4a06      	ldr	r2, [pc, #24]	; (80050e4 <vPortFree+0xac>)
 80050cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ce:	6938      	ldr	r0, [r7, #16]
 80050d0:	f000 f86c 	bl	80051ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80050d4:	f7ff fa04 	bl	80044e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050d8:	bf00      	nop
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20004050 	.word	0x20004050
 80050e4:	20004048 	.word	0x20004048

080050e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050f4:	4b27      	ldr	r3, [pc, #156]	; (8005194 <prvHeapInit+0xac>)
 80050f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3307      	adds	r3, #7
 8005106:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <prvHeapInit+0xac>)
 8005118:	4413      	add	r3, r2
 800511a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <prvHeapInit+0xb0>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005126:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <prvHeapInit+0xb0>)
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	4413      	add	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005134:	2208      	movs	r2, #8
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <prvHeapInit+0xb4>)
 8005148:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <prvHeapInit+0xb4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2200      	movs	r2, #0
 8005150:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <prvHeapInit+0xb4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <prvHeapInit+0xb4>)
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <prvHeapInit+0xb8>)
 8005176:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <prvHeapInit+0xbc>)
 800517e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <prvHeapInit+0xc0>)
 8005182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	2000043c 	.word	0x2000043c
 8005198:	2000403c 	.word	0x2000403c
 800519c:	20004044 	.word	0x20004044
 80051a0:	2000404c 	.word	0x2000404c
 80051a4:	20004048 	.word	0x20004048
 80051a8:	20004050 	.word	0x20004050

080051ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051b4:	4b28      	ldr	r3, [pc, #160]	; (8005258 <prvInsertBlockIntoFreeList+0xac>)
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e002      	b.n	80051c0 <prvInsertBlockIntoFreeList+0x14>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d8f7      	bhi.n	80051ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d108      	bne.n	80051ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	441a      	add	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	441a      	add	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d118      	bne.n	8005234 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <prvInsertBlockIntoFreeList+0xb0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d00d      	beq.n	800522a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e008      	b.n	800523c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <prvInsertBlockIntoFreeList+0xb0>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e003      	b.n	800523c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d002      	beq.n	800524a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	2000403c 	.word	0x2000403c
 800525c:	20004044 	.word	0x20004044

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	; (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000010 	.word	0x20000010

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4e0d      	ldr	r6, [pc, #52]	; (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	; (80052a8 <__libc_init_array+0x3c>)
 8005272:	1ba4      	subs	r4, r4, r6
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2500      	movs	r5, #0
 8005278:	42a5      	cmp	r5, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4e0b      	ldr	r6, [pc, #44]	; (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	; (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 fc88 	bl	8005b94 <_init>
 8005284:	1ba4      	subs	r4, r4, r6
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2500      	movs	r5, #0
 800528a:	42a5      	cmp	r5, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005294:	4798      	blx	r3
 8005296:	3501      	adds	r5, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800529e:	4798      	blx	r3
 80052a0:	3501      	adds	r5, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08005cec 	.word	0x08005cec
 80052a8:	08005cec 	.word	0x08005cec
 80052ac:	08005cec 	.word	0x08005cec
 80052b0:	08005cf0 	.word	0x08005cf0

080052b4 <memset>:
 80052b4:	4402      	add	r2, r0
 80052b6:	4603      	mov	r3, r0
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d100      	bne.n	80052be <memset+0xa>
 80052bc:	4770      	bx	lr
 80052be:	f803 1b01 	strb.w	r1, [r3], #1
 80052c2:	e7f9      	b.n	80052b8 <memset+0x4>

080052c4 <_puts_r>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	460e      	mov	r6, r1
 80052c8:	4605      	mov	r5, r0
 80052ca:	b118      	cbz	r0, 80052d4 <_puts_r+0x10>
 80052cc:	6983      	ldr	r3, [r0, #24]
 80052ce:	b90b      	cbnz	r3, 80052d4 <_puts_r+0x10>
 80052d0:	f000 fa0c 	bl	80056ec <__sinit>
 80052d4:	69ab      	ldr	r3, [r5, #24]
 80052d6:	68ac      	ldr	r4, [r5, #8]
 80052d8:	b913      	cbnz	r3, 80052e0 <_puts_r+0x1c>
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 fa06 	bl	80056ec <__sinit>
 80052e0:	4b23      	ldr	r3, [pc, #140]	; (8005370 <_puts_r+0xac>)
 80052e2:	429c      	cmp	r4, r3
 80052e4:	d117      	bne.n	8005316 <_puts_r+0x52>
 80052e6:	686c      	ldr	r4, [r5, #4]
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	071b      	lsls	r3, r3, #28
 80052ec:	d51d      	bpl.n	800532a <_puts_r+0x66>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	b1db      	cbz	r3, 800532a <_puts_r+0x66>
 80052f2:	3e01      	subs	r6, #1
 80052f4:	68a3      	ldr	r3, [r4, #8]
 80052f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	b9e9      	cbnz	r1, 800533c <_puts_r+0x78>
 8005300:	2b00      	cmp	r3, #0
 8005302:	da2e      	bge.n	8005362 <_puts_r+0x9e>
 8005304:	4622      	mov	r2, r4
 8005306:	210a      	movs	r1, #10
 8005308:	4628      	mov	r0, r5
 800530a:	f000 f83f 	bl	800538c <__swbuf_r>
 800530e:	3001      	adds	r0, #1
 8005310:	d011      	beq.n	8005336 <_puts_r+0x72>
 8005312:	200a      	movs	r0, #10
 8005314:	e011      	b.n	800533a <_puts_r+0x76>
 8005316:	4b17      	ldr	r3, [pc, #92]	; (8005374 <_puts_r+0xb0>)
 8005318:	429c      	cmp	r4, r3
 800531a:	d101      	bne.n	8005320 <_puts_r+0x5c>
 800531c:	68ac      	ldr	r4, [r5, #8]
 800531e:	e7e3      	b.n	80052e8 <_puts_r+0x24>
 8005320:	4b15      	ldr	r3, [pc, #84]	; (8005378 <_puts_r+0xb4>)
 8005322:	429c      	cmp	r4, r3
 8005324:	bf08      	it	eq
 8005326:	68ec      	ldreq	r4, [r5, #12]
 8005328:	e7de      	b.n	80052e8 <_puts_r+0x24>
 800532a:	4621      	mov	r1, r4
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f87f 	bl	8005430 <__swsetup_r>
 8005332:	2800      	cmp	r0, #0
 8005334:	d0dd      	beq.n	80052f2 <_puts_r+0x2e>
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	bd70      	pop	{r4, r5, r6, pc}
 800533c:	2b00      	cmp	r3, #0
 800533e:	da04      	bge.n	800534a <_puts_r+0x86>
 8005340:	69a2      	ldr	r2, [r4, #24]
 8005342:	429a      	cmp	r2, r3
 8005344:	dc06      	bgt.n	8005354 <_puts_r+0x90>
 8005346:	290a      	cmp	r1, #10
 8005348:	d004      	beq.n	8005354 <_puts_r+0x90>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	6022      	str	r2, [r4, #0]
 8005350:	7019      	strb	r1, [r3, #0]
 8005352:	e7cf      	b.n	80052f4 <_puts_r+0x30>
 8005354:	4622      	mov	r2, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f818 	bl	800538c <__swbuf_r>
 800535c:	3001      	adds	r0, #1
 800535e:	d1c9      	bne.n	80052f4 <_puts_r+0x30>
 8005360:	e7e9      	b.n	8005336 <_puts_r+0x72>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	200a      	movs	r0, #10
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	6022      	str	r2, [r4, #0]
 800536a:	7018      	strb	r0, [r3, #0]
 800536c:	e7e5      	b.n	800533a <_puts_r+0x76>
 800536e:	bf00      	nop
 8005370:	08005ca4 	.word	0x08005ca4
 8005374:	08005cc4 	.word	0x08005cc4
 8005378:	08005c84 	.word	0x08005c84

0800537c <puts>:
 800537c:	4b02      	ldr	r3, [pc, #8]	; (8005388 <puts+0xc>)
 800537e:	4601      	mov	r1, r0
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	f7ff bf9f 	b.w	80052c4 <_puts_r>
 8005386:	bf00      	nop
 8005388:	20000010 	.word	0x20000010

0800538c <__swbuf_r>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	460e      	mov	r6, r1
 8005390:	4614      	mov	r4, r2
 8005392:	4605      	mov	r5, r0
 8005394:	b118      	cbz	r0, 800539e <__swbuf_r+0x12>
 8005396:	6983      	ldr	r3, [r0, #24]
 8005398:	b90b      	cbnz	r3, 800539e <__swbuf_r+0x12>
 800539a:	f000 f9a7 	bl	80056ec <__sinit>
 800539e:	4b21      	ldr	r3, [pc, #132]	; (8005424 <__swbuf_r+0x98>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	d12a      	bne.n	80053fa <__swbuf_r+0x6e>
 80053a4:	686c      	ldr	r4, [r5, #4]
 80053a6:	69a3      	ldr	r3, [r4, #24]
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	071a      	lsls	r2, r3, #28
 80053ae:	d52e      	bpl.n	800540e <__swbuf_r+0x82>
 80053b0:	6923      	ldr	r3, [r4, #16]
 80053b2:	b363      	cbz	r3, 800540e <__swbuf_r+0x82>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	1ac0      	subs	r0, r0, r3
 80053ba:	6963      	ldr	r3, [r4, #20]
 80053bc:	b2f6      	uxtb	r6, r6
 80053be:	4283      	cmp	r3, r0
 80053c0:	4637      	mov	r7, r6
 80053c2:	dc04      	bgt.n	80053ce <__swbuf_r+0x42>
 80053c4:	4621      	mov	r1, r4
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 f926 	bl	8005618 <_fflush_r>
 80053cc:	bb28      	cbnz	r0, 800541a <__swbuf_r+0x8e>
 80053ce:	68a3      	ldr	r3, [r4, #8]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	60a3      	str	r3, [r4, #8]
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	701e      	strb	r6, [r3, #0]
 80053dc:	6963      	ldr	r3, [r4, #20]
 80053de:	3001      	adds	r0, #1
 80053e0:	4283      	cmp	r3, r0
 80053e2:	d004      	beq.n	80053ee <__swbuf_r+0x62>
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	07db      	lsls	r3, r3, #31
 80053e8:	d519      	bpl.n	800541e <__swbuf_r+0x92>
 80053ea:	2e0a      	cmp	r6, #10
 80053ec:	d117      	bne.n	800541e <__swbuf_r+0x92>
 80053ee:	4621      	mov	r1, r4
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 f911 	bl	8005618 <_fflush_r>
 80053f6:	b190      	cbz	r0, 800541e <__swbuf_r+0x92>
 80053f8:	e00f      	b.n	800541a <__swbuf_r+0x8e>
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <__swbuf_r+0x9c>)
 80053fc:	429c      	cmp	r4, r3
 80053fe:	d101      	bne.n	8005404 <__swbuf_r+0x78>
 8005400:	68ac      	ldr	r4, [r5, #8]
 8005402:	e7d0      	b.n	80053a6 <__swbuf_r+0x1a>
 8005404:	4b09      	ldr	r3, [pc, #36]	; (800542c <__swbuf_r+0xa0>)
 8005406:	429c      	cmp	r4, r3
 8005408:	bf08      	it	eq
 800540a:	68ec      	ldreq	r4, [r5, #12]
 800540c:	e7cb      	b.n	80053a6 <__swbuf_r+0x1a>
 800540e:	4621      	mov	r1, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f80d 	bl	8005430 <__swsetup_r>
 8005416:	2800      	cmp	r0, #0
 8005418:	d0cc      	beq.n	80053b4 <__swbuf_r+0x28>
 800541a:	f04f 37ff 	mov.w	r7, #4294967295
 800541e:	4638      	mov	r0, r7
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005422:	bf00      	nop
 8005424:	08005ca4 	.word	0x08005ca4
 8005428:	08005cc4 	.word	0x08005cc4
 800542c:	08005c84 	.word	0x08005c84

08005430 <__swsetup_r>:
 8005430:	4b32      	ldr	r3, [pc, #200]	; (80054fc <__swsetup_r+0xcc>)
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	681d      	ldr	r5, [r3, #0]
 8005436:	4606      	mov	r6, r0
 8005438:	460c      	mov	r4, r1
 800543a:	b125      	cbz	r5, 8005446 <__swsetup_r+0x16>
 800543c:	69ab      	ldr	r3, [r5, #24]
 800543e:	b913      	cbnz	r3, 8005446 <__swsetup_r+0x16>
 8005440:	4628      	mov	r0, r5
 8005442:	f000 f953 	bl	80056ec <__sinit>
 8005446:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <__swsetup_r+0xd0>)
 8005448:	429c      	cmp	r4, r3
 800544a:	d10f      	bne.n	800546c <__swsetup_r+0x3c>
 800544c:	686c      	ldr	r4, [r5, #4]
 800544e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005452:	b29a      	uxth	r2, r3
 8005454:	0715      	lsls	r5, r2, #28
 8005456:	d42c      	bmi.n	80054b2 <__swsetup_r+0x82>
 8005458:	06d0      	lsls	r0, r2, #27
 800545a:	d411      	bmi.n	8005480 <__swsetup_r+0x50>
 800545c:	2209      	movs	r2, #9
 800545e:	6032      	str	r2, [r6, #0]
 8005460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	e03e      	b.n	80054ea <__swsetup_r+0xba>
 800546c:	4b25      	ldr	r3, [pc, #148]	; (8005504 <__swsetup_r+0xd4>)
 800546e:	429c      	cmp	r4, r3
 8005470:	d101      	bne.n	8005476 <__swsetup_r+0x46>
 8005472:	68ac      	ldr	r4, [r5, #8]
 8005474:	e7eb      	b.n	800544e <__swsetup_r+0x1e>
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <__swsetup_r+0xd8>)
 8005478:	429c      	cmp	r4, r3
 800547a:	bf08      	it	eq
 800547c:	68ec      	ldreq	r4, [r5, #12]
 800547e:	e7e6      	b.n	800544e <__swsetup_r+0x1e>
 8005480:	0751      	lsls	r1, r2, #29
 8005482:	d512      	bpl.n	80054aa <__swsetup_r+0x7a>
 8005484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005486:	b141      	cbz	r1, 800549a <__swsetup_r+0x6a>
 8005488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800548c:	4299      	cmp	r1, r3
 800548e:	d002      	beq.n	8005496 <__swsetup_r+0x66>
 8005490:	4630      	mov	r0, r6
 8005492:	f000 fa19 	bl	80058c8 <_free_r>
 8005496:	2300      	movs	r3, #0
 8005498:	6363      	str	r3, [r4, #52]	; 0x34
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054a0:	81a3      	strh	r3, [r4, #12]
 80054a2:	2300      	movs	r3, #0
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f043 0308 	orr.w	r3, r3, #8
 80054b0:	81a3      	strh	r3, [r4, #12]
 80054b2:	6923      	ldr	r3, [r4, #16]
 80054b4:	b94b      	cbnz	r3, 80054ca <__swsetup_r+0x9a>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c0:	d003      	beq.n	80054ca <__swsetup_r+0x9a>
 80054c2:	4621      	mov	r1, r4
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f9bf 	bl	8005848 <__smakebuf_r>
 80054ca:	89a2      	ldrh	r2, [r4, #12]
 80054cc:	f012 0301 	ands.w	r3, r2, #1
 80054d0:	d00c      	beq.n	80054ec <__swsetup_r+0xbc>
 80054d2:	2300      	movs	r3, #0
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	6963      	ldr	r3, [r4, #20]
 80054d8:	425b      	negs	r3, r3
 80054da:	61a3      	str	r3, [r4, #24]
 80054dc:	6923      	ldr	r3, [r4, #16]
 80054de:	b953      	cbnz	r3, 80054f6 <__swsetup_r+0xc6>
 80054e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80054e8:	d1ba      	bne.n	8005460 <__swsetup_r+0x30>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	0792      	lsls	r2, r2, #30
 80054ee:	bf58      	it	pl
 80054f0:	6963      	ldrpl	r3, [r4, #20]
 80054f2:	60a3      	str	r3, [r4, #8]
 80054f4:	e7f2      	b.n	80054dc <__swsetup_r+0xac>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e7f7      	b.n	80054ea <__swsetup_r+0xba>
 80054fa:	bf00      	nop
 80054fc:	20000010 	.word	0x20000010
 8005500:	08005ca4 	.word	0x08005ca4
 8005504:	08005cc4 	.word	0x08005cc4
 8005508:	08005c84 	.word	0x08005c84

0800550c <__sflush_r>:
 800550c:	898a      	ldrh	r2, [r1, #12]
 800550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005512:	4605      	mov	r5, r0
 8005514:	0710      	lsls	r0, r2, #28
 8005516:	460c      	mov	r4, r1
 8005518:	d458      	bmi.n	80055cc <__sflush_r+0xc0>
 800551a:	684b      	ldr	r3, [r1, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	dc05      	bgt.n	800552c <__sflush_r+0x20>
 8005520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	dc02      	bgt.n	800552c <__sflush_r+0x20>
 8005526:	2000      	movs	r0, #0
 8005528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800552c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552e:	2e00      	cmp	r6, #0
 8005530:	d0f9      	beq.n	8005526 <__sflush_r+0x1a>
 8005532:	2300      	movs	r3, #0
 8005534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005538:	682f      	ldr	r7, [r5, #0]
 800553a:	6a21      	ldr	r1, [r4, #32]
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	d032      	beq.n	80055a6 <__sflush_r+0x9a>
 8005540:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005542:	89a3      	ldrh	r3, [r4, #12]
 8005544:	075a      	lsls	r2, r3, #29
 8005546:	d505      	bpl.n	8005554 <__sflush_r+0x48>
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	1ac0      	subs	r0, r0, r3
 800554c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800554e:	b10b      	cbz	r3, 8005554 <__sflush_r+0x48>
 8005550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005552:	1ac0      	subs	r0, r0, r3
 8005554:	2300      	movs	r3, #0
 8005556:	4602      	mov	r2, r0
 8005558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800555a:	6a21      	ldr	r1, [r4, #32]
 800555c:	4628      	mov	r0, r5
 800555e:	47b0      	blx	r6
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	d106      	bne.n	8005574 <__sflush_r+0x68>
 8005566:	6829      	ldr	r1, [r5, #0]
 8005568:	291d      	cmp	r1, #29
 800556a:	d848      	bhi.n	80055fe <__sflush_r+0xf2>
 800556c:	4a29      	ldr	r2, [pc, #164]	; (8005614 <__sflush_r+0x108>)
 800556e:	40ca      	lsrs	r2, r1
 8005570:	07d6      	lsls	r6, r2, #31
 8005572:	d544      	bpl.n	80055fe <__sflush_r+0xf2>
 8005574:	2200      	movs	r2, #0
 8005576:	6062      	str	r2, [r4, #4]
 8005578:	04d9      	lsls	r1, r3, #19
 800557a:	6922      	ldr	r2, [r4, #16]
 800557c:	6022      	str	r2, [r4, #0]
 800557e:	d504      	bpl.n	800558a <__sflush_r+0x7e>
 8005580:	1c42      	adds	r2, r0, #1
 8005582:	d101      	bne.n	8005588 <__sflush_r+0x7c>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b903      	cbnz	r3, 800558a <__sflush_r+0x7e>
 8005588:	6560      	str	r0, [r4, #84]	; 0x54
 800558a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800558c:	602f      	str	r7, [r5, #0]
 800558e:	2900      	cmp	r1, #0
 8005590:	d0c9      	beq.n	8005526 <__sflush_r+0x1a>
 8005592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005596:	4299      	cmp	r1, r3
 8005598:	d002      	beq.n	80055a0 <__sflush_r+0x94>
 800559a:	4628      	mov	r0, r5
 800559c:	f000 f994 	bl	80058c8 <_free_r>
 80055a0:	2000      	movs	r0, #0
 80055a2:	6360      	str	r0, [r4, #52]	; 0x34
 80055a4:	e7c0      	b.n	8005528 <__sflush_r+0x1c>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	1c41      	adds	r1, r0, #1
 80055ae:	d1c8      	bne.n	8005542 <__sflush_r+0x36>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0c5      	beq.n	8005542 <__sflush_r+0x36>
 80055b6:	2b1d      	cmp	r3, #29
 80055b8:	d001      	beq.n	80055be <__sflush_r+0xb2>
 80055ba:	2b16      	cmp	r3, #22
 80055bc:	d101      	bne.n	80055c2 <__sflush_r+0xb6>
 80055be:	602f      	str	r7, [r5, #0]
 80055c0:	e7b1      	b.n	8005526 <__sflush_r+0x1a>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c8:	81a3      	strh	r3, [r4, #12]
 80055ca:	e7ad      	b.n	8005528 <__sflush_r+0x1c>
 80055cc:	690f      	ldr	r7, [r1, #16]
 80055ce:	2f00      	cmp	r7, #0
 80055d0:	d0a9      	beq.n	8005526 <__sflush_r+0x1a>
 80055d2:	0793      	lsls	r3, r2, #30
 80055d4:	680e      	ldr	r6, [r1, #0]
 80055d6:	bf08      	it	eq
 80055d8:	694b      	ldreq	r3, [r1, #20]
 80055da:	600f      	str	r7, [r1, #0]
 80055dc:	bf18      	it	ne
 80055de:	2300      	movne	r3, #0
 80055e0:	eba6 0807 	sub.w	r8, r6, r7
 80055e4:	608b      	str	r3, [r1, #8]
 80055e6:	f1b8 0f00 	cmp.w	r8, #0
 80055ea:	dd9c      	ble.n	8005526 <__sflush_r+0x1a>
 80055ec:	4643      	mov	r3, r8
 80055ee:	463a      	mov	r2, r7
 80055f0:	6a21      	ldr	r1, [r4, #32]
 80055f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b0      	blx	r6
 80055f8:	2800      	cmp	r0, #0
 80055fa:	dc06      	bgt.n	800560a <__sflush_r+0xfe>
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005602:	81a3      	strh	r3, [r4, #12]
 8005604:	f04f 30ff 	mov.w	r0, #4294967295
 8005608:	e78e      	b.n	8005528 <__sflush_r+0x1c>
 800560a:	4407      	add	r7, r0
 800560c:	eba8 0800 	sub.w	r8, r8, r0
 8005610:	e7e9      	b.n	80055e6 <__sflush_r+0xda>
 8005612:	bf00      	nop
 8005614:	20400001 	.word	0x20400001

08005618 <_fflush_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	690b      	ldr	r3, [r1, #16]
 800561c:	4605      	mov	r5, r0
 800561e:	460c      	mov	r4, r1
 8005620:	b1db      	cbz	r3, 800565a <_fflush_r+0x42>
 8005622:	b118      	cbz	r0, 800562c <_fflush_r+0x14>
 8005624:	6983      	ldr	r3, [r0, #24]
 8005626:	b90b      	cbnz	r3, 800562c <_fflush_r+0x14>
 8005628:	f000 f860 	bl	80056ec <__sinit>
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <_fflush_r+0x48>)
 800562e:	429c      	cmp	r4, r3
 8005630:	d109      	bne.n	8005646 <_fflush_r+0x2e>
 8005632:	686c      	ldr	r4, [r5, #4]
 8005634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005638:	b17b      	cbz	r3, 800565a <_fflush_r+0x42>
 800563a:	4621      	mov	r1, r4
 800563c:	4628      	mov	r0, r5
 800563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005642:	f7ff bf63 	b.w	800550c <__sflush_r>
 8005646:	4b07      	ldr	r3, [pc, #28]	; (8005664 <_fflush_r+0x4c>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d101      	bne.n	8005650 <_fflush_r+0x38>
 800564c:	68ac      	ldr	r4, [r5, #8]
 800564e:	e7f1      	b.n	8005634 <_fflush_r+0x1c>
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <_fflush_r+0x50>)
 8005652:	429c      	cmp	r4, r3
 8005654:	bf08      	it	eq
 8005656:	68ec      	ldreq	r4, [r5, #12]
 8005658:	e7ec      	b.n	8005634 <_fflush_r+0x1c>
 800565a:	2000      	movs	r0, #0
 800565c:	bd38      	pop	{r3, r4, r5, pc}
 800565e:	bf00      	nop
 8005660:	08005ca4 	.word	0x08005ca4
 8005664:	08005cc4 	.word	0x08005cc4
 8005668:	08005c84 	.word	0x08005c84

0800566c <std>:
 800566c:	2300      	movs	r3, #0
 800566e:	b510      	push	{r4, lr}
 8005670:	4604      	mov	r4, r0
 8005672:	e9c0 3300 	strd	r3, r3, [r0]
 8005676:	6083      	str	r3, [r0, #8]
 8005678:	8181      	strh	r1, [r0, #12]
 800567a:	6643      	str	r3, [r0, #100]	; 0x64
 800567c:	81c2      	strh	r2, [r0, #14]
 800567e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005682:	6183      	str	r3, [r0, #24]
 8005684:	4619      	mov	r1, r3
 8005686:	2208      	movs	r2, #8
 8005688:	305c      	adds	r0, #92	; 0x5c
 800568a:	f7ff fe13 	bl	80052b4 <memset>
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <std+0x38>)
 8005690:	6263      	str	r3, [r4, #36]	; 0x24
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <std+0x3c>)
 8005694:	62a3      	str	r3, [r4, #40]	; 0x28
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <std+0x40>)
 8005698:	62e3      	str	r3, [r4, #44]	; 0x2c
 800569a:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <std+0x44>)
 800569c:	6224      	str	r4, [r4, #32]
 800569e:	6323      	str	r3, [r4, #48]	; 0x30
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	08005a39 	.word	0x08005a39
 80056a8:	08005a5b 	.word	0x08005a5b
 80056ac:	08005a93 	.word	0x08005a93
 80056b0:	08005ab7 	.word	0x08005ab7

080056b4 <_cleanup_r>:
 80056b4:	4901      	ldr	r1, [pc, #4]	; (80056bc <_cleanup_r+0x8>)
 80056b6:	f000 b885 	b.w	80057c4 <_fwalk_reent>
 80056ba:	bf00      	nop
 80056bc:	08005619 	.word	0x08005619

080056c0 <__sfmoreglue>:
 80056c0:	b570      	push	{r4, r5, r6, lr}
 80056c2:	1e4a      	subs	r2, r1, #1
 80056c4:	2568      	movs	r5, #104	; 0x68
 80056c6:	4355      	muls	r5, r2
 80056c8:	460e      	mov	r6, r1
 80056ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ce:	f000 f949 	bl	8005964 <_malloc_r>
 80056d2:	4604      	mov	r4, r0
 80056d4:	b140      	cbz	r0, 80056e8 <__sfmoreglue+0x28>
 80056d6:	2100      	movs	r1, #0
 80056d8:	e9c0 1600 	strd	r1, r6, [r0]
 80056dc:	300c      	adds	r0, #12
 80056de:	60a0      	str	r0, [r4, #8]
 80056e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056e4:	f7ff fde6 	bl	80052b4 <memset>
 80056e8:	4620      	mov	r0, r4
 80056ea:	bd70      	pop	{r4, r5, r6, pc}

080056ec <__sinit>:
 80056ec:	6983      	ldr	r3, [r0, #24]
 80056ee:	b510      	push	{r4, lr}
 80056f0:	4604      	mov	r4, r0
 80056f2:	bb33      	cbnz	r3, 8005742 <__sinit+0x56>
 80056f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80056f8:	6503      	str	r3, [r0, #80]	; 0x50
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <__sinit+0x58>)
 80056fc:	4a12      	ldr	r2, [pc, #72]	; (8005748 <__sinit+0x5c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6282      	str	r2, [r0, #40]	; 0x28
 8005702:	4298      	cmp	r0, r3
 8005704:	bf04      	itt	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	6183      	streq	r3, [r0, #24]
 800570a:	f000 f81f 	bl	800574c <__sfp>
 800570e:	6060      	str	r0, [r4, #4]
 8005710:	4620      	mov	r0, r4
 8005712:	f000 f81b 	bl	800574c <__sfp>
 8005716:	60a0      	str	r0, [r4, #8]
 8005718:	4620      	mov	r0, r4
 800571a:	f000 f817 	bl	800574c <__sfp>
 800571e:	2200      	movs	r2, #0
 8005720:	60e0      	str	r0, [r4, #12]
 8005722:	2104      	movs	r1, #4
 8005724:	6860      	ldr	r0, [r4, #4]
 8005726:	f7ff ffa1 	bl	800566c <std>
 800572a:	2201      	movs	r2, #1
 800572c:	2109      	movs	r1, #9
 800572e:	68a0      	ldr	r0, [r4, #8]
 8005730:	f7ff ff9c 	bl	800566c <std>
 8005734:	2202      	movs	r2, #2
 8005736:	2112      	movs	r1, #18
 8005738:	68e0      	ldr	r0, [r4, #12]
 800573a:	f7ff ff97 	bl	800566c <std>
 800573e:	2301      	movs	r3, #1
 8005740:	61a3      	str	r3, [r4, #24]
 8005742:	bd10      	pop	{r4, pc}
 8005744:	08005c80 	.word	0x08005c80
 8005748:	080056b5 	.word	0x080056b5

0800574c <__sfp>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <__sfp+0x70>)
 8005750:	681e      	ldr	r6, [r3, #0]
 8005752:	69b3      	ldr	r3, [r6, #24]
 8005754:	4607      	mov	r7, r0
 8005756:	b913      	cbnz	r3, 800575e <__sfp+0x12>
 8005758:	4630      	mov	r0, r6
 800575a:	f7ff ffc7 	bl	80056ec <__sinit>
 800575e:	3648      	adds	r6, #72	; 0x48
 8005760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005764:	3b01      	subs	r3, #1
 8005766:	d503      	bpl.n	8005770 <__sfp+0x24>
 8005768:	6833      	ldr	r3, [r6, #0]
 800576a:	b133      	cbz	r3, 800577a <__sfp+0x2e>
 800576c:	6836      	ldr	r6, [r6, #0]
 800576e:	e7f7      	b.n	8005760 <__sfp+0x14>
 8005770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005774:	b16d      	cbz	r5, 8005792 <__sfp+0x46>
 8005776:	3468      	adds	r4, #104	; 0x68
 8005778:	e7f4      	b.n	8005764 <__sfp+0x18>
 800577a:	2104      	movs	r1, #4
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ff9f 	bl	80056c0 <__sfmoreglue>
 8005782:	6030      	str	r0, [r6, #0]
 8005784:	2800      	cmp	r0, #0
 8005786:	d1f1      	bne.n	800576c <__sfp+0x20>
 8005788:	230c      	movs	r3, #12
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4604      	mov	r4, r0
 800578e:	4620      	mov	r0, r4
 8005790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005792:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <__sfp+0x74>)
 8005794:	6665      	str	r5, [r4, #100]	; 0x64
 8005796:	e9c4 5500 	strd	r5, r5, [r4]
 800579a:	60a5      	str	r5, [r4, #8]
 800579c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80057a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80057a4:	2208      	movs	r2, #8
 80057a6:	4629      	mov	r1, r5
 80057a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057ac:	f7ff fd82 	bl	80052b4 <memset>
 80057b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b8:	e7e9      	b.n	800578e <__sfp+0x42>
 80057ba:	bf00      	nop
 80057bc:	08005c80 	.word	0x08005c80
 80057c0:	ffff0001 	.word	0xffff0001

080057c4 <_fwalk_reent>:
 80057c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c8:	4680      	mov	r8, r0
 80057ca:	4689      	mov	r9, r1
 80057cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057d0:	2600      	movs	r6, #0
 80057d2:	b914      	cbnz	r4, 80057da <_fwalk_reent+0x16>
 80057d4:	4630      	mov	r0, r6
 80057d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80057de:	3f01      	subs	r7, #1
 80057e0:	d501      	bpl.n	80057e6 <_fwalk_reent+0x22>
 80057e2:	6824      	ldr	r4, [r4, #0]
 80057e4:	e7f5      	b.n	80057d2 <_fwalk_reent+0xe>
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d907      	bls.n	80057fc <_fwalk_reent+0x38>
 80057ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f0:	3301      	adds	r3, #1
 80057f2:	d003      	beq.n	80057fc <_fwalk_reent+0x38>
 80057f4:	4629      	mov	r1, r5
 80057f6:	4640      	mov	r0, r8
 80057f8:	47c8      	blx	r9
 80057fa:	4306      	orrs	r6, r0
 80057fc:	3568      	adds	r5, #104	; 0x68
 80057fe:	e7ee      	b.n	80057de <_fwalk_reent+0x1a>

08005800 <__swhatbuf_r>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	460e      	mov	r6, r1
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	2900      	cmp	r1, #0
 800580a:	b096      	sub	sp, #88	; 0x58
 800580c:	4614      	mov	r4, r2
 800580e:	461d      	mov	r5, r3
 8005810:	da07      	bge.n	8005822 <__swhatbuf_r+0x22>
 8005812:	2300      	movs	r3, #0
 8005814:	602b      	str	r3, [r5, #0]
 8005816:	89b3      	ldrh	r3, [r6, #12]
 8005818:	061a      	lsls	r2, r3, #24
 800581a:	d410      	bmi.n	800583e <__swhatbuf_r+0x3e>
 800581c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005820:	e00e      	b.n	8005840 <__swhatbuf_r+0x40>
 8005822:	466a      	mov	r2, sp
 8005824:	f000 f96e 	bl	8005b04 <_fstat_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	dbf2      	blt.n	8005812 <__swhatbuf_r+0x12>
 800582c:	9a01      	ldr	r2, [sp, #4]
 800582e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005832:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005836:	425a      	negs	r2, r3
 8005838:	415a      	adcs	r2, r3
 800583a:	602a      	str	r2, [r5, #0]
 800583c:	e7ee      	b.n	800581c <__swhatbuf_r+0x1c>
 800583e:	2340      	movs	r3, #64	; 0x40
 8005840:	2000      	movs	r0, #0
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	b016      	add	sp, #88	; 0x58
 8005846:	bd70      	pop	{r4, r5, r6, pc}

08005848 <__smakebuf_r>:
 8005848:	898b      	ldrh	r3, [r1, #12]
 800584a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800584c:	079d      	lsls	r5, r3, #30
 800584e:	4606      	mov	r6, r0
 8005850:	460c      	mov	r4, r1
 8005852:	d507      	bpl.n	8005864 <__smakebuf_r+0x1c>
 8005854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	2301      	movs	r3, #1
 800585e:	6163      	str	r3, [r4, #20]
 8005860:	b002      	add	sp, #8
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	ab01      	add	r3, sp, #4
 8005866:	466a      	mov	r2, sp
 8005868:	f7ff ffca 	bl	8005800 <__swhatbuf_r>
 800586c:	9900      	ldr	r1, [sp, #0]
 800586e:	4605      	mov	r5, r0
 8005870:	4630      	mov	r0, r6
 8005872:	f000 f877 	bl	8005964 <_malloc_r>
 8005876:	b948      	cbnz	r0, 800588c <__smakebuf_r+0x44>
 8005878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800587c:	059a      	lsls	r2, r3, #22
 800587e:	d4ef      	bmi.n	8005860 <__smakebuf_r+0x18>
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7e3      	b.n	8005854 <__smakebuf_r+0xc>
 800588c:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <__smakebuf_r+0x7c>)
 800588e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	9b00      	ldr	r3, [sp, #0]
 800589c:	6163      	str	r3, [r4, #20]
 800589e:	9b01      	ldr	r3, [sp, #4]
 80058a0:	6120      	str	r0, [r4, #16]
 80058a2:	b15b      	cbz	r3, 80058bc <__smakebuf_r+0x74>
 80058a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 f93d 	bl	8005b28 <_isatty_r>
 80058ae:	b128      	cbz	r0, 80058bc <__smakebuf_r+0x74>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	431d      	orrs	r5, r3
 80058c0:	81a5      	strh	r5, [r4, #12]
 80058c2:	e7cd      	b.n	8005860 <__smakebuf_r+0x18>
 80058c4:	080056b5 	.word	0x080056b5

080058c8 <_free_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4605      	mov	r5, r0
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d045      	beq.n	800595c <_free_r+0x94>
 80058d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d4:	1f0c      	subs	r4, r1, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	18e4      	addlt	r4, r4, r3
 80058dc:	f000 f946 	bl	8005b6c <__malloc_lock>
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <_free_r+0x98>)
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	4610      	mov	r0, r2
 80058e6:	b933      	cbnz	r3, 80058f6 <_free_r+0x2e>
 80058e8:	6063      	str	r3, [r4, #4]
 80058ea:	6014      	str	r4, [r2, #0]
 80058ec:	4628      	mov	r0, r5
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f2:	f000 b93c 	b.w	8005b6e <__malloc_unlock>
 80058f6:	42a3      	cmp	r3, r4
 80058f8:	d90c      	bls.n	8005914 <_free_r+0x4c>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	1862      	adds	r2, r4, r1
 80058fe:	4293      	cmp	r3, r2
 8005900:	bf04      	itt	eq
 8005902:	681a      	ldreq	r2, [r3, #0]
 8005904:	685b      	ldreq	r3, [r3, #4]
 8005906:	6063      	str	r3, [r4, #4]
 8005908:	bf04      	itt	eq
 800590a:	1852      	addeq	r2, r2, r1
 800590c:	6022      	streq	r2, [r4, #0]
 800590e:	6004      	str	r4, [r0, #0]
 8005910:	e7ec      	b.n	80058ec <_free_r+0x24>
 8005912:	4613      	mov	r3, r2
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	b10a      	cbz	r2, 800591c <_free_r+0x54>
 8005918:	42a2      	cmp	r2, r4
 800591a:	d9fa      	bls.n	8005912 <_free_r+0x4a>
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	1858      	adds	r0, r3, r1
 8005920:	42a0      	cmp	r0, r4
 8005922:	d10b      	bne.n	800593c <_free_r+0x74>
 8005924:	6820      	ldr	r0, [r4, #0]
 8005926:	4401      	add	r1, r0
 8005928:	1858      	adds	r0, r3, r1
 800592a:	4282      	cmp	r2, r0
 800592c:	6019      	str	r1, [r3, #0]
 800592e:	d1dd      	bne.n	80058ec <_free_r+0x24>
 8005930:	6810      	ldr	r0, [r2, #0]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	4401      	add	r1, r0
 8005938:	6019      	str	r1, [r3, #0]
 800593a:	e7d7      	b.n	80058ec <_free_r+0x24>
 800593c:	d902      	bls.n	8005944 <_free_r+0x7c>
 800593e:	230c      	movs	r3, #12
 8005940:	602b      	str	r3, [r5, #0]
 8005942:	e7d3      	b.n	80058ec <_free_r+0x24>
 8005944:	6820      	ldr	r0, [r4, #0]
 8005946:	1821      	adds	r1, r4, r0
 8005948:	428a      	cmp	r2, r1
 800594a:	bf04      	itt	eq
 800594c:	6811      	ldreq	r1, [r2, #0]
 800594e:	6852      	ldreq	r2, [r2, #4]
 8005950:	6062      	str	r2, [r4, #4]
 8005952:	bf04      	itt	eq
 8005954:	1809      	addeq	r1, r1, r0
 8005956:	6021      	streq	r1, [r4, #0]
 8005958:	605c      	str	r4, [r3, #4]
 800595a:	e7c7      	b.n	80058ec <_free_r+0x24>
 800595c:	bd38      	pop	{r3, r4, r5, pc}
 800595e:	bf00      	nop
 8005960:	20004054 	.word	0x20004054

08005964 <_malloc_r>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	1ccd      	adds	r5, r1, #3
 8005968:	f025 0503 	bic.w	r5, r5, #3
 800596c:	3508      	adds	r5, #8
 800596e:	2d0c      	cmp	r5, #12
 8005970:	bf38      	it	cc
 8005972:	250c      	movcc	r5, #12
 8005974:	2d00      	cmp	r5, #0
 8005976:	4606      	mov	r6, r0
 8005978:	db01      	blt.n	800597e <_malloc_r+0x1a>
 800597a:	42a9      	cmp	r1, r5
 800597c:	d903      	bls.n	8005986 <_malloc_r+0x22>
 800597e:	230c      	movs	r3, #12
 8005980:	6033      	str	r3, [r6, #0]
 8005982:	2000      	movs	r0, #0
 8005984:	bd70      	pop	{r4, r5, r6, pc}
 8005986:	f000 f8f1 	bl	8005b6c <__malloc_lock>
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <_malloc_r+0xac>)
 800598c:	6814      	ldr	r4, [r2, #0]
 800598e:	4621      	mov	r1, r4
 8005990:	b991      	cbnz	r1, 80059b8 <_malloc_r+0x54>
 8005992:	4c20      	ldr	r4, [pc, #128]	; (8005a14 <_malloc_r+0xb0>)
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	b91b      	cbnz	r3, 80059a0 <_malloc_r+0x3c>
 8005998:	4630      	mov	r0, r6
 800599a:	f000 f83d 	bl	8005a18 <_sbrk_r>
 800599e:	6020      	str	r0, [r4, #0]
 80059a0:	4629      	mov	r1, r5
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 f838 	bl	8005a18 <_sbrk_r>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d124      	bne.n	80059f6 <_malloc_r+0x92>
 80059ac:	230c      	movs	r3, #12
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f8dc 	bl	8005b6e <__malloc_unlock>
 80059b6:	e7e4      	b.n	8005982 <_malloc_r+0x1e>
 80059b8:	680b      	ldr	r3, [r1, #0]
 80059ba:	1b5b      	subs	r3, r3, r5
 80059bc:	d418      	bmi.n	80059f0 <_malloc_r+0x8c>
 80059be:	2b0b      	cmp	r3, #11
 80059c0:	d90f      	bls.n	80059e2 <_malloc_r+0x7e>
 80059c2:	600b      	str	r3, [r1, #0]
 80059c4:	50cd      	str	r5, [r1, r3]
 80059c6:	18cc      	adds	r4, r1, r3
 80059c8:	4630      	mov	r0, r6
 80059ca:	f000 f8d0 	bl	8005b6e <__malloc_unlock>
 80059ce:	f104 000b 	add.w	r0, r4, #11
 80059d2:	1d23      	adds	r3, r4, #4
 80059d4:	f020 0007 	bic.w	r0, r0, #7
 80059d8:	1ac3      	subs	r3, r0, r3
 80059da:	d0d3      	beq.n	8005984 <_malloc_r+0x20>
 80059dc:	425a      	negs	r2, r3
 80059de:	50e2      	str	r2, [r4, r3]
 80059e0:	e7d0      	b.n	8005984 <_malloc_r+0x20>
 80059e2:	428c      	cmp	r4, r1
 80059e4:	684b      	ldr	r3, [r1, #4]
 80059e6:	bf16      	itet	ne
 80059e8:	6063      	strne	r3, [r4, #4]
 80059ea:	6013      	streq	r3, [r2, #0]
 80059ec:	460c      	movne	r4, r1
 80059ee:	e7eb      	b.n	80059c8 <_malloc_r+0x64>
 80059f0:	460c      	mov	r4, r1
 80059f2:	6849      	ldr	r1, [r1, #4]
 80059f4:	e7cc      	b.n	8005990 <_malloc_r+0x2c>
 80059f6:	1cc4      	adds	r4, r0, #3
 80059f8:	f024 0403 	bic.w	r4, r4, #3
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d005      	beq.n	8005a0c <_malloc_r+0xa8>
 8005a00:	1a21      	subs	r1, r4, r0
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f808 	bl	8005a18 <_sbrk_r>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d0cf      	beq.n	80059ac <_malloc_r+0x48>
 8005a0c:	6025      	str	r5, [r4, #0]
 8005a0e:	e7db      	b.n	80059c8 <_malloc_r+0x64>
 8005a10:	20004054 	.word	0x20004054
 8005a14:	20004058 	.word	0x20004058

08005a18 <_sbrk_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4c06      	ldr	r4, [pc, #24]	; (8005a34 <_sbrk_r+0x1c>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4605      	mov	r5, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	f7fb f992 	bl	8000d4c <_sbrk>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_sbrk_r+0x1a>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_sbrk_r+0x1a>
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	200041b4 	.word	0x200041b4

08005a38 <__sread>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	f000 f896 	bl	8005b70 <_read_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	bfab      	itete	ge
 8005a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a4c:	181b      	addge	r3, r3, r0
 8005a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a52:	bfac      	ite	ge
 8005a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a56:	81a3      	strhlt	r3, [r4, #12]
 8005a58:	bd10      	pop	{r4, pc}

08005a5a <__swrite>:
 8005a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a5e:	461f      	mov	r7, r3
 8005a60:	898b      	ldrh	r3, [r1, #12]
 8005a62:	05db      	lsls	r3, r3, #23
 8005a64:	4605      	mov	r5, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	4616      	mov	r6, r2
 8005a6a:	d505      	bpl.n	8005a78 <__swrite+0x1e>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a74:	f000 f868 	bl	8005b48 <_lseek_r>
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	4632      	mov	r2, r6
 8005a86:	463b      	mov	r3, r7
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8e:	f000 b817 	b.w	8005ac0 <_write_r>

08005a92 <__sseek>:
 8005a92:	b510      	push	{r4, lr}
 8005a94:	460c      	mov	r4, r1
 8005a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9a:	f000 f855 	bl	8005b48 <_lseek_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	bf15      	itete	ne
 8005aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005aae:	81a3      	strheq	r3, [r4, #12]
 8005ab0:	bf18      	it	ne
 8005ab2:	81a3      	strhne	r3, [r4, #12]
 8005ab4:	bd10      	pop	{r4, pc}

08005ab6 <__sclose>:
 8005ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aba:	f000 b813 	b.w	8005ae4 <_close_r>
	...

08005ac0 <_write_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4c07      	ldr	r4, [pc, #28]	; (8005ae0 <_write_r+0x20>)
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	6022      	str	r2, [r4, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fb f8eb 	bl	8000caa <_write>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_write_r+0x1e>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_write_r+0x1e>
 8005adc:	602b      	str	r3, [r5, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	200041b4 	.word	0x200041b4

08005ae4 <_close_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4c06      	ldr	r4, [pc, #24]	; (8005b00 <_close_r+0x1c>)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4605      	mov	r5, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	f7fb f8f7 	bl	8000ce2 <_close>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d102      	bne.n	8005afe <_close_r+0x1a>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	b103      	cbz	r3, 8005afe <_close_r+0x1a>
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	200041b4 	.word	0x200041b4

08005b04 <_fstat_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4c07      	ldr	r4, [pc, #28]	; (8005b24 <_fstat_r+0x20>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	f7fb f8f2 	bl	8000cfa <_fstat>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d102      	bne.n	8005b20 <_fstat_r+0x1c>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	b103      	cbz	r3, 8005b20 <_fstat_r+0x1c>
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	bd38      	pop	{r3, r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	200041b4 	.word	0x200041b4

08005b28 <_isatty_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4c06      	ldr	r4, [pc, #24]	; (8005b44 <_isatty_r+0x1c>)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	4605      	mov	r5, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	f7fb f8f1 	bl	8000d1a <_isatty>
 8005b38:	1c43      	adds	r3, r0, #1
 8005b3a:	d102      	bne.n	8005b42 <_isatty_r+0x1a>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	b103      	cbz	r3, 8005b42 <_isatty_r+0x1a>
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	200041b4 	.word	0x200041b4

08005b48 <_lseek_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4c07      	ldr	r4, [pc, #28]	; (8005b68 <_lseek_r+0x20>)
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	4608      	mov	r0, r1
 8005b50:	4611      	mov	r1, r2
 8005b52:	2200      	movs	r2, #0
 8005b54:	6022      	str	r2, [r4, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f7fb f8ea 	bl	8000d30 <_lseek>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_lseek_r+0x1e>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_lseek_r+0x1e>
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	200041b4 	.word	0x200041b4

08005b6c <__malloc_lock>:
 8005b6c:	4770      	bx	lr

08005b6e <__malloc_unlock>:
 8005b6e:	4770      	bx	lr

08005b70 <_read_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4c07      	ldr	r4, [pc, #28]	; (8005b90 <_read_r+0x20>)
 8005b74:	4605      	mov	r5, r0
 8005b76:	4608      	mov	r0, r1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	6022      	str	r2, [r4, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f7fb f876 	bl	8000c70 <_read>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_read_r+0x1e>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_read_r+0x1e>
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	200041b4 	.word	0x200041b4

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr

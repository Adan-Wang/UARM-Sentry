
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007838  08007838  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007840  08007840  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042cc  20000074  080078bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004340  080078bc  00024340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eeea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000424a  00000000  00000000  0003ef8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  000431d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  000446a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002907e  00000000  00000000  00045980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001481f  00000000  00000000  0006e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e381a  00000000  00000000  0008321d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  00166a37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bcc  00000000  00000000  00166b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080075fc 	.word	0x080075fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080075fc 	.word	0x080075fc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);

  int32_t speed=1000; // speed applied to motor
 8000da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da8:	613b      	str	r3, [r7, #16]

  int direction = CLOCKWISE; // direction of motor
 8000daa:	2301      	movs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]

  //uint32_t t=0;
  //double distance = -1.0;

  //Time period is 1 seconds per cycle, 10=10 cycles=10s, the timer is controlled by TIM13
  uint32_t cycles_2s=10;
 8000dae:	230a      	movs	r3, #10
 8000db0:	60fb      	str	r3, [r7, #12]

	//motor_move_time(cycles_2s, vel,direction);


	  //Motor movement function call, check for direction, then check for timer interrupt cycle
		if(direction == CLOCKWISE){
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d10a      	bne.n	8000dce <Chassis_Task_Func+0x32>
			// Clockwise Direction
			// give time counter here
			if (period_counter >= cycles_2s) {
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <Chassis_Task_Func+0x74>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d805      	bhi.n	8000dce <Chassis_Task_Func+0x32>
				period_counter = 0;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <Chassis_Task_Func+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
				direction = COUNTER_CLOCKWISE;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	617b      	str	r3, [r7, #20]
			}


		}

		if(direction == COUNTER_CLOCKWISE){
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d109      	bne.n	8000dea <Chassis_Task_Func+0x4e>
			// Counter Clockwise Direction
			if (period_counter >= cycles_2s){
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <Chassis_Task_Func+0x74>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d804      	bhi.n	8000dea <Chassis_Task_Func+0x4e>
				period_counter = 0;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <Chassis_Task_Func+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
				direction = CLOCKWISE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	617b      	str	r3, [r7, #20]
			}

		}

		//Calculate velocity via direction * speed
		vel=direction*speed;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	60bb      	str	r3, [r7, #8]


		//Send velocity to motor
		//Currently only sets value to one motor, need to set to all 3, and function should be written to control the RPM rather than just setting raw value
		Motor_set_raw_value(&motor_data[0], vel);
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f7ff fbad 	bl	8000554 <__aeabi_i2d>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460c      	mov	r4, r1
 8000dfe:	ec44 3b10 	vmov	d0, r3, r4
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <Chassis_Task_Func+0x78>)
 8000e04:	f000 fa1b 	bl	800123e <Motor_set_raw_value>
		osDelay(1);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f004 fb2a 	bl	8005462 <osDelay>
		if(direction == CLOCKWISE){
 8000e0e:	e7d0      	b.n	8000db2 <Chassis_Task_Func+0x16>
 8000e10:	200002e4 	.word	0x200002e4
 8000e14:	20004080 	.word	0x20004080

08000e18 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b08d      	sub	sp, #52	; 0x34
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  char pdata[16];
  char* des = "123";
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <Gimbal_Task_Function+0x80>)
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  double vmax=30000;
 8000e24:	a41a      	add	r4, pc, #104	; (adr r4, 8000e90 <Gimbal_Task_Function+0x78>)
 8000e26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e2a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  double max_angle=4096;
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	4c1a      	ldr	r4, [pc, #104]	; (8000e9c <Gimbal_Task_Function+0x84>)
 8000e34:	e9c7 3406 	strd	r3, r4, [r7, #24]
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4819      	ldr	r0, [pc, #100]	; (8000ea0 <Gimbal_Task_Function+0x88>)
 8000e3c:	f001 fe0b 	bl	8002a56 <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <Gimbal_Task_Function+0x8c>)
 8000e42:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000e46:	801a      	strh	r2, [r3, #0]

  for(;;)
  {
	  //Motor_pid_set_angle(&motor_data[4],360,vmax/max_angle,0,0);
	  //HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
	  if (HAL_UART_Receive(&huart7, (uint8_t*)pdata, 3, HAL_MAX_DELAY) == HAL_OK){
 8000e48:	f107 0108 	add.w	r1, r7, #8
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	2203      	movs	r2, #3
 8000e52:	4815      	ldr	r0, [pc, #84]	; (8000ea8 <Gimbal_Task_Function+0x90>)
 8000e54:	f003 fe2e 	bl	8004ab4 <HAL_UART_Receive>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d112      	bne.n	8000e84 <Gimbal_Task_Function+0x6c>
		  HAL_GPIO_WritePin(GPIOG, LD_H_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2102      	movs	r1, #2
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <Gimbal_Task_Function+0x94>)
 8000e64:	f002 fad2 	bl	800340c <HAL_GPIO_WritePin>
		  if(strcmp(pdata, des) == 0){
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9be 	bl	80001f0 <strcmp>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d104      	bne.n	8000e84 <Gimbal_Task_Function+0x6c>
			  HAL_GPIO_WritePin(GPIOG, LD_D_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <Gimbal_Task_Function+0x94>)
 8000e80:	f002 fac4 	bl	800340c <HAL_GPIO_WritePin>
//			  case '1': HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
//			  case '2': HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);break;
//			  case '123': HAL_GPIO_WritePin(GPIOG, LD_D_Pin, GPIO_PIN_RESET);HAL_GPIO_WritePin(GPIOG, LD_A_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_SET);HAL_GPIO_WritePin(GPIOG, LD_C_Pin, GPIO_PIN_SET);break;
//		  }
	  //Motor_set_raw_value(&motor_data[4],0);
	  osDelay(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f004 faec 	bl	8005462 <osDelay>
	  if (HAL_UART_Receive(&huart7, (uint8_t*)pdata, 3, HAL_MAX_DELAY) == HAL_OK){
 8000e8a:	e7dd      	b.n	8000e48 <Gimbal_Task_Function+0x30>
 8000e8c:	f3af 8000 	nop.w
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40dd4c00 	.word	0x40dd4c00
 8000e98:	08007614 	.word	0x08007614
 8000e9c:	40b00000 	.word	0x40b00000
 8000ea0:	20004188 	.word	0x20004188
 8000ea4:	20004232 	.word	0x20004232
 8000ea8:	200042f8 	.word	0x200042f8
 8000eac:	40021800 	.word	0x40021800

08000eb0 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000eb8:	f000 f818 	bl	8000eec <shoot_init>
  double fric_wheel_speed_percent=50;
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	4c08      	ldr	r4, [pc, #32]	; (8000ee4 <Shoot_Task_Func+0x34>)
 8000ec2:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	4c07      	ldr	r4, [pc, #28]	; (8000ee8 <Shoot_Task_Func+0x38>)
 8000ecc:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000ed0:	ed97 1b04 	vldr	d1, [r7, #16]
 8000ed4:	ed97 0b02 	vldr	d0, [r7, #8]
 8000ed8:	f000 f832 	bl	8000f40 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8000edc:	2001      	movs	r0, #1
 8000ede:	f004 fac0 	bl	8005462 <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000ee2:	e7f5      	b.n	8000ed0 <Shoot_Task_Func+0x20>
 8000ee4:	40490000 	.word	0x40490000
 8000ee8:	40240000 	.word	0x40240000

08000eec <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <shoot_init+0x50>)
 8000ef4:	f002 ffbe 	bl	8003e74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4810      	ldr	r0, [pc, #64]	; (8000f3c <shoot_init+0x50>)
 8000efc:	f002 ffba 	bl	8003e74 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <shoot_init+0x50>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f640 0298 	movw	r2, #2200	; 0x898
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <shoot_init+0x50>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f640 0298 	movw	r2, #2200	; 0x898
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8000f14:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f18:	f004 faa3 	bl	8005462 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <shoot_init+0x50>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <shoot_init+0x50>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000f30:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000f34:	f004 fa95 	bl	8005462 <osDelay>

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20004040 	.word	0x20004040

08000f40 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f4a:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <cmd_execute_shoot+0x50>)
 8000f54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f58:	f7ff fc90 	bl	800087c <__aeabi_ddiv>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	460c      	mov	r4, r1
 8000f60:	4618      	mov	r0, r3
 8000f62:	4621      	mov	r1, r4
 8000f64:	a308      	add	r3, pc, #32	; (adr r3, 8000f88 <cmd_execute_shoot+0x48>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff fb5d 	bl	8000628 <__aeabi_dmul>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460c      	mov	r4, r1
 8000f72:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 8000f76:	ed97 0b04 	vldr	d0, [r7, #16]
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <cmd_execute_shoot+0x54>)
 8000f7c:	f000 f95f 	bl	800123e <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8000f80:	bf00      	nop
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	40c38800 	.word	0x40c38800
 8000f90:	40590000 	.word	0x40590000
 8000f94:	200040d4 	.word	0x200040d4

08000f98 <Timer_Task_Func>:

#include "Timer_App.h"



void Timer_Task_Func(void const * argument){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b090      	sub	sp, #64	; 0x40
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

uint32_t tick;
	for (;;){
		Motor_Data_Read();
 8000fa0:	f000 f816 	bl	8000fd0 <Motor_Data_Read>
		Motor_Data_Sent();
 8000fa4:	f000 f87a 	bl	800109c <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <Timer_Task_Func+0x30>)
 8000fb0:	f000 f8f8 	bl	80011a4 <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <Timer_Task_Func+0x34>)
 8000fbc:	f000 f8f2 	bl	80011a4 <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f004 fa4e 	bl	8005462 <osDelay>
	for (;;){
 8000fc6:	e7eb      	b.n	8000fa0 <Timer_Task_Func+0x8>
 8000fc8:	200040f0 	.word	0x200040f0
 8000fcc:	20004080 	.word	0x20004080

08000fd0 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e052      	b.n	8001082 <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8000fdc:	482c      	ldr	r0, [pc, #176]	; (8001090 <Motor_Data_Read+0xc0>)
 8000fde:	f000 f9e3 	bl	80013a8 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <Motor_Data_Read+0xc4>)
 8000fe8:	441a      	add	r2, r3
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	6810      	ldr	r0, [r2, #0]
 8000fee:	6851      	ldr	r1, [r2, #4]
 8000ff0:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 8000ff2:	793b      	ldrb	r3, [r7, #4]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	797b      	ldrb	r3, [r7, #5]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b218      	sxth	r0, r3
 8001000:	4925      	ldr	r1, [pc, #148]	; (8001098 <Motor_Data_Read+0xc8>)
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	3310      	adds	r3, #16
 8001010:	4602      	mov	r2, r0
 8001012:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b218      	sxth	r0, r3
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <Motor_Data_Read+0xc8>)
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	3312      	adds	r3, #18
 8001032:	4602      	mov	r2, r0
 8001034:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 8001036:	7a3b      	ldrb	r3, [r7, #8]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	7a7b      	ldrb	r3, [r7, #9]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b218      	sxth	r0, r3
 8001044:	4914      	ldr	r1, [pc, #80]	; (8001098 <Motor_Data_Read+0xc8>)
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	3314      	adds	r3, #20
 8001054:	4602      	mov	r2, r0
 8001056:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	b218      	sxth	r0, r3
 800105c:	490e      	ldr	r1, [pc, #56]	; (8001098 <Motor_Data_Read+0xc8>)
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	3316      	adds	r3, #22
 800106c:	4602      	mov	r2, r0
 800106e:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f004 f9f6 	bl	8005462 <osDelay>

		can_filter_disable(&hcan1);
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <Motor_Data_Read+0xc0>)
 8001078:	f000 f9b8 	bl	80013ec <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2b07      	cmp	r3, #7
 8001086:	dda9      	ble.n	8000fdc <Motor_Data_Read+0xc>
	}
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20004188 	.word	0x20004188
 8001094:	200041b0 	.word	0x200041b0
 8001098:	20004080 	.word	0x20004080

0800109c <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 80010aa:	2308      	movs	r3, #8
 80010ac:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e06c      	b.n	800118e <Motor_Data_Sent+0xf2>
		if (i == 0) {
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d12b      	bne.n	8001112 <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 80010ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010be:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <Motor_Data_Sent+0x100>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	121b      	asrs	r3, r3, #8
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <Motor_Data_Sent+0x100>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <Motor_Data_Sent+0x100>)
 80010d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d6:	121b      	asrs	r3, r3, #8
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <Motor_Data_Sent+0x100>)
 80010de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <Motor_Data_Sent+0x100>)
 80010e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <Motor_Data_Sent+0x100>)
 80010f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <Motor_Data_Sent+0x100>)
 80010fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010fe:	121b      	asrs	r3, r3, #8
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <Motor_Data_Sent+0x100>)
 8001108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001110:	e032      	b.n	8001178 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 8001112:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001116:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <Motor_Data_Sent+0x100>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111e:	121b      	asrs	r3, r3, #8
 8001120:	b2db      	uxtb	r3, r3
 8001122:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <Motor_Data_Sent+0x100>)
 8001126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112a:	b2db      	uxtb	r3, r3
 800112c:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <Motor_Data_Sent+0x100>)
 8001130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001134:	121b      	asrs	r3, r3, #8
 8001136:	b2db      	uxtb	r3, r3
 8001138:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <Motor_Data_Sent+0x100>)
 800113c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001140:	b2db      	uxtb	r3, r3
 8001142:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <Motor_Data_Sent+0x100>)
 8001146:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800114a:	121b      	asrs	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <Motor_Data_Sent+0x100>)
 8001154:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <Motor_Data_Sent+0x100>)
 8001160:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001164:	121b      	asrs	r3, r3, #8
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <Motor_Data_Sent+0x100>)
 800116e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	f107 021c 	add.w	r2, r7, #28
 8001180:	4639      	mov	r1, r7
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <Motor_Data_Sent+0x104>)
 8001184:	f001 fa7a 	bl	800267c <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	3301      	adds	r3, #1
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	2b01      	cmp	r3, #1
 8001192:	dd8f      	ble.n	80010b4 <Motor_Data_Sent+0x18>
	}
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20004080 	.word	0x20004080
 80011a0:	20004188 	.word	0x20004188

080011a4 <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f811 	bl	80011d8 <Motor_Data_Replacement>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f804 	bl	80011d8 <Motor_Data_Replacement>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	60da      	str	r2, [r3, #12]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 800123e:	b580      	push	{r7, lr}
 8001240:	b08c      	sub	sp, #48	; 0x30
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff ffa7 	bl	80011a4 <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 8001256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800125a:	f7ff fbf7 	bl	8000a4c <__aeabi_d2iz>
 800125e:	4603      	mov	r3, r0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	68f9      	ldr	r1, [r7, #12]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ffa8 	bl	80011be <set_Motor_buffer>
}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	4802      	ldr	r0, [pc, #8]	; (8001288 <buzzer_init+0x10>)
 8001280:	f002 fdf8 	bl	8003e74 <HAL_TIM_PWM_Start>

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200041f0 	.word	0x200041f0

0800128c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_CAN1_Init+0x64>)
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <MX_CAN1_Init+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_CAN1_Init+0x64>)
 8001298:	2203      	movs	r2, #3
 800129a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_CAN1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012aa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80012ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012d8:	2201      	movs	r2, #1
 80012da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_CAN1_Init+0x64>)
 80012de:	f000 ffad 	bl	800223c <HAL_CAN_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012e8:	f000 fb36 	bl	8001958 <Error_Handler>
  }

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20004188 	.word	0x20004188
 80012f4:	40006400 	.word	0x40006400

080012f8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_CAN_MspInit+0xa4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d13b      	bne.n	8001392 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_CAN_MspInit+0xa8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_CAN_MspInit+0xa8>)
 8001324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_CAN_MspInit+0xa8>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_CAN_MspInit+0xa8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_CAN_MspInit+0xa8>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_CAN_MspInit+0xa8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001352:	2303      	movs	r3, #3
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001362:	2309      	movs	r3, #9
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <HAL_CAN_MspInit+0xac>)
 800136e:	f001 fea3 	bl	80030b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	2013      	movs	r0, #19
 8001378:	f001 fe74 	bl	8003064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800137c:	2013      	movs	r0, #19
 800137e:	f001 fe8d 	bl	800309c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	2014      	movs	r0, #20
 8001388:	f001 fe6c 	bl	8003064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800138c:	2014      	movs	r0, #20
 800138e:	f001 fe85 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40006400 	.word	0x40006400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020c00 	.word	0x40020c00

080013a8 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80013c8:	2301      	movs	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 80013d0:	231b      	movs	r3, #27
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4619      	mov	r1, r3
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f001 f828 	bl	8002434 <HAL_CAN_ConfigFilter>
}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	; 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800140c:	2301      	movs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001414:	231b      	movs	r3, #27
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4619      	mov	r1, r3
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f001 f806 	bl	8002434 <HAL_CAN_ConfigFilter>
}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001440:	0d5b      	lsrs	r3, r3, #21
 8001442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001446:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8001452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800145a:	4413      	add	r3, r2
 800145c:	f107 0208 	add.w	r2, r7, #8
 8001460:	2100      	movs	r1, #0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f001 f9e5 	bl	8002832 <HAL_CAN_GetRxMessage>
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	200041b0 	.word	0x200041b0

08001474 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <vApplicationGetIdleTaskMemory+0x30>)
 800148a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000090 	.word	0x20000090
 80014a4:	200000e4 	.word	0x200000e4

080014a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b0a8      	sub	sp, #160	; 0xa0
 80014ac:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <MX_FREERTOS_Init+0xc0>)
 80014b0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80014b4:	461d      	mov	r5, r3
 80014b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 ff7e 	bl	80053ca <osThreadCreate>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b26      	ldr	r3, [pc, #152]	; (800156c <MX_FREERTOS_Init+0xc4>)
 80014d2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_FREERTOS_Init+0xc8>)
 80014d6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80014da:	461d      	mov	r5, r3
 80014dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 80014e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 ff6b 	bl	80053ca <osThreadCreate>
 80014f4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_FREERTOS_Init+0xcc>)
 80014fa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80014fe:	461d      	mov	r5, r3
 8001500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 800150c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f003 ff59 	bl	80053ca <osThreadCreate>
 8001518:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_FREERTOS_Init+0xd0>)
 800151e:	f107 0420 	add.w	r4, r7, #32
 8001522:	461d      	mov	r5, r3
 8001524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f003 ff47 	bl	80053ca <osThreadCreate>
 800153c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_FREERTOS_Init+0xd4>)
 8001542:	1d3c      	adds	r4, r7, #4
 8001544:	461d      	mov	r5, r3
 8001546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800154a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800154e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f003 ff37 	bl	80053ca <osThreadCreate>
 800155c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001560:	bf00      	nop
 8001562:	37a0      	adds	r7, #160	; 0xa0
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	08007624 	.word	0x08007624
 800156c:	20004234 	.word	0x20004234
 8001570:	0800764c 	.word	0x0800764c
 8001574:	08007674 	.word	0x08007674
 8001578:	0800769c 	.word	0x0800769c
 800157c:	080076c4 	.word	0x080076c4

08001580 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f003 ff6a 	bl	8005462 <osDelay>
 800158e:	e7fb      	b.n	8001588 <StartDefaultTask+0x8>

08001590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a69      	ldr	r2, [pc, #420]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b67      	ldr	r3, [pc, #412]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a62      	ldr	r2, [pc, #392]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b60      	ldr	r3, [pc, #384]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b5c      	ldr	r3, [pc, #368]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a5b      	ldr	r2, [pc, #364]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b59      	ldr	r3, [pc, #356]	; (8001754 <MX_GPIO_Init+0x1c4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a54      	ldr	r2, [pc, #336]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b52      	ldr	r3, [pc, #328]	; (8001754 <MX_GPIO_Init+0x1c4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <MX_GPIO_Init+0x1c4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a4d      	ldr	r2, [pc, #308]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a46      	ldr	r2, [pc, #280]	; (8001754 <MX_GPIO_Init+0x1c4>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b44      	ldr	r3, [pc, #272]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b40      	ldr	r3, [pc, #256]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a3f      	ldr	r2, [pc, #252]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <MX_GPIO_Init+0x1c4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001670:	4839      	ldr	r0, [pc, #228]	; (8001758 <MX_GPIO_Init+0x1c8>)
 8001672:	f001 fecb 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	211e      	movs	r1, #30
 800167a:	4837      	ldr	r0, [pc, #220]	; (8001758 <MX_GPIO_Init+0x1c8>)
 800167c:	f001 fec6 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001686:	4835      	ldr	r0, [pc, #212]	; (800175c <MX_GPIO_Init+0x1cc>)
 8001688:	f001 fec0 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	4833      	ldr	r0, [pc, #204]	; (8001760 <MX_GPIO_Init+0x1d0>)
 8001694:	f001 feba 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 8001698:	2320      	movs	r3, #32
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	482c      	ldr	r0, [pc, #176]	; (800175c <MX_GPIO_Init+0x1cc>)
 80016ac:	f001 fd04 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 80016b0:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80016b4:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4823      	ldr	r0, [pc, #140]	; (8001758 <MX_GPIO_Init+0x1c8>)
 80016ca:	f001 fcf5 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	481f      	ldr	r0, [pc, #124]	; (8001760 <MX_GPIO_Init+0x1d0>)
 80016e4:	f001 fce8 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80016e8:	2304      	movs	r3, #4
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_GPIO_Init+0x1d4>)
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <MX_GPIO_Init+0x1d8>)
 80016fc:	f001 fcdc 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001700:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <MX_GPIO_Init+0x1cc>)
 800171a:	f001 fccd 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 800171e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	480a      	ldr	r0, [pc, #40]	; (8001760 <MX_GPIO_Init+0x1d0>)
 8001738:	f001 fcbe 	bl	80030b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2105      	movs	r1, #5
 8001740:	2008      	movs	r0, #8
 8001742:	f001 fc8f 	bl	8003064 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001746:	2008      	movs	r0, #8
 8001748:	f001 fca8 	bl	800309c <HAL_NVIC_EnableIRQ>

}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	; 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	40021800 	.word	0x40021800
 800175c:	40021000 	.word	0x40021000
 8001760:	40021400 	.word	0x40021400
 8001764:	10110000 	.word	0x10110000
 8001768:	40020400 	.word	0x40020400

0800176c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af02      	add	r7, sp, #8
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d12b      	bne.n	80017d4 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <HAL_GPIO_EXTI_Callback+0x70>)
 800177e:	f7ff fe13 	bl	80013a8 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x74>)
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	6810      	ldr	r0, [r2, #0]
 800178a:	6851      	ldr	r1, [r2, #4]
 800178c:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800178e:	7a3b      	ldrb	r3, [r7, #8]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 800179c:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 800179e:	7abb      	ldrb	r3, [r7, #10]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	7afb      	ldrb	r3, [r7, #11]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80017ac:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 80017ae:	7b3b      	ldrb	r3, [r7, #12]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	7b7b      	ldrb	r3, [r7, #13]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 80017be:	9201      	str	r2, [sp, #4]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	2101      	movs	r1, #1
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x78>)
 80017ca:	f005 f833 	bl	8006834 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <HAL_GPIO_EXTI_Callback+0x70>)
 80017d0:	f7ff fe0c 	bl	80013ec <can_filter_disable>


	}
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20004188 	.word	0x20004188
 80017e0:	200041b0 	.word	0x200041b0
 80017e4:	080076e0 	.word	0x080076e0

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f000 fce4 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f820 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f7ff fecc 	bl	8001590 <MX_GPIO_Init>
  MX_CAN1_Init();
 80017f8:	f7ff fd48 	bl	800128c <MX_CAN1_Init>
  MX_TIM4_Init();
 80017fc:	f000 fa40 	bl	8001c80 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001800:	f000 faa4 	bl	8001d4c <MX_TIM12_Init>
  MX_UART7_Init();
 8001804:	f000 fc3c 	bl	8002080 <MX_UART7_Init>
  MX_TIM14_Init();
 8001808:	f000 fb0a 	bl	8001e20 <MX_TIM14_Init>
  MX_TIM13_Init();
 800180c:	f000 fae4 	bl	8001dd8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001810:	f7ff fd32 	bl	8001278 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <main+0x44>)
 8001816:	f000 feed 	bl	80025f4 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <main+0x48>)
 800181c:	f002 fadb 	bl	8003dd6 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001820:	f7ff fe42 	bl	80014a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001824:	f003 fdca 	bl	80053bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001828:	e7fe      	b.n	8001828 <main+0x40>
 800182a:	bf00      	nop
 800182c:	20004188 	.word	0x20004188
 8001830:	20004278 	.word	0x20004278

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f004 ffee 	bl	8006824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <SystemClock_Config+0xd0>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <SystemClock_Config+0xd0>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <SystemClock_Config+0xd0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <SystemClock_Config+0xd4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001880:	4a21      	ldr	r2, [pc, #132]	; (8001908 <SystemClock_Config+0xd4>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <SystemClock_Config+0xd4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001894:	2301      	movs	r3, #1
 8001896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80018a8:	2306      	movs	r3, #6
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018ac:	23a8      	movs	r3, #168	; 0xa8
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b4:	2304      	movs	r3, #4
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	4618      	mov	r0, r3
 80018be:	f001 fdf1 	bl	80034a4 <HAL_RCC_OscConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018c8:	f000 f846 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018cc:	230f      	movs	r3, #15
 80018ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d0:	2302      	movs	r3, #2
 80018d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2102      	movs	r1, #2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 f84a 	bl	8003984 <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018f6:	f000 f82f 	bl	8001958 <Error_Handler>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3750      	adds	r7, #80	; 0x50
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000

0800190c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d109      	bne.n	8001932 <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001926:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8001928:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800192e:	f001 fd86 	bl	800343e <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d101      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 800193c:	f000 fc5e 	bl	80021fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40001c00 	.word	0x40001c00
 800194c:	200002e4 	.word	0x200002e4
 8001950:	40021000 	.word	0x40021000
 8001954:	40000c00 	.word	0x40000c00

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195e:	e7fe      	b.n	800195e <Error_Handler+0x6>

08001960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_MspInit+0x54>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <HAL_MspInit+0x54>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_MspInit+0x54>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_MspInit+0x54>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_MspInit+0x54>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_MspInit+0x54>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	210f      	movs	r1, #15
 80019a2:	f06f 0001 	mvn.w	r0, #1
 80019a6:	f001 fb5d 	bl	8003064 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	2032      	movs	r0, #50	; 0x32
 80019ce:	f001 fb49 	bl	8003064 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019d2:	2032      	movs	r0, #50	; 0x32
 80019d4:	f001 fb62 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_InitTick+0xa4>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_InitTick+0xa4>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <HAL_InitTick+0xa4>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f4:	f107 0210 	add.w	r2, r7, #16
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 f98c 	bl	8003d1c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a04:	f002 f962 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <HAL_InitTick+0xa8>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_InitTick+0xac>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_InitTick+0xb0>)
 8001a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_InitTick+0xac>)
 8001a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a28:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_InitTick+0xac>)
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_InitTick+0xac>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_InitTick+0xac>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001a3c:	4809      	ldr	r0, [pc, #36]	; (8001a64 <HAL_InitTick+0xac>)
 8001a3e:	f002 f99f 	bl	8003d80 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001a48:	4806      	ldr	r0, [pc, #24]	; (8001a64 <HAL_InitTick+0xac>)
 8001a4a:	f002 f9c4 	bl	8003dd6 <HAL_TIM_Base_Start_IT>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	20004238 	.word	0x20004238
 8001a68:	40000c00 	.word	0x40000c00

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <NMI_Handler+0x4>

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a9c:	2004      	movs	r0, #4
 8001a9e:	f001 fce9 	bl	8003474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <CAN1_TX_IRQHandler+0x10>)
 8001aae:	f000 fff8 	bl	8002aa2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20004188 	.word	0x20004188

08001abc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <CAN1_RX0_IRQHandler+0x10>)
 8001ac2:	f000 ffee 	bl	8002aa2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20004188 	.word	0x20004188

08001ad0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001ad6:	f002 fa0b 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20004278 	.word	0x20004278

08001ae4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001aea:	f002 fa01 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200042b8 	.word	0x200042b8

08001af8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM5_IRQHandler+0x10>)
 8001afe:	f002 f9f7 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20004238 	.word	0x20004238

08001b0c <_read>:
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
 8001b1e:	f3af 8000 	nop.w
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_write>:
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e009      	b.n	8001b6c <_write+0x26>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	60ba      	str	r2, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fa7b 	bl	800205c <__io_putchar>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf1      	blt.n	8001b58 <_write+0x12>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_close>:
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_fstat>:
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_isatty>:
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_lseek>:
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <_sbrk>:
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
 8001c18:	f004 fdda 	bl	80067d0 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20030000 	.word	0x20030000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	200002e8 	.word	0x200002e8
 8001c50:	20004340 	.word	0x20004340

08001c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <SystemInit+0x28>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <SystemInit+0x28>)
 8001c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SystemInit+0x28>)
 8001c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001ca4:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <MX_TIM4_Init+0xc8>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001caa:	2253      	movs	r2, #83	; 0x53
 8001cac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001cb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cc8:	481e      	ldr	r0, [pc, #120]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001cca:	f002 f8a8 	bl	8003e1e <HAL_TIM_PWM_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001cd4:	f7ff fe40 	bl	8001958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4817      	ldr	r0, [pc, #92]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001ce8:	f002 fd6e 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001cf2:	f7ff fe31 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf6:	2360      	movs	r3, #96	; 0x60
 8001cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480d      	ldr	r0, [pc, #52]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001d10:	f002 f9f6 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001d1a:	f7ff fe1d 	bl	8001958 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2208      	movs	r2, #8
 8001d22:	4619      	mov	r1, r3
 8001d24:	4807      	ldr	r0, [pc, #28]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001d26:	f002 f9eb 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001d30:	f7ff fe12 	bl	8001958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001d34:	4803      	ldr	r0, [pc, #12]	; (8001d44 <MX_TIM4_Init+0xc4>)
 8001d36:	f000 f92f 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20004040 	.word	0x20004040
 8001d48:	40000800 	.word	0x40000800

08001d4c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d66:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <MX_TIM12_Init+0x88>)
 8001d68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d6c:	2223      	movs	r2, #35	; 0x23
 8001d6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d78:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d7c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001d8a:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001d8c:	f002 f847 	bl	8003e1e <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001d96:	f7ff fddf 	bl	8001958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	2360      	movs	r3, #96	; 0x60
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001db2:	f002 f9a5 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001dbc:	f7ff fdcc 	bl	8001958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM12_Init+0x84>)
 8001dc2:	f000 f8e9 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200041f0 	.word	0x200041f0
 8001dd4:	40001800 	.word	0x40001800

08001dd8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <MX_TIM13_Init+0x44>)
 8001de0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001de4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001de8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001df2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001df6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_TIM13_Init+0x40>)
 8001e06:	f001 ffbb 	bl	8003d80 <HAL_TIM_Base_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001e10:	f7ff fda2 	bl	8001958 <Error_Handler>
  }

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20004278 	.word	0x20004278
 8001e1c:	40001c00 	.word	0x40001c00

08001e20 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <MX_TIM14_Init+0x44>)
 8001e28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e2c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001e30:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e3e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <MX_TIM14_Init+0x40>)
 8001e4e:	f001 ff97 	bl	8003d80 <HAL_TIM_Base_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001e58:	f7ff fd7e 	bl	8001958 <Error_Handler>
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200042b8 	.word	0x200042b8
 8001e64:	40002000 	.word	0x40002000

08001e68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_TIM_PWM_MspInit+0x64>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_TIM_PWM_MspInit+0x68>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_TIM_PWM_MspInit+0x68>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_TIM_PWM_MspInit+0x68>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001e96:	e012      	b.n	8001ebe <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10d      	bne.n	8001ebe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_TIM_PWM_MspInit+0x68>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_TIM_PWM_MspInit+0x68>)
 8001eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_TIM_PWM_MspInit+0x68>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40001800 	.word	0x40001800

08001ed8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_TIM_Base_MspInit+0xb4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d116      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2105      	movs	r1, #5
 8001f0a:	202c      	movs	r0, #44	; 0x2c
 8001f0c:	f001 f8aa 	bl	8003064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f001 f8c3 	bl	800309c <HAL_NVIC_EnableIRQ>
 8001f16:	e01a      	b.n	8001f4e <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_TIM_Base_MspInit+0xbc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d115      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2105      	movs	r1, #5
 8001f42:	202d      	movs	r0, #45	; 0x2d
 8001f44:	f001 f88e 	bl	8003064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f48:	202d      	movs	r0, #45	; 0x2d
 8001f4a:	f001 f8a7 	bl	800309c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_TIM_Base_MspInit+0xb4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d115      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_TIM_Base_MspInit+0xb8>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2101      	movs	r1, #1
 8001f78:	202c      	movs	r0, #44	; 0x2c
 8001f7a:	f001 f873 	bl	8003064 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001f7e:	202c      	movs	r0, #44	; 0x2c
 8001f80:	f001 f88c 	bl	800309c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40001c00 	.word	0x40001c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40002000 	.word	0x40002000

08001f98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_TIM_MspPostInit+0xb0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11f      	bne.n	8001ffa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_TIM_MspPostInit+0xb4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_TIM_MspPostInit+0xb4>)
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_TIM_MspPostInit+0xb4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001fd6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_TIM_MspPostInit+0xb8>)
 8001ff4:	f001 f860 	bl	80030b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001ff8:	e022      	b.n	8002040 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_TIM_MspPostInit+0xbc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d11d      	bne.n	8002040 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_TIM_MspPostInit+0xb4>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_TIM_MspPostInit+0xb4>)
 800200e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_TIM_MspPostInit+0xb4>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002030:	2309      	movs	r3, #9
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <HAL_TIM_MspPostInit+0xc0>)
 800203c:	f001 f83c 	bl	80030b8 <HAL_GPIO_Init>
}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	; 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40000800 	.word	0x40000800
 800204c:	40023800 	.word	0x40023800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40001800 	.word	0x40001800
 8002058:	40021c00 	.word	0x40021c00

0800205c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8002064:	1d39      	adds	r1, r7, #4
 8002066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800206a:	2201      	movs	r2, #1
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <__io_putchar+0x20>)
 800206e:	f002 fc88 	bl	8004982 <HAL_UART_Transmit>

  return ch;
 8002072:	687b      	ldr	r3, [r7, #4]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200042f8 	.word	0x200042f8

08002080 <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_UART7_Init+0x4c>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <MX_UART7_Init+0x50>)
 8002088:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_UART7_Init+0x4c>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_UART7_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <MX_UART7_Init+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <MX_UART7_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MX_UART7_Init+0x4c>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <MX_UART7_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <MX_UART7_Init+0x4c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_UART7_Init+0x4c>)
 80020b8:	f002 fc16 	bl	80048e8 <HAL_UART_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80020c2:	f7ff fc49 	bl	8001958 <Error_Handler>
  }

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200042f8 	.word	0x200042f8
 80020d0:	40007800 	.word	0x40007800

080020d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_UART_MspInit+0x84>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12c      	bne.n	8002150 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_MspInit+0x88>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_UART_MspInit+0x88>)
 8002100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_UART_MspInit+0x88>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_MspInit+0x88>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_UART_MspInit+0x88>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_UART_MspInit+0x88>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800212e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002140:	2308      	movs	r3, #8
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_UART_MspInit+0x8c>)
 800214c:	f000 ffb4 	bl	80030b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	; 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40007800 	.word	0x40007800
 800215c:	40023800 	.word	0x40023800
 8002160:	40021000 	.word	0x40021000

08002164 <Reset_Handler>:
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0x14>
 8002168:	2100      	movs	r1, #0
 800216a:	e003      	b.n	8002174 <LoopCopyDataInit>

0800216c <CopyDataInit>:
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <LoopFillZerobss+0x18>)
 800216e:	585b      	ldr	r3, [r3, r1]
 8002170:	5043      	str	r3, [r0, r1]
 8002172:	3104      	adds	r1, #4

08002174 <LoopCopyDataInit>:
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <LoopFillZerobss+0x1c>)
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <LoopFillZerobss+0x20>)
 8002178:	1842      	adds	r2, r0, r1
 800217a:	429a      	cmp	r2, r3
 800217c:	d3f6      	bcc.n	800216c <CopyDataInit>
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopFillZerobss+0x24>)
 8002180:	e002      	b.n	8002188 <LoopFillZerobss>

08002182 <FillZerobss>:
 8002182:	2300      	movs	r3, #0
 8002184:	f842 3b04 	str.w	r3, [r2], #4

08002188 <LoopFillZerobss>:
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <LoopFillZerobss+0x28>)
 800218a:	429a      	cmp	r2, r3
 800218c:	d3f9      	bcc.n	8002182 <FillZerobss>
 800218e:	f7ff fd61 	bl	8001c54 <SystemInit>
 8002192:	f004 fb23 	bl	80067dc <__libc_init_array>
 8002196:	f7ff fb27 	bl	80017e8 <main>
 800219a:	4770      	bx	lr
 800219c:	20030000 	.word	0x20030000
 80021a0:	08007848 	.word	0x08007848
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000074 	.word	0x20000074
 80021ac:	20000074 	.word	0x20000074
 80021b0:	20004340 	.word	0x20004340

080021b4 <ADC_IRQHandler>:
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_Init+0x40>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_Init+0x40>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x40>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 ff34 	bl	800304e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fbe6 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fbb8 	bl	8001960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20004338 	.word	0x20004338

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20004338 	.word	0x20004338

0800223c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0ed      	b.n	800242a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff f84c 	bl	80012f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0202 	bic.w	r2, r2, #2
 800226e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7ff ffd8 	bl	8002224 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002276:	e012      	b.n	800229e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002278:	f7ff ffd4 	bl	8002224 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b0a      	cmp	r3, #10
 8002284:	d90b      	bls.n	800229e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2205      	movs	r2, #5
 8002296:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0c5      	b.n	800242a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e5      	bne.n	8002278 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022bc:	f7ff ffb2 	bl	8002224 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022c2:	e012      	b.n	80022ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022c4:	f7ff ffae 	bl	8002224 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b0a      	cmp	r3, #10
 80022d0:	d90b      	bls.n	80022ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2205      	movs	r2, #5
 80022e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e09f      	b.n	800242a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0e5      	beq.n	80022c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e007      	b.n	8002322 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e5b      	ldrb	r3, [r3, #25]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e007      	b.n	800234c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e9b      	ldrb	r3, [r3, #26]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d108      	bne.n	8002366 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0220 	orr.w	r2, r2, #32
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e007      	b.n	8002376 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0220 	bic.w	r2, r2, #32
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7edb      	ldrb	r3, [r3, #27]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0210 	bic.w	r2, r2, #16
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e007      	b.n	80023a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0210 	orr.w	r2, r2, #16
 800239e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7f1b      	ldrb	r3, [r3, #28]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d108      	bne.n	80023ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0208 	orr.w	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e007      	b.n	80023ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0208 	bic.w	r2, r2, #8
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7f5b      	ldrb	r3, [r3, #29]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0204 	orr.w	r2, r2, #4
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e007      	b.n	80023f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	ea42 0103 	orr.w	r1, r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	1e5a      	subs	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d003      	beq.n	800245a <HAL_CAN_ConfigFilter+0x26>
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b02      	cmp	r3, #2
 8002456:	f040 80be 	bne.w	80025d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800245a:	4b65      	ldr	r3, [pc, #404]	; (80025f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800245c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002474:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	431a      	orrs	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2201      	movs	r2, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	401a      	ands	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d123      	bne.n	8002504 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3248      	adds	r2, #72	; 0x48
 80024e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024fa:	6979      	ldr	r1, [r7, #20]
 80024fc:	3348      	adds	r3, #72	; 0x48
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d122      	bne.n	8002552 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800252c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3248      	adds	r2, #72	; 0x48
 8002532:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002546:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002548:	6979      	ldr	r1, [r7, #20]
 800254a:	3348      	adds	r3, #72	; 0x48
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800256c:	e007      	b.n	800257e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	431a      	orrs	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	401a      	ands	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002598:	e007      	b.n	80025aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c8:	f023 0201 	bic.w	r2, r3, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e006      	b.n	80025e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40006400 	.word	0x40006400

080025f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d12e      	bne.n	8002666 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fe00 	bl	8002224 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002626:	e012      	b.n	800264e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002628:	f7ff fdfc 	bl	8002224 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d90b      	bls.n	800264e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e012      	b.n	8002674 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e006      	b.n	8002674 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002690:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800269a:	7ffb      	ldrb	r3, [r7, #31]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d003      	beq.n	80026a8 <HAL_CAN_AddTxMessage+0x2c>
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	f040 80b8 	bne.w	8002818 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a0 	beq.w	8002808 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	0e1b      	lsrs	r3, r3, #24
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d907      	bls.n	80026e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e09e      	b.n	8002826 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026e8:	2201      	movs	r2, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	409a      	lsls	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	6809      	ldr	r1, [r1, #0]
 8002708:	431a      	orrs	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3318      	adds	r3, #24
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	440b      	add	r3, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e00f      	b.n	8002736 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002720:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800272a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3318      	adds	r3, #24
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	440b      	add	r3, r1
 8002734:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3318      	adds	r3, #24
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	440b      	add	r3, r1
 8002746:	3304      	adds	r3, #4
 8002748:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	7d1b      	ldrb	r3, [r3, #20]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d111      	bne.n	8002776 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3318      	adds	r3, #24
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	6811      	ldr	r1, [r2, #0]
 8002766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3318      	adds	r3, #24
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	440b      	add	r3, r1
 8002772:	3304      	adds	r3, #4
 8002774:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3307      	adds	r3, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	061a      	lsls	r2, r3, #24
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3306      	adds	r3, #6
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3305      	adds	r3, #5
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	4313      	orrs	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	3204      	adds	r2, #4
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	4610      	mov	r0, r2
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	6811      	ldr	r1, [r2, #0]
 800279e:	ea43 0200 	orr.w	r2, r3, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3303      	adds	r3, #3
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	061a      	lsls	r2, r3, #24
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3302      	adds	r3, #2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	041b      	lsls	r3, r3, #16
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	4313      	orrs	r3, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	4610      	mov	r0, r2
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	6811      	ldr	r1, [r2, #0]
 80027d4:	ea43 0200 	orr.w	r2, r3, r0
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	440b      	add	r3, r1
 80027de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3318      	adds	r3, #24
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	6811      	ldr	r1, [r2, #0]
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3318      	adds	r3, #24
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	440b      	add	r3, r1
 8002802:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e00e      	b.n	8002826 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e006      	b.n	8002826 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3724      	adds	r7, #36	; 0x24
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002846:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d003      	beq.n	8002856 <HAL_CAN_GetRxMessage+0x24>
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 80f3 	bne.w	8002a3c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10e      	bne.n	800287a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0e7      	b.n	8002a4a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d8      	b.n	8002a4a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	331b      	adds	r3, #27
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	4413      	add	r3, r2
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0204 	and.w	r2, r3, #4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	331b      	adds	r3, #27
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4413      	add	r3, r2
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0d5b      	lsrs	r3, r3, #21
 80028c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	331b      	adds	r3, #27
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	08db      	lsrs	r3, r3, #3
 80028e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	331b      	adds	r3, #27
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	4413      	add	r3, r2
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0202 	and.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	331b      	adds	r3, #27
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	331b      	adds	r3, #27
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	b2da      	uxtb	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	331b      	adds	r3, #27
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0c1b      	lsrs	r3, r3, #16
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	4413      	add	r3, r2
 8002966:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0a1a      	lsrs	r2, r3, #8
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	3301      	adds	r3, #1
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0c1a      	lsrs	r2, r3, #16
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3302      	adds	r3, #2
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	4413      	add	r3, r2
 800299a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e1a      	lsrs	r2, r3, #24
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3303      	adds	r3, #3
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3304      	adds	r3, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0a1a      	lsrs	r2, r3, #8
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	3305      	adds	r3, #5
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0c1a      	lsrs	r2, r3, #16
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3306      	adds	r3, #6
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e1a      	lsrs	r2, r3, #24
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	3307      	adds	r3, #7
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0220 	orr.w	r2, r2, #32
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e007      	b.n	8002a38 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e006      	b.n	8002a4a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a66:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d002      	beq.n	8002a74 <HAL_CAN_ActivateNotification+0x1e>
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d109      	bne.n	8002a88 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6959      	ldr	r1, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e006      	b.n	8002a96 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08a      	sub	sp, #40	; 0x28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d07c      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d023      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2201      	movs	r2, #1
 8002af8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f97d 	bl	8002e04 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b0a:	e016      	b.n	8002b3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e00c      	b.n	8002b3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d004      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e002      	b.n	8002b3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f983 	bl	8002e40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d024      	beq.n	8002b8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f95d 	bl	8002e18 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b5e:	e016      	b.n	8002b8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e00c      	b.n	8002b8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	e002      	b.n	8002b8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f963 	bl	8002e54 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d024      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f93d 	bl	8002e2c <HAL_CAN_TxMailbox2CompleteCallback>
 8002bb2:	e016      	b.n	8002be2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e00c      	b.n	8002be2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	e002      	b.n	8002be2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f943 	bl	8002e68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2210      	movs	r2, #16
 8002c04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2208      	movs	r2, #8
 8002c20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f92a 	bl	8002e7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fe fbf5 	bl	8001430 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2210      	movs	r2, #16
 8002c68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2208      	movs	r2, #8
 8002c84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f90c 	bl	8002ea4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f8f3 	bl	8002e90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0310 	and.w	r3, r3, #16
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8f6 	bl	8002eb8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8ef 	bl	8002ecc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d075      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06c      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f043 0304 	orr.w	r3, r3, #4
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d03d      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d038      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	d017      	beq.n	8002da4 <HAL_CAN_IRQHandler+0x302>
 8002d74:	2b30      	cmp	r3, #48	; 0x30
 8002d76:	d804      	bhi.n	8002d82 <HAL_CAN_IRQHandler+0x2e0>
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d009      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x2ee>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d00c      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d80:	e024      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002d82:	2b50      	cmp	r3, #80	; 0x50
 8002d84:	d018      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x316>
 8002d86:	2b60      	cmp	r3, #96	; 0x60
 8002d88:	d01b      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0x320>
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d00f      	beq.n	8002dae <HAL_CAN_IRQHandler+0x30c>
            break;
 8002d8e:	e01d      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	f043 0308 	orr.w	r3, r3, #8
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d98:	e018      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f043 0310 	orr.w	r3, r3, #16
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da2:	e013      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f043 0320 	orr.w	r3, r3, #32
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dac:	e00e      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db6:	e009      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc0:	e004      	b.n	8002dcc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2204      	movs	r2, #4
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f872 	bl	8002ee0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f10:	4013      	ands	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f26:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <__NVIC_SetPriorityGrouping+0x44>)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	60d3      	str	r3, [r2, #12]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <__NVIC_GetPriorityGrouping+0x18>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0a1b      	lsrs	r3, r3, #8
 8002f46:	f003 0307 	and.w	r3, r3, #7
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db0b      	blt.n	8002f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	4907      	ldr	r1, [pc, #28]	; (8002f90 <__NVIC_EnableIRQ+0x38>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	; (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff ff4c 	bl	8002ef4 <__NVIC_SetPriorityGrouping>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003076:	f7ff ff61 	bl	8002f3c <__NVIC_GetPriorityGrouping>
 800307a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	6978      	ldr	r0, [r7, #20]
 8003082:	f7ff ffb1 	bl	8002fe8 <NVIC_EncodePriority>
 8003086:	4602      	mov	r2, r0
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff ff80 	bl	8002f94 <__NVIC_SetPriority>
}
 8003094:	bf00      	nop
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff54 	bl	8002f58 <__NVIC_EnableIRQ>
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e177      	b.n	80033c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	f040 8166 	bne.w	80033be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00b      	beq.n	8003112 <HAL_GPIO_Init+0x5a>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003106:	2b11      	cmp	r3, #17
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b12      	cmp	r3, #18
 8003110:	d130      	bne.n	8003174 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003148:	2201      	movs	r2, #1
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0xfc>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b12      	cmp	r3, #18
 80031b2:	d123      	bne.n	80031fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	08da      	lsrs	r2, r3, #3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3208      	adds	r2, #8
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	08da      	lsrs	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3208      	adds	r2, #8
 80031f6:	69b9      	ldr	r1, [r7, #24]
 80031f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0203 	and.w	r2, r3, #3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80c0 	beq.w	80033be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_GPIO_Init+0x320>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_GPIO_Init+0x320>)
 8003248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	4b62      	ldr	r3, [pc, #392]	; (80033d8 <HAL_GPIO_Init+0x320>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800325a:	4a60      	ldr	r2, [pc, #384]	; (80033dc <HAL_GPIO_Init+0x324>)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	3302      	adds	r3, #2
 8003262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	220f      	movs	r2, #15
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a57      	ldr	r2, [pc, #348]	; (80033e0 <HAL_GPIO_Init+0x328>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d037      	beq.n	80032f6 <HAL_GPIO_Init+0x23e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a56      	ldr	r2, [pc, #344]	; (80033e4 <HAL_GPIO_Init+0x32c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d031      	beq.n	80032f2 <HAL_GPIO_Init+0x23a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_GPIO_Init+0x330>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02b      	beq.n	80032ee <HAL_GPIO_Init+0x236>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a54      	ldr	r2, [pc, #336]	; (80033ec <HAL_GPIO_Init+0x334>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d025      	beq.n	80032ea <HAL_GPIO_Init+0x232>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a53      	ldr	r2, [pc, #332]	; (80033f0 <HAL_GPIO_Init+0x338>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01f      	beq.n	80032e6 <HAL_GPIO_Init+0x22e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_GPIO_Init+0x33c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d019      	beq.n	80032e2 <HAL_GPIO_Init+0x22a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_GPIO_Init+0x340>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_GPIO_Init+0x226>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a50      	ldr	r2, [pc, #320]	; (80033fc <HAL_GPIO_Init+0x344>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00d      	beq.n	80032da <HAL_GPIO_Init+0x222>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4f      	ldr	r2, [pc, #316]	; (8003400 <HAL_GPIO_Init+0x348>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d007      	beq.n	80032d6 <HAL_GPIO_Init+0x21e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4e      	ldr	r2, [pc, #312]	; (8003404 <HAL_GPIO_Init+0x34c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_GPIO_Init+0x21a>
 80032ce:	2309      	movs	r3, #9
 80032d0:	e012      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032d2:	230a      	movs	r3, #10
 80032d4:	e010      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032d6:	2308      	movs	r3, #8
 80032d8:	e00e      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032da:	2307      	movs	r3, #7
 80032dc:	e00c      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032de:	2306      	movs	r3, #6
 80032e0:	e00a      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032e2:	2305      	movs	r3, #5
 80032e4:	e008      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032e6:	2304      	movs	r3, #4
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e004      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e002      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_GPIO_Init+0x240>
 80032f6:	2300      	movs	r3, #0
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f002 0203 	and.w	r2, r2, #3
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	4093      	lsls	r3, r2
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003308:	4934      	ldr	r1, [pc, #208]	; (80033dc <HAL_GPIO_Init+0x324>)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003316:	4b3c      	ldr	r3, [pc, #240]	; (8003408 <HAL_GPIO_Init+0x350>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800333a:	4a33      	ldr	r2, [pc, #204]	; (8003408 <HAL_GPIO_Init+0x350>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_GPIO_Init+0x350>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <HAL_GPIO_Init+0x350>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_GPIO_Init+0x350>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338e:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_GPIO_Init+0x350>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_GPIO_Init+0x350>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b8:	4a13      	ldr	r2, [pc, #76]	; (8003408 <HAL_GPIO_Init+0x350>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	f67f ae84 	bls.w	80030d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	3724      	adds	r7, #36	; 0x24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40022000 	.word	0x40022000
 8003404:	40022400 	.word	0x40022400
 8003408:	40013c00 	.word	0x40013c00

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003428:	e003      	b.n	8003432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	619a      	str	r2, [r3, #24]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	401a      	ands	r2, r3
 8003452:	887b      	ldrh	r3, [r7, #2]
 8003454:	429a      	cmp	r2, r3
 8003456:	d104      	bne.n	8003462 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003458:	887b      	ldrh	r3, [r7, #2]
 800345a:	041a      	lsls	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003460:	e002      	b.n	8003468 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe f96a 	bl	800176c <HAL_GPIO_EXTI_Callback>
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013c00 	.word	0x40013c00

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e25b      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d075      	beq.n	80035ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c2:	4ba3      	ldr	r3, [pc, #652]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d00c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d112      	bne.n	8003500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034da:	4b9d      	ldr	r3, [pc, #628]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e6:	d10b      	bne.n	8003500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	4b99      	ldr	r3, [pc, #612]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d05b      	beq.n	80035ac <HAL_RCC_OscConfig+0x108>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d157      	bne.n	80035ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e236      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x74>
 800350a:	4b91      	ldr	r3, [pc, #580]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a90      	ldr	r2, [pc, #576]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e01d      	b.n	8003554 <HAL_RCC_OscConfig+0xb0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x98>
 8003522:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a8a      	ldr	r2, [pc, #552]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a87      	ldr	r2, [pc, #540]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0xb0>
 800353c:	4b84      	ldr	r3, [pc, #528]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a83      	ldr	r2, [pc, #524]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b81      	ldr	r3, [pc, #516]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a80      	ldr	r2, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fe62 	bl	8002224 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fe5e 	bl	8002224 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1fb      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0xc0>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fe4e 	bl	8002224 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fe4a 	bl	8002224 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1e7      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0xe8>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d063      	beq.n	8003682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ba:	4b65      	ldr	r3, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b62      	ldr	r3, [pc, #392]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11c      	bne.n	800360c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d2:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x152>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1bb      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4952      	ldr	r1, [pc, #328]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	e03a      	b.n	8003682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_RCC_OscConfig+0x2b0>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fe03 	bl	8002224 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe fdff 	bl	8002224 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e19c      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4940      	ldr	r1, [pc, #256]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
 8003654:	e015      	b.n	8003682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003656:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <HAL_RCC_OscConfig+0x2b0>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fde2 	bl	8002224 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003664:	f7fe fdde 	bl	8002224 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e17b      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d030      	beq.n	80036f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_RCC_OscConfig+0x2b4>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fdc2 	bl	8002224 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fe fdbe 	bl	8002224 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e15b      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x200>
 80036c2:	e015      	b.n	80036f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_OscConfig+0x2b4>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fdab 	bl	8002224 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe fda7 	bl	8002224 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e144      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a0 	beq.w	800383e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x2b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_RCC_OscConfig+0x2b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <HAL_RCC_OscConfig+0x2b8>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fe fd6d 	bl	8002224 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e011      	b.n	8003772 <HAL_RCC_OscConfig+0x2ce>
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	42470000 	.word	0x42470000
 8003758:	42470e80 	.word	0x42470e80
 800375c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003760:	f7fe fd60 	bl	8002224 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0fd      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b81      	ldr	r3, [pc, #516]	; (8003978 <HAL_RCC_OscConfig+0x4d4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x2f0>
 8003786:	4b7d      	ldr	r3, [pc, #500]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a7c      	ldr	r2, [pc, #496]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	e01c      	b.n	80037ce <HAL_RCC_OscConfig+0x32a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d10c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x312>
 800379c:	4b77      	ldr	r3, [pc, #476]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a76      	ldr	r2, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	4b74      	ldr	r3, [pc, #464]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a73      	ldr	r2, [pc, #460]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	e00b      	b.n	80037ce <HAL_RCC_OscConfig+0x32a>
 80037b6:	4b71      	ldr	r3, [pc, #452]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a70      	ldr	r2, [pc, #448]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70
 80037c2:	4b6e      	ldr	r3, [pc, #440]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a6d      	ldr	r2, [pc, #436]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fe fd25 	bl	8002224 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fd21 	bl	8002224 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0bc      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b61      	ldr	r3, [pc, #388]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCC_OscConfig+0x33a>
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fe fd0f 	bl	8002224 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fd0b 	bl	8002224 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0a6      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	4b56      	ldr	r3, [pc, #344]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b52      	ldr	r3, [pc, #328]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a51      	ldr	r2, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8092 	beq.w	800396c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003848:	4b4c      	ldr	r3, [pc, #304]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d05c      	beq.n	800390e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d141      	bne.n	80038e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b48      	ldr	r3, [pc, #288]	; (8003980 <HAL_RCC_OscConfig+0x4dc>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fcdf 	bl	8002224 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386a:	f7fe fcdb 	bl	8002224 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e078      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387c:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	3b01      	subs	r3, #1
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	4933      	ldr	r1, [pc, #204]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_RCC_OscConfig+0x4dc>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fcb4 	bl	8002224 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe fcb0 	bl	8002224 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e04d      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x41c>
 80038de:	e045      	b.n	800396c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_OscConfig+0x4dc>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fc9d 	bl	8002224 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe fc99 	bl	8002224 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e036      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003900:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x44a>
 800390c:	e02e      	b.n	800396c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e029      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800391a:	4b18      	ldr	r3, [pc, #96]	; (800397c <HAL_RCC_OscConfig+0x4d8>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	429a      	cmp	r2, r3
 800392c:	d11c      	bne.n	8003968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d115      	bne.n	8003968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003942:	4013      	ands	r3, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003948:	4293      	cmp	r3, r2
 800394a:	d10d      	bne.n	8003968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40007000 	.word	0x40007000
 800397c:	40023800 	.word	0x40023800
 8003980:	42470060 	.word	0x42470060

08003984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0cc      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003998:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d90c      	bls.n	80039c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b63      	ldr	r3, [pc, #396]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0b8      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d8:	4b59      	ldr	r3, [pc, #356]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f0:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b50      	ldr	r3, [pc, #320]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	494d      	ldr	r1, [pc, #308]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d044      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b47      	ldr	r3, [pc, #284]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d119      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d107      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e06f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e067      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a62:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f023 0203 	bic.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4934      	ldr	r1, [pc, #208]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fe fbd6 	bl	8002224 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	e00a      	b.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7c:	f7fe fbd2 	bl	8002224 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e04f      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	4b2b      	ldr	r3, [pc, #172]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 020c 	and.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1eb      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d20c      	bcs.n	8003acc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e032      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4916      	ldr	r1, [pc, #88]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	490e      	ldr	r1, [pc, #56]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 f821 	bl	8003b50 <HAL_RCC_GetSysClockFreq>
 8003b0e:	4601      	mov	r1, r0
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	5cd3      	ldrb	r3, [r2, r3]
 8003b1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd ff44 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00
 8003b40:	40023800 	.word	0x40023800
 8003b44:	08007788 	.word	0x08007788
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	20000004 	.word	0x20000004

08003b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b66:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d007      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x32>
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d008      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x38>
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f040 808d 	bne.w	8003c96 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b7e:	60bb      	str	r3, [r7, #8]
       break;
 8003b80:	e08c      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b82:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b84:	60bb      	str	r3, [r7, #8]
      break;
 8003b86:	e089      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b88:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b92:	4b45      	ldr	r3, [pc, #276]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d023      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9e:	4b42      	ldr	r3, [pc, #264]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	f04f 0400 	mov.w	r4, #0
 8003ba8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	ea03 0501 	and.w	r5, r3, r1
 8003bb4:	ea04 0602 	and.w	r6, r4, r2
 8003bb8:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bba:	fb02 f106 	mul.w	r1, r2, r6
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	fb02 f205 	mul.w	r2, r2, r5
 8003bc4:	440a      	add	r2, r1
 8003bc6:	493a      	ldr	r1, [pc, #232]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bc8:	fba5 0101 	umull	r0, r1, r5, r1
 8003bcc:	1853      	adds	r3, r2, r1
 8003bce:	4619      	mov	r1, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f04f 0400 	mov.w	r4, #0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4623      	mov	r3, r4
 8003bda:	f7fc ff5f 	bl	8000a9c <__aeabi_uldivmod>
 8003bde:	4603      	mov	r3, r0
 8003be0:	460c      	mov	r4, r1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e049      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	099b      	lsrs	r3, r3, #6
 8003bec:	f04f 0400 	mov.w	r4, #0
 8003bf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	ea03 0501 	and.w	r5, r3, r1
 8003bfc:	ea04 0602 	and.w	r6, r4, r2
 8003c00:	4629      	mov	r1, r5
 8003c02:	4632      	mov	r2, r6
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	f04f 0400 	mov.w	r4, #0
 8003c0c:	0154      	lsls	r4, r2, #5
 8003c0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c12:	014b      	lsls	r3, r1, #5
 8003c14:	4619      	mov	r1, r3
 8003c16:	4622      	mov	r2, r4
 8003c18:	1b49      	subs	r1, r1, r5
 8003c1a:	eb62 0206 	sbc.w	r2, r2, r6
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	f04f 0400 	mov.w	r4, #0
 8003c26:	0194      	lsls	r4, r2, #6
 8003c28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c2c:	018b      	lsls	r3, r1, #6
 8003c2e:	1a5b      	subs	r3, r3, r1
 8003c30:	eb64 0402 	sbc.w	r4, r4, r2
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	00e2      	lsls	r2, r4, #3
 8003c3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c42:	00d9      	lsls	r1, r3, #3
 8003c44:	460b      	mov	r3, r1
 8003c46:	4614      	mov	r4, r2
 8003c48:	195b      	adds	r3, r3, r5
 8003c4a:	eb44 0406 	adc.w	r4, r4, r6
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	02a2      	lsls	r2, r4, #10
 8003c58:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c5c:	0299      	lsls	r1, r3, #10
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	4621      	mov	r1, r4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f04f 0400 	mov.w	r4, #0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	f7fc ff14 	bl	8000a9c <__aeabi_uldivmod>
 8003c74:	4603      	mov	r3, r0
 8003c76:	460c      	mov	r4, r1
 8003c78:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	3301      	adds	r3, #1
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	60bb      	str	r3, [r7, #8]
      break;
 8003c94:	e002      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c98:	60bb      	str	r3, [r7, #8]
      break;
 8003c9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	00f42400 	.word	0x00f42400
 8003cb0:	00b71b00 	.word	0x00b71b00

08003cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cba:	681b      	ldr	r3, [r3, #0]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd0:	f7ff fff0 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0a9b      	lsrs	r3, r3, #10
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce2:	5cd3      	ldrb	r3, [r2, r3]
 8003ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	08007798 	.word	0x08007798

08003cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cf8:	f7ff ffdc 	bl	8003cb4 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4601      	mov	r1, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0b5b      	lsrs	r3, r3, #13
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	08007798 	.word	0x08007798

08003d1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	220f      	movs	r2, #15
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d2c:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <HAL_RCC_GetClockConfig+0x5c>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0203 	and.w	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <HAL_RCC_GetClockConfig+0x5c>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <HAL_RCC_GetClockConfig+0x5c>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_GetClockConfig+0x5c>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	08db      	lsrs	r3, r3, #3
 8003d56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d5e:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <HAL_RCC_GetClockConfig+0x60>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	601a      	str	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e01d      	b.n	8003dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fe f896 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fa8c 	bl	80042dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d007      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01d      	b.n	8003e6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fe f80f 	bl	8001e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 fa3d 	bl	80042dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2201      	movs	r2, #1
 8003e84:	6839      	ldr	r1, [r7, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fc78 	bl	800477c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <HAL_TIM_PWM_Start+0x74>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIM_PWM_Start+0x2c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_TIM_PWM_Start+0x78>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_PWM_Start+0x30>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_TIM_PWM_Start+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d007      	beq.n	8003edc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9b4 	bl	80042a0 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9a6 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f9b7 	bl	80042b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0204 	mvn.w	r2, #4
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f98a 	bl	80042a0 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f97c 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f98d 	bl	80042b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f960 	bl	80042a0 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f952 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f963 	bl	80042b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0210 	mvn.w	r2, #16
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2208      	movs	r2, #8
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f936 	bl	80042a0 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f928 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f939 	bl	80042b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0201 	mvn.w	r2, #1
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fc4c 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d10e      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d107      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fc1a 	bl	80048d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8fe 	bl	80042c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0220 	mvn.w	r2, #32
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fbe4 	bl	80048c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004116:	2302      	movs	r3, #2
 8004118:	e0b4      	b.n	8004284 <HAL_TIM_PWM_ConfigChannel+0x184>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	f200 809f 	bhi.w	8004270 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	0800416d 	.word	0x0800416d
 800413c:	08004271 	.word	0x08004271
 8004140:	08004271 	.word	0x08004271
 8004144:	08004271 	.word	0x08004271
 8004148:	080041ad 	.word	0x080041ad
 800414c:	08004271 	.word	0x08004271
 8004150:	08004271 	.word	0x08004271
 8004154:	08004271 	.word	0x08004271
 8004158:	080041ef 	.word	0x080041ef
 800415c:	08004271 	.word	0x08004271
 8004160:	08004271 	.word	0x08004271
 8004164:	08004271 	.word	0x08004271
 8004168:	0800422f 	.word	0x0800422f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f952 	bl	800441c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0208 	orr.w	r2, r2, #8
 8004186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	619a      	str	r2, [r3, #24]
      break;
 80041aa:	e062      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f9a2 	bl	80044fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6999      	ldr	r1, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	021a      	lsls	r2, r3, #8
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]
      break;
 80041ec:	e041      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f9f7 	bl	80045e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0208 	orr.w	r2, r2, #8
 8004208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0204 	bic.w	r2, r2, #4
 8004218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69d9      	ldr	r1, [r3, #28]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	61da      	str	r2, [r3, #28]
      break;
 800422c:	e021      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fa4b 	bl	80046d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	61da      	str	r2, [r3, #28]
      break;
 800426e:	e000      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004270:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <TIM_Base_SetConfig+0x114>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <TIM_Base_SetConfig+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d00f      	beq.n	800431c <TIM_Base_SetConfig+0x40>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3d      	ldr	r2, [pc, #244]	; (80043f4 <TIM_Base_SetConfig+0x118>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00b      	beq.n	800431c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <TIM_Base_SetConfig+0x11c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d007      	beq.n	800431c <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <TIM_Base_SetConfig+0x120>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3a      	ldr	r2, [pc, #232]	; (8004400 <TIM_Base_SetConfig+0x124>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <TIM_Base_SetConfig+0x114>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d02b      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d027      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <TIM_Base_SetConfig+0x118>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d023      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2b      	ldr	r2, [pc, #172]	; (80043f8 <TIM_Base_SetConfig+0x11c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01f      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <TIM_Base_SetConfig+0x120>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01b      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a29      	ldr	r2, [pc, #164]	; (8004400 <TIM_Base_SetConfig+0x124>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d017      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a28      	ldr	r2, [pc, #160]	; (8004404 <TIM_Base_SetConfig+0x128>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a27      	ldr	r2, [pc, #156]	; (8004408 <TIM_Base_SetConfig+0x12c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00f      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a26      	ldr	r2, [pc, #152]	; (800440c <TIM_Base_SetConfig+0x130>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00b      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a25      	ldr	r2, [pc, #148]	; (8004410 <TIM_Base_SetConfig+0x134>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <TIM_Base_SetConfig+0x138>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <TIM_Base_SetConfig+0x13c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d108      	bne.n	80043a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <TIM_Base_SetConfig+0x114>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0xf8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <TIM_Base_SetConfig+0x124>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d103      	bne.n	80043dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	615a      	str	r2, [r3, #20]
}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40010400 	.word	0x40010400
 8004404:	40014000 	.word	0x40014000
 8004408:	40014400 	.word	0x40014400
 800440c:	40014800 	.word	0x40014800
 8004410:	40001800 	.word	0x40001800
 8004414:	40001c00 	.word	0x40001c00
 8004418:	40002000 	.word	0x40002000

0800441c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <TIM_OC1_SetConfig+0xd8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC1_SetConfig+0x64>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <TIM_OC1_SetConfig+0xdc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10c      	bne.n	800449a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0308 	bic.w	r3, r3, #8
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <TIM_OC1_SetConfig+0xd8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC1_SetConfig+0x8e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <TIM_OC1_SetConfig+0xdc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d111      	bne.n	80044ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40010400 	.word	0x40010400

080044fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0320 	bic.w	r3, r3, #32
 8004546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <TIM_OC2_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_OC2_SetConfig+0x68>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <TIM_OC2_SetConfig+0xe8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d10d      	bne.n	8004580 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <TIM_OC2_SetConfig+0xe4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d003      	beq.n	8004590 <TIM_OC2_SetConfig+0x94>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <TIM_OC2_SetConfig+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d113      	bne.n	80045b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40010400 	.word	0x40010400

080045e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0303 	bic.w	r3, r3, #3
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <TIM_OC3_SetConfig+0xe0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC3_SetConfig+0x66>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <TIM_OC3_SetConfig+0xe4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10d      	bne.n	800466a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <TIM_OC3_SetConfig+0xe0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_OC3_SetConfig+0x92>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC3_SetConfig+0xe4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d113      	bne.n	80046a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800471a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	031b      	lsls	r3, r3, #12
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <TIM_OC4_SetConfig+0xa4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC4_SetConfig+0x68>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a11      	ldr	r2, [pc, #68]	; (8004778 <TIM_OC4_SetConfig+0xa8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d109      	bne.n	800474c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800473e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40010000 	.word	0x40010000
 8004778:	40010400 	.word	0x40010400

0800477c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2201      	movs	r2, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e05a      	b.n	8004896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d01d      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a15      	ldr	r2, [pc, #84]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10c      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4313      	orrs	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40001800 	.word	0x40001800

080048c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e03f      	b.n	800497a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fbe0 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9b1 	bl	8004c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b088      	sub	sp, #32
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	f040 8083 	bne.w	8004aaa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_UART_Transmit+0x2e>
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e07b      	b.n	8004aac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Transmit+0x40>
 80049be:	2302      	movs	r3, #2
 80049c0:	e074      	b.n	8004aac <HAL_UART_Transmit+0x12a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049d8:	f7fd fc24 	bl	8002224 <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80049f2:	e042      	b.n	8004a7a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0a:	d122      	bne.n	8004a52 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8f2 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e042      	b.n	8004aac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a38:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	3302      	adds	r3, #2
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	e017      	b.n	8004a7a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	e013      	b.n	8004a7a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8cf 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e01f      	b.n	8004aac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	60ba      	str	r2, [r7, #8]
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1b7      	bne.n	80049f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2140      	movs	r1, #64	; 0x40
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8b6 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e006      	b.n	8004aac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	f040 8090 	bne.w	8004bf6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_UART_Receive+0x2e>
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e088      	b.n	8004bf8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Receive+0x40>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e081      	b.n	8004bf8 <HAL_UART_Receive+0x144>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2222      	movs	r2, #34	; 0x22
 8004b06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd fb8b 	bl	8002224 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b24:	e05c      	b.n	8004be0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3c:	d12b      	bne.n	8004b96 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2120      	movs	r1, #32
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f859 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e04f      	b.n	8004bf8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10c      	bne.n	8004b7e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	e030      	b.n	8004be0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	3301      	adds	r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	e024      	b.n	8004be0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2120      	movs	r1, #32
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f82d 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e023      	b.n	8004bf8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d108      	bne.n	8004bca <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	60ba      	str	r2, [r7, #8]
 8004bc4:	b2ca      	uxtb	r2, r1
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e00a      	b.n	8004be0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d19d      	bne.n	8004b26 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e000      	b.n	8004bf8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
  }
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c10:	e02c      	b.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d028      	beq.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c20:	f7fd fb00 	bl	8002224 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d21d      	bcs.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0201 	bic.w	r2, r2, #1
 8004c4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e00f      	b.n	8004c8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d0c3      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cd6:	f023 030c 	bic.w	r3, r3, #12
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d02:	f040 818b 	bne.w	800501c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4ac1      	ldr	r2, [pc, #772]	; (8005010 <UART_SetConfig+0x37c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d005      	beq.n	8004d1c <UART_SetConfig+0x88>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4abf      	ldr	r2, [pc, #764]	; (8005014 <UART_SetConfig+0x380>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	f040 80bd 	bne.w	8004e96 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe ffea 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8004d20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	461d      	mov	r5, r3
 8004d26:	f04f 0600 	mov.w	r6, #0
 8004d2a:	46a8      	mov	r8, r5
 8004d2c:	46b1      	mov	r9, r6
 8004d2e:	eb18 0308 	adds.w	r3, r8, r8
 8004d32:	eb49 0409 	adc.w	r4, r9, r9
 8004d36:	4698      	mov	r8, r3
 8004d38:	46a1      	mov	r9, r4
 8004d3a:	eb18 0805 	adds.w	r8, r8, r5
 8004d3e:	eb49 0906 	adc.w	r9, r9, r6
 8004d42:	f04f 0100 	mov.w	r1, #0
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d4e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d52:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d56:	4688      	mov	r8, r1
 8004d58:	4691      	mov	r9, r2
 8004d5a:	eb18 0005 	adds.w	r0, r8, r5
 8004d5e:	eb49 0106 	adc.w	r1, r9, r6
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	461d      	mov	r5, r3
 8004d68:	f04f 0600 	mov.w	r6, #0
 8004d6c:	196b      	adds	r3, r5, r5
 8004d6e:	eb46 0406 	adc.w	r4, r6, r6
 8004d72:	461a      	mov	r2, r3
 8004d74:	4623      	mov	r3, r4
 8004d76:	f7fb fe91 	bl	8000a9c <__aeabi_uldivmod>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4ba5      	ldr	r3, [pc, #660]	; (8005018 <UART_SetConfig+0x384>)
 8004d82:	fba3 2302 	umull	r2, r3, r3, r2
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	461d      	mov	r5, r3
 8004d90:	f04f 0600 	mov.w	r6, #0
 8004d94:	46a9      	mov	r9, r5
 8004d96:	46b2      	mov	sl, r6
 8004d98:	eb19 0309 	adds.w	r3, r9, r9
 8004d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8004da0:	4699      	mov	r9, r3
 8004da2:	46a2      	mov	sl, r4
 8004da4:	eb19 0905 	adds.w	r9, r9, r5
 8004da8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	f04f 0200 	mov.w	r2, #0
 8004db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dc0:	4689      	mov	r9, r1
 8004dc2:	4692      	mov	sl, r2
 8004dc4:	eb19 0005 	adds.w	r0, r9, r5
 8004dc8:	eb4a 0106 	adc.w	r1, sl, r6
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	461d      	mov	r5, r3
 8004dd2:	f04f 0600 	mov.w	r6, #0
 8004dd6:	196b      	adds	r3, r5, r5
 8004dd8:	eb46 0406 	adc.w	r4, r6, r6
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	f7fb fe5c 	bl	8000a9c <__aeabi_uldivmod>
 8004de4:	4603      	mov	r3, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b8b      	ldr	r3, [pc, #556]	; (8005018 <UART_SetConfig+0x384>)
 8004dec:	fba3 1302 	umull	r1, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	2164      	movs	r1, #100	; 0x64
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	3332      	adds	r3, #50	; 0x32
 8004dfe:	4a86      	ldr	r2, [pc, #536]	; (8005018 <UART_SetConfig+0x384>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e0c:	4498      	add	r8, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	461d      	mov	r5, r3
 8004e12:	f04f 0600 	mov.w	r6, #0
 8004e16:	46a9      	mov	r9, r5
 8004e18:	46b2      	mov	sl, r6
 8004e1a:	eb19 0309 	adds.w	r3, r9, r9
 8004e1e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e22:	4699      	mov	r9, r3
 8004e24:	46a2      	mov	sl, r4
 8004e26:	eb19 0905 	adds.w	r9, r9, r5
 8004e2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e2e:	f04f 0100 	mov.w	r1, #0
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e42:	4689      	mov	r9, r1
 8004e44:	4692      	mov	sl, r2
 8004e46:	eb19 0005 	adds.w	r0, r9, r5
 8004e4a:	eb4a 0106 	adc.w	r1, sl, r6
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	461d      	mov	r5, r3
 8004e54:	f04f 0600 	mov.w	r6, #0
 8004e58:	196b      	adds	r3, r5, r5
 8004e5a:	eb46 0406 	adc.w	r4, r6, r6
 8004e5e:	461a      	mov	r2, r3
 8004e60:	4623      	mov	r3, r4
 8004e62:	f7fb fe1b 	bl	8000a9c <__aeabi_uldivmod>
 8004e66:	4603      	mov	r3, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <UART_SetConfig+0x384>)
 8004e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	2164      	movs	r1, #100	; 0x64
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	3332      	adds	r3, #50	; 0x32
 8004e80:	4a65      	ldr	r2, [pc, #404]	; (8005018 <UART_SetConfig+0x384>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	f003 0207 	and.w	r2, r3, #7
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4442      	add	r2, r8
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	e26f      	b.n	8005376 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e96:	f7fe ff19 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8004e9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	f04f 0600 	mov.w	r6, #0
 8004ea4:	46a8      	mov	r8, r5
 8004ea6:	46b1      	mov	r9, r6
 8004ea8:	eb18 0308 	adds.w	r3, r8, r8
 8004eac:	eb49 0409 	adc.w	r4, r9, r9
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	46a1      	mov	r9, r4
 8004eb4:	eb18 0805 	adds.w	r8, r8, r5
 8004eb8:	eb49 0906 	adc.w	r9, r9, r6
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ec8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ecc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ed0:	4688      	mov	r8, r1
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	eb18 0005 	adds.w	r0, r8, r5
 8004ed8:	eb49 0106 	adc.w	r1, r9, r6
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	461d      	mov	r5, r3
 8004ee2:	f04f 0600 	mov.w	r6, #0
 8004ee6:	196b      	adds	r3, r5, r5
 8004ee8:	eb46 0406 	adc.w	r4, r6, r6
 8004eec:	461a      	mov	r2, r3
 8004eee:	4623      	mov	r3, r4
 8004ef0:	f7fb fdd4 	bl	8000a9c <__aeabi_uldivmod>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b47      	ldr	r3, [pc, #284]	; (8005018 <UART_SetConfig+0x384>)
 8004efc:	fba3 2302 	umull	r2, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	461d      	mov	r5, r3
 8004f0a:	f04f 0600 	mov.w	r6, #0
 8004f0e:	46a9      	mov	r9, r5
 8004f10:	46b2      	mov	sl, r6
 8004f12:	eb19 0309 	adds.w	r3, r9, r9
 8004f16:	eb4a 040a 	adc.w	r4, sl, sl
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	46a2      	mov	sl, r4
 8004f1e:	eb19 0905 	adds.w	r9, r9, r5
 8004f22:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f3a:	4689      	mov	r9, r1
 8004f3c:	4692      	mov	sl, r2
 8004f3e:	eb19 0005 	adds.w	r0, r9, r5
 8004f42:	eb4a 0106 	adc.w	r1, sl, r6
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	f04f 0600 	mov.w	r6, #0
 8004f50:	196b      	adds	r3, r5, r5
 8004f52:	eb46 0406 	adc.w	r4, r6, r6
 8004f56:	461a      	mov	r2, r3
 8004f58:	4623      	mov	r3, r4
 8004f5a:	f7fb fd9f 	bl	8000a9c <__aeabi_uldivmod>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <UART_SetConfig+0x384>)
 8004f66:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2164      	movs	r1, #100	; 0x64
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	3332      	adds	r3, #50	; 0x32
 8004f78:	4a27      	ldr	r2, [pc, #156]	; (8005018 <UART_SetConfig+0x384>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f86:	4498      	add	r8, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	f04f 0600 	mov.w	r6, #0
 8004f90:	46a9      	mov	r9, r5
 8004f92:	46b2      	mov	sl, r6
 8004f94:	eb19 0309 	adds.w	r3, r9, r9
 8004f98:	eb4a 040a 	adc.w	r4, sl, sl
 8004f9c:	4699      	mov	r9, r3
 8004f9e:	46a2      	mov	sl, r4
 8004fa0:	eb19 0905 	adds.w	r9, r9, r5
 8004fa4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fbc:	4689      	mov	r9, r1
 8004fbe:	4692      	mov	sl, r2
 8004fc0:	eb19 0005 	adds.w	r0, r9, r5
 8004fc4:	eb4a 0106 	adc.w	r1, sl, r6
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	461d      	mov	r5, r3
 8004fce:	f04f 0600 	mov.w	r6, #0
 8004fd2:	196b      	adds	r3, r5, r5
 8004fd4:	eb46 0406 	adc.w	r4, r6, r6
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	f7fb fd5e 	bl	8000a9c <__aeabi_uldivmod>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <UART_SetConfig+0x384>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <UART_SetConfig+0x384>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	f003 0207 	and.w	r2, r3, #7
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4442      	add	r2, r8
 800500c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800500e:	e1b2      	b.n	8005376 <UART_SetConfig+0x6e2>
 8005010:	40011000 	.word	0x40011000
 8005014:	40011400 	.word	0x40011400
 8005018:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4ad7      	ldr	r2, [pc, #860]	; (8005380 <UART_SetConfig+0x6ec>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d005      	beq.n	8005032 <UART_SetConfig+0x39e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4ad6      	ldr	r2, [pc, #856]	; (8005384 <UART_SetConfig+0x6f0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f040 80d1 	bne.w	80051d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005032:	f7fe fe5f 	bl	8003cf4 <HAL_RCC_GetPCLK2Freq>
 8005036:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	469a      	mov	sl, r3
 800503c:	f04f 0b00 	mov.w	fp, #0
 8005040:	46d0      	mov	r8, sl
 8005042:	46d9      	mov	r9, fp
 8005044:	eb18 0308 	adds.w	r3, r8, r8
 8005048:	eb49 0409 	adc.w	r4, r9, r9
 800504c:	4698      	mov	r8, r3
 800504e:	46a1      	mov	r9, r4
 8005050:	eb18 080a 	adds.w	r8, r8, sl
 8005054:	eb49 090b 	adc.w	r9, r9, fp
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005064:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005068:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800506c:	4688      	mov	r8, r1
 800506e:	4691      	mov	r9, r2
 8005070:	eb1a 0508 	adds.w	r5, sl, r8
 8005074:	eb4b 0609 	adc.w	r6, fp, r9
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	4619      	mov	r1, r3
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	f04f 0400 	mov.w	r4, #0
 800508a:	0094      	lsls	r4, r2, #2
 800508c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005090:	008b      	lsls	r3, r1, #2
 8005092:	461a      	mov	r2, r3
 8005094:	4623      	mov	r3, r4
 8005096:	4628      	mov	r0, r5
 8005098:	4631      	mov	r1, r6
 800509a:	f7fb fcff 	bl	8000a9c <__aeabi_uldivmod>
 800509e:	4603      	mov	r3, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	461a      	mov	r2, r3
 80050a4:	4bb8      	ldr	r3, [pc, #736]	; (8005388 <UART_SetConfig+0x6f4>)
 80050a6:	fba3 2302 	umull	r2, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	469b      	mov	fp, r3
 80050b4:	f04f 0c00 	mov.w	ip, #0
 80050b8:	46d9      	mov	r9, fp
 80050ba:	46e2      	mov	sl, ip
 80050bc:	eb19 0309 	adds.w	r3, r9, r9
 80050c0:	eb4a 040a 	adc.w	r4, sl, sl
 80050c4:	4699      	mov	r9, r3
 80050c6:	46a2      	mov	sl, r4
 80050c8:	eb19 090b 	adds.w	r9, r9, fp
 80050cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050e4:	4689      	mov	r9, r1
 80050e6:	4692      	mov	sl, r2
 80050e8:	eb1b 0509 	adds.w	r5, fp, r9
 80050ec:	eb4c 060a 	adc.w	r6, ip, sl
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	0094      	lsls	r4, r2, #2
 8005104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005108:	008b      	lsls	r3, r1, #2
 800510a:	461a      	mov	r2, r3
 800510c:	4623      	mov	r3, r4
 800510e:	4628      	mov	r0, r5
 8005110:	4631      	mov	r1, r6
 8005112:	f7fb fcc3 	bl	8000a9c <__aeabi_uldivmod>
 8005116:	4603      	mov	r3, r0
 8005118:	460c      	mov	r4, r1
 800511a:	461a      	mov	r2, r3
 800511c:	4b9a      	ldr	r3, [pc, #616]	; (8005388 <UART_SetConfig+0x6f4>)
 800511e:	fba3 1302 	umull	r1, r3, r3, r2
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	2164      	movs	r1, #100	; 0x64
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	3332      	adds	r3, #50	; 0x32
 8005130:	4a95      	ldr	r2, [pc, #596]	; (8005388 <UART_SetConfig+0x6f4>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800513c:	4498      	add	r8, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	469b      	mov	fp, r3
 8005142:	f04f 0c00 	mov.w	ip, #0
 8005146:	46d9      	mov	r9, fp
 8005148:	46e2      	mov	sl, ip
 800514a:	eb19 0309 	adds.w	r3, r9, r9
 800514e:	eb4a 040a 	adc.w	r4, sl, sl
 8005152:	4699      	mov	r9, r3
 8005154:	46a2      	mov	sl, r4
 8005156:	eb19 090b 	adds.w	r9, r9, fp
 800515a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800515e:	f04f 0100 	mov.w	r1, #0
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800516a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800516e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005172:	4689      	mov	r9, r1
 8005174:	4692      	mov	sl, r2
 8005176:	eb1b 0509 	adds.w	r5, fp, r9
 800517a:	eb4c 060a 	adc.w	r6, ip, sl
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4619      	mov	r1, r3
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	0094      	lsls	r4, r2, #2
 8005192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005196:	008b      	lsls	r3, r1, #2
 8005198:	461a      	mov	r2, r3
 800519a:	4623      	mov	r3, r4
 800519c:	4628      	mov	r0, r5
 800519e:	4631      	mov	r1, r6
 80051a0:	f7fb fc7c 	bl	8000a9c <__aeabi_uldivmod>
 80051a4:	4603      	mov	r3, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b77      	ldr	r3, [pc, #476]	; (8005388 <UART_SetConfig+0x6f4>)
 80051ac:	fba3 1302 	umull	r1, r3, r3, r2
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	2164      	movs	r1, #100	; 0x64
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	3332      	adds	r3, #50	; 0x32
 80051be:	4a72      	ldr	r2, [pc, #456]	; (8005388 <UART_SetConfig+0x6f4>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	f003 020f 	and.w	r2, r3, #15
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4442      	add	r2, r8
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	e0d0      	b.n	8005376 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80051d4:	f7fe fd7a 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 80051d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	469a      	mov	sl, r3
 80051de:	f04f 0b00 	mov.w	fp, #0
 80051e2:	46d0      	mov	r8, sl
 80051e4:	46d9      	mov	r9, fp
 80051e6:	eb18 0308 	adds.w	r3, r8, r8
 80051ea:	eb49 0409 	adc.w	r4, r9, r9
 80051ee:	4698      	mov	r8, r3
 80051f0:	46a1      	mov	r9, r4
 80051f2:	eb18 080a 	adds.w	r8, r8, sl
 80051f6:	eb49 090b 	adc.w	r9, r9, fp
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005206:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800520a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800520e:	4688      	mov	r8, r1
 8005210:	4691      	mov	r9, r2
 8005212:	eb1a 0508 	adds.w	r5, sl, r8
 8005216:	eb4b 0609 	adc.w	r6, fp, r9
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	0094      	lsls	r4, r2, #2
 800522e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005232:	008b      	lsls	r3, r1, #2
 8005234:	461a      	mov	r2, r3
 8005236:	4623      	mov	r3, r4
 8005238:	4628      	mov	r0, r5
 800523a:	4631      	mov	r1, r6
 800523c:	f7fb fc2e 	bl	8000a9c <__aeabi_uldivmod>
 8005240:	4603      	mov	r3, r0
 8005242:	460c      	mov	r4, r1
 8005244:	461a      	mov	r2, r3
 8005246:	4b50      	ldr	r3, [pc, #320]	; (8005388 <UART_SetConfig+0x6f4>)
 8005248:	fba3 2302 	umull	r2, r3, r3, r2
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	469b      	mov	fp, r3
 8005256:	f04f 0c00 	mov.w	ip, #0
 800525a:	46d9      	mov	r9, fp
 800525c:	46e2      	mov	sl, ip
 800525e:	eb19 0309 	adds.w	r3, r9, r9
 8005262:	eb4a 040a 	adc.w	r4, sl, sl
 8005266:	4699      	mov	r9, r3
 8005268:	46a2      	mov	sl, r4
 800526a:	eb19 090b 	adds.w	r9, r9, fp
 800526e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005272:	f04f 0100 	mov.w	r1, #0
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800527e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005282:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005286:	4689      	mov	r9, r1
 8005288:	4692      	mov	sl, r2
 800528a:	eb1b 0509 	adds.w	r5, fp, r9
 800528e:	eb4c 060a 	adc.w	r6, ip, sl
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4619      	mov	r1, r3
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	f04f 0400 	mov.w	r4, #0
 80052a4:	0094      	lsls	r4, r2, #2
 80052a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052aa:	008b      	lsls	r3, r1, #2
 80052ac:	461a      	mov	r2, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	4631      	mov	r1, r6
 80052b4:	f7fb fbf2 	bl	8000a9c <__aeabi_uldivmod>
 80052b8:	4603      	mov	r3, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	461a      	mov	r2, r3
 80052be:	4b32      	ldr	r3, [pc, #200]	; (8005388 <UART_SetConfig+0x6f4>)
 80052c0:	fba3 1302 	umull	r1, r3, r3, r2
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	2164      	movs	r1, #100	; 0x64
 80052c8:	fb01 f303 	mul.w	r3, r1, r3
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	3332      	adds	r3, #50	; 0x32
 80052d2:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <UART_SetConfig+0x6f4>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052de:	4498      	add	r8, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	469b      	mov	fp, r3
 80052e4:	f04f 0c00 	mov.w	ip, #0
 80052e8:	46d9      	mov	r9, fp
 80052ea:	46e2      	mov	sl, ip
 80052ec:	eb19 0309 	adds.w	r3, r9, r9
 80052f0:	eb4a 040a 	adc.w	r4, sl, sl
 80052f4:	4699      	mov	r9, r3
 80052f6:	46a2      	mov	sl, r4
 80052f8:	eb19 090b 	adds.w	r9, r9, fp
 80052fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800530c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005314:	4689      	mov	r9, r1
 8005316:	4692      	mov	sl, r2
 8005318:	eb1b 0509 	adds.w	r5, fp, r9
 800531c:	eb4c 060a 	adc.w	r6, ip, sl
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4619      	mov	r1, r3
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	f04f 0400 	mov.w	r4, #0
 8005332:	0094      	lsls	r4, r2, #2
 8005334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005338:	008b      	lsls	r3, r1, #2
 800533a:	461a      	mov	r2, r3
 800533c:	4623      	mov	r3, r4
 800533e:	4628      	mov	r0, r5
 8005340:	4631      	mov	r1, r6
 8005342:	f7fb fbab 	bl	8000a9c <__aeabi_uldivmod>
 8005346:	4603      	mov	r3, r0
 8005348:	460c      	mov	r4, r1
 800534a:	461a      	mov	r2, r3
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <UART_SetConfig+0x6f4>)
 800534e:	fba3 1302 	umull	r1, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2164      	movs	r1, #100	; 0x64
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	3332      	adds	r3, #50	; 0x32
 8005360:	4a09      	ldr	r2, [pc, #36]	; (8005388 <UART_SetConfig+0x6f4>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	f003 020f 	and.w	r2, r3, #15
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4442      	add	r2, r8
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	e7ff      	b.n	8005376 <UART_SetConfig+0x6e2>
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005380:	40011000 	.word	0x40011000
 8005384:	40011400 	.word	0x40011400
 8005388:	51eb851f 	.word	0x51eb851f

0800538c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800539a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800539e:	2b84      	cmp	r3, #132	; 0x84
 80053a0:	d005      	beq.n	80053ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80053a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	3303      	adds	r3, #3
 80053ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80053ae:	68fb      	ldr	r3, [r7, #12]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053c0:	f000 fada 	bl	8005978 <vTaskStartScheduler>
  
  return osOK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	bd80      	pop	{r7, pc}

080053ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053cc:	b089      	sub	sp, #36	; 0x24
 80053ce:	af04      	add	r7, sp, #16
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <osThreadCreate+0x54>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01c      	beq.n	800541e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685c      	ldr	r4, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681d      	ldr	r5, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691e      	ldr	r6, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ffc8 	bl	800538c <makeFreeRtosPriority>
 80053fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005406:	9202      	str	r2, [sp, #8]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	9100      	str	r1, [sp, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4632      	mov	r2, r6
 8005410:	4629      	mov	r1, r5
 8005412:	4620      	mov	r0, r4
 8005414:	f000 f8ed 	bl	80055f2 <xTaskCreateStatic>
 8005418:	4603      	mov	r3, r0
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e01c      	b.n	8005458 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685c      	ldr	r4, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800542a:	b29e      	uxth	r6, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ffaa 	bl	800538c <makeFreeRtosPriority>
 8005438:	4602      	mov	r2, r0
 800543a:	f107 030c 	add.w	r3, r7, #12
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	9200      	str	r2, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4632      	mov	r2, r6
 8005446:	4629      	mov	r1, r5
 8005448:	4620      	mov	r0, r4
 800544a:	f000 f92c 	bl	80056a6 <xTaskCreate>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005458:	68fb      	ldr	r3, [r7, #12]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005462 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <osDelay+0x16>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e000      	b.n	800547a <osDelay+0x18>
 8005478:	2301      	movs	r3, #1
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fa48 	bl	8005910 <vTaskDelay>
  
  return osOK;
 8005480:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 0208 	add.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 0208 	add.w	r2, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	601a      	str	r2, [r3, #0]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d103      	bne.n	800554c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e00c      	b.n	8005566 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3308      	adds	r3, #8
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e002      	b.n	800555a <vListInsert+0x2e>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d2f6      	bcs.n	8005554 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6852      	ldr	r2, [r2, #4]
 80055be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d103      	bne.n	80055d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	1e5a      	subs	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b08e      	sub	sp, #56	; 0x38
 80055f6:	af04      	add	r7, sp, #16
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	e7fe      	b.n	8005618 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <xTaskCreateStatic+0x42>
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	61fb      	str	r3, [r7, #28]
 8005632:	e7fe      	b.n	8005632 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005634:	2354      	movs	r3, #84	; 0x54
 8005636:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b54      	cmp	r3, #84	; 0x54
 800563c:	d009      	beq.n	8005652 <xTaskCreateStatic+0x60>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e7fe      	b.n	8005650 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005652:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01e      	beq.n	8005698 <xTaskCreateStatic+0xa6>
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005668:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	2202      	movs	r2, #2
 800566e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005672:	2300      	movs	r3, #0
 8005674:	9303      	str	r3, [sp, #12]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9302      	str	r3, [sp, #8]
 800567a:	f107 0314 	add.w	r3, r7, #20
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f850 	bl	8005730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005692:	f000 f8d3 	bl	800583c <prvAddNewTaskToReadyList>
 8005696:	e001      	b.n	800569c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800569c:	697b      	ldr	r3, [r7, #20]
	}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08c      	sub	sp, #48	; 0x30
 80056aa:	af04      	add	r7, sp, #16
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 feb2 	bl	8006424 <pvPortMalloc>
 80056c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00e      	beq.n	80056e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056c8:	2054      	movs	r0, #84	; 0x54
 80056ca:	f000 feab 	bl	8006424 <pvPortMalloc>
 80056ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
 80056dc:	e005      	b.n	80056ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056de:	6978      	ldr	r0, [r7, #20]
 80056e0:	f000 ff62 	bl	80065a8 <vPortFree>
 80056e4:	e001      	b.n	80056ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d017      	beq.n	8005720 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	9302      	str	r3, [sp, #8]
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f80e 	bl	8005730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005714:	69f8      	ldr	r0, [r7, #28]
 8005716:	f000 f891 	bl	800583c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800571a:	2301      	movs	r3, #1
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e002      	b.n	8005726 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005726:	69bb      	ldr	r3, [r7, #24]
	}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b088      	sub	sp, #32
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005748:	3b01      	subs	r3, #1
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <prvInitialiseNewTask+0x46>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e7fe      	b.n	8005774 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01f      	beq.n	80057bc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	e012      	b.n	80057a8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	7819      	ldrb	r1, [r3, #0]
 800578a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	3334      	adds	r3, #52	; 0x34
 8005792:	460a      	mov	r2, r1
 8005794:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	4413      	add	r3, r2
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d006      	beq.n	80057b0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3301      	adds	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2b0f      	cmp	r3, #15
 80057ac:	d9e9      	bls.n	8005782 <prvInitialiseNewTask+0x52>
 80057ae:	e000      	b.n	80057b2 <prvInitialiseNewTask+0x82>
			{
				break;
 80057b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057ba:	e003      	b.n	80057c4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d901      	bls.n	80057ce <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057ca:	2306      	movs	r3, #6
 80057cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	2200      	movs	r2, #0
 80057de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fe70 	bl	80054ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	3318      	adds	r3, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fe6b 	bl	80054ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	f1c3 0207 	rsb	r2, r3, #7
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2200      	movs	r2, #0
 800580e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	69b8      	ldr	r0, [r7, #24]
 800581e:	f000 fbfd 	bl	800601c <pxPortInitialiseStack>
 8005822:	4602      	mov	r2, r0
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005832:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005834:	bf00      	nop
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005844:	f000 fd12 	bl	800626c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005848:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <prvAddNewTaskToReadyList+0xb8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	4a29      	ldr	r2, [pc, #164]	; (80058f4 <prvAddNewTaskToReadyList+0xb8>)
 8005850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005852:	4b29      	ldr	r3, [pc, #164]	; (80058f8 <prvAddNewTaskToReadyList+0xbc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <prvAddNewTaskToReadyList+0xbc>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005860:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <prvAddNewTaskToReadyList+0xb8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d110      	bne.n	800588a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005868:	f000 fab8 	bl	8005ddc <prvInitialiseTaskLists>
 800586c:	e00d      	b.n	800588a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <prvAddNewTaskToReadyList+0xc0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <prvAddNewTaskToReadyList+0xbc>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	429a      	cmp	r2, r3
 8005882:	d802      	bhi.n	800588a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005884:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <prvAddNewTaskToReadyList+0xbc>)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <prvAddNewTaskToReadyList+0xc4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <prvAddNewTaskToReadyList+0xc4>)
 8005892:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	2201      	movs	r2, #1
 800589a:	409a      	lsls	r2, r3
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	4a18      	ldr	r2, [pc, #96]	; (8005904 <prvAddNewTaskToReadyList+0xc8>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4a15      	ldr	r2, [pc, #84]	; (8005908 <prvAddNewTaskToReadyList+0xcc>)
 80058b4:	441a      	add	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7ff fe11 	bl	80054e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058c2:	f000 fd01 	bl	80062c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <prvAddNewTaskToReadyList+0xc0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058ce:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvAddNewTaskToReadyList+0xbc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d207      	bcs.n	80058ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <prvAddNewTaskToReadyList+0xd0>)
 80058de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	200003ec 	.word	0x200003ec
 80058f8:	200002ec 	.word	0x200002ec
 80058fc:	200003f8 	.word	0x200003f8
 8005900:	20000408 	.word	0x20000408
 8005904:	200003f4 	.word	0x200003f4
 8005908:	200002f0 	.word	0x200002f0
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d016      	beq.n	8005950 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005922:	4b13      	ldr	r3, [pc, #76]	; (8005970 <vTaskDelay+0x60>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <vTaskDelay+0x2e>
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	e7fe      	b.n	800593c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800593e:	f000 f879 	bl	8005a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005942:	2100      	movs	r1, #0
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb03 	bl	8005f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800594a:	f000 f881 	bl	8005a50 <xTaskResumeAll>
 800594e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d107      	bne.n	8005966 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005956:	4b07      	ldr	r3, [pc, #28]	; (8005974 <vTaskDelay+0x64>)
 8005958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000414 	.word	0x20000414
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005986:	463a      	mov	r2, r7
 8005988:	1d39      	adds	r1, r7, #4
 800598a:	f107 0308 	add.w	r3, r7, #8
 800598e:	4618      	mov	r0, r3
 8005990:	f7fb fd70 	bl	8001474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	9202      	str	r2, [sp, #8]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	2300      	movs	r3, #0
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	2300      	movs	r3, #0
 80059a4:	460a      	mov	r2, r1
 80059a6:	491d      	ldr	r1, [pc, #116]	; (8005a1c <vTaskStartScheduler+0xa4>)
 80059a8:	481d      	ldr	r0, [pc, #116]	; (8005a20 <vTaskStartScheduler+0xa8>)
 80059aa:	f7ff fe22 	bl	80055f2 <xTaskCreateStatic>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <vTaskStartScheduler+0xac>)
 80059b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059b4:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <vTaskStartScheduler+0xac>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e001      	b.n	80059c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d115      	bne.n	80059f8 <vTaskStartScheduler+0x80>
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <vTaskStartScheduler+0xb0>)
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059e6:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <vTaskStartScheduler+0xb4>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <vTaskStartScheduler+0xb8>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059f2:	f000 fb9d 	bl	8006130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059f6:	e00d      	b.n	8005a14 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d109      	bne.n	8005a14 <vTaskStartScheduler+0x9c>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e7fe      	b.n	8005a12 <vTaskStartScheduler+0x9a>
}
 8005a14:	bf00      	nop
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08007780 	.word	0x08007780
 8005a20:	08005dad 	.word	0x08005dad
 8005a24:	20000410 	.word	0x20000410
 8005a28:	2000040c 	.word	0x2000040c
 8005a2c:	200003f8 	.word	0x200003f8
 8005a30:	200003f0 	.word	0x200003f0

08005a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <vTaskSuspendAll+0x18>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	4a03      	ldr	r2, [pc, #12]	; (8005a4c <vTaskSuspendAll+0x18>)
 8005a40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	20000414 	.word	0x20000414

08005a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a5e:	4b41      	ldr	r3, [pc, #260]	; (8005b64 <xTaskResumeAll+0x114>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <xTaskResumeAll+0x2a>
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	e7fe      	b.n	8005a78 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a7a:	f000 fbf7 	bl	800626c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a7e:	4b39      	ldr	r3, [pc, #228]	; (8005b64 <xTaskResumeAll+0x114>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	4a37      	ldr	r2, [pc, #220]	; (8005b64 <xTaskResumeAll+0x114>)
 8005a86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a88:	4b36      	ldr	r3, [pc, #216]	; (8005b64 <xTaskResumeAll+0x114>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d161      	bne.n	8005b54 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a90:	4b35      	ldr	r3, [pc, #212]	; (8005b68 <xTaskResumeAll+0x118>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d05d      	beq.n	8005b54 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a98:	e02e      	b.n	8005af8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9a:	4b34      	ldr	r3, [pc, #208]	; (8005b6c <xTaskResumeAll+0x11c>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3318      	adds	r3, #24
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fd79 	bl	800559e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fd74 	bl	800559e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	2201      	movs	r2, #1
 8005abc:	409a      	lsls	r2, r3
 8005abe:	4b2c      	ldr	r3, [pc, #176]	; (8005b70 <xTaskResumeAll+0x120>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	4a2a      	ldr	r2, [pc, #168]	; (8005b70 <xTaskResumeAll+0x120>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4a27      	ldr	r2, [pc, #156]	; (8005b74 <xTaskResumeAll+0x124>)
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f7ff fd00 	bl	80054e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4b23      	ldr	r3, [pc, #140]	; (8005b78 <xTaskResumeAll+0x128>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005af2:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <xTaskResumeAll+0x12c>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af8:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <xTaskResumeAll+0x11c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1cc      	bne.n	8005a9a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b06:	f000 fa03 	bl	8005f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b0a:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <xTaskResumeAll+0x130>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b16:	f000 f837 	bl	8005b88 <xTaskIncrementTick>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005b20:	4b16      	ldr	r3, [pc, #88]	; (8005b7c <xTaskResumeAll+0x12c>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f1      	bne.n	8005b16 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005b32:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <xTaskResumeAll+0x130>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b38:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <xTaskResumeAll+0x12c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <xTaskResumeAll+0x134>)
 8005b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b54:	f000 fbb8 	bl	80062c8 <vPortExitCritical>

	return xAlreadyYielded;
 8005b58:	68bb      	ldr	r3, [r7, #8]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000414 	.word	0x20000414
 8005b68:	200003ec 	.word	0x200003ec
 8005b6c:	200003ac 	.word	0x200003ac
 8005b70:	200003f4 	.word	0x200003f4
 8005b74:	200002f0 	.word	0x200002f0
 8005b78:	200002ec 	.word	0x200002ec
 8005b7c:	20000400 	.word	0x20000400
 8005b80:	200003fc 	.word	0x200003fc
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b92:	4b4e      	ldr	r3, [pc, #312]	; (8005ccc <xTaskIncrementTick+0x144>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8087 	bne.w	8005caa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b9c:	4b4c      	ldr	r3, [pc, #304]	; (8005cd0 <xTaskIncrementTick+0x148>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ba4:	4a4a      	ldr	r2, [pc, #296]	; (8005cd0 <xTaskIncrementTick+0x148>)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11f      	bne.n	8005bf0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bb0:	4b48      	ldr	r3, [pc, #288]	; (8005cd4 <xTaskIncrementTick+0x14c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <xTaskIncrementTick+0x46>
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	e7fe      	b.n	8005bcc <xTaskIncrementTick+0x44>
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <xTaskIncrementTick+0x14c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	4b40      	ldr	r3, [pc, #256]	; (8005cd8 <xTaskIncrementTick+0x150>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a3e      	ldr	r2, [pc, #248]	; (8005cd4 <xTaskIncrementTick+0x14c>)
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	4a3e      	ldr	r2, [pc, #248]	; (8005cd8 <xTaskIncrementTick+0x150>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	4b3e      	ldr	r3, [pc, #248]	; (8005cdc <xTaskIncrementTick+0x154>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a3c      	ldr	r2, [pc, #240]	; (8005cdc <xTaskIncrementTick+0x154>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	f000 f990 	bl	8005f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bf0:	4b3b      	ldr	r3, [pc, #236]	; (8005ce0 <xTaskIncrementTick+0x158>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d348      	bcc.n	8005c8c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bfa:	4b36      	ldr	r3, [pc, #216]	; (8005cd4 <xTaskIncrementTick+0x14c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c04:	4b36      	ldr	r3, [pc, #216]	; (8005ce0 <xTaskIncrementTick+0x158>)
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0a:	601a      	str	r2, [r3, #0]
					break;
 8005c0c:	e03e      	b.n	8005c8c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0e:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <xTaskIncrementTick+0x14c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d203      	bcs.n	8005c2e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c26:	4a2e      	ldr	r2, [pc, #184]	; (8005ce0 <xTaskIncrementTick+0x158>)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c2c:	e02e      	b.n	8005c8c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fcb3 	bl	800559e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3318      	adds	r3, #24
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fcaa 	bl	800559e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	2201      	movs	r2, #1
 8005c50:	409a      	lsls	r2, r3
 8005c52:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <xTaskIncrementTick+0x15c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	4a22      	ldr	r2, [pc, #136]	; (8005ce4 <xTaskIncrementTick+0x15c>)
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4a1f      	ldr	r2, [pc, #124]	; (8005ce8 <xTaskIncrementTick+0x160>)
 8005c6a:	441a      	add	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f7ff fc36 	bl	80054e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <xTaskIncrementTick+0x164>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d3b9      	bcc.n	8005bfa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c8a:	e7b6      	b.n	8005bfa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c8c:	4b17      	ldr	r3, [pc, #92]	; (8005cec <xTaskIncrementTick+0x164>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	4915      	ldr	r1, [pc, #84]	; (8005ce8 <xTaskIncrementTick+0x160>)
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d907      	bls.n	8005cb4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e004      	b.n	8005cb4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005caa:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <xTaskIncrementTick+0x168>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <xTaskIncrementTick+0x168>)
 8005cb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <xTaskIncrementTick+0x16c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005cc0:	697b      	ldr	r3, [r7, #20]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20000414 	.word	0x20000414
 8005cd0:	200003f0 	.word	0x200003f0
 8005cd4:	200003a4 	.word	0x200003a4
 8005cd8:	200003a8 	.word	0x200003a8
 8005cdc:	20000404 	.word	0x20000404
 8005ce0:	2000040c 	.word	0x2000040c
 8005ce4:	200003f4 	.word	0x200003f4
 8005ce8:	200002f0 	.word	0x200002f0
 8005cec:	200002ec 	.word	0x200002ec
 8005cf0:	200003fc 	.word	0x200003fc
 8005cf4:	20000400 	.word	0x20000400

08005cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cfe:	4b26      	ldr	r3, [pc, #152]	; (8005d98 <vTaskSwitchContext+0xa0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d06:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <vTaskSwitchContext+0xa4>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d0c:	e03e      	b.n	8005d8c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005d0e:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <vTaskSwitchContext+0xa4>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d14:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <vTaskSwitchContext+0xa8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	fab3 f383 	clz	r3, r3
 8005d20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d22:	7afb      	ldrb	r3, [r7, #11]
 8005d24:	f1c3 031f 	rsb	r3, r3, #31
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	491e      	ldr	r1, [pc, #120]	; (8005da4 <vTaskSwitchContext+0xac>)
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	607b      	str	r3, [r7, #4]
 8005d50:	e7fe      	b.n	8005d50 <vTaskSwitchContext+0x58>
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a11      	ldr	r2, [pc, #68]	; (8005da4 <vTaskSwitchContext+0xac>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3308      	adds	r3, #8
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d104      	bne.n	8005d82 <vTaskSwitchContext+0x8a>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <vTaskSwitchContext+0xb0>)
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	20000414 	.word	0x20000414
 8005d9c:	20000400 	.word	0x20000400
 8005da0:	200003f4 	.word	0x200003f4
 8005da4:	200002f0 	.word	0x200002f0
 8005da8:	200002ec 	.word	0x200002ec

08005dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005db4:	f000 f852 	bl	8005e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <prvIdleTask+0x28>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d9f9      	bls.n	8005db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <prvIdleTask+0x2c>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dd0:	e7f0      	b.n	8005db4 <prvIdleTask+0x8>
 8005dd2:	bf00      	nop
 8005dd4:	200002f0 	.word	0x200002f0
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de2:	2300      	movs	r3, #0
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	e00c      	b.n	8005e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <prvInitialiseTaskLists+0x60>)
 8005df4:	4413      	add	r3, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fb47 	bl	800548a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d9ef      	bls.n	8005de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e08:	480d      	ldr	r0, [pc, #52]	; (8005e40 <prvInitialiseTaskLists+0x64>)
 8005e0a:	f7ff fb3e 	bl	800548a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e0e:	480d      	ldr	r0, [pc, #52]	; (8005e44 <prvInitialiseTaskLists+0x68>)
 8005e10:	f7ff fb3b 	bl	800548a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e14:	480c      	ldr	r0, [pc, #48]	; (8005e48 <prvInitialiseTaskLists+0x6c>)
 8005e16:	f7ff fb38 	bl	800548a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e1a:	480c      	ldr	r0, [pc, #48]	; (8005e4c <prvInitialiseTaskLists+0x70>)
 8005e1c:	f7ff fb35 	bl	800548a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e20:	480b      	ldr	r0, [pc, #44]	; (8005e50 <prvInitialiseTaskLists+0x74>)
 8005e22:	f7ff fb32 	bl	800548a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <prvInitialiseTaskLists+0x78>)
 8005e28:	4a05      	ldr	r2, [pc, #20]	; (8005e40 <prvInitialiseTaskLists+0x64>)
 8005e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e2c:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <prvInitialiseTaskLists+0x7c>)
 8005e2e:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <prvInitialiseTaskLists+0x68>)
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	200002f0 	.word	0x200002f0
 8005e40:	2000037c 	.word	0x2000037c
 8005e44:	20000390 	.word	0x20000390
 8005e48:	200003ac 	.word	0x200003ac
 8005e4c:	200003c0 	.word	0x200003c0
 8005e50:	200003d8 	.word	0x200003d8
 8005e54:	200003a4 	.word	0x200003a4
 8005e58:	200003a8 	.word	0x200003a8

08005e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e62:	e019      	b.n	8005e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e64:	f000 fa02 	bl	800626c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <prvCheckTasksWaitingTermination+0x4c>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fb92 	bl	800559e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <prvCheckTasksWaitingTermination+0x50>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <prvCheckTasksWaitingTermination+0x50>)
 8005e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <prvCheckTasksWaitingTermination+0x54>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <prvCheckTasksWaitingTermination+0x54>)
 8005e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e8e:	f000 fa1b 	bl	80062c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f80e 	bl	8005eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <prvCheckTasksWaitingTermination+0x54>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e1      	bne.n	8005e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	200003c0 	.word	0x200003c0
 8005eac:	200003ec 	.word	0x200003ec
 8005eb0:	200003d4 	.word	0x200003d4

08005eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d108      	bne.n	8005ed8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fb6c 	bl	80065a8 <vPortFree>
				vPortFree( pxTCB );
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fb69 	bl	80065a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ed6:	e017      	b.n	8005f08 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d103      	bne.n	8005eea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fb60 	bl	80065a8 <vPortFree>
	}
 8005ee8:	e00e      	b.n	8005f08 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d009      	beq.n	8005f08 <prvDeleteTCB+0x54>
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e7fe      	b.n	8005f06 <prvDeleteTCB+0x52>
	}
 8005f08:	bf00      	nop
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <prvResetNextTaskUnblockTime+0x38>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <prvResetNextTaskUnblockTime+0x3c>)
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f28:	e008      	b.n	8005f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <prvResetNextTaskUnblockTime+0x38>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <prvResetNextTaskUnblockTime+0x3c>)
 8005f3a:	6013      	str	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	200003a4 	.word	0x200003a4
 8005f4c:	2000040c 	.word	0x2000040c

08005f50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f5a:	4b29      	ldr	r3, [pc, #164]	; (8006000 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f60:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fb19 	bl	800559e <uxListRemove>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f72:	4b24      	ldr	r3, [pc, #144]	; (8006004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2201      	movs	r2, #1
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43da      	mvns	r2, r3
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4013      	ands	r3, r2
 8005f86:	4a20      	ldr	r2, [pc, #128]	; (8006008 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d10a      	bne.n	8005fa8 <prvAddCurrentTaskToDelayedList+0x58>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f98:	4b1a      	ldr	r3, [pc, #104]	; (8006004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	481a      	ldr	r0, [pc, #104]	; (800600c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005fa2:	f7ff fa9f 	bl	80054e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fa6:	e026      	b.n	8005ff6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fb0:	4b14      	ldr	r3, [pc, #80]	; (8006004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d209      	bcs.n	8005fd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc0:	4b13      	ldr	r3, [pc, #76]	; (8006010 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f7ff faad 	bl	800552c <vListInsert>
}
 8005fd2:	e010      	b.n	8005ff6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f7ff faa3 	bl	800552c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fe6:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d202      	bcs.n	8005ff6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6013      	str	r3, [r2, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200003f0 	.word	0x200003f0
 8006004:	200002ec 	.word	0x200002ec
 8006008:	200003f4 	.word	0x200003f4
 800600c:	200003d8 	.word	0x200003d8
 8006010:	200003a8 	.word	0x200003a8
 8006014:	200003a4 	.word	0x200003a4
 8006018:	2000040c 	.word	0x2000040c

0800601c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3b04      	subs	r3, #4
 800602c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3b04      	subs	r3, #4
 800603a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0201 	bic.w	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b04      	subs	r3, #4
 800604a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800604c:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <pxPortInitialiseStack+0x64>)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b14      	subs	r3, #20
 8006056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3b04      	subs	r3, #4
 8006062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f06f 0202 	mvn.w	r2, #2
 800606a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b20      	subs	r3, #32
 8006070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	08006085 	.word	0x08006085

08006084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800608e:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <prvTaskExitError+0x50>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d009      	beq.n	80060ac <prvTaskExitError+0x28>
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e7fe      	b.n	80060aa <prvTaskExitError+0x26>
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80060be:	bf00      	nop
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0fc      	beq.n	80060c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000000c 	.word	0x2000000c
	...

080060e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop

08006108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006108:	4808      	ldr	r0, [pc, #32]	; (800612c <prvPortStartFirstTask+0x24>)
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	6800      	ldr	r0, [r0, #0]
 800610e:	f380 8808 	msr	MSP, r0
 8006112:	f04f 0000 	mov.w	r0, #0
 8006116:	f380 8814 	msr	CONTROL, r0
 800611a:	b662      	cpsie	i
 800611c:	b661      	cpsie	f
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	df00      	svc	0
 8006128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612a:	bf00      	nop
 800612c:	e000ed08 	.word	0xe000ed08

08006130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006136:	4b44      	ldr	r3, [pc, #272]	; (8006248 <xPortStartScheduler+0x118>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a44      	ldr	r2, [pc, #272]	; (800624c <xPortStartScheduler+0x11c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d109      	bne.n	8006154 <xPortStartScheduler+0x24>
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	e7fe      	b.n	8006152 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006154:	4b3c      	ldr	r3, [pc, #240]	; (8006248 <xPortStartScheduler+0x118>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3d      	ldr	r2, [pc, #244]	; (8006250 <xPortStartScheduler+0x120>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d109      	bne.n	8006172 <xPortStartScheduler+0x42>
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e7fe      	b.n	8006170 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006172:	4b38      	ldr	r3, [pc, #224]	; (8006254 <xPortStartScheduler+0x124>)
 8006174:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	22ff      	movs	r2, #255	; 0xff
 8006182:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006194:	b2da      	uxtb	r2, r3
 8006196:	4b30      	ldr	r3, [pc, #192]	; (8006258 <xPortStartScheduler+0x128>)
 8006198:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800619a:	4b30      	ldr	r3, [pc, #192]	; (800625c <xPortStartScheduler+0x12c>)
 800619c:	2207      	movs	r2, #7
 800619e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061a0:	e009      	b.n	80061b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80061a2:	4b2e      	ldr	r3, [pc, #184]	; (800625c <xPortStartScheduler+0x12c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	4a2c      	ldr	r2, [pc, #176]	; (800625c <xPortStartScheduler+0x12c>)
 80061aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d0ef      	beq.n	80061a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061c2:	4b26      	ldr	r3, [pc, #152]	; (800625c <xPortStartScheduler+0x12c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1c3 0307 	rsb	r3, r3, #7
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d009      	beq.n	80061e2 <xPortStartScheduler+0xb2>
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	e7fe      	b.n	80061e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061e2:	4b1e      	ldr	r3, [pc, #120]	; (800625c <xPortStartScheduler+0x12c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	4a1c      	ldr	r2, [pc, #112]	; (800625c <xPortStartScheduler+0x12c>)
 80061ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <xPortStartScheduler+0x12c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <xPortStartScheduler+0x12c>)
 80061f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <xPortStartScheduler+0x130>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a16      	ldr	r2, [pc, #88]	; (8006260 <xPortStartScheduler+0x130>)
 8006206:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800620a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800620c:	4b14      	ldr	r3, [pc, #80]	; (8006260 <xPortStartScheduler+0x130>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a13      	ldr	r2, [pc, #76]	; (8006260 <xPortStartScheduler+0x130>)
 8006212:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006218:	f000 f8d6 	bl	80063c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <xPortStartScheduler+0x134>)
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006222:	f000 f8f5 	bl	8006410 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006226:	4b10      	ldr	r3, [pc, #64]	; (8006268 <xPortStartScheduler+0x138>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a0f      	ldr	r2, [pc, #60]	; (8006268 <xPortStartScheduler+0x138>)
 800622c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006230:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006232:	f7ff ff69 	bl	8006108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006236:	f7ff fd5f 	bl	8005cf8 <vTaskSwitchContext>
	prvTaskExitError();
 800623a:	f7ff ff23 	bl	8006084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	e000ed00 	.word	0xe000ed00
 800624c:	410fc271 	.word	0x410fc271
 8006250:	410fc270 	.word	0x410fc270
 8006254:	e000e400 	.word	0xe000e400
 8006258:	20000418 	.word	0x20000418
 800625c:	2000041c 	.word	0x2000041c
 8006260:	e000ed20 	.word	0xe000ed20
 8006264:	2000000c 	.word	0x2000000c
 8006268:	e000ef34 	.word	0xe000ef34

0800626c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006284:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <vPortEnterCritical+0x54>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3301      	adds	r3, #1
 800628a:	4a0d      	ldr	r2, [pc, #52]	; (80062c0 <vPortEnterCritical+0x54>)
 800628c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <vPortEnterCritical+0x54>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d10e      	bne.n	80062b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <vPortEnterCritical+0x58>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <vPortEnterCritical+0x48>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	e7fe      	b.n	80062b2 <vPortEnterCritical+0x46>
	}
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	2000000c 	.word	0x2000000c
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <vPortExitCritical+0x4c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <vPortExitCritical+0x22>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	607b      	str	r3, [r7, #4]
 80062e8:	e7fe      	b.n	80062e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <vPortExitCritical+0x4c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <vPortExitCritical+0x4c>)
 80062f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <vPortExitCritical+0x4c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <vPortExitCritical+0x3e>
 80062fc:	2300      	movs	r3, #0
 80062fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	2000000c 	.word	0x2000000c
	...

08006320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006320:	f3ef 8009 	mrs	r0, PSP
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <pxCurrentTCBConst>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	f01e 0f10 	tst.w	lr, #16
 8006330:	bf08      	it	eq
 8006332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	6010      	str	r0, [r2, #0]
 800633c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006344:	f380 8811 	msr	BASEPRI, r0
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f7ff fcd2 	bl	8005cf8 <vTaskSwitchContext>
 8006354:	f04f 0000 	mov.w	r0, #0
 8006358:	f380 8811 	msr	BASEPRI, r0
 800635c:	bc09      	pop	{r0, r3}
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	6808      	ldr	r0, [r1, #0]
 8006362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006366:	f01e 0f10 	tst.w	lr, #16
 800636a:	bf08      	it	eq
 800636c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006370:	f380 8809 	msr	PSP, r0
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w

08006380 <pxCurrentTCBConst>:
 8006380:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop

08006388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063a0:	f7ff fbf2 	bl	8005b88 <xTaskIncrementTick>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <SysTick_Handler+0x3c>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	2300      	movs	r3, #0
 80063b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <vPortSetupTimerInterrupt+0x34>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <vPortSetupTimerInterrupt+0x38>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <vPortSetupTimerInterrupt+0x3c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <vPortSetupTimerInterrupt+0x40>)
 80063de:	fba2 2303 	umull	r2, r3, r2, r3
 80063e2:	099b      	lsrs	r3, r3, #6
 80063e4:	4a09      	ldr	r2, [pc, #36]	; (800640c <vPortSetupTimerInterrupt+0x44>)
 80063e6:	3b01      	subs	r3, #1
 80063e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ea:	4b04      	ldr	r3, [pc, #16]	; (80063fc <vPortSetupTimerInterrupt+0x34>)
 80063ec:	2207      	movs	r2, #7
 80063ee:	601a      	str	r2, [r3, #0]
}
 80063f0:	bf00      	nop
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	e000e010 	.word	0xe000e010
 8006400:	e000e018 	.word	0xe000e018
 8006404:	20000000 	.word	0x20000000
 8006408:	10624dd3 	.word	0x10624dd3
 800640c:	e000e014 	.word	0xe000e014

08006410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006410:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006420 <vPortEnableVFP+0x10>
 8006414:	6801      	ldr	r1, [r0, #0]
 8006416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800641a:	6001      	str	r1, [r0, #0]
 800641c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800641e:	bf00      	nop
 8006420:	e000ed88 	.word	0xe000ed88

08006424 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006430:	f7ff fb00 	bl	8005a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006434:	4b57      	ldr	r3, [pc, #348]	; (8006594 <pvPortMalloc+0x170>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800643c:	f000 f90c 	bl	8006658 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006440:	4b55      	ldr	r3, [pc, #340]	; (8006598 <pvPortMalloc+0x174>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 808c 	bne.w	8006566 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01c      	beq.n	800648e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006454:	2208      	movs	r2, #8
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	2b00      	cmp	r3, #0
 8006464:	d013      	beq.n	800648e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	3308      	adds	r3, #8
 800646e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <pvPortMalloc+0x6a>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e7fe      	b.n	800648c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d068      	beq.n	8006566 <pvPortMalloc+0x142>
 8006494:	4b41      	ldr	r3, [pc, #260]	; (800659c <pvPortMalloc+0x178>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d863      	bhi.n	8006566 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800649e:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <pvPortMalloc+0x17c>)
 80064a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064a2:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <pvPortMalloc+0x17c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a8:	e004      	b.n	80064b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d903      	bls.n	80064c6 <pvPortMalloc+0xa2>
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f1      	bne.n	80064aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064c6:	4b33      	ldr	r3, [pc, #204]	; (8006594 <pvPortMalloc+0x170>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d04a      	beq.n	8006566 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2208      	movs	r2, #8
 80064d6:	4413      	add	r3, r2
 80064d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	2308      	movs	r3, #8
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d91e      	bls.n	8006530 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <pvPortMalloc+0xf4>
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	e7fe      	b.n	8006516 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800652a:	69b8      	ldr	r0, [r7, #24]
 800652c:	f000 f8f6 	bl	800671c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006530:	4b1a      	ldr	r3, [pc, #104]	; (800659c <pvPortMalloc+0x178>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	4a18      	ldr	r2, [pc, #96]	; (800659c <pvPortMalloc+0x178>)
 800653c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800653e:	4b17      	ldr	r3, [pc, #92]	; (800659c <pvPortMalloc+0x178>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <pvPortMalloc+0x180>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d203      	bcs.n	8006552 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800654a:	4b14      	ldr	r3, [pc, #80]	; (800659c <pvPortMalloc+0x178>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <pvPortMalloc+0x180>)
 8006550:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	4b10      	ldr	r3, [pc, #64]	; (8006598 <pvPortMalloc+0x174>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	431a      	orrs	r2, r3
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006566:	f7ff fa73 	bl	8005a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <pvPortMalloc+0x164>
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e7fe      	b.n	8006586 <pvPortMalloc+0x162>
	return pvReturn;
 8006588:	69fb      	ldr	r3, [r7, #28]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3728      	adds	r7, #40	; 0x28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20004028 	.word	0x20004028
 8006598:	20004034 	.word	0x20004034
 800659c:	2000402c 	.word	0x2000402c
 80065a0:	20004020 	.word	0x20004020
 80065a4:	20004030 	.word	0x20004030

080065a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d046      	beq.n	8006648 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065ba:	2308      	movs	r3, #8
 80065bc:	425b      	negs	r3, r3
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b20      	ldr	r3, [pc, #128]	; (8006650 <vPortFree+0xa8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <vPortFree+0x42>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e7fe      	b.n	80065e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d009      	beq.n	8006606 <vPortFree+0x5e>
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	e7fe      	b.n	8006604 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	4b11      	ldr	r3, [pc, #68]	; (8006650 <vPortFree+0xa8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4013      	ands	r3, r2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d019      	beq.n	8006648 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d115      	bne.n	8006648 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortFree+0xa8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	43db      	mvns	r3, r3
 8006626:	401a      	ands	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800662c:	f7ff fa02 	bl	8005a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <vPortFree+0xac>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4413      	add	r3, r2
 800663a:	4a06      	ldr	r2, [pc, #24]	; (8006654 <vPortFree+0xac>)
 800663c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800663e:	6938      	ldr	r0, [r7, #16]
 8006640:	f000 f86c 	bl	800671c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006644:	f7ff fa04 	bl	8005a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006648:	bf00      	nop
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20004034 	.word	0x20004034
 8006654:	2000402c 	.word	0x2000402c

08006658 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800665e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006662:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006664:	4b27      	ldr	r3, [pc, #156]	; (8006704 <prvHeapInit+0xac>)
 8006666:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00c      	beq.n	800668c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3307      	adds	r3, #7
 8006676:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 0307 	bic.w	r3, r3, #7
 800667e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	4a1f      	ldr	r2, [pc, #124]	; (8006704 <prvHeapInit+0xac>)
 8006688:	4413      	add	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006690:	4a1d      	ldr	r2, [pc, #116]	; (8006708 <prvHeapInit+0xb0>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006696:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <prvHeapInit+0xb0>)
 8006698:	2200      	movs	r2, #0
 800669a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066a4:	2208      	movs	r2, #8
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0307 	bic.w	r3, r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a15      	ldr	r2, [pc, #84]	; (800670c <prvHeapInit+0xb4>)
 80066b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066ba:	4b14      	ldr	r3, [pc, #80]	; (800670c <prvHeapInit+0xb4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <prvHeapInit+0xb4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	1ad2      	subs	r2, r2, r3
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <prvHeapInit+0xb4>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4a0a      	ldr	r2, [pc, #40]	; (8006710 <prvHeapInit+0xb8>)
 80066e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a09      	ldr	r2, [pc, #36]	; (8006714 <prvHeapInit+0xbc>)
 80066ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <prvHeapInit+0xc0>)
 80066f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066f6:	601a      	str	r2, [r3, #0]
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	20000420 	.word	0x20000420
 8006708:	20004020 	.word	0x20004020
 800670c:	20004028 	.word	0x20004028
 8006710:	20004030 	.word	0x20004030
 8006714:	2000402c 	.word	0x2000402c
 8006718:	20004034 	.word	0x20004034

0800671c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006724:	4b28      	ldr	r3, [pc, #160]	; (80067c8 <prvInsertBlockIntoFreeList+0xac>)
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e002      	b.n	8006730 <prvInsertBlockIntoFreeList+0x14>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d8f7      	bhi.n	800672a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	4413      	add	r3, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	429a      	cmp	r2, r3
 800674a:	d108      	bne.n	800675e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	441a      	add	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d118      	bne.n	80067a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <prvInsertBlockIntoFreeList+0xb0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d00d      	beq.n	800679a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	441a      	add	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e008      	b.n	80067ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800679a:	4b0c      	ldr	r3, [pc, #48]	; (80067cc <prvInsertBlockIntoFreeList+0xb0>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e003      	b.n	80067ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d002      	beq.n	80067ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ba:	bf00      	nop
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20004020 	.word	0x20004020
 80067cc:	20004028 	.word	0x20004028

080067d0 <__errno>:
 80067d0:	4b01      	ldr	r3, [pc, #4]	; (80067d8 <__errno+0x8>)
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000010 	.word	0x20000010

080067dc <__libc_init_array>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4e0d      	ldr	r6, [pc, #52]	; (8006814 <__libc_init_array+0x38>)
 80067e0:	4c0d      	ldr	r4, [pc, #52]	; (8006818 <__libc_init_array+0x3c>)
 80067e2:	1ba4      	subs	r4, r4, r6
 80067e4:	10a4      	asrs	r4, r4, #2
 80067e6:	2500      	movs	r5, #0
 80067e8:	42a5      	cmp	r5, r4
 80067ea:	d109      	bne.n	8006800 <__libc_init_array+0x24>
 80067ec:	4e0b      	ldr	r6, [pc, #44]	; (800681c <__libc_init_array+0x40>)
 80067ee:	4c0c      	ldr	r4, [pc, #48]	; (8006820 <__libc_init_array+0x44>)
 80067f0:	f000 ff04 	bl	80075fc <_init>
 80067f4:	1ba4      	subs	r4, r4, r6
 80067f6:	10a4      	asrs	r4, r4, #2
 80067f8:	2500      	movs	r5, #0
 80067fa:	42a5      	cmp	r5, r4
 80067fc:	d105      	bne.n	800680a <__libc_init_array+0x2e>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006804:	4798      	blx	r3
 8006806:	3501      	adds	r5, #1
 8006808:	e7ee      	b.n	80067e8 <__libc_init_array+0xc>
 800680a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800680e:	4798      	blx	r3
 8006810:	3501      	adds	r5, #1
 8006812:	e7f2      	b.n	80067fa <__libc_init_array+0x1e>
 8006814:	08007840 	.word	0x08007840
 8006818:	08007840 	.word	0x08007840
 800681c:	08007840 	.word	0x08007840
 8006820:	08007844 	.word	0x08007844

08006824 <memset>:
 8006824:	4402      	add	r2, r0
 8006826:	4603      	mov	r3, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	f803 1b01 	strb.w	r1, [r3], #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <iprintf>:
 8006834:	b40f      	push	{r0, r1, r2, r3}
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <iprintf+0x2c>)
 8006838:	b513      	push	{r0, r1, r4, lr}
 800683a:	681c      	ldr	r4, [r3, #0]
 800683c:	b124      	cbz	r4, 8006848 <iprintf+0x14>
 800683e:	69a3      	ldr	r3, [r4, #24]
 8006840:	b913      	cbnz	r3, 8006848 <iprintf+0x14>
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f84e 	bl	80068e4 <__sinit>
 8006848:	ab05      	add	r3, sp, #20
 800684a:	9a04      	ldr	r2, [sp, #16]
 800684c:	68a1      	ldr	r1, [r4, #8]
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	4620      	mov	r0, r4
 8006852:	f000 f955 	bl	8006b00 <_vfiprintf_r>
 8006856:	b002      	add	sp, #8
 8006858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685c:	b004      	add	sp, #16
 800685e:	4770      	bx	lr
 8006860:	20000010 	.word	0x20000010

08006864 <std>:
 8006864:	2300      	movs	r3, #0
 8006866:	b510      	push	{r4, lr}
 8006868:	4604      	mov	r4, r0
 800686a:	e9c0 3300 	strd	r3, r3, [r0]
 800686e:	6083      	str	r3, [r0, #8]
 8006870:	8181      	strh	r1, [r0, #12]
 8006872:	6643      	str	r3, [r0, #100]	; 0x64
 8006874:	81c2      	strh	r2, [r0, #14]
 8006876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800687a:	6183      	str	r3, [r0, #24]
 800687c:	4619      	mov	r1, r3
 800687e:	2208      	movs	r2, #8
 8006880:	305c      	adds	r0, #92	; 0x5c
 8006882:	f7ff ffcf 	bl	8006824 <memset>
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <std+0x38>)
 8006888:	6263      	str	r3, [r4, #36]	; 0x24
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <std+0x3c>)
 800688c:	62a3      	str	r3, [r4, #40]	; 0x28
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <std+0x40>)
 8006890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <std+0x44>)
 8006894:	6224      	str	r4, [r4, #32]
 8006896:	6323      	str	r3, [r4, #48]	; 0x30
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	0800705d 	.word	0x0800705d
 80068a0:	0800707f 	.word	0x0800707f
 80068a4:	080070b7 	.word	0x080070b7
 80068a8:	080070db 	.word	0x080070db

080068ac <_cleanup_r>:
 80068ac:	4901      	ldr	r1, [pc, #4]	; (80068b4 <_cleanup_r+0x8>)
 80068ae:	f000 b885 	b.w	80069bc <_fwalk_reent>
 80068b2:	bf00      	nop
 80068b4:	080073b5 	.word	0x080073b5

080068b8 <__sfmoreglue>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	1e4a      	subs	r2, r1, #1
 80068bc:	2568      	movs	r5, #104	; 0x68
 80068be:	4355      	muls	r5, r2
 80068c0:	460e      	mov	r6, r1
 80068c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068c6:	f000 f897 	bl	80069f8 <_malloc_r>
 80068ca:	4604      	mov	r4, r0
 80068cc:	b140      	cbz	r0, 80068e0 <__sfmoreglue+0x28>
 80068ce:	2100      	movs	r1, #0
 80068d0:	e9c0 1600 	strd	r1, r6, [r0]
 80068d4:	300c      	adds	r0, #12
 80068d6:	60a0      	str	r0, [r4, #8]
 80068d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068dc:	f7ff ffa2 	bl	8006824 <memset>
 80068e0:	4620      	mov	r0, r4
 80068e2:	bd70      	pop	{r4, r5, r6, pc}

080068e4 <__sinit>:
 80068e4:	6983      	ldr	r3, [r0, #24]
 80068e6:	b510      	push	{r4, lr}
 80068e8:	4604      	mov	r4, r0
 80068ea:	bb33      	cbnz	r3, 800693a <__sinit+0x56>
 80068ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80068f0:	6503      	str	r3, [r0, #80]	; 0x50
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <__sinit+0x58>)
 80068f4:	4a12      	ldr	r2, [pc, #72]	; (8006940 <__sinit+0x5c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6282      	str	r2, [r0, #40]	; 0x28
 80068fa:	4298      	cmp	r0, r3
 80068fc:	bf04      	itt	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	6183      	streq	r3, [r0, #24]
 8006902:	f000 f81f 	bl	8006944 <__sfp>
 8006906:	6060      	str	r0, [r4, #4]
 8006908:	4620      	mov	r0, r4
 800690a:	f000 f81b 	bl	8006944 <__sfp>
 800690e:	60a0      	str	r0, [r4, #8]
 8006910:	4620      	mov	r0, r4
 8006912:	f000 f817 	bl	8006944 <__sfp>
 8006916:	2200      	movs	r2, #0
 8006918:	60e0      	str	r0, [r4, #12]
 800691a:	2104      	movs	r1, #4
 800691c:	6860      	ldr	r0, [r4, #4]
 800691e:	f7ff ffa1 	bl	8006864 <std>
 8006922:	2201      	movs	r2, #1
 8006924:	2109      	movs	r1, #9
 8006926:	68a0      	ldr	r0, [r4, #8]
 8006928:	f7ff ff9c 	bl	8006864 <std>
 800692c:	2202      	movs	r2, #2
 800692e:	2112      	movs	r1, #18
 8006930:	68e0      	ldr	r0, [r4, #12]
 8006932:	f7ff ff97 	bl	8006864 <std>
 8006936:	2301      	movs	r3, #1
 8006938:	61a3      	str	r3, [r4, #24]
 800693a:	bd10      	pop	{r4, pc}
 800693c:	080077a0 	.word	0x080077a0
 8006940:	080068ad 	.word	0x080068ad

08006944 <__sfp>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <__sfp+0x70>)
 8006948:	681e      	ldr	r6, [r3, #0]
 800694a:	69b3      	ldr	r3, [r6, #24]
 800694c:	4607      	mov	r7, r0
 800694e:	b913      	cbnz	r3, 8006956 <__sfp+0x12>
 8006950:	4630      	mov	r0, r6
 8006952:	f7ff ffc7 	bl	80068e4 <__sinit>
 8006956:	3648      	adds	r6, #72	; 0x48
 8006958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800695c:	3b01      	subs	r3, #1
 800695e:	d503      	bpl.n	8006968 <__sfp+0x24>
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	b133      	cbz	r3, 8006972 <__sfp+0x2e>
 8006964:	6836      	ldr	r6, [r6, #0]
 8006966:	e7f7      	b.n	8006958 <__sfp+0x14>
 8006968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800696c:	b16d      	cbz	r5, 800698a <__sfp+0x46>
 800696e:	3468      	adds	r4, #104	; 0x68
 8006970:	e7f4      	b.n	800695c <__sfp+0x18>
 8006972:	2104      	movs	r1, #4
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff9f 	bl	80068b8 <__sfmoreglue>
 800697a:	6030      	str	r0, [r6, #0]
 800697c:	2800      	cmp	r0, #0
 800697e:	d1f1      	bne.n	8006964 <__sfp+0x20>
 8006980:	230c      	movs	r3, #12
 8006982:	603b      	str	r3, [r7, #0]
 8006984:	4604      	mov	r4, r0
 8006986:	4620      	mov	r0, r4
 8006988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698a:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <__sfp+0x74>)
 800698c:	6665      	str	r5, [r4, #100]	; 0x64
 800698e:	e9c4 5500 	strd	r5, r5, [r4]
 8006992:	60a5      	str	r5, [r4, #8]
 8006994:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006998:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800699c:	2208      	movs	r2, #8
 800699e:	4629      	mov	r1, r5
 80069a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069a4:	f7ff ff3e 	bl	8006824 <memset>
 80069a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069b0:	e7e9      	b.n	8006986 <__sfp+0x42>
 80069b2:	bf00      	nop
 80069b4:	080077a0 	.word	0x080077a0
 80069b8:	ffff0001 	.word	0xffff0001

080069bc <_fwalk_reent>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	4680      	mov	r8, r0
 80069c2:	4689      	mov	r9, r1
 80069c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069c8:	2600      	movs	r6, #0
 80069ca:	b914      	cbnz	r4, 80069d2 <_fwalk_reent+0x16>
 80069cc:	4630      	mov	r0, r6
 80069ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80069d6:	3f01      	subs	r7, #1
 80069d8:	d501      	bpl.n	80069de <_fwalk_reent+0x22>
 80069da:	6824      	ldr	r4, [r4, #0]
 80069dc:	e7f5      	b.n	80069ca <_fwalk_reent+0xe>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d907      	bls.n	80069f4 <_fwalk_reent+0x38>
 80069e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069e8:	3301      	adds	r3, #1
 80069ea:	d003      	beq.n	80069f4 <_fwalk_reent+0x38>
 80069ec:	4629      	mov	r1, r5
 80069ee:	4640      	mov	r0, r8
 80069f0:	47c8      	blx	r9
 80069f2:	4306      	orrs	r6, r0
 80069f4:	3568      	adds	r5, #104	; 0x68
 80069f6:	e7ee      	b.n	80069d6 <_fwalk_reent+0x1a>

080069f8 <_malloc_r>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	1ccd      	adds	r5, r1, #3
 80069fc:	f025 0503 	bic.w	r5, r5, #3
 8006a00:	3508      	adds	r5, #8
 8006a02:	2d0c      	cmp	r5, #12
 8006a04:	bf38      	it	cc
 8006a06:	250c      	movcc	r5, #12
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	db01      	blt.n	8006a12 <_malloc_r+0x1a>
 8006a0e:	42a9      	cmp	r1, r5
 8006a10:	d903      	bls.n	8006a1a <_malloc_r+0x22>
 8006a12:	230c      	movs	r3, #12
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	2000      	movs	r0, #0
 8006a18:	bd70      	pop	{r4, r5, r6, pc}
 8006a1a:	f000 fd6b 	bl	80074f4 <__malloc_lock>
 8006a1e:	4a21      	ldr	r2, [pc, #132]	; (8006aa4 <_malloc_r+0xac>)
 8006a20:	6814      	ldr	r4, [r2, #0]
 8006a22:	4621      	mov	r1, r4
 8006a24:	b991      	cbnz	r1, 8006a4c <_malloc_r+0x54>
 8006a26:	4c20      	ldr	r4, [pc, #128]	; (8006aa8 <_malloc_r+0xb0>)
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	b91b      	cbnz	r3, 8006a34 <_malloc_r+0x3c>
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 fb05 	bl	800703c <_sbrk_r>
 8006a32:	6020      	str	r0, [r4, #0]
 8006a34:	4629      	mov	r1, r5
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 fb00 	bl	800703c <_sbrk_r>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d124      	bne.n	8006a8a <_malloc_r+0x92>
 8006a40:	230c      	movs	r3, #12
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 fd56 	bl	80074f6 <__malloc_unlock>
 8006a4a:	e7e4      	b.n	8006a16 <_malloc_r+0x1e>
 8006a4c:	680b      	ldr	r3, [r1, #0]
 8006a4e:	1b5b      	subs	r3, r3, r5
 8006a50:	d418      	bmi.n	8006a84 <_malloc_r+0x8c>
 8006a52:	2b0b      	cmp	r3, #11
 8006a54:	d90f      	bls.n	8006a76 <_malloc_r+0x7e>
 8006a56:	600b      	str	r3, [r1, #0]
 8006a58:	50cd      	str	r5, [r1, r3]
 8006a5a:	18cc      	adds	r4, r1, r3
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 fd4a 	bl	80074f6 <__malloc_unlock>
 8006a62:	f104 000b 	add.w	r0, r4, #11
 8006a66:	1d23      	adds	r3, r4, #4
 8006a68:	f020 0007 	bic.w	r0, r0, #7
 8006a6c:	1ac3      	subs	r3, r0, r3
 8006a6e:	d0d3      	beq.n	8006a18 <_malloc_r+0x20>
 8006a70:	425a      	negs	r2, r3
 8006a72:	50e2      	str	r2, [r4, r3]
 8006a74:	e7d0      	b.n	8006a18 <_malloc_r+0x20>
 8006a76:	428c      	cmp	r4, r1
 8006a78:	684b      	ldr	r3, [r1, #4]
 8006a7a:	bf16      	itet	ne
 8006a7c:	6063      	strne	r3, [r4, #4]
 8006a7e:	6013      	streq	r3, [r2, #0]
 8006a80:	460c      	movne	r4, r1
 8006a82:	e7eb      	b.n	8006a5c <_malloc_r+0x64>
 8006a84:	460c      	mov	r4, r1
 8006a86:	6849      	ldr	r1, [r1, #4]
 8006a88:	e7cc      	b.n	8006a24 <_malloc_r+0x2c>
 8006a8a:	1cc4      	adds	r4, r0, #3
 8006a8c:	f024 0403 	bic.w	r4, r4, #3
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d005      	beq.n	8006aa0 <_malloc_r+0xa8>
 8006a94:	1a21      	subs	r1, r4, r0
 8006a96:	4630      	mov	r0, r6
 8006a98:	f000 fad0 	bl	800703c <_sbrk_r>
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	d0cf      	beq.n	8006a40 <_malloc_r+0x48>
 8006aa0:	6025      	str	r5, [r4, #0]
 8006aa2:	e7db      	b.n	8006a5c <_malloc_r+0x64>
 8006aa4:	20004038 	.word	0x20004038
 8006aa8:	2000403c 	.word	0x2000403c

08006aac <__sfputc_r>:
 8006aac:	6893      	ldr	r3, [r2, #8]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	b410      	push	{r4}
 8006ab4:	6093      	str	r3, [r2, #8]
 8006ab6:	da08      	bge.n	8006aca <__sfputc_r+0x1e>
 8006ab8:	6994      	ldr	r4, [r2, #24]
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	db01      	blt.n	8006ac2 <__sfputc_r+0x16>
 8006abe:	290a      	cmp	r1, #10
 8006ac0:	d103      	bne.n	8006aca <__sfputc_r+0x1e>
 8006ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac6:	f000 bb0d 	b.w	80070e4 <__swbuf_r>
 8006aca:	6813      	ldr	r3, [r2, #0]
 8006acc:	1c58      	adds	r0, r3, #1
 8006ace:	6010      	str	r0, [r2, #0]
 8006ad0:	7019      	strb	r1, [r3, #0]
 8006ad2:	4608      	mov	r0, r1
 8006ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <__sfputs_r>:
 8006ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006adc:	4606      	mov	r6, r0
 8006ade:	460f      	mov	r7, r1
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	18d5      	adds	r5, r2, r3
 8006ae4:	42ac      	cmp	r4, r5
 8006ae6:	d101      	bne.n	8006aec <__sfputs_r+0x12>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e007      	b.n	8006afc <__sfputs_r+0x22>
 8006aec:	463a      	mov	r2, r7
 8006aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af2:	4630      	mov	r0, r6
 8006af4:	f7ff ffda 	bl	8006aac <__sfputc_r>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d1f3      	bne.n	8006ae4 <__sfputs_r+0xa>
 8006afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b00 <_vfiprintf_r>:
 8006b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b04:	460c      	mov	r4, r1
 8006b06:	b09d      	sub	sp, #116	; 0x74
 8006b08:	4617      	mov	r7, r2
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	b118      	cbz	r0, 8006b18 <_vfiprintf_r+0x18>
 8006b10:	6983      	ldr	r3, [r0, #24]
 8006b12:	b90b      	cbnz	r3, 8006b18 <_vfiprintf_r+0x18>
 8006b14:	f7ff fee6 	bl	80068e4 <__sinit>
 8006b18:	4b7c      	ldr	r3, [pc, #496]	; (8006d0c <_vfiprintf_r+0x20c>)
 8006b1a:	429c      	cmp	r4, r3
 8006b1c:	d158      	bne.n	8006bd0 <_vfiprintf_r+0xd0>
 8006b1e:	6874      	ldr	r4, [r6, #4]
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	0718      	lsls	r0, r3, #28
 8006b24:	d55e      	bpl.n	8006be4 <_vfiprintf_r+0xe4>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05b      	beq.n	8006be4 <_vfiprintf_r+0xe4>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b30:	2320      	movs	r3, #32
 8006b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b36:	2330      	movs	r3, #48	; 0x30
 8006b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b3c:	9503      	str	r5, [sp, #12]
 8006b3e:	f04f 0b01 	mov.w	fp, #1
 8006b42:	46b8      	mov	r8, r7
 8006b44:	4645      	mov	r5, r8
 8006b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b4a:	b10b      	cbz	r3, 8006b50 <_vfiprintf_r+0x50>
 8006b4c:	2b25      	cmp	r3, #37	; 0x25
 8006b4e:	d154      	bne.n	8006bfa <_vfiprintf_r+0xfa>
 8006b50:	ebb8 0a07 	subs.w	sl, r8, r7
 8006b54:	d00b      	beq.n	8006b6e <_vfiprintf_r+0x6e>
 8006b56:	4653      	mov	r3, sl
 8006b58:	463a      	mov	r2, r7
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f7ff ffbc 	bl	8006ada <__sfputs_r>
 8006b62:	3001      	adds	r0, #1
 8006b64:	f000 80c2 	beq.w	8006cec <_vfiprintf_r+0x1ec>
 8006b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b6a:	4453      	add	r3, sl
 8006b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b6e:	f898 3000 	ldrb.w	r3, [r8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80ba 	beq.w	8006cec <_vfiprintf_r+0x1ec>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	9307      	str	r3, [sp, #28]
 8006b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b8c:	46a8      	mov	r8, r5
 8006b8e:	2205      	movs	r2, #5
 8006b90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006b94:	485e      	ldr	r0, [pc, #376]	; (8006d10 <_vfiprintf_r+0x210>)
 8006b96:	f7f9 fb3b 	bl	8000210 <memchr>
 8006b9a:	9b04      	ldr	r3, [sp, #16]
 8006b9c:	bb78      	cbnz	r0, 8006bfe <_vfiprintf_r+0xfe>
 8006b9e:	06d9      	lsls	r1, r3, #27
 8006ba0:	bf44      	itt	mi
 8006ba2:	2220      	movmi	r2, #32
 8006ba4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ba8:	071a      	lsls	r2, r3, #28
 8006baa:	bf44      	itt	mi
 8006bac:	222b      	movmi	r2, #43	; 0x2b
 8006bae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006bb2:	782a      	ldrb	r2, [r5, #0]
 8006bb4:	2a2a      	cmp	r2, #42	; 0x2a
 8006bb6:	d02a      	beq.n	8006c0e <_vfiprintf_r+0x10e>
 8006bb8:	9a07      	ldr	r2, [sp, #28]
 8006bba:	46a8      	mov	r8, r5
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	250a      	movs	r5, #10
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc6:	3b30      	subs	r3, #48	; 0x30
 8006bc8:	2b09      	cmp	r3, #9
 8006bca:	d969      	bls.n	8006ca0 <_vfiprintf_r+0x1a0>
 8006bcc:	b360      	cbz	r0, 8006c28 <_vfiprintf_r+0x128>
 8006bce:	e024      	b.n	8006c1a <_vfiprintf_r+0x11a>
 8006bd0:	4b50      	ldr	r3, [pc, #320]	; (8006d14 <_vfiprintf_r+0x214>)
 8006bd2:	429c      	cmp	r4, r3
 8006bd4:	d101      	bne.n	8006bda <_vfiprintf_r+0xda>
 8006bd6:	68b4      	ldr	r4, [r6, #8]
 8006bd8:	e7a2      	b.n	8006b20 <_vfiprintf_r+0x20>
 8006bda:	4b4f      	ldr	r3, [pc, #316]	; (8006d18 <_vfiprintf_r+0x218>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	bf08      	it	eq
 8006be0:	68f4      	ldreq	r4, [r6, #12]
 8006be2:	e79d      	b.n	8006b20 <_vfiprintf_r+0x20>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 fae0 	bl	80071ac <__swsetup_r>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d09d      	beq.n	8006b2c <_vfiprintf_r+0x2c>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b01d      	add	sp, #116	; 0x74
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	46a8      	mov	r8, r5
 8006bfc:	e7a2      	b.n	8006b44 <_vfiprintf_r+0x44>
 8006bfe:	4a44      	ldr	r2, [pc, #272]	; (8006d10 <_vfiprintf_r+0x210>)
 8006c00:	1a80      	subs	r0, r0, r2
 8006c02:	fa0b f000 	lsl.w	r0, fp, r0
 8006c06:	4318      	orrs	r0, r3
 8006c08:	9004      	str	r0, [sp, #16]
 8006c0a:	4645      	mov	r5, r8
 8006c0c:	e7be      	b.n	8006b8c <_vfiprintf_r+0x8c>
 8006c0e:	9a03      	ldr	r2, [sp, #12]
 8006c10:	1d11      	adds	r1, r2, #4
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	9103      	str	r1, [sp, #12]
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	db01      	blt.n	8006c1e <_vfiprintf_r+0x11e>
 8006c1a:	9207      	str	r2, [sp, #28]
 8006c1c:	e004      	b.n	8006c28 <_vfiprintf_r+0x128>
 8006c1e:	4252      	negs	r2, r2
 8006c20:	f043 0302 	orr.w	r3, r3, #2
 8006c24:	9207      	str	r2, [sp, #28]
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	f898 3000 	ldrb.w	r3, [r8]
 8006c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c2e:	d10e      	bne.n	8006c4e <_vfiprintf_r+0x14e>
 8006c30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c34:	2b2a      	cmp	r3, #42	; 0x2a
 8006c36:	d138      	bne.n	8006caa <_vfiprintf_r+0x1aa>
 8006c38:	9b03      	ldr	r3, [sp, #12]
 8006c3a:	1d1a      	adds	r2, r3, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	9203      	str	r2, [sp, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfb8      	it	lt
 8006c44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c48:	f108 0802 	add.w	r8, r8, #2
 8006c4c:	9305      	str	r3, [sp, #20]
 8006c4e:	4d33      	ldr	r5, [pc, #204]	; (8006d1c <_vfiprintf_r+0x21c>)
 8006c50:	f898 1000 	ldrb.w	r1, [r8]
 8006c54:	2203      	movs	r2, #3
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7f9 fada 	bl	8000210 <memchr>
 8006c5c:	b140      	cbz	r0, 8006c70 <_vfiprintf_r+0x170>
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	1b40      	subs	r0, r0, r5
 8006c62:	fa03 f000 	lsl.w	r0, r3, r0
 8006c66:	9b04      	ldr	r3, [sp, #16]
 8006c68:	4303      	orrs	r3, r0
 8006c6a:	f108 0801 	add.w	r8, r8, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	f898 1000 	ldrb.w	r1, [r8]
 8006c74:	482a      	ldr	r0, [pc, #168]	; (8006d20 <_vfiprintf_r+0x220>)
 8006c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	f108 0701 	add.w	r7, r8, #1
 8006c80:	f7f9 fac6 	bl	8000210 <memchr>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d037      	beq.n	8006cf8 <_vfiprintf_r+0x1f8>
 8006c88:	4b26      	ldr	r3, [pc, #152]	; (8006d24 <_vfiprintf_r+0x224>)
 8006c8a:	bb1b      	cbnz	r3, 8006cd4 <_vfiprintf_r+0x1d4>
 8006c8c:	9b03      	ldr	r3, [sp, #12]
 8006c8e:	3307      	adds	r3, #7
 8006c90:	f023 0307 	bic.w	r3, r3, #7
 8006c94:	3308      	adds	r3, #8
 8006c96:	9303      	str	r3, [sp, #12]
 8006c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9a:	444b      	add	r3, r9
 8006c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9e:	e750      	b.n	8006b42 <_vfiprintf_r+0x42>
 8006ca0:	fb05 3202 	mla	r2, r5, r2, r3
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	4688      	mov	r8, r1
 8006ca8:	e78a      	b.n	8006bc0 <_vfiprintf_r+0xc0>
 8006caa:	2300      	movs	r3, #0
 8006cac:	f108 0801 	add.w	r8, r8, #1
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	250a      	movs	r5, #10
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cbc:	3a30      	subs	r2, #48	; 0x30
 8006cbe:	2a09      	cmp	r2, #9
 8006cc0:	d903      	bls.n	8006cca <_vfiprintf_r+0x1ca>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0c3      	beq.n	8006c4e <_vfiprintf_r+0x14e>
 8006cc6:	9105      	str	r1, [sp, #20]
 8006cc8:	e7c1      	b.n	8006c4e <_vfiprintf_r+0x14e>
 8006cca:	fb05 2101 	mla	r1, r5, r1, r2
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	e7f0      	b.n	8006cb6 <_vfiprintf_r+0x1b6>
 8006cd4:	ab03      	add	r3, sp, #12
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <_vfiprintf_r+0x228>)
 8006cdc:	a904      	add	r1, sp, #16
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f3af 8000 	nop.w
 8006ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006ce8:	4681      	mov	r9, r0
 8006cea:	d1d5      	bne.n	8006c98 <_vfiprintf_r+0x198>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	065b      	lsls	r3, r3, #25
 8006cf0:	f53f af7e 	bmi.w	8006bf0 <_vfiprintf_r+0xf0>
 8006cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf6:	e77d      	b.n	8006bf4 <_vfiprintf_r+0xf4>
 8006cf8:	ab03      	add	r3, sp, #12
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <_vfiprintf_r+0x228>)
 8006d00:	a904      	add	r1, sp, #16
 8006d02:	4630      	mov	r0, r6
 8006d04:	f000 f888 	bl	8006e18 <_printf_i>
 8006d08:	e7ec      	b.n	8006ce4 <_vfiprintf_r+0x1e4>
 8006d0a:	bf00      	nop
 8006d0c:	080077c4 	.word	0x080077c4
 8006d10:	08007804 	.word	0x08007804
 8006d14:	080077e4 	.word	0x080077e4
 8006d18:	080077a4 	.word	0x080077a4
 8006d1c:	0800780a 	.word	0x0800780a
 8006d20:	0800780e 	.word	0x0800780e
 8006d24:	00000000 	.word	0x00000000
 8006d28:	08006adb 	.word	0x08006adb

08006d2c <_printf_common>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	4691      	mov	r9, r2
 8006d32:	461f      	mov	r7, r3
 8006d34:	688a      	ldr	r2, [r1, #8]
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	bfb8      	it	lt
 8006d40:	4613      	movlt	r3, r2
 8006d42:	f8c9 3000 	str.w	r3, [r9]
 8006d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	b112      	cbz	r2, 8006d56 <_printf_common+0x2a>
 8006d50:	3301      	adds	r3, #1
 8006d52:	f8c9 3000 	str.w	r3, [r9]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	0699      	lsls	r1, r3, #26
 8006d5a:	bf42      	ittt	mi
 8006d5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d60:	3302      	addmi	r3, #2
 8006d62:	f8c9 3000 	strmi.w	r3, [r9]
 8006d66:	6825      	ldr	r5, [r4, #0]
 8006d68:	f015 0506 	ands.w	r5, r5, #6
 8006d6c:	d107      	bne.n	8006d7e <_printf_common+0x52>
 8006d6e:	f104 0a19 	add.w	sl, r4, #25
 8006d72:	68e3      	ldr	r3, [r4, #12]
 8006d74:	f8d9 2000 	ldr.w	r2, [r9]
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	42ab      	cmp	r3, r5
 8006d7c:	dc28      	bgt.n	8006dd0 <_printf_common+0xa4>
 8006d7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	3300      	adds	r3, #0
 8006d86:	bf18      	it	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	0692      	lsls	r2, r2, #26
 8006d8c:	d42d      	bmi.n	8006dea <_printf_common+0xbe>
 8006d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d92:	4639      	mov	r1, r7
 8006d94:	4630      	mov	r0, r6
 8006d96:	47c0      	blx	r8
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d020      	beq.n	8006dde <_printf_common+0xb2>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	68e5      	ldr	r5, [r4, #12]
 8006da0:	f8d9 2000 	ldr.w	r2, [r9]
 8006da4:	f003 0306 	and.w	r3, r3, #6
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	bf08      	it	eq
 8006dac:	1aad      	subeq	r5, r5, r2
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	bf0c      	ite	eq
 8006db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db8:	2500      	movne	r5, #0
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bfc4      	itt	gt
 8006dbe:	1a9b      	subgt	r3, r3, r2
 8006dc0:	18ed      	addgt	r5, r5, r3
 8006dc2:	f04f 0900 	mov.w	r9, #0
 8006dc6:	341a      	adds	r4, #26
 8006dc8:	454d      	cmp	r5, r9
 8006dca:	d11a      	bne.n	8006e02 <_printf_common+0xd6>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e008      	b.n	8006de2 <_printf_common+0xb6>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d103      	bne.n	8006de6 <_printf_common+0xba>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de6:	3501      	adds	r5, #1
 8006de8:	e7c3      	b.n	8006d72 <_printf_common+0x46>
 8006dea:	18e1      	adds	r1, r4, r3
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	2030      	movs	r0, #48	; 0x30
 8006df0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df4:	4422      	add	r2, r4
 8006df6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dfe:	3302      	adds	r3, #2
 8006e00:	e7c5      	b.n	8006d8e <_printf_common+0x62>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4622      	mov	r2, r4
 8006e06:	4639      	mov	r1, r7
 8006e08:	4630      	mov	r0, r6
 8006e0a:	47c0      	blx	r8
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d0e6      	beq.n	8006dde <_printf_common+0xb2>
 8006e10:	f109 0901 	add.w	r9, r9, #1
 8006e14:	e7d8      	b.n	8006dc8 <_printf_common+0x9c>
	...

08006e18 <_printf_i>:
 8006e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e20:	460c      	mov	r4, r1
 8006e22:	7e09      	ldrb	r1, [r1, #24]
 8006e24:	b085      	sub	sp, #20
 8006e26:	296e      	cmp	r1, #110	; 0x6e
 8006e28:	4617      	mov	r7, r2
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	4698      	mov	r8, r3
 8006e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e30:	f000 80b3 	beq.w	8006f9a <_printf_i+0x182>
 8006e34:	d822      	bhi.n	8006e7c <_printf_i+0x64>
 8006e36:	2963      	cmp	r1, #99	; 0x63
 8006e38:	d036      	beq.n	8006ea8 <_printf_i+0x90>
 8006e3a:	d80a      	bhi.n	8006e52 <_printf_i+0x3a>
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	f000 80b9 	beq.w	8006fb4 <_printf_i+0x19c>
 8006e42:	2958      	cmp	r1, #88	; 0x58
 8006e44:	f000 8083 	beq.w	8006f4e <_printf_i+0x136>
 8006e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e50:	e032      	b.n	8006eb8 <_printf_i+0xa0>
 8006e52:	2964      	cmp	r1, #100	; 0x64
 8006e54:	d001      	beq.n	8006e5a <_printf_i+0x42>
 8006e56:	2969      	cmp	r1, #105	; 0x69
 8006e58:	d1f6      	bne.n	8006e48 <_printf_i+0x30>
 8006e5a:	6820      	ldr	r0, [r4, #0]
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	0605      	lsls	r5, r0, #24
 8006e60:	f103 0104 	add.w	r1, r3, #4
 8006e64:	d52a      	bpl.n	8006ebc <_printf_i+0xa4>
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6011      	str	r1, [r2, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da03      	bge.n	8006e76 <_printf_i+0x5e>
 8006e6e:	222d      	movs	r2, #45	; 0x2d
 8006e70:	425b      	negs	r3, r3
 8006e72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e76:	486f      	ldr	r0, [pc, #444]	; (8007034 <_printf_i+0x21c>)
 8006e78:	220a      	movs	r2, #10
 8006e7a:	e039      	b.n	8006ef0 <_printf_i+0xd8>
 8006e7c:	2973      	cmp	r1, #115	; 0x73
 8006e7e:	f000 809d 	beq.w	8006fbc <_printf_i+0x1a4>
 8006e82:	d808      	bhi.n	8006e96 <_printf_i+0x7e>
 8006e84:	296f      	cmp	r1, #111	; 0x6f
 8006e86:	d020      	beq.n	8006eca <_printf_i+0xb2>
 8006e88:	2970      	cmp	r1, #112	; 0x70
 8006e8a:	d1dd      	bne.n	8006e48 <_printf_i+0x30>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	f043 0320 	orr.w	r3, r3, #32
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	e003      	b.n	8006e9e <_printf_i+0x86>
 8006e96:	2975      	cmp	r1, #117	; 0x75
 8006e98:	d017      	beq.n	8006eca <_printf_i+0xb2>
 8006e9a:	2978      	cmp	r1, #120	; 0x78
 8006e9c:	d1d4      	bne.n	8006e48 <_printf_i+0x30>
 8006e9e:	2378      	movs	r3, #120	; 0x78
 8006ea0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ea4:	4864      	ldr	r0, [pc, #400]	; (8007038 <_printf_i+0x220>)
 8006ea6:	e055      	b.n	8006f54 <_printf_i+0x13c>
 8006ea8:	6813      	ldr	r3, [r2, #0]
 8006eaa:	1d19      	adds	r1, r3, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6011      	str	r1, [r2, #0]
 8006eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e08c      	b.n	8006fd6 <_printf_i+0x1be>
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6011      	str	r1, [r2, #0]
 8006ec0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ec4:	bf18      	it	ne
 8006ec6:	b21b      	sxthne	r3, r3
 8006ec8:	e7cf      	b.n	8006e6a <_printf_i+0x52>
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	6825      	ldr	r5, [r4, #0]
 8006ece:	1d18      	adds	r0, r3, #4
 8006ed0:	6010      	str	r0, [r2, #0]
 8006ed2:	0628      	lsls	r0, r5, #24
 8006ed4:	d501      	bpl.n	8006eda <_printf_i+0xc2>
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	e002      	b.n	8006ee0 <_printf_i+0xc8>
 8006eda:	0668      	lsls	r0, r5, #25
 8006edc:	d5fb      	bpl.n	8006ed6 <_printf_i+0xbe>
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	4854      	ldr	r0, [pc, #336]	; (8007034 <_printf_i+0x21c>)
 8006ee2:	296f      	cmp	r1, #111	; 0x6f
 8006ee4:	bf14      	ite	ne
 8006ee6:	220a      	movne	r2, #10
 8006ee8:	2208      	moveq	r2, #8
 8006eea:	2100      	movs	r1, #0
 8006eec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ef0:	6865      	ldr	r5, [r4, #4]
 8006ef2:	60a5      	str	r5, [r4, #8]
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	f2c0 8095 	blt.w	8007024 <_printf_i+0x20c>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	f021 0104 	bic.w	r1, r1, #4
 8006f00:	6021      	str	r1, [r4, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d13d      	bne.n	8006f82 <_printf_i+0x16a>
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	f040 808e 	bne.w	8007028 <_printf_i+0x210>
 8006f0c:	4665      	mov	r5, ip
 8006f0e:	2a08      	cmp	r2, #8
 8006f10:	d10b      	bne.n	8006f2a <_printf_i+0x112>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	07db      	lsls	r3, r3, #31
 8006f16:	d508      	bpl.n	8006f2a <_printf_i+0x112>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	bfde      	ittt	le
 8006f20:	2330      	movle	r3, #48	; 0x30
 8006f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f2a:	ebac 0305 	sub.w	r3, ip, r5
 8006f2e:	6123      	str	r3, [r4, #16]
 8006f30:	f8cd 8000 	str.w	r8, [sp]
 8006f34:	463b      	mov	r3, r7
 8006f36:	aa03      	add	r2, sp, #12
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff fef6 	bl	8006d2c <_printf_common>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d14d      	bne.n	8006fe0 <_printf_i+0x1c8>
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	b005      	add	sp, #20
 8006f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f4e:	4839      	ldr	r0, [pc, #228]	; (8007034 <_printf_i+0x21c>)
 8006f50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f54:	6813      	ldr	r3, [r2, #0]
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	1d1d      	adds	r5, r3, #4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6015      	str	r5, [r2, #0]
 8006f5e:	060a      	lsls	r2, r1, #24
 8006f60:	d50b      	bpl.n	8006f7a <_printf_i+0x162>
 8006f62:	07ca      	lsls	r2, r1, #31
 8006f64:	bf44      	itt	mi
 8006f66:	f041 0120 	orrmi.w	r1, r1, #32
 8006f6a:	6021      	strmi	r1, [r4, #0]
 8006f6c:	b91b      	cbnz	r3, 8006f76 <_printf_i+0x15e>
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	f022 0220 	bic.w	r2, r2, #32
 8006f74:	6022      	str	r2, [r4, #0]
 8006f76:	2210      	movs	r2, #16
 8006f78:	e7b7      	b.n	8006eea <_printf_i+0xd2>
 8006f7a:	064d      	lsls	r5, r1, #25
 8006f7c:	bf48      	it	mi
 8006f7e:	b29b      	uxthmi	r3, r3
 8006f80:	e7ef      	b.n	8006f62 <_printf_i+0x14a>
 8006f82:	4665      	mov	r5, ip
 8006f84:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f88:	fb02 3311 	mls	r3, r2, r1, r3
 8006f8c:	5cc3      	ldrb	r3, [r0, r3]
 8006f8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f92:	460b      	mov	r3, r1
 8006f94:	2900      	cmp	r1, #0
 8006f96:	d1f5      	bne.n	8006f84 <_printf_i+0x16c>
 8006f98:	e7b9      	b.n	8006f0e <_printf_i+0xf6>
 8006f9a:	6813      	ldr	r3, [r2, #0]
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	6961      	ldr	r1, [r4, #20]
 8006fa0:	1d18      	adds	r0, r3, #4
 8006fa2:	6010      	str	r0, [r2, #0]
 8006fa4:	0628      	lsls	r0, r5, #24
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	d501      	bpl.n	8006fae <_printf_i+0x196>
 8006faa:	6019      	str	r1, [r3, #0]
 8006fac:	e002      	b.n	8006fb4 <_printf_i+0x19c>
 8006fae:	066a      	lsls	r2, r5, #25
 8006fb0:	d5fb      	bpl.n	8006faa <_printf_i+0x192>
 8006fb2:	8019      	strh	r1, [r3, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	4665      	mov	r5, ip
 8006fba:	e7b9      	b.n	8006f30 <_printf_i+0x118>
 8006fbc:	6813      	ldr	r3, [r2, #0]
 8006fbe:	1d19      	adds	r1, r3, #4
 8006fc0:	6011      	str	r1, [r2, #0]
 8006fc2:	681d      	ldr	r5, [r3, #0]
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7f9 f921 	bl	8000210 <memchr>
 8006fce:	b108      	cbz	r0, 8006fd4 <_printf_i+0x1bc>
 8006fd0:	1b40      	subs	r0, r0, r5
 8006fd2:	6060      	str	r0, [r4, #4]
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fde:	e7a7      	b.n	8006f30 <_printf_i+0x118>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	47c0      	blx	r8
 8006fea:	3001      	adds	r0, #1
 8006fec:	d0aa      	beq.n	8006f44 <_printf_i+0x12c>
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	079b      	lsls	r3, r3, #30
 8006ff2:	d413      	bmi.n	800701c <_printf_i+0x204>
 8006ff4:	68e0      	ldr	r0, [r4, #12]
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	4298      	cmp	r0, r3
 8006ffa:	bfb8      	it	lt
 8006ffc:	4618      	movlt	r0, r3
 8006ffe:	e7a3      	b.n	8006f48 <_printf_i+0x130>
 8007000:	2301      	movs	r3, #1
 8007002:	464a      	mov	r2, r9
 8007004:	4639      	mov	r1, r7
 8007006:	4630      	mov	r0, r6
 8007008:	47c0      	blx	r8
 800700a:	3001      	adds	r0, #1
 800700c:	d09a      	beq.n	8006f44 <_printf_i+0x12c>
 800700e:	3501      	adds	r5, #1
 8007010:	68e3      	ldr	r3, [r4, #12]
 8007012:	9a03      	ldr	r2, [sp, #12]
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	42ab      	cmp	r3, r5
 8007018:	dcf2      	bgt.n	8007000 <_printf_i+0x1e8>
 800701a:	e7eb      	b.n	8006ff4 <_printf_i+0x1dc>
 800701c:	2500      	movs	r5, #0
 800701e:	f104 0919 	add.w	r9, r4, #25
 8007022:	e7f5      	b.n	8007010 <_printf_i+0x1f8>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1ac      	bne.n	8006f82 <_printf_i+0x16a>
 8007028:	7803      	ldrb	r3, [r0, #0]
 800702a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800702e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007032:	e76c      	b.n	8006f0e <_printf_i+0xf6>
 8007034:	08007815 	.word	0x08007815
 8007038:	08007826 	.word	0x08007826

0800703c <_sbrk_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	4c06      	ldr	r4, [pc, #24]	; (8007058 <_sbrk_r+0x1c>)
 8007040:	2300      	movs	r3, #0
 8007042:	4605      	mov	r5, r0
 8007044:	4608      	mov	r0, r1
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	f7fa fdce 	bl	8001be8 <_sbrk>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_sbrk_r+0x1a>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	b103      	cbz	r3, 8007056 <_sbrk_r+0x1a>
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	2000433c 	.word	0x2000433c

0800705c <__sread>:
 800705c:	b510      	push	{r4, lr}
 800705e:	460c      	mov	r4, r1
 8007060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007064:	f000 fa96 	bl	8007594 <_read_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	bfab      	itete	ge
 800706c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800706e:	89a3      	ldrhlt	r3, [r4, #12]
 8007070:	181b      	addge	r3, r3, r0
 8007072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007076:	bfac      	ite	ge
 8007078:	6563      	strge	r3, [r4, #84]	; 0x54
 800707a:	81a3      	strhlt	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__swrite>:
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	461f      	mov	r7, r3
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	05db      	lsls	r3, r3, #23
 8007088:	4605      	mov	r5, r0
 800708a:	460c      	mov	r4, r1
 800708c:	4616      	mov	r6, r2
 800708e:	d505      	bpl.n	800709c <__swrite+0x1e>
 8007090:	2302      	movs	r3, #2
 8007092:	2200      	movs	r2, #0
 8007094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007098:	f000 f9b6 	bl	8007408 <_lseek_r>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	4628      	mov	r0, r5
 80070ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b2:	f000 b869 	b.w	8007188 <_write_r>

080070b6 <__sseek>:
 80070b6:	b510      	push	{r4, lr}
 80070b8:	460c      	mov	r4, r1
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 f9a3 	bl	8007408 <_lseek_r>
 80070c2:	1c43      	adds	r3, r0, #1
 80070c4:	89a3      	ldrh	r3, [r4, #12]
 80070c6:	bf15      	itete	ne
 80070c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070d2:	81a3      	strheq	r3, [r4, #12]
 80070d4:	bf18      	it	ne
 80070d6:	81a3      	strhne	r3, [r4, #12]
 80070d8:	bd10      	pop	{r4, pc}

080070da <__sclose>:
 80070da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070de:	f000 b8d3 	b.w	8007288 <_close_r>
	...

080070e4 <__swbuf_r>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	460e      	mov	r6, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	4605      	mov	r5, r0
 80070ec:	b118      	cbz	r0, 80070f6 <__swbuf_r+0x12>
 80070ee:	6983      	ldr	r3, [r0, #24]
 80070f0:	b90b      	cbnz	r3, 80070f6 <__swbuf_r+0x12>
 80070f2:	f7ff fbf7 	bl	80068e4 <__sinit>
 80070f6:	4b21      	ldr	r3, [pc, #132]	; (800717c <__swbuf_r+0x98>)
 80070f8:	429c      	cmp	r4, r3
 80070fa:	d12a      	bne.n	8007152 <__swbuf_r+0x6e>
 80070fc:	686c      	ldr	r4, [r5, #4]
 80070fe:	69a3      	ldr	r3, [r4, #24]
 8007100:	60a3      	str	r3, [r4, #8]
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	071a      	lsls	r2, r3, #28
 8007106:	d52e      	bpl.n	8007166 <__swbuf_r+0x82>
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	b363      	cbz	r3, 8007166 <__swbuf_r+0x82>
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	1ac0      	subs	r0, r0, r3
 8007112:	6963      	ldr	r3, [r4, #20]
 8007114:	b2f6      	uxtb	r6, r6
 8007116:	4283      	cmp	r3, r0
 8007118:	4637      	mov	r7, r6
 800711a:	dc04      	bgt.n	8007126 <__swbuf_r+0x42>
 800711c:	4621      	mov	r1, r4
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f948 	bl	80073b4 <_fflush_r>
 8007124:	bb28      	cbnz	r0, 8007172 <__swbuf_r+0x8e>
 8007126:	68a3      	ldr	r3, [r4, #8]
 8007128:	3b01      	subs	r3, #1
 800712a:	60a3      	str	r3, [r4, #8]
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	6022      	str	r2, [r4, #0]
 8007132:	701e      	strb	r6, [r3, #0]
 8007134:	6963      	ldr	r3, [r4, #20]
 8007136:	3001      	adds	r0, #1
 8007138:	4283      	cmp	r3, r0
 800713a:	d004      	beq.n	8007146 <__swbuf_r+0x62>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	07db      	lsls	r3, r3, #31
 8007140:	d519      	bpl.n	8007176 <__swbuf_r+0x92>
 8007142:	2e0a      	cmp	r6, #10
 8007144:	d117      	bne.n	8007176 <__swbuf_r+0x92>
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	f000 f933 	bl	80073b4 <_fflush_r>
 800714e:	b190      	cbz	r0, 8007176 <__swbuf_r+0x92>
 8007150:	e00f      	b.n	8007172 <__swbuf_r+0x8e>
 8007152:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <__swbuf_r+0x9c>)
 8007154:	429c      	cmp	r4, r3
 8007156:	d101      	bne.n	800715c <__swbuf_r+0x78>
 8007158:	68ac      	ldr	r4, [r5, #8]
 800715a:	e7d0      	b.n	80070fe <__swbuf_r+0x1a>
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <__swbuf_r+0xa0>)
 800715e:	429c      	cmp	r4, r3
 8007160:	bf08      	it	eq
 8007162:	68ec      	ldreq	r4, [r5, #12]
 8007164:	e7cb      	b.n	80070fe <__swbuf_r+0x1a>
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f000 f81f 	bl	80071ac <__swsetup_r>
 800716e:	2800      	cmp	r0, #0
 8007170:	d0cc      	beq.n	800710c <__swbuf_r+0x28>
 8007172:	f04f 37ff 	mov.w	r7, #4294967295
 8007176:	4638      	mov	r0, r7
 8007178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800717a:	bf00      	nop
 800717c:	080077c4 	.word	0x080077c4
 8007180:	080077e4 	.word	0x080077e4
 8007184:	080077a4 	.word	0x080077a4

08007188 <_write_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4c07      	ldr	r4, [pc, #28]	; (80071a8 <_write_r+0x20>)
 800718c:	4605      	mov	r5, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	2200      	movs	r2, #0
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	f7fa fcd5 	bl	8001b46 <_write>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_write_r+0x1e>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_write_r+0x1e>
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	2000433c 	.word	0x2000433c

080071ac <__swsetup_r>:
 80071ac:	4b32      	ldr	r3, [pc, #200]	; (8007278 <__swsetup_r+0xcc>)
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	681d      	ldr	r5, [r3, #0]
 80071b2:	4606      	mov	r6, r0
 80071b4:	460c      	mov	r4, r1
 80071b6:	b125      	cbz	r5, 80071c2 <__swsetup_r+0x16>
 80071b8:	69ab      	ldr	r3, [r5, #24]
 80071ba:	b913      	cbnz	r3, 80071c2 <__swsetup_r+0x16>
 80071bc:	4628      	mov	r0, r5
 80071be:	f7ff fb91 	bl	80068e4 <__sinit>
 80071c2:	4b2e      	ldr	r3, [pc, #184]	; (800727c <__swsetup_r+0xd0>)
 80071c4:	429c      	cmp	r4, r3
 80071c6:	d10f      	bne.n	80071e8 <__swsetup_r+0x3c>
 80071c8:	686c      	ldr	r4, [r5, #4]
 80071ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	0715      	lsls	r5, r2, #28
 80071d2:	d42c      	bmi.n	800722e <__swsetup_r+0x82>
 80071d4:	06d0      	lsls	r0, r2, #27
 80071d6:	d411      	bmi.n	80071fc <__swsetup_r+0x50>
 80071d8:	2209      	movs	r2, #9
 80071da:	6032      	str	r2, [r6, #0]
 80071dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	f04f 30ff 	mov.w	r0, #4294967295
 80071e6:	e03e      	b.n	8007266 <__swsetup_r+0xba>
 80071e8:	4b25      	ldr	r3, [pc, #148]	; (8007280 <__swsetup_r+0xd4>)
 80071ea:	429c      	cmp	r4, r3
 80071ec:	d101      	bne.n	80071f2 <__swsetup_r+0x46>
 80071ee:	68ac      	ldr	r4, [r5, #8]
 80071f0:	e7eb      	b.n	80071ca <__swsetup_r+0x1e>
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <__swsetup_r+0xd8>)
 80071f4:	429c      	cmp	r4, r3
 80071f6:	bf08      	it	eq
 80071f8:	68ec      	ldreq	r4, [r5, #12]
 80071fa:	e7e6      	b.n	80071ca <__swsetup_r+0x1e>
 80071fc:	0751      	lsls	r1, r2, #29
 80071fe:	d512      	bpl.n	8007226 <__swsetup_r+0x7a>
 8007200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007202:	b141      	cbz	r1, 8007216 <__swsetup_r+0x6a>
 8007204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007208:	4299      	cmp	r1, r3
 800720a:	d002      	beq.n	8007212 <__swsetup_r+0x66>
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f973 	bl	80074f8 <_free_r>
 8007212:	2300      	movs	r3, #0
 8007214:	6363      	str	r3, [r4, #52]	; 0x34
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	2300      	movs	r3, #0
 8007220:	6063      	str	r3, [r4, #4]
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f043 0308 	orr.w	r3, r3, #8
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	b94b      	cbnz	r3, 8007246 <__swsetup_r+0x9a>
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723c:	d003      	beq.n	8007246 <__swsetup_r+0x9a>
 800723e:	4621      	mov	r1, r4
 8007240:	4630      	mov	r0, r6
 8007242:	f000 f917 	bl	8007474 <__smakebuf_r>
 8007246:	89a2      	ldrh	r2, [r4, #12]
 8007248:	f012 0301 	ands.w	r3, r2, #1
 800724c:	d00c      	beq.n	8007268 <__swsetup_r+0xbc>
 800724e:	2300      	movs	r3, #0
 8007250:	60a3      	str	r3, [r4, #8]
 8007252:	6963      	ldr	r3, [r4, #20]
 8007254:	425b      	negs	r3, r3
 8007256:	61a3      	str	r3, [r4, #24]
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	b953      	cbnz	r3, 8007272 <__swsetup_r+0xc6>
 800725c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007260:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007264:	d1ba      	bne.n	80071dc <__swsetup_r+0x30>
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	0792      	lsls	r2, r2, #30
 800726a:	bf58      	it	pl
 800726c:	6963      	ldrpl	r3, [r4, #20]
 800726e:	60a3      	str	r3, [r4, #8]
 8007270:	e7f2      	b.n	8007258 <__swsetup_r+0xac>
 8007272:	2000      	movs	r0, #0
 8007274:	e7f7      	b.n	8007266 <__swsetup_r+0xba>
 8007276:	bf00      	nop
 8007278:	20000010 	.word	0x20000010
 800727c:	080077c4 	.word	0x080077c4
 8007280:	080077e4 	.word	0x080077e4
 8007284:	080077a4 	.word	0x080077a4

08007288 <_close_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4c06      	ldr	r4, [pc, #24]	; (80072a4 <_close_r+0x1c>)
 800728c:	2300      	movs	r3, #0
 800728e:	4605      	mov	r5, r0
 8007290:	4608      	mov	r0, r1
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	f7fa fc73 	bl	8001b7e <_close>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_close_r+0x1a>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_close_r+0x1a>
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	2000433c 	.word	0x2000433c

080072a8 <__sflush_r>:
 80072a8:	898a      	ldrh	r2, [r1, #12]
 80072aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ae:	4605      	mov	r5, r0
 80072b0:	0710      	lsls	r0, r2, #28
 80072b2:	460c      	mov	r4, r1
 80072b4:	d458      	bmi.n	8007368 <__sflush_r+0xc0>
 80072b6:	684b      	ldr	r3, [r1, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc05      	bgt.n	80072c8 <__sflush_r+0x20>
 80072bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dc02      	bgt.n	80072c8 <__sflush_r+0x20>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d0f9      	beq.n	80072c2 <__sflush_r+0x1a>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d4:	682f      	ldr	r7, [r5, #0]
 80072d6:	6a21      	ldr	r1, [r4, #32]
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	d032      	beq.n	8007342 <__sflush_r+0x9a>
 80072dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	075a      	lsls	r2, r3, #29
 80072e2:	d505      	bpl.n	80072f0 <__sflush_r+0x48>
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	1ac0      	subs	r0, r0, r3
 80072e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ea:	b10b      	cbz	r3, 80072f0 <__sflush_r+0x48>
 80072ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ee:	1ac0      	subs	r0, r0, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	4602      	mov	r2, r0
 80072f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f6:	6a21      	ldr	r1, [r4, #32]
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b0      	blx	r6
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	d106      	bne.n	8007310 <__sflush_r+0x68>
 8007302:	6829      	ldr	r1, [r5, #0]
 8007304:	291d      	cmp	r1, #29
 8007306:	d848      	bhi.n	800739a <__sflush_r+0xf2>
 8007308:	4a29      	ldr	r2, [pc, #164]	; (80073b0 <__sflush_r+0x108>)
 800730a:	40ca      	lsrs	r2, r1
 800730c:	07d6      	lsls	r6, r2, #31
 800730e:	d544      	bpl.n	800739a <__sflush_r+0xf2>
 8007310:	2200      	movs	r2, #0
 8007312:	6062      	str	r2, [r4, #4]
 8007314:	04d9      	lsls	r1, r3, #19
 8007316:	6922      	ldr	r2, [r4, #16]
 8007318:	6022      	str	r2, [r4, #0]
 800731a:	d504      	bpl.n	8007326 <__sflush_r+0x7e>
 800731c:	1c42      	adds	r2, r0, #1
 800731e:	d101      	bne.n	8007324 <__sflush_r+0x7c>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b903      	cbnz	r3, 8007326 <__sflush_r+0x7e>
 8007324:	6560      	str	r0, [r4, #84]	; 0x54
 8007326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007328:	602f      	str	r7, [r5, #0]
 800732a:	2900      	cmp	r1, #0
 800732c:	d0c9      	beq.n	80072c2 <__sflush_r+0x1a>
 800732e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007332:	4299      	cmp	r1, r3
 8007334:	d002      	beq.n	800733c <__sflush_r+0x94>
 8007336:	4628      	mov	r0, r5
 8007338:	f000 f8de 	bl	80074f8 <_free_r>
 800733c:	2000      	movs	r0, #0
 800733e:	6360      	str	r0, [r4, #52]	; 0x34
 8007340:	e7c0      	b.n	80072c4 <__sflush_r+0x1c>
 8007342:	2301      	movs	r3, #1
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	1c41      	adds	r1, r0, #1
 800734a:	d1c8      	bne.n	80072de <__sflush_r+0x36>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0c5      	beq.n	80072de <__sflush_r+0x36>
 8007352:	2b1d      	cmp	r3, #29
 8007354:	d001      	beq.n	800735a <__sflush_r+0xb2>
 8007356:	2b16      	cmp	r3, #22
 8007358:	d101      	bne.n	800735e <__sflush_r+0xb6>
 800735a:	602f      	str	r7, [r5, #0]
 800735c:	e7b1      	b.n	80072c2 <__sflush_r+0x1a>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	e7ad      	b.n	80072c4 <__sflush_r+0x1c>
 8007368:	690f      	ldr	r7, [r1, #16]
 800736a:	2f00      	cmp	r7, #0
 800736c:	d0a9      	beq.n	80072c2 <__sflush_r+0x1a>
 800736e:	0793      	lsls	r3, r2, #30
 8007370:	680e      	ldr	r6, [r1, #0]
 8007372:	bf08      	it	eq
 8007374:	694b      	ldreq	r3, [r1, #20]
 8007376:	600f      	str	r7, [r1, #0]
 8007378:	bf18      	it	ne
 800737a:	2300      	movne	r3, #0
 800737c:	eba6 0807 	sub.w	r8, r6, r7
 8007380:	608b      	str	r3, [r1, #8]
 8007382:	f1b8 0f00 	cmp.w	r8, #0
 8007386:	dd9c      	ble.n	80072c2 <__sflush_r+0x1a>
 8007388:	4643      	mov	r3, r8
 800738a:	463a      	mov	r2, r7
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007390:	4628      	mov	r0, r5
 8007392:	47b0      	blx	r6
 8007394:	2800      	cmp	r0, #0
 8007396:	dc06      	bgt.n	80073a6 <__sflush_r+0xfe>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	f04f 30ff 	mov.w	r0, #4294967295
 80073a4:	e78e      	b.n	80072c4 <__sflush_r+0x1c>
 80073a6:	4407      	add	r7, r0
 80073a8:	eba8 0800 	sub.w	r8, r8, r0
 80073ac:	e7e9      	b.n	8007382 <__sflush_r+0xda>
 80073ae:	bf00      	nop
 80073b0:	20400001 	.word	0x20400001

080073b4 <_fflush_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	690b      	ldr	r3, [r1, #16]
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	b1db      	cbz	r3, 80073f6 <_fflush_r+0x42>
 80073be:	b118      	cbz	r0, 80073c8 <_fflush_r+0x14>
 80073c0:	6983      	ldr	r3, [r0, #24]
 80073c2:	b90b      	cbnz	r3, 80073c8 <_fflush_r+0x14>
 80073c4:	f7ff fa8e 	bl	80068e4 <__sinit>
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <_fflush_r+0x48>)
 80073ca:	429c      	cmp	r4, r3
 80073cc:	d109      	bne.n	80073e2 <_fflush_r+0x2e>
 80073ce:	686c      	ldr	r4, [r5, #4]
 80073d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d4:	b17b      	cbz	r3, 80073f6 <_fflush_r+0x42>
 80073d6:	4621      	mov	r1, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073de:	f7ff bf63 	b.w	80072a8 <__sflush_r>
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <_fflush_r+0x4c>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	d101      	bne.n	80073ec <_fflush_r+0x38>
 80073e8:	68ac      	ldr	r4, [r5, #8]
 80073ea:	e7f1      	b.n	80073d0 <_fflush_r+0x1c>
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <_fflush_r+0x50>)
 80073ee:	429c      	cmp	r4, r3
 80073f0:	bf08      	it	eq
 80073f2:	68ec      	ldreq	r4, [r5, #12]
 80073f4:	e7ec      	b.n	80073d0 <_fflush_r+0x1c>
 80073f6:	2000      	movs	r0, #0
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
 80073fa:	bf00      	nop
 80073fc:	080077c4 	.word	0x080077c4
 8007400:	080077e4 	.word	0x080077e4
 8007404:	080077a4 	.word	0x080077a4

08007408 <_lseek_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4c07      	ldr	r4, [pc, #28]	; (8007428 <_lseek_r+0x20>)
 800740c:	4605      	mov	r5, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7fa fbd8 	bl	8001bcc <_lseek>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_lseek_r+0x1e>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	b103      	cbz	r3, 8007426 <_lseek_r+0x1e>
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	2000433c 	.word	0x2000433c

0800742c <__swhatbuf_r>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	460e      	mov	r6, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	2900      	cmp	r1, #0
 8007436:	b096      	sub	sp, #88	; 0x58
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	da07      	bge.n	800744e <__swhatbuf_r+0x22>
 800743e:	2300      	movs	r3, #0
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	89b3      	ldrh	r3, [r6, #12]
 8007444:	061a      	lsls	r2, r3, #24
 8007446:	d410      	bmi.n	800746a <__swhatbuf_r+0x3e>
 8007448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800744c:	e00e      	b.n	800746c <__swhatbuf_r+0x40>
 800744e:	466a      	mov	r2, sp
 8007450:	f000 f8b2 	bl	80075b8 <_fstat_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	dbf2      	blt.n	800743e <__swhatbuf_r+0x12>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800745e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007462:	425a      	negs	r2, r3
 8007464:	415a      	adcs	r2, r3
 8007466:	602a      	str	r2, [r5, #0]
 8007468:	e7ee      	b.n	8007448 <__swhatbuf_r+0x1c>
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	2000      	movs	r0, #0
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	b016      	add	sp, #88	; 0x58
 8007472:	bd70      	pop	{r4, r5, r6, pc}

08007474 <__smakebuf_r>:
 8007474:	898b      	ldrh	r3, [r1, #12]
 8007476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007478:	079d      	lsls	r5, r3, #30
 800747a:	4606      	mov	r6, r0
 800747c:	460c      	mov	r4, r1
 800747e:	d507      	bpl.n	8007490 <__smakebuf_r+0x1c>
 8007480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2301      	movs	r3, #1
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	b002      	add	sp, #8
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	ab01      	add	r3, sp, #4
 8007492:	466a      	mov	r2, sp
 8007494:	f7ff ffca 	bl	800742c <__swhatbuf_r>
 8007498:	9900      	ldr	r1, [sp, #0]
 800749a:	4605      	mov	r5, r0
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff faab 	bl	80069f8 <_malloc_r>
 80074a2:	b948      	cbnz	r0, 80074b8 <__smakebuf_r+0x44>
 80074a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d4ef      	bmi.n	800748c <__smakebuf_r+0x18>
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7e3      	b.n	8007480 <__smakebuf_r+0xc>
 80074b8:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <__smakebuf_r+0x7c>)
 80074ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	6163      	str	r3, [r4, #20]
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	6120      	str	r0, [r4, #16]
 80074ce:	b15b      	cbz	r3, 80074e8 <__smakebuf_r+0x74>
 80074d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f881 	bl	80075dc <_isatty_r>
 80074da:	b128      	cbz	r0, 80074e8 <__smakebuf_r+0x74>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	431d      	orrs	r5, r3
 80074ec:	81a5      	strh	r5, [r4, #12]
 80074ee:	e7cd      	b.n	800748c <__smakebuf_r+0x18>
 80074f0:	080068ad 	.word	0x080068ad

080074f4 <__malloc_lock>:
 80074f4:	4770      	bx	lr

080074f6 <__malloc_unlock>:
 80074f6:	4770      	bx	lr

080074f8 <_free_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4605      	mov	r5, r0
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d045      	beq.n	800758c <_free_r+0x94>
 8007500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007504:	1f0c      	subs	r4, r1, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfb8      	it	lt
 800750a:	18e4      	addlt	r4, r4, r3
 800750c:	f7ff fff2 	bl	80074f4 <__malloc_lock>
 8007510:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <_free_r+0x98>)
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	4610      	mov	r0, r2
 8007516:	b933      	cbnz	r3, 8007526 <_free_r+0x2e>
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	6014      	str	r4, [r2, #0]
 800751c:	4628      	mov	r0, r5
 800751e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007522:	f7ff bfe8 	b.w	80074f6 <__malloc_unlock>
 8007526:	42a3      	cmp	r3, r4
 8007528:	d90c      	bls.n	8007544 <_free_r+0x4c>
 800752a:	6821      	ldr	r1, [r4, #0]
 800752c:	1862      	adds	r2, r4, r1
 800752e:	4293      	cmp	r3, r2
 8007530:	bf04      	itt	eq
 8007532:	681a      	ldreq	r2, [r3, #0]
 8007534:	685b      	ldreq	r3, [r3, #4]
 8007536:	6063      	str	r3, [r4, #4]
 8007538:	bf04      	itt	eq
 800753a:	1852      	addeq	r2, r2, r1
 800753c:	6022      	streq	r2, [r4, #0]
 800753e:	6004      	str	r4, [r0, #0]
 8007540:	e7ec      	b.n	800751c <_free_r+0x24>
 8007542:	4613      	mov	r3, r2
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	b10a      	cbz	r2, 800754c <_free_r+0x54>
 8007548:	42a2      	cmp	r2, r4
 800754a:	d9fa      	bls.n	8007542 <_free_r+0x4a>
 800754c:	6819      	ldr	r1, [r3, #0]
 800754e:	1858      	adds	r0, r3, r1
 8007550:	42a0      	cmp	r0, r4
 8007552:	d10b      	bne.n	800756c <_free_r+0x74>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	4401      	add	r1, r0
 8007558:	1858      	adds	r0, r3, r1
 800755a:	4282      	cmp	r2, r0
 800755c:	6019      	str	r1, [r3, #0]
 800755e:	d1dd      	bne.n	800751c <_free_r+0x24>
 8007560:	6810      	ldr	r0, [r2, #0]
 8007562:	6852      	ldr	r2, [r2, #4]
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	4401      	add	r1, r0
 8007568:	6019      	str	r1, [r3, #0]
 800756a:	e7d7      	b.n	800751c <_free_r+0x24>
 800756c:	d902      	bls.n	8007574 <_free_r+0x7c>
 800756e:	230c      	movs	r3, #12
 8007570:	602b      	str	r3, [r5, #0]
 8007572:	e7d3      	b.n	800751c <_free_r+0x24>
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	1821      	adds	r1, r4, r0
 8007578:	428a      	cmp	r2, r1
 800757a:	bf04      	itt	eq
 800757c:	6811      	ldreq	r1, [r2, #0]
 800757e:	6852      	ldreq	r2, [r2, #4]
 8007580:	6062      	str	r2, [r4, #4]
 8007582:	bf04      	itt	eq
 8007584:	1809      	addeq	r1, r1, r0
 8007586:	6021      	streq	r1, [r4, #0]
 8007588:	605c      	str	r4, [r3, #4]
 800758a:	e7c7      	b.n	800751c <_free_r+0x24>
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	20004038 	.word	0x20004038

08007594 <_read_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4c07      	ldr	r4, [pc, #28]	; (80075b4 <_read_r+0x20>)
 8007598:	4605      	mov	r5, r0
 800759a:	4608      	mov	r0, r1
 800759c:	4611      	mov	r1, r2
 800759e:	2200      	movs	r2, #0
 80075a0:	6022      	str	r2, [r4, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	f7fa fab2 	bl	8001b0c <_read>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_read_r+0x1e>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_read_r+0x1e>
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	2000433c 	.word	0x2000433c

080075b8 <_fstat_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4c07      	ldr	r4, [pc, #28]	; (80075d8 <_fstat_r+0x20>)
 80075bc:	2300      	movs	r3, #0
 80075be:	4605      	mov	r5, r0
 80075c0:	4608      	mov	r0, r1
 80075c2:	4611      	mov	r1, r2
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	f7fa fae6 	bl	8001b96 <_fstat>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	d102      	bne.n	80075d4 <_fstat_r+0x1c>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	b103      	cbz	r3, 80075d4 <_fstat_r+0x1c>
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	bd38      	pop	{r3, r4, r5, pc}
 80075d6:	bf00      	nop
 80075d8:	2000433c 	.word	0x2000433c

080075dc <_isatty_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4c06      	ldr	r4, [pc, #24]	; (80075f8 <_isatty_r+0x1c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4605      	mov	r5, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	6023      	str	r3, [r4, #0]
 80075e8:	f7fa fae5 	bl	8001bb6 <_isatty>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_isatty_r+0x1a>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_isatty_r+0x1a>
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	2000433c 	.word	0x2000433c

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr


Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005050  08005050  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005058  08005058  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004140  20000010  08005070  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004150  08005070  00024150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d1  00000000  00000000  00036102  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  0003a460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024c42  00000000  00000000  0003b570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa77  00000000  00000000  000601b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e05de  00000000  00000000  0006fc29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  00150284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f78 	.word	0x08004f78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004f78 	.word	0x08004f78

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD_B_GPIO_Port,LD_B_Pin);
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <Chassis_Task_Func+0x20>)
 80004fc:	f001 fce1 	bl	8001ec2 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000504:	f003 fb59 	bl	8003bba <osDelay>
    osDelay(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f003 fb56 	bl	8003bba <osDelay>
	HAL_GPIO_TogglePin(LD_B_GPIO_Port,LD_B_Pin);
 800050e:	e7f3      	b.n	80004f8 <Chassis_Task_Func+0x8>
 8000510:	40021800 	.word	0x40021800

08000514 <Gimbal_Task_Function>:
static CAN_TxHeaderTypeDef  chassis_tx_message;

extern CAN_HandleTypeDef hcan1;

void Gimbal_Task_Function(void const * argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;
	HAL_CAN_Start(&hcan1);
 800051c:	4805      	ldr	r0, [pc, #20]	; (8000534 <Gimbal_Task_Function+0x20>)
 800051e:	f000 fed8 	bl	80012d2 <HAL_CAN_Start>


  for(;;)
  {
	  //HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
	  CAN_Send_Gimbal(7500,0);
 8000522:	2100      	movs	r1, #0
 8000524:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000528:	f000 f806 	bl	8000538 <CAN_Send_Gimbal>

	  //osDelay(500);
	  osDelay(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f003 fb44 	bl	8003bba <osDelay>
	  CAN_Send_Gimbal(7500,0);
 8000532:	e7f6      	b.n	8000522 <Gimbal_Task_Function+0xe>
 8000534:	20004054 	.word	0x20004054

08000538 <CAN_Send_Gimbal>:
  }
  /* USER CODE END Gimbal_Task_Function */
}

void CAN_Send_Gimbal(int16_t yaw_raw, int16_t pitch_raw)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	460a      	mov	r2, r1
 8000542:	80fb      	strh	r3, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    //chassis_tx_message.StdId = 0x200;  // 3508
	chassis_tx_message.StdId = 0x1FF;  // gimbal
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <CAN_Send_Gimbal+0x84>)
 800054a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800054e:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <CAN_Send_Gimbal+0x84>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <CAN_Send_Gimbal+0x84>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <CAN_Send_Gimbal+0x84>)
 800055e:	2208      	movs	r2, #8
 8000560:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = yaw_raw >> 8;
 8000562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000566:	121b      	asrs	r3, r3, #8
 8000568:	b21b      	sxth	r3, r3
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 800056e:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = yaw_raw;
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 8000576:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = pitch_raw >> 8;
 8000578:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800057c:	121b      	asrs	r3, r3, #8
 800057e:	b21b      	sxth	r3, r3
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 8000584:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = pitch_raw;
 8000586:	88bb      	ldrh	r3, [r7, #4]
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 800058c:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = 0;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 8000590:	2200      	movs	r2, #0
 8000592:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = 0;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 8000596:	2200      	movs	r2, #0
 8000598:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = 0;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 800059c:	2200      	movs	r2, #0
 800059e:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = 0;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	71da      	strb	r2, [r3, #7]

    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <CAN_Send_Gimbal+0x88>)
 80005ac:	4903      	ldr	r1, [pc, #12]	; (80005bc <CAN_Send_Gimbal+0x84>)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <CAN_Send_Gimbal+0x8c>)
 80005b0:	f000 fed3 	bl	800135a <HAL_CAN_AddTxMessage>
//    else{
//    	buzzer_play_c1(100);
//    	buzzer_play_d1(100);
//    	buzzer_play_e1(100);
//    }
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000034 	.word	0x20000034
 80005c0:	2000002c 	.word	0x2000002c
 80005c4:	20004054 	.word	0x20004054

080005c8 <Shoot_Task_Func>:
 */
#include "Shoot_App.h"
void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 80005d0:	f000 f81c 	bl	800060c <shoot_init>
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <Shoot_Task_Func+0x3c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <Shoot_Task_Func+0x3c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005e6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 80005e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <Shoot_Task_Func+0x40>)
 80005ee:	f001 fc68 	bl	8001ec2 <HAL_GPIO_TogglePin>
    osDelay(500);
 80005f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f6:	f003 fae0 	bl	8003bba <osDelay>
    osDelay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f003 fadd 	bl	8003bba <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000600:	e7e8      	b.n	80005d4 <Shoot_Task_Func+0xc>
 8000602:	bf00      	nop
 8000604:	20003fec 	.word	0x20003fec
 8000608:	40021800 	.word	0x40021800

0800060c <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000610:	2100      	movs	r1, #0
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <shoot_init+0x50>)
 8000614:	f002 f962 	bl	80028dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000618:	2108      	movs	r1, #8
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <shoot_init+0x50>)
 800061c:	f002 f95e 	bl	80028dc <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,2000);
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <shoot_init+0x50>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000);
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <shoot_init+0x50>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000632:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000634:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000638:	f003 fabf 	bl	8003bba <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <shoot_init+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1000);
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <shoot_init+0x50>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000650:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000654:	f003 fab1 	bl	8003bba <osDelay>

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20003fec 	.word	0x20003fec

08000660 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <buzzer_init+0x10>)
 8000668:	f002 f938 	bl	80028dc <HAL_TIM_PWM_Start>

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000407c 	.word	0x2000407c

08000674 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000684:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <vApplicationGetIdleTaskMemory+0x30>)
 800068a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000004c 	.word	0x2000004c
 80006a4:	200000a0 	.word	0x200000a0

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b5b0      	push	{r4, r5, r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fcd3 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f869 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f9df 	bl	8000a78 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006ba:	f000 f8d1 	bl	8000860 <MX_CAN1_Init>
  MX_TIM4_Init();
 80006be:	f000 f905 	bl	80008cc <MX_TIM4_Init>
  MX_TIM12_Init();
 80006c2:	f000 f969 	bl	8000998 <MX_TIM12_Init>
  MX_UART7_Init();
 80006c6:	f000 f9ad 	bl	8000a24 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80006ca:	f7ff ffc9 	bl	8000660 <buzzer_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <main+0xc0>)
 80006d0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006d4:	461d      	mov	r5, r3
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 fa1a 	bl	8003b22 <osThreadCreate>
 80006ee:	4602      	mov	r2, r0
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <main+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <main+0xc8>)
 80006f6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8000708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fa07 	bl	8003b22 <osThreadCreate>
 8000714:	4602      	mov	r2, r0
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <main+0xcc>)
 8000718:	601a      	str	r2, [r3, #0]

  osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <main+0xd0>)
 800071c:	f107 041c 	add.w	r4, r7, #28
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f003 f9f4 	bl	8003b22 <osThreadCreate>
 800073a:	4602      	mov	r2, r0
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <main+0xd4>)
 800073e:	601a      	str	r2, [r3, #0]

  osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0xd8>)
 8000742:	463c      	mov	r4, r7
 8000744:	461d      	mov	r5, r3
 8000746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8000752:	463b      	mov	r3, r7
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 f9e3 	bl	8003b22 <osThreadCreate>
 800075c:	4602      	mov	r2, r0
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <main+0xdc>)
 8000760:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000762:	f003 f9d7 	bl	8003b14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000766:	e7fe      	b.n	8000766 <main+0xbe>
 8000768:	08004f9c 	.word	0x08004f9c
 800076c:	200040bc 	.word	0x200040bc
 8000770:	08004fc4 	.word	0x08004fc4
 8000774:	20004100 	.word	0x20004100
 8000778:	08004fec 	.word	0x08004fec
 800077c:	20004108 	.word	0x20004108
 8000780:	08005014 	.word	0x08005014
 8000784:	20004104 	.word	0x20004104

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	; 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 fbe6 	bl	8004f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <SystemClock_Config+0xd0>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SystemClock_Config+0xd0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd4>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80007fc:	2306      	movs	r3, #6
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000800:	23a8      	movs	r3, #168	; 0xa8
 8000802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fb71 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800081c:	f000 f9f6 	bl	8000c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fdca 	bl	80023d8 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800084a:	f000 f9df 	bl	8000c0c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_CAN1_Init+0x64>)
 8000866:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <MX_CAN1_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_CAN1_Init+0x64>)
 800086c:	2203      	movs	r2, #3
 800086e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_CAN1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_CAN1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_CAN1_Init+0x64>)
 800087e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000882:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_CAN1_Init+0x64>)
 8000886:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800088a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_CAN1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_CAN1_Init+0x64>)
 8000894:	2201      	movs	r2, #1
 8000896:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_CAN1_Init+0x64>)
 800089a:	2201      	movs	r2, #1
 800089c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_CAN1_Init+0x64>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_CAN1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_CAN1_Init+0x64>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_CAN1_Init+0x64>)
 80008b2:	f000 fc13 	bl	80010dc <HAL_CAN_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 f9a6 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20004054 	.word	0x20004054
 80008c8:	40006400 	.word	0x40006400

080008cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_TIM4_Init+0xc4>)
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <MX_TIM4_Init+0xc8>)
 80008f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_TIM4_Init+0xc4>)
 80008f6:	2253      	movs	r2, #83	; 0x53
 80008f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_TIM4_Init+0xc4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_TIM4_Init+0xc4>)
 8000902:	f242 720f 	movw	r2, #9999	; 0x270f
 8000906:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_TIM4_Init+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_TIM4_Init+0xc4>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000914:	481e      	ldr	r0, [pc, #120]	; (8000990 <MX_TIM4_Init+0xc4>)
 8000916:	f001 ffb6 	bl	8002886 <HAL_TIM_PWM_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f974 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4619      	mov	r1, r3
 8000932:	4817      	ldr	r0, [pc, #92]	; (8000990 <MX_TIM4_Init+0xc4>)
 8000934:	f002 fc7c 	bl	8003230 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800093e:	f000 f965 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2360      	movs	r3, #96	; 0x60
 8000944:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	480d      	ldr	r0, [pc, #52]	; (8000990 <MX_TIM4_Init+0xc4>)
 800095c:	f002 f904 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000966:	f000 f951 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2208      	movs	r2, #8
 800096e:	4619      	mov	r1, r3
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <MX_TIM4_Init+0xc4>)
 8000972:	f002 f8f9 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800097c:	f000 f946 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <MX_TIM4_Init+0xc4>)
 8000982:	f000 f9fb 	bl	8000d7c <HAL_TIM_MspPostInit>

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20003fec 	.word	0x20003fec
 8000994:	40000800 	.word	0x40000800

08000998 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009b2:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <MX_TIM12_Init+0x88>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009b8:	2223      	movs	r2, #35	; 0x23
 80009ba:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80009c8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009d8:	f001 ff55 	bl	8002886 <HAL_TIM_PWM_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80009e2:	f000 f913 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	; 0x60
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MX_TIM12_Init+0x84>)
 80009fe:	f002 f8b3 	bl	8002b68 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000a08:	f000 f900 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM12_Init+0x84>)
 8000a0e:	f000 f9b5 	bl	8000d7c <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3720      	adds	r7, #32
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000407c 	.word	0x2000407c
 8000a20:	40001800 	.word	0x40001800

08000a24 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_UART7_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_UART7_Init+0x4c>)
 8000a5c:	f002 fc78 	bl	8003350 <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f8d1 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200040c0 	.word	0x200040c0
 8000a74:	40007800 	.word	0x40007800

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	4b46      	ldr	r3, [pc, #280]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a45      	ldr	r2, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_GPIO_Init+0x150>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000b3c:	4823      	ldr	r0, [pc, #140]	; (8000bcc <MX_GPIO_Init+0x154>)
 8000b3e:	f001 f9a7 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	211e      	movs	r1, #30
 8000b46:	4821      	ldr	r0, [pc, #132]	; (8000bcc <MX_GPIO_Init+0x154>)
 8000b48:	f001 f9a2 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b52:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <MX_GPIO_Init+0x158>)
 8000b54:	f001 f99c 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5e:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b60:	f001 f996 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_A_Pin LD_B_Pin LD_C_Pin LD_D_Pin
                           LD_E_Pin LD_F_Pin LD_G_Pin LD_H_Pin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8000b64:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000b68:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_GPIO_Init+0x154>)
 8000b7e:	f000 ffdd 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Red_Pin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8000b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_GPIO_Init+0x158>)
 8000b9c:	f000 ffce 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8000ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000bba:	f000 ffbf 	bl	8001b3c <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3730      	adds	r7, #48	; 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40021400 	.word	0x40021400

08000bd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
    osDelay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f002 ffea 	bl	8003bba <osDelay>
 8000be6:	e7fb      	b.n	8000be0 <StartDefaultTask+0x8>

08000be8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d101      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfa:	f000 fa4f 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40000c00 	.word	0x40000c00

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <Error_Handler+0x6>

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x54>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <HAL_MspInit+0x54>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x54>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_MspInit+0x54>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_MspInit+0x54>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_MspInit+0x54>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	210f      	movs	r1, #15
 8000c56:	f06f 0001 	mvn.w	r0, #1
 8000c5a:	f000 ff45 	bl	8001ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <HAL_CAN_MspInit+0x94>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d133      	bne.n	8000cf6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_CAN_MspInit+0x98>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_CAN_MspInit+0x98>)
 8000c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_CAN_MspInit+0x98>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_CAN_MspInit+0x98>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_CAN_MspInit+0x98>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_CAN_MspInit+0x98>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <HAL_CAN_MspInit+0x9c>)
 8000ce2:	f000 ff2b 	bl	8001b3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	2014      	movs	r0, #20
 8000cec:	f000 fefc 	bl	8001ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f000 ff15 	bl	8001b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <HAL_TIM_PWM_MspInit+0x64>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10e      	bne.n	8000d3c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_TIM_PWM_MspInit+0x68>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <HAL_TIM_PWM_MspInit+0x68>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_TIM_PWM_MspInit+0x68>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000d3a:	e012      	b.n	8000d62 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10d      	bne.n	8000d62 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_PWM_MspInit+0x68>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_TIM_PWM_MspInit+0x68>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_TIM_PWM_MspInit+0x68>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40000800 	.word	0x40000800
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40001800 	.word	0x40001800

08000d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a24      	ldr	r2, [pc, #144]	; (8000e2c <HAL_TIM_MspPostInit+0xb0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d11f      	bne.n	8000dde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_TIM_MspPostInit+0xb4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_TIM_MspPostInit+0xb4>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_TIM_MspPostInit+0xb4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8000dba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <HAL_TIM_MspPostInit+0xb8>)
 8000dd8:	f000 feb0 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000ddc:	e022      	b.n	8000e24 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_TIM_MspPostInit+0xbc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d11d      	bne.n	8000e24 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_TIM_MspPostInit+0xb4>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_TIM_MspPostInit+0xb4>)
 8000df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_TIM_MspPostInit+0xb4>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e14:	2309      	movs	r3, #9
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <HAL_TIM_MspPostInit+0xc0>)
 8000e20:	f000 fe8c 	bl	8001b3c <HAL_GPIO_Init>
}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40000800 	.word	0x40000800
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40001800 	.word	0x40001800
 8000e3c:	40021c00 	.word	0x40021c00

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0x84>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12b      	bne.n	8000eba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_UART_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e9a:	23c0      	movs	r3, #192	; 0xc0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <HAL_UART_MspInit+0x8c>)
 8000eb6:	f000 fe41 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40007800 	.word	0x40007800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40021400 	.word	0x40021400

08000ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2032      	movs	r0, #50	; 0x32
 8000ee6:	f000 fdff 	bl	8001ae8 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000eea:	2032      	movs	r0, #50	; 0x32
 8000eec:	f000 fe18 	bl	8001b20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_InitTick+0xa4>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_InitTick+0xa4>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0c:	f107 0210 	add.w	r2, r7, #16
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fc2a 	bl	8002770 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f1c:	f001 fc00 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8000f20:	4603      	mov	r3, r0
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9b      	lsrs	r3, r3, #18
 8000f30:	3b01      	subs	r3, #1
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_InitTick+0xac>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_InitTick+0xb0>)
 8000f38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_InitTick+0xac>)
 8000f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f40:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_InitTick+0xac>)
 8000f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f46:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_InitTick+0xac>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_InitTick+0xac>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_InitTick+0xac>)
 8000f56:	f001 fc3d 	bl	80027d4 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d104      	bne.n	8000f6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000f60:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_InitTick+0xac>)
 8000f62:	f001 fc6c 	bl	800283e <HAL_TIM_Base_Start_IT>
 8000f66:	4603      	mov	r3, r0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	2000410c 	.word	0x2000410c
 8000f80:	40000c00 	.word	0x40000c00

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <CAN1_RX0_IRQHandler+0x10>)
 8000fb6:	f000 faab 	bl	8001510 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20004054 	.word	0x20004054

08000fc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM5_IRQHandler+0x10>)
 8000fca:	f001 fcc5 	bl	8002958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000410c 	.word	0x2000410c

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <SystemInit+0x28>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <SystemInit+0x28>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SystemInit+0x28>)
 8000fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800103c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100a:	e003      	b.n	8001014 <LoopCopyDataInit>

0800100c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800100e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001012:	3104      	adds	r1, #4

08001014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800101c:	d3f6      	bcc.n	800100c <CopyDataInit>
  ldr  r2, =_sbss
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001020:	e002      	b.n	8001028 <LoopFillZerobss>

08001022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001024:	f842 3b04 	str.w	r3, [r2], #4

08001028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800102c:	d3f9      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102e:	f7ff ffd3 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f003 ff75 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fb37 	bl	80006a8 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001040:	08005060 	.word	0x08005060
  ldr  r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001048:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800104c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001050:	20004150 	.word	0x20004150

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_Init+0x40>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_Init+0x40>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001072:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x40>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 fd26 	bl	8001ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ff22 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fdc2 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023c00 	.word	0x40023c00

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	2000414c 	.word	0x2000414c

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000414c 	.word	0x2000414c

080010dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e0ed      	b.n	80012ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fdb6 	bl	8000c6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0202 	bic.w	r2, r2, #2
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ffd8 	bl	80010c4 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ffd4 	bl	80010c4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0c5      	b.n	80012ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e5      	bne.n	8001118 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115c:	f7ff ffb2 	bl	80010c4 <HAL_GetTick>
 8001160:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001162:	e012      	b.n	800118a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001164:	f7ff ffae 	bl	80010c4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b0a      	cmp	r3, #10
 8001170:	d90b      	bls.n	800118a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2205      	movs	r2, #5
 8001182:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e09f      	b.n	80012ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0e5      	beq.n	8001164 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7e1b      	ldrb	r3, [r3, #24]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d108      	bne.n	80011b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	e007      	b.n	80011c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7e5b      	ldrb	r3, [r3, #25]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e007      	b.n	80011ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e9b      	ldrb	r3, [r3, #26]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0220 	orr.w	r2, r2, #32
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e007      	b.n	8001216 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0220 	bic.w	r2, r2, #32
 8001214:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7edb      	ldrb	r3, [r3, #27]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0210 	bic.w	r2, r2, #16
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e007      	b.n	8001240 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0210 	orr.w	r2, r2, #16
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7f1b      	ldrb	r3, [r3, #28]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0208 	bic.w	r2, r2, #8
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7f5b      	ldrb	r3, [r3, #29]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e007      	b.n	8001294 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0204 	bic.w	r2, r2, #4
 8001292:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	ea42 0103 	orr.w	r1, r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d12e      	bne.n	8001344 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2202      	movs	r2, #2
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012fe:	f7ff fee1 	bl	80010c4 <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001304:	e012      	b.n	800132c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001306:	f7ff fedd 	bl	80010c4 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b0a      	cmp	r3, #10
 8001312:	d90b      	bls.n	800132c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2205      	movs	r2, #5
 8001324:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e012      	b.n	8001352 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1e5      	bne.n	8001306 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	e006      	b.n	8001352 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
  }
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800135a:	b480      	push	{r7}
 800135c:	b089      	sub	sp, #36	; 0x24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d003      	beq.n	8001386 <HAL_CAN_AddTxMessage+0x2c>
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	2b02      	cmp	r3, #2
 8001382:	f040 80b8 	bne.w	80014f6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10a      	bne.n	80013a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a0 	beq.w	80014e6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	0e1b      	lsrs	r3, r3, #24
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d907      	bls.n	80013c6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e09e      	b.n	8001504 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d10d      	bne.n	80013f4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013e2:	68f9      	ldr	r1, [r7, #12]
 80013e4:	6809      	ldr	r1, [r1, #0]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3318      	adds	r3, #24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e00f      	b.n	8001414 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013fe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001408:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3318      	adds	r3, #24
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	440b      	add	r3, r1
 8001412:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3318      	adds	r3, #24
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	440b      	add	r3, r1
 8001424:	3304      	adds	r3, #4
 8001426:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	7d1b      	ldrb	r3, [r3, #20]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d111      	bne.n	8001454 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3318      	adds	r3, #24
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	3304      	adds	r3, #4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	6811      	ldr	r1, [r2, #0]
 8001444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3318      	adds	r3, #24
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	440b      	add	r3, r1
 8001450:	3304      	adds	r3, #4
 8001452:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3307      	adds	r3, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	061a      	lsls	r2, r3, #24
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3306      	adds	r3, #6
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3305      	adds	r3, #5
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	4313      	orrs	r3, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	3204      	adds	r2, #4
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4610      	mov	r0, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	6811      	ldr	r1, [r2, #0]
 800147c:	ea43 0200 	orr.w	r2, r3, r0
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	440b      	add	r3, r1
 8001486:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800148a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3303      	adds	r3, #3
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	061a      	lsls	r2, r3, #24
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3302      	adds	r3, #2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	041b      	lsls	r3, r3, #16
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3301      	adds	r3, #1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4313      	orrs	r3, r2
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	4610      	mov	r0, r2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	6811      	ldr	r1, [r2, #0]
 80014b2:	ea43 0200 	orr.w	r2, r3, r0
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3318      	adds	r3, #24
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	6811      	ldr	r1, [r2, #0]
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e00e      	b.n	8001504 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e006      	b.n	8001504 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
  }
}
 8001504:	4618      	mov	r0, r3
 8001506:	3724      	adds	r7, #36	; 0x24
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d07c      	beq.n	8001650 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d023      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f97d 	bl	8001872 <HAL_CAN_TxMailbox0CompleteCallback>
 8001578:	e016      	b.n	80015a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d004      	beq.n	800158e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	e00c      	b.n	80015a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d004      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
 80015a0:	e002      	b.n	80015a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f983 	bl	80018ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d024      	beq.n	80015fc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f95d 	bl	8001886 <HAL_CAN_TxMailbox1CompleteCallback>
 80015cc:	e016      	b.n	80015fc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	e00c      	b.n	80015fc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	e002      	b.n	80015fc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f963 	bl	80018c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d024      	beq.n	8001650 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f93d 	bl	800189a <HAL_CAN_TxMailbox2CompleteCallback>
 8001620:	e016      	b.n	8001650 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
 8001634:	e00c      	b.n	8001650 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
 8001648:	e002      	b.n	8001650 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f943 	bl	80018d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2210      	movs	r2, #16
 8001672:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2208      	movs	r2, #8
 800168e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f934 	bl	80018fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f91b 	bl	80018ea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d007      	beq.n	80016d8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2210      	movs	r2, #16
 80016d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00b      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2208      	movs	r2, #8
 80016f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f916 	bl	8001926 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8fd 	bl	8001912 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2210      	movs	r2, #16
 8001732:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f900 	bl	800193a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2208      	movs	r2, #8
 8001754:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8f9 	bl	800194e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d075      	beq.n	8001852 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d06c      	beq.n	800184a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03d      	beq.n	800184a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d038      	beq.n	800184a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017de:	2b30      	cmp	r3, #48	; 0x30
 80017e0:	d017      	beq.n	8001812 <HAL_CAN_IRQHandler+0x302>
 80017e2:	2b30      	cmp	r3, #48	; 0x30
 80017e4:	d804      	bhi.n	80017f0 <HAL_CAN_IRQHandler+0x2e0>
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d009      	beq.n	80017fe <HAL_CAN_IRQHandler+0x2ee>
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d00c      	beq.n	8001808 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017ee:	e024      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80017f0:	2b50      	cmp	r3, #80	; 0x50
 80017f2:	d018      	beq.n	8001826 <HAL_CAN_IRQHandler+0x316>
 80017f4:	2b60      	cmp	r3, #96	; 0x60
 80017f6:	d01b      	beq.n	8001830 <HAL_CAN_IRQHandler+0x320>
 80017f8:	2b40      	cmp	r3, #64	; 0x40
 80017fa:	d00f      	beq.n	800181c <HAL_CAN_IRQHandler+0x30c>
            break;
 80017fc:	e01d      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001806:	e018      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001810:	e013      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f043 0320 	orr.w	r3, r3, #32
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800181a:	e00e      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001824:	e009      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800182e:	e004      	b.n	800183a <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001838:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001848:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f87c 	bl	8001962 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	; (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	; (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	; 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff4c 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afa:	f7ff ff61 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	f7ff ffb1 	bl	8001a6c <NVIC_EncodePriority>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff80 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff54 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e177      	b.n	8001e48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	f040 8166 	bne.w	8001e42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d00b      	beq.n	8001b96 <HAL_GPIO_Init+0x5a>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8a:	2b11      	cmp	r3, #17
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0xfc>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d123      	bne.n	8001c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3208      	adds	r2, #8
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	69b9      	ldr	r1, [r7, #24]
 8001c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0203 	and.w	r2, r3, #3
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 80c0 	beq.w	8001e42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_GPIO_Init+0x320>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <HAL_GPIO_Init+0x320>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_GPIO_Init+0x320>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a60      	ldr	r2, [pc, #384]	; (8001e60 <HAL_GPIO_Init+0x324>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_GPIO_Init+0x328>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d037      	beq.n	8001d7a <HAL_GPIO_Init+0x23e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_GPIO_Init+0x32c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d031      	beq.n	8001d76 <HAL_GPIO_Init+0x23a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_GPIO_Init+0x330>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x236>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <HAL_GPIO_Init+0x334>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x232>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a53      	ldr	r2, [pc, #332]	; (8001e74 <HAL_GPIO_Init+0x338>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x22e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x33c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x22a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_GPIO_Init+0x340>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x226>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <HAL_GPIO_Init+0x344>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x222>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <HAL_GPIO_Init+0x348>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x21e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_GPIO_Init+0x34c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x21a>
 8001d52:	2309      	movs	r3, #9
 8001d54:	e012      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d56:	230a      	movs	r3, #10
 8001d58:	e010      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	e00e      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e00c      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e00a      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e008      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e004      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_Init+0x240>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	4093      	lsls	r3, r2
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d8c:	4934      	ldr	r1, [pc, #208]	; (8001e60 <HAL_GPIO_Init+0x324>)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dbe:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de8:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e3c:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <HAL_GPIO_Init+0x350>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	f67f ae84 	bls.w	8001b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e50:	bf00      	nop
 8001e52:	3724      	adds	r7, #36	; 0x24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40021400 	.word	0x40021400
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	40021c00 	.word	0x40021c00
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40022400 	.word	0x40022400
 8001e8c:	40013c00 	.word	0x40013c00

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eac:	e003      	b.n	8001eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	887b      	ldrh	r3, [r7, #2]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d104      	bne.n	8001ee6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	041a      	lsls	r2, r3, #16
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e25b      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d075      	beq.n	8002002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f16:	4ba3      	ldr	r3, [pc, #652]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d00c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4ba0      	ldr	r3, [pc, #640]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d112      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f2e:	4b9d      	ldr	r3, [pc, #628]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	4b99      	ldr	r3, [pc, #612]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d05b      	beq.n	8002000 <HAL_RCC_OscConfig+0x108>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d157      	bne.n	8002000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e236      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x74>
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a90      	ldr	r2, [pc, #576]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e01d      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a8a      	ldr	r2, [pc, #552]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb0>
 8001f90:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a83      	ldr	r2, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a80      	ldr	r2, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f888 	bl	80010c4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f884 	bl	80010c4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1fb      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0xc0>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f874 	bl	80010c4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7ff f870 	bl	80010c4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1e7      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xe8>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d063      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800200e:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00b      	beq.n	8002032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b62      	ldr	r3, [pc, #392]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002022:	2b08      	cmp	r3, #8
 8002024:	d11c      	bne.n	8002060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002026:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d116      	bne.n	8002060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_RCC_OscConfig+0x152>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e1bb      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4952      	ldr	r1, [pc, #328]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	e03a      	b.n	80020d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d020      	beq.n	80020aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002068:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <HAL_RCC_OscConfig+0x2b0>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff f829 	bl	80010c4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff f825 	bl	80010c4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e19c      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4940      	ldr	r1, [pc, #256]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <HAL_RCC_OscConfig+0x2b0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f808 	bl	80010c4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b8:	f7ff f804 	bl	80010c4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e17b      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d030      	beq.n	8002144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b30      	ldr	r3, [pc, #192]	; (80021ac <HAL_RCC_OscConfig+0x2b4>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe ffe8 	bl	80010c4 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe ffe4 	bl	80010c4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e15b      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x200>
 8002116:	e015      	b.n	8002144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x2b4>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe ffd1 	bl	80010c4 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ffcd 	bl	80010c4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e144      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a0 	beq.w	8002292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x2b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_OscConfig+0x2b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_RCC_OscConfig+0x2b8>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7fe ff93 	bl	80010c4 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e011      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ce>
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	42470000 	.word	0x42470000
 80021ac:	42470e80 	.word	0x42470e80
 80021b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe ff86 	bl	80010c4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0fd      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c6:	4b81      	ldr	r3, [pc, #516]	; (80023cc <HAL_RCC_OscConfig+0x4d4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d106      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
 80021da:	4b7d      	ldr	r3, [pc, #500]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a7c      	ldr	r2, [pc, #496]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	e01c      	b.n	8002222 <HAL_RCC_OscConfig+0x32a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x312>
 80021f0:	4b77      	ldr	r3, [pc, #476]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a76      	ldr	r2, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	4b74      	ldr	r3, [pc, #464]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a73      	ldr	r2, [pc, #460]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0x32a>
 800220a:	4b71      	ldr	r3, [pc, #452]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a70      	ldr	r2, [pc, #448]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	4b6e      	ldr	r3, [pc, #440]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	4a6d      	ldr	r2, [pc, #436]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 800221c:	f023 0304 	bic.w	r3, r3, #4
 8002220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d015      	beq.n	8002256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe ff4b 	bl	80010c4 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe ff47 	bl	80010c4 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0bc      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	4b61      	ldr	r3, [pc, #388]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ee      	beq.n	8002232 <HAL_RCC_OscConfig+0x33a>
 8002254:	e014      	b.n	8002280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe ff35 	bl	80010c4 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe ff31 	bl	80010c4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0a6      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	4b56      	ldr	r3, [pc, #344]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ee      	bne.n	800225e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b52      	ldr	r3, [pc, #328]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a51      	ldr	r2, [pc, #324]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8092 	beq.w	80023c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229c:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d05c      	beq.n	8002362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d141      	bne.n	8002334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe ff05 	bl	80010c4 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe ff01 	bl	80010c4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e078      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d0:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	019b      	lsls	r3, r3, #6
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	431a      	orrs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
 8002300:	4933      	ldr	r1, [pc, #204]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002308:	2201      	movs	r2, #1
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe feda 	bl	80010c4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe fed6 	bl	80010c4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04d      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x41c>
 8002332:	e045      	b.n	80023c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x4dc>)
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fec3 	bl	80010c4 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe febf 	bl	80010c4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e036      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x44a>
 8002360:	e02e      	b.n	80023c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e029      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	429a      	cmp	r2, r3
 8002380:	d11c      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d115      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002396:	4013      	ands	r3, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800239c:	4293      	cmp	r3, r2
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d106      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	42470060 	.word	0x42470060

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0cc      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b68      	ldr	r3, [pc, #416]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d90c      	bls.n	8002414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800244e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d044      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d119      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e067      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4934      	ldr	r1, [pc, #208]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fdfc 	bl	80010c4 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7fe fdf8 	bl	80010c4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e04f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b25      	ldr	r3, [pc, #148]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d20c      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4601      	mov	r1, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	fa21 f303 	lsr.w	r3, r1, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fca6 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	08005038 	.word	0x08005038
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_GetSysClockFreq+0x158>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d007      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x32>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d008      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x38>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 808d 	bne.w	80026ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025d2:	60bb      	str	r3, [r7, #8]
       break;
 80025d4:	e08c      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025d6:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCC_GetSysClockFreq+0x160>)
 80025d8:	60bb      	str	r3, [r7, #8]
      break;
 80025da:	e089      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_GetSysClockFreq+0x158>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025e6:	4b45      	ldr	r3, [pc, #276]	; (80026fc <HAL_RCC_GetSysClockFreq+0x158>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d023      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f2:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_GetSysClockFreq+0x158>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	f04f 0400 	mov.w	r4, #0
 80025fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	ea03 0501 	and.w	r5, r3, r1
 8002608:	ea04 0602 	and.w	r6, r4, r2
 800260c:	4a3d      	ldr	r2, [pc, #244]	; (8002704 <HAL_RCC_GetSysClockFreq+0x160>)
 800260e:	fb02 f106 	mul.w	r1, r2, r6
 8002612:	2200      	movs	r2, #0
 8002614:	fb02 f205 	mul.w	r2, r2, r5
 8002618:	440a      	add	r2, r1
 800261a:	493a      	ldr	r1, [pc, #232]	; (8002704 <HAL_RCC_GetSysClockFreq+0x160>)
 800261c:	fba5 0101 	umull	r0, r1, r5, r1
 8002620:	1853      	adds	r3, r2, r1
 8002622:	4619      	mov	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f04f 0400 	mov.w	r4, #0
 800262a:	461a      	mov	r2, r3
 800262c:	4623      	mov	r3, r4
 800262e:	f7fd fddf 	bl	80001f0 <__aeabi_uldivmod>
 8002632:	4603      	mov	r3, r0
 8002634:	460c      	mov	r4, r1
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e049      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_GetSysClockFreq+0x158>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	f04f 0400 	mov.w	r4, #0
 8002644:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	ea03 0501 	and.w	r5, r3, r1
 8002650:	ea04 0602 	and.w	r6, r4, r2
 8002654:	4629      	mov	r1, r5
 8002656:	4632      	mov	r2, r6
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f04f 0400 	mov.w	r4, #0
 8002660:	0154      	lsls	r4, r2, #5
 8002662:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002666:	014b      	lsls	r3, r1, #5
 8002668:	4619      	mov	r1, r3
 800266a:	4622      	mov	r2, r4
 800266c:	1b49      	subs	r1, r1, r5
 800266e:	eb62 0206 	sbc.w	r2, r2, r6
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	f04f 0400 	mov.w	r4, #0
 800267a:	0194      	lsls	r4, r2, #6
 800267c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002680:	018b      	lsls	r3, r1, #6
 8002682:	1a5b      	subs	r3, r3, r1
 8002684:	eb64 0402 	sbc.w	r4, r4, r2
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	00e2      	lsls	r2, r4, #3
 8002692:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002696:	00d9      	lsls	r1, r3, #3
 8002698:	460b      	mov	r3, r1
 800269a:	4614      	mov	r4, r2
 800269c:	195b      	adds	r3, r3, r5
 800269e:	eb44 0406 	adc.w	r4, r4, r6
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	02a2      	lsls	r2, r4, #10
 80026ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026b0:	0299      	lsls	r1, r3, #10
 80026b2:	460b      	mov	r3, r1
 80026b4:	4614      	mov	r4, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	4621      	mov	r1, r4
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4623      	mov	r3, r4
 80026c4:	f7fd fd94 	bl	80001f0 <__aeabi_uldivmod>
 80026c8:	4603      	mov	r3, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_GetSysClockFreq+0x158>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0c1b      	lsrs	r3, r3, #16
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	3301      	adds	r3, #1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	60bb      	str	r3, [r7, #8]
      break;
 80026e8:	e002      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026ec:	60bb      	str	r3, [r7, #8]
      break;
 80026ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f0:	68bb      	ldr	r3, [r7, #8]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	00f42400 	.word	0x00f42400
 8002704:	00b71b00 	.word	0x00b71b00

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_GetHCLKFreq+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000000 	.word	0x20000000

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002724:	f7ff fff0 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002728:	4601      	mov	r1, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	08005048 	.word	0x08005048

08002748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800274c:	f7ff ffdc 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002750:	4601      	mov	r1, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0b5b      	lsrs	r3, r3, #13
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_RCC_GetPCLK2Freq+0x24>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	08005048 	.word	0x08005048

08002770 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	220f      	movs	r2, #15
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCC_GetClockConfig+0x60>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e01d      	b.n	8002822 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f815 	bl	800282a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 fa96 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f042 0201 	orr.w	r2, r2, #1
 8002854:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d007      	beq.n	8002878 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e01d      	b.n	80028d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fe fa2d 	bl	8000d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 fa3d 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2201      	movs	r2, #1
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fc78 	bl	80031e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_TIM_PWM_Start+0x74>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_PWM_Start+0x2c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <HAL_TIM_PWM_Start+0x78>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_TIM_PWM_Start+0x30>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_TIM_PWM_Start+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d007      	beq.n	8002944 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40010400 	.word	0x40010400

08002958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d122      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0202 	mvn.w	r2, #2
 8002984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f9b4 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f9a6 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f9b7 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0204 	mvn.w	r2, #4
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f98a 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f97c 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f98d 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0208 	mvn.w	r2, #8
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2204      	movs	r2, #4
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f960 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f952 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f963 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0210 	mvn.w	r2, #16
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2208      	movs	r2, #8
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f936 	bl	8002d08 <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f928 	bl	8002cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f939 	bl	8002d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0201 	mvn.w	r2, #1
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe f886 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fc1a 	bl	800333c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d10e      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b40      	cmp	r3, #64	; 0x40
 8002b22:	d107      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8fe 	bl	8002d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0220 	mvn.w	r2, #32
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fbe4 	bl	8003328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e0b4      	b.n	8002cec <HAL_TIM_PWM_ConfigChannel+0x184>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	f200 809f 	bhi.w	8002cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002cd9 	.word	0x08002cd9
 8002ba8:	08002cd9 	.word	0x08002cd9
 8002bac:	08002cd9 	.word	0x08002cd9
 8002bb0:	08002c15 	.word	0x08002c15
 8002bb4:	08002cd9 	.word	0x08002cd9
 8002bb8:	08002cd9 	.word	0x08002cd9
 8002bbc:	08002cd9 	.word	0x08002cd9
 8002bc0:	08002c57 	.word	0x08002c57
 8002bc4:	08002cd9 	.word	0x08002cd9
 8002bc8:	08002cd9 	.word	0x08002cd9
 8002bcc:	08002cd9 	.word	0x08002cd9
 8002bd0:	08002c97 	.word	0x08002c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 f952 	bl	8002e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0208 	orr.w	r2, r2, #8
 8002bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699a      	ldr	r2, [r3, #24]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0204 	bic.w	r2, r2, #4
 8002bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6999      	ldr	r1, [r3, #24]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	619a      	str	r2, [r3, #24]
      break;
 8002c12:	e062      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f9a2 	bl	8002f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6999      	ldr	r1, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	021a      	lsls	r2, r3, #8
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]
      break;
 8002c54:	e041      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f9f7 	bl	8003050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0208 	orr.w	r2, r2, #8
 8002c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69da      	ldr	r2, [r3, #28]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0204 	bic.w	r2, r2, #4
 8002c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69d9      	ldr	r1, [r3, #28]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	61da      	str	r2, [r3, #28]
      break;
 8002c94:	e021      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fa4b 	bl	8003138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	61da      	str	r2, [r3, #28]
      break;
 8002cd6:	e000      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002cd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a40      	ldr	r2, [pc, #256]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d00f      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <TIM_Base_SetConfig+0x118>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00b      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <TIM_Base_SetConfig+0x11c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a3b      	ldr	r2, [pc, #236]	; (8002e64 <TIM_Base_SetConfig+0x120>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da4:	d027      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <TIM_Base_SetConfig+0x118>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d023      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <TIM_Base_SetConfig+0x11c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <TIM_Base_SetConfig+0x120>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d017      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <TIM_Base_SetConfig+0x128>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a27      	ldr	r2, [pc, #156]	; (8002e70 <TIM_Base_SetConfig+0x12c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00f      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <TIM_Base_SetConfig+0x130>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a25      	ldr	r2, [pc, #148]	; (8002e78 <TIM_Base_SetConfig+0x134>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <TIM_Base_SetConfig+0x138>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <TIM_Base_SetConfig+0x13c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d108      	bne.n	8002e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <TIM_Base_SetConfig+0x114>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <TIM_Base_SetConfig+0xf8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <TIM_Base_SetConfig+0x124>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40000400 	.word	0x40000400
 8002e60:	40000800 	.word	0x40000800
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40010400 	.word	0x40010400
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800
 8002e78:	40001800 	.word	0x40001800
 8002e7c:	40001c00 	.word	0x40001c00
 8002e80:	40002000 	.word	0x40002000

08002e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0201 	bic.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 0302 	bic.w	r3, r3, #2
 8002ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <TIM_OC1_SetConfig+0xd8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_OC1_SetConfig+0x64>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <TIM_OC1_SetConfig+0xdc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10c      	bne.n	8002f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f023 0308 	bic.w	r3, r3, #8
 8002eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <TIM_OC1_SetConfig+0xd8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_OC1_SetConfig+0x8e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <TIM_OC1_SetConfig+0xdc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d111      	bne.n	8002f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40010400 	.word	0x40010400

08002f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f023 0210 	bic.w	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 0320 	bic.w	r3, r3, #32
 8002fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a22      	ldr	r2, [pc, #136]	; (8003048 <TIM_OC2_SetConfig+0xe4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_OC2_SetConfig+0x68>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a21      	ldr	r2, [pc, #132]	; (800304c <TIM_OC2_SetConfig+0xe8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d10d      	bne.n	8002fe8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <TIM_OC2_SetConfig+0xe4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d003      	beq.n	8002ff8 <TIM_OC2_SetConfig+0x94>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <TIM_OC2_SetConfig+0xe8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d113      	bne.n	8003020 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40010400 	.word	0x40010400

08003050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a21      	ldr	r2, [pc, #132]	; (8003130 <TIM_OC3_SetConfig+0xe0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_OC3_SetConfig+0x66>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a20      	ldr	r2, [pc, #128]	; (8003134 <TIM_OC3_SetConfig+0xe4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10d      	bne.n	80030d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a16      	ldr	r2, [pc, #88]	; (8003130 <TIM_OC3_SetConfig+0xe0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_OC3_SetConfig+0x92>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <TIM_OC3_SetConfig+0xe4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d113      	bne.n	800310a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40010000 	.word	0x40010000
 8003134:	40010400 	.word	0x40010400

08003138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	031b      	lsls	r3, r3, #12
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <TIM_OC4_SetConfig+0xa4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_OC4_SetConfig+0x68>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <TIM_OC4_SetConfig+0xa8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d109      	bne.n	80031b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	621a      	str	r2, [r3, #32]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40010400 	.word	0x40010400

080031e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2201      	movs	r2, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1a      	ldr	r2, [r3, #32]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1a      	ldr	r2, [r3, #32]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003244:	2302      	movs	r3, #2
 8003246:	e05a      	b.n	80032fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d01d      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10c      	bne.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40001800 	.word	0x40001800

08003328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e03f      	b.n	80033e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fd62 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f829 	bl	80033ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800342e:	f023 030c 	bic.w	r3, r3, #12
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	430b      	orrs	r3, r1
 800343a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345a:	f040 818b 	bne.w	8003774 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4ac1      	ldr	r2, [pc, #772]	; (8003768 <UART_SetConfig+0x37c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d005      	beq.n	8003474 <UART_SetConfig+0x88>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4abf      	ldr	r2, [pc, #764]	; (800376c <UART_SetConfig+0x380>)
 800346e:	4293      	cmp	r3, r2
 8003470:	f040 80bd 	bne.w	80035ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7ff f968 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 8003478:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	461d      	mov	r5, r3
 800347e:	f04f 0600 	mov.w	r6, #0
 8003482:	46a8      	mov	r8, r5
 8003484:	46b1      	mov	r9, r6
 8003486:	eb18 0308 	adds.w	r3, r8, r8
 800348a:	eb49 0409 	adc.w	r4, r9, r9
 800348e:	4698      	mov	r8, r3
 8003490:	46a1      	mov	r9, r4
 8003492:	eb18 0805 	adds.w	r8, r8, r5
 8003496:	eb49 0906 	adc.w	r9, r9, r6
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034ae:	4688      	mov	r8, r1
 80034b0:	4691      	mov	r9, r2
 80034b2:	eb18 0005 	adds.w	r0, r8, r5
 80034b6:	eb49 0106 	adc.w	r1, r9, r6
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	461d      	mov	r5, r3
 80034c0:	f04f 0600 	mov.w	r6, #0
 80034c4:	196b      	adds	r3, r5, r5
 80034c6:	eb46 0406 	adc.w	r4, r6, r6
 80034ca:	461a      	mov	r2, r3
 80034cc:	4623      	mov	r3, r4
 80034ce:	f7fc fe8f 	bl	80001f0 <__aeabi_uldivmod>
 80034d2:	4603      	mov	r3, r0
 80034d4:	460c      	mov	r4, r1
 80034d6:	461a      	mov	r2, r3
 80034d8:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <UART_SetConfig+0x384>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	461d      	mov	r5, r3
 80034e8:	f04f 0600 	mov.w	r6, #0
 80034ec:	46a9      	mov	r9, r5
 80034ee:	46b2      	mov	sl, r6
 80034f0:	eb19 0309 	adds.w	r3, r9, r9
 80034f4:	eb4a 040a 	adc.w	r4, sl, sl
 80034f8:	4699      	mov	r9, r3
 80034fa:	46a2      	mov	sl, r4
 80034fc:	eb19 0905 	adds.w	r9, r9, r5
 8003500:	eb4a 0a06 	adc.w	sl, sl, r6
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003510:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003514:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003518:	4689      	mov	r9, r1
 800351a:	4692      	mov	sl, r2
 800351c:	eb19 0005 	adds.w	r0, r9, r5
 8003520:	eb4a 0106 	adc.w	r1, sl, r6
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	461d      	mov	r5, r3
 800352a:	f04f 0600 	mov.w	r6, #0
 800352e:	196b      	adds	r3, r5, r5
 8003530:	eb46 0406 	adc.w	r4, r6, r6
 8003534:	461a      	mov	r2, r3
 8003536:	4623      	mov	r3, r4
 8003538:	f7fc fe5a 	bl	80001f0 <__aeabi_uldivmod>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	461a      	mov	r2, r3
 8003542:	4b8b      	ldr	r3, [pc, #556]	; (8003770 <UART_SetConfig+0x384>)
 8003544:	fba3 1302 	umull	r1, r3, r3, r2
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	2164      	movs	r1, #100	; 0x64
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	3332      	adds	r3, #50	; 0x32
 8003556:	4a86      	ldr	r2, [pc, #536]	; (8003770 <UART_SetConfig+0x384>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003564:	4498      	add	r8, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	461d      	mov	r5, r3
 800356a:	f04f 0600 	mov.w	r6, #0
 800356e:	46a9      	mov	r9, r5
 8003570:	46b2      	mov	sl, r6
 8003572:	eb19 0309 	adds.w	r3, r9, r9
 8003576:	eb4a 040a 	adc.w	r4, sl, sl
 800357a:	4699      	mov	r9, r3
 800357c:	46a2      	mov	sl, r4
 800357e:	eb19 0905 	adds.w	r9, r9, r5
 8003582:	eb4a 0a06 	adc.w	sl, sl, r6
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003592:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003596:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800359a:	4689      	mov	r9, r1
 800359c:	4692      	mov	sl, r2
 800359e:	eb19 0005 	adds.w	r0, r9, r5
 80035a2:	eb4a 0106 	adc.w	r1, sl, r6
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	461d      	mov	r5, r3
 80035ac:	f04f 0600 	mov.w	r6, #0
 80035b0:	196b      	adds	r3, r5, r5
 80035b2:	eb46 0406 	adc.w	r4, r6, r6
 80035b6:	461a      	mov	r2, r3
 80035b8:	4623      	mov	r3, r4
 80035ba:	f7fc fe19 	bl	80001f0 <__aeabi_uldivmod>
 80035be:	4603      	mov	r3, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <UART_SetConfig+0x384>)
 80035c6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2164      	movs	r1, #100	; 0x64
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	3332      	adds	r3, #50	; 0x32
 80035d8:	4a65      	ldr	r2, [pc, #404]	; (8003770 <UART_SetConfig+0x384>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	f003 0207 	and.w	r2, r3, #7
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4442      	add	r2, r8
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e26f      	b.n	8003ace <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ee:	f7ff f897 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 80035f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	461d      	mov	r5, r3
 80035f8:	f04f 0600 	mov.w	r6, #0
 80035fc:	46a8      	mov	r8, r5
 80035fe:	46b1      	mov	r9, r6
 8003600:	eb18 0308 	adds.w	r3, r8, r8
 8003604:	eb49 0409 	adc.w	r4, r9, r9
 8003608:	4698      	mov	r8, r3
 800360a:	46a1      	mov	r9, r4
 800360c:	eb18 0805 	adds.w	r8, r8, r5
 8003610:	eb49 0906 	adc.w	r9, r9, r6
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003620:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003624:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003628:	4688      	mov	r8, r1
 800362a:	4691      	mov	r9, r2
 800362c:	eb18 0005 	adds.w	r0, r8, r5
 8003630:	eb49 0106 	adc.w	r1, r9, r6
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	461d      	mov	r5, r3
 800363a:	f04f 0600 	mov.w	r6, #0
 800363e:	196b      	adds	r3, r5, r5
 8003640:	eb46 0406 	adc.w	r4, r6, r6
 8003644:	461a      	mov	r2, r3
 8003646:	4623      	mov	r3, r4
 8003648:	f7fc fdd2 	bl	80001f0 <__aeabi_uldivmod>
 800364c:	4603      	mov	r3, r0
 800364e:	460c      	mov	r4, r1
 8003650:	461a      	mov	r2, r3
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <UART_SetConfig+0x384>)
 8003654:	fba3 2302 	umull	r2, r3, r3, r2
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	461d      	mov	r5, r3
 8003662:	f04f 0600 	mov.w	r6, #0
 8003666:	46a9      	mov	r9, r5
 8003668:	46b2      	mov	sl, r6
 800366a:	eb19 0309 	adds.w	r3, r9, r9
 800366e:	eb4a 040a 	adc.w	r4, sl, sl
 8003672:	4699      	mov	r9, r3
 8003674:	46a2      	mov	sl, r4
 8003676:	eb19 0905 	adds.w	r9, r9, r5
 800367a:	eb4a 0a06 	adc.w	sl, sl, r6
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800368a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800368e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003692:	4689      	mov	r9, r1
 8003694:	4692      	mov	sl, r2
 8003696:	eb19 0005 	adds.w	r0, r9, r5
 800369a:	eb4a 0106 	adc.w	r1, sl, r6
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	461d      	mov	r5, r3
 80036a4:	f04f 0600 	mov.w	r6, #0
 80036a8:	196b      	adds	r3, r5, r5
 80036aa:	eb46 0406 	adc.w	r4, r6, r6
 80036ae:	461a      	mov	r2, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	f7fc fd9d 	bl	80001f0 <__aeabi_uldivmod>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <UART_SetConfig+0x384>)
 80036be:	fba3 1302 	umull	r1, r3, r3, r2
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2164      	movs	r1, #100	; 0x64
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	3332      	adds	r3, #50	; 0x32
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <UART_SetConfig+0x384>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036de:	4498      	add	r8, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	461d      	mov	r5, r3
 80036e4:	f04f 0600 	mov.w	r6, #0
 80036e8:	46a9      	mov	r9, r5
 80036ea:	46b2      	mov	sl, r6
 80036ec:	eb19 0309 	adds.w	r3, r9, r9
 80036f0:	eb4a 040a 	adc.w	r4, sl, sl
 80036f4:	4699      	mov	r9, r3
 80036f6:	46a2      	mov	sl, r4
 80036f8:	eb19 0905 	adds.w	r9, r9, r5
 80036fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800370c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003710:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003714:	4689      	mov	r9, r1
 8003716:	4692      	mov	sl, r2
 8003718:	eb19 0005 	adds.w	r0, r9, r5
 800371c:	eb4a 0106 	adc.w	r1, sl, r6
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	461d      	mov	r5, r3
 8003726:	f04f 0600 	mov.w	r6, #0
 800372a:	196b      	adds	r3, r5, r5
 800372c:	eb46 0406 	adc.w	r4, r6, r6
 8003730:	461a      	mov	r2, r3
 8003732:	4623      	mov	r3, r4
 8003734:	f7fc fd5c 	bl	80001f0 <__aeabi_uldivmod>
 8003738:	4603      	mov	r3, r0
 800373a:	460c      	mov	r4, r1
 800373c:	461a      	mov	r2, r3
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <UART_SetConfig+0x384>)
 8003740:	fba3 1302 	umull	r1, r3, r3, r2
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	2164      	movs	r1, #100	; 0x64
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	3332      	adds	r3, #50	; 0x32
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <UART_SetConfig+0x384>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	f003 0207 	and.w	r2, r3, #7
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4442      	add	r2, r8
 8003764:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003766:	e1b2      	b.n	8003ace <UART_SetConfig+0x6e2>
 8003768:	40011000 	.word	0x40011000
 800376c:	40011400 	.word	0x40011400
 8003770:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4ad7      	ldr	r2, [pc, #860]	; (8003ad8 <UART_SetConfig+0x6ec>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d005      	beq.n	800378a <UART_SetConfig+0x39e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4ad6      	ldr	r2, [pc, #856]	; (8003adc <UART_SetConfig+0x6f0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f040 80d1 	bne.w	800392c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800378a:	f7fe ffdd 	bl	8002748 <HAL_RCC_GetPCLK2Freq>
 800378e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	469a      	mov	sl, r3
 8003794:	f04f 0b00 	mov.w	fp, #0
 8003798:	46d0      	mov	r8, sl
 800379a:	46d9      	mov	r9, fp
 800379c:	eb18 0308 	adds.w	r3, r8, r8
 80037a0:	eb49 0409 	adc.w	r4, r9, r9
 80037a4:	4698      	mov	r8, r3
 80037a6:	46a1      	mov	r9, r4
 80037a8:	eb18 080a 	adds.w	r8, r8, sl
 80037ac:	eb49 090b 	adc.w	r9, r9, fp
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037c4:	4688      	mov	r8, r1
 80037c6:	4691      	mov	r9, r2
 80037c8:	eb1a 0508 	adds.w	r5, sl, r8
 80037cc:	eb4b 0609 	adc.w	r6, fp, r9
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	0094      	lsls	r4, r2, #2
 80037e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037e8:	008b      	lsls	r3, r1, #2
 80037ea:	461a      	mov	r2, r3
 80037ec:	4623      	mov	r3, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	4631      	mov	r1, r6
 80037f2:	f7fc fcfd 	bl	80001f0 <__aeabi_uldivmod>
 80037f6:	4603      	mov	r3, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	461a      	mov	r2, r3
 80037fc:	4bb8      	ldr	r3, [pc, #736]	; (8003ae0 <UART_SetConfig+0x6f4>)
 80037fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	469b      	mov	fp, r3
 800380c:	f04f 0c00 	mov.w	ip, #0
 8003810:	46d9      	mov	r9, fp
 8003812:	46e2      	mov	sl, ip
 8003814:	eb19 0309 	adds.w	r3, r9, r9
 8003818:	eb4a 040a 	adc.w	r4, sl, sl
 800381c:	4699      	mov	r9, r3
 800381e:	46a2      	mov	sl, r4
 8003820:	eb19 090b 	adds.w	r9, r9, fp
 8003824:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003834:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003838:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800383c:	4689      	mov	r9, r1
 800383e:	4692      	mov	sl, r2
 8003840:	eb1b 0509 	adds.w	r5, fp, r9
 8003844:	eb4c 060a 	adc.w	r6, ip, sl
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4619      	mov	r1, r3
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	f04f 0400 	mov.w	r4, #0
 800385a:	0094      	lsls	r4, r2, #2
 800385c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003860:	008b      	lsls	r3, r1, #2
 8003862:	461a      	mov	r2, r3
 8003864:	4623      	mov	r3, r4
 8003866:	4628      	mov	r0, r5
 8003868:	4631      	mov	r1, r6
 800386a:	f7fc fcc1 	bl	80001f0 <__aeabi_uldivmod>
 800386e:	4603      	mov	r3, r0
 8003870:	460c      	mov	r4, r1
 8003872:	461a      	mov	r2, r3
 8003874:	4b9a      	ldr	r3, [pc, #616]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003876:	fba3 1302 	umull	r1, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2164      	movs	r1, #100	; 0x64
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a95      	ldr	r2, [pc, #596]	; (8003ae0 <UART_SetConfig+0x6f4>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003894:	4498      	add	r8, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	469b      	mov	fp, r3
 800389a:	f04f 0c00 	mov.w	ip, #0
 800389e:	46d9      	mov	r9, fp
 80038a0:	46e2      	mov	sl, ip
 80038a2:	eb19 0309 	adds.w	r3, r9, r9
 80038a6:	eb4a 040a 	adc.w	r4, sl, sl
 80038aa:	4699      	mov	r9, r3
 80038ac:	46a2      	mov	sl, r4
 80038ae:	eb19 090b 	adds.w	r9, r9, fp
 80038b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ca:	4689      	mov	r9, r1
 80038cc:	4692      	mov	sl, r2
 80038ce:	eb1b 0509 	adds.w	r5, fp, r9
 80038d2:	eb4c 060a 	adc.w	r6, ip, sl
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	4619      	mov	r1, r3
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f04f 0400 	mov.w	r4, #0
 80038e8:	0094      	lsls	r4, r2, #2
 80038ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038ee:	008b      	lsls	r3, r1, #2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4623      	mov	r3, r4
 80038f4:	4628      	mov	r0, r5
 80038f6:	4631      	mov	r1, r6
 80038f8:	f7fc fc7a 	bl	80001f0 <__aeabi_uldivmod>
 80038fc:	4603      	mov	r3, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	461a      	mov	r2, r3
 8003902:	4b77      	ldr	r3, [pc, #476]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003904:	fba3 1302 	umull	r1, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2164      	movs	r1, #100	; 0x64
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	3332      	adds	r3, #50	; 0x32
 8003916:	4a72      	ldr	r2, [pc, #456]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4442      	add	r2, r8
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	e0d0      	b.n	8003ace <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800392c:	f7fe fef8 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003930:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	469a      	mov	sl, r3
 8003936:	f04f 0b00 	mov.w	fp, #0
 800393a:	46d0      	mov	r8, sl
 800393c:	46d9      	mov	r9, fp
 800393e:	eb18 0308 	adds.w	r3, r8, r8
 8003942:	eb49 0409 	adc.w	r4, r9, r9
 8003946:	4698      	mov	r8, r3
 8003948:	46a1      	mov	r9, r4
 800394a:	eb18 080a 	adds.w	r8, r8, sl
 800394e:	eb49 090b 	adc.w	r9, r9, fp
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800395e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003962:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003966:	4688      	mov	r8, r1
 8003968:	4691      	mov	r9, r2
 800396a:	eb1a 0508 	adds.w	r5, sl, r8
 800396e:	eb4b 0609 	adc.w	r6, fp, r9
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4619      	mov	r1, r3
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	f04f 0400 	mov.w	r4, #0
 8003984:	0094      	lsls	r4, r2, #2
 8003986:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800398a:	008b      	lsls	r3, r1, #2
 800398c:	461a      	mov	r2, r3
 800398e:	4623      	mov	r3, r4
 8003990:	4628      	mov	r0, r5
 8003992:	4631      	mov	r1, r6
 8003994:	f7fc fc2c 	bl	80001f0 <__aeabi_uldivmod>
 8003998:	4603      	mov	r3, r0
 800399a:	460c      	mov	r4, r1
 800399c:	461a      	mov	r2, r3
 800399e:	4b50      	ldr	r3, [pc, #320]	; (8003ae0 <UART_SetConfig+0x6f4>)
 80039a0:	fba3 2302 	umull	r2, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	469b      	mov	fp, r3
 80039ae:	f04f 0c00 	mov.w	ip, #0
 80039b2:	46d9      	mov	r9, fp
 80039b4:	46e2      	mov	sl, ip
 80039b6:	eb19 0309 	adds.w	r3, r9, r9
 80039ba:	eb4a 040a 	adc.w	r4, sl, sl
 80039be:	4699      	mov	r9, r3
 80039c0:	46a2      	mov	sl, r4
 80039c2:	eb19 090b 	adds.w	r9, r9, fp
 80039c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039de:	4689      	mov	r9, r1
 80039e0:	4692      	mov	sl, r2
 80039e2:	eb1b 0509 	adds.w	r5, fp, r9
 80039e6:	eb4c 060a 	adc.w	r6, ip, sl
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4619      	mov	r1, r3
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	f04f 0400 	mov.w	r4, #0
 80039fc:	0094      	lsls	r4, r2, #2
 80039fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a02:	008b      	lsls	r3, r1, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4623      	mov	r3, r4
 8003a08:	4628      	mov	r0, r5
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	f7fc fbf0 	bl	80001f0 <__aeabi_uldivmod>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003a18:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	2164      	movs	r1, #100	; 0x64
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	3332      	adds	r3, #50	; 0x32
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a36:	4498      	add	r8, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	469b      	mov	fp, r3
 8003a3c:	f04f 0c00 	mov.w	ip, #0
 8003a40:	46d9      	mov	r9, fp
 8003a42:	46e2      	mov	sl, ip
 8003a44:	eb19 0309 	adds.w	r3, r9, r9
 8003a48:	eb4a 040a 	adc.w	r4, sl, sl
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	46a2      	mov	sl, r4
 8003a50:	eb19 090b 	adds.w	r9, r9, fp
 8003a54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a6c:	4689      	mov	r9, r1
 8003a6e:	4692      	mov	sl, r2
 8003a70:	eb1b 0509 	adds.w	r5, fp, r9
 8003a74:	eb4c 060a 	adc.w	r6, ip, sl
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f04f 0400 	mov.w	r4, #0
 8003a8a:	0094      	lsls	r4, r2, #2
 8003a8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a90:	008b      	lsls	r3, r1, #2
 8003a92:	461a      	mov	r2, r3
 8003a94:	4623      	mov	r3, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	4631      	mov	r1, r6
 8003a9a:	f7fc fba9 	bl	80001f0 <__aeabi_uldivmod>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2164      	movs	r1, #100	; 0x64
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	3332      	adds	r3, #50	; 0x32
 8003ab8:	4a09      	ldr	r2, [pc, #36]	; (8003ae0 <UART_SetConfig+0x6f4>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4442      	add	r2, r8
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	e7ff      	b.n	8003ace <UART_SetConfig+0x6e2>
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40011400 	.word	0x40011400
 8003ae0:	51eb851f 	.word	0x51eb851f

08003ae4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003af6:	2b84      	cmp	r3, #132	; 0x84
 8003af8:	d005      	beq.n	8003b06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003afa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	3303      	adds	r3, #3
 8003b04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b18:	f000 fada 	bl	80040d0 <vTaskStartScheduler>
  
  return osOK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b24:	b089      	sub	sp, #36	; 0x24
 8003b26:	af04      	add	r7, sp, #16
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <osThreadCreate+0x54>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01c      	beq.n	8003b76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685c      	ldr	r4, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681d      	ldr	r5, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691e      	ldr	r6, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ffc8 	bl	8003ae4 <makeFreeRtosPriority>
 8003b54:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b5e:	9202      	str	r2, [sp, #8]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4632      	mov	r2, r6
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f000 f8ed 	bl	8003d4a <xTaskCreateStatic>
 8003b70:	4603      	mov	r3, r0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e01c      	b.n	8003bb0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685c      	ldr	r4, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b82:	b29e      	uxth	r6, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ffaa 	bl	8003ae4 <makeFreeRtosPriority>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	9200      	str	r2, [sp, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 f92c 	bl	8003dfe <xTaskCreate>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d001      	beq.n	8003bb0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <osDelay+0x16>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	e000      	b.n	8003bd2 <osDelay+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fa48 	bl	8004068 <vTaskDelay>
  
  return osOK;
 8003bd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f103 0208 	add.w	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0208 	add.w	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f103 0208 	add.w	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	601a      	str	r2, [r3, #0]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d103      	bne.n	8003ca4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e00c      	b.n	8003cbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e002      	b.n	8003cb2 <vListInsert+0x2e>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d2f6      	bcs.n	8003cac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6892      	ldr	r2, [r2, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6852      	ldr	r2, [r2, #4]
 8003d16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d103      	bne.n	8003d2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08e      	sub	sp, #56	; 0x38
 8003d4e:	af04      	add	r7, sp, #16
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	e7fe      	b.n	8003d70 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <xTaskCreateStatic+0x42>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	e7fe      	b.n	8003d8a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d8c:	2354      	movs	r3, #84	; 0x54
 8003d8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b54      	cmp	r3, #84	; 0x54
 8003d94:	d009      	beq.n	8003daa <xTaskCreateStatic+0x60>
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e7fe      	b.n	8003da8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003daa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01e      	beq.n	8003df0 <xTaskCreateStatic+0xa6>
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9303      	str	r3, [sp, #12]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9302      	str	r3, [sp, #8]
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f850 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dea:	f000 f8d3 	bl	8003f94 <prvAddNewTaskToReadyList>
 8003dee:	e001      	b.n	8003df4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003df4:	697b      	ldr	r3, [r7, #20]
	}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3728      	adds	r7, #40	; 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b08c      	sub	sp, #48	; 0x30
 8003e02:	af04      	add	r7, sp, #16
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 feae 	bl	8004b74 <pvPortMalloc>
 8003e18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e20:	2054      	movs	r0, #84	; 0x54
 8003e22:	f000 fea7 	bl	8004b74 <pvPortMalloc>
 8003e26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
 8003e34:	e005      	b.n	8003e42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f000 ff5e 	bl	8004cf8 <vPortFree>
 8003e3c:	e001      	b.n	8003e42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d017      	beq.n	8003e78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e50:	88fa      	ldrh	r2, [r7, #6]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9303      	str	r3, [sp, #12]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	9302      	str	r3, [sp, #8]
 8003e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f80e 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6c:	69f8      	ldr	r0, [r7, #28]
 8003e6e:	f000 f891 	bl	8003f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	e002      	b.n	8003e7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e78:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
	}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <prvInitialiseNewTask+0x46>
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e7fe      	b.n	8003ecc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01f      	beq.n	8003f14 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	e012      	b.n	8003f00 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	7819      	ldrb	r1, [r3, #0]
 8003ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3334      	adds	r3, #52	; 0x34
 8003eea:	460a      	mov	r2, r1
 8003eec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b0f      	cmp	r3, #15
 8003f04:	d9e9      	bls.n	8003eda <prvInitialiseNewTask+0x52>
 8003f06:	e000      	b.n	8003f0a <prvInitialiseNewTask+0x82>
			{
				break;
 8003f08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f12:	e003      	b.n	8003f1c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d901      	bls.n	8003f26 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f22:	2306      	movs	r3, #6
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	2200      	movs	r2, #0
 8003f36:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fe70 	bl	8003c22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	3318      	adds	r3, #24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fe6b 	bl	8003c22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	f1c3 0207 	rsb	r2, r3, #7
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2200      	movs	r2, #0
 8003f66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	69b8      	ldr	r0, [r7, #24]
 8003f76:	f000 fbfd 	bl	8004774 <pxPortInitialiseStack>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8c:	bf00      	nop
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f9c:	f000 fd0e 	bl	80049bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <prvAddNewTaskToReadyList+0xb8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	4a29      	ldr	r2, [pc, #164]	; (800404c <prvAddNewTaskToReadyList+0xb8>)
 8003fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fb2:	4a27      	ldr	r2, [pc, #156]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fb8:	4b24      	ldr	r3, [pc, #144]	; (800404c <prvAddNewTaskToReadyList+0xb8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d110      	bne.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fc0:	f000 fab8 	bl	8004534 <prvInitialiseTaskLists>
 8003fc4:	e00d      	b.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fc6:	4b23      	ldr	r3, [pc, #140]	; (8004054 <prvAddNewTaskToReadyList+0xc0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d802      	bhi.n	8003fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <prvAddNewTaskToReadyList+0xc4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <prvAddNewTaskToReadyList+0xc4>)
 8003fea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <prvAddNewTaskToReadyList+0xc8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <prvAddNewTaskToReadyList+0xc8>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a15      	ldr	r2, [pc, #84]	; (8004060 <prvAddNewTaskToReadyList+0xcc>)
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7ff fe11 	bl	8003c3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800401a:	f000 fcfd 	bl	8004a18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <prvAddNewTaskToReadyList+0xc0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00e      	beq.n	8004044 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <prvAddNewTaskToReadyList+0xbc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	429a      	cmp	r2, r3
 8004032:	d207      	bcs.n	8004044 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <prvAddNewTaskToReadyList+0xd0>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	200003a0 	.word	0x200003a0
 8004050:	200002a0 	.word	0x200002a0
 8004054:	200003ac 	.word	0x200003ac
 8004058:	200003bc 	.word	0x200003bc
 800405c:	200003a8 	.word	0x200003a8
 8004060:	200002a4 	.word	0x200002a4
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800407a:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <vTaskDelay+0x60>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <vTaskDelay+0x2e>
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	e7fe      	b.n	8004094 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004096:	f000 f879 	bl	800418c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800409a:	2100      	movs	r1, #0
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fb03 	bl	80046a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040a2:	f000 f881 	bl	80041a8 <xTaskResumeAll>
 80040a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d107      	bne.n	80040be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <vTaskDelay+0x64>)
 80040b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200003c8 	.word	0x200003c8
 80040cc:	e000ed04 	.word	0xe000ed04

080040d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040de:	463a      	mov	r2, r7
 80040e0:	1d39      	adds	r1, r7, #4
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fac4 	bl	8000674 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040ec:	6839      	ldr	r1, [r7, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	9202      	str	r2, [sp, #8]
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	2300      	movs	r3, #0
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2300      	movs	r3, #0
 80040fc:	460a      	mov	r2, r1
 80040fe:	491d      	ldr	r1, [pc, #116]	; (8004174 <vTaskStartScheduler+0xa4>)
 8004100:	481d      	ldr	r0, [pc, #116]	; (8004178 <vTaskStartScheduler+0xa8>)
 8004102:	f7ff fe22 	bl	8003d4a <xTaskCreateStatic>
 8004106:	4602      	mov	r2, r0
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <vTaskStartScheduler+0xac>)
 800410a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <vTaskStartScheduler+0xac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d002      	beq.n	800411a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004114:	2301      	movs	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e001      	b.n	800411e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d115      	bne.n	8004150 <vTaskStartScheduler+0x80>
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <vTaskStartScheduler+0xb0>)
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <vTaskStartScheduler+0xb4>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <vTaskStartScheduler+0xb8>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800414a:	f000 fb99 	bl	8004880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800414e:	e00d      	b.n	800416c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d109      	bne.n	800416c <vTaskStartScheduler+0x9c>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e7fe      	b.n	800416a <vTaskStartScheduler+0x9a>
}
 800416c:	bf00      	nop
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	08005030 	.word	0x08005030
 8004178:	08004505 	.word	0x08004505
 800417c:	200003c4 	.word	0x200003c4
 8004180:	200003c0 	.word	0x200003c0
 8004184:	200003ac 	.word	0x200003ac
 8004188:	200003a4 	.word	0x200003a4

0800418c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <vTaskSuspendAll+0x18>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	4a03      	ldr	r2, [pc, #12]	; (80041a4 <vTaskSuspendAll+0x18>)
 8004198:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	200003c8 	.word	0x200003c8

080041a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <xTaskResumeAll+0x114>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <xTaskResumeAll+0x2a>
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	e7fe      	b.n	80041d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80041d2:	f000 fbf3 	bl	80049bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80041d6:	4b39      	ldr	r3, [pc, #228]	; (80042bc <xTaskResumeAll+0x114>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a37      	ldr	r2, [pc, #220]	; (80042bc <xTaskResumeAll+0x114>)
 80041de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e0:	4b36      	ldr	r3, [pc, #216]	; (80042bc <xTaskResumeAll+0x114>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d161      	bne.n	80042ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <xTaskResumeAll+0x118>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05d      	beq.n	80042ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041f0:	e02e      	b.n	8004250 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f2:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <xTaskResumeAll+0x11c>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3318      	adds	r3, #24
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fd79 	bl	8003cf6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fd74 	bl	8003cf6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	2201      	movs	r2, #1
 8004214:	409a      	lsls	r2, r3
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <xTaskResumeAll+0x120>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4313      	orrs	r3, r2
 800421c:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <xTaskResumeAll+0x120>)
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <xTaskResumeAll+0x124>)
 800422e:	441a      	add	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3304      	adds	r3, #4
 8004234:	4619      	mov	r1, r3
 8004236:	4610      	mov	r0, r2
 8004238:	f7ff fd00 	bl	8003c3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <xTaskResumeAll+0x128>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <xTaskResumeAll+0x12c>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004250:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <xTaskResumeAll+0x11c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1cc      	bne.n	80041f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800425e:	f000 fa03 	bl	8004668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <xTaskResumeAll+0x130>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800426e:	f000 f837 	bl	80042e0 <xTaskIncrementTick>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <xTaskResumeAll+0x12c>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f1      	bne.n	800426e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <xTaskResumeAll+0x130>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <xTaskResumeAll+0x12c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <xTaskResumeAll+0x134>)
 800429e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042ac:	f000 fbb4 	bl	8004a18 <vPortExitCritical>

	return xAlreadyYielded;
 80042b0:	68bb      	ldr	r3, [r7, #8]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200003c8 	.word	0x200003c8
 80042c0:	200003a0 	.word	0x200003a0
 80042c4:	20000360 	.word	0x20000360
 80042c8:	200003a8 	.word	0x200003a8
 80042cc:	200002a4 	.word	0x200002a4
 80042d0:	200002a0 	.word	0x200002a0
 80042d4:	200003b4 	.word	0x200003b4
 80042d8:	200003b0 	.word	0x200003b0
 80042dc:	e000ed04 	.word	0xe000ed04

080042e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042ea:	4b4e      	ldr	r3, [pc, #312]	; (8004424 <xTaskIncrementTick+0x144>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8087 	bne.w	8004402 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <xTaskIncrementTick+0x148>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042fc:	4a4a      	ldr	r2, [pc, #296]	; (8004428 <xTaskIncrementTick+0x148>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d11f      	bne.n	8004348 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004308:	4b48      	ldr	r3, [pc, #288]	; (800442c <xTaskIncrementTick+0x14c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <xTaskIncrementTick+0x46>
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	e7fe      	b.n	8004324 <xTaskIncrementTick+0x44>
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <xTaskIncrementTick+0x14c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	4b40      	ldr	r3, [pc, #256]	; (8004430 <xTaskIncrementTick+0x150>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3e      	ldr	r2, [pc, #248]	; (800442c <xTaskIncrementTick+0x14c>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4a3e      	ldr	r2, [pc, #248]	; (8004430 <xTaskIncrementTick+0x150>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <xTaskIncrementTick+0x154>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a3c      	ldr	r2, [pc, #240]	; (8004434 <xTaskIncrementTick+0x154>)
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	f000 f990 	bl	8004668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004348:	4b3b      	ldr	r3, [pc, #236]	; (8004438 <xTaskIncrementTick+0x158>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d348      	bcc.n	80043e4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <xTaskIncrementTick+0x14c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	4b36      	ldr	r3, [pc, #216]	; (8004438 <xTaskIncrementTick+0x158>)
 800435e:	f04f 32ff 	mov.w	r2, #4294967295
 8004362:	601a      	str	r2, [r3, #0]
					break;
 8004364:	e03e      	b.n	80043e4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b31      	ldr	r3, [pc, #196]	; (800442c <xTaskIncrementTick+0x14c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d203      	bcs.n	8004386 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800437e:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <xTaskIncrementTick+0x158>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004384:	e02e      	b.n	80043e4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3304      	adds	r3, #4
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fcb3 	bl	8003cf6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	3318      	adds	r3, #24
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fcaa 	bl	8003cf6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	2201      	movs	r2, #1
 80043a8:	409a      	lsls	r2, r3
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <xTaskIncrementTick+0x15c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	4a22      	ldr	r2, [pc, #136]	; (800443c <xTaskIncrementTick+0x15c>)
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <xTaskIncrementTick+0x160>)
 80043c2:	441a      	add	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7ff fc36 	bl	8003c3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <xTaskIncrementTick+0x164>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d3b9      	bcc.n	8004352 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e2:	e7b6      	b.n	8004352 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <xTaskIncrementTick+0x164>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	4915      	ldr	r1, [pc, #84]	; (8004440 <xTaskIncrementTick+0x160>)
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d907      	bls.n	800440c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	e004      	b.n	800440c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <xTaskIncrementTick+0x168>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	4a0f      	ldr	r2, [pc, #60]	; (8004448 <xTaskIncrementTick+0x168>)
 800440a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <xTaskIncrementTick+0x16c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004418:	697b      	ldr	r3, [r7, #20]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	200003c8 	.word	0x200003c8
 8004428:	200003a4 	.word	0x200003a4
 800442c:	20000358 	.word	0x20000358
 8004430:	2000035c 	.word	0x2000035c
 8004434:	200003b8 	.word	0x200003b8
 8004438:	200003c0 	.word	0x200003c0
 800443c:	200003a8 	.word	0x200003a8
 8004440:	200002a4 	.word	0x200002a4
 8004444:	200002a0 	.word	0x200002a0
 8004448:	200003b0 	.word	0x200003b0
 800444c:	200003b4 	.word	0x200003b4

08004450 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <vTaskSwitchContext+0xa0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <vTaskSwitchContext+0xa4>)
 8004460:	2201      	movs	r2, #1
 8004462:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004464:	e03e      	b.n	80044e4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004466:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <vTaskSwitchContext+0xa4>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446c:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <vTaskSwitchContext+0xa8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	f1c3 031f 	rsb	r3, r3, #31
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	491e      	ldr	r1, [pc, #120]	; (80044fc <vTaskSwitchContext+0xac>)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <vTaskSwitchContext+0x5a>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	e7fe      	b.n	80044a8 <vTaskSwitchContext+0x58>
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <vTaskSwitchContext+0xac>)
 80044b6:	4413      	add	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3308      	adds	r3, #8
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d104      	bne.n	80044da <vTaskSwitchContext+0x8a>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a07      	ldr	r2, [pc, #28]	; (8004500 <vTaskSwitchContext+0xb0>)
 80044e2:	6013      	str	r3, [r2, #0]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	200003c8 	.word	0x200003c8
 80044f4:	200003b4 	.word	0x200003b4
 80044f8:	200003a8 	.word	0x200003a8
 80044fc:	200002a4 	.word	0x200002a4
 8004500:	200002a0 	.word	0x200002a0

08004504 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800450c:	f000 f852 	bl	80045b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <prvIdleTask+0x28>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d9f9      	bls.n	800450c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <prvIdleTask+0x2c>)
 800451a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004528:	e7f0      	b.n	800450c <prvIdleTask+0x8>
 800452a:	bf00      	nop
 800452c:	200002a4 	.word	0x200002a4
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800453a:	2300      	movs	r3, #0
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	e00c      	b.n	800455a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <prvInitialiseTaskLists+0x60>)
 800454c:	4413      	add	r3, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fb47 	bl	8003be2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3301      	adds	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b06      	cmp	r3, #6
 800455e:	d9ef      	bls.n	8004540 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004560:	480d      	ldr	r0, [pc, #52]	; (8004598 <prvInitialiseTaskLists+0x64>)
 8004562:	f7ff fb3e 	bl	8003be2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004566:	480d      	ldr	r0, [pc, #52]	; (800459c <prvInitialiseTaskLists+0x68>)
 8004568:	f7ff fb3b 	bl	8003be2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800456c:	480c      	ldr	r0, [pc, #48]	; (80045a0 <prvInitialiseTaskLists+0x6c>)
 800456e:	f7ff fb38 	bl	8003be2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004572:	480c      	ldr	r0, [pc, #48]	; (80045a4 <prvInitialiseTaskLists+0x70>)
 8004574:	f7ff fb35 	bl	8003be2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004578:	480b      	ldr	r0, [pc, #44]	; (80045a8 <prvInitialiseTaskLists+0x74>)
 800457a:	f7ff fb32 	bl	8003be2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <prvInitialiseTaskLists+0x78>)
 8004580:	4a05      	ldr	r2, [pc, #20]	; (8004598 <prvInitialiseTaskLists+0x64>)
 8004582:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <prvInitialiseTaskLists+0x7c>)
 8004586:	4a05      	ldr	r2, [pc, #20]	; (800459c <prvInitialiseTaskLists+0x68>)
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200002a4 	.word	0x200002a4
 8004598:	20000330 	.word	0x20000330
 800459c:	20000344 	.word	0x20000344
 80045a0:	20000360 	.word	0x20000360
 80045a4:	20000374 	.word	0x20000374
 80045a8:	2000038c 	.word	0x2000038c
 80045ac:	20000358 	.word	0x20000358
 80045b0:	2000035c 	.word	0x2000035c

080045b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ba:	e019      	b.n	80045f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045bc:	f000 f9fe 	bl	80049bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <prvCheckTasksWaitingTermination+0x4c>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fb92 	bl	8003cf6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <prvCheckTasksWaitingTermination+0x50>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <prvCheckTasksWaitingTermination+0x50>)
 80045da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <prvCheckTasksWaitingTermination+0x54>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <prvCheckTasksWaitingTermination+0x54>)
 80045e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045e6:	f000 fa17 	bl	8004a18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f80e 	bl	800460c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <prvCheckTasksWaitingTermination+0x54>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e1      	bne.n	80045bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000374 	.word	0x20000374
 8004604:	200003a0 	.word	0x200003a0
 8004608:	20000388 	.word	0x20000388

0800460c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461a:	2b00      	cmp	r3, #0
 800461c:	d108      	bne.n	8004630 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb68 	bl	8004cf8 <vPortFree>
				vPortFree( pxTCB );
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fb65 	bl	8004cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800462e:	e017      	b.n	8004660 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004636:	2b01      	cmp	r3, #1
 8004638:	d103      	bne.n	8004642 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fb5c 	bl	8004cf8 <vPortFree>
	}
 8004640:	e00e      	b.n	8004660 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004648:	2b02      	cmp	r3, #2
 800464a:	d009      	beq.n	8004660 <prvDeleteTCB+0x54>
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e7fe      	b.n	800465e <prvDeleteTCB+0x52>
	}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <prvResetNextTaskUnblockTime+0x38>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <prvResetNextTaskUnblockTime+0x3c>)
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004680:	e008      	b.n	8004694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <prvResetNextTaskUnblockTime+0x38>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20000358 	.word	0x20000358
 80046a4:	200003c0 	.word	0x200003c0

080046a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046b2:	4b29      	ldr	r3, [pc, #164]	; (8004758 <prvAddCurrentTaskToDelayedList+0xb0>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b8:	4b28      	ldr	r3, [pc, #160]	; (800475c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3304      	adds	r3, #4
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fb19 	bl	8003cf6 <uxListRemove>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	2201      	movs	r2, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4013      	ands	r3, r2
 80046de:	4a20      	ldr	r2, [pc, #128]	; (8004760 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d10a      	bne.n	8004700 <prvAddCurrentTaskToDelayedList+0x58>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	481a      	ldr	r0, [pc, #104]	; (8004764 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046fa:	f7ff fa9f 	bl	8003c3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046fe:	e026      	b.n	800474e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <prvAddCurrentTaskToDelayedList+0xb4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	429a      	cmp	r2, r3
 8004716:	d209      	bcs.n	800472c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <prvAddCurrentTaskToDelayedList+0xc0>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <prvAddCurrentTaskToDelayedList+0xb4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7ff faad 	bl	8003c84 <vListInsert>
}
 800472a:	e010      	b.n	800474e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <prvAddCurrentTaskToDelayedList+0xc4>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7ff faa3 	bl	8003c84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	429a      	cmp	r2, r3
 8004746:	d202      	bcs.n	800474e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <prvAddCurrentTaskToDelayedList+0xc8>)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	200003a4 	.word	0x200003a4
 800475c:	200002a0 	.word	0x200002a0
 8004760:	200003a8 	.word	0x200003a8
 8004764:	2000038c 	.word	0x2000038c
 8004768:	2000035c 	.word	0x2000035c
 800476c:	20000358 	.word	0x20000358
 8004770:	200003c0 	.word	0x200003c0

08004774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3b04      	subs	r3, #4
 8004784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800478c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b04      	subs	r3, #4
 8004792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3b04      	subs	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047a4:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <pxPortInitialiseStack+0x64>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3b14      	subs	r3, #20
 80047ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b04      	subs	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f06f 0202 	mvn.w	r2, #2
 80047c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3b20      	subs	r3, #32
 80047c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	080047dd 	.word	0x080047dd

080047dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047e6:	4b11      	ldr	r3, [pc, #68]	; (800482c <prvTaskExitError+0x50>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d009      	beq.n	8004804 <prvTaskExitError+0x28>
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e7fe      	b.n	8004802 <prvTaskExitError+0x26>
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004816:	bf00      	nop
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0fc      	beq.n	8004818 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <pxCurrentTCBConst2>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	6808      	ldr	r0, [r1, #0]
 8004836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	f380 8809 	msr	PSP, r0
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	4770      	bx	lr
 800484c:	f3af 8000 	nop.w

08004850 <pxCurrentTCBConst2>:
 8004850:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop

08004858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <prvPortStartFirstTask+0x24>)
 800485a:	6800      	ldr	r0, [r0, #0]
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f380 8808 	msr	MSP, r0
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8814 	msr	CONTROL, r0
 800486a:	b662      	cpsie	i
 800486c:	b661      	cpsie	f
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	df00      	svc	0
 8004878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800487a:	bf00      	nop
 800487c:	e000ed08 	.word	0xe000ed08

08004880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004886:	4b44      	ldr	r3, [pc, #272]	; (8004998 <xPortStartScheduler+0x118>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a44      	ldr	r2, [pc, #272]	; (800499c <xPortStartScheduler+0x11c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d109      	bne.n	80048a4 <xPortStartScheduler+0x24>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e7fe      	b.n	80048a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048a4:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <xPortStartScheduler+0x118>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <xPortStartScheduler+0x120>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d109      	bne.n	80048c2 <xPortStartScheduler+0x42>
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e7fe      	b.n	80048c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048c2:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <xPortStartScheduler+0x124>)
 80048c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <xPortStartScheduler+0x128>)
 80048e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ea:	4b30      	ldr	r3, [pc, #192]	; (80049ac <xPortStartScheduler+0x12c>)
 80048ec:	2207      	movs	r2, #7
 80048ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048f0:	e009      	b.n	8004906 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80048f2:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <xPortStartScheduler+0x12c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <xPortStartScheduler+0x12c>)
 80048fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d0ef      	beq.n	80048f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <xPortStartScheduler+0x12c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	d009      	beq.n	8004932 <xPortStartScheduler+0xb2>
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	e7fe      	b.n	8004930 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <xPortStartScheduler+0x12c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <xPortStartScheduler+0x12c>)
 800493a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <xPortStartScheduler+0x12c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <xPortStartScheduler+0x12c>)
 8004946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <xPortStartScheduler+0x130>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <xPortStartScheduler+0x130>)
 8004956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800495a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <xPortStartScheduler+0x130>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <xPortStartScheduler+0x130>)
 8004962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004968:	f000 f8d6 	bl	8004b18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <xPortStartScheduler+0x134>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004972:	f000 f8f5 	bl	8004b60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <xPortStartScheduler+0x138>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <xPortStartScheduler+0x138>)
 800497c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004980:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004982:	f7ff ff69 	bl	8004858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004986:	f7ff fd63 	bl	8004450 <vTaskSwitchContext>
	prvTaskExitError();
 800498a:	f7ff ff27 	bl	80047dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	410fc271 	.word	0x410fc271
 80049a0:	410fc270 	.word	0x410fc270
 80049a4:	e000e400 	.word	0xe000e400
 80049a8:	200003cc 	.word	0x200003cc
 80049ac:	200003d0 	.word	0x200003d0
 80049b0:	e000ed20 	.word	0xe000ed20
 80049b4:	2000000c 	.word	0x2000000c
 80049b8:	e000ef34 	.word	0xe000ef34

080049bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <vPortEnterCritical+0x54>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <vPortEnterCritical+0x54>)
 80049dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <vPortEnterCritical+0x54>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <vPortEnterCritical+0x58>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <vPortEnterCritical+0x48>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	e7fe      	b.n	8004a02 <vPortEnterCritical+0x46>
	}
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <vPortExitCritical+0x22>
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	e7fe      	b.n	8004a38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <vPortExitCritical+0x3e>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
	...

08004a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a70:	f3ef 8009 	mrs	r0, PSP
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <pxCurrentTCBConst>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f01e 0f10 	tst.w	lr, #16
 8004a80:	bf08      	it	eq
 8004a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a94:	f380 8811 	msr	BASEPRI, r0
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f7ff fcd6 	bl	8004450 <vTaskSwitchContext>
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f380 8811 	msr	BASEPRI, r0
 8004aac:	bc09      	pop	{r0, r3}
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	f01e 0f10 	tst.w	lr, #16
 8004aba:	bf08      	it	eq
 8004abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ac0:	f380 8809 	msr	PSP, r0
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst>:
 8004ad0:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004af0:	f7ff fbf6 	bl	80042e0 <xTaskIncrementTick>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <SysTick_Handler+0x3c>)
 8004afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	2300      	movs	r3, #0
 8004b04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <vPortSetupTimerInterrupt+0x34>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortSetupTimerInterrupt+0x38>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <vPortSetupTimerInterrupt+0x3c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <vPortSetupTimerInterrupt+0x40>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <vPortSetupTimerInterrupt+0x44>)
 8004b36:	3b01      	subs	r3, #1
 8004b38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b3a:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <vPortSetupTimerInterrupt+0x34>)
 8004b3c:	2207      	movs	r2, #7
 8004b3e:	601a      	str	r2, [r3, #0]
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e010 	.word	0xe000e010
 8004b50:	e000e018 	.word	0xe000e018
 8004b54:	20000000 	.word	0x20000000
 8004b58:	10624dd3 	.word	0x10624dd3
 8004b5c:	e000e014 	.word	0xe000e014

08004b60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b70 <vPortEnableVFP+0x10>
 8004b64:	6801      	ldr	r1, [r0, #0]
 8004b66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b6a:	6001      	str	r1, [r0, #0]
 8004b6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b6e:	bf00      	nop
 8004b70:	e000ed88 	.word	0xe000ed88

08004b74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b80:	f7ff fb04 	bl	800418c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b84:	4b57      	ldr	r3, [pc, #348]	; (8004ce4 <pvPortMalloc+0x170>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b8c:	f000 f90c 	bl	8004da8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b90:	4b55      	ldr	r3, [pc, #340]	; (8004ce8 <pvPortMalloc+0x174>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f040 808c 	bne.w	8004cb6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01c      	beq.n	8004bde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d013      	beq.n	8004bde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <pvPortMalloc+0x6a>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e7fe      	b.n	8004bdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d068      	beq.n	8004cb6 <pvPortMalloc+0x142>
 8004be4:	4b41      	ldr	r3, [pc, #260]	; (8004cec <pvPortMalloc+0x178>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d863      	bhi.n	8004cb6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004bee:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <pvPortMalloc+0x17c>)
 8004bf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <pvPortMalloc+0x17c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bf8:	e004      	b.n	8004c04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d903      	bls.n	8004c16 <pvPortMalloc+0xa2>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f1      	bne.n	8004bfa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c16:	4b33      	ldr	r3, [pc, #204]	; (8004ce4 <pvPortMalloc+0x170>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d04a      	beq.n	8004cb6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	4413      	add	r3, r2
 8004c28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	1ad2      	subs	r2, r2, r3
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d91e      	bls.n	8004c80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4413      	add	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <pvPortMalloc+0xf4>
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e7fe      	b.n	8004c66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c7a:	69b8      	ldr	r0, [r7, #24]
 8004c7c:	f000 f8f6 	bl	8004e6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <pvPortMalloc+0x178>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <pvPortMalloc+0x178>)
 8004c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <pvPortMalloc+0x178>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <pvPortMalloc+0x180>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d203      	bcs.n	8004ca2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <pvPortMalloc+0x178>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <pvPortMalloc+0x180>)
 8004ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <pvPortMalloc+0x174>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cb6:	f7ff fa77 	bl	80041a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <pvPortMalloc+0x164>
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e7fe      	b.n	8004cd6 <pvPortMalloc+0x162>
	return pvReturn;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3728      	adds	r7, #40	; 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20003fdc 	.word	0x20003fdc
 8004ce8:	20003fe8 	.word	0x20003fe8
 8004cec:	20003fe0 	.word	0x20003fe0
 8004cf0:	20003fd4 	.word	0x20003fd4
 8004cf4:	20003fe4 	.word	0x20003fe4

08004cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d046      	beq.n	8004d98 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4413      	add	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <vPortFree+0xa8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <vPortFree+0x42>
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e7fe      	b.n	8004d38 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <vPortFree+0x5e>
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	e7fe      	b.n	8004d54 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <vPortFree+0xa8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d019      	beq.n	8004d98 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d115      	bne.n	8004d98 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <vPortFree+0xa8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d7c:	f7ff fa06 	bl	800418c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <vPortFree+0xac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4413      	add	r3, r2
 8004d8a:	4a06      	ldr	r2, [pc, #24]	; (8004da4 <vPortFree+0xac>)
 8004d8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d8e:	6938      	ldr	r0, [r7, #16]
 8004d90:	f000 f86c 	bl	8004e6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d94:	f7ff fa08 	bl	80041a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d98:	bf00      	nop
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20003fe8 	.word	0x20003fe8
 8004da4:	20003fe0 	.word	0x20003fe0

08004da8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004db2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <prvHeapInit+0xac>)
 8004db6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00c      	beq.n	8004ddc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3307      	adds	r3, #7
 8004dc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <prvHeapInit+0xac>)
 8004dd8:	4413      	add	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <prvHeapInit+0xb0>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004de6:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <prvHeapInit+0xb0>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004df4:	2208      	movs	r2, #8
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0307 	bic.w	r3, r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <prvHeapInit+0xb4>)
 8004e08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <prvHeapInit+0xb4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <prvHeapInit+0xb4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	1ad2      	subs	r2, r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e28:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <prvHeapInit+0xb4>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <prvHeapInit+0xb8>)
 8004e36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <prvHeapInit+0xbc>)
 8004e3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <prvHeapInit+0xc0>)
 8004e42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	200003d4 	.word	0x200003d4
 8004e58:	20003fd4 	.word	0x20003fd4
 8004e5c:	20003fdc 	.word	0x20003fdc
 8004e60:	20003fe4 	.word	0x20003fe4
 8004e64:	20003fe0 	.word	0x20003fe0
 8004e68:	20003fe8 	.word	0x20003fe8

08004e6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e74:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <prvInsertBlockIntoFreeList+0xac>)
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e002      	b.n	8004e80 <prvInsertBlockIntoFreeList+0x14>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d8f7      	bhi.n	8004e7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4413      	add	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d108      	bne.n	8004eae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	441a      	add	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d118      	bne.n	8004ef4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <prvInsertBlockIntoFreeList+0xb0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d00d      	beq.n	8004eea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e008      	b.n	8004efc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <prvInsertBlockIntoFreeList+0xb0>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e003      	b.n	8004efc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d002      	beq.n	8004f0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20003fd4 	.word	0x20003fd4
 8004f1c:	20003fdc 	.word	0x20003fdc

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4e0d      	ldr	r6, [pc, #52]	; (8004f58 <__libc_init_array+0x38>)
 8004f24:	4c0d      	ldr	r4, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f26:	1ba4      	subs	r4, r4, r6
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	42a5      	cmp	r5, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	4e0b      	ldr	r6, [pc, #44]	; (8004f60 <__libc_init_array+0x40>)
 8004f32:	4c0c      	ldr	r4, [pc, #48]	; (8004f64 <__libc_init_array+0x44>)
 8004f34:	f000 f820 	bl	8004f78 <_init>
 8004f38:	1ba4      	subs	r4, r4, r6
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	42a5      	cmp	r5, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f48:	4798      	blx	r3
 8004f4a:	3501      	adds	r5, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f52:	4798      	blx	r3
 8004f54:	3501      	adds	r5, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	08005058 	.word	0x08005058
 8004f5c:	08005058 	.word	0x08005058
 8004f60:	08005058 	.word	0x08005058
 8004f64:	0800505c 	.word	0x0800505c

08004f68 <memset>:
 8004f68:	4402      	add	r2, r0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <memset+0xa>
 8004f70:	4770      	bx	lr
 8004f72:	f803 1b01 	strb.w	r1, [r3], #1
 8004f76:	e7f9      	b.n	8004f6c <memset+0x4>

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr

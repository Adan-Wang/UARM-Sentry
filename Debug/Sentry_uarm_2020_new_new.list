
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009018  08009018  00019018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009280  08009280  00019280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009288  08009288  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009290  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000078  08009308  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043a0  08009308  000243a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f350  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004333  00000000  00000000  0003f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  00043730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001300  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000290cd  00000000  00000000  00045f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138c1  00000000  00000000  0006eff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e39df  00000000  00000000  000828b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  00166295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f98  00000000  00000000  00166364  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008ffc 	.word	0x08008ffc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08008ffc 	.word	0x08008ffc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(200);
 8000ed0:	20c8      	movs	r0, #200	; 0xc8
 8000ed2:	f000 fc77 	bl	80017c4 <buzzer_play_mario>


  int32_t direction = CLOCKWISE; // direction of motor
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  double vel = 1000; //Velocity of motor
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	4c06      	ldr	r4, [pc, #24]	; (8000ef8 <Chassis_Task_Func+0x30>)
 8000ee0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  uint32_t cycles_s=5; //Time period is 1 seconds per cycle, 5=5 cycles=5s, the timer is controlled by TIM13
 8000ee4:	2305      	movs	r3, #5
 8000ee6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	 // Forever loop
	  motor_move_period(cycles_s, vel, direction);
 8000ee8:	69f9      	ldr	r1, [r7, #28]
 8000eea:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 f804 	bl	8000efc <motor_move_period>
 8000ef4:	e7f8      	b.n	8000ee8 <Chassis_Task_Func+0x20>
 8000ef6:	bf00      	nop
 8000ef8:	408f4000 	.word	0x408f4000

08000efc <motor_move_period>:
 * 		initial_direction: initial direction for motors
 *
 * @ Return: Null
 * @ Author: Haoran, Adan
 */
void motor_move_period(uint32_t cycles, double vel, int32_t initial_direction){
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	ed87 0b00 	vstr	d0, [r7]
 8000f08:	60b9      	str	r1, [r7, #8]
	int32_t direction;

	//If first loop
	if (first_loop){
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <motor_move_period+0xac>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <motor_move_period+0x1a>
		direction = initial_direction;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	617b      	str	r3, [r7, #20]
	else{

	}
	//TIMEBASE = (APBxTIMCLK / (Prescaler + 1)) / (Period + 1) (Hertz)
	//currently set 1 Hz, if want 0.1s, set Prescaler of TIM13 to 839 (10 Hz)
	if(direction == CLOCKWISE){
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d115      	bne.n	8000f48 <motor_move_period+0x4c>
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <motor_move_period+0xb0>)
 8000f24:	f002 ff08 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <motor_move_period+0xb0>)
 8000f2e:	f002 ff03 	bl	8003d38 <HAL_GPIO_WritePin>
		// Clockwise Direction
		// give time counter here
		if (period_counter >= cycles) {
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <motor_move_period+0xb4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d805      	bhi.n	8000f48 <motor_move_period+0x4c>
			period_counter = 0;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <motor_move_period+0xb4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
			direction = COUNTER_CLOCKWISE;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	617b      	str	r3, [r7, #20]
		}
	}
	if(direction == COUNTER_CLOCKWISE){
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4e:	d109      	bne.n	8000f64 <motor_move_period+0x68>
		// Counter Clockwise Direction
		if (period_counter >= cycles){
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <motor_move_period+0xb4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d804      	bhi.n	8000f64 <motor_move_period+0x68>
			period_counter = 0;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <motor_move_period+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
			direction = CLOCKWISE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
		}
	}
	//Calculate velocity via direction * speed
	vel = direction*vel;
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff faed 	bl	8000544 <__aeabi_i2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f72:	f7ff fb51 	bl	8000618 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]

	//Send velocity to motor
	//and function should be written to control the RPM rather than just setting raw value
	Motor_set_raw_value(&motor_data[0], vel);
 8000f7e:	ed97 0b00 	vldr	d0, [r7]
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <motor_move_period+0xb8>)
 8000f84:	f000 fb5b 	bl	800163e <Motor_set_raw_value>
	Motor_set_raw_value(&motor_data[1], -vel);
 8000f88:	683c      	ldr	r4, [r7, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f90:	ec45 4b10 	vmov	d0, r4, r5
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <motor_move_period+0xbc>)
 8000f96:	f000 fb52 	bl	800163e <Motor_set_raw_value>
	osDelay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f004 fef7 	bl	8005d8e <osDelay>
}
 8000fa0:	bf00      	nop
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa8:	2000418c 	.word	0x2000418c
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	200002e8 	.word	0x200002e8
 8000fb4:	20004084 	.word	0x20004084
 8000fb8:	200040a0 	.word	0x200040a0
 8000fbc:	00000000 	.word	0x00000000

08000fc0 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	61f8      	str	r0, [r7, #28]

  /* USER CODE BEGIN Gimbal_Task_Function */
  char *pdata; // data packet from computer
  double vmax=30000;
 8000fc8:	a42d      	add	r4, pc, #180	; (adr r4, 8001080 <Gimbal_Task_Function+0xc0>)
 8000fca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000fce:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  double max_angle=4096;
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	4c24      	ldr	r4, [pc, #144]	; (8001068 <Gimbal_Task_Function+0xa8>)
 8000fd8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  pdata = malloc(PACKLEN+1);
 8000fdc:	2011      	movs	r0, #17
 8000fde:	f006 f8b9 	bl	8007154 <malloc>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4820      	ldr	r0, [pc, #128]	; (800106c <Gimbal_Task_Function+0xac>)
 8000fea:	f002 f9ca 	bl	8003382 <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <Gimbal_Task_Function+0xb0>)
 8000ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ff4:	801a      	strh	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
	  }

	  //HAL_GPIO_WritePin(GPIOG, LD_B_Pin, GPIO_PIN_RESET);
	  Motor_set_raw_value(&motor_data[0], comm_pack.yaw_data);*/
	  if (HAL_UART_Receive(&husart6, (char*)pdata, (PACKLEN+1), HAL_MAX_DELAY) == HAL_OK){
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	2211      	movs	r2, #17
 8000ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ffe:	481d      	ldr	r0, [pc, #116]	; (8001074 <Gimbal_Task_Function+0xb4>)
 8001000:	f004 f9ee 	bl	80053e0 <HAL_UART_Receive>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d118      	bne.n	800103c <Gimbal_Task_Function+0x7c>
		  HAL_GPIO_TogglePin(GPIOG, LD_H_Pin);
 800100a:	2102      	movs	r1, #2
 800100c:	481a      	ldr	r0, [pc, #104]	; (8001078 <Gimbal_Task_Function+0xb8>)
 800100e:	f002 feac 	bl	8003d6a <HAL_GPIO_TogglePin>
		  comm_pack=parse_all(pdata);
 8001012:	4c1a      	ldr	r4, [pc, #104]	; (800107c <Gimbal_Task_Function+0xbc>)
 8001014:	463b      	mov	r3, r7
 8001016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f8b1 	bl	8001180 <parse_all>
 800101e:	4625      	mov	r5, r4
 8001020:	463c      	mov	r4, r7
 8001022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001026:	e894 0003 	ldmia.w	r4, {r0, r1}
 800102a:	e885 0003 	stmia.w	r5, {r0, r1}
		  HAL_UART_Transmit(&husart6, (char*)pdata, (PACKLEN+1),HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2211      	movs	r2, #17
 8001034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <Gimbal_Task_Function+0xb4>)
 8001038:	f004 f939 	bl	80052ae <HAL_UART_Transmit>
	  }
	  if (comm_pack.pack_cond==PACKCOR){
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <Gimbal_Task_Function+0xbc>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <Gimbal_Task_Function+0x8e>
		  buzzer_play_c1(500);
 8001044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001048:	f000 fb44 	bl	80016d4 <buzzer_play_c1>
 800104c:	e006      	b.n	800105c <Gimbal_Task_Function+0x9c>
	  }
	  else if (comm_pack.pack_cond==PACKERR){
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <Gimbal_Task_Function+0xbc>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <Gimbal_Task_Function+0x9c>
		  buzzer_play_mario(120);
 8001056:	2078      	movs	r0, #120	; 0x78
 8001058:	f000 fbb4 	bl	80017c4 <buzzer_play_mario>
	  }

	  osDelay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f004 fe96 	bl	8005d8e <osDelay>
	  if (HAL_UART_Receive(&husart6, (char*)pdata, (PACKLEN+1), HAL_MAX_DELAY) == HAL_OK){
 8001062:	e7c8      	b.n	8000ff6 <Gimbal_Task_Function+0x36>
 8001064:	f3af 8000 	nop.w
 8001068:	40b00000 	.word	0x40b00000
 800106c:	20004190 	.word	0x20004190
 8001070:	2000423a 	.word	0x2000423a
 8001074:	20004318 	.word	0x20004318
 8001078:	40021800 	.word	0x40021800
 800107c:	2000423c 	.word	0x2000423c
 8001080:	00000000 	.word	0x00000000
 8001084:	40dd4c00 	.word	0x40dd4c00

08001088 <parse_pack_indv>:
 * 			     pos: The position of the last byte of the currently extracted data, e.g. yaw.
 * 			     lens: the length of current data, e.g. yaw.
 * @ Return:
 * @ Author: Haoran Qi, Created on: Jan, 2022
 */
int32_t parse_pack_indv(char* pack, int pos, int lens){
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	466b      	mov	r3, sp
 8001096:	461e      	mov	r6, r3

    char pdata[(strlen(pack)+1)]; //pack content size + '\0'
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff f8a9 	bl	80001f0 <strlen>
 800109e:	4603      	mov	r3, r0
 80010a0:	1c58      	adds	r0, r3, #1
 80010a2:	4603      	mov	r3, r0
 80010a4:	3b01      	subs	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	4601      	mov	r1, r0
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	f04f 0400 	mov.w	r4, #0
 80010b6:	00d4      	lsls	r4, r2, #3
 80010b8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010bc:	00cb      	lsls	r3, r1, #3
 80010be:	4601      	mov	r1, r0
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	f04f 0400 	mov.w	r4, #0
 80010cc:	00d4      	lsls	r4, r2, #3
 80010ce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010d2:	00cb      	lsls	r3, r1, #3
 80010d4:	1dc3      	adds	r3, r0, #7
 80010d6:	08db      	lsrs	r3, r3, #3
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	ebad 0d03 	sub.w	sp, sp, r3
 80010de:	466b      	mov	r3, sp
 80010e0:	3300      	adds	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
    int32_t data = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
    strcpy(pdata, pack);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f006 f911 	bl	8007314 <strcpy>

    if (pdata[0] == 0x41){ //check received correct pack head frame， modify here to 0xAA in real world test
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b41      	cmp	r3, #65	; 0x41
 80010f8:	d131      	bne.n	800115e <parse_pack_indv+0xd6>
		for(int i=0; i<lens; i++){
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e029      	b.n	8001154 <parse_pack_indv+0xcc>
            data += (int32_t)((pdata[pos-i-1] - '0')*pow(10,i)); // decoding, referring to the vision code.
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	3b01      	subs	r3, #1
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	3b30      	subs	r3, #48	; 0x30
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa18 	bl	8000544 <__aeabi_i2d>
 8001114:	4604      	mov	r4, r0
 8001116:	460d      	mov	r5, r1
 8001118:	69f8      	ldr	r0, [r7, #28]
 800111a:	f7ff fa13 	bl	8000544 <__aeabi_i2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	ec43 2b11 	vmov	d1, r2, r3
 8001126:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001178 <parse_pack_indv+0xf0>
 800112a:	f006 ff0f 	bl	8007f4c <pow>
 800112e:	ec53 2b10 	vmov	r2, r3, d0
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fa6f 	bl	8000618 <__aeabi_dmul>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	f7ff fd19 	bl	8000b78 <__aeabi_d2iz>
 8001146:	4602      	mov	r2, r0
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	4413      	add	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<lens; i++){
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dbd1      	blt.n	8001100 <parse_pack_indv+0x78>
 800115c:	e002      	b.n	8001164 <parse_pack_indv+0xdc>
		}
    }
	else{
		data = -1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	61bb      	str	r3, [r7, #24]
	}
    osDelay(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f004 fe12 	bl	8005d8e <osDelay>
    return data;
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	46b5      	mov	sp, r6
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	40240000 	.word	0x40240000

08001180 <parse_all>:
    }
    return Sentry_Pack;
}

comm_rx_info parse_all(char* pack)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    comm_rx_info Sentry_Pack;
    Sentry_Pack.yaw_data = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
    Sentry_Pack.pitch_data = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
    Sentry_Pack.dist_data = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
    Sentry_Pack.fire_cmd = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    Sentry_Pack.target_num = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
    Sentry_Pack.pack_cond=0;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]

    //int position = 6;
    //unsigned char data;
    //int power;

    if (strlen(pack) == PACKLEN)
 80011a2:	6838      	ldr	r0, [r7, #0]
 80011a4:	f7ff f824 	bl	80001f0 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b10      	cmp	r3, #16
 80011ac:	d166      	bne.n	800127c <parse_all+0xfc>
    {
        if (pack[0] == 0x41) //start with 'A'
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b41      	cmp	r3, #65	; 0x41
 80011b4:	d15a      	bne.n	800126c <parse_all+0xec>
        {
            for (int i = 2; i< PACKLEN-1; i++)
 80011b6:	2302      	movs	r3, #2
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	e019      	b.n	80011f0 <parse_all+0x70>
            {
                if(pack[i]>='0' && pack[i] <= '9') // make sure each number is 0~9
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b2f      	cmp	r3, #47	; 0x2f
 80011c6:	d90b      	bls.n	80011e0 <parse_all+0x60>
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b39      	cmp	r3, #57	; 0x39
 80011d2:	d805      	bhi.n	80011e0 <parse_all+0x60>
                {
                    Sentry_Pack.pack_cond = PACKCOR;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
            for (int i = 2; i< PACKLEN-1; i++)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	3301      	adds	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	e007      	b.n	80011f0 <parse_all+0x70>
                }
                else
                {
                    Sentry_Pack.pack_cond = PACKERR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
                    HAL_GPIO_WritePin(GPIOG, LD_D_Pin, RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	482f      	ldr	r0, [pc, #188]	; (80012a8 <parse_all+0x128>)
 80011ea:	f002 fda5 	bl	8003d38 <HAL_GPIO_WritePin>
                    break;
 80011ee:	e002      	b.n	80011f6 <parse_all+0x76>
            for (int i = 2; i< PACKLEN-1; i++)
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	2b0e      	cmp	r3, #14
 80011f4:	dde2      	ble.n	80011bc <parse_all+0x3c>
                }
            }
                if(pack[PACKLEN-1]=='0' || pack[PACKLEN-1] == '1') {// fire command is '0' or '1'
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	330f      	adds	r3, #15
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b30      	cmp	r3, #48	; 0x30
 80011fe:	d004      	beq.n	800120a <parse_all+0x8a>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	330f      	adds	r3, #15
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b31      	cmp	r3, #49	; 0x31
 8001208:	d102      	bne.n	8001210 <parse_all+0x90>
                    Sentry_Pack.pack_cond = PACKCOR;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	e006      	b.n	800121e <parse_all+0x9e>
                }
                else
                {
                    Sentry_Pack.pack_cond = PACKERR;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
                    HAL_GPIO_WritePin(GPIOG, LD_E_Pin, RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2110      	movs	r1, #16
 8001218:	4823      	ldr	r0, [pc, #140]	; (80012a8 <parse_all+0x128>)
 800121a:	f002 fd8d 	bl	8003d38 <HAL_GPIO_WritePin>
                }
                //only when the format is correct, parse the packet
            if(Sentry_Pack.pack_cond == PACKCOR)
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d132      	bne.n	800128a <parse_all+0x10a>
            {
                Sentry_Pack.yaw_data=parse_pack_indv(pack,YAW_POS, DATALEN);
 8001224:	2204      	movs	r2, #4
 8001226:	2106      	movs	r1, #6
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f7ff ff2d 	bl	8001088 <parse_pack_indv>
 800122e:	4603      	mov	r3, r0
 8001230:	60fb      	str	r3, [r7, #12]
                Sentry_Pack.pitch_data=parse_pack_indv(pack,PITCH_POS,DATALEN);
 8001232:	2204      	movs	r2, #4
 8001234:	210a      	movs	r1, #10
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f7ff ff26 	bl	8001088 <parse_pack_indv>
 800123c:	4603      	mov	r3, r0
 800123e:	613b      	str	r3, [r7, #16]
                Sentry_Pack.dist_data=parse_pack_indv(pack,DIST_POS,DATALEN);
 8001240:	2204      	movs	r2, #4
 8001242:	210e      	movs	r1, #14
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f7ff ff1f 	bl	8001088 <parse_pack_indv>
 800124a:	4603      	mov	r3, r0
 800124c:	617b      	str	r3, [r7, #20]
                Sentry_Pack.target_num=parse_pack_indv(pack,TARGET_POS,STATELEN);
 800124e:	2201      	movs	r2, #1
 8001250:	210f      	movs	r1, #15
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f7ff ff18 	bl	8001088 <parse_pack_indv>
 8001258:	4603      	mov	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
                Sentry_Pack.fire_cmd=parse_pack_indv(pack,FCMD_POS,STATELEN);
 800125c:	2201      	movs	r2, #1
 800125e:	2110      	movs	r1, #16
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f7ff ff11 	bl	8001088 <parse_pack_indv>
 8001266:	4603      	mov	r3, r0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e00e      	b.n	800128a <parse_all+0x10a>
            }
        }
        else
        {
            Sentry_Pack.pack_cond = PACKERR;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
            HAL_GPIO_WritePin(GPIOG, LD_F_Pin, RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2108      	movs	r1, #8
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <parse_all+0x128>)
 8001276:	f002 fd5f 	bl	8003d38 <HAL_GPIO_WritePin>
 800127a:	e006      	b.n	800128a <parse_all+0x10a>
        }
    }
    else
    {
        Sentry_Pack.pack_cond = PACKERR;
 800127c:	2301      	movs	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
        HAL_GPIO_WritePin(GPIOG, LD_G_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2104      	movs	r1, #4
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <parse_all+0x128>)
 8001286:	f002 fd57 	bl	8003d38 <HAL_GPIO_WritePin>
    }
    return Sentry_Pack;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	461d      	mov	r5, r3
 800128e:	f107 040c 	add.w	r4, r7, #12
 8001292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001296:	e894 0003 	ldmia.w	r4, {r0, r1}
 800129a:	e885 0003 	stmia.w	r5, {r0, r1}
    
}
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021800 	.word	0x40021800

080012ac <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 80012b4:	f000 f818 	bl	80012e8 <shoot_init>
  double fric_wheel_speed_percent=50;
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	4c08      	ldr	r4, [pc, #32]	; (80012e0 <Shoot_Task_Func+0x34>)
 80012be:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	4c07      	ldr	r4, [pc, #28]	; (80012e4 <Shoot_Task_Func+0x38>)
 80012c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 80012cc:	ed97 1b04 	vldr	d1, [r7, #16]
 80012d0:	ed97 0b02 	vldr	d0, [r7, #8]
 80012d4:	f000 f834 	bl	8001340 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f004 fd58 	bl	8005d8e <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 80012de:	e7f5      	b.n	80012cc <Shoot_Task_Func+0x20>
 80012e0:	40490000 	.word	0x40490000
 80012e4:	40240000 	.word	0x40240000

080012e8 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4812      	ldr	r0, [pc, #72]	; (8001338 <shoot_init+0x50>)
 80012f0:	f003 fa56 	bl	80047a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80012f4:	2108      	movs	r1, #8
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <shoot_init+0x50>)
 80012f8:	f003 fa52 	bl	80047a0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <shoot_init+0x50>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f640 0298 	movw	r2, #2200	; 0x898
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <shoot_init+0x50>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f640 0298 	movw	r2, #2200	; 0x898
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8001310:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001314:	f004 fd3b 	bl	8005d8e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <shoot_init+0x50>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <shoot_init+0x50>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 800132c:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8001330:	f004 fd2d 	bl	8005d8e <osDelay>

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20004044 	.word	0x20004044
 800133c:	00000000 	.word	0x00000000

08001340 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0b02 	vstr	d0, [r7, #8]
 800134a:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <cmd_execute_shoot+0x50>)
 8001354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001358:	f7ff fa88 	bl	800086c <__aeabi_ddiv>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	a308      	add	r3, pc, #32	; (adr r3, 8001388 <cmd_execute_shoot+0x48>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff f955 	bl	8000618 <__aeabi_dmul>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 8001376:	ed97 0b04 	vldr	d0, [r7, #16]
 800137a:	4806      	ldr	r0, [pc, #24]	; (8001394 <cmd_execute_shoot+0x54>)
 800137c:	f000 f95f 	bl	800163e <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8001380:	bf00      	nop
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	00000000 	.word	0x00000000
 800138c:	40c38800 	.word	0x40c38800
 8001390:	40590000 	.word	0x40590000
 8001394:	200040d8 	.word	0x200040d8

08001398 <Timer_Task_Func>:
 */

#include "Timer_App.h"


void Timer_Task_Func(void const * argument){
 8001398:	b580      	push	{r7, lr}
 800139a:	b090      	sub	sp, #64	; 0x40
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

	uint32_t tick;

	for (;;){

		Motor_Data_Read();
 80013a0:	f000 f816 	bl	80013d0 <Motor_Data_Read>
		Motor_Data_Sent();
 80013a4:	f000 f87a 	bl	800149c <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <Timer_Task_Func+0x30>)
 80013b0:	f000 f8f8 	bl	80015a4 <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	4619      	mov	r1, r3
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <Timer_Task_Func+0x34>)
 80013bc:	f000 f8f2 	bl	80015a4 <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f004 fce4 	bl	8005d8e <osDelay>
	for (;;){
 80013c6:	e7eb      	b.n	80013a0 <Timer_Task_Func+0x8>
 80013c8:	200040f4 	.word	0x200040f4
 80013cc:	20004084 	.word	0x20004084

080013d0 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e052      	b.n	8001482 <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <Motor_Data_Read+0xc0>)
 80013de:	f000 fc17 	bl	8001c10 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <Motor_Data_Read+0xc4>)
 80013e8:	441a      	add	r2, r3
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	6810      	ldr	r0, [r2, #0]
 80013ee:	6851      	ldr	r1, [r2, #4]
 80013f0:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 80013f2:	793b      	ldrb	r3, [r7, #4]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b218      	sxth	r0, r3
 8001400:	4925      	ldr	r1, [pc, #148]	; (8001498 <Motor_Data_Read+0xc8>)
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	4602      	mov	r2, r0
 8001412:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	b21b      	sxth	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b218      	sxth	r0, r3
 8001422:	491d      	ldr	r1, [pc, #116]	; (8001498 <Motor_Data_Read+0xc8>)
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	3312      	adds	r3, #18
 8001432:	4602      	mov	r2, r0
 8001434:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 8001436:	7a3b      	ldrb	r3, [r7, #8]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21a      	sxth	r2, r3
 800143c:	7a7b      	ldrb	r3, [r7, #9]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b218      	sxth	r0, r3
 8001444:	4914      	ldr	r1, [pc, #80]	; (8001498 <Motor_Data_Read+0xc8>)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4613      	mov	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	1a9b      	subs	r3, r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	3314      	adds	r3, #20
 8001454:	4602      	mov	r2, r0
 8001456:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	b218      	sxth	r0, r3
 800145c:	490e      	ldr	r1, [pc, #56]	; (8001498 <Motor_Data_Read+0xc8>)
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3316      	adds	r3, #22
 800146c:	4602      	mov	r2, r0
 800146e:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f004 fc8c 	bl	8005d8e <osDelay>

		can_filter_disable(&hcan1);
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <Motor_Data_Read+0xc0>)
 8001478:	f000 fbec 	bl	8001c54 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3301      	adds	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b07      	cmp	r3, #7
 8001486:	dda9      	ble.n	80013dc <Motor_Data_Read+0xc>
	}
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20004190 	.word	0x20004190
 8001494:	200041b8 	.word	0x200041b8
 8001498:	20004084 	.word	0x20004084

0800149c <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 80014aa:	2308      	movs	r3, #8
 80014ac:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e06c      	b.n	800158e <Motor_Data_Sent+0xf2>
		if (i == 0) {
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12b      	bne.n	8001512 <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 80014ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014be:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 80014c0:	4b36      	ldr	r3, [pc, #216]	; (800159c <Motor_Data_Sent+0x100>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	121b      	asrs	r3, r3, #8
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <Motor_Data_Sent+0x100>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 80014d2:	4b32      	ldr	r3, [pc, #200]	; (800159c <Motor_Data_Sent+0x100>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	121b      	asrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <Motor_Data_Sent+0x100>)
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Motor_Data_Sent+0x100>)
 80014e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <Motor_Data_Sent+0x100>)
 80014f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <Motor_Data_Sent+0x100>)
 80014fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014fe:	121b      	asrs	r3, r3, #8
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <Motor_Data_Sent+0x100>)
 8001508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800150a:	b2db      	uxtb	r3, r3
 800150c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001510:	e032      	b.n	8001578 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 8001512:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001516:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <Motor_Data_Sent+0x100>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	121b      	asrs	r3, r3, #8
 8001520:	b2db      	uxtb	r3, r3
 8001522:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <Motor_Data_Sent+0x100>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	b2db      	uxtb	r3, r3
 800152c:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <Motor_Data_Sent+0x100>)
 8001530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001534:	121b      	asrs	r3, r3, #8
 8001536:	b2db      	uxtb	r3, r3
 8001538:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <Motor_Data_Sent+0x100>)
 800153c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001540:	b2db      	uxtb	r3, r3
 8001542:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <Motor_Data_Sent+0x100>)
 8001546:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800154a:	121b      	asrs	r3, r3, #8
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <Motor_Data_Sent+0x100>)
 8001554:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <Motor_Data_Sent+0x100>)
 8001560:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001564:	121b      	asrs	r3, r3, #8
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <Motor_Data_Sent+0x100>)
 800156e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	f107 021c 	add.w	r2, r7, #28
 8001580:	4639      	mov	r1, r7
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <Motor_Data_Sent+0x104>)
 8001584:	f001 fd10 	bl	8002fa8 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	3301      	adds	r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	2b01      	cmp	r3, #1
 8001592:	dd8f      	ble.n	80014b4 <Motor_Data_Sent+0x18>
	}
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20004084 	.word	0x20004084
 80015a0:	20004190 	.word	0x20004190

080015a4 <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f811 	bl	80015d8 <Motor_Data_Replacement>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f804 	bl	80015d8 <Motor_Data_Replacement>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	60da      	str	r2, [r3, #12]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 800163e:	b580      	push	{r7, lr}
 8001640:	b08c      	sub	sp, #48	; 0x30
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ffa7 	bl	80015a4 <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 8001656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800165a:	f7ff fa8d 	bl	8000b78 <__aeabi_d2iz>
 800165e:	4603      	mov	r3, r0
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffa8 	bl	80015be <set_Motor_buffer>
}
 800166e:	bf00      	nop
 8001670:	3730      	adds	r7, #48	; 0x30
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	4802      	ldr	r0, [pc, #8]	; (8001688 <buzzer_init+0x10>)
 8001680:	f003 f88e 	bl	80047a0 <HAL_TIM_PWM_Start>

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200041f8 	.word	0x200041f8

0800168c <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <buzzer_play_g0+0x44>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <buzzer_play_g0+0x44>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f242 5233 	movw	r2, #9523	; 0x2533
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <buzzer_play_g0+0x44>)
 80016a8:	f242 5233 	movw	r2, #9523	; 0x2533
 80016ac:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <buzzer_play_g0+0x44>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f004 fb68 	bl	8005d8e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <buzzer_play_g0+0x44>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200041f8 	.word	0x200041f8

080016d4 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <buzzer_play_c1+0x44>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <buzzer_play_c1+0x44>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <buzzer_play_c1+0x44>)
 80016f0:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80016f4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <buzzer_play_c1+0x44>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2264      	movs	r2, #100	; 0x64
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	f004 fb44 	bl	8005d8e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <buzzer_play_c1+0x44>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200041f8 	.word	0x200041f8

0800171c <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <buzzer_play_e1+0x44>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <buzzer_play_e1+0x44>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f241 621e 	movw	r2, #5662	; 0x161e
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <buzzer_play_e1+0x44>)
 8001738:	f241 621e 	movw	r2, #5662	; 0x161e
 800173c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <buzzer_play_e1+0x44>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2264      	movs	r2, #100	; 0x64
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fb20 	bl	8005d8e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <buzzer_play_e1+0x44>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200041f8 	.word	0x200041f8

08001764 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <buzzer_play_g1+0x44>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <buzzer_play_g1+0x44>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f241 2299 	movw	r2, #4761	; 0x1299
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <buzzer_play_g1+0x44>)
 8001780:	f241 2299 	movw	r2, #4761	; 0x1299
 8001784:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <buzzer_play_g1+0x44>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2264      	movs	r2, #100	; 0x64
 800178c:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fafc 	bl	8005d8e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <buzzer_play_g1+0x44>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200041f8 	.word	0x200041f8

080017ac <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fae9 	bl	8005d8e <osDelay>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08d      	sub	sp, #52	; 0x34
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7fe feb9 	bl	8000544 <__aeabi_i2d>
 80017d2:	4603      	mov	r3, r0
 80017d4:	460c      	mov	r4, r1
 80017d6:	461a      	mov	r2, r3
 80017d8:	4623      	mov	r3, r4
 80017da:	f04f 0000 	mov.w	r0, #0
 80017de:	49bf      	ldr	r1, [pc, #764]	; (8001adc <buzzer_play_mario+0x318>)
 80017e0:	f7ff f844 	bl	800086c <__aeabi_ddiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	4618      	mov	r0, r3
 80017ea:	4621      	mov	r1, r4
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4bbb      	ldr	r3, [pc, #748]	; (8001ae0 <buzzer_play_mario+0x31c>)
 80017f2:	f7fe ff11 	bl	8000618 <__aeabi_dmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	4618      	mov	r0, r3
 80017fc:	4621      	mov	r1, r4
 80017fe:	f7ff f9bb 	bl	8000b78 <__aeabi_d2iz>
 8001802:	4603      	mov	r3, r0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe fe9c 	bl	8000544 <__aeabi_i2d>
 800180c:	4603      	mov	r3, r0
 800180e:	460c      	mov	r4, r1
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	f04f 0000 	mov.w	r0, #0
 8001818:	49b0      	ldr	r1, [pc, #704]	; (8001adc <buzzer_play_mario+0x318>)
 800181a:	f7ff f827 	bl	800086c <__aeabi_ddiv>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4618      	mov	r0, r3
 8001824:	4621      	mov	r1, r4
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4bad      	ldr	r3, [pc, #692]	; (8001ae0 <buzzer_play_mario+0x31c>)
 800182c:	f7fe fef4 	bl	8000618 <__aeabi_dmul>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	4618      	mov	r0, r3
 8001836:	4621      	mov	r1, r4
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4ba9      	ldr	r3, [pc, #676]	; (8001ae4 <buzzer_play_mario+0x320>)
 800183e:	f7fe feeb 	bl	8000618 <__aeabi_dmul>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	4618      	mov	r0, r3
 8001848:	4621      	mov	r1, r4
 800184a:	f7ff f995 	bl	8000b78 <__aeabi_d2iz>
 800184e:	4603      	mov	r3, r0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe76 	bl	8000544 <__aeabi_i2d>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	461a      	mov	r2, r3
 800185e:	4623      	mov	r3, r4
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	499d      	ldr	r1, [pc, #628]	; (8001adc <buzzer_play_mario+0x318>)
 8001866:	f7ff f801 	bl	800086c <__aeabi_ddiv>
 800186a:	4603      	mov	r3, r0
 800186c:	460c      	mov	r4, r1
 800186e:	4618      	mov	r0, r3
 8001870:	4621      	mov	r1, r4
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b9a      	ldr	r3, [pc, #616]	; (8001ae0 <buzzer_play_mario+0x31c>)
 8001878:	f7fe fece 	bl	8000618 <__aeabi_dmul>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	4618      	mov	r0, r3
 8001882:	4621      	mov	r1, r4
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b97      	ldr	r3, [pc, #604]	; (8001ae8 <buzzer_play_mario+0x324>)
 800188a:	f7fe fec5 	bl	8000618 <__aeabi_dmul>
 800188e:	4603      	mov	r3, r0
 8001890:	460c      	mov	r4, r1
 8001892:	4618      	mov	r0, r3
 8001894:	4621      	mov	r1, r4
 8001896:	f7ff f96f 	bl	8000b78 <__aeabi_d2iz>
 800189a:	4603      	mov	r3, r0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe fe50 	bl	8000544 <__aeabi_i2d>
 80018a4:	4603      	mov	r3, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	498a      	ldr	r1, [pc, #552]	; (8001adc <buzzer_play_mario+0x318>)
 80018b2:	f7fe ffdb 	bl	800086c <__aeabi_ddiv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	4618      	mov	r0, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b87      	ldr	r3, [pc, #540]	; (8001ae0 <buzzer_play_mario+0x31c>)
 80018c4:	f7fe fea8 	bl	8000618 <__aeabi_dmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	4618      	mov	r0, r3
 80018ce:	4621      	mov	r1, r4
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b84      	ldr	r3, [pc, #528]	; (8001ae8 <buzzer_play_mario+0x324>)
 80018d6:	f7fe fe9f 	bl	8000618 <__aeabi_dmul>
 80018da:	4603      	mov	r3, r0
 80018dc:	460c      	mov	r4, r1
 80018de:	4618      	mov	r0, r3
 80018e0:	4621      	mov	r1, r4
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <buzzer_play_mario+0x320>)
 80018e8:	f7fe fe96 	bl	8000618 <__aeabi_dmul>
 80018ec:	4603      	mov	r3, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	4618      	mov	r0, r3
 80018f2:	4621      	mov	r1, r4
 80018f4:	f7ff f940 	bl	8000b78 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7fe fe21 	bl	8000544 <__aeabi_i2d>
 8001902:	4603      	mov	r3, r0
 8001904:	460c      	mov	r4, r1
 8001906:	461a      	mov	r2, r3
 8001908:	4623      	mov	r3, r4
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	4973      	ldr	r1, [pc, #460]	; (8001adc <buzzer_play_mario+0x318>)
 8001910:	f7fe ffac 	bl	800086c <__aeabi_ddiv>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b72      	ldr	r3, [pc, #456]	; (8001aec <buzzer_play_mario+0x328>)
 8001922:	f7fe fe79 	bl	8000618 <__aeabi_dmul>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <buzzer_play_mario+0x31c>)
 8001934:	f7fe fe70 	bl	8000618 <__aeabi_dmul>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4618      	mov	r0, r3
 800193e:	4621      	mov	r1, r4
 8001940:	f7ff f91a 	bl	8000b78 <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7fe fdfb 	bl	8000544 <__aeabi_i2d>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	461a      	mov	r2, r3
 8001954:	4623      	mov	r3, r4
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	4960      	ldr	r1, [pc, #384]	; (8001adc <buzzer_play_mario+0x318>)
 800195c:	f7fe ff86 	bl	800086c <__aeabi_ddiv>
 8001960:	4603      	mov	r3, r0
 8001962:	460c      	mov	r4, r1
 8001964:	4618      	mov	r0, r3
 8001966:	4621      	mov	r1, r4
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <buzzer_play_mario+0x328>)
 800196e:	f7fe fe53 	bl	8000618 <__aeabi_dmul>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	4618      	mov	r0, r3
 8001978:	4621      	mov	r1, r4
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <buzzer_play_mario+0x31c>)
 8001980:	f7fe fe4a 	bl	8000618 <__aeabi_dmul>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	4618      	mov	r0, r3
 800198a:	4621      	mov	r1, r4
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <buzzer_play_mario+0x320>)
 8001992:	f7fe fe41 	bl	8000618 <__aeabi_dmul>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	4618      	mov	r0, r3
 800199c:	4621      	mov	r1, r4
 800199e:	f7ff f8eb 	bl	8000b78 <__aeabi_d2iz>
 80019a2:	4603      	mov	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe fdcc 	bl	8000544 <__aeabi_i2d>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	461a      	mov	r2, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	4948      	ldr	r1, [pc, #288]	; (8001adc <buzzer_play_mario+0x318>)
 80019ba:	f7fe ff57 	bl	800086c <__aeabi_ddiv>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4618      	mov	r0, r3
 80019c4:	4621      	mov	r1, r4
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	f7fe fc6f 	bl	80002ac <__adddf3>
 80019ce:	4603      	mov	r3, r0
 80019d0:	460c      	mov	r4, r1
 80019d2:	4618      	mov	r0, r3
 80019d4:	4621      	mov	r1, r4
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <buzzer_play_mario+0x31c>)
 80019dc:	f7fe fe1c 	bl	8000618 <__aeabi_dmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	4618      	mov	r0, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	f7ff f8c6 	bl	8000b78 <__aeabi_d2iz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7fe fda7 	bl	8000544 <__aeabi_i2d>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	461a      	mov	r2, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <buzzer_play_mario+0x318>)
 8001a04:	f7fe ff32 	bl	800086c <__aeabi_ddiv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4621      	mov	r1, r4
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	f7fe fc4a 	bl	80002ac <__adddf3>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4621      	mov	r1, r4
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <buzzer_play_mario+0x31c>)
 8001a26:	f7fe fdf7 	bl	8000618 <__aeabi_dmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4621      	mov	r1, r4
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <buzzer_play_mario+0x320>)
 8001a38:	f7fe fdee 	bl	8000618 <__aeabi_dmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	4618      	mov	r0, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f7ff f898 	bl	8000b78 <__aeabi_d2iz>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7fe fd79 	bl	8000544 <__aeabi_i2d>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	461a      	mov	r2, r3
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <buzzer_play_mario+0x318>)
 8001a60:	f7fe ff04 	bl	800086c <__aeabi_ddiv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <buzzer_play_mario+0x32c>)
 8001a72:	f7fe fdd1 	bl	8000618 <__aeabi_dmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <buzzer_play_mario+0x31c>)
 8001a84:	f7fe fdc8 	bl	8000618 <__aeabi_dmul>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4621      	mov	r1, r4
 8001a90:	f7ff f872 	bl	8000b78 <__aeabi_d2iz>
 8001a94:	4603      	mov	r3, r0
 8001a96:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 8001a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a9a:	f7ff fe3f 	bl	800171c <buzzer_play_e1>
	buzzer_play_e1(eighth);
 8001a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aa0:	f7ff fe3c 	bl	800171c <buzzer_play_e1>
	buzzer_rest(eighth);
 8001aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aa6:	f7ff fe81 	bl	80017ac <buzzer_rest>
	buzzer_play_e1(eighth);
 8001aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aac:	f7ff fe36 	bl	800171c <buzzer_play_e1>
	buzzer_rest(eighth);
 8001ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab2:	f7ff fe7b 	bl	80017ac <buzzer_rest>
	buzzer_play_c1(eighth);
 8001ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab8:	f7ff fe0c 	bl	80016d4 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8001abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001abe:	f7ff fe2d 	bl	800171c <buzzer_play_e1>
	buzzer_play_g1(quarter);
 8001ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ac4:	f7ff fe4e 	bl	8001764 <buzzer_play_g1>
	buzzer_rest(quarter);
 8001ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001aca:	f7ff fe6f 	bl	80017ac <buzzer_rest>
	buzzer_play_g0(quarter);
 8001ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ad0:	f7ff fddc 	bl	800168c <buzzer_play_g0>


}
 8001ad4:	bf00      	nop
 8001ad6:	3734      	adds	r7, #52	; 0x34
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	404e0000 	.word	0x404e0000
 8001ae0:	408f4000 	.word	0x408f4000
 8001ae4:	3ff80000 	.word	0x3ff80000
 8001ae8:	3fe00000 	.word	0x3fe00000
 8001aec:	3fd00000 	.word	0x3fd00000
 8001af0:	40100000 	.word	0x40100000

08001af4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001af8:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001afa:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <MX_CAN1_Init+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b00:	2203      	movs	r2, #3
 8001b02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b12:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001b16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_CAN1_Init+0x64>)
 8001b46:	f001 f80f 	bl	8002b68 <HAL_CAN_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b50:	f000 fb38 	bl	80021c4 <Error_Handler>
  }

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20004190 	.word	0x20004190
 8001b5c:	40006400 	.word	0x40006400

08001b60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_CAN_MspInit+0xa4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d13b      	bne.n	8001bfa <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_CAN_MspInit+0xa8>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_CAN_MspInit+0xa8>)
 8001b8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_CAN_MspInit+0xa8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_CAN_MspInit+0xa8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_CAN_MspInit+0xa8>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_CAN_MspInit+0xa8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bca:	2309      	movs	r3, #9
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <HAL_CAN_MspInit+0xac>)
 8001bd6:	f001 ff05 	bl	80039e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	2013      	movs	r0, #19
 8001be0:	f001 fed6 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001be4:	2013      	movs	r0, #19
 8001be6:	f001 feef 	bl	80039c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	2014      	movs	r0, #20
 8001bf0:	f001 fece 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001bf4:	2014      	movs	r0, #20
 8001bf6:	f001 fee7 	bl	80039c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40006400 	.word	0x40006400
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020c00 	.word	0x40020c00

08001c10 <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08c      	sub	sp, #48	; 0x30
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c30:	2301      	movs	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8001c34:	2301      	movs	r3, #1
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001c38:	231b      	movs	r3, #27
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f001 f88a 	bl	8002d60 <HAL_CAN_ConfigFilter>
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001c7c:	231b      	movs	r3, #27
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f001 f868 	bl	8002d60 <HAL_CAN_ConfigFilter>
}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001ca8:	0d5b      	lsrs	r3, r3, #21
 8001caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cae:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8001cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f107 0208 	add.w	r2, r7, #8
 8001cc8:	2100      	movs	r1, #0
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f001 fa47 	bl	800315e <HAL_CAN_GetRxMessage>
}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200041b8 	.word	0x200041b8

08001cdc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <vApplicationGetIdleTaskMemory+0x2c>)
 8001cec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <vApplicationGetIdleTaskMemory+0x30>)
 8001cf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000094 	.word	0x20000094
 8001d0c:	200000e8 	.word	0x200000e8

08001d10 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b0a8      	sub	sp, #160	; 0xa0
 8001d14:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <MX_FREERTOS_Init+0xc0>)
 8001d18:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 ffe0 	bl	8005cf6 <osThreadCreate>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <MX_FREERTOS_Init+0xc4>)
 8001d3a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <MX_FREERTOS_Init+0xc8>)
 8001d3e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001d42:	461d      	mov	r5, r3
 8001d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8001d50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 ffcd 	bl	8005cf6 <osThreadCreate>
 8001d5c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_FREERTOS_Init+0xcc>)
 8001d62:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001d66:	461d      	mov	r5, r3
 8001d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8001d74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 ffbb 	bl	8005cf6 <osThreadCreate>
 8001d80:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_FREERTOS_Init+0xd0>)
 8001d86:	f107 0420 	add.w	r4, r7, #32
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001d98:	f107 0320 	add.w	r3, r7, #32
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 ffa9 	bl	8005cf6 <osThreadCreate>
 8001da4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_FREERTOS_Init+0xd4>)
 8001daa:	1d3c      	adds	r4, r7, #4
 8001dac:	461d      	mov	r5, r3
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001db6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 ff99 	bl	8005cf6 <osThreadCreate>
 8001dc4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001dc8:	bf00      	nop
 8001dca:	37a0      	adds	r7, #160	; 0xa0
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	08009024 	.word	0x08009024
 8001dd4:	20004254 	.word	0x20004254
 8001dd8:	0800904c 	.word	0x0800904c
 8001ddc:	08009074 	.word	0x08009074
 8001de0:	0800909c 	.word	0x0800909c
 8001de4:	080090c4 	.word	0x080090c4

08001de8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f003 ffcc 	bl	8005d8e <osDelay>
 8001df6:	e7fb      	b.n	8001df0 <StartDefaultTask+0x8>

08001df8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b67      	ldr	r3, [pc, #412]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	4b63      	ldr	r3, [pc, #396]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a62      	ldr	r2, [pc, #392]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b55      	ldr	r3, [pc, #340]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a54      	ldr	r2, [pc, #336]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a4d      	ldr	r2, [pc, #308]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a46      	ldr	r2, [pc, #280]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001ea4:	f043 0320 	orr.w	r3, r3, #32
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <MX_GPIO_Init+0x1c4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ed8:	4839      	ldr	r0, [pc, #228]	; (8001fc0 <MX_GPIO_Init+0x1c8>)
 8001eda:	f001 ff2d 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	211e      	movs	r1, #30
 8001ee2:	4837      	ldr	r0, [pc, #220]	; (8001fc0 <MX_GPIO_Init+0x1c8>)
 8001ee4:	f001 ff28 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eee:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <MX_GPIO_Init+0x1cc>)
 8001ef0:	f001 ff22 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001efa:	4833      	ldr	r0, [pc, #204]	; (8001fc8 <MX_GPIO_Init+0x1d0>)
 8001efc:	f001 ff1c 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 8001f00:	2320      	movs	r3, #32
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	482c      	ldr	r0, [pc, #176]	; (8001fc4 <MX_GPIO_Init+0x1cc>)
 8001f14:	f001 fd66 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8001f18:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001f1c:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <MX_GPIO_Init+0x1c8>)
 8001f32:	f001 fd57 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 8001f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481f      	ldr	r0, [pc, #124]	; (8001fc8 <MX_GPIO_Init+0x1d0>)
 8001f4c:	f001 fd4a 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001f50:	2304      	movs	r3, #4
 8001f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_GPIO_Init+0x1d4>)
 8001f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	481b      	ldr	r0, [pc, #108]	; (8001fd0 <MX_GPIO_Init+0x1d8>)
 8001f64:	f001 fd3e 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <MX_GPIO_Init+0x1cc>)
 8001f82:	f001 fd2f 	bl	80039e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001f86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480a      	ldr	r0, [pc, #40]	; (8001fc8 <MX_GPIO_Init+0x1d0>)
 8001fa0:	f001 fd20 	bl	80039e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2105      	movs	r1, #5
 8001fa8:	2008      	movs	r0, #8
 8001faa:	f001 fcf1 	bl	8003990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fae:	2008      	movs	r0, #8
 8001fb0:	f001 fd0a 	bl	80039c8 <HAL_NVIC_EnableIRQ>

}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40021800 	.word	0x40021800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d12b      	bne.n	800203c <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8001fe4:	4817      	ldr	r0, [pc, #92]	; (8002044 <HAL_GPIO_EXTI_Callback+0x70>)
 8001fe6:	f7ff fe13 	bl	8001c10 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_GPIO_EXTI_Callback+0x74>)
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	6810      	ldr	r0, [r2, #0]
 8001ff2:	6851      	ldr	r1, [r2, #4]
 8001ff4:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001ff6:	7a3b      	ldrb	r3, [r7, #8]
 8001ff8:	021b      	lsls	r3, r3, #8
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	7a7b      	ldrb	r3, [r7, #9]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002004:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002014:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002016:	7b3b      	ldrb	r3, [r7, #12]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	b21a      	sxth	r2, r3
 800201c:	7b7b      	ldrb	r3, [r7, #13]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002026:	9201      	str	r2, [sp, #4]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4603      	mov	r3, r0
 800202c:	460a      	mov	r2, r1
 800202e:	2101      	movs	r1, #1
 8002030:	4806      	ldr	r0, [pc, #24]	; (800204c <HAL_GPIO_EXTI_Callback+0x78>)
 8002032:	f005 f947 	bl	80072c4 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8002036:	4803      	ldr	r0, [pc, #12]	; (8002044 <HAL_GPIO_EXTI_Callback+0x70>)
 8002038:	f7ff fe0c 	bl	8001c54 <can_filter_disable>


	}
}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20004190 	.word	0x20004190
 8002048:	200041b8 	.word	0x200041b8
 800204c:	080090e0 	.word	0x080090e0

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002054:	f000 fd46 	bl	8002ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002058:	f000 f822 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800205c:	f7ff fecc 	bl	8001df8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002060:	f7ff fd48 	bl	8001af4 <MX_CAN1_Init>
  MX_TIM4_Init();
 8002064:	f000 fa42 	bl	80024ec <MX_TIM4_Init>
  MX_TIM12_Init();
 8002068:	f000 faa6 	bl	80025b8 <MX_TIM12_Init>
  MX_UART7_Init();
 800206c:	f000 fc3e 	bl	80028ec <MX_UART7_Init>
  MX_USART6_Init();
 8002070:	f000 fc66 	bl	8002940 <MX_USART6_Init>
  MX_TIM14_Init();
 8002074:	f000 fb0a 	bl	800268c <MX_TIM14_Init>
  MX_TIM13_Init();
 8002078:	f000 fae4 	bl	8002644 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 800207c:	f7ff fafc 	bl	8001678 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <main+0x48>)
 8002082:	f000 ff4d 	bl	8002f20 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <main+0x4c>)
 8002088:	f002 fb3b 	bl	8004702 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800208c:	f7ff fe40 	bl	8001d10 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002090:	f003 fe2a 	bl	8005ce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002094:	e7fe      	b.n	8002094 <main+0x44>
 8002096:	bf00      	nop
 8002098:	20004190 	.word	0x20004190
 800209c:	20004298 	.word	0x20004298

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b094      	sub	sp, #80	; 0x50
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0320 	add.w	r3, r7, #32
 80020aa:	2230      	movs	r2, #48	; 0x30
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f005 f858 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <SystemClock_Config+0xd0>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <SystemClock_Config+0xd0>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6413      	str	r3, [r2, #64]	; 0x40
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <SystemClock_Config+0xd0>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020e0:	2300      	movs	r3, #0
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <SystemClock_Config+0xd4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020ec:	4a21      	ldr	r2, [pc, #132]	; (8002174 <SystemClock_Config+0xd4>)
 80020ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <SystemClock_Config+0xd4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002100:	2301      	movs	r3, #1
 8002102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210a:	2302      	movs	r3, #2
 800210c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800210e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002114:	2306      	movs	r3, #6
 8002116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002118:	23a8      	movs	r3, #168	; 0xa8
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800211c:	2302      	movs	r3, #2
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002120:	2304      	movs	r3, #4
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fe51 	bl	8003dd0 <HAL_RCC_OscConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002134:	f000 f846 	bl	80021c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002138:	230f      	movs	r3, #15
 800213a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213c:	2302      	movs	r3, #2
 800213e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800214a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	2102      	movs	r1, #2
 8002156:	4618      	mov	r0, r3
 8002158:	f002 f8aa 	bl	80042b0 <HAL_RCC_ClockConfig>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002162:	f000 f82f 	bl	80021c4 <Error_Handler>
  }
}
 8002166:	bf00      	nop
 8002168:	3750      	adds	r7, #80	; 0x50
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d109      	bne.n	800219e <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002192:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8002194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002198:	4808      	ldr	r0, [pc, #32]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x44>)
 800219a:	f001 fde6 	bl	8003d6a <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 80021a8:	f000 fcbe 	bl	8002b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40001c00 	.word	0x40001c00
 80021b8:	200002e8 	.word	0x200002e8
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40000c00 	.word	0x40000c00

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ca:	e7fe      	b.n	80021ca <Error_Handler+0x6>

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_MspInit+0x54>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a11      	ldr	r2, [pc, #68]	; (8002220 <HAL_MspInit+0x54>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_MspInit+0x54>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_MspInit+0x54>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_MspInit+0x54>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_MspInit+0x54>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	210f      	movs	r1, #15
 800220e:	f06f 0001 	mvn.w	r0, #1
 8002212:	f001 fbbd 	bl	8003990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	2032      	movs	r0, #50	; 0x32
 800223a:	f001 fba9 	bl	8003990 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800223e:	2032      	movs	r0, #50	; 0x32
 8002240:	f001 fbc2 	bl	80039c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <HAL_InitTick+0xa4>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a1e      	ldr	r2, [pc, #120]	; (80022c8 <HAL_InitTick+0xa4>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_InitTick+0xa4>)
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002260:	f107 0210 	add.w	r2, r7, #16
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f002 f9ec 	bl	8004648 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002270:	f002 f9c2 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8002274:	4603      	mov	r3, r0
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_InitTick+0xa8>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	3b01      	subs	r3, #1
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_InitTick+0xac>)
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_InitTick+0xb0>)
 800228c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_InitTick+0xac>)
 8002290:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002294:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_InitTick+0xac>)
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_InitTick+0xac>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_InitTick+0xac>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <HAL_InitTick+0xac>)
 80022aa:	f002 f9ff 	bl	80046ac <HAL_TIM_Base_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <HAL_InitTick+0xac>)
 80022b6:	f002 fa24 	bl	8004702 <HAL_TIM_Base_Start_IT>
 80022ba:	4603      	mov	r3, r0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3730      	adds	r7, #48	; 0x30
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	431bde83 	.word	0x431bde83
 80022d0:	20004258 	.word	0x20004258
 80022d4:	40000c00 	.word	0x40000c00

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <NMI_Handler+0x4>

080022de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <MemManage_Handler+0x4>

080022ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002308:	2004      	movs	r0, #4
 800230a:	f001 fd49 	bl	8003da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <CAN1_TX_IRQHandler+0x10>)
 800231a:	f001 f858 	bl	80033ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20004190 	.word	0x20004190

08002328 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <CAN1_RX0_IRQHandler+0x10>)
 800232e:	f001 f84e 	bl	80033ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20004190 	.word	0x20004190

0800233c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002342:	f002 fa6b 	bl	800481c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20004298 	.word	0x20004298

08002350 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002356:	f002 fa61 	bl	800481c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200042d8 	.word	0x200042d8

08002364 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM5_IRQHandler+0x10>)
 800236a:	f002 fa57 	bl	800481c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20004258 	.word	0x20004258

08002378 <_read>:
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fa7b 	bl	80028c8 <__io_putchar>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	2300      	movs	r3, #0
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	2301      	movs	r3, #1
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	2300      	movs	r3, #0
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
 8002484:	f004 fe3c 	bl	8007100 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20030000 	.word	0x20030000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	200002ec 	.word	0x200002ec
 80024bc:	200043a0 	.word	0x200043a0

080024c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <SystemInit+0x28>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <SystemInit+0x28>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SystemInit+0x28>)
 80024d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024da:	609a      	str	r2, [r3, #8]
#endif
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f2:	f107 0320 	add.w	r3, r7, #32
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002510:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <MX_TIM4_Init+0xc8>)
 8002512:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002516:	2253      	movs	r2, #83	; 0x53
 8002518:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <MX_TIM4_Init+0xc4>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002522:	f242 720f 	movw	r2, #9999	; 0x270f
 8002526:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <MX_TIM4_Init+0xc4>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002534:	481e      	ldr	r0, [pc, #120]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002536:	f002 f908 	bl	800474a <HAL_TIM_PWM_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002540:	f7ff fe40 	bl	80021c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800254c:	f107 0320 	add.w	r3, r7, #32
 8002550:	4619      	mov	r1, r3
 8002552:	4817      	ldr	r0, [pc, #92]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002554:	f002 fdce 	bl	80050f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800255e:	f7ff fe31 	bl	80021c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	2360      	movs	r3, #96	; 0x60
 8002564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <MX_TIM4_Init+0xc4>)
 800257c:	f002 fa56 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002586:	f7ff fe1d 	bl	80021c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2208      	movs	r2, #8
 800258e:	4619      	mov	r1, r3
 8002590:	4807      	ldr	r0, [pc, #28]	; (80025b0 <MX_TIM4_Init+0xc4>)
 8002592:	f002 fa4b 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800259c:	f7ff fe12 	bl	80021c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <MX_TIM4_Init+0xc4>)
 80025a2:	f000 f92f 	bl	8002804 <HAL_TIM_MspPostInit>

}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20004044 	.word	0x20004044
 80025b4:	40000800 	.word	0x40000800

080025b8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
 80025cc:	615a      	str	r2, [r3, #20]
 80025ce:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_TIM12_Init+0x84>)
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <MX_TIM12_Init+0x88>)
 80025d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <MX_TIM12_Init+0x84>)
 80025d8:	2223      	movs	r2, #35	; 0x23
 80025da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_TIM12_Init+0x84>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <MX_TIM12_Init+0x84>)
 80025e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80025e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_TIM12_Init+0x84>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <MX_TIM12_Init+0x84>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80025f6:	4811      	ldr	r0, [pc, #68]	; (800263c <MX_TIM12_Init+0x84>)
 80025f8:	f002 f8a7 	bl	800474a <HAL_TIM_PWM_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002602:	f7ff fddf 	bl	80021c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002606:	2360      	movs	r3, #96	; 0x60
 8002608:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	2200      	movs	r2, #0
 800261a:	4619      	mov	r1, r3
 800261c:	4807      	ldr	r0, [pc, #28]	; (800263c <MX_TIM12_Init+0x84>)
 800261e:	f002 fa05 	bl	8004a2c <HAL_TIM_PWM_ConfigChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002628:	f7ff fdcc 	bl	80021c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <MX_TIM12_Init+0x84>)
 800262e:	f000 f8e9 	bl	8002804 <HAL_TIM_MspPostInit>

}
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200041f8 	.word	0x200041f8
 8002640:	40001800 	.word	0x40001800

08002644 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <MX_TIM13_Init+0x40>)
 800264a:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <MX_TIM13_Init+0x44>)
 800264c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <MX_TIM13_Init+0x40>)
 8002650:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002654:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MX_TIM13_Init+0x40>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MX_TIM13_Init+0x40>)
 800265e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002662:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <MX_TIM13_Init+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <MX_TIM13_Init+0x40>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002670:	4804      	ldr	r0, [pc, #16]	; (8002684 <MX_TIM13_Init+0x40>)
 8002672:	f002 f81b 	bl	80046ac <HAL_TIM_Base_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800267c:	f7ff fda2 	bl	80021c4 <Error_Handler>
  }

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20004298 	.word	0x20004298
 8002688:	40001c00 	.word	0x40001c00

0800268c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_TIM14_Init+0x40>)
 8002692:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <MX_TIM14_Init+0x44>)
 8002694:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <MX_TIM14_Init+0x40>)
 8002698:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800269c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <MX_TIM14_Init+0x40>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_TIM14_Init+0x40>)
 80026a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80026aa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <MX_TIM14_Init+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_TIM14_Init+0x40>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <MX_TIM14_Init+0x40>)
 80026ba:	f001 fff7 	bl	80046ac <HAL_TIM_Base_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80026c4:	f7ff fd7e 	bl	80021c4 <Error_Handler>
  }

}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200042d8 	.word	0x200042d8
 80026d0:	40002000 	.word	0x40002000

080026d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_TIM_PWM_MspInit+0x64>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_TIM_PWM_MspInit+0x68>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <HAL_TIM_PWM_MspInit+0x68>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_TIM_PWM_MspInit+0x68>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002702:	e012      	b.n	800272a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <HAL_TIM_PWM_MspInit+0x6c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10d      	bne.n	800272a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_TIM_PWM_MspInit+0x68>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_TIM_PWM_MspInit+0x68>)
 8002718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_TIM_PWM_MspInit+0x68>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40000800 	.word	0x40000800
 800273c:	40023800 	.word	0x40023800
 8002740:	40001800 	.word	0x40001800

08002744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <HAL_TIM_Base_MspInit+0xb4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d116      	bne.n	8002784 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2105      	movs	r1, #5
 8002776:	202c      	movs	r0, #44	; 0x2c
 8002778:	f001 f90a 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800277c:	202c      	movs	r0, #44	; 0x2c
 800277e:	f001 f923 	bl	80039c8 <HAL_NVIC_EnableIRQ>
 8002782:	e01a      	b.n	80027ba <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <HAL_TIM_Base_MspInit+0xbc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d115      	bne.n	80027ba <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2105      	movs	r1, #5
 80027ae:	202d      	movs	r0, #45	; 0x2d
 80027b0:	f001 f8ee 	bl	8003990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80027b4:	202d      	movs	r0, #45	; 0x2d
 80027b6:	f001 f907 	bl	80039c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_TIM_Base_MspInit+0xb4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d115      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a0b      	ldr	r2, [pc, #44]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 80027ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_TIM_Base_MspInit+0xb8>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2101      	movs	r1, #1
 80027e4:	202c      	movs	r0, #44	; 0x2c
 80027e6:	f001 f8d3 	bl	8003990 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80027ea:	202c      	movs	r0, #44	; 0x2c
 80027ec:	f001 f8ec 	bl	80039c8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40001c00 	.word	0x40001c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	40002000 	.word	0x40002000

08002804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HAL_TIM_MspPostInit+0xb0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d11f      	bne.n	8002866 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a22      	ldr	r2, [pc, #136]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8002842:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002854:	2302      	movs	r3, #2
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	4817      	ldr	r0, [pc, #92]	; (80028bc <HAL_TIM_MspPostInit+0xb8>)
 8002860:	f001 f8c0 	bl	80039e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002864:	e022      	b.n	80028ac <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <HAL_TIM_MspPostInit+0xbc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d11d      	bne.n	80028ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800288c:	2340      	movs	r3, #64	; 0x40
 800288e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800289c:	2309      	movs	r3, #9
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <HAL_TIM_MspPostInit+0xc0>)
 80028a8:	f001 f89c 	bl	80039e4 <HAL_GPIO_Init>
}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	; 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40000800 	.word	0x40000800
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40001800 	.word	0x40001800
 80028c4:	40021c00 	.word	0x40021c00

080028c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 80028d0:	1d39      	adds	r1, r7, #4
 80028d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d6:	2201      	movs	r2, #1
 80028d8:	4803      	ldr	r0, [pc, #12]	; (80028e8 <__io_putchar+0x20>)
 80028da:	f002 fce8 	bl	80052ae <HAL_UART_Transmit>

  return ch;
 80028de:	687b      	ldr	r3, [r7, #4]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20004358 	.word	0x20004358

080028ec <MX_UART7_Init>:
// For RM competition and latest A type board, use huart7
UART_HandleTypeDef husart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_UART7_Init+0x4c>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <MX_UART7_Init+0x50>)
 80028f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <MX_UART7_Init+0x4c>)
 80028f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028fc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_UART7_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_UART7_Init+0x4c>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <MX_UART7_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_UART7_Init+0x4c>)
 8002912:	220c      	movs	r2, #12
 8002914:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <MX_UART7_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_UART7_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_UART7_Init+0x4c>)
 8002924:	f002 fc76 	bl	8005214 <HAL_UART_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800292e:	f7ff fc49 	bl	80021c4 <Error_Handler>
  }

}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20004358 	.word	0x20004358
 800293c:	40007800 	.word	0x40007800

08002940 <MX_USART6_Init>:

/* USART6 init function */
void MX_USART6_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0

  husart6.Instance = USART6;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <MX_USART6_Init+0x4c>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <MX_USART6_Init+0x50>)
 8002948:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <MX_USART6_Init+0x4c>)
 800294c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002950:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <MX_USART6_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = UART_STOPBITS_1;
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_USART6_Init+0x4c>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = UART_PARITY_NONE;
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <MX_USART6_Init+0x4c>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = UART_MODE_TX_RX;
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_USART6_Init+0x4c>)
 8002966:	220c      	movs	r2, #12
 8002968:	615a      	str	r2, [r3, #20]
  husart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <MX_USART6_Init+0x4c>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  husart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_USART6_Init+0x4c>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&husart6) != HAL_OK)
 8002976:	4805      	ldr	r0, [pc, #20]	; (800298c <MX_USART6_Init+0x4c>)
 8002978:	f002 fc4c 	bl	8005214 <HAL_UART_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_USART6_Init+0x46>
  {
    Error_Handler();
 8002982:	f7ff fc1f 	bl	80021c4 <Error_Handler>
  }

}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20004318 	.word	0x20004318
 8002990:	40011400 	.word	0x40011400

08002994 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a32      	ldr	r2, [pc, #200]	; (8002a7c <HAL_UART_MspInit+0xe8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d12c      	bne.n	8002a10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_UART_MspInit+0xec>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_UART_MspInit+0xec>)
 80029c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <HAL_UART_MspInit+0xec>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_UART_MspInit+0xec>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a29      	ldr	r2, [pc, #164]	; (8002a80 <HAL_UART_MspInit+0xec>)
 80029dc:	f043 0310 	orr.w	r3, r3, #16
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_UART_MspInit+0xec>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80029ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002a00:	2308      	movs	r3, #8
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	481e      	ldr	r0, [pc, #120]	; (8002a84 <HAL_UART_MspInit+0xf0>)
 8002a0c:	f000 ffea 	bl	80039e4 <HAL_GPIO_Init>
  }

  if(uartHandle->Instance==USART6)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <HAL_UART_MspInit+0xf4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d12c      	bne.n	8002a74 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
	/* UART7 clock enable */
	__HAL_RCC_USART6_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_UART_MspInit+0xec>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_UART_MspInit+0xec>)
 8002a24:	f043 0320 	orr.w	r3, r3, #32
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_UART_MspInit+0xec>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_UART_MspInit+0xec>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <HAL_UART_MspInit+0xec>)
 8002a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_UART_MspInit+0xec>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
	/**USART6 GPIO Configuration
	  PG14     ------> USART6_TX
	  PG9     ------> USART6_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002a52:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002a56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a64:	2308      	movs	r3, #8
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4807      	ldr	r0, [pc, #28]	; (8002a8c <HAL_UART_MspInit+0xf8>)
 8002a70:	f000 ffb8 	bl	80039e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002a74:	bf00      	nop
 8002a76:	3730      	adds	r7, #48	; 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40007800 	.word	0x40007800
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40011400 	.word	0x40011400
 8002a8c:	40021800 	.word	0x40021800

08002a90 <Reset_Handler>:
 8002a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac8 <LoopFillZerobss+0x14>
 8002a94:	2100      	movs	r1, #0
 8002a96:	e003      	b.n	8002aa0 <LoopCopyDataInit>

08002a98 <CopyDataInit>:
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <LoopFillZerobss+0x18>)
 8002a9a:	585b      	ldr	r3, [r3, r1]
 8002a9c:	5043      	str	r3, [r0, r1]
 8002a9e:	3104      	adds	r1, #4

08002aa0 <LoopCopyDataInit>:
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <LoopFillZerobss+0x1c>)
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <LoopFillZerobss+0x20>)
 8002aa4:	1842      	adds	r2, r0, r1
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d3f6      	bcc.n	8002a98 <CopyDataInit>
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <LoopFillZerobss+0x24>)
 8002aac:	e002      	b.n	8002ab4 <LoopFillZerobss>

08002aae <FillZerobss>:
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f842 3b04 	str.w	r3, [r2], #4

08002ab4 <LoopFillZerobss>:
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <LoopFillZerobss+0x28>)
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3f9      	bcc.n	8002aae <FillZerobss>
 8002aba:	f7ff fd01 	bl	80024c0 <SystemInit>
 8002abe:	f004 fb25 	bl	800710c <__libc_init_array>
 8002ac2:	f7ff fac5 	bl	8002050 <main>
 8002ac6:	4770      	bx	lr
 8002ac8:	20030000 	.word	0x20030000
 8002acc:	08009290 	.word	0x08009290
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000078 	.word	0x20000078
 8002ad8:	20000078 	.word	0x20000078
 8002adc:	200043a0 	.word	0x200043a0

08002ae0 <ADC_IRQHandler>:
 8002ae0:	e7fe      	b.n	8002ae0 <ADC_IRQHandler>
	...

08002ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_Init+0x40>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <HAL_Init+0x40>)
 8002aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <HAL_Init+0x40>)
 8002afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_Init+0x40>)
 8002b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f000 ff34 	bl	800397a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff fb86 	bl	8002224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b18:	f7ff fb58 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023c00 	.word	0x40023c00

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_IncTick+0x20>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_IncTick+0x24>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_IncTick+0x24>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	20004398 	.word	0x20004398

08002b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_GetTick+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20004398 	.word	0x20004398

08002b68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0ed      	b.n	8002d56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe ffea 	bl	8001b60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0202 	bic.w	r2, r2, #2
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff ffd8 	bl	8002b50 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ba2:	e012      	b.n	8002bca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ba4:	f7ff ffd4 	bl	8002b50 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b0a      	cmp	r3, #10
 8002bb0:	d90b      	bls.n	8002bca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0c5      	b.n	8002d56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be8:	f7ff ffb2 	bl	8002b50 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002bee:	e012      	b.n	8002c16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bf0:	f7ff ffae 	bl	8002b50 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b0a      	cmp	r3, #10
 8002bfc:	d90b      	bls.n	8002c16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e09f      	b.n	8002d56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0e5      	beq.n	8002bf0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e1b      	ldrb	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d108      	bne.n	8002c3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e007      	b.n	8002c4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7e5b      	ldrb	r3, [r3, #25]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d108      	bne.n	8002c68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e007      	b.n	8002c78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7e9b      	ldrb	r3, [r3, #26]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0220 	orr.w	r2, r2, #32
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e007      	b.n	8002ca2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0220 	bic.w	r2, r2, #32
 8002ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7edb      	ldrb	r3, [r3, #27]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0210 	bic.w	r2, r2, #16
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0210 	orr.w	r2, r2, #16
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7f1b      	ldrb	r3, [r3, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0208 	bic.w	r2, r2, #8
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7f5b      	ldrb	r3, [r3, #29]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d108      	bne.n	8002d10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0204 	orr.w	r2, r2, #4
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e007      	b.n	8002d20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0204 	bic.w	r2, r2, #4
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	ea42 0103 	orr.w	r1, r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	1e5a      	subs	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d003      	beq.n	8002d86 <HAL_CAN_ConfigFilter+0x26>
 8002d7e:	7cfb      	ldrb	r3, [r7, #19]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	f040 80be 	bne.w	8002f02 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d86:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_CAN_ConfigFilter+0x1bc>)
 8002d88:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002da0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	021b      	lsls	r3, r3, #8
 8002db6:	431a      	orrs	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	401a      	ands	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d123      	bne.n	8002e30 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3248      	adds	r2, #72	; 0x48
 8002e10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e26:	6979      	ldr	r1, [r7, #20]
 8002e28:	3348      	adds	r3, #72	; 0x48
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d122      	bne.n	8002e7e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	431a      	orrs	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	3248      	adds	r2, #72	; 0x48
 8002e5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	3348      	adds	r3, #72	; 0x48
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	401a      	ands	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e98:	e007      	b.n	8002eaa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ec4:	e007      	b.n	8002ed6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ef4:	f023 0201 	bic.w	r2, r3, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e006      	b.n	8002f10 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40006400 	.word	0x40006400

08002f20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d12e      	bne.n	8002f92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7ff fe00 	bl	8002b50 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f52:	e012      	b.n	8002f7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f54:	f7ff fdfc 	bl	8002b50 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b0a      	cmp	r3, #10
 8002f60:	d90b      	bls.n	8002f7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2205      	movs	r2, #5
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e012      	b.n	8002fa0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e5      	bne.n	8002f54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e006      	b.n	8002fa0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fc6:	7ffb      	ldrb	r3, [r7, #31]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d003      	beq.n	8002fd4 <HAL_CAN_AddTxMessage+0x2c>
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	f040 80b8 	bne.w	8003144 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a0 	beq.w	8003134 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d907      	bls.n	8003014 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e09e      	b.n	8003152 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003014:	2201      	movs	r2, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	409a      	lsls	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	6809      	ldr	r1, [r1, #0]
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3318      	adds	r3, #24
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e00f      	b.n	8003062 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800304c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003056:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3318      	adds	r3, #24
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	440b      	add	r3, r1
 8003060:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3318      	adds	r3, #24
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	440b      	add	r3, r1
 8003072:	3304      	adds	r3, #4
 8003074:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	7d1b      	ldrb	r3, [r3, #20]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d111      	bne.n	80030a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3318      	adds	r3, #24
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	4413      	add	r3, r2
 800308a:	3304      	adds	r3, #4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	6811      	ldr	r1, [r2, #0]
 8003092:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3318      	adds	r3, #24
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	440b      	add	r3, r1
 800309e:	3304      	adds	r3, #4
 80030a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3307      	adds	r3, #7
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	061a      	lsls	r2, r3, #24
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3306      	adds	r3, #6
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3305      	adds	r3, #5
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	4313      	orrs	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	3204      	adds	r2, #4
 80030c2:	7812      	ldrb	r2, [r2, #0]
 80030c4:	4610      	mov	r0, r2
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	ea43 0200 	orr.w	r2, r3, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3303      	adds	r3, #3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	061a      	lsls	r2, r3, #24
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3302      	adds	r3, #2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3301      	adds	r3, #1
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	4313      	orrs	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	7812      	ldrb	r2, [r2, #0]
 80030fa:	4610      	mov	r0, r2
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6811      	ldr	r1, [r2, #0]
 8003100:	ea43 0200 	orr.w	r2, r3, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	440b      	add	r3, r1
 800310a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800310e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3318      	adds	r3, #24
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	4413      	add	r3, r2
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3318      	adds	r3, #24
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	440b      	add	r3, r1
 800312e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e00e      	b.n	8003152 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e006      	b.n	8003152 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d003      	beq.n	8003182 <HAL_CAN_GetRxMessage+0x24>
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f040 80f3 	bne.w	8003368 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10e      	bne.n	80031a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d8      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	331b      	adds	r3, #27
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0204 	and.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	331b      	adds	r3, #27
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4413      	add	r3, r2
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0d5b      	lsrs	r3, r3, #21
 80031f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	331b      	adds	r3, #27
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	331b      	adds	r3, #27
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0202 	and.w	r2, r3, #2
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	331b      	adds	r3, #27
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	4413      	add	r3, r2
 8003236:	3304      	adds	r3, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 020f 	and.w	r2, r3, #15
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	331b      	adds	r3, #27
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	3304      	adds	r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	b2da      	uxtb	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	331b      	adds	r3, #27
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4413      	add	r3, r2
 800327c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0a1a      	lsrs	r2, r3, #8
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0c1a      	lsrs	r2, r3, #16
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	3302      	adds	r3, #2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0e1a      	lsrs	r2, r3, #24
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3303      	adds	r3, #3
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	3304      	adds	r3, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0a1a      	lsrs	r2, r3, #8
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	3305      	adds	r3, #5
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	0c1a      	lsrs	r2, r3, #16
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	3306      	adds	r3, #6
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	4413      	add	r3, r2
 800332c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e1a      	lsrs	r2, r3, #24
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	3307      	adds	r3, #7
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	e007      	b.n	8003364 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e006      	b.n	8003376 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003392:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d002      	beq.n	80033a0 <HAL_CAN_ActivateNotification+0x1e>
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d109      	bne.n	80033b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6959      	ldr	r1, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e006      	b.n	80033c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b08a      	sub	sp, #40	; 0x28
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d07c      	beq.n	800350e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d023      	beq.n	8003466 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f97d 	bl	8003730 <HAL_CAN_TxMailbox0CompleteCallback>
 8003436:	e016      	b.n	8003466 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e00c      	b.n	8003466 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	e002      	b.n	8003466 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f983 	bl	800376c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d024      	beq.n	80034ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003478:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f95d 	bl	8003744 <HAL_CAN_TxMailbox1CompleteCallback>
 800348a:	e016      	b.n	80034ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	2b00      	cmp	r3, #0
 8003494:	d004      	beq.n	80034a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
 800349e:	e00c      	b.n	80034ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
 80034b2:	e002      	b.n	80034ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f963 	bl	8003780 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d024      	beq.n	800350e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f93d 	bl	8003758 <HAL_CAN_TxMailbox2CompleteCallback>
 80034de:	e016      	b.n	800350e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e00c      	b.n	800350e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
 8003506:	e002      	b.n	800350e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f943 	bl	8003794 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2210      	movs	r2, #16
 8003530:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2208      	movs	r2, #8
 800354c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f92a 	bl	80037a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0303 	and.w	r3, r3, #3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fe fb93 	bl	8001c98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00c      	beq.n	8003596 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2210      	movs	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f90c 	bl	80037d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8f3 	bl	80037bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d006      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2210      	movs	r2, #16
 80035f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f8f6 	bl	80037e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8ef 	bl	80037f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d075      	beq.n	8003710 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	d06c      	beq.n	8003708 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d03d      	beq.n	8003708 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d038      	beq.n	8003708 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d017      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x302>
 80036a0:	2b30      	cmp	r3, #48	; 0x30
 80036a2:	d804      	bhi.n	80036ae <HAL_CAN_IRQHandler+0x2e0>
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d009      	beq.n	80036bc <HAL_CAN_IRQHandler+0x2ee>
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d00c      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036ac:	e024      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80036ae:	2b50      	cmp	r3, #80	; 0x50
 80036b0:	d018      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x316>
 80036b2:	2b60      	cmp	r3, #96	; 0x60
 80036b4:	d01b      	beq.n	80036ee <HAL_CAN_IRQHandler+0x320>
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d00f      	beq.n	80036da <HAL_CAN_IRQHandler+0x30c>
            break;
 80036ba:	e01d      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f043 0308 	orr.w	r3, r3, #8
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036c4:	e018      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f043 0310 	orr.w	r3, r3, #16
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ce:	e013      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036d8:	e00e      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036e2:	e009      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ec:	e004      	b.n	80036f8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003706:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2204      	movs	r2, #4
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f872 	bl	800380c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003728:	bf00      	nop
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	; (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db0a      	blt.n	80038ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	490c      	ldr	r1, [pc, #48]	; (800390c <__NVIC_SetPriority+0x4c>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e8:	e00a      	b.n	8003900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4908      	ldr	r1, [pc, #32]	; (8003910 <__NVIC_SetPriority+0x50>)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	3b04      	subs	r3, #4
 80038f8:	0112      	lsls	r2, r2, #4
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	440b      	add	r3, r1
 80038fe:	761a      	strb	r2, [r3, #24]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf28      	it	cs
 8003932:	2304      	movcs	r3, #4
 8003934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3304      	adds	r3, #4
 800393a:	2b06      	cmp	r3, #6
 800393c:	d902      	bls.n	8003944 <NVIC_EncodePriority+0x30>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3b03      	subs	r3, #3
 8003942:	e000      	b.n	8003946 <NVIC_EncodePriority+0x32>
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	401a      	ands	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43d9      	mvns	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	4313      	orrs	r3, r2
         );
}
 800396e:	4618      	mov	r0, r3
 8003970:	3724      	adds	r7, #36	; 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff4c 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a2:	f7ff ff61 	bl	8003868 <__NVIC_GetPriorityGrouping>
 80039a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	f7ff ffb1 	bl	8003914 <NVIC_EncodePriority>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff80 	bl	80038c0 <__NVIC_SetPriority>
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff54 	bl	8003884 <__NVIC_EnableIRQ>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e177      	b.n	8003cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a00:	2201      	movs	r2, #1
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	f040 8166 	bne.w	8003cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d00b      	beq.n	8003a3e <HAL_GPIO_Init+0x5a>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d007      	beq.n	8003a3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a32:	2b11      	cmp	r3, #17
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b12      	cmp	r3, #18
 8003a3c:	d130      	bne.n	8003aa0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 0201 	and.w	r2, r3, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0xfc>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b12      	cmp	r3, #18
 8003ade:	d123      	bne.n	8003b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	08da      	lsrs	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3208      	adds	r2, #8
 8003ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	220f      	movs	r2, #15
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	08da      	lsrs	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3208      	adds	r2, #8
 8003b22:	69b9      	ldr	r1, [r7, #24]
 8003b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0203 	and.w	r2, r3, #3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80c0 	beq.w	8003cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b65      	ldr	r3, [pc, #404]	; (8003d04 <HAL_GPIO_Init+0x320>)
 8003b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b72:	4a64      	ldr	r2, [pc, #400]	; (8003d04 <HAL_GPIO_Init+0x320>)
 8003b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b78:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7a:	4b62      	ldr	r3, [pc, #392]	; (8003d04 <HAL_GPIO_Init+0x320>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b86:	4a60      	ldr	r2, [pc, #384]	; (8003d08 <HAL_GPIO_Init+0x324>)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a57      	ldr	r2, [pc, #348]	; (8003d0c <HAL_GPIO_Init+0x328>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d037      	beq.n	8003c22 <HAL_GPIO_Init+0x23e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a56      	ldr	r2, [pc, #344]	; (8003d10 <HAL_GPIO_Init+0x32c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_GPIO_Init+0x23a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a55      	ldr	r2, [pc, #340]	; (8003d14 <HAL_GPIO_Init+0x330>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02b      	beq.n	8003c1a <HAL_GPIO_Init+0x236>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a54      	ldr	r2, [pc, #336]	; (8003d18 <HAL_GPIO_Init+0x334>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d025      	beq.n	8003c16 <HAL_GPIO_Init+0x232>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a53      	ldr	r2, [pc, #332]	; (8003d1c <HAL_GPIO_Init+0x338>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01f      	beq.n	8003c12 <HAL_GPIO_Init+0x22e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_GPIO_Init+0x33c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d019      	beq.n	8003c0e <HAL_GPIO_Init+0x22a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <HAL_GPIO_Init+0x340>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0x226>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_GPIO_Init+0x344>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00d      	beq.n	8003c06 <HAL_GPIO_Init+0x222>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a4f      	ldr	r2, [pc, #316]	; (8003d2c <HAL_GPIO_Init+0x348>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <HAL_GPIO_Init+0x21e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a4e      	ldr	r2, [pc, #312]	; (8003d30 <HAL_GPIO_Init+0x34c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_GPIO_Init+0x21a>
 8003bfa:	2309      	movs	r3, #9
 8003bfc:	e012      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003bfe:	230a      	movs	r3, #10
 8003c00:	e010      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c02:	2308      	movs	r3, #8
 8003c04:	e00e      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c06:	2307      	movs	r3, #7
 8003c08:	e00c      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	e00a      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e008      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e006      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e004      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e002      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_GPIO_Init+0x240>
 8003c22:	2300      	movs	r3, #0
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f002 0203 	and.w	r2, r2, #3
 8003c2a:	0092      	lsls	r2, r2, #2
 8003c2c:	4093      	lsls	r3, r2
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c34:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_GPIO_Init+0x324>)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c42:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c66:	4a33      	ldr	r2, [pc, #204]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c90:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cba:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <HAL_GPIO_Init+0x350>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b0f      	cmp	r3, #15
 8003cf4:	f67f ae84 	bls.w	8003a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3724      	adds	r7, #36	; 0x24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40023800 	.word	0x40023800
 8003d08:	40013800 	.word	0x40013800
 8003d0c:	40020000 	.word	0x40020000
 8003d10:	40020400 	.word	0x40020400
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	40021400 	.word	0x40021400
 8003d24:	40021800 	.word	0x40021800
 8003d28:	40021c00 	.word	0x40021c00
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40022400 	.word	0x40022400
 8003d34:	40013c00 	.word	0x40013c00

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d54:	e003      	b.n	8003d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	619a      	str	r2, [r3, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	401a      	ands	r2, r3
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d104      	bne.n	8003d8e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d84:	887b      	ldrh	r3, [r7, #2]
 8003d86:	041a      	lsls	r2, r3, #16
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003d8c:	e002      	b.n	8003d94 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	619a      	str	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe f908 	bl	8001fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40013c00 	.word	0x40013c00

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e25b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dee:	4ba3      	ldr	r3, [pc, #652]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4ba0      	ldr	r3, [pc, #640]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b99      	ldr	r3, [pc, #612]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e236      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a90      	ldr	r2, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a87      	ldr	r2, [pc, #540]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fe fe62 	bl	8002b50 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fe fe5e 	bl	8002b50 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1fb      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fe4e 	bl	8002b50 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fe fe4a 	bl	8002b50 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1e7      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1bb      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4952      	ldr	r1, [pc, #328]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fe fe03 	bl	8002b50 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fe fdff 	bl	8002b50 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e19c      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4940      	ldr	r1, [pc, #256]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe fde2 	bl	8002b50 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fe fdde 	bl	8002b50 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e17b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe fdc2 	bl	8002b50 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fe fdbe 	bl	8002b50 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e15b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e015      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fdab 	bl	8002b50 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fe fda7 	bl	8002b50 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e144      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a0 	beq.w	800416a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fe fd6d 	bl	8002b50 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e011      	b.n	800409e <HAL_RCC_OscConfig+0x2ce>
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
 8004088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fe fd60 	bl	8002b50 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0fd      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <HAL_RCC_OscConfig+0x4d4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x312>
 80040c8:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a73      	ldr	r2, [pc, #460]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040e2:	4b71      	ldr	r3, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a70      	ldr	r2, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	4b6e      	ldr	r3, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a6d      	ldr	r2, [pc, #436]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fe fd25 	bl	8002b50 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fe fd21 	bl	8002b50 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0bc      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x33a>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fe fd0f 	bl	8002b50 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fe fd0b 	bl	8002b50 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0a6      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a51      	ldr	r2, [pc, #324]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8092 	beq.w	8004298 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d05c      	beq.n	800423a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d141      	bne.n	800420c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b48      	ldr	r3, [pc, #288]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fe fcdf 	bl	8002b50 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004196:	f7fe fcdb 	bl	8002b50 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e078      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	4933      	ldr	r1, [pc, #204]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fe fcb4 	bl	8002b50 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fe fcb0 	bl	8002b50 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e04d      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x41c>
 800420a:	e045      	b.n	8004298 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe fc9d 	bl	8002b50 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421a:	f7fe fc99 	bl	8002b50 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e036      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x44a>
 8004238:	e02e      	b.n	8004298 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e029      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	429a      	cmp	r2, r3
 8004258:	d11c      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d115      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40007000 	.word	0x40007000
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470060 	.word	0x42470060

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fe fbd6 	bl	8002b50 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe fbd2 	bl	8002b50 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4601      	mov	r1, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	fa21 f303 	lsr.w	r3, r1, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd fee4 	bl	8002224 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	08009188 	.word	0x08009188
 8004474:	20000000 	.word	0x20000000
 8004478:	20000004 	.word	0x20000004

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004492:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d007      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x32>
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d008      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x38>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 808d 	bne.w	80045c2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b4b      	ldr	r3, [pc, #300]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80044aa:	60bb      	str	r3, [r7, #8]
       break;
 80044ac:	e08c      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ae:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCC_GetSysClockFreq+0x160>)
 80044b0:	60bb      	str	r3, [r7, #8]
      break;
 80044b2:	e089      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044be:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d023      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	ea03 0501 	and.w	r5, r3, r1
 80044e0:	ea04 0602 	and.w	r6, r4, r2
 80044e4:	4a3d      	ldr	r2, [pc, #244]	; (80045dc <HAL_RCC_GetSysClockFreq+0x160>)
 80044e6:	fb02 f106 	mul.w	r1, r2, r6
 80044ea:	2200      	movs	r2, #0
 80044ec:	fb02 f205 	mul.w	r2, r2, r5
 80044f0:	440a      	add	r2, r1
 80044f2:	493a      	ldr	r1, [pc, #232]	; (80045dc <HAL_RCC_GetSysClockFreq+0x160>)
 80044f4:	fba5 0101 	umull	r0, r1, r5, r1
 80044f8:	1853      	adds	r3, r2, r1
 80044fa:	4619      	mov	r1, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f04f 0400 	mov.w	r4, #0
 8004502:	461a      	mov	r2, r3
 8004504:	4623      	mov	r3, r4
 8004506:	f7fc fb5f 	bl	8000bc8 <__aeabi_uldivmod>
 800450a:	4603      	mov	r3, r0
 800450c:	460c      	mov	r4, r1
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	e049      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	f04f 0400 	mov.w	r4, #0
 800451c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	ea03 0501 	and.w	r5, r3, r1
 8004528:	ea04 0602 	and.w	r6, r4, r2
 800452c:	4629      	mov	r1, r5
 800452e:	4632      	mov	r2, r6
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	0154      	lsls	r4, r2, #5
 800453a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800453e:	014b      	lsls	r3, r1, #5
 8004540:	4619      	mov	r1, r3
 8004542:	4622      	mov	r2, r4
 8004544:	1b49      	subs	r1, r1, r5
 8004546:	eb62 0206 	sbc.w	r2, r2, r6
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	0194      	lsls	r4, r2, #6
 8004554:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004558:	018b      	lsls	r3, r1, #6
 800455a:	1a5b      	subs	r3, r3, r1
 800455c:	eb64 0402 	sbc.w	r4, r4, r2
 8004560:	f04f 0100 	mov.w	r1, #0
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	00e2      	lsls	r2, r4, #3
 800456a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800456e:	00d9      	lsls	r1, r3, #3
 8004570:	460b      	mov	r3, r1
 8004572:	4614      	mov	r4, r2
 8004574:	195b      	adds	r3, r3, r5
 8004576:	eb44 0406 	adc.w	r4, r4, r6
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	02a2      	lsls	r2, r4, #10
 8004584:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004588:	0299      	lsls	r1, r3, #10
 800458a:	460b      	mov	r3, r1
 800458c:	4614      	mov	r4, r2
 800458e:	4618      	mov	r0, r3
 8004590:	4621      	mov	r1, r4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f04f 0400 	mov.w	r4, #0
 8004598:	461a      	mov	r2, r3
 800459a:	4623      	mov	r3, r4
 800459c:	f7fc fb14 	bl	8000bc8 <__aeabi_uldivmod>
 80045a0:	4603      	mov	r3, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x158>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0c1b      	lsrs	r3, r3, #16
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	3301      	adds	r3, #1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	60bb      	str	r3, [r7, #8]
      break;
 80045c0:	e002      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c2:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80045c4:	60bb      	str	r3, [r7, #8]
      break;
 80045c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c8:	68bb      	ldr	r3, [r7, #8]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	00b71b00 	.word	0x00b71b00

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000000 	.word	0x20000000

080045f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045fc:	f7ff fff0 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004600:	4601      	mov	r1, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4a03      	ldr	r2, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x24>)
 800460e:	5cd3      	ldrb	r3, [r2, r3]
 8004610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	08009198 	.word	0x08009198

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004624:	f7ff ffdc 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004628:	4601      	mov	r1, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0b5b      	lsrs	r3, r3, #13
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4a03      	ldr	r2, [pc, #12]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004636:	5cd3      	ldrb	r3, [r2, r3]
 8004638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	08009198 	.word	0x08009198

08004648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	220f      	movs	r2, #15
 8004656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_GetClockConfig+0x5c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0203 	and.w	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_GetClockConfig+0x5c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	08db      	lsrs	r3, r3, #3
 8004682:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800468a:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_RCC_GetClockConfig+0x60>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	601a      	str	r2, [r3, #0]
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40023c00 	.word	0x40023c00

080046ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e01d      	b.n	80046fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe f836 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f000 fa8c 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b06      	cmp	r3, #6
 800472a:	d007      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e01d      	b.n	8004798 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fd ffaf 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 fa3d 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fc78 	bl	80050a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a15      	ldr	r2, [pc, #84]	; (8004814 <HAL_TIM_PWM_Start+0x74>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_PWM_Start+0x2c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a14      	ldr	r2, [pc, #80]	; (8004818 <HAL_TIM_PWM_Start+0x78>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_PWM_Start+0x30>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_TIM_PWM_Start+0x32>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d007      	beq.n	8004808 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40010400 	.word	0x40010400

0800481c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d122      	bne.n	8004878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b02      	cmp	r3, #2
 800483e:	d11b      	bne.n	8004878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0202 	mvn.w	r2, #2
 8004848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f9b4 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9a6 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f9b7 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b04      	cmp	r3, #4
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b04      	cmp	r3, #4
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0204 	mvn.w	r2, #4
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f98a 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f97c 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f98d 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0208 	mvn.w	r2, #8
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2204      	movs	r2, #4
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f960 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f952 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f963 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b10      	cmp	r3, #16
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b10      	cmp	r3, #16
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0210 	mvn.w	r2, #16
 8004944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2208      	movs	r2, #8
 800494a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f936 	bl	8004bcc <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f928 	bl	8004bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f939 	bl	8004be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d10e      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0201 	mvn.w	r2, #1
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fd fbec 	bl	8002178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fc1a 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8fe 	bl	8004bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0220 	mvn.w	r2, #32
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fbe4 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0b4      	b.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	f200 809f 	bhi.w	8004b9c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004b9d 	.word	0x08004b9d
 8004a6c:	08004b9d 	.word	0x08004b9d
 8004a70:	08004b9d 	.word	0x08004b9d
 8004a74:	08004ad9 	.word	0x08004ad9
 8004a78:	08004b9d 	.word	0x08004b9d
 8004a7c:	08004b9d 	.word	0x08004b9d
 8004a80:	08004b9d 	.word	0x08004b9d
 8004a84:	08004b1b 	.word	0x08004b1b
 8004a88:	08004b9d 	.word	0x08004b9d
 8004a8c:	08004b9d 	.word	0x08004b9d
 8004a90:	08004b9d 	.word	0x08004b9d
 8004a94:	08004b5b 	.word	0x08004b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f952 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0208 	orr.w	r2, r2, #8
 8004ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0204 	bic.w	r2, r2, #4
 8004ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6999      	ldr	r1, [r3, #24]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	619a      	str	r2, [r3, #24]
      break;
 8004ad6:	e062      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f9a2 	bl	8004e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	021a      	lsls	r2, r3, #8
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	619a      	str	r2, [r3, #24]
      break;
 8004b18:	e041      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f9f7 	bl	8004f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0208 	orr.w	r2, r2, #8
 8004b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0204 	bic.w	r2, r2, #4
 8004b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69d9      	ldr	r1, [r3, #28]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	61da      	str	r2, [r3, #28]
      break;
 8004b58:	e021      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa4b 	bl	8004ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	021a      	lsls	r2, r3, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	61da      	str	r2, [r3, #28]
      break;
 8004b9a:	e000      	b.n	8004b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004b9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a40      	ldr	r2, [pc, #256]	; (8004d1c <TIM_Base_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d00f      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3d      	ldr	r2, [pc, #244]	; (8004d20 <TIM_Base_SetConfig+0x118>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3c      	ldr	r2, [pc, #240]	; (8004d24 <TIM_Base_SetConfig+0x11c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3b      	ldr	r2, [pc, #236]	; (8004d28 <TIM_Base_SetConfig+0x120>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <TIM_Base_SetConfig+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <TIM_Base_SetConfig+0x114>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d027      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	; (8004d20 <TIM_Base_SetConfig+0x118>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d023      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2b      	ldr	r2, [pc, #172]	; (8004d24 <TIM_Base_SetConfig+0x11c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2a      	ldr	r2, [pc, #168]	; (8004d28 <TIM_Base_SetConfig+0x120>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a29      	ldr	r2, [pc, #164]	; (8004d2c <TIM_Base_SetConfig+0x124>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d017      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <TIM_Base_SetConfig+0x128>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a27      	ldr	r2, [pc, #156]	; (8004d34 <TIM_Base_SetConfig+0x12c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <TIM_Base_SetConfig+0x130>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <TIM_Base_SetConfig+0x134>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <TIM_Base_SetConfig+0x138>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <TIM_Base_SetConfig+0x114>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <TIM_Base_SetConfig+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	40001800 	.word	0x40001800
 8004d40:	40001c00 	.word	0x40001c00
 8004d44:	40002000 	.word	0x40002000

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f023 0201 	bic.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <TIM_OC1_SetConfig+0xd8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d003      	beq.n	8004dac <TIM_OC1_SetConfig+0x64>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <TIM_OC1_SetConfig+0xdc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10c      	bne.n	8004dc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0308 	bic.w	r3, r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC1_SetConfig+0xd8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_OC1_SetConfig+0x8e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_OC1_SetConfig+0xdc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d111      	bne.n	8004dfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40010400 	.word	0x40010400

08004e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0210 	bic.w	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <TIM_OC2_SetConfig+0xe4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC2_SetConfig+0x68>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <TIM_OC2_SetConfig+0xe8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10d      	bne.n	8004eac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <TIM_OC2_SetConfig+0xe4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_OC2_SetConfig+0x94>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <TIM_OC2_SetConfig+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d113      	bne.n	8004ee4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400

08004f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a21      	ldr	r2, [pc, #132]	; (8004ff4 <TIM_OC3_SetConfig+0xe0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_OC3_SetConfig+0x66>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <TIM_OC3_SetConfig+0xe4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10d      	bne.n	8004f96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <TIM_OC3_SetConfig+0xe0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_OC3_SetConfig+0x92>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <TIM_OC3_SetConfig+0xe4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d113      	bne.n	8004fce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	621a      	str	r2, [r3, #32]
}
 8004fe8:	bf00      	nop
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40010400 	.word	0x40010400

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <TIM_OC4_SetConfig+0xa4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC4_SetConfig+0x68>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <TIM_OC4_SetConfig+0xa8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40010400 	.word	0x40010400

080050a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	2201      	movs	r2, #1
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	401a      	ands	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1a      	ldr	r2, [r3, #32]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005108:	2302      	movs	r3, #2
 800510a:	e05a      	b.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a21      	ldr	r2, [pc, #132]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d01d      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a15      	ldr	r2, [pc, #84]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10c      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40001800 	.word	0x40001800

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e03f      	b.n	80052a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd fbaa 	bl	8002994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9b1 	bl	80055c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b088      	sub	sp, #32
 80052b2:	af02      	add	r7, sp, #8
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	f040 8083 	bne.w	80053d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_UART_Transmit+0x2e>
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e07b      	b.n	80053d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Transmit+0x40>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e074      	b.n	80053d8 <HAL_UART_Transmit+0x12a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2221      	movs	r2, #33	; 0x21
 8005300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005304:	f7fd fc24 	bl	8002b50 <HAL_GetTick>
 8005308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800531e:	e042      	b.n	80053a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005336:	d122      	bne.n	800537e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	2180      	movs	r1, #128	; 0x80
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f8f2 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e042      	b.n	80053d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005364:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3302      	adds	r3, #2
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	e017      	b.n	80053a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3301      	adds	r3, #1
 800537a:	60bb      	str	r3, [r7, #8]
 800537c:	e013      	b.n	80053a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	2180      	movs	r1, #128	; 0x80
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f8cf 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e01f      	b.n	80053d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	60ba      	str	r2, [r7, #8]
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1b7      	bne.n	8005320 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2200      	movs	r2, #0
 80053b8:	2140      	movs	r1, #64	; 0x40
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f8b6 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e006      	b.n	80053d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	f040 8090 	bne.w	8005522 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_UART_Receive+0x2e>
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e088      	b.n	8005524 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UART_Receive+0x40>
 800541c:	2302      	movs	r3, #2
 800541e:	e081      	b.n	8005524 <HAL_UART_Receive+0x144>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2222      	movs	r2, #34	; 0x22
 8005432:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005436:	f7fd fb8b 	bl	8002b50 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	88fa      	ldrh	r2, [r7, #6]
 8005446:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005450:	e05c      	b.n	800550c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005468:	d12b      	bne.n	80054c2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2120      	movs	r1, #32
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f859 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e04f      	b.n	8005524 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10c      	bne.n	80054aa <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549c:	b29a      	uxth	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	3302      	adds	r3, #2
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	e030      	b.n	800550c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3301      	adds	r3, #1
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	e024      	b.n	800550c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2120      	movs	r1, #32
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f82d 	bl	800552c <UART_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e023      	b.n	8005524 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d108      	bne.n	80054f6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	60ba      	str	r2, [r7, #8]
 80054f0:	b2ca      	uxtb	r2, r1
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	e00a      	b.n	800550c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	1c59      	adds	r1, r3, #1
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d19d      	bne.n	8005452 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005522:	2302      	movs	r3, #2
  }
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	603b      	str	r3, [r7, #0]
 8005538:	4613      	mov	r3, r2
 800553a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553c:	e02c      	b.n	8005598 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d028      	beq.n	8005598 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0x30>
 800554c:	f7fd fb00 	bl	8002b50 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	d21d      	bcs.n	8005598 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800556a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e00f      	b.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4013      	ands	r3, r2
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d0c3      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005602:	f023 030c 	bic.w	r3, r3, #12
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	68f9      	ldr	r1, [r7, #12]
 800560c:	430b      	orrs	r3, r1
 800560e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800562e:	f040 818b 	bne.w	8005948 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4ac1      	ldr	r2, [pc, #772]	; (800593c <UART_SetConfig+0x37c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d005      	beq.n	8005648 <UART_SetConfig+0x88>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4abf      	ldr	r2, [pc, #764]	; (8005940 <UART_SetConfig+0x380>)
 8005642:	4293      	cmp	r3, r2
 8005644:	f040 80bd 	bne.w	80057c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe ffea 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 800564c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	461d      	mov	r5, r3
 8005652:	f04f 0600 	mov.w	r6, #0
 8005656:	46a8      	mov	r8, r5
 8005658:	46b1      	mov	r9, r6
 800565a:	eb18 0308 	adds.w	r3, r8, r8
 800565e:	eb49 0409 	adc.w	r4, r9, r9
 8005662:	4698      	mov	r8, r3
 8005664:	46a1      	mov	r9, r4
 8005666:	eb18 0805 	adds.w	r8, r8, r5
 800566a:	eb49 0906 	adc.w	r9, r9, r6
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800567a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800567e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005682:	4688      	mov	r8, r1
 8005684:	4691      	mov	r9, r2
 8005686:	eb18 0005 	adds.w	r0, r8, r5
 800568a:	eb49 0106 	adc.w	r1, r9, r6
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	461d      	mov	r5, r3
 8005694:	f04f 0600 	mov.w	r6, #0
 8005698:	196b      	adds	r3, r5, r5
 800569a:	eb46 0406 	adc.w	r4, r6, r6
 800569e:	461a      	mov	r2, r3
 80056a0:	4623      	mov	r3, r4
 80056a2:	f7fb fa91 	bl	8000bc8 <__aeabi_uldivmod>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	461a      	mov	r2, r3
 80056ac:	4ba5      	ldr	r3, [pc, #660]	; (8005944 <UART_SetConfig+0x384>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	461d      	mov	r5, r3
 80056bc:	f04f 0600 	mov.w	r6, #0
 80056c0:	46a9      	mov	r9, r5
 80056c2:	46b2      	mov	sl, r6
 80056c4:	eb19 0309 	adds.w	r3, r9, r9
 80056c8:	eb4a 040a 	adc.w	r4, sl, sl
 80056cc:	4699      	mov	r9, r3
 80056ce:	46a2      	mov	sl, r4
 80056d0:	eb19 0905 	adds.w	r9, r9, r5
 80056d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ec:	4689      	mov	r9, r1
 80056ee:	4692      	mov	sl, r2
 80056f0:	eb19 0005 	adds.w	r0, r9, r5
 80056f4:	eb4a 0106 	adc.w	r1, sl, r6
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	461d      	mov	r5, r3
 80056fe:	f04f 0600 	mov.w	r6, #0
 8005702:	196b      	adds	r3, r5, r5
 8005704:	eb46 0406 	adc.w	r4, r6, r6
 8005708:	461a      	mov	r2, r3
 800570a:	4623      	mov	r3, r4
 800570c:	f7fb fa5c 	bl	8000bc8 <__aeabi_uldivmod>
 8005710:	4603      	mov	r3, r0
 8005712:	460c      	mov	r4, r1
 8005714:	461a      	mov	r2, r3
 8005716:	4b8b      	ldr	r3, [pc, #556]	; (8005944 <UART_SetConfig+0x384>)
 8005718:	fba3 1302 	umull	r1, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	2164      	movs	r1, #100	; 0x64
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	3332      	adds	r3, #50	; 0x32
 800572a:	4a86      	ldr	r2, [pc, #536]	; (8005944 <UART_SetConfig+0x384>)
 800572c:	fba2 2303 	umull	r2, r3, r2, r3
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005738:	4498      	add	r8, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	461d      	mov	r5, r3
 800573e:	f04f 0600 	mov.w	r6, #0
 8005742:	46a9      	mov	r9, r5
 8005744:	46b2      	mov	sl, r6
 8005746:	eb19 0309 	adds.w	r3, r9, r9
 800574a:	eb4a 040a 	adc.w	r4, sl, sl
 800574e:	4699      	mov	r9, r3
 8005750:	46a2      	mov	sl, r4
 8005752:	eb19 0905 	adds.w	r9, r9, r5
 8005756:	eb4a 0a06 	adc.w	sl, sl, r6
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800576a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800576e:	4689      	mov	r9, r1
 8005770:	4692      	mov	sl, r2
 8005772:	eb19 0005 	adds.w	r0, r9, r5
 8005776:	eb4a 0106 	adc.w	r1, sl, r6
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	461d      	mov	r5, r3
 8005780:	f04f 0600 	mov.w	r6, #0
 8005784:	196b      	adds	r3, r5, r5
 8005786:	eb46 0406 	adc.w	r4, r6, r6
 800578a:	461a      	mov	r2, r3
 800578c:	4623      	mov	r3, r4
 800578e:	f7fb fa1b 	bl	8000bc8 <__aeabi_uldivmod>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	461a      	mov	r2, r3
 8005798:	4b6a      	ldr	r3, [pc, #424]	; (8005944 <UART_SetConfig+0x384>)
 800579a:	fba3 1302 	umull	r1, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2164      	movs	r1, #100	; 0x64
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	3332      	adds	r3, #50	; 0x32
 80057ac:	4a65      	ldr	r2, [pc, #404]	; (8005944 <UART_SetConfig+0x384>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 0207 	and.w	r2, r3, #7
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4442      	add	r2, r8
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	e26f      	b.n	8005ca2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c2:	f7fe ff19 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 80057c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	461d      	mov	r5, r3
 80057cc:	f04f 0600 	mov.w	r6, #0
 80057d0:	46a8      	mov	r8, r5
 80057d2:	46b1      	mov	r9, r6
 80057d4:	eb18 0308 	adds.w	r3, r8, r8
 80057d8:	eb49 0409 	adc.w	r4, r9, r9
 80057dc:	4698      	mov	r8, r3
 80057de:	46a1      	mov	r9, r4
 80057e0:	eb18 0805 	adds.w	r8, r8, r5
 80057e4:	eb49 0906 	adc.w	r9, r9, r6
 80057e8:	f04f 0100 	mov.w	r1, #0
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057fc:	4688      	mov	r8, r1
 80057fe:	4691      	mov	r9, r2
 8005800:	eb18 0005 	adds.w	r0, r8, r5
 8005804:	eb49 0106 	adc.w	r1, r9, r6
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	461d      	mov	r5, r3
 800580e:	f04f 0600 	mov.w	r6, #0
 8005812:	196b      	adds	r3, r5, r5
 8005814:	eb46 0406 	adc.w	r4, r6, r6
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	f7fb f9d4 	bl	8000bc8 <__aeabi_uldivmod>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	461a      	mov	r2, r3
 8005826:	4b47      	ldr	r3, [pc, #284]	; (8005944 <UART_SetConfig+0x384>)
 8005828:	fba3 2302 	umull	r2, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	461d      	mov	r5, r3
 8005836:	f04f 0600 	mov.w	r6, #0
 800583a:	46a9      	mov	r9, r5
 800583c:	46b2      	mov	sl, r6
 800583e:	eb19 0309 	adds.w	r3, r9, r9
 8005842:	eb4a 040a 	adc.w	r4, sl, sl
 8005846:	4699      	mov	r9, r3
 8005848:	46a2      	mov	sl, r4
 800584a:	eb19 0905 	adds.w	r9, r9, r5
 800584e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005866:	4689      	mov	r9, r1
 8005868:	4692      	mov	sl, r2
 800586a:	eb19 0005 	adds.w	r0, r9, r5
 800586e:	eb4a 0106 	adc.w	r1, sl, r6
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	461d      	mov	r5, r3
 8005878:	f04f 0600 	mov.w	r6, #0
 800587c:	196b      	adds	r3, r5, r5
 800587e:	eb46 0406 	adc.w	r4, r6, r6
 8005882:	461a      	mov	r2, r3
 8005884:	4623      	mov	r3, r4
 8005886:	f7fb f99f 	bl	8000bc8 <__aeabi_uldivmod>
 800588a:	4603      	mov	r3, r0
 800588c:	460c      	mov	r4, r1
 800588e:	461a      	mov	r2, r3
 8005890:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <UART_SetConfig+0x384>)
 8005892:	fba3 1302 	umull	r1, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2164      	movs	r1, #100	; 0x64
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	3332      	adds	r3, #50	; 0x32
 80058a4:	4a27      	ldr	r2, [pc, #156]	; (8005944 <UART_SetConfig+0x384>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	095b      	lsrs	r3, r3, #5
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b2:	4498      	add	r8, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	461d      	mov	r5, r3
 80058b8:	f04f 0600 	mov.w	r6, #0
 80058bc:	46a9      	mov	r9, r5
 80058be:	46b2      	mov	sl, r6
 80058c0:	eb19 0309 	adds.w	r3, r9, r9
 80058c4:	eb4a 040a 	adc.w	r4, sl, sl
 80058c8:	4699      	mov	r9, r3
 80058ca:	46a2      	mov	sl, r4
 80058cc:	eb19 0905 	adds.w	r9, r9, r5
 80058d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058e8:	4689      	mov	r9, r1
 80058ea:	4692      	mov	sl, r2
 80058ec:	eb19 0005 	adds.w	r0, r9, r5
 80058f0:	eb4a 0106 	adc.w	r1, sl, r6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	461d      	mov	r5, r3
 80058fa:	f04f 0600 	mov.w	r6, #0
 80058fe:	196b      	adds	r3, r5, r5
 8005900:	eb46 0406 	adc.w	r4, r6, r6
 8005904:	461a      	mov	r2, r3
 8005906:	4623      	mov	r3, r4
 8005908:	f7fb f95e 	bl	8000bc8 <__aeabi_uldivmod>
 800590c:	4603      	mov	r3, r0
 800590e:	460c      	mov	r4, r1
 8005910:	461a      	mov	r2, r3
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <UART_SetConfig+0x384>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	; 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	3332      	adds	r3, #50	; 0x32
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <UART_SetConfig+0x384>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 0207 	and.w	r2, r3, #7
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4442      	add	r2, r8
 8005938:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800593a:	e1b2      	b.n	8005ca2 <UART_SetConfig+0x6e2>
 800593c:	40011000 	.word	0x40011000
 8005940:	40011400 	.word	0x40011400
 8005944:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4ad7      	ldr	r2, [pc, #860]	; (8005cac <UART_SetConfig+0x6ec>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d005      	beq.n	800595e <UART_SetConfig+0x39e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4ad6      	ldr	r2, [pc, #856]	; (8005cb0 <UART_SetConfig+0x6f0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	f040 80d1 	bne.w	8005b00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800595e:	f7fe fe5f 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8005962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	469a      	mov	sl, r3
 8005968:	f04f 0b00 	mov.w	fp, #0
 800596c:	46d0      	mov	r8, sl
 800596e:	46d9      	mov	r9, fp
 8005970:	eb18 0308 	adds.w	r3, r8, r8
 8005974:	eb49 0409 	adc.w	r4, r9, r9
 8005978:	4698      	mov	r8, r3
 800597a:	46a1      	mov	r9, r4
 800597c:	eb18 080a 	adds.w	r8, r8, sl
 8005980:	eb49 090b 	adc.w	r9, r9, fp
 8005984:	f04f 0100 	mov.w	r1, #0
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005998:	4688      	mov	r8, r1
 800599a:	4691      	mov	r9, r2
 800599c:	eb1a 0508 	adds.w	r5, sl, r8
 80059a0:	eb4b 0609 	adc.w	r6, fp, r9
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4619      	mov	r1, r3
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f04f 0400 	mov.w	r4, #0
 80059b6:	0094      	lsls	r4, r2, #2
 80059b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059bc:	008b      	lsls	r3, r1, #2
 80059be:	461a      	mov	r2, r3
 80059c0:	4623      	mov	r3, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	4631      	mov	r1, r6
 80059c6:	f7fb f8ff 	bl	8000bc8 <__aeabi_uldivmod>
 80059ca:	4603      	mov	r3, r0
 80059cc:	460c      	mov	r4, r1
 80059ce:	461a      	mov	r2, r3
 80059d0:	4bb8      	ldr	r3, [pc, #736]	; (8005cb4 <UART_SetConfig+0x6f4>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	469b      	mov	fp, r3
 80059e0:	f04f 0c00 	mov.w	ip, #0
 80059e4:	46d9      	mov	r9, fp
 80059e6:	46e2      	mov	sl, ip
 80059e8:	eb19 0309 	adds.w	r3, r9, r9
 80059ec:	eb4a 040a 	adc.w	r4, sl, sl
 80059f0:	4699      	mov	r9, r3
 80059f2:	46a2      	mov	sl, r4
 80059f4:	eb19 090b 	adds.w	r9, r9, fp
 80059f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059fc:	f04f 0100 	mov.w	r1, #0
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a10:	4689      	mov	r9, r1
 8005a12:	4692      	mov	sl, r2
 8005a14:	eb1b 0509 	adds.w	r5, fp, r9
 8005a18:	eb4c 060a 	adc.w	r6, ip, sl
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4619      	mov	r1, r3
 8005a22:	f04f 0200 	mov.w	r2, #0
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	0094      	lsls	r4, r2, #2
 8005a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a34:	008b      	lsls	r3, r1, #2
 8005a36:	461a      	mov	r2, r3
 8005a38:	4623      	mov	r3, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	f7fb f8c3 	bl	8000bc8 <__aeabi_uldivmod>
 8005a42:	4603      	mov	r3, r0
 8005a44:	460c      	mov	r4, r1
 8005a46:	461a      	mov	r2, r3
 8005a48:	4b9a      	ldr	r3, [pc, #616]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2164      	movs	r1, #100	; 0x64
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	; 0x32
 8005a5c:	4a95      	ldr	r2, [pc, #596]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a68:	4498      	add	r8, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	469b      	mov	fp, r3
 8005a6e:	f04f 0c00 	mov.w	ip, #0
 8005a72:	46d9      	mov	r9, fp
 8005a74:	46e2      	mov	sl, ip
 8005a76:	eb19 0309 	adds.w	r3, r9, r9
 8005a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a7e:	4699      	mov	r9, r3
 8005a80:	46a2      	mov	sl, r4
 8005a82:	eb19 090b 	adds.w	r9, r9, fp
 8005a86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	4692      	mov	sl, r2
 8005aa2:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa6:	eb4c 060a 	adc.w	r6, ip, sl
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	f04f 0400 	mov.w	r4, #0
 8005abc:	0094      	lsls	r4, r2, #2
 8005abe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ac2:	008b      	lsls	r3, r1, #2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	4628      	mov	r0, r5
 8005aca:	4631      	mov	r1, r6
 8005acc:	f7fb f87c 	bl	8000bc8 <__aeabi_uldivmod>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b77      	ldr	r3, [pc, #476]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	2164      	movs	r1, #100	; 0x64
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	3332      	adds	r3, #50	; 0x32
 8005aea:	4a72      	ldr	r2, [pc, #456]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005aec:	fba2 2303 	umull	r2, r3, r2, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f003 020f 	and.w	r2, r3, #15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4442      	add	r2, r8
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e0d0      	b.n	8005ca2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7fe fd7a 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8005b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f04f 0b00 	mov.w	fp, #0
 8005b0e:	46d0      	mov	r8, sl
 8005b10:	46d9      	mov	r9, fp
 8005b12:	eb18 0308 	adds.w	r3, r8, r8
 8005b16:	eb49 0409 	adc.w	r4, r9, r9
 8005b1a:	4698      	mov	r8, r3
 8005b1c:	46a1      	mov	r9, r4
 8005b1e:	eb18 080a 	adds.w	r8, r8, sl
 8005b22:	eb49 090b 	adc.w	r9, r9, fp
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b3a:	4688      	mov	r8, r1
 8005b3c:	4691      	mov	r9, r2
 8005b3e:	eb1a 0508 	adds.w	r5, sl, r8
 8005b42:	eb4b 0609 	adc.w	r6, fp, r9
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	0094      	lsls	r4, r2, #2
 8005b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b5e:	008b      	lsls	r3, r1, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	4631      	mov	r1, r6
 8005b68:	f7fb f82e 	bl	8000bc8 <__aeabi_uldivmod>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005b74:	fba3 2302 	umull	r2, r3, r3, r2
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	469b      	mov	fp, r3
 8005b82:	f04f 0c00 	mov.w	ip, #0
 8005b86:	46d9      	mov	r9, fp
 8005b88:	46e2      	mov	sl, ip
 8005b8a:	eb19 0309 	adds.w	r3, r9, r9
 8005b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8005b92:	4699      	mov	r9, r3
 8005b94:	46a2      	mov	sl, r4
 8005b96:	eb19 090b 	adds.w	r9, r9, fp
 8005b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b9e:	f04f 0100 	mov.w	r1, #0
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bb2:	4689      	mov	r9, r1
 8005bb4:	4692      	mov	sl, r2
 8005bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8005bba:	eb4c 060a 	adc.w	r6, ip, sl
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	f04f 0400 	mov.w	r4, #0
 8005bd0:	0094      	lsls	r4, r2, #2
 8005bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bd6:	008b      	lsls	r3, r1, #2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4623      	mov	r3, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	4631      	mov	r1, r6
 8005be0:	f7fa fff2 	bl	8000bc8 <__aeabi_uldivmod>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	3332      	adds	r3, #50	; 0x32
 8005bfe:	4a2d      	ldr	r2, [pc, #180]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c0a:	4498      	add	r8, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	469b      	mov	fp, r3
 8005c10:	f04f 0c00 	mov.w	ip, #0
 8005c14:	46d9      	mov	r9, fp
 8005c16:	46e2      	mov	sl, ip
 8005c18:	eb19 0309 	adds.w	r3, r9, r9
 8005c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8005c20:	4699      	mov	r9, r3
 8005c22:	46a2      	mov	sl, r4
 8005c24:	eb19 090b 	adds.w	r9, r9, fp
 8005c28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c40:	4689      	mov	r9, r1
 8005c42:	4692      	mov	sl, r2
 8005c44:	eb1b 0509 	adds.w	r5, fp, r9
 8005c48:	eb4c 060a 	adc.w	r6, ip, sl
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	4619      	mov	r1, r3
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	f04f 0400 	mov.w	r4, #0
 8005c5e:	0094      	lsls	r4, r2, #2
 8005c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c64:	008b      	lsls	r3, r1, #2
 8005c66:	461a      	mov	r2, r3
 8005c68:	4623      	mov	r3, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	f7fa ffab 	bl	8000bc8 <__aeabi_uldivmod>
 8005c72:	4603      	mov	r3, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	461a      	mov	r2, r3
 8005c78:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2164      	movs	r1, #100	; 0x64
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3332      	adds	r3, #50	; 0x32
 8005c8c:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <UART_SetConfig+0x6f4>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4442      	add	r2, r8
 8005c9e:	609a      	str	r2, [r3, #8]
}
 8005ca0:	e7ff      	b.n	8005ca2 <UART_SetConfig+0x6e2>
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	51eb851f 	.word	0x51eb851f

08005cb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cca:	2b84      	cmp	r3, #132	; 0x84
 8005ccc:	d005      	beq.n	8005cda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005cce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3303      	adds	r3, #3
 8005cd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005cda:	68fb      	ldr	r3, [r7, #12]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cec:	f000 fada 	bl	80062a4 <vTaskStartScheduler>
  
  return osOK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cf8:	b089      	sub	sp, #36	; 0x24
 8005cfa:	af04      	add	r7, sp, #16
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d020      	beq.n	8005d4a <osThreadCreate+0x54>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01c      	beq.n	8005d4a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685c      	ldr	r4, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681d      	ldr	r5, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691e      	ldr	r6, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff ffc8 	bl	8005cb8 <makeFreeRtosPriority>
 8005d28:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d32:	9202      	str	r2, [sp, #8]
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	9100      	str	r1, [sp, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 f8ed 	bl	8005f1e <xTaskCreateStatic>
 8005d44:	4603      	mov	r3, r0
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e01c      	b.n	8005d84 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685c      	ldr	r4, [r3, #4]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d56:	b29e      	uxth	r6, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ffaa 	bl	8005cb8 <makeFreeRtosPriority>
 8005d64:	4602      	mov	r2, r0
 8005d66:	f107 030c 	add.w	r3, r7, #12
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	9200      	str	r2, [sp, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	4632      	mov	r2, r6
 8005d72:	4629      	mov	r1, r5
 8005d74:	4620      	mov	r0, r4
 8005d76:	f000 f92c 	bl	8005fd2 <xTaskCreate>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d001      	beq.n	8005d84 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d8e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <osDelay+0x16>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	e000      	b.n	8005da6 <osDelay+0x18>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fa48 	bl	800623c <vTaskDelay>
  
  return osOK;
 8005dac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <vListInitialise>:
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f103 0208 	add.w	r2, r3, #8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f04f 32ff 	mov.w	r2, #4294967295
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f103 0208 	add.w	r2, r3, #8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f103 0208 	add.w	r2, r3, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	611a      	str	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <vListInitialiseItem>:
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	611a      	str	r2, [r3, #16]
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <vListInsertEnd>:
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	609a      	str	r2, [r3, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	683a      	ldr	r2, [r7, #0]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	611a      	str	r2, [r3, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <vListInsert>:
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d103      	bne.n	8005e78 <vListInsert+0x20>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e00c      	b.n	8005e92 <vListInsert+0x3a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e002      	b.n	8005e86 <vListInsert+0x2e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d2f6      	bcs.n	8005e80 <vListInsert+0x28>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	611a      	str	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <uxListRemove>:
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6892      	ldr	r2, [r2, #8]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6852      	ldr	r2, [r2, #4]
 8005eea:	605a      	str	r2, [r3, #4]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d103      	bne.n	8005efe <uxListRemove+0x34>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	611a      	str	r2, [r3, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <xTaskCreateStatic>:
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b08e      	sub	sp, #56	; 0x38
 8005f22:	af04      	add	r7, sp, #16
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <xTaskCreateStatic+0x28>
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	e7fe      	b.n	8005f44 <xTaskCreateStatic+0x26>
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <xTaskCreateStatic+0x42>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	e7fe      	b.n	8005f5e <xTaskCreateStatic+0x40>
 8005f60:	2354      	movs	r3, #84	; 0x54
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b54      	cmp	r3, #84	; 0x54
 8005f68:	d009      	beq.n	8005f7e <xTaskCreateStatic+0x60>
 8005f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e7fe      	b.n	8005f7c <xTaskCreateStatic+0x5e>
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01e      	beq.n	8005fc4 <xTaskCreateStatic+0xa6>
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <xTaskCreateStatic+0xa6>
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9303      	str	r3, [sp, #12]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	9302      	str	r3, [sp, #8]
 8005fa6:	f107 0314 	add.w	r3, r7, #20
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f850 	bl	800605c <prvInitialiseNewTask>
 8005fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fbe:	f000 f8d3 	bl	8006168 <prvAddNewTaskToReadyList>
 8005fc2:	e001      	b.n	8005fc8 <xTaskCreateStatic+0xaa>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3728      	adds	r7, #40	; 0x28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <xTaskCreate>:
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b08c      	sub	sp, #48	; 0x30
 8005fd6:	af04      	add	r7, sp, #16
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 feb4 	bl	8006d54 <pvPortMalloc>
 8005fec:	6178      	str	r0, [r7, #20]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00e      	beq.n	8006012 <xTaskCreate+0x40>
 8005ff4:	2054      	movs	r0, #84	; 0x54
 8005ff6:	f000 fead 	bl	8006d54 <pvPortMalloc>
 8005ffa:	61f8      	str	r0, [r7, #28]
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <xTaskCreate+0x38>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
 8006008:	e005      	b.n	8006016 <xTaskCreate+0x44>
 800600a:	6978      	ldr	r0, [r7, #20]
 800600c:	f000 ff64 	bl	8006ed8 <vPortFree>
 8006010:	e001      	b.n	8006016 <xTaskCreate+0x44>
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <xTaskCreate+0x7a>
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8006024:	88fa      	ldrh	r2, [r7, #6]
 8006026:	2300      	movs	r3, #0
 8006028:	9303      	str	r3, [sp, #12]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	9302      	str	r3, [sp, #8]
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f80e 	bl	800605c <prvInitialiseNewTask>
 8006040:	69f8      	ldr	r0, [r7, #28]
 8006042:	f000 f891 	bl	8006168 <prvAddNewTaskToReadyList>
 8006046:	2301      	movs	r3, #1
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e002      	b.n	8006052 <xTaskCreate+0x80>
 800604c:	f04f 33ff 	mov.w	r3, #4294967295
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	4618      	mov	r0, r3
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <prvInitialiseNewTask>:
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006074:	3b01      	subs	r3, #1
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f023 0307 	bic.w	r3, r3, #7
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <prvInitialiseNewTask+0x46>
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	e7fe      	b.n	80060a0 <prvInitialiseNewTask+0x44>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01f      	beq.n	80060e8 <prvInitialiseNewTask+0x8c>
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	e012      	b.n	80060d4 <prvInitialiseNewTask+0x78>
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	7819      	ldrb	r1, [r3, #0]
 80060b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	3334      	adds	r3, #52	; 0x34
 80060be:	460a      	mov	r2, r1
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d006      	beq.n	80060dc <prvInitialiseNewTask+0x80>
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3301      	adds	r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d9e9      	bls.n	80060ae <prvInitialiseNewTask+0x52>
 80060da:	e000      	b.n	80060de <prvInitialiseNewTask+0x82>
 80060dc:	bf00      	nop
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060e6:	e003      	b.n	80060f0 <prvInitialiseNewTask+0x94>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	2b06      	cmp	r3, #6
 80060f4:	d901      	bls.n	80060fa <prvInitialiseNewTask+0x9e>
 80060f6:	2306      	movs	r3, #6
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006104:	645a      	str	r2, [r3, #68]	; 0x44
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2200      	movs	r2, #0
 800610a:	649a      	str	r2, [r3, #72]	; 0x48
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	3304      	adds	r3, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fe70 	bl	8005df6 <vListInitialiseItem>
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	3318      	adds	r3, #24
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fe6b 	bl	8005df6 <vListInitialiseItem>
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006124:	611a      	str	r2, [r3, #16]
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	f1c3 0207 	rsb	r2, r3, #7
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	619a      	str	r2, [r3, #24]
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	625a      	str	r2, [r3, #36]	; 0x24
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	2200      	movs	r2, #0
 800613a:	64da      	str	r2, [r3, #76]	; 0x4c
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	69b8      	ldr	r0, [r7, #24]
 800614a:	f000 fbfd 	bl	8006948 <pxPortInitialiseStack>
 800614e:	4602      	mov	r2, r0
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <prvInitialiseNewTask+0x104>
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <prvAddNewTaskToReadyList>:
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	f000 fd14 	bl	8006b9c <vPortEnterCritical>
 8006174:	4b2a      	ldr	r3, [pc, #168]	; (8006220 <prvAddNewTaskToReadyList+0xb8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	4a29      	ldr	r2, [pc, #164]	; (8006220 <prvAddNewTaskToReadyList+0xb8>)
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <prvAddNewTaskToReadyList+0xbc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <prvAddNewTaskToReadyList+0x32>
 8006186:	4a27      	ldr	r2, [pc, #156]	; (8006224 <prvAddNewTaskToReadyList+0xbc>)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4b24      	ldr	r3, [pc, #144]	; (8006220 <prvAddNewTaskToReadyList+0xb8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d110      	bne.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
 8006194:	f000 fab8 	bl	8006708 <prvInitialiseTaskLists>
 8006198:	e00d      	b.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
 800619a:	4b23      	ldr	r3, [pc, #140]	; (8006228 <prvAddNewTaskToReadyList+0xc0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
 80061a2:	4b20      	ldr	r3, [pc, #128]	; (8006224 <prvAddNewTaskToReadyList+0xbc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d802      	bhi.n	80061b6 <prvAddNewTaskToReadyList+0x4e>
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <prvAddNewTaskToReadyList+0xbc>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b1d      	ldr	r3, [pc, #116]	; (800622c <prvAddNewTaskToReadyList+0xc4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <prvAddNewTaskToReadyList+0xc4>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	2201      	movs	r2, #1
 80061c6:	409a      	lsls	r2, r3
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <prvAddNewTaskToReadyList+0xc8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	4a18      	ldr	r2, [pc, #96]	; (8006230 <prvAddNewTaskToReadyList+0xc8>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4a15      	ldr	r2, [pc, #84]	; (8006234 <prvAddNewTaskToReadyList+0xcc>)
 80061e0:	441a      	add	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4610      	mov	r0, r2
 80061ea:	f7ff fe11 	bl	8005e10 <vListInsertEnd>
 80061ee:	f000 fd03 	bl	8006bf8 <vPortExitCritical>
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <prvAddNewTaskToReadyList+0xc0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <prvAddNewTaskToReadyList+0xb0>
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <prvAddNewTaskToReadyList+0xbc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	429a      	cmp	r2, r3
 8006206:	d207      	bcs.n	8006218 <prvAddNewTaskToReadyList+0xb0>
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <prvAddNewTaskToReadyList+0xd0>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	200003f0 	.word	0x200003f0
 8006224:	200002f0 	.word	0x200002f0
 8006228:	200003fc 	.word	0x200003fc
 800622c:	2000040c 	.word	0x2000040c
 8006230:	200003f8 	.word	0x200003f8
 8006234:	200002f4 	.word	0x200002f4
 8006238:	e000ed04 	.word	0xe000ed04

0800623c <vTaskDelay>:
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	2300      	movs	r3, #0
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d016      	beq.n	800627c <vTaskDelay+0x40>
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <vTaskDelay+0x60>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <vTaskDelay+0x2e>
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	60bb      	str	r3, [r7, #8]
 8006268:	e7fe      	b.n	8006268 <vTaskDelay+0x2c>
 800626a:	f000 f879 	bl	8006360 <vTaskSuspendAll>
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fb03 	bl	800687c <prvAddCurrentTaskToDelayedList>
 8006276:	f000 f881 	bl	800637c <xTaskResumeAll>
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <vTaskDelay+0x56>
 8006282:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <vTaskDelay+0x64>)
 8006284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000418 	.word	0x20000418
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <vTaskStartScheduler>:
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	; 0x28
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	463a      	mov	r2, r7
 80062b4:	1d39      	adds	r1, r7, #4
 80062b6:	f107 0308 	add.w	r3, r7, #8
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fb fd0e 	bl	8001cdc <vApplicationGetIdleTaskMemory>
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	9202      	str	r2, [sp, #8]
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	2300      	movs	r3, #0
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	2300      	movs	r3, #0
 80062d0:	460a      	mov	r2, r1
 80062d2:	491d      	ldr	r1, [pc, #116]	; (8006348 <vTaskStartScheduler+0xa4>)
 80062d4:	481d      	ldr	r0, [pc, #116]	; (800634c <vTaskStartScheduler+0xa8>)
 80062d6:	f7ff fe22 	bl	8005f1e <xTaskCreateStatic>
 80062da:	4602      	mov	r2, r0
 80062dc:	4b1c      	ldr	r3, [pc, #112]	; (8006350 <vTaskStartScheduler+0xac>)
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <vTaskStartScheduler+0xac>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <vTaskStartScheduler+0x4a>
 80062e8:	2301      	movs	r3, #1
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e001      	b.n	80062f2 <vTaskStartScheduler+0x4e>
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d115      	bne.n	8006324 <vTaskStartScheduler+0x80>
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	4b12      	ldr	r3, [pc, #72]	; (8006354 <vTaskStartScheduler+0xb0>)
 800630c:	f04f 32ff 	mov.w	r2, #4294967295
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <vTaskStartScheduler+0xb4>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	4b10      	ldr	r3, [pc, #64]	; (800635c <vTaskStartScheduler+0xb8>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f000 fb9f 	bl	8006a60 <xPortStartScheduler>
 8006322:	e00d      	b.n	8006340 <vTaskStartScheduler+0x9c>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d109      	bne.n	8006340 <vTaskStartScheduler+0x9c>
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e7fe      	b.n	800633e <vTaskStartScheduler+0x9a>
 8006340:	bf00      	nop
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	08009180 	.word	0x08009180
 800634c:	080066d9 	.word	0x080066d9
 8006350:	20000414 	.word	0x20000414
 8006354:	20000410 	.word	0x20000410
 8006358:	200003fc 	.word	0x200003fc
 800635c:	200003f4 	.word	0x200003f4

08006360 <vTaskSuspendAll>:
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
 8006364:	4b04      	ldr	r3, [pc, #16]	; (8006378 <vTaskSuspendAll+0x18>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a03      	ldr	r2, [pc, #12]	; (8006378 <vTaskSuspendAll+0x18>)
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	bf00      	nop
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	20000418 	.word	0x20000418

0800637c <xTaskResumeAll>:
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	4b41      	ldr	r3, [pc, #260]	; (8006490 <xTaskResumeAll+0x114>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <xTaskResumeAll+0x2a>
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	e7fe      	b.n	80063a4 <xTaskResumeAll+0x28>
 80063a6:	f000 fbf9 	bl	8006b9c <vPortEnterCritical>
 80063aa:	4b39      	ldr	r3, [pc, #228]	; (8006490 <xTaskResumeAll+0x114>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	4a37      	ldr	r2, [pc, #220]	; (8006490 <xTaskResumeAll+0x114>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b36      	ldr	r3, [pc, #216]	; (8006490 <xTaskResumeAll+0x114>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d161      	bne.n	8006480 <xTaskResumeAll+0x104>
 80063bc:	4b35      	ldr	r3, [pc, #212]	; (8006494 <xTaskResumeAll+0x118>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d05d      	beq.n	8006480 <xTaskResumeAll+0x104>
 80063c4:	e02e      	b.n	8006424 <xTaskResumeAll+0xa8>
 80063c6:	4b34      	ldr	r3, [pc, #208]	; (8006498 <xTaskResumeAll+0x11c>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fd79 	bl	8005eca <uxListRemove>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3304      	adds	r3, #4
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fd74 	bl	8005eca <uxListRemove>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	2201      	movs	r2, #1
 80063e8:	409a      	lsls	r2, r3
 80063ea:	4b2c      	ldr	r3, [pc, #176]	; (800649c <xTaskResumeAll+0x120>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	4a2a      	ldr	r2, [pc, #168]	; (800649c <xTaskResumeAll+0x120>)
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <xTaskResumeAll+0x124>)
 8006402:	441a      	add	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7ff fd00 	bl	8005e10 <vListInsertEnd>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4b23      	ldr	r3, [pc, #140]	; (80064a4 <xTaskResumeAll+0x128>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <xTaskResumeAll+0xa8>
 800641e:	4b22      	ldr	r3, [pc, #136]	; (80064a8 <xTaskResumeAll+0x12c>)
 8006420:	2201      	movs	r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <xTaskResumeAll+0x11c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1cc      	bne.n	80063c6 <xTaskResumeAll+0x4a>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <xTaskResumeAll+0xba>
 8006432:	f000 fa03 	bl	800683c <prvResetNextTaskUnblockTime>
 8006436:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <xTaskResumeAll+0x130>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d010      	beq.n	8006464 <xTaskResumeAll+0xe8>
 8006442:	f000 f837 	bl	80064b4 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <xTaskResumeAll+0xd6>
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <xTaskResumeAll+0x12c>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3b01      	subs	r3, #1
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f1      	bne.n	8006442 <xTaskResumeAll+0xc6>
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <xTaskResumeAll+0x130>)
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <xTaskResumeAll+0x12c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <xTaskResumeAll+0x104>
 800646c:	2301      	movs	r3, #1
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <xTaskResumeAll+0x134>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f000 fbba 	bl	8006bf8 <vPortExitCritical>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000418 	.word	0x20000418
 8006494:	200003f0 	.word	0x200003f0
 8006498:	200003b0 	.word	0x200003b0
 800649c:	200003f8 	.word	0x200003f8
 80064a0:	200002f4 	.word	0x200002f4
 80064a4:	200002f0 	.word	0x200002f0
 80064a8:	20000404 	.word	0x20000404
 80064ac:	20000400 	.word	0x20000400
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <xTaskIncrementTick>:
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	4b4e      	ldr	r3, [pc, #312]	; (80065f8 <xTaskIncrementTick+0x144>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f040 8087 	bne.w	80065d6 <xTaskIncrementTick+0x122>
 80064c8:	4b4c      	ldr	r3, [pc, #304]	; (80065fc <xTaskIncrementTick+0x148>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	4a4a      	ldr	r2, [pc, #296]	; (80065fc <xTaskIncrementTick+0x148>)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11f      	bne.n	800651c <xTaskIncrementTick+0x68>
 80064dc:	4b48      	ldr	r3, [pc, #288]	; (8006600 <xTaskIncrementTick+0x14c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <xTaskIncrementTick+0x46>
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	e7fe      	b.n	80064f8 <xTaskIncrementTick+0x44>
 80064fa:	4b41      	ldr	r3, [pc, #260]	; (8006600 <xTaskIncrementTick+0x14c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	4b40      	ldr	r3, [pc, #256]	; (8006604 <xTaskIncrementTick+0x150>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a3e      	ldr	r2, [pc, #248]	; (8006600 <xTaskIncrementTick+0x14c>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	4a3e      	ldr	r2, [pc, #248]	; (8006604 <xTaskIncrementTick+0x150>)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	4b3e      	ldr	r3, [pc, #248]	; (8006608 <xTaskIncrementTick+0x154>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a3c      	ldr	r2, [pc, #240]	; (8006608 <xTaskIncrementTick+0x154>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	f000 f990 	bl	800683c <prvResetNextTaskUnblockTime>
 800651c:	4b3b      	ldr	r3, [pc, #236]	; (800660c <xTaskIncrementTick+0x158>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	429a      	cmp	r2, r3
 8006524:	d348      	bcc.n	80065b8 <xTaskIncrementTick+0x104>
 8006526:	4b36      	ldr	r3, [pc, #216]	; (8006600 <xTaskIncrementTick+0x14c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <xTaskIncrementTick+0x86>
 8006530:	4b36      	ldr	r3, [pc, #216]	; (800660c <xTaskIncrementTick+0x158>)
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	e03e      	b.n	80065b8 <xTaskIncrementTick+0x104>
 800653a:	4b31      	ldr	r3, [pc, #196]	; (8006600 <xTaskIncrementTick+0x14c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	607b      	str	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	429a      	cmp	r2, r3
 8006550:	d203      	bcs.n	800655a <xTaskIncrementTick+0xa6>
 8006552:	4a2e      	ldr	r2, [pc, #184]	; (800660c <xTaskIncrementTick+0x158>)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e02e      	b.n	80065b8 <xTaskIncrementTick+0x104>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3304      	adds	r3, #4
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fcb3 	bl	8005eca <uxListRemove>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <xTaskIncrementTick+0xc2>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	3318      	adds	r3, #24
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fcaa 	bl	8005eca <uxListRemove>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	2201      	movs	r2, #1
 800657c:	409a      	lsls	r2, r3
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <xTaskIncrementTick+0x15c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	4a22      	ldr	r2, [pc, #136]	; (8006610 <xTaskIncrementTick+0x15c>)
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <xTaskIncrementTick+0x160>)
 8006596:	441a      	add	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7ff fc36 	bl	8005e10 <vListInsertEnd>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <xTaskIncrementTick+0x164>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d3b9      	bcc.n	8006526 <xTaskIncrementTick+0x72>
 80065b2:	2301      	movs	r3, #1
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	e7b6      	b.n	8006526 <xTaskIncrementTick+0x72>
 80065b8:	4b17      	ldr	r3, [pc, #92]	; (8006618 <xTaskIncrementTick+0x164>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	4915      	ldr	r1, [pc, #84]	; (8006614 <xTaskIncrementTick+0x160>)
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	440b      	add	r3, r1
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d907      	bls.n	80065e0 <xTaskIncrementTick+0x12c>
 80065d0:	2301      	movs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e004      	b.n	80065e0 <xTaskIncrementTick+0x12c>
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <xTaskIncrementTick+0x168>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	4a0f      	ldr	r2, [pc, #60]	; (800661c <xTaskIncrementTick+0x168>)
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <xTaskIncrementTick+0x16c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <xTaskIncrementTick+0x138>
 80065e8:	2301      	movs	r3, #1
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000418 	.word	0x20000418
 80065fc:	200003f4 	.word	0x200003f4
 8006600:	200003a8 	.word	0x200003a8
 8006604:	200003ac 	.word	0x200003ac
 8006608:	20000408 	.word	0x20000408
 800660c:	20000410 	.word	0x20000410
 8006610:	200003f8 	.word	0x200003f8
 8006614:	200002f4 	.word	0x200002f4
 8006618:	200002f0 	.word	0x200002f0
 800661c:	20000400 	.word	0x20000400
 8006620:	20000404 	.word	0x20000404

08006624 <vTaskSwitchContext>:
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <vTaskSwitchContext+0xa0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <vTaskSwitchContext+0x16>
 8006632:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <vTaskSwitchContext+0xa4>)
 8006634:	2201      	movs	r2, #1
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	e03e      	b.n	80066b8 <vTaskSwitchContext+0x94>
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <vTaskSwitchContext+0xa4>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	4b22      	ldr	r3, [pc, #136]	; (80066cc <vTaskSwitchContext+0xa8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	fab3 f383 	clz	r3, r3
 800664c:	72fb      	strb	r3, [r7, #11]
 800664e:	7afb      	ldrb	r3, [r7, #11]
 8006650:	f1c3 031f 	rsb	r3, r3, #31
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	491e      	ldr	r1, [pc, #120]	; (80066d0 <vTaskSwitchContext+0xac>)
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <vTaskSwitchContext+0x5a>
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	e7fe      	b.n	800667c <vTaskSwitchContext+0x58>
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <vTaskSwitchContext+0xac>)
 800668a:	4413      	add	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3308      	adds	r3, #8
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d104      	bne.n	80066ae <vTaskSwitchContext+0x8a>
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a07      	ldr	r2, [pc, #28]	; (80066d4 <vTaskSwitchContext+0xb0>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	20000418 	.word	0x20000418
 80066c8:	20000404 	.word	0x20000404
 80066cc:	200003f8 	.word	0x200003f8
 80066d0:	200002f4 	.word	0x200002f4
 80066d4:	200002f0 	.word	0x200002f0

080066d8 <prvIdleTask>:
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	f000 f852 	bl	8006788 <prvCheckTasksWaitingTermination>
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <prvIdleTask+0x28>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d9f9      	bls.n	80066e0 <prvIdleTask+0x8>
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <prvIdleTask+0x2c>)
 80066ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	e7f0      	b.n	80066e0 <prvIdleTask+0x8>
 80066fe:	bf00      	nop
 8006700:	200002f4 	.word	0x200002f4
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <prvInitialiseTaskLists>:
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
 8006712:	e00c      	b.n	800672e <prvInitialiseTaskLists+0x26>
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4a12      	ldr	r2, [pc, #72]	; (8006768 <prvInitialiseTaskLists+0x60>)
 8006720:	4413      	add	r3, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fb47 	bl	8005db6 <vListInitialise>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3301      	adds	r3, #1
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b06      	cmp	r3, #6
 8006732:	d9ef      	bls.n	8006714 <prvInitialiseTaskLists+0xc>
 8006734:	480d      	ldr	r0, [pc, #52]	; (800676c <prvInitialiseTaskLists+0x64>)
 8006736:	f7ff fb3e 	bl	8005db6 <vListInitialise>
 800673a:	480d      	ldr	r0, [pc, #52]	; (8006770 <prvInitialiseTaskLists+0x68>)
 800673c:	f7ff fb3b 	bl	8005db6 <vListInitialise>
 8006740:	480c      	ldr	r0, [pc, #48]	; (8006774 <prvInitialiseTaskLists+0x6c>)
 8006742:	f7ff fb38 	bl	8005db6 <vListInitialise>
 8006746:	480c      	ldr	r0, [pc, #48]	; (8006778 <prvInitialiseTaskLists+0x70>)
 8006748:	f7ff fb35 	bl	8005db6 <vListInitialise>
 800674c:	480b      	ldr	r0, [pc, #44]	; (800677c <prvInitialiseTaskLists+0x74>)
 800674e:	f7ff fb32 	bl	8005db6 <vListInitialise>
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <prvInitialiseTaskLists+0x78>)
 8006754:	4a05      	ldr	r2, [pc, #20]	; (800676c <prvInitialiseTaskLists+0x64>)
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <prvInitialiseTaskLists+0x7c>)
 800675a:	4a05      	ldr	r2, [pc, #20]	; (8006770 <prvInitialiseTaskLists+0x68>)
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	bf00      	nop
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	200002f4 	.word	0x200002f4
 800676c:	20000380 	.word	0x20000380
 8006770:	20000394 	.word	0x20000394
 8006774:	200003b0 	.word	0x200003b0
 8006778:	200003c4 	.word	0x200003c4
 800677c:	200003dc 	.word	0x200003dc
 8006780:	200003a8 	.word	0x200003a8
 8006784:	200003ac 	.word	0x200003ac

08006788 <prvCheckTasksWaitingTermination>:
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	e019      	b.n	80067c4 <prvCheckTasksWaitingTermination+0x3c>
 8006790:	f000 fa04 	bl	8006b9c <vPortEnterCritical>
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <prvCheckTasksWaitingTermination+0x4c>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fb92 	bl	8005eca <uxListRemove>
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <prvCheckTasksWaitingTermination+0x50>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3b01      	subs	r3, #1
 80067ac:	4a0a      	ldr	r2, [pc, #40]	; (80067d8 <prvCheckTasksWaitingTermination+0x50>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <prvCheckTasksWaitingTermination+0x54>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	4a09      	ldr	r2, [pc, #36]	; (80067dc <prvCheckTasksWaitingTermination+0x54>)
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	f000 fa1d 	bl	8006bf8 <vPortExitCritical>
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f80e 	bl	80067e0 <prvDeleteTCB>
 80067c4:	4b05      	ldr	r3, [pc, #20]	; (80067dc <prvCheckTasksWaitingTermination+0x54>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e1      	bne.n	8006790 <prvCheckTasksWaitingTermination+0x8>
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	200003c4 	.word	0x200003c4
 80067d8:	200003f0 	.word	0x200003f0
 80067dc:	200003d8 	.word	0x200003d8

080067e0 <prvDeleteTCB>:
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <prvDeleteTCB+0x24>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fb6e 	bl	8006ed8 <vPortFree>
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fb6b 	bl	8006ed8 <vPortFree>
 8006802:	e017      	b.n	8006834 <prvDeleteTCB+0x54>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800680a:	2b01      	cmp	r3, #1
 800680c:	d103      	bne.n	8006816 <prvDeleteTCB+0x36>
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb62 	bl	8006ed8 <vPortFree>
 8006814:	e00e      	b.n	8006834 <prvDeleteTCB+0x54>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800681c:	2b02      	cmp	r3, #2
 800681e:	d009      	beq.n	8006834 <prvDeleteTCB+0x54>
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e7fe      	b.n	8006832 <prvDeleteTCB+0x52>
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvResetNextTaskUnblockTime>:
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <prvResetNextTaskUnblockTime+0x38>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <prvResetNextTaskUnblockTime+0x1a>
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <prvResetNextTaskUnblockTime+0x3c>)
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	e008      	b.n	8006868 <prvResetNextTaskUnblockTime+0x2c>
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <prvResetNextTaskUnblockTime+0x38>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	607b      	str	r3, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a04      	ldr	r2, [pc, #16]	; (8006878 <prvResetNextTaskUnblockTime+0x3c>)
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	200003a8 	.word	0x200003a8
 8006878:	20000410 	.word	0x20000410

0800687c <prvAddCurrentTaskToDelayedList>:
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	4b29      	ldr	r3, [pc, #164]	; (800692c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	4b28      	ldr	r3, [pc, #160]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3304      	adds	r3, #4
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fb19 	bl	8005eca <uxListRemove>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800689e:	4b24      	ldr	r3, [pc, #144]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	2201      	movs	r2, #1
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43da      	mvns	r2, r3
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4013      	ands	r3, r2
 80068b2:	4a20      	ldr	r2, [pc, #128]	; (8006934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068b4:	6013      	str	r3, [r2, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d10a      	bne.n	80068d4 <prvAddCurrentTaskToDelayedList+0x58>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <prvAddCurrentTaskToDelayedList+0x58>
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	481a      	ldr	r0, [pc, #104]	; (8006938 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068ce:	f7ff fa9f 	bl	8005e10 <vListInsertEnd>
 80068d2:	e026      	b.n	8006922 <prvAddCurrentTaskToDelayedList+0xa6>
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	605a      	str	r2, [r3, #4]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d209      	bcs.n	8006900 <prvAddCurrentTaskToDelayedList+0x84>
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <prvAddCurrentTaskToDelayedList+0xc0>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7ff faad 	bl	8005e58 <vListInsert>
 80068fe:	e010      	b.n	8006922 <prvAddCurrentTaskToDelayedList+0xa6>
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7ff faa3 	bl	8005e58 <vListInsert>
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d202      	bcs.n	8006922 <prvAddCurrentTaskToDelayedList+0xa6>
 800691c:	4a09      	ldr	r2, [pc, #36]	; (8006944 <prvAddCurrentTaskToDelayedList+0xc8>)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200003f4 	.word	0x200003f4
 8006930:	200002f0 	.word	0x200002f0
 8006934:	200003f8 	.word	0x200003f8
 8006938:	200003dc 	.word	0x200003dc
 800693c:	200003ac 	.word	0x200003ac
 8006940:	200003a8 	.word	0x200003a8
 8006944:	20000410 	.word	0x20000410

08006948 <pxPortInitialiseStack>:
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3b04      	subs	r3, #4
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b04      	subs	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b04      	subs	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	4a0c      	ldr	r2, [pc, #48]	; (80069ac <pxPortInitialiseStack+0x64>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3b14      	subs	r3, #20
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f06f 0202 	mvn.w	r2, #2
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b20      	subs	r3, #32
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	080069b1 	.word	0x080069b1

080069b0 <prvTaskExitError>:
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <prvTaskExitError+0x50>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d009      	beq.n	80069d8 <prvTaskExitError+0x28>
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e7fe      	b.n	80069d6 <prvTaskExitError+0x26>
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60bb      	str	r3, [r7, #8]
 80069ea:	bf00      	nop
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0fc      	beq.n	80069ec <prvTaskExitError+0x3c>
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	2000000c 	.word	0x2000000c
	...

08006a10 <SVC_Handler>:
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <pxCurrentTCBConst2>)
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	6808      	ldr	r0, [r1, #0]
 8006a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	f380 8809 	msr	PSP, r0
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8811 	msr	BASEPRI, r0
 8006a2a:	4770      	bx	lr
 8006a2c:	f3af 8000 	nop.w

08006a30 <pxCurrentTCBConst2>:
 8006a30:	200002f0 	.word	0x200002f0
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop

08006a38 <prvPortStartFirstTask>:
 8006a38:	4808      	ldr	r0, [pc, #32]	; (8006a5c <prvPortStartFirstTask+0x24>)
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	6800      	ldr	r0, [r0, #0]
 8006a3e:	f380 8808 	msr	MSP, r0
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8814 	msr	CONTROL, r0
 8006a4a:	b662      	cpsie	i
 8006a4c:	b661      	cpsie	f
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	df00      	svc	0
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	e000ed08 	.word	0xe000ed08

08006a60 <xPortStartScheduler>:
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4b44      	ldr	r3, [pc, #272]	; (8006b78 <xPortStartScheduler+0x118>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a44      	ldr	r2, [pc, #272]	; (8006b7c <xPortStartScheduler+0x11c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d109      	bne.n	8006a84 <xPortStartScheduler+0x24>
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	e7fe      	b.n	8006a82 <xPortStartScheduler+0x22>
 8006a84:	4b3c      	ldr	r3, [pc, #240]	; (8006b78 <xPortStartScheduler+0x118>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a3d      	ldr	r2, [pc, #244]	; (8006b80 <xPortStartScheduler+0x120>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d109      	bne.n	8006aa2 <xPortStartScheduler+0x42>
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e7fe      	b.n	8006aa0 <xPortStartScheduler+0x40>
 8006aa2:	4b38      	ldr	r3, [pc, #224]	; (8006b84 <xPortStartScheduler+0x124>)
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	22ff      	movs	r2, #255	; 0xff
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	70fb      	strb	r3, [r7, #3]
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	4b30      	ldr	r3, [pc, #192]	; (8006b88 <xPortStartScheduler+0x128>)
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	4b30      	ldr	r3, [pc, #192]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006acc:	2207      	movs	r2, #7
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e009      	b.n	8006ae6 <xPortStartScheduler+0x86>
 8006ad2:	4b2e      	ldr	r3, [pc, #184]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	70fb      	strb	r3, [r7, #3]
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	d0ef      	beq.n	8006ad2 <xPortStartScheduler+0x72>
 8006af2:	4b26      	ldr	r3, [pc, #152]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1c3 0307 	rsb	r3, r3, #7
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d009      	beq.n	8006b12 <xPortStartScheduler+0xb2>
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	e7fe      	b.n	8006b10 <xPortStartScheduler+0xb0>
 8006b12:	4b1e      	ldr	r3, [pc, #120]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	021b      	lsls	r3, r3, #8
 8006b18:	4a1c      	ldr	r2, [pc, #112]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b24:	4a19      	ldr	r2, [pc, #100]	; (8006b8c <xPortStartScheduler+0x12c>)
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <xPortStartScheduler+0x130>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <xPortStartScheduler+0x130>)
 8006b36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <xPortStartScheduler+0x130>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <xPortStartScheduler+0x130>)
 8006b42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	f000 f8d6 	bl	8006cf8 <vPortSetupTimerInterrupt>
 8006b4c:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <xPortStartScheduler+0x134>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	f000 f8f5 	bl	8006d40 <vPortEnableVFP>
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <xPortStartScheduler+0x138>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a0f      	ldr	r2, [pc, #60]	; (8006b98 <xPortStartScheduler+0x138>)
 8006b5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	f7ff ff69 	bl	8006a38 <prvPortStartFirstTask>
 8006b66:	f7ff fd5d 	bl	8006624 <vTaskSwitchContext>
 8006b6a:	f7ff ff21 	bl	80069b0 <prvTaskExitError>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	e000ed00 	.word	0xe000ed00
 8006b7c:	410fc271 	.word	0x410fc271
 8006b80:	410fc270 	.word	0x410fc270
 8006b84:	e000e400 	.word	0xe000e400
 8006b88:	2000041c 	.word	0x2000041c
 8006b8c:	20000420 	.word	0x20000420
 8006b90:	e000ed20 	.word	0xe000ed20
 8006b94:	2000000c 	.word	0x2000000c
 8006b98:	e000ef34 	.word	0xe000ef34

08006b9c <vPortEnterCritical>:
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	4b0e      	ldr	r3, [pc, #56]	; (8006bf0 <vPortEnterCritical+0x54>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	4a0d      	ldr	r2, [pc, #52]	; (8006bf0 <vPortEnterCritical+0x54>)
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <vPortEnterCritical+0x54>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d10e      	bne.n	8006be4 <vPortEnterCritical+0x48>
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <vPortEnterCritical+0x58>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d009      	beq.n	8006be4 <vPortEnterCritical+0x48>
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	e7fe      	b.n	8006be2 <vPortEnterCritical+0x46>
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	2000000c 	.word	0x2000000c
 8006bf4:	e000ed04 	.word	0xe000ed04

08006bf8 <vPortExitCritical>:
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <vPortExitCritical+0x4c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <vPortExitCritical+0x22>
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	607b      	str	r3, [r7, #4]
 8006c18:	e7fe      	b.n	8006c18 <vPortExitCritical+0x20>
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <vPortExitCritical+0x4c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <vPortExitCritical+0x4c>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <vPortExitCritical+0x4c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <vPortExitCritical+0x3e>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000000c 	.word	0x2000000c
	...

08006c50 <PendSV_Handler>:
 8006c50:	f3ef 8009 	mrs	r0, PSP
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <pxCurrentTCBConst>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	f01e 0f10 	tst.w	lr, #16
 8006c60:	bf08      	it	eq
 8006c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c74:	f380 8811 	msr	BASEPRI, r0
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f7ff fcd0 	bl	8006624 <vTaskSwitchContext>
 8006c84:	f04f 0000 	mov.w	r0, #0
 8006c88:	f380 8811 	msr	BASEPRI, r0
 8006c8c:	bc09      	pop	{r0, r3}
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	6808      	ldr	r0, [r1, #0]
 8006c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	f01e 0f10 	tst.w	lr, #16
 8006c9a:	bf08      	it	eq
 8006c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ca0:	f380 8809 	msr	PSP, r0
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst>:
 8006cb0:	200002f0 	.word	0x200002f0
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop

08006cb8 <SysTick_Handler>:
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	f7ff fbf0 	bl	80064b4 <xTaskIncrementTick>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <SysTick_Handler+0x2a>
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <SysTick_Handler+0x3c>)
 8006cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	603b      	str	r3, [r7, #0]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <vPortSetupTimerInterrupt>:
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <vPortSetupTimerInterrupt+0x34>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <vPortSetupTimerInterrupt+0x38>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <vPortSetupTimerInterrupt+0x3c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <vPortSetupTimerInterrupt+0x40>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <vPortSetupTimerInterrupt+0x44>)
 8006d16:	3b01      	subs	r3, #1
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <vPortSetupTimerInterrupt+0x34>)
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	bf00      	nop
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	e000e010 	.word	0xe000e010
 8006d30:	e000e018 	.word	0xe000e018
 8006d34:	20000000 	.word	0x20000000
 8006d38:	10624dd3 	.word	0x10624dd3
 8006d3c:	e000e014 	.word	0xe000e014

08006d40 <vPortEnableVFP>:
 8006d40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d50 <vPortEnableVFP+0x10>
 8006d44:	6801      	ldr	r1, [r0, #0]
 8006d46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d4a:	6001      	str	r1, [r0, #0]
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000ed88 	.word	0xe000ed88

08006d54 <pvPortMalloc>:
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61fb      	str	r3, [r7, #28]
 8006d60:	f7ff fafe 	bl	8006360 <vTaskSuspendAll>
 8006d64:	4b57      	ldr	r3, [pc, #348]	; (8006ec4 <pvPortMalloc+0x170>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <pvPortMalloc+0x1c>
 8006d6c:	f000 f90c 	bl	8006f88 <prvHeapInit>
 8006d70:	4b55      	ldr	r3, [pc, #340]	; (8006ec8 <pvPortMalloc+0x174>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 808c 	bne.w	8006e96 <pvPortMalloc+0x142>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01c      	beq.n	8006dbe <pvPortMalloc+0x6a>
 8006d84:	2208      	movs	r2, #8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	607b      	str	r3, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d013      	beq.n	8006dbe <pvPortMalloc+0x6a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f023 0307 	bic.w	r3, r3, #7
 8006d9c:	3308      	adds	r3, #8
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <pvPortMalloc+0x6a>
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e7fe      	b.n	8006dbc <pvPortMalloc+0x68>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d068      	beq.n	8006e96 <pvPortMalloc+0x142>
 8006dc4:	4b41      	ldr	r3, [pc, #260]	; (8006ecc <pvPortMalloc+0x178>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d863      	bhi.n	8006e96 <pvPortMalloc+0x142>
 8006dce:	4b40      	ldr	r3, [pc, #256]	; (8006ed0 <pvPortMalloc+0x17c>)
 8006dd0:	623b      	str	r3, [r7, #32]
 8006dd2:	4b3f      	ldr	r3, [pc, #252]	; (8006ed0 <pvPortMalloc+0x17c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd8:	e004      	b.n	8006de4 <pvPortMalloc+0x90>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d903      	bls.n	8006df6 <pvPortMalloc+0xa2>
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1f1      	bne.n	8006dda <pvPortMalloc+0x86>
 8006df6:	4b33      	ldr	r3, [pc, #204]	; (8006ec4 <pvPortMalloc+0x170>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d04a      	beq.n	8006e96 <pvPortMalloc+0x142>
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2208      	movs	r2, #8
 8006e06:	4413      	add	r3, r2
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	1ad2      	subs	r2, r2, r3
 8006e1a:	2308      	movs	r3, #8
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d91e      	bls.n	8006e60 <pvPortMalloc+0x10c>
 8006e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d009      	beq.n	8006e48 <pvPortMalloc+0xf4>
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	e7fe      	b.n	8006e46 <pvPortMalloc+0xf2>
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	69b8      	ldr	r0, [r7, #24]
 8006e5c:	f000 f8f6 	bl	800704c <prvInsertBlockIntoFreeList>
 8006e60:	4b1a      	ldr	r3, [pc, #104]	; (8006ecc <pvPortMalloc+0x178>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	4a18      	ldr	r2, [pc, #96]	; (8006ecc <pvPortMalloc+0x178>)
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4b17      	ldr	r3, [pc, #92]	; (8006ecc <pvPortMalloc+0x178>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b18      	ldr	r3, [pc, #96]	; (8006ed4 <pvPortMalloc+0x180>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d203      	bcs.n	8006e82 <pvPortMalloc+0x12e>
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <pvPortMalloc+0x178>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <pvPortMalloc+0x180>)
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <pvPortMalloc+0x174>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	605a      	str	r2, [r3, #4]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f7ff fa71 	bl	800637c <xTaskResumeAll>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <pvPortMalloc+0x164>
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e7fe      	b.n	8006eb6 <pvPortMalloc+0x162>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3728      	adds	r7, #40	; 0x28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	2000402c 	.word	0x2000402c
 8006ec8:	20004038 	.word	0x20004038
 8006ecc:	20004030 	.word	0x20004030
 8006ed0:	20004024 	.word	0x20004024
 8006ed4:	20004034 	.word	0x20004034

08006ed8 <vPortFree>:
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d046      	beq.n	8006f78 <vPortFree+0xa0>
 8006eea:	2308      	movs	r3, #8
 8006eec:	425b      	negs	r3, r3
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4b20      	ldr	r3, [pc, #128]	; (8006f80 <vPortFree+0xa8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d109      	bne.n	8006f1a <vPortFree+0x42>
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e7fe      	b.n	8006f18 <vPortFree+0x40>
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <vPortFree+0x5e>
 8006f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	60bb      	str	r3, [r7, #8]
 8006f34:	e7fe      	b.n	8006f34 <vPortFree+0x5c>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	4b11      	ldr	r3, [pc, #68]	; (8006f80 <vPortFree+0xa8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d019      	beq.n	8006f78 <vPortFree+0xa0>
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d115      	bne.n	8006f78 <vPortFree+0xa0>
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <vPortFree+0xa8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	43db      	mvns	r3, r3
 8006f56:	401a      	ands	r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]
 8006f5c:	f7ff fa00 	bl	8006360 <vTaskSuspendAll>
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <vPortFree+0xac>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	4a06      	ldr	r2, [pc, #24]	; (8006f84 <vPortFree+0xac>)
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f000 f86c 	bl	800704c <prvInsertBlockIntoFreeList>
 8006f74:	f7ff fa02 	bl	800637c <xTaskResumeAll>
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20004038 	.word	0x20004038
 8006f84:	20004030 	.word	0x20004030

08006f88 <prvHeapInit>:
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	4b27      	ldr	r3, [pc, #156]	; (8007034 <prvHeapInit+0xac>)
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <prvHeapInit+0x34>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3307      	adds	r3, #7
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <prvHeapInit+0xac>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	60bb      	str	r3, [r7, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <prvHeapInit+0xb0>)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <prvHeapInit+0xb0>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	605a      	str	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0307 	bic.w	r3, r3, #7
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a15      	ldr	r2, [pc, #84]	; (800703c <prvHeapInit+0xb4>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	4b14      	ldr	r3, [pc, #80]	; (800703c <prvHeapInit+0xb4>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <prvHeapInit+0xb4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <prvHeapInit+0xb4>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <prvHeapInit+0xb8>)
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a09      	ldr	r2, [pc, #36]	; (8007044 <prvHeapInit+0xbc>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b09      	ldr	r3, [pc, #36]	; (8007048 <prvHeapInit+0xc0>)
 8007022:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	bf00      	nop
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	20000424 	.word	0x20000424
 8007038:	20004024 	.word	0x20004024
 800703c:	2000402c 	.word	0x2000402c
 8007040:	20004034 	.word	0x20004034
 8007044:	20004030 	.word	0x20004030
 8007048:	20004038 	.word	0x20004038

0800704c <prvInsertBlockIntoFreeList>:
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	4b28      	ldr	r3, [pc, #160]	; (80070f8 <prvInsertBlockIntoFreeList+0xac>)
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <prvInsertBlockIntoFreeList+0x14>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d8f7      	bhi.n	800705a <prvInsertBlockIntoFreeList+0xe>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d108      	bne.n	800708e <prvInsertBlockIntoFreeList+0x42>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d118      	bne.n	80070d4 <prvInsertBlockIntoFreeList+0x88>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d00d      	beq.n	80070ca <prvInsertBlockIntoFreeList+0x7e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
 80070ca:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e003      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d002      	beq.n	80070ea <prvInsertBlockIntoFreeList+0x9e>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20004024 	.word	0x20004024
 80070fc:	2000402c 	.word	0x2000402c

08007100 <__errno>:
 8007100:	4b01      	ldr	r3, [pc, #4]	; (8007108 <__errno+0x8>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000010 	.word	0x20000010

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4e0d      	ldr	r6, [pc, #52]	; (8007144 <__libc_init_array+0x38>)
 8007110:	4c0d      	ldr	r4, [pc, #52]	; (8007148 <__libc_init_array+0x3c>)
 8007112:	1ba4      	subs	r4, r4, r6
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	2500      	movs	r5, #0
 8007118:	42a5      	cmp	r5, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4e0b      	ldr	r6, [pc, #44]	; (800714c <__libc_init_array+0x40>)
 800711e:	4c0c      	ldr	r4, [pc, #48]	; (8007150 <__libc_init_array+0x44>)
 8007120:	f001 ff6c 	bl	8008ffc <_init>
 8007124:	1ba4      	subs	r4, r4, r6
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	2500      	movs	r5, #0
 800712a:	42a5      	cmp	r5, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007134:	4798      	blx	r3
 8007136:	3501      	adds	r5, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800713e:	4798      	blx	r3
 8007140:	3501      	adds	r5, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	08009288 	.word	0x08009288
 8007148:	08009288 	.word	0x08009288
 800714c:	08009288 	.word	0x08009288
 8007150:	0800928c 	.word	0x0800928c

08007154 <malloc>:
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <malloc+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f000 b859 	b.w	8007210 <_malloc_r>
 800715e:	bf00      	nop
 8007160:	20000010 	.word	0x20000010

08007164 <memset>:
 8007164:	4402      	add	r2, r0
 8007166:	4603      	mov	r3, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <_free_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4605      	mov	r5, r0
 8007178:	2900      	cmp	r1, #0
 800717a:	d045      	beq.n	8007208 <_free_r+0x94>
 800717c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007180:	1f0c      	subs	r4, r1, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	bfb8      	it	lt
 8007186:	18e4      	addlt	r4, r4, r3
 8007188:	f000 f996 	bl	80074b8 <__malloc_lock>
 800718c:	4a1f      	ldr	r2, [pc, #124]	; (800720c <_free_r+0x98>)
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	4610      	mov	r0, r2
 8007192:	b933      	cbnz	r3, 80071a2 <_free_r+0x2e>
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	6014      	str	r4, [r2, #0]
 8007198:	4628      	mov	r0, r5
 800719a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719e:	f000 b98c 	b.w	80074ba <__malloc_unlock>
 80071a2:	42a3      	cmp	r3, r4
 80071a4:	d90c      	bls.n	80071c0 <_free_r+0x4c>
 80071a6:	6821      	ldr	r1, [r4, #0]
 80071a8:	1862      	adds	r2, r4, r1
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bf04      	itt	eq
 80071ae:	681a      	ldreq	r2, [r3, #0]
 80071b0:	685b      	ldreq	r3, [r3, #4]
 80071b2:	6063      	str	r3, [r4, #4]
 80071b4:	bf04      	itt	eq
 80071b6:	1852      	addeq	r2, r2, r1
 80071b8:	6022      	streq	r2, [r4, #0]
 80071ba:	6004      	str	r4, [r0, #0]
 80071bc:	e7ec      	b.n	8007198 <_free_r+0x24>
 80071be:	4613      	mov	r3, r2
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	b10a      	cbz	r2, 80071c8 <_free_r+0x54>
 80071c4:	42a2      	cmp	r2, r4
 80071c6:	d9fa      	bls.n	80071be <_free_r+0x4a>
 80071c8:	6819      	ldr	r1, [r3, #0]
 80071ca:	1858      	adds	r0, r3, r1
 80071cc:	42a0      	cmp	r0, r4
 80071ce:	d10b      	bne.n	80071e8 <_free_r+0x74>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	4401      	add	r1, r0
 80071d4:	1858      	adds	r0, r3, r1
 80071d6:	4282      	cmp	r2, r0
 80071d8:	6019      	str	r1, [r3, #0]
 80071da:	d1dd      	bne.n	8007198 <_free_r+0x24>
 80071dc:	6810      	ldr	r0, [r2, #0]
 80071de:	6852      	ldr	r2, [r2, #4]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	4401      	add	r1, r0
 80071e4:	6019      	str	r1, [r3, #0]
 80071e6:	e7d7      	b.n	8007198 <_free_r+0x24>
 80071e8:	d902      	bls.n	80071f0 <_free_r+0x7c>
 80071ea:	230c      	movs	r3, #12
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	e7d3      	b.n	8007198 <_free_r+0x24>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	1821      	adds	r1, r4, r0
 80071f4:	428a      	cmp	r2, r1
 80071f6:	bf04      	itt	eq
 80071f8:	6811      	ldreq	r1, [r2, #0]
 80071fa:	6852      	ldreq	r2, [r2, #4]
 80071fc:	6062      	str	r2, [r4, #4]
 80071fe:	bf04      	itt	eq
 8007200:	1809      	addeq	r1, r1, r0
 8007202:	6021      	streq	r1, [r4, #0]
 8007204:	605c      	str	r4, [r3, #4]
 8007206:	e7c7      	b.n	8007198 <_free_r+0x24>
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	2000403c 	.word	0x2000403c

08007210 <_malloc_r>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	1ccd      	adds	r5, r1, #3
 8007214:	f025 0503 	bic.w	r5, r5, #3
 8007218:	3508      	adds	r5, #8
 800721a:	2d0c      	cmp	r5, #12
 800721c:	bf38      	it	cc
 800721e:	250c      	movcc	r5, #12
 8007220:	2d00      	cmp	r5, #0
 8007222:	4606      	mov	r6, r0
 8007224:	db01      	blt.n	800722a <_malloc_r+0x1a>
 8007226:	42a9      	cmp	r1, r5
 8007228:	d903      	bls.n	8007232 <_malloc_r+0x22>
 800722a:	230c      	movs	r3, #12
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	2000      	movs	r0, #0
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	f000 f941 	bl	80074b8 <__malloc_lock>
 8007236:	4a21      	ldr	r2, [pc, #132]	; (80072bc <_malloc_r+0xac>)
 8007238:	6814      	ldr	r4, [r2, #0]
 800723a:	4621      	mov	r1, r4
 800723c:	b991      	cbnz	r1, 8007264 <_malloc_r+0x54>
 800723e:	4c20      	ldr	r4, [pc, #128]	; (80072c0 <_malloc_r+0xb0>)
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	b91b      	cbnz	r3, 800724c <_malloc_r+0x3c>
 8007244:	4630      	mov	r0, r6
 8007246:	f000 f855 	bl	80072f4 <_sbrk_r>
 800724a:	6020      	str	r0, [r4, #0]
 800724c:	4629      	mov	r1, r5
 800724e:	4630      	mov	r0, r6
 8007250:	f000 f850 	bl	80072f4 <_sbrk_r>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d124      	bne.n	80072a2 <_malloc_r+0x92>
 8007258:	230c      	movs	r3, #12
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	4630      	mov	r0, r6
 800725e:	f000 f92c 	bl	80074ba <__malloc_unlock>
 8007262:	e7e4      	b.n	800722e <_malloc_r+0x1e>
 8007264:	680b      	ldr	r3, [r1, #0]
 8007266:	1b5b      	subs	r3, r3, r5
 8007268:	d418      	bmi.n	800729c <_malloc_r+0x8c>
 800726a:	2b0b      	cmp	r3, #11
 800726c:	d90f      	bls.n	800728e <_malloc_r+0x7e>
 800726e:	600b      	str	r3, [r1, #0]
 8007270:	50cd      	str	r5, [r1, r3]
 8007272:	18cc      	adds	r4, r1, r3
 8007274:	4630      	mov	r0, r6
 8007276:	f000 f920 	bl	80074ba <__malloc_unlock>
 800727a:	f104 000b 	add.w	r0, r4, #11
 800727e:	1d23      	adds	r3, r4, #4
 8007280:	f020 0007 	bic.w	r0, r0, #7
 8007284:	1ac3      	subs	r3, r0, r3
 8007286:	d0d3      	beq.n	8007230 <_malloc_r+0x20>
 8007288:	425a      	negs	r2, r3
 800728a:	50e2      	str	r2, [r4, r3]
 800728c:	e7d0      	b.n	8007230 <_malloc_r+0x20>
 800728e:	428c      	cmp	r4, r1
 8007290:	684b      	ldr	r3, [r1, #4]
 8007292:	bf16      	itet	ne
 8007294:	6063      	strne	r3, [r4, #4]
 8007296:	6013      	streq	r3, [r2, #0]
 8007298:	460c      	movne	r4, r1
 800729a:	e7eb      	b.n	8007274 <_malloc_r+0x64>
 800729c:	460c      	mov	r4, r1
 800729e:	6849      	ldr	r1, [r1, #4]
 80072a0:	e7cc      	b.n	800723c <_malloc_r+0x2c>
 80072a2:	1cc4      	adds	r4, r0, #3
 80072a4:	f024 0403 	bic.w	r4, r4, #3
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d005      	beq.n	80072b8 <_malloc_r+0xa8>
 80072ac:	1a21      	subs	r1, r4, r0
 80072ae:	4630      	mov	r0, r6
 80072b0:	f000 f820 	bl	80072f4 <_sbrk_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d0cf      	beq.n	8007258 <_malloc_r+0x48>
 80072b8:	6025      	str	r5, [r4, #0]
 80072ba:	e7db      	b.n	8007274 <_malloc_r+0x64>
 80072bc:	2000403c 	.word	0x2000403c
 80072c0:	20004040 	.word	0x20004040

080072c4 <iprintf>:
 80072c4:	b40f      	push	{r0, r1, r2, r3}
 80072c6:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <iprintf+0x2c>)
 80072c8:	b513      	push	{r0, r1, r4, lr}
 80072ca:	681c      	ldr	r4, [r3, #0]
 80072cc:	b124      	cbz	r4, 80072d8 <iprintf+0x14>
 80072ce:	69a3      	ldr	r3, [r4, #24]
 80072d0:	b913      	cbnz	r3, 80072d8 <iprintf+0x14>
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 f866 	bl	80073a4 <__sinit>
 80072d8:	ab05      	add	r3, sp, #20
 80072da:	9a04      	ldr	r2, [sp, #16]
 80072dc:	68a1      	ldr	r1, [r4, #8]
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 f915 	bl	8007510 <_vfiprintf_r>
 80072e6:	b002      	add	sp, #8
 80072e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ec:	b004      	add	sp, #16
 80072ee:	4770      	bx	lr
 80072f0:	20000010 	.word	0x20000010

080072f4 <_sbrk_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4c06      	ldr	r4, [pc, #24]	; (8007310 <_sbrk_r+0x1c>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4605      	mov	r5, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	f7fb f8a8 	bl	8002454 <_sbrk>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_sbrk_r+0x1a>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	b103      	cbz	r3, 800730e <_sbrk_r+0x1a>
 800730c:	602b      	str	r3, [r5, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	2000439c 	.word	0x2000439c

08007314 <strcpy>:
 8007314:	4603      	mov	r3, r0
 8007316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731a:	f803 2b01 	strb.w	r2, [r3], #1
 800731e:	2a00      	cmp	r2, #0
 8007320:	d1f9      	bne.n	8007316 <strcpy+0x2>
 8007322:	4770      	bx	lr

08007324 <std>:
 8007324:	2300      	movs	r3, #0
 8007326:	b510      	push	{r4, lr}
 8007328:	4604      	mov	r4, r0
 800732a:	e9c0 3300 	strd	r3, r3, [r0]
 800732e:	6083      	str	r3, [r0, #8]
 8007330:	8181      	strh	r1, [r0, #12]
 8007332:	6643      	str	r3, [r0, #100]	; 0x64
 8007334:	81c2      	strh	r2, [r0, #14]
 8007336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800733a:	6183      	str	r3, [r0, #24]
 800733c:	4619      	mov	r1, r3
 800733e:	2208      	movs	r2, #8
 8007340:	305c      	adds	r0, #92	; 0x5c
 8007342:	f7ff ff0f 	bl	8007164 <memset>
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <std+0x38>)
 8007348:	6263      	str	r3, [r4, #36]	; 0x24
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <std+0x3c>)
 800734c:	62a3      	str	r3, [r4, #40]	; 0x28
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <std+0x40>)
 8007350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <std+0x44>)
 8007354:	6224      	str	r4, [r4, #32]
 8007356:	6323      	str	r3, [r4, #48]	; 0x30
 8007358:	bd10      	pop	{r4, pc}
 800735a:	bf00      	nop
 800735c:	08007a4d 	.word	0x08007a4d
 8007360:	08007a6f 	.word	0x08007a6f
 8007364:	08007aa7 	.word	0x08007aa7
 8007368:	08007acb 	.word	0x08007acb

0800736c <_cleanup_r>:
 800736c:	4901      	ldr	r1, [pc, #4]	; (8007374 <_cleanup_r+0x8>)
 800736e:	f000 b885 	b.w	800747c <_fwalk_reent>
 8007372:	bf00      	nop
 8007374:	08007da5 	.word	0x08007da5

08007378 <__sfmoreglue>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	1e4a      	subs	r2, r1, #1
 800737c:	2568      	movs	r5, #104	; 0x68
 800737e:	4355      	muls	r5, r2
 8007380:	460e      	mov	r6, r1
 8007382:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007386:	f7ff ff43 	bl	8007210 <_malloc_r>
 800738a:	4604      	mov	r4, r0
 800738c:	b140      	cbz	r0, 80073a0 <__sfmoreglue+0x28>
 800738e:	2100      	movs	r1, #0
 8007390:	e9c0 1600 	strd	r1, r6, [r0]
 8007394:	300c      	adds	r0, #12
 8007396:	60a0      	str	r0, [r4, #8]
 8007398:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800739c:	f7ff fee2 	bl	8007164 <memset>
 80073a0:	4620      	mov	r0, r4
 80073a2:	bd70      	pop	{r4, r5, r6, pc}

080073a4 <__sinit>:
 80073a4:	6983      	ldr	r3, [r0, #24]
 80073a6:	b510      	push	{r4, lr}
 80073a8:	4604      	mov	r4, r0
 80073aa:	bb33      	cbnz	r3, 80073fa <__sinit+0x56>
 80073ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80073b0:	6503      	str	r3, [r0, #80]	; 0x50
 80073b2:	4b12      	ldr	r3, [pc, #72]	; (80073fc <__sinit+0x58>)
 80073b4:	4a12      	ldr	r2, [pc, #72]	; (8007400 <__sinit+0x5c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6282      	str	r2, [r0, #40]	; 0x28
 80073ba:	4298      	cmp	r0, r3
 80073bc:	bf04      	itt	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	6183      	streq	r3, [r0, #24]
 80073c2:	f000 f81f 	bl	8007404 <__sfp>
 80073c6:	6060      	str	r0, [r4, #4]
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 f81b 	bl	8007404 <__sfp>
 80073ce:	60a0      	str	r0, [r4, #8]
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 f817 	bl	8007404 <__sfp>
 80073d6:	2200      	movs	r2, #0
 80073d8:	60e0      	str	r0, [r4, #12]
 80073da:	2104      	movs	r1, #4
 80073dc:	6860      	ldr	r0, [r4, #4]
 80073de:	f7ff ffa1 	bl	8007324 <std>
 80073e2:	2201      	movs	r2, #1
 80073e4:	2109      	movs	r1, #9
 80073e6:	68a0      	ldr	r0, [r4, #8]
 80073e8:	f7ff ff9c 	bl	8007324 <std>
 80073ec:	2202      	movs	r2, #2
 80073ee:	2112      	movs	r1, #18
 80073f0:	68e0      	ldr	r0, [r4, #12]
 80073f2:	f7ff ff97 	bl	8007324 <std>
 80073f6:	2301      	movs	r3, #1
 80073f8:	61a3      	str	r3, [r4, #24]
 80073fa:	bd10      	pop	{r4, pc}
 80073fc:	080091a0 	.word	0x080091a0
 8007400:	0800736d 	.word	0x0800736d

08007404 <__sfp>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	4b1b      	ldr	r3, [pc, #108]	; (8007474 <__sfp+0x70>)
 8007408:	681e      	ldr	r6, [r3, #0]
 800740a:	69b3      	ldr	r3, [r6, #24]
 800740c:	4607      	mov	r7, r0
 800740e:	b913      	cbnz	r3, 8007416 <__sfp+0x12>
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffc7 	bl	80073a4 <__sinit>
 8007416:	3648      	adds	r6, #72	; 0x48
 8007418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800741c:	3b01      	subs	r3, #1
 800741e:	d503      	bpl.n	8007428 <__sfp+0x24>
 8007420:	6833      	ldr	r3, [r6, #0]
 8007422:	b133      	cbz	r3, 8007432 <__sfp+0x2e>
 8007424:	6836      	ldr	r6, [r6, #0]
 8007426:	e7f7      	b.n	8007418 <__sfp+0x14>
 8007428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800742c:	b16d      	cbz	r5, 800744a <__sfp+0x46>
 800742e:	3468      	adds	r4, #104	; 0x68
 8007430:	e7f4      	b.n	800741c <__sfp+0x18>
 8007432:	2104      	movs	r1, #4
 8007434:	4638      	mov	r0, r7
 8007436:	f7ff ff9f 	bl	8007378 <__sfmoreglue>
 800743a:	6030      	str	r0, [r6, #0]
 800743c:	2800      	cmp	r0, #0
 800743e:	d1f1      	bne.n	8007424 <__sfp+0x20>
 8007440:	230c      	movs	r3, #12
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4604      	mov	r4, r0
 8007446:	4620      	mov	r0, r4
 8007448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <__sfp+0x74>)
 800744c:	6665      	str	r5, [r4, #100]	; 0x64
 800744e:	e9c4 5500 	strd	r5, r5, [r4]
 8007452:	60a5      	str	r5, [r4, #8]
 8007454:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007458:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800745c:	2208      	movs	r2, #8
 800745e:	4629      	mov	r1, r5
 8007460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007464:	f7ff fe7e 	bl	8007164 <memset>
 8007468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800746c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007470:	e7e9      	b.n	8007446 <__sfp+0x42>
 8007472:	bf00      	nop
 8007474:	080091a0 	.word	0x080091a0
 8007478:	ffff0001 	.word	0xffff0001

0800747c <_fwalk_reent>:
 800747c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007480:	4680      	mov	r8, r0
 8007482:	4689      	mov	r9, r1
 8007484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007488:	2600      	movs	r6, #0
 800748a:	b914      	cbnz	r4, 8007492 <_fwalk_reent+0x16>
 800748c:	4630      	mov	r0, r6
 800748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007492:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007496:	3f01      	subs	r7, #1
 8007498:	d501      	bpl.n	800749e <_fwalk_reent+0x22>
 800749a:	6824      	ldr	r4, [r4, #0]
 800749c:	e7f5      	b.n	800748a <_fwalk_reent+0xe>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d907      	bls.n	80074b4 <_fwalk_reent+0x38>
 80074a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074a8:	3301      	adds	r3, #1
 80074aa:	d003      	beq.n	80074b4 <_fwalk_reent+0x38>
 80074ac:	4629      	mov	r1, r5
 80074ae:	4640      	mov	r0, r8
 80074b0:	47c8      	blx	r9
 80074b2:	4306      	orrs	r6, r0
 80074b4:	3568      	adds	r5, #104	; 0x68
 80074b6:	e7ee      	b.n	8007496 <_fwalk_reent+0x1a>

080074b8 <__malloc_lock>:
 80074b8:	4770      	bx	lr

080074ba <__malloc_unlock>:
 80074ba:	4770      	bx	lr

080074bc <__sfputc_r>:
 80074bc:	6893      	ldr	r3, [r2, #8]
 80074be:	3b01      	subs	r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	b410      	push	{r4}
 80074c4:	6093      	str	r3, [r2, #8]
 80074c6:	da08      	bge.n	80074da <__sfputc_r+0x1e>
 80074c8:	6994      	ldr	r4, [r2, #24]
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	db01      	blt.n	80074d2 <__sfputc_r+0x16>
 80074ce:	290a      	cmp	r1, #10
 80074d0:	d103      	bne.n	80074da <__sfputc_r+0x1e>
 80074d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d6:	f000 bafd 	b.w	8007ad4 <__swbuf_r>
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	1c58      	adds	r0, r3, #1
 80074de:	6010      	str	r0, [r2, #0]
 80074e0:	7019      	strb	r1, [r3, #0]
 80074e2:	4608      	mov	r0, r1
 80074e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <__sfputs_r>:
 80074ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ec:	4606      	mov	r6, r0
 80074ee:	460f      	mov	r7, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	18d5      	adds	r5, r2, r3
 80074f4:	42ac      	cmp	r4, r5
 80074f6:	d101      	bne.n	80074fc <__sfputs_r+0x12>
 80074f8:	2000      	movs	r0, #0
 80074fa:	e007      	b.n	800750c <__sfputs_r+0x22>
 80074fc:	463a      	mov	r2, r7
 80074fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007502:	4630      	mov	r0, r6
 8007504:	f7ff ffda 	bl	80074bc <__sfputc_r>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d1f3      	bne.n	80074f4 <__sfputs_r+0xa>
 800750c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007510 <_vfiprintf_r>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	460c      	mov	r4, r1
 8007516:	b09d      	sub	sp, #116	; 0x74
 8007518:	4617      	mov	r7, r2
 800751a:	461d      	mov	r5, r3
 800751c:	4606      	mov	r6, r0
 800751e:	b118      	cbz	r0, 8007528 <_vfiprintf_r+0x18>
 8007520:	6983      	ldr	r3, [r0, #24]
 8007522:	b90b      	cbnz	r3, 8007528 <_vfiprintf_r+0x18>
 8007524:	f7ff ff3e 	bl	80073a4 <__sinit>
 8007528:	4b7c      	ldr	r3, [pc, #496]	; (800771c <_vfiprintf_r+0x20c>)
 800752a:	429c      	cmp	r4, r3
 800752c:	d158      	bne.n	80075e0 <_vfiprintf_r+0xd0>
 800752e:	6874      	ldr	r4, [r6, #4]
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	0718      	lsls	r0, r3, #28
 8007534:	d55e      	bpl.n	80075f4 <_vfiprintf_r+0xe4>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d05b      	beq.n	80075f4 <_vfiprintf_r+0xe4>
 800753c:	2300      	movs	r3, #0
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	2320      	movs	r3, #32
 8007542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007546:	2330      	movs	r3, #48	; 0x30
 8007548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800754c:	9503      	str	r5, [sp, #12]
 800754e:	f04f 0b01 	mov.w	fp, #1
 8007552:	46b8      	mov	r8, r7
 8007554:	4645      	mov	r5, r8
 8007556:	f815 3b01 	ldrb.w	r3, [r5], #1
 800755a:	b10b      	cbz	r3, 8007560 <_vfiprintf_r+0x50>
 800755c:	2b25      	cmp	r3, #37	; 0x25
 800755e:	d154      	bne.n	800760a <_vfiprintf_r+0xfa>
 8007560:	ebb8 0a07 	subs.w	sl, r8, r7
 8007564:	d00b      	beq.n	800757e <_vfiprintf_r+0x6e>
 8007566:	4653      	mov	r3, sl
 8007568:	463a      	mov	r2, r7
 800756a:	4621      	mov	r1, r4
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff ffbc 	bl	80074ea <__sfputs_r>
 8007572:	3001      	adds	r0, #1
 8007574:	f000 80c2 	beq.w	80076fc <_vfiprintf_r+0x1ec>
 8007578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757a:	4453      	add	r3, sl
 800757c:	9309      	str	r3, [sp, #36]	; 0x24
 800757e:	f898 3000 	ldrb.w	r3, [r8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 80ba 	beq.w	80076fc <_vfiprintf_r+0x1ec>
 8007588:	2300      	movs	r3, #0
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800759a:	931a      	str	r3, [sp, #104]	; 0x68
 800759c:	46a8      	mov	r8, r5
 800759e:	2205      	movs	r2, #5
 80075a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80075a4:	485e      	ldr	r0, [pc, #376]	; (8007720 <_vfiprintf_r+0x210>)
 80075a6:	f7f8 fe2b 	bl	8000200 <memchr>
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	bb78      	cbnz	r0, 800760e <_vfiprintf_r+0xfe>
 80075ae:	06d9      	lsls	r1, r3, #27
 80075b0:	bf44      	itt	mi
 80075b2:	2220      	movmi	r2, #32
 80075b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075b8:	071a      	lsls	r2, r3, #28
 80075ba:	bf44      	itt	mi
 80075bc:	222b      	movmi	r2, #43	; 0x2b
 80075be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075c2:	782a      	ldrb	r2, [r5, #0]
 80075c4:	2a2a      	cmp	r2, #42	; 0x2a
 80075c6:	d02a      	beq.n	800761e <_vfiprintf_r+0x10e>
 80075c8:	9a07      	ldr	r2, [sp, #28]
 80075ca:	46a8      	mov	r8, r5
 80075cc:	2000      	movs	r0, #0
 80075ce:	250a      	movs	r5, #10
 80075d0:	4641      	mov	r1, r8
 80075d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d6:	3b30      	subs	r3, #48	; 0x30
 80075d8:	2b09      	cmp	r3, #9
 80075da:	d969      	bls.n	80076b0 <_vfiprintf_r+0x1a0>
 80075dc:	b360      	cbz	r0, 8007638 <_vfiprintf_r+0x128>
 80075de:	e024      	b.n	800762a <_vfiprintf_r+0x11a>
 80075e0:	4b50      	ldr	r3, [pc, #320]	; (8007724 <_vfiprintf_r+0x214>)
 80075e2:	429c      	cmp	r4, r3
 80075e4:	d101      	bne.n	80075ea <_vfiprintf_r+0xda>
 80075e6:	68b4      	ldr	r4, [r6, #8]
 80075e8:	e7a2      	b.n	8007530 <_vfiprintf_r+0x20>
 80075ea:	4b4f      	ldr	r3, [pc, #316]	; (8007728 <_vfiprintf_r+0x218>)
 80075ec:	429c      	cmp	r4, r3
 80075ee:	bf08      	it	eq
 80075f0:	68f4      	ldreq	r4, [r6, #12]
 80075f2:	e79d      	b.n	8007530 <_vfiprintf_r+0x20>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4630      	mov	r0, r6
 80075f8:	f000 fad0 	bl	8007b9c <__swsetup_r>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d09d      	beq.n	800753c <_vfiprintf_r+0x2c>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	b01d      	add	sp, #116	; 0x74
 8007606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	46a8      	mov	r8, r5
 800760c:	e7a2      	b.n	8007554 <_vfiprintf_r+0x44>
 800760e:	4a44      	ldr	r2, [pc, #272]	; (8007720 <_vfiprintf_r+0x210>)
 8007610:	1a80      	subs	r0, r0, r2
 8007612:	fa0b f000 	lsl.w	r0, fp, r0
 8007616:	4318      	orrs	r0, r3
 8007618:	9004      	str	r0, [sp, #16]
 800761a:	4645      	mov	r5, r8
 800761c:	e7be      	b.n	800759c <_vfiprintf_r+0x8c>
 800761e:	9a03      	ldr	r2, [sp, #12]
 8007620:	1d11      	adds	r1, r2, #4
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	9103      	str	r1, [sp, #12]
 8007626:	2a00      	cmp	r2, #0
 8007628:	db01      	blt.n	800762e <_vfiprintf_r+0x11e>
 800762a:	9207      	str	r2, [sp, #28]
 800762c:	e004      	b.n	8007638 <_vfiprintf_r+0x128>
 800762e:	4252      	negs	r2, r2
 8007630:	f043 0302 	orr.w	r3, r3, #2
 8007634:	9207      	str	r2, [sp, #28]
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	f898 3000 	ldrb.w	r3, [r8]
 800763c:	2b2e      	cmp	r3, #46	; 0x2e
 800763e:	d10e      	bne.n	800765e <_vfiprintf_r+0x14e>
 8007640:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007644:	2b2a      	cmp	r3, #42	; 0x2a
 8007646:	d138      	bne.n	80076ba <_vfiprintf_r+0x1aa>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	1d1a      	adds	r2, r3, #4
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	9203      	str	r2, [sp, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfb8      	it	lt
 8007654:	f04f 33ff 	movlt.w	r3, #4294967295
 8007658:	f108 0802 	add.w	r8, r8, #2
 800765c:	9305      	str	r3, [sp, #20]
 800765e:	4d33      	ldr	r5, [pc, #204]	; (800772c <_vfiprintf_r+0x21c>)
 8007660:	f898 1000 	ldrb.w	r1, [r8]
 8007664:	2203      	movs	r2, #3
 8007666:	4628      	mov	r0, r5
 8007668:	f7f8 fdca 	bl	8000200 <memchr>
 800766c:	b140      	cbz	r0, 8007680 <_vfiprintf_r+0x170>
 800766e:	2340      	movs	r3, #64	; 0x40
 8007670:	1b40      	subs	r0, r0, r5
 8007672:	fa03 f000 	lsl.w	r0, r3, r0
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	4303      	orrs	r3, r0
 800767a:	f108 0801 	add.w	r8, r8, #1
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	f898 1000 	ldrb.w	r1, [r8]
 8007684:	482a      	ldr	r0, [pc, #168]	; (8007730 <_vfiprintf_r+0x220>)
 8007686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800768a:	2206      	movs	r2, #6
 800768c:	f108 0701 	add.w	r7, r8, #1
 8007690:	f7f8 fdb6 	bl	8000200 <memchr>
 8007694:	2800      	cmp	r0, #0
 8007696:	d037      	beq.n	8007708 <_vfiprintf_r+0x1f8>
 8007698:	4b26      	ldr	r3, [pc, #152]	; (8007734 <_vfiprintf_r+0x224>)
 800769a:	bb1b      	cbnz	r3, 80076e4 <_vfiprintf_r+0x1d4>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	3307      	adds	r3, #7
 80076a0:	f023 0307 	bic.w	r3, r3, #7
 80076a4:	3308      	adds	r3, #8
 80076a6:	9303      	str	r3, [sp, #12]
 80076a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076aa:	444b      	add	r3, r9
 80076ac:	9309      	str	r3, [sp, #36]	; 0x24
 80076ae:	e750      	b.n	8007552 <_vfiprintf_r+0x42>
 80076b0:	fb05 3202 	mla	r2, r5, r2, r3
 80076b4:	2001      	movs	r0, #1
 80076b6:	4688      	mov	r8, r1
 80076b8:	e78a      	b.n	80075d0 <_vfiprintf_r+0xc0>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f108 0801 	add.w	r8, r8, #1
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	4619      	mov	r1, r3
 80076c4:	250a      	movs	r5, #10
 80076c6:	4640      	mov	r0, r8
 80076c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076cc:	3a30      	subs	r2, #48	; 0x30
 80076ce:	2a09      	cmp	r2, #9
 80076d0:	d903      	bls.n	80076da <_vfiprintf_r+0x1ca>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0c3      	beq.n	800765e <_vfiprintf_r+0x14e>
 80076d6:	9105      	str	r1, [sp, #20]
 80076d8:	e7c1      	b.n	800765e <_vfiprintf_r+0x14e>
 80076da:	fb05 2101 	mla	r1, r5, r1, r2
 80076de:	2301      	movs	r3, #1
 80076e0:	4680      	mov	r8, r0
 80076e2:	e7f0      	b.n	80076c6 <_vfiprintf_r+0x1b6>
 80076e4:	ab03      	add	r3, sp, #12
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	4622      	mov	r2, r4
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <_vfiprintf_r+0x228>)
 80076ec:	a904      	add	r1, sp, #16
 80076ee:	4630      	mov	r0, r6
 80076f0:	f3af 8000 	nop.w
 80076f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076f8:	4681      	mov	r9, r0
 80076fa:	d1d5      	bne.n	80076a8 <_vfiprintf_r+0x198>
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	065b      	lsls	r3, r3, #25
 8007700:	f53f af7e 	bmi.w	8007600 <_vfiprintf_r+0xf0>
 8007704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007706:	e77d      	b.n	8007604 <_vfiprintf_r+0xf4>
 8007708:	ab03      	add	r3, sp, #12
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4622      	mov	r2, r4
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <_vfiprintf_r+0x228>)
 8007710:	a904      	add	r1, sp, #16
 8007712:	4630      	mov	r0, r6
 8007714:	f000 f888 	bl	8007828 <_printf_i>
 8007718:	e7ec      	b.n	80076f4 <_vfiprintf_r+0x1e4>
 800771a:	bf00      	nop
 800771c:	080091c4 	.word	0x080091c4
 8007720:	08009204 	.word	0x08009204
 8007724:	080091e4 	.word	0x080091e4
 8007728:	080091a4 	.word	0x080091a4
 800772c:	0800920a 	.word	0x0800920a
 8007730:	0800920e 	.word	0x0800920e
 8007734:	00000000 	.word	0x00000000
 8007738:	080074eb 	.word	0x080074eb

0800773c <_printf_common>:
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	4691      	mov	r9, r2
 8007742:	461f      	mov	r7, r3
 8007744:	688a      	ldr	r2, [r1, #8]
 8007746:	690b      	ldr	r3, [r1, #16]
 8007748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800774c:	4293      	cmp	r3, r2
 800774e:	bfb8      	it	lt
 8007750:	4613      	movlt	r3, r2
 8007752:	f8c9 3000 	str.w	r3, [r9]
 8007756:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800775a:	4606      	mov	r6, r0
 800775c:	460c      	mov	r4, r1
 800775e:	b112      	cbz	r2, 8007766 <_printf_common+0x2a>
 8007760:	3301      	adds	r3, #1
 8007762:	f8c9 3000 	str.w	r3, [r9]
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	0699      	lsls	r1, r3, #26
 800776a:	bf42      	ittt	mi
 800776c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007770:	3302      	addmi	r3, #2
 8007772:	f8c9 3000 	strmi.w	r3, [r9]
 8007776:	6825      	ldr	r5, [r4, #0]
 8007778:	f015 0506 	ands.w	r5, r5, #6
 800777c:	d107      	bne.n	800778e <_printf_common+0x52>
 800777e:	f104 0a19 	add.w	sl, r4, #25
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	f8d9 2000 	ldr.w	r2, [r9]
 8007788:	1a9b      	subs	r3, r3, r2
 800778a:	42ab      	cmp	r3, r5
 800778c:	dc28      	bgt.n	80077e0 <_printf_common+0xa4>
 800778e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007792:	6822      	ldr	r2, [r4, #0]
 8007794:	3300      	adds	r3, #0
 8007796:	bf18      	it	ne
 8007798:	2301      	movne	r3, #1
 800779a:	0692      	lsls	r2, r2, #26
 800779c:	d42d      	bmi.n	80077fa <_printf_common+0xbe>
 800779e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a2:	4639      	mov	r1, r7
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	3001      	adds	r0, #1
 80077aa:	d020      	beq.n	80077ee <_printf_common+0xb2>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	68e5      	ldr	r5, [r4, #12]
 80077b0:	f8d9 2000 	ldr.w	r2, [r9]
 80077b4:	f003 0306 	and.w	r3, r3, #6
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	bf08      	it	eq
 80077bc:	1aad      	subeq	r5, r5, r2
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	6922      	ldr	r2, [r4, #16]
 80077c2:	bf0c      	ite	eq
 80077c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c8:	2500      	movne	r5, #0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bfc4      	itt	gt
 80077ce:	1a9b      	subgt	r3, r3, r2
 80077d0:	18ed      	addgt	r5, r5, r3
 80077d2:	f04f 0900 	mov.w	r9, #0
 80077d6:	341a      	adds	r4, #26
 80077d8:	454d      	cmp	r5, r9
 80077da:	d11a      	bne.n	8007812 <_printf_common+0xd6>
 80077dc:	2000      	movs	r0, #0
 80077de:	e008      	b.n	80077f2 <_printf_common+0xb6>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4652      	mov	r2, sl
 80077e4:	4639      	mov	r1, r7
 80077e6:	4630      	mov	r0, r6
 80077e8:	47c0      	blx	r8
 80077ea:	3001      	adds	r0, #1
 80077ec:	d103      	bne.n	80077f6 <_printf_common+0xba>
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f6:	3501      	adds	r5, #1
 80077f8:	e7c3      	b.n	8007782 <_printf_common+0x46>
 80077fa:	18e1      	adds	r1, r4, r3
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	2030      	movs	r0, #48	; 0x30
 8007800:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007804:	4422      	add	r2, r4
 8007806:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800780a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800780e:	3302      	adds	r3, #2
 8007810:	e7c5      	b.n	800779e <_printf_common+0x62>
 8007812:	2301      	movs	r3, #1
 8007814:	4622      	mov	r2, r4
 8007816:	4639      	mov	r1, r7
 8007818:	4630      	mov	r0, r6
 800781a:	47c0      	blx	r8
 800781c:	3001      	adds	r0, #1
 800781e:	d0e6      	beq.n	80077ee <_printf_common+0xb2>
 8007820:	f109 0901 	add.w	r9, r9, #1
 8007824:	e7d8      	b.n	80077d8 <_printf_common+0x9c>
	...

08007828 <_printf_i>:
 8007828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800782c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007830:	460c      	mov	r4, r1
 8007832:	7e09      	ldrb	r1, [r1, #24]
 8007834:	b085      	sub	sp, #20
 8007836:	296e      	cmp	r1, #110	; 0x6e
 8007838:	4617      	mov	r7, r2
 800783a:	4606      	mov	r6, r0
 800783c:	4698      	mov	r8, r3
 800783e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007840:	f000 80b3 	beq.w	80079aa <_printf_i+0x182>
 8007844:	d822      	bhi.n	800788c <_printf_i+0x64>
 8007846:	2963      	cmp	r1, #99	; 0x63
 8007848:	d036      	beq.n	80078b8 <_printf_i+0x90>
 800784a:	d80a      	bhi.n	8007862 <_printf_i+0x3a>
 800784c:	2900      	cmp	r1, #0
 800784e:	f000 80b9 	beq.w	80079c4 <_printf_i+0x19c>
 8007852:	2958      	cmp	r1, #88	; 0x58
 8007854:	f000 8083 	beq.w	800795e <_printf_i+0x136>
 8007858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800785c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007860:	e032      	b.n	80078c8 <_printf_i+0xa0>
 8007862:	2964      	cmp	r1, #100	; 0x64
 8007864:	d001      	beq.n	800786a <_printf_i+0x42>
 8007866:	2969      	cmp	r1, #105	; 0x69
 8007868:	d1f6      	bne.n	8007858 <_printf_i+0x30>
 800786a:	6820      	ldr	r0, [r4, #0]
 800786c:	6813      	ldr	r3, [r2, #0]
 800786e:	0605      	lsls	r5, r0, #24
 8007870:	f103 0104 	add.w	r1, r3, #4
 8007874:	d52a      	bpl.n	80078cc <_printf_i+0xa4>
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	da03      	bge.n	8007886 <_printf_i+0x5e>
 800787e:	222d      	movs	r2, #45	; 0x2d
 8007880:	425b      	negs	r3, r3
 8007882:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007886:	486f      	ldr	r0, [pc, #444]	; (8007a44 <_printf_i+0x21c>)
 8007888:	220a      	movs	r2, #10
 800788a:	e039      	b.n	8007900 <_printf_i+0xd8>
 800788c:	2973      	cmp	r1, #115	; 0x73
 800788e:	f000 809d 	beq.w	80079cc <_printf_i+0x1a4>
 8007892:	d808      	bhi.n	80078a6 <_printf_i+0x7e>
 8007894:	296f      	cmp	r1, #111	; 0x6f
 8007896:	d020      	beq.n	80078da <_printf_i+0xb2>
 8007898:	2970      	cmp	r1, #112	; 0x70
 800789a:	d1dd      	bne.n	8007858 <_printf_i+0x30>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	f043 0320 	orr.w	r3, r3, #32
 80078a2:	6023      	str	r3, [r4, #0]
 80078a4:	e003      	b.n	80078ae <_printf_i+0x86>
 80078a6:	2975      	cmp	r1, #117	; 0x75
 80078a8:	d017      	beq.n	80078da <_printf_i+0xb2>
 80078aa:	2978      	cmp	r1, #120	; 0x78
 80078ac:	d1d4      	bne.n	8007858 <_printf_i+0x30>
 80078ae:	2378      	movs	r3, #120	; 0x78
 80078b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078b4:	4864      	ldr	r0, [pc, #400]	; (8007a48 <_printf_i+0x220>)
 80078b6:	e055      	b.n	8007964 <_printf_i+0x13c>
 80078b8:	6813      	ldr	r3, [r2, #0]
 80078ba:	1d19      	adds	r1, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6011      	str	r1, [r2, #0]
 80078c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078c8:	2301      	movs	r3, #1
 80078ca:	e08c      	b.n	80079e6 <_printf_i+0x1be>
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6011      	str	r1, [r2, #0]
 80078d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078d4:	bf18      	it	ne
 80078d6:	b21b      	sxthne	r3, r3
 80078d8:	e7cf      	b.n	800787a <_printf_i+0x52>
 80078da:	6813      	ldr	r3, [r2, #0]
 80078dc:	6825      	ldr	r5, [r4, #0]
 80078de:	1d18      	adds	r0, r3, #4
 80078e0:	6010      	str	r0, [r2, #0]
 80078e2:	0628      	lsls	r0, r5, #24
 80078e4:	d501      	bpl.n	80078ea <_printf_i+0xc2>
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	e002      	b.n	80078f0 <_printf_i+0xc8>
 80078ea:	0668      	lsls	r0, r5, #25
 80078ec:	d5fb      	bpl.n	80078e6 <_printf_i+0xbe>
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	4854      	ldr	r0, [pc, #336]	; (8007a44 <_printf_i+0x21c>)
 80078f2:	296f      	cmp	r1, #111	; 0x6f
 80078f4:	bf14      	ite	ne
 80078f6:	220a      	movne	r2, #10
 80078f8:	2208      	moveq	r2, #8
 80078fa:	2100      	movs	r1, #0
 80078fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007900:	6865      	ldr	r5, [r4, #4]
 8007902:	60a5      	str	r5, [r4, #8]
 8007904:	2d00      	cmp	r5, #0
 8007906:	f2c0 8095 	blt.w	8007a34 <_printf_i+0x20c>
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	f021 0104 	bic.w	r1, r1, #4
 8007910:	6021      	str	r1, [r4, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d13d      	bne.n	8007992 <_printf_i+0x16a>
 8007916:	2d00      	cmp	r5, #0
 8007918:	f040 808e 	bne.w	8007a38 <_printf_i+0x210>
 800791c:	4665      	mov	r5, ip
 800791e:	2a08      	cmp	r2, #8
 8007920:	d10b      	bne.n	800793a <_printf_i+0x112>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	07db      	lsls	r3, r3, #31
 8007926:	d508      	bpl.n	800793a <_printf_i+0x112>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	429a      	cmp	r2, r3
 800792e:	bfde      	ittt	le
 8007930:	2330      	movle	r3, #48	; 0x30
 8007932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007936:	f105 35ff 	addle.w	r5, r5, #4294967295
 800793a:	ebac 0305 	sub.w	r3, ip, r5
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f8cd 8000 	str.w	r8, [sp]
 8007944:	463b      	mov	r3, r7
 8007946:	aa03      	add	r2, sp, #12
 8007948:	4621      	mov	r1, r4
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff fef6 	bl	800773c <_printf_common>
 8007950:	3001      	adds	r0, #1
 8007952:	d14d      	bne.n	80079f0 <_printf_i+0x1c8>
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
 8007958:	b005      	add	sp, #20
 800795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800795e:	4839      	ldr	r0, [pc, #228]	; (8007a44 <_printf_i+0x21c>)
 8007960:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	6821      	ldr	r1, [r4, #0]
 8007968:	1d1d      	adds	r5, r3, #4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6015      	str	r5, [r2, #0]
 800796e:	060a      	lsls	r2, r1, #24
 8007970:	d50b      	bpl.n	800798a <_printf_i+0x162>
 8007972:	07ca      	lsls	r2, r1, #31
 8007974:	bf44      	itt	mi
 8007976:	f041 0120 	orrmi.w	r1, r1, #32
 800797a:	6021      	strmi	r1, [r4, #0]
 800797c:	b91b      	cbnz	r3, 8007986 <_printf_i+0x15e>
 800797e:	6822      	ldr	r2, [r4, #0]
 8007980:	f022 0220 	bic.w	r2, r2, #32
 8007984:	6022      	str	r2, [r4, #0]
 8007986:	2210      	movs	r2, #16
 8007988:	e7b7      	b.n	80078fa <_printf_i+0xd2>
 800798a:	064d      	lsls	r5, r1, #25
 800798c:	bf48      	it	mi
 800798e:	b29b      	uxthmi	r3, r3
 8007990:	e7ef      	b.n	8007972 <_printf_i+0x14a>
 8007992:	4665      	mov	r5, ip
 8007994:	fbb3 f1f2 	udiv	r1, r3, r2
 8007998:	fb02 3311 	mls	r3, r2, r1, r3
 800799c:	5cc3      	ldrb	r3, [r0, r3]
 800799e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079a2:	460b      	mov	r3, r1
 80079a4:	2900      	cmp	r1, #0
 80079a6:	d1f5      	bne.n	8007994 <_printf_i+0x16c>
 80079a8:	e7b9      	b.n	800791e <_printf_i+0xf6>
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	6825      	ldr	r5, [r4, #0]
 80079ae:	6961      	ldr	r1, [r4, #20]
 80079b0:	1d18      	adds	r0, r3, #4
 80079b2:	6010      	str	r0, [r2, #0]
 80079b4:	0628      	lsls	r0, r5, #24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	d501      	bpl.n	80079be <_printf_i+0x196>
 80079ba:	6019      	str	r1, [r3, #0]
 80079bc:	e002      	b.n	80079c4 <_printf_i+0x19c>
 80079be:	066a      	lsls	r2, r5, #25
 80079c0:	d5fb      	bpl.n	80079ba <_printf_i+0x192>
 80079c2:	8019      	strh	r1, [r3, #0]
 80079c4:	2300      	movs	r3, #0
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	4665      	mov	r5, ip
 80079ca:	e7b9      	b.n	8007940 <_printf_i+0x118>
 80079cc:	6813      	ldr	r3, [r2, #0]
 80079ce:	1d19      	adds	r1, r3, #4
 80079d0:	6011      	str	r1, [r2, #0]
 80079d2:	681d      	ldr	r5, [r3, #0]
 80079d4:	6862      	ldr	r2, [r4, #4]
 80079d6:	2100      	movs	r1, #0
 80079d8:	4628      	mov	r0, r5
 80079da:	f7f8 fc11 	bl	8000200 <memchr>
 80079de:	b108      	cbz	r0, 80079e4 <_printf_i+0x1bc>
 80079e0:	1b40      	subs	r0, r0, r5
 80079e2:	6060      	str	r0, [r4, #4]
 80079e4:	6863      	ldr	r3, [r4, #4]
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	2300      	movs	r3, #0
 80079ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ee:	e7a7      	b.n	8007940 <_printf_i+0x118>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	462a      	mov	r2, r5
 80079f4:	4639      	mov	r1, r7
 80079f6:	4630      	mov	r0, r6
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d0aa      	beq.n	8007954 <_printf_i+0x12c>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	079b      	lsls	r3, r3, #30
 8007a02:	d413      	bmi.n	8007a2c <_printf_i+0x204>
 8007a04:	68e0      	ldr	r0, [r4, #12]
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	4298      	cmp	r0, r3
 8007a0a:	bfb8      	it	lt
 8007a0c:	4618      	movlt	r0, r3
 8007a0e:	e7a3      	b.n	8007958 <_printf_i+0x130>
 8007a10:	2301      	movs	r3, #1
 8007a12:	464a      	mov	r2, r9
 8007a14:	4639      	mov	r1, r7
 8007a16:	4630      	mov	r0, r6
 8007a18:	47c0      	blx	r8
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d09a      	beq.n	8007954 <_printf_i+0x12c>
 8007a1e:	3501      	adds	r5, #1
 8007a20:	68e3      	ldr	r3, [r4, #12]
 8007a22:	9a03      	ldr	r2, [sp, #12]
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	42ab      	cmp	r3, r5
 8007a28:	dcf2      	bgt.n	8007a10 <_printf_i+0x1e8>
 8007a2a:	e7eb      	b.n	8007a04 <_printf_i+0x1dc>
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	f104 0919 	add.w	r9, r4, #25
 8007a32:	e7f5      	b.n	8007a20 <_printf_i+0x1f8>
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1ac      	bne.n	8007992 <_printf_i+0x16a>
 8007a38:	7803      	ldrb	r3, [r0, #0]
 8007a3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a42:	e76c      	b.n	800791e <_printf_i+0xf6>
 8007a44:	08009215 	.word	0x08009215
 8007a48:	08009226 	.word	0x08009226

08007a4c <__sread>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	460c      	mov	r4, r1
 8007a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a54:	f000 fa46 	bl	8007ee4 <_read_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	bfab      	itete	ge
 8007a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a60:	181b      	addge	r3, r3, r0
 8007a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a66:	bfac      	ite	ge
 8007a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a6a:	81a3      	strhlt	r3, [r4, #12]
 8007a6c:	bd10      	pop	{r4, pc}

08007a6e <__swrite>:
 8007a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a72:	461f      	mov	r7, r3
 8007a74:	898b      	ldrh	r3, [r1, #12]
 8007a76:	05db      	lsls	r3, r3, #23
 8007a78:	4605      	mov	r5, r0
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	d505      	bpl.n	8007a8c <__swrite+0x1e>
 8007a80:	2302      	movs	r3, #2
 8007a82:	2200      	movs	r2, #0
 8007a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a88:	f000 f9b6 	bl	8007df8 <_lseek_r>
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	4632      	mov	r2, r6
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa2:	f000 b869 	b.w	8007b78 <_write_r>

08007aa6 <__sseek>:
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aae:	f000 f9a3 	bl	8007df8 <_lseek_r>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	bf15      	itete	ne
 8007ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ac2:	81a3      	strheq	r3, [r4, #12]
 8007ac4:	bf18      	it	ne
 8007ac6:	81a3      	strhne	r3, [r4, #12]
 8007ac8:	bd10      	pop	{r4, pc}

08007aca <__sclose>:
 8007aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ace:	f000 b8d3 	b.w	8007c78 <_close_r>
	...

08007ad4 <__swbuf_r>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	460e      	mov	r6, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	4605      	mov	r5, r0
 8007adc:	b118      	cbz	r0, 8007ae6 <__swbuf_r+0x12>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <__swbuf_r+0x12>
 8007ae2:	f7ff fc5f 	bl	80073a4 <__sinit>
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <__swbuf_r+0x98>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d12a      	bne.n	8007b42 <__swbuf_r+0x6e>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	69a3      	ldr	r3, [r4, #24]
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	071a      	lsls	r2, r3, #28
 8007af6:	d52e      	bpl.n	8007b56 <__swbuf_r+0x82>
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	b363      	cbz	r3, 8007b56 <__swbuf_r+0x82>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	1ac0      	subs	r0, r0, r3
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	b2f6      	uxtb	r6, r6
 8007b06:	4283      	cmp	r3, r0
 8007b08:	4637      	mov	r7, r6
 8007b0a:	dc04      	bgt.n	8007b16 <__swbuf_r+0x42>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f948 	bl	8007da4 <_fflush_r>
 8007b14:	bb28      	cbnz	r0, 8007b62 <__swbuf_r+0x8e>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	60a3      	str	r3, [r4, #8]
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	6022      	str	r2, [r4, #0]
 8007b22:	701e      	strb	r6, [r3, #0]
 8007b24:	6963      	ldr	r3, [r4, #20]
 8007b26:	3001      	adds	r0, #1
 8007b28:	4283      	cmp	r3, r0
 8007b2a:	d004      	beq.n	8007b36 <__swbuf_r+0x62>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	07db      	lsls	r3, r3, #31
 8007b30:	d519      	bpl.n	8007b66 <__swbuf_r+0x92>
 8007b32:	2e0a      	cmp	r6, #10
 8007b34:	d117      	bne.n	8007b66 <__swbuf_r+0x92>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f933 	bl	8007da4 <_fflush_r>
 8007b3e:	b190      	cbz	r0, 8007b66 <__swbuf_r+0x92>
 8007b40:	e00f      	b.n	8007b62 <__swbuf_r+0x8e>
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <__swbuf_r+0x9c>)
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d101      	bne.n	8007b4c <__swbuf_r+0x78>
 8007b48:	68ac      	ldr	r4, [r5, #8]
 8007b4a:	e7d0      	b.n	8007aee <__swbuf_r+0x1a>
 8007b4c:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <__swbuf_r+0xa0>)
 8007b4e:	429c      	cmp	r4, r3
 8007b50:	bf08      	it	eq
 8007b52:	68ec      	ldreq	r4, [r5, #12]
 8007b54:	e7cb      	b.n	8007aee <__swbuf_r+0x1a>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f81f 	bl	8007b9c <__swsetup_r>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0cc      	beq.n	8007afc <__swbuf_r+0x28>
 8007b62:	f04f 37ff 	mov.w	r7, #4294967295
 8007b66:	4638      	mov	r0, r7
 8007b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	080091c4 	.word	0x080091c4
 8007b70:	080091e4 	.word	0x080091e4
 8007b74:	080091a4 	.word	0x080091a4

08007b78 <_write_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4c07      	ldr	r4, [pc, #28]	; (8007b98 <_write_r+0x20>)
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	4608      	mov	r0, r1
 8007b80:	4611      	mov	r1, r2
 8007b82:	2200      	movs	r2, #0
 8007b84:	6022      	str	r2, [r4, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	f7fa fc13 	bl	80023b2 <_write>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_write_r+0x1e>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_write_r+0x1e>
 8007b94:	602b      	str	r3, [r5, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	2000439c 	.word	0x2000439c

08007b9c <__swsetup_r>:
 8007b9c:	4b32      	ldr	r3, [pc, #200]	; (8007c68 <__swsetup_r+0xcc>)
 8007b9e:	b570      	push	{r4, r5, r6, lr}
 8007ba0:	681d      	ldr	r5, [r3, #0]
 8007ba2:	4606      	mov	r6, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	b125      	cbz	r5, 8007bb2 <__swsetup_r+0x16>
 8007ba8:	69ab      	ldr	r3, [r5, #24]
 8007baa:	b913      	cbnz	r3, 8007bb2 <__swsetup_r+0x16>
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7ff fbf9 	bl	80073a4 <__sinit>
 8007bb2:	4b2e      	ldr	r3, [pc, #184]	; (8007c6c <__swsetup_r+0xd0>)
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	d10f      	bne.n	8007bd8 <__swsetup_r+0x3c>
 8007bb8:	686c      	ldr	r4, [r5, #4]
 8007bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	0715      	lsls	r5, r2, #28
 8007bc2:	d42c      	bmi.n	8007c1e <__swsetup_r+0x82>
 8007bc4:	06d0      	lsls	r0, r2, #27
 8007bc6:	d411      	bmi.n	8007bec <__swsetup_r+0x50>
 8007bc8:	2209      	movs	r2, #9
 8007bca:	6032      	str	r2, [r6, #0]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd6:	e03e      	b.n	8007c56 <__swsetup_r+0xba>
 8007bd8:	4b25      	ldr	r3, [pc, #148]	; (8007c70 <__swsetup_r+0xd4>)
 8007bda:	429c      	cmp	r4, r3
 8007bdc:	d101      	bne.n	8007be2 <__swsetup_r+0x46>
 8007bde:	68ac      	ldr	r4, [r5, #8]
 8007be0:	e7eb      	b.n	8007bba <__swsetup_r+0x1e>
 8007be2:	4b24      	ldr	r3, [pc, #144]	; (8007c74 <__swsetup_r+0xd8>)
 8007be4:	429c      	cmp	r4, r3
 8007be6:	bf08      	it	eq
 8007be8:	68ec      	ldreq	r4, [r5, #12]
 8007bea:	e7e6      	b.n	8007bba <__swsetup_r+0x1e>
 8007bec:	0751      	lsls	r1, r2, #29
 8007bee:	d512      	bpl.n	8007c16 <__swsetup_r+0x7a>
 8007bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bf2:	b141      	cbz	r1, 8007c06 <__swsetup_r+0x6a>
 8007bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	d002      	beq.n	8007c02 <__swsetup_r+0x66>
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff fab9 	bl	8007174 <_free_r>
 8007c02:	2300      	movs	r3, #0
 8007c04:	6363      	str	r3, [r4, #52]	; 0x34
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6063      	str	r3, [r4, #4]
 8007c12:	6923      	ldr	r3, [r4, #16]
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f043 0308 	orr.w	r3, r3, #8
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	b94b      	cbnz	r3, 8007c36 <__swsetup_r+0x9a>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c2c:	d003      	beq.n	8007c36 <__swsetup_r+0x9a>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4630      	mov	r0, r6
 8007c32:	f000 f917 	bl	8007e64 <__smakebuf_r>
 8007c36:	89a2      	ldrh	r2, [r4, #12]
 8007c38:	f012 0301 	ands.w	r3, r2, #1
 8007c3c:	d00c      	beq.n	8007c58 <__swsetup_r+0xbc>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	6963      	ldr	r3, [r4, #20]
 8007c44:	425b      	negs	r3, r3
 8007c46:	61a3      	str	r3, [r4, #24]
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	b953      	cbnz	r3, 8007c62 <__swsetup_r+0xc6>
 8007c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c54:	d1ba      	bne.n	8007bcc <__swsetup_r+0x30>
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	0792      	lsls	r2, r2, #30
 8007c5a:	bf58      	it	pl
 8007c5c:	6963      	ldrpl	r3, [r4, #20]
 8007c5e:	60a3      	str	r3, [r4, #8]
 8007c60:	e7f2      	b.n	8007c48 <__swsetup_r+0xac>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e7f7      	b.n	8007c56 <__swsetup_r+0xba>
 8007c66:	bf00      	nop
 8007c68:	20000010 	.word	0x20000010
 8007c6c:	080091c4 	.word	0x080091c4
 8007c70:	080091e4 	.word	0x080091e4
 8007c74:	080091a4 	.word	0x080091a4

08007c78 <_close_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4c06      	ldr	r4, [pc, #24]	; (8007c94 <_close_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4605      	mov	r5, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	6023      	str	r3, [r4, #0]
 8007c84:	f7fa fbb1 	bl	80023ea <_close>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_close_r+0x1a>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_close_r+0x1a>
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	2000439c 	.word	0x2000439c

08007c98 <__sflush_r>:
 8007c98:	898a      	ldrh	r2, [r1, #12]
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	0710      	lsls	r0, r2, #28
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d458      	bmi.n	8007d58 <__sflush_r+0xc0>
 8007ca6:	684b      	ldr	r3, [r1, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc05      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dc02      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d0f9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc4:	682f      	ldr	r7, [r5, #0]
 8007cc6:	6a21      	ldr	r1, [r4, #32]
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	d032      	beq.n	8007d32 <__sflush_r+0x9a>
 8007ccc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	075a      	lsls	r2, r3, #29
 8007cd2:	d505      	bpl.n	8007ce0 <__sflush_r+0x48>
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	1ac0      	subs	r0, r0, r3
 8007cd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cda:	b10b      	cbz	r3, 8007ce0 <__sflush_r+0x48>
 8007cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cde:	1ac0      	subs	r0, r0, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce6:	6a21      	ldr	r1, [r4, #32]
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b0      	blx	r6
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	d106      	bne.n	8007d00 <__sflush_r+0x68>
 8007cf2:	6829      	ldr	r1, [r5, #0]
 8007cf4:	291d      	cmp	r1, #29
 8007cf6:	d848      	bhi.n	8007d8a <__sflush_r+0xf2>
 8007cf8:	4a29      	ldr	r2, [pc, #164]	; (8007da0 <__sflush_r+0x108>)
 8007cfa:	40ca      	lsrs	r2, r1
 8007cfc:	07d6      	lsls	r6, r2, #31
 8007cfe:	d544      	bpl.n	8007d8a <__sflush_r+0xf2>
 8007d00:	2200      	movs	r2, #0
 8007d02:	6062      	str	r2, [r4, #4]
 8007d04:	04d9      	lsls	r1, r3, #19
 8007d06:	6922      	ldr	r2, [r4, #16]
 8007d08:	6022      	str	r2, [r4, #0]
 8007d0a:	d504      	bpl.n	8007d16 <__sflush_r+0x7e>
 8007d0c:	1c42      	adds	r2, r0, #1
 8007d0e:	d101      	bne.n	8007d14 <__sflush_r+0x7c>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b903      	cbnz	r3, 8007d16 <__sflush_r+0x7e>
 8007d14:	6560      	str	r0, [r4, #84]	; 0x54
 8007d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d18:	602f      	str	r7, [r5, #0]
 8007d1a:	2900      	cmp	r1, #0
 8007d1c:	d0c9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d22:	4299      	cmp	r1, r3
 8007d24:	d002      	beq.n	8007d2c <__sflush_r+0x94>
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7ff fa24 	bl	8007174 <_free_r>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007d30:	e7c0      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	1c41      	adds	r1, r0, #1
 8007d3a:	d1c8      	bne.n	8007cce <__sflush_r+0x36>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c5      	beq.n	8007cce <__sflush_r+0x36>
 8007d42:	2b1d      	cmp	r3, #29
 8007d44:	d001      	beq.n	8007d4a <__sflush_r+0xb2>
 8007d46:	2b16      	cmp	r3, #22
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0xb6>
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	e7b1      	b.n	8007cb2 <__sflush_r+0x1a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e7ad      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d58:	690f      	ldr	r7, [r1, #16]
 8007d5a:	2f00      	cmp	r7, #0
 8007d5c:	d0a9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d5e:	0793      	lsls	r3, r2, #30
 8007d60:	680e      	ldr	r6, [r1, #0]
 8007d62:	bf08      	it	eq
 8007d64:	694b      	ldreq	r3, [r1, #20]
 8007d66:	600f      	str	r7, [r1, #0]
 8007d68:	bf18      	it	ne
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	eba6 0807 	sub.w	r8, r6, r7
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	f1b8 0f00 	cmp.w	r8, #0
 8007d76:	dd9c      	ble.n	8007cb2 <__sflush_r+0x1a>
 8007d78:	4643      	mov	r3, r8
 8007d7a:	463a      	mov	r2, r7
 8007d7c:	6a21      	ldr	r1, [r4, #32]
 8007d7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b0      	blx	r6
 8007d84:	2800      	cmp	r0, #0
 8007d86:	dc06      	bgt.n	8007d96 <__sflush_r+0xfe>
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e78e      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d96:	4407      	add	r7, r0
 8007d98:	eba8 0800 	sub.w	r8, r8, r0
 8007d9c:	e7e9      	b.n	8007d72 <__sflush_r+0xda>
 8007d9e:	bf00      	nop
 8007da0:	20400001 	.word	0x20400001

08007da4 <_fflush_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	4605      	mov	r5, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	b1db      	cbz	r3, 8007de6 <_fflush_r+0x42>
 8007dae:	b118      	cbz	r0, 8007db8 <_fflush_r+0x14>
 8007db0:	6983      	ldr	r3, [r0, #24]
 8007db2:	b90b      	cbnz	r3, 8007db8 <_fflush_r+0x14>
 8007db4:	f7ff faf6 	bl	80073a4 <__sinit>
 8007db8:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <_fflush_r+0x48>)
 8007dba:	429c      	cmp	r4, r3
 8007dbc:	d109      	bne.n	8007dd2 <_fflush_r+0x2e>
 8007dbe:	686c      	ldr	r4, [r5, #4]
 8007dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc4:	b17b      	cbz	r3, 8007de6 <_fflush_r+0x42>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4628      	mov	r0, r5
 8007dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dce:	f7ff bf63 	b.w	8007c98 <__sflush_r>
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <_fflush_r+0x4c>)
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	d101      	bne.n	8007ddc <_fflush_r+0x38>
 8007dd8:	68ac      	ldr	r4, [r5, #8]
 8007dda:	e7f1      	b.n	8007dc0 <_fflush_r+0x1c>
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <_fflush_r+0x50>)
 8007dde:	429c      	cmp	r4, r3
 8007de0:	bf08      	it	eq
 8007de2:	68ec      	ldreq	r4, [r5, #12]
 8007de4:	e7ec      	b.n	8007dc0 <_fflush_r+0x1c>
 8007de6:	2000      	movs	r0, #0
 8007de8:	bd38      	pop	{r3, r4, r5, pc}
 8007dea:	bf00      	nop
 8007dec:	080091c4 	.word	0x080091c4
 8007df0:	080091e4 	.word	0x080091e4
 8007df4:	080091a4 	.word	0x080091a4

08007df8 <_lseek_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4c07      	ldr	r4, [pc, #28]	; (8007e18 <_lseek_r+0x20>)
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	4608      	mov	r0, r1
 8007e00:	4611      	mov	r1, r2
 8007e02:	2200      	movs	r2, #0
 8007e04:	6022      	str	r2, [r4, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f7fa fb16 	bl	8002438 <_lseek>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_lseek_r+0x1e>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_lseek_r+0x1e>
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	2000439c 	.word	0x2000439c

08007e1c <__swhatbuf_r>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	460e      	mov	r6, r1
 8007e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e24:	2900      	cmp	r1, #0
 8007e26:	b096      	sub	sp, #88	; 0x58
 8007e28:	4614      	mov	r4, r2
 8007e2a:	461d      	mov	r5, r3
 8007e2c:	da07      	bge.n	8007e3e <__swhatbuf_r+0x22>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	602b      	str	r3, [r5, #0]
 8007e32:	89b3      	ldrh	r3, [r6, #12]
 8007e34:	061a      	lsls	r2, r3, #24
 8007e36:	d410      	bmi.n	8007e5a <__swhatbuf_r+0x3e>
 8007e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e3c:	e00e      	b.n	8007e5c <__swhatbuf_r+0x40>
 8007e3e:	466a      	mov	r2, sp
 8007e40:	f000 f862 	bl	8007f08 <_fstat_r>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	dbf2      	blt.n	8007e2e <__swhatbuf_r+0x12>
 8007e48:	9a01      	ldr	r2, [sp, #4]
 8007e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e52:	425a      	negs	r2, r3
 8007e54:	415a      	adcs	r2, r3
 8007e56:	602a      	str	r2, [r5, #0]
 8007e58:	e7ee      	b.n	8007e38 <__swhatbuf_r+0x1c>
 8007e5a:	2340      	movs	r3, #64	; 0x40
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	b016      	add	sp, #88	; 0x58
 8007e62:	bd70      	pop	{r4, r5, r6, pc}

08007e64 <__smakebuf_r>:
 8007e64:	898b      	ldrh	r3, [r1, #12]
 8007e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e68:	079d      	lsls	r5, r3, #30
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	d507      	bpl.n	8007e80 <__smakebuf_r+0x1c>
 8007e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	6163      	str	r3, [r4, #20]
 8007e7c:	b002      	add	sp, #8
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	ab01      	add	r3, sp, #4
 8007e82:	466a      	mov	r2, sp
 8007e84:	f7ff ffca 	bl	8007e1c <__swhatbuf_r>
 8007e88:	9900      	ldr	r1, [sp, #0]
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff f9bf 	bl	8007210 <_malloc_r>
 8007e92:	b948      	cbnz	r0, 8007ea8 <__smakebuf_r+0x44>
 8007e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e98:	059a      	lsls	r2, r3, #22
 8007e9a:	d4ef      	bmi.n	8007e7c <__smakebuf_r+0x18>
 8007e9c:	f023 0303 	bic.w	r3, r3, #3
 8007ea0:	f043 0302 	orr.w	r3, r3, #2
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	e7e3      	b.n	8007e70 <__smakebuf_r+0xc>
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <__smakebuf_r+0x7c>)
 8007eaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	6020      	str	r0, [r4, #0]
 8007eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	9b00      	ldr	r3, [sp, #0]
 8007eb8:	6163      	str	r3, [r4, #20]
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	6120      	str	r0, [r4, #16]
 8007ebe:	b15b      	cbz	r3, 8007ed8 <__smakebuf_r+0x74>
 8007ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f000 f831 	bl	8007f2c <_isatty_r>
 8007eca:	b128      	cbz	r0, 8007ed8 <__smakebuf_r+0x74>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	f043 0301 	orr.w	r3, r3, #1
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	431d      	orrs	r5, r3
 8007edc:	81a5      	strh	r5, [r4, #12]
 8007ede:	e7cd      	b.n	8007e7c <__smakebuf_r+0x18>
 8007ee0:	0800736d 	.word	0x0800736d

08007ee4 <_read_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4c07      	ldr	r4, [pc, #28]	; (8007f04 <_read_r+0x20>)
 8007ee8:	4605      	mov	r5, r0
 8007eea:	4608      	mov	r0, r1
 8007eec:	4611      	mov	r1, r2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6022      	str	r2, [r4, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7fa fa40 	bl	8002378 <_read>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_read_r+0x1e>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_read_r+0x1e>
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	2000439c 	.word	0x2000439c

08007f08 <_fstat_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4c07      	ldr	r4, [pc, #28]	; (8007f28 <_fstat_r+0x20>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4605      	mov	r5, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	4611      	mov	r1, r2
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	f7fa fa74 	bl	8002402 <_fstat>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d102      	bne.n	8007f24 <_fstat_r+0x1c>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	b103      	cbz	r3, 8007f24 <_fstat_r+0x1c>
 8007f22:	602b      	str	r3, [r5, #0]
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	2000439c 	.word	0x2000439c

08007f2c <_isatty_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4c06      	ldr	r4, [pc, #24]	; (8007f48 <_isatty_r+0x1c>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4605      	mov	r5, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	f7fa fa73 	bl	8002422 <_isatty>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_isatty_r+0x1a>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_isatty_r+0x1a>
 8007f44:	602b      	str	r3, [r5, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	2000439c 	.word	0x2000439c

08007f4c <pow>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	ed2d 8b04 	vpush	{d8-d9}
 8007f54:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008228 <pow+0x2dc>
 8007f58:	b08d      	sub	sp, #52	; 0x34
 8007f5a:	ec57 6b10 	vmov	r6, r7, d0
 8007f5e:	ec55 4b11 	vmov	r4, r5, d1
 8007f62:	f000 f965 	bl	8008230 <__ieee754_pow>
 8007f66:	f999 3000 	ldrsb.w	r3, [r9]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f72:	eef0 8a60 	vmov.f32	s17, s1
 8007f76:	46c8      	mov	r8, r9
 8007f78:	d05f      	beq.n	800803a <pow+0xee>
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	462b      	mov	r3, r5
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 fde3 	bl	8000b4c <__aeabi_dcmpun>
 8007f86:	4683      	mov	fp, r0
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d156      	bne.n	800803a <pow+0xee>
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	463b      	mov	r3, r7
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fdda 	bl	8000b4c <__aeabi_dcmpun>
 8007f98:	9001      	str	r0, [sp, #4]
 8007f9a:	b1e8      	cbz	r0, 8007fd8 <pow+0x8c>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 fda0 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d046      	beq.n	800803a <pow+0xee>
 8007fac:	2301      	movs	r3, #1
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	4b96      	ldr	r3, [pc, #600]	; (800820c <pow+0x2c0>)
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	4b96      	ldr	r3, [pc, #600]	; (8008210 <pow+0x2c4>)
 8007fb6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007fba:	2200      	movs	r2, #0
 8007fbc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fc0:	9b00      	ldr	r3, [sp, #0]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007fc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007fcc:	d033      	beq.n	8008036 <pow+0xea>
 8007fce:	a802      	add	r0, sp, #8
 8007fd0:	f000 fefd 	bl	8008dce <matherr>
 8007fd4:	bb48      	cbnz	r0, 800802a <pow+0xde>
 8007fd6:	e05d      	b.n	8008094 <pow+0x148>
 8007fd8:	f04f 0a00 	mov.w	sl, #0
 8007fdc:	f04f 0b00 	mov.w	fp, #0
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	465b      	mov	r3, fp
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fd7e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fec:	ec4b ab19 	vmov	d9, sl, fp
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d054      	beq.n	800809e <pow+0x152>
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f7f8 fd74 	bl	8000ae8 <__aeabi_dcmpeq>
 8008000:	4680      	mov	r8, r0
 8008002:	b318      	cbz	r0, 800804c <pow+0x100>
 8008004:	2301      	movs	r3, #1
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	4b80      	ldr	r3, [pc, #512]	; (800820c <pow+0x2c0>)
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	930a      	str	r3, [sp, #40]	; 0x28
 8008010:	9b00      	ldr	r3, [sp, #0]
 8008012:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008016:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800801a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0d5      	beq.n	8007fce <pow+0x82>
 8008022:	4b7b      	ldr	r3, [pc, #492]	; (8008210 <pow+0x2c4>)
 8008024:	2200      	movs	r2, #0
 8008026:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802c:	b11b      	cbz	r3, 8008036 <pow+0xea>
 800802e:	f7ff f867 	bl	8007100 <__errno>
 8008032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008034:	6003      	str	r3, [r0, #0]
 8008036:	ed9d 8b08 	vldr	d8, [sp, #32]
 800803a:	eeb0 0a48 	vmov.f32	s0, s16
 800803e:	eef0 0a68 	vmov.f32	s1, s17
 8008042:	b00d      	add	sp, #52	; 0x34
 8008044:	ecbd 8b04 	vpop	{d8-d9}
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	ec45 4b10 	vmov	d0, r4, r5
 8008050:	f000 feb5 	bl	8008dbe <finite>
 8008054:	2800      	cmp	r0, #0
 8008056:	d0f0      	beq.n	800803a <pow+0xee>
 8008058:	4652      	mov	r2, sl
 800805a:	465b      	mov	r3, fp
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 fd4c 	bl	8000afc <__aeabi_dcmplt>
 8008064:	2800      	cmp	r0, #0
 8008066:	d0e8      	beq.n	800803a <pow+0xee>
 8008068:	2301      	movs	r3, #1
 800806a:	9302      	str	r3, [sp, #8]
 800806c:	4b67      	ldr	r3, [pc, #412]	; (800820c <pow+0x2c0>)
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	f999 3000 	ldrsb.w	r3, [r9]
 8008074:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008078:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800807c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008080:	b913      	cbnz	r3, 8008088 <pow+0x13c>
 8008082:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008086:	e7a2      	b.n	8007fce <pow+0x82>
 8008088:	4962      	ldr	r1, [pc, #392]	; (8008214 <pow+0x2c8>)
 800808a:	2000      	movs	r0, #0
 800808c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d19c      	bne.n	8007fce <pow+0x82>
 8008094:	f7ff f834 	bl	8007100 <__errno>
 8008098:	2321      	movs	r3, #33	; 0x21
 800809a:	6003      	str	r3, [r0, #0]
 800809c:	e7c5      	b.n	800802a <pow+0xde>
 800809e:	eeb0 0a48 	vmov.f32	s0, s16
 80080a2:	eef0 0a68 	vmov.f32	s1, s17
 80080a6:	f000 fe8a 	bl	8008dbe <finite>
 80080aa:	9000      	str	r0, [sp, #0]
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f040 8081 	bne.w	80081b4 <pow+0x268>
 80080b2:	ec47 6b10 	vmov	d0, r6, r7
 80080b6:	f000 fe82 	bl	8008dbe <finite>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d07a      	beq.n	80081b4 <pow+0x268>
 80080be:	ec45 4b10 	vmov	d0, r4, r5
 80080c2:	f000 fe7c 	bl	8008dbe <finite>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d074      	beq.n	80081b4 <pow+0x268>
 80080ca:	ec53 2b18 	vmov	r2, r3, d8
 80080ce:	ee18 0a10 	vmov	r0, s16
 80080d2:	4619      	mov	r1, r3
 80080d4:	f7f8 fd3a 	bl	8000b4c <__aeabi_dcmpun>
 80080d8:	f999 9000 	ldrsb.w	r9, [r9]
 80080dc:	4b4b      	ldr	r3, [pc, #300]	; (800820c <pow+0x2c0>)
 80080de:	b1b0      	cbz	r0, 800810e <pow+0x1c2>
 80080e0:	2201      	movs	r2, #1
 80080e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080e6:	9b00      	ldr	r3, [sp, #0]
 80080e8:	930a      	str	r3, [sp, #40]	; 0x28
 80080ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80080f2:	f1b9 0f00 	cmp.w	r9, #0
 80080f6:	d0c4      	beq.n	8008082 <pow+0x136>
 80080f8:	4652      	mov	r2, sl
 80080fa:	465b      	mov	r3, fp
 80080fc:	4650      	mov	r0, sl
 80080fe:	4659      	mov	r1, fp
 8008100:	f7f8 fbb4 	bl	800086c <__aeabi_ddiv>
 8008104:	f1b9 0f02 	cmp.w	r9, #2
 8008108:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800810c:	e7c1      	b.n	8008092 <pow+0x146>
 800810e:	2203      	movs	r2, #3
 8008110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008114:	900a      	str	r0, [sp, #40]	; 0x28
 8008116:	4629      	mov	r1, r5
 8008118:	4620      	mov	r0, r4
 800811a:	2200      	movs	r2, #0
 800811c:	4b3e      	ldr	r3, [pc, #248]	; (8008218 <pow+0x2cc>)
 800811e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008122:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008126:	f7f8 fa77 	bl	8000618 <__aeabi_dmul>
 800812a:	4604      	mov	r4, r0
 800812c:	460d      	mov	r5, r1
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d124      	bne.n	800817e <pow+0x232>
 8008134:	4b39      	ldr	r3, [pc, #228]	; (800821c <pow+0x2d0>)
 8008136:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800813a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800813e:	4630      	mov	r0, r6
 8008140:	4652      	mov	r2, sl
 8008142:	465b      	mov	r3, fp
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 fcd9 	bl	8000afc <__aeabi_dcmplt>
 800814a:	2800      	cmp	r0, #0
 800814c:	d056      	beq.n	80081fc <pow+0x2b0>
 800814e:	ec45 4b10 	vmov	d0, r4, r5
 8008152:	f000 fe49 	bl	8008de8 <rint>
 8008156:	4622      	mov	r2, r4
 8008158:	462b      	mov	r3, r5
 800815a:	ec51 0b10 	vmov	r0, r1, d0
 800815e:	f7f8 fcc3 	bl	8000ae8 <__aeabi_dcmpeq>
 8008162:	b920      	cbnz	r0, 800816e <pow+0x222>
 8008164:	4b2e      	ldr	r3, [pc, #184]	; (8008220 <pow+0x2d4>)
 8008166:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800816a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800816e:	f998 3000 	ldrsb.w	r3, [r8]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d142      	bne.n	80081fc <pow+0x2b0>
 8008176:	f7fe ffc3 	bl	8007100 <__errno>
 800817a:	2322      	movs	r3, #34	; 0x22
 800817c:	e78d      	b.n	800809a <pow+0x14e>
 800817e:	4b29      	ldr	r3, [pc, #164]	; (8008224 <pow+0x2d8>)
 8008180:	2200      	movs	r2, #0
 8008182:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008186:	4630      	mov	r0, r6
 8008188:	4652      	mov	r2, sl
 800818a:	465b      	mov	r3, fp
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fcb5 	bl	8000afc <__aeabi_dcmplt>
 8008192:	2800      	cmp	r0, #0
 8008194:	d0eb      	beq.n	800816e <pow+0x222>
 8008196:	ec45 4b10 	vmov	d0, r4, r5
 800819a:	f000 fe25 	bl	8008de8 <rint>
 800819e:	4622      	mov	r2, r4
 80081a0:	462b      	mov	r3, r5
 80081a2:	ec51 0b10 	vmov	r0, r1, d0
 80081a6:	f7f8 fc9f 	bl	8000ae8 <__aeabi_dcmpeq>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d1df      	bne.n	800816e <pow+0x222>
 80081ae:	2200      	movs	r2, #0
 80081b0:	4b18      	ldr	r3, [pc, #96]	; (8008214 <pow+0x2c8>)
 80081b2:	e7da      	b.n	800816a <pow+0x21e>
 80081b4:	2200      	movs	r2, #0
 80081b6:	2300      	movs	r3, #0
 80081b8:	ec51 0b18 	vmov	r0, r1, d8
 80081bc:	f7f8 fc94 	bl	8000ae8 <__aeabi_dcmpeq>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f43f af3a 	beq.w	800803a <pow+0xee>
 80081c6:	ec47 6b10 	vmov	d0, r6, r7
 80081ca:	f000 fdf8 	bl	8008dbe <finite>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f43f af33 	beq.w	800803a <pow+0xee>
 80081d4:	ec45 4b10 	vmov	d0, r4, r5
 80081d8:	f000 fdf1 	bl	8008dbe <finite>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f43f af2c 	beq.w	800803a <pow+0xee>
 80081e2:	2304      	movs	r3, #4
 80081e4:	9302      	str	r3, [sp, #8]
 80081e6:	4b09      	ldr	r3, [pc, #36]	; (800820c <pow+0x2c0>)
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	2300      	movs	r3, #0
 80081ec:	930a      	str	r3, [sp, #40]	; 0x28
 80081ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80081f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80081f6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80081fa:	e7b8      	b.n	800816e <pow+0x222>
 80081fc:	a802      	add	r0, sp, #8
 80081fe:	f000 fde6 	bl	8008dce <matherr>
 8008202:	2800      	cmp	r0, #0
 8008204:	f47f af11 	bne.w	800802a <pow+0xde>
 8008208:	e7b5      	b.n	8008176 <pow+0x22a>
 800820a:	bf00      	nop
 800820c:	08009237 	.word	0x08009237
 8008210:	3ff00000 	.word	0x3ff00000
 8008214:	fff00000 	.word	0xfff00000
 8008218:	3fe00000 	.word	0x3fe00000
 800821c:	47efffff 	.word	0x47efffff
 8008220:	c7efffff 	.word	0xc7efffff
 8008224:	7ff00000 	.word	0x7ff00000
 8008228:	20000074 	.word	0x20000074
 800822c:	00000000 	.word	0x00000000

08008230 <__ieee754_pow>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	b091      	sub	sp, #68	; 0x44
 8008236:	ed8d 1b00 	vstr	d1, [sp]
 800823a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800823e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008242:	ea58 0302 	orrs.w	r3, r8, r2
 8008246:	ec57 6b10 	vmov	r6, r7, d0
 800824a:	f000 84be 	beq.w	8008bca <__ieee754_pow+0x99a>
 800824e:	4b7a      	ldr	r3, [pc, #488]	; (8008438 <__ieee754_pow+0x208>)
 8008250:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008254:	429c      	cmp	r4, r3
 8008256:	463d      	mov	r5, r7
 8008258:	ee10 aa10 	vmov	sl, s0
 800825c:	dc09      	bgt.n	8008272 <__ieee754_pow+0x42>
 800825e:	d103      	bne.n	8008268 <__ieee754_pow+0x38>
 8008260:	b93e      	cbnz	r6, 8008272 <__ieee754_pow+0x42>
 8008262:	45a0      	cmp	r8, r4
 8008264:	dc0d      	bgt.n	8008282 <__ieee754_pow+0x52>
 8008266:	e001      	b.n	800826c <__ieee754_pow+0x3c>
 8008268:	4598      	cmp	r8, r3
 800826a:	dc02      	bgt.n	8008272 <__ieee754_pow+0x42>
 800826c:	4598      	cmp	r8, r3
 800826e:	d10e      	bne.n	800828e <__ieee754_pow+0x5e>
 8008270:	b16a      	cbz	r2, 800828e <__ieee754_pow+0x5e>
 8008272:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008276:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800827a:	ea54 030a 	orrs.w	r3, r4, sl
 800827e:	f000 84a4 	beq.w	8008bca <__ieee754_pow+0x99a>
 8008282:	486e      	ldr	r0, [pc, #440]	; (800843c <__ieee754_pow+0x20c>)
 8008284:	b011      	add	sp, #68	; 0x44
 8008286:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828a:	f000 bda5 	b.w	8008dd8 <nan>
 800828e:	2d00      	cmp	r5, #0
 8008290:	da53      	bge.n	800833a <__ieee754_pow+0x10a>
 8008292:	4b6b      	ldr	r3, [pc, #428]	; (8008440 <__ieee754_pow+0x210>)
 8008294:	4598      	cmp	r8, r3
 8008296:	dc4d      	bgt.n	8008334 <__ieee754_pow+0x104>
 8008298:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800829c:	4598      	cmp	r8, r3
 800829e:	dd4c      	ble.n	800833a <__ieee754_pow+0x10a>
 80082a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80082a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80082a8:	2b14      	cmp	r3, #20
 80082aa:	dd26      	ble.n	80082fa <__ieee754_pow+0xca>
 80082ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80082b0:	fa22 f103 	lsr.w	r1, r2, r3
 80082b4:	fa01 f303 	lsl.w	r3, r1, r3
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d13e      	bne.n	800833a <__ieee754_pow+0x10a>
 80082bc:	f001 0101 	and.w	r1, r1, #1
 80082c0:	f1c1 0b02 	rsb	fp, r1, #2
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d15b      	bne.n	8008380 <__ieee754_pow+0x150>
 80082c8:	4b5b      	ldr	r3, [pc, #364]	; (8008438 <__ieee754_pow+0x208>)
 80082ca:	4598      	cmp	r8, r3
 80082cc:	d124      	bne.n	8008318 <__ieee754_pow+0xe8>
 80082ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80082d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80082d6:	ea53 030a 	orrs.w	r3, r3, sl
 80082da:	f000 8476 	beq.w	8008bca <__ieee754_pow+0x99a>
 80082de:	4b59      	ldr	r3, [pc, #356]	; (8008444 <__ieee754_pow+0x214>)
 80082e0:	429c      	cmp	r4, r3
 80082e2:	dd2d      	ble.n	8008340 <__ieee754_pow+0x110>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	f280 8473 	bge.w	8008bd2 <__ieee754_pow+0x9a2>
 80082ec:	2000      	movs	r0, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	ec41 0b10 	vmov	d0, r0, r1
 80082f4:	b011      	add	sp, #68	; 0x44
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d13e      	bne.n	800837c <__ieee754_pow+0x14c>
 80082fe:	f1c3 0314 	rsb	r3, r3, #20
 8008302:	fa48 f103 	asr.w	r1, r8, r3
 8008306:	fa01 f303 	lsl.w	r3, r1, r3
 800830a:	4543      	cmp	r3, r8
 800830c:	f040 8469 	bne.w	8008be2 <__ieee754_pow+0x9b2>
 8008310:	f001 0101 	and.w	r1, r1, #1
 8008314:	f1c1 0b02 	rsb	fp, r1, #2
 8008318:	4b4b      	ldr	r3, [pc, #300]	; (8008448 <__ieee754_pow+0x218>)
 800831a:	4598      	cmp	r8, r3
 800831c:	d118      	bne.n	8008350 <__ieee754_pow+0x120>
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	f280 845a 	bge.w	8008bda <__ieee754_pow+0x9aa>
 8008326:	4948      	ldr	r1, [pc, #288]	; (8008448 <__ieee754_pow+0x218>)
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	2000      	movs	r0, #0
 800832e:	f7f8 fa9d 	bl	800086c <__aeabi_ddiv>
 8008332:	e7dd      	b.n	80082f0 <__ieee754_pow+0xc0>
 8008334:	f04f 0b02 	mov.w	fp, #2
 8008338:	e7c4      	b.n	80082c4 <__ieee754_pow+0x94>
 800833a:	f04f 0b00 	mov.w	fp, #0
 800833e:	e7c1      	b.n	80082c4 <__ieee754_pow+0x94>
 8008340:	f1b9 0f00 	cmp.w	r9, #0
 8008344:	dad2      	bge.n	80082ec <__ieee754_pow+0xbc>
 8008346:	e9dd 0300 	ldrd	r0, r3, [sp]
 800834a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800834e:	e7cf      	b.n	80082f0 <__ieee754_pow+0xc0>
 8008350:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008354:	d106      	bne.n	8008364 <__ieee754_pow+0x134>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	4610      	mov	r0, r2
 800835c:	4619      	mov	r1, r3
 800835e:	f7f8 f95b 	bl	8000618 <__aeabi_dmul>
 8008362:	e7c5      	b.n	80082f0 <__ieee754_pow+0xc0>
 8008364:	4b39      	ldr	r3, [pc, #228]	; (800844c <__ieee754_pow+0x21c>)
 8008366:	4599      	cmp	r9, r3
 8008368:	d10a      	bne.n	8008380 <__ieee754_pow+0x150>
 800836a:	2d00      	cmp	r5, #0
 800836c:	db08      	blt.n	8008380 <__ieee754_pow+0x150>
 800836e:	ec47 6b10 	vmov	d0, r6, r7
 8008372:	b011      	add	sp, #68	; 0x44
 8008374:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008378:	f000 bc68 	b.w	8008c4c <__ieee754_sqrt>
 800837c:	f04f 0b00 	mov.w	fp, #0
 8008380:	ec47 6b10 	vmov	d0, r6, r7
 8008384:	f000 fd12 	bl	8008dac <fabs>
 8008388:	ec51 0b10 	vmov	r0, r1, d0
 800838c:	f1ba 0f00 	cmp.w	sl, #0
 8008390:	d127      	bne.n	80083e2 <__ieee754_pow+0x1b2>
 8008392:	b124      	cbz	r4, 800839e <__ieee754_pow+0x16e>
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <__ieee754_pow+0x218>)
 8008396:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800839a:	429a      	cmp	r2, r3
 800839c:	d121      	bne.n	80083e2 <__ieee754_pow+0x1b2>
 800839e:	f1b9 0f00 	cmp.w	r9, #0
 80083a2:	da05      	bge.n	80083b0 <__ieee754_pow+0x180>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	2000      	movs	r0, #0
 80083aa:	4927      	ldr	r1, [pc, #156]	; (8008448 <__ieee754_pow+0x218>)
 80083ac:	f7f8 fa5e 	bl	800086c <__aeabi_ddiv>
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	da9d      	bge.n	80082f0 <__ieee754_pow+0xc0>
 80083b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80083b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083bc:	ea54 030b 	orrs.w	r3, r4, fp
 80083c0:	d108      	bne.n	80083d4 <__ieee754_pow+0x1a4>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7f7 ff6d 	bl	80002a8 <__aeabi_dsub>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e7ac      	b.n	800832e <__ieee754_pow+0xfe>
 80083d4:	f1bb 0f01 	cmp.w	fp, #1
 80083d8:	d18a      	bne.n	80082f0 <__ieee754_pow+0xc0>
 80083da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083de:	4619      	mov	r1, r3
 80083e0:	e786      	b.n	80082f0 <__ieee754_pow+0xc0>
 80083e2:	0fed      	lsrs	r5, r5, #31
 80083e4:	1e6b      	subs	r3, r5, #1
 80083e6:	930d      	str	r3, [sp, #52]	; 0x34
 80083e8:	ea5b 0303 	orrs.w	r3, fp, r3
 80083ec:	d102      	bne.n	80083f4 <__ieee754_pow+0x1c4>
 80083ee:	4632      	mov	r2, r6
 80083f0:	463b      	mov	r3, r7
 80083f2:	e7e8      	b.n	80083c6 <__ieee754_pow+0x196>
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <__ieee754_pow+0x220>)
 80083f6:	4598      	cmp	r8, r3
 80083f8:	f340 80fe 	ble.w	80085f8 <__ieee754_pow+0x3c8>
 80083fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008400:	4598      	cmp	r8, r3
 8008402:	dd0a      	ble.n	800841a <__ieee754_pow+0x1ea>
 8008404:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <__ieee754_pow+0x214>)
 8008406:	429c      	cmp	r4, r3
 8008408:	dc0d      	bgt.n	8008426 <__ieee754_pow+0x1f6>
 800840a:	f1b9 0f00 	cmp.w	r9, #0
 800840e:	f6bf af6d 	bge.w	80082ec <__ieee754_pow+0xbc>
 8008412:	a307      	add	r3, pc, #28	; (adr r3, 8008430 <__ieee754_pow+0x200>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	e79f      	b.n	800835a <__ieee754_pow+0x12a>
 800841a:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <__ieee754_pow+0x224>)
 800841c:	429c      	cmp	r4, r3
 800841e:	ddf4      	ble.n	800840a <__ieee754_pow+0x1da>
 8008420:	4b09      	ldr	r3, [pc, #36]	; (8008448 <__ieee754_pow+0x218>)
 8008422:	429c      	cmp	r4, r3
 8008424:	dd18      	ble.n	8008458 <__ieee754_pow+0x228>
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	dcf2      	bgt.n	8008412 <__ieee754_pow+0x1e2>
 800842c:	e75e      	b.n	80082ec <__ieee754_pow+0xbc>
 800842e:	bf00      	nop
 8008430:	8800759c 	.word	0x8800759c
 8008434:	7e37e43c 	.word	0x7e37e43c
 8008438:	7ff00000 	.word	0x7ff00000
 800843c:	08009209 	.word	0x08009209
 8008440:	433fffff 	.word	0x433fffff
 8008444:	3fefffff 	.word	0x3fefffff
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	41e00000 	.word	0x41e00000
 8008454:	3feffffe 	.word	0x3feffffe
 8008458:	2200      	movs	r2, #0
 800845a:	4b63      	ldr	r3, [pc, #396]	; (80085e8 <__ieee754_pow+0x3b8>)
 800845c:	f7f7 ff24 	bl	80002a8 <__aeabi_dsub>
 8008460:	a355      	add	r3, pc, #340	; (adr r3, 80085b8 <__ieee754_pow+0x388>)
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	4604      	mov	r4, r0
 8008468:	460d      	mov	r5, r1
 800846a:	f7f8 f8d5 	bl	8000618 <__aeabi_dmul>
 800846e:	a354      	add	r3, pc, #336	; (adr r3, 80085c0 <__ieee754_pow+0x390>)
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	4606      	mov	r6, r0
 8008476:	460f      	mov	r7, r1
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f8 f8cc 	bl	8000618 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <__ieee754_pow+0x3bc>)
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	f7f8 f8c4 	bl	8000618 <__aeabi_dmul>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	a14c      	add	r1, pc, #304	; (adr r1, 80085c8 <__ieee754_pow+0x398>)
 8008496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849a:	f7f7 ff05 	bl	80002a8 <__aeabi_dsub>
 800849e:	4622      	mov	r2, r4
 80084a0:	462b      	mov	r3, r5
 80084a2:	f7f8 f8b9 	bl	8000618 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	2000      	movs	r0, #0
 80084ac:	4950      	ldr	r1, [pc, #320]	; (80085f0 <__ieee754_pow+0x3c0>)
 80084ae:	f7f7 fefb 	bl	80002a8 <__aeabi_dsub>
 80084b2:	4622      	mov	r2, r4
 80084b4:	462b      	mov	r3, r5
 80084b6:	4680      	mov	r8, r0
 80084b8:	4689      	mov	r9, r1
 80084ba:	4620      	mov	r0, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	f7f8 f8ab 	bl	8000618 <__aeabi_dmul>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	f7f8 f8a5 	bl	8000618 <__aeabi_dmul>
 80084ce:	a340      	add	r3, pc, #256	; (adr r3, 80085d0 <__ieee754_pow+0x3a0>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f8 f8a0 	bl	8000618 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e0:	f7f7 fee2 	bl	80002a8 <__aeabi_dsub>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	4630      	mov	r0, r6
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7f7 fedc 	bl	80002ac <__adddf3>
 80084f4:	2000      	movs	r0, #0
 80084f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084fa:	4632      	mov	r2, r6
 80084fc:	463b      	mov	r3, r7
 80084fe:	f7f7 fed3 	bl	80002a8 <__aeabi_dsub>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4620      	mov	r0, r4
 8008508:	4629      	mov	r1, r5
 800850a:	f7f7 fecd 	bl	80002a8 <__aeabi_dsub>
 800850e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008510:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008514:	4313      	orrs	r3, r2
 8008516:	4606      	mov	r6, r0
 8008518:	460f      	mov	r7, r1
 800851a:	f040 81eb 	bne.w	80088f4 <__ieee754_pow+0x6c4>
 800851e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80085d8 <__ieee754_pow+0x3a8>
 8008522:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008526:	2400      	movs	r4, #0
 8008528:	4622      	mov	r2, r4
 800852a:	462b      	mov	r3, r5
 800852c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008534:	f7f7 feb8 	bl	80002a8 <__aeabi_dsub>
 8008538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800853c:	f7f8 f86c 	bl	8000618 <__aeabi_dmul>
 8008540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008544:	4680      	mov	r8, r0
 8008546:	4689      	mov	r9, r1
 8008548:	4630      	mov	r0, r6
 800854a:	4639      	mov	r1, r7
 800854c:	f7f8 f864 	bl	8000618 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f7 fea8 	bl	80002ac <__adddf3>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008568:	f7f8 f856 	bl	8000618 <__aeabi_dmul>
 800856c:	460b      	mov	r3, r1
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	4602      	mov	r2, r0
 8008574:	4649      	mov	r1, r9
 8008576:	4640      	mov	r0, r8
 8008578:	e9cd 4500 	strd	r4, r5, [sp]
 800857c:	f7f7 fe96 	bl	80002ac <__adddf3>
 8008580:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <__ieee754_pow+0x3c4>)
 8008582:	4299      	cmp	r1, r3
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	468b      	mov	fp, r1
 800858a:	f340 82f7 	ble.w	8008b7c <__ieee754_pow+0x94c>
 800858e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008596:	4303      	orrs	r3, r0
 8008598:	f000 81ea 	beq.w	8008970 <__ieee754_pow+0x740>
 800859c:	a310      	add	r3, pc, #64	; (adr r3, 80085e0 <__ieee754_pow+0x3b0>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085a6:	f7f8 f837 	bl	8000618 <__aeabi_dmul>
 80085aa:	a30d      	add	r3, pc, #52	; (adr r3, 80085e0 <__ieee754_pow+0x3b0>)
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	e6d5      	b.n	800835e <__ieee754_pow+0x12e>
 80085b2:	bf00      	nop
 80085b4:	f3af 8000 	nop.w
 80085b8:	60000000 	.word	0x60000000
 80085bc:	3ff71547 	.word	0x3ff71547
 80085c0:	f85ddf44 	.word	0xf85ddf44
 80085c4:	3e54ae0b 	.word	0x3e54ae0b
 80085c8:	55555555 	.word	0x55555555
 80085cc:	3fd55555 	.word	0x3fd55555
 80085d0:	652b82fe 	.word	0x652b82fe
 80085d4:	3ff71547 	.word	0x3ff71547
 80085d8:	00000000 	.word	0x00000000
 80085dc:	bff00000 	.word	0xbff00000
 80085e0:	8800759c 	.word	0x8800759c
 80085e4:	7e37e43c 	.word	0x7e37e43c
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	3fd00000 	.word	0x3fd00000
 80085f0:	3fe00000 	.word	0x3fe00000
 80085f4:	408fffff 	.word	0x408fffff
 80085f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	da05      	bge.n	800860e <__ieee754_pow+0x3de>
 8008602:	4bd3      	ldr	r3, [pc, #844]	; (8008950 <__ieee754_pow+0x720>)
 8008604:	f7f8 f808 	bl	8000618 <__aeabi_dmul>
 8008608:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800860c:	460c      	mov	r4, r1
 800860e:	1523      	asrs	r3, r4, #20
 8008610:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008614:	4413      	add	r3, r2
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	4bce      	ldr	r3, [pc, #824]	; (8008954 <__ieee754_pow+0x724>)
 800861a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800861e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008622:	429c      	cmp	r4, r3
 8008624:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008628:	dd08      	ble.n	800863c <__ieee754_pow+0x40c>
 800862a:	4bcb      	ldr	r3, [pc, #812]	; (8008958 <__ieee754_pow+0x728>)
 800862c:	429c      	cmp	r4, r3
 800862e:	f340 815e 	ble.w	80088ee <__ieee754_pow+0x6be>
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	3301      	adds	r3, #1
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800863c:	f04f 0a00 	mov.w	sl, #0
 8008640:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008644:	930c      	str	r3, [sp, #48]	; 0x30
 8008646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008648:	4bc4      	ldr	r3, [pc, #784]	; (800895c <__ieee754_pow+0x72c>)
 800864a:	4413      	add	r3, r2
 800864c:	ed93 7b00 	vldr	d7, [r3]
 8008650:	4629      	mov	r1, r5
 8008652:	ec53 2b17 	vmov	r2, r3, d7
 8008656:	ed8d 7b06 	vstr	d7, [sp, #24]
 800865a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800865e:	f7f7 fe23 	bl	80002a8 <__aeabi_dsub>
 8008662:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800866e:	f7f7 fe1d 	bl	80002ac <__adddf3>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	2000      	movs	r0, #0
 8008678:	49b9      	ldr	r1, [pc, #740]	; (8008960 <__ieee754_pow+0x730>)
 800867a:	f7f8 f8f7 	bl	800086c <__aeabi_ddiv>
 800867e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f7 ffc5 	bl	8000618 <__aeabi_dmul>
 800868e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008692:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800869a:	2300      	movs	r3, #0
 800869c:	9302      	str	r3, [sp, #8]
 800869e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80086a2:	106d      	asrs	r5, r5, #1
 80086a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80086a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80086ac:	2200      	movs	r2, #0
 80086ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80086b2:	4640      	mov	r0, r8
 80086b4:	4649      	mov	r1, r9
 80086b6:	4614      	mov	r4, r2
 80086b8:	461d      	mov	r5, r3
 80086ba:	f7f7 ffad 	bl	8000618 <__aeabi_dmul>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4630      	mov	r0, r6
 80086c4:	4639      	mov	r1, r7
 80086c6:	f7f7 fdef 	bl	80002a8 <__aeabi_dsub>
 80086ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 fde7 	bl	80002a8 <__aeabi_dsub>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086e2:	f7f7 fde1 	bl	80002a8 <__aeabi_dsub>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	f7f7 ff95 	bl	8000618 <__aeabi_dmul>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4630      	mov	r0, r6
 80086f4:	4639      	mov	r1, r7
 80086f6:	f7f7 fdd7 	bl	80002a8 <__aeabi_dsub>
 80086fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086fe:	f7f7 ff8b 	bl	8000618 <__aeabi_dmul>
 8008702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800870a:	4610      	mov	r0, r2
 800870c:	4619      	mov	r1, r3
 800870e:	f7f7 ff83 	bl	8000618 <__aeabi_dmul>
 8008712:	a37b      	add	r3, pc, #492	; (adr r3, 8008900 <__ieee754_pow+0x6d0>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	f7f7 ff7c 	bl	8000618 <__aeabi_dmul>
 8008720:	a379      	add	r3, pc, #484	; (adr r3, 8008908 <__ieee754_pow+0x6d8>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdc1 	bl	80002ac <__adddf3>
 800872a:	4622      	mov	r2, r4
 800872c:	462b      	mov	r3, r5
 800872e:	f7f7 ff73 	bl	8000618 <__aeabi_dmul>
 8008732:	a377      	add	r3, pc, #476	; (adr r3, 8008910 <__ieee754_pow+0x6e0>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 fdb8 	bl	80002ac <__adddf3>
 800873c:	4622      	mov	r2, r4
 800873e:	462b      	mov	r3, r5
 8008740:	f7f7 ff6a 	bl	8000618 <__aeabi_dmul>
 8008744:	a374      	add	r3, pc, #464	; (adr r3, 8008918 <__ieee754_pow+0x6e8>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fdaf 	bl	80002ac <__adddf3>
 800874e:	4622      	mov	r2, r4
 8008750:	462b      	mov	r3, r5
 8008752:	f7f7 ff61 	bl	8000618 <__aeabi_dmul>
 8008756:	a372      	add	r3, pc, #456	; (adr r3, 8008920 <__ieee754_pow+0x6f0>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fda6 	bl	80002ac <__adddf3>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 ff58 	bl	8000618 <__aeabi_dmul>
 8008768:	a36f      	add	r3, pc, #444	; (adr r3, 8008928 <__ieee754_pow+0x6f8>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fd9d 	bl	80002ac <__adddf3>
 8008772:	4622      	mov	r2, r4
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	462b      	mov	r3, r5
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f7 ff4b 	bl	8000618 <__aeabi_dmul>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f7 ff45 	bl	8000618 <__aeabi_dmul>
 800878e:	4642      	mov	r2, r8
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	464b      	mov	r3, r9
 8008796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800879a:	f7f7 fd87 	bl	80002ac <__adddf3>
 800879e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087a2:	f7f7 ff39 	bl	8000618 <__aeabi_dmul>
 80087a6:	4622      	mov	r2, r4
 80087a8:	462b      	mov	r3, r5
 80087aa:	f7f7 fd7f 	bl	80002ac <__adddf3>
 80087ae:	4642      	mov	r2, r8
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	464b      	mov	r3, r9
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 ff2d 	bl	8000618 <__aeabi_dmul>
 80087be:	2200      	movs	r2, #0
 80087c0:	4b68      	ldr	r3, [pc, #416]	; (8008964 <__ieee754_pow+0x734>)
 80087c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80087c6:	f7f7 fd71 	bl	80002ac <__adddf3>
 80087ca:	4632      	mov	r2, r6
 80087cc:	463b      	mov	r3, r7
 80087ce:	f7f7 fd6d 	bl	80002ac <__adddf3>
 80087d2:	9802      	ldr	r0, [sp, #8]
 80087d4:	460d      	mov	r5, r1
 80087d6:	4604      	mov	r4, r0
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4640      	mov	r0, r8
 80087de:	4649      	mov	r1, r9
 80087e0:	f7f7 ff1a 	bl	8000618 <__aeabi_dmul>
 80087e4:	2200      	movs	r2, #0
 80087e6:	4680      	mov	r8, r0
 80087e8:	4689      	mov	r9, r1
 80087ea:	4b5e      	ldr	r3, [pc, #376]	; (8008964 <__ieee754_pow+0x734>)
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fd5a 	bl	80002a8 <__aeabi_dsub>
 80087f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087f8:	f7f7 fd56 	bl	80002a8 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4630      	mov	r0, r6
 8008802:	4639      	mov	r1, r7
 8008804:	f7f7 fd50 	bl	80002a8 <__aeabi_dsub>
 8008808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800880c:	f7f7 ff04 	bl	8000618 <__aeabi_dmul>
 8008810:	4622      	mov	r2, r4
 8008812:	4606      	mov	r6, r0
 8008814:	460f      	mov	r7, r1
 8008816:	462b      	mov	r3, r5
 8008818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800881c:	f7f7 fefc 	bl	8000618 <__aeabi_dmul>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4630      	mov	r0, r6
 8008826:	4639      	mov	r1, r7
 8008828:	f7f7 fd40 	bl	80002ac <__adddf3>
 800882c:	4606      	mov	r6, r0
 800882e:	460f      	mov	r7, r1
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f7 fd38 	bl	80002ac <__adddf3>
 800883c:	9802      	ldr	r0, [sp, #8]
 800883e:	a33c      	add	r3, pc, #240	; (adr r3, 8008930 <__ieee754_pow+0x700>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f7 fee6 	bl	8000618 <__aeabi_dmul>
 800884c:	4642      	mov	r2, r8
 800884e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008852:	464b      	mov	r3, r9
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 fd26 	bl	80002a8 <__aeabi_dsub>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd20 	bl	80002a8 <__aeabi_dsub>
 8008868:	a333      	add	r3, pc, #204	; (adr r3, 8008938 <__ieee754_pow+0x708>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fed3 	bl	8000618 <__aeabi_dmul>
 8008872:	a333      	add	r3, pc, #204	; (adr r3, 8008940 <__ieee754_pow+0x710>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	4606      	mov	r6, r0
 800887a:	460f      	mov	r7, r1
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 feca 	bl	8000618 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f7 fd0e 	bl	80002ac <__adddf3>
 8008890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008892:	4b35      	ldr	r3, [pc, #212]	; (8008968 <__ieee754_pow+0x738>)
 8008894:	4413      	add	r3, r2
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fd07 	bl	80002ac <__adddf3>
 800889e:	4604      	mov	r4, r0
 80088a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088a2:	460d      	mov	r5, r1
 80088a4:	f7f7 fe4e 	bl	8000544 <__aeabi_i2d>
 80088a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088aa:	4b30      	ldr	r3, [pc, #192]	; (800896c <__ieee754_pow+0x73c>)
 80088ac:	4413      	add	r3, r2
 80088ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088b2:	4606      	mov	r6, r0
 80088b4:	460f      	mov	r7, r1
 80088b6:	4622      	mov	r2, r4
 80088b8:	462b      	mov	r3, r5
 80088ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088be:	f7f7 fcf5 	bl	80002ac <__adddf3>
 80088c2:	4642      	mov	r2, r8
 80088c4:	464b      	mov	r3, r9
 80088c6:	f7f7 fcf1 	bl	80002ac <__adddf3>
 80088ca:	4632      	mov	r2, r6
 80088cc:	463b      	mov	r3, r7
 80088ce:	f7f7 fced 	bl	80002ac <__adddf3>
 80088d2:	9802      	ldr	r0, [sp, #8]
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088dc:	f7f7 fce4 	bl	80002a8 <__aeabi_dsub>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	f7f7 fce0 	bl	80002a8 <__aeabi_dsub>
 80088e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088ec:	e607      	b.n	80084fe <__ieee754_pow+0x2ce>
 80088ee:	f04f 0a01 	mov.w	sl, #1
 80088f2:	e6a5      	b.n	8008640 <__ieee754_pow+0x410>
 80088f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008948 <__ieee754_pow+0x718>
 80088f8:	e613      	b.n	8008522 <__ieee754_pow+0x2f2>
 80088fa:	bf00      	nop
 80088fc:	f3af 8000 	nop.w
 8008900:	4a454eef 	.word	0x4a454eef
 8008904:	3fca7e28 	.word	0x3fca7e28
 8008908:	93c9db65 	.word	0x93c9db65
 800890c:	3fcd864a 	.word	0x3fcd864a
 8008910:	a91d4101 	.word	0xa91d4101
 8008914:	3fd17460 	.word	0x3fd17460
 8008918:	518f264d 	.word	0x518f264d
 800891c:	3fd55555 	.word	0x3fd55555
 8008920:	db6fabff 	.word	0xdb6fabff
 8008924:	3fdb6db6 	.word	0x3fdb6db6
 8008928:	33333303 	.word	0x33333303
 800892c:	3fe33333 	.word	0x3fe33333
 8008930:	e0000000 	.word	0xe0000000
 8008934:	3feec709 	.word	0x3feec709
 8008938:	dc3a03fd 	.word	0xdc3a03fd
 800893c:	3feec709 	.word	0x3feec709
 8008940:	145b01f5 	.word	0x145b01f5
 8008944:	be3e2fe0 	.word	0xbe3e2fe0
 8008948:	00000000 	.word	0x00000000
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	43400000 	.word	0x43400000
 8008954:	0003988e 	.word	0x0003988e
 8008958:	000bb679 	.word	0x000bb679
 800895c:	08009240 	.word	0x08009240
 8008960:	3ff00000 	.word	0x3ff00000
 8008964:	40080000 	.word	0x40080000
 8008968:	08009260 	.word	0x08009260
 800896c:	08009250 	.word	0x08009250
 8008970:	a3b4      	add	r3, pc, #720	; (adr r3, 8008c44 <__ieee754_pow+0xa14>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	f7f7 fc97 	bl	80002ac <__adddf3>
 800897e:	4622      	mov	r2, r4
 8008980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008984:	462b      	mov	r3, r5
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	f7f7 fc8d 	bl	80002a8 <__aeabi_dsub>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008996:	f7f8 f8cf 	bl	8000b38 <__aeabi_dcmpgt>
 800899a:	2800      	cmp	r0, #0
 800899c:	f47f adfe 	bne.w	800859c <__ieee754_pow+0x36c>
 80089a0:	4aa3      	ldr	r2, [pc, #652]	; (8008c30 <__ieee754_pow+0xa00>)
 80089a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089a6:	4293      	cmp	r3, r2
 80089a8:	f340 810a 	ble.w	8008bc0 <__ieee754_pow+0x990>
 80089ac:	151b      	asrs	r3, r3, #20
 80089ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80089b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80089b6:	fa4a f303 	asr.w	r3, sl, r3
 80089ba:	445b      	add	r3, fp
 80089bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80089c0:	4e9c      	ldr	r6, [pc, #624]	; (8008c34 <__ieee754_pow+0xa04>)
 80089c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80089c6:	4116      	asrs	r6, r2
 80089c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80089cc:	2000      	movs	r0, #0
 80089ce:	ea23 0106 	bic.w	r1, r3, r6
 80089d2:	f1c2 0214 	rsb	r2, r2, #20
 80089d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80089da:	fa4a fa02 	asr.w	sl, sl, r2
 80089de:	f1bb 0f00 	cmp.w	fp, #0
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	bfb8      	it	lt
 80089ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80089f0:	f7f7 fc5a 	bl	80002a8 <__aeabi_dsub>
 80089f4:	e9cd 0100 	strd	r0, r1, [sp]
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f7 fc54 	bl	80002ac <__adddf3>
 8008a04:	2000      	movs	r0, #0
 8008a06:	a378      	add	r3, pc, #480	; (adr r3, 8008be8 <__ieee754_pow+0x9b8>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	460d      	mov	r5, r1
 8008a10:	f7f7 fe02 	bl	8000618 <__aeabi_dmul>
 8008a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a18:	4606      	mov	r6, r0
 8008a1a:	460f      	mov	r7, r1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	4629      	mov	r1, r5
 8008a20:	f7f7 fc42 	bl	80002a8 <__aeabi_dsub>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4640      	mov	r0, r8
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	f7f7 fc3c 	bl	80002a8 <__aeabi_dsub>
 8008a30:	a36f      	add	r3, pc, #444	; (adr r3, 8008bf0 <__ieee754_pow+0x9c0>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fdef 	bl	8000618 <__aeabi_dmul>
 8008a3a:	a36f      	add	r3, pc, #444	; (adr r3, 8008bf8 <__ieee754_pow+0x9c8>)
 8008a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a40:	4680      	mov	r8, r0
 8008a42:	4689      	mov	r9, r1
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f7 fde6 	bl	8000618 <__aeabi_dmul>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f7 fc2a 	bl	80002ac <__adddf3>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f7 fc22 	bl	80002ac <__adddf3>
 8008a68:	4632      	mov	r2, r6
 8008a6a:	463b      	mov	r3, r7
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	4689      	mov	r9, r1
 8008a70:	f7f7 fc1a 	bl	80002a8 <__aeabi_dsub>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f7f7 fc14 	bl	80002a8 <__aeabi_dsub>
 8008a80:	4642      	mov	r2, r8
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	464b      	mov	r3, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f7 fdc4 	bl	8000618 <__aeabi_dmul>
 8008a90:	a35b      	add	r3, pc, #364	; (adr r3, 8008c00 <__ieee754_pow+0x9d0>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	4604      	mov	r4, r0
 8008a98:	460d      	mov	r5, r1
 8008a9a:	f7f7 fdbd 	bl	8000618 <__aeabi_dmul>
 8008a9e:	a35a      	add	r3, pc, #360	; (adr r3, 8008c08 <__ieee754_pow+0x9d8>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fc00 	bl	80002a8 <__aeabi_dsub>
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	462b      	mov	r3, r5
 8008aac:	f7f7 fdb4 	bl	8000618 <__aeabi_dmul>
 8008ab0:	a357      	add	r3, pc, #348	; (adr r3, 8008c10 <__ieee754_pow+0x9e0>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fbf9 	bl	80002ac <__adddf3>
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	f7f7 fdab 	bl	8000618 <__aeabi_dmul>
 8008ac2:	a355      	add	r3, pc, #340	; (adr r3, 8008c18 <__ieee754_pow+0x9e8>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fbee 	bl	80002a8 <__aeabi_dsub>
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f7f7 fda2 	bl	8000618 <__aeabi_dmul>
 8008ad4:	a352      	add	r3, pc, #328	; (adr r3, 8008c20 <__ieee754_pow+0x9f0>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fbe7 	bl	80002ac <__adddf3>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	f7f7 fd99 	bl	8000618 <__aeabi_dmul>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	f7f7 fbdb 	bl	80002a8 <__aeabi_dsub>
 8008af2:	4604      	mov	r4, r0
 8008af4:	460d      	mov	r5, r1
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4640      	mov	r0, r8
 8008afc:	4649      	mov	r1, r9
 8008afe:	f7f7 fd8b 	bl	8000618 <__aeabi_dmul>
 8008b02:	2200      	movs	r2, #0
 8008b04:	e9cd 0100 	strd	r0, r1, [sp]
 8008b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 fbca 	bl	80002a8 <__aeabi_dsub>
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b1c:	f7f7 fea6 	bl	800086c <__aeabi_ddiv>
 8008b20:	4632      	mov	r2, r6
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	463b      	mov	r3, r7
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 fd74 	bl	8000618 <__aeabi_dmul>
 8008b30:	4632      	mov	r2, r6
 8008b32:	463b      	mov	r3, r7
 8008b34:	f7f7 fbba 	bl	80002ac <__adddf3>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fbb2 	bl	80002a8 <__aeabi_dsub>
 8008b44:	4642      	mov	r2, r8
 8008b46:	464b      	mov	r3, r9
 8008b48:	f7f7 fbae 	bl	80002a8 <__aeabi_dsub>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	2000      	movs	r0, #0
 8008b52:	4939      	ldr	r1, [pc, #228]	; (8008c38 <__ieee754_pow+0xa08>)
 8008b54:	f7f7 fba8 	bl	80002a8 <__aeabi_dsub>
 8008b58:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008b5c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	da2f      	bge.n	8008bc6 <__ieee754_pow+0x996>
 8008b66:	4650      	mov	r0, sl
 8008b68:	ec43 2b10 	vmov	d0, r2, r3
 8008b6c:	f000 f9c0 	bl	8008ef0 <scalbn>
 8008b70:	ec51 0b10 	vmov	r0, r1, d0
 8008b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b78:	f7ff bbf1 	b.w	800835e <__ieee754_pow+0x12e>
 8008b7c:	4b2f      	ldr	r3, [pc, #188]	; (8008c3c <__ieee754_pow+0xa0c>)
 8008b7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b82:	429e      	cmp	r6, r3
 8008b84:	f77f af0c 	ble.w	80089a0 <__ieee754_pow+0x770>
 8008b88:	4b2d      	ldr	r3, [pc, #180]	; (8008c40 <__ieee754_pow+0xa10>)
 8008b8a:	440b      	add	r3, r1
 8008b8c:	4303      	orrs	r3, r0
 8008b8e:	d00b      	beq.n	8008ba8 <__ieee754_pow+0x978>
 8008b90:	a325      	add	r3, pc, #148	; (adr r3, 8008c28 <__ieee754_pow+0x9f8>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9a:	f7f7 fd3d 	bl	8000618 <__aeabi_dmul>
 8008b9e:	a322      	add	r3, pc, #136	; (adr r3, 8008c28 <__ieee754_pow+0x9f8>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	f7ff bbdb 	b.w	800835e <__ieee754_pow+0x12e>
 8008ba8:	4622      	mov	r2, r4
 8008baa:	462b      	mov	r3, r5
 8008bac:	f7f7 fb7c 	bl	80002a8 <__aeabi_dsub>
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	f7f7 ffb6 	bl	8000b24 <__aeabi_dcmpge>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f43f aef1 	beq.w	80089a0 <__ieee754_pow+0x770>
 8008bbe:	e7e7      	b.n	8008b90 <__ieee754_pow+0x960>
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	e718      	b.n	80089f8 <__ieee754_pow+0x7c8>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	e7d4      	b.n	8008b74 <__ieee754_pow+0x944>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	491a      	ldr	r1, [pc, #104]	; (8008c38 <__ieee754_pow+0xa08>)
 8008bce:	f7ff bb8f 	b.w	80082f0 <__ieee754_pow+0xc0>
 8008bd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bd6:	f7ff bb8b 	b.w	80082f0 <__ieee754_pow+0xc0>
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7ff bb87 	b.w	80082f0 <__ieee754_pow+0xc0>
 8008be2:	4693      	mov	fp, r2
 8008be4:	f7ff bb98 	b.w	8008318 <__ieee754_pow+0xe8>
 8008be8:	00000000 	.word	0x00000000
 8008bec:	3fe62e43 	.word	0x3fe62e43
 8008bf0:	fefa39ef 	.word	0xfefa39ef
 8008bf4:	3fe62e42 	.word	0x3fe62e42
 8008bf8:	0ca86c39 	.word	0x0ca86c39
 8008bfc:	be205c61 	.word	0xbe205c61
 8008c00:	72bea4d0 	.word	0x72bea4d0
 8008c04:	3e663769 	.word	0x3e663769
 8008c08:	c5d26bf1 	.word	0xc5d26bf1
 8008c0c:	3ebbbd41 	.word	0x3ebbbd41
 8008c10:	af25de2c 	.word	0xaf25de2c
 8008c14:	3f11566a 	.word	0x3f11566a
 8008c18:	16bebd93 	.word	0x16bebd93
 8008c1c:	3f66c16c 	.word	0x3f66c16c
 8008c20:	5555553e 	.word	0x5555553e
 8008c24:	3fc55555 	.word	0x3fc55555
 8008c28:	c2f8f359 	.word	0xc2f8f359
 8008c2c:	01a56e1f 	.word	0x01a56e1f
 8008c30:	3fe00000 	.word	0x3fe00000
 8008c34:	000fffff 	.word	0x000fffff
 8008c38:	3ff00000 	.word	0x3ff00000
 8008c3c:	4090cbff 	.word	0x4090cbff
 8008c40:	3f6f3400 	.word	0x3f6f3400
 8008c44:	652b82fe 	.word	0x652b82fe
 8008c48:	3c971547 	.word	0x3c971547

08008c4c <__ieee754_sqrt>:
 8008c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c50:	4955      	ldr	r1, [pc, #340]	; (8008da8 <__ieee754_sqrt+0x15c>)
 8008c52:	ec55 4b10 	vmov	r4, r5, d0
 8008c56:	43a9      	bics	r1, r5
 8008c58:	462b      	mov	r3, r5
 8008c5a:	462a      	mov	r2, r5
 8008c5c:	d112      	bne.n	8008c84 <__ieee754_sqrt+0x38>
 8008c5e:	ee10 2a10 	vmov	r2, s0
 8008c62:	ee10 0a10 	vmov	r0, s0
 8008c66:	4629      	mov	r1, r5
 8008c68:	f7f7 fcd6 	bl	8000618 <__aeabi_dmul>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4620      	mov	r0, r4
 8008c72:	4629      	mov	r1, r5
 8008c74:	f7f7 fb1a 	bl	80002ac <__adddf3>
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	ec45 4b10 	vmov	d0, r4, r5
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	ee10 0a10 	vmov	r0, s0
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	dc0f      	bgt.n	8008cae <__ieee754_sqrt+0x62>
 8008c8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c92:	4330      	orrs	r0, r6
 8008c94:	d0f2      	beq.n	8008c7c <__ieee754_sqrt+0x30>
 8008c96:	b155      	cbz	r5, 8008cae <__ieee754_sqrt+0x62>
 8008c98:	ee10 2a10 	vmov	r2, s0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7f7 fb02 	bl	80002a8 <__aeabi_dsub>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	f7f7 fde0 	bl	800086c <__aeabi_ddiv>
 8008cac:	e7e4      	b.n	8008c78 <__ieee754_sqrt+0x2c>
 8008cae:	151b      	asrs	r3, r3, #20
 8008cb0:	d073      	beq.n	8008d9a <__ieee754_sqrt+0x14e>
 8008cb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008cb6:	07dd      	lsls	r5, r3, #31
 8008cb8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008cbc:	bf48      	it	mi
 8008cbe:	0fc8      	lsrmi	r0, r1, #31
 8008cc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008cc4:	bf44      	itt	mi
 8008cc6:	0049      	lslmi	r1, r1, #1
 8008cc8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008ccc:	2500      	movs	r5, #0
 8008cce:	1058      	asrs	r0, r3, #1
 8008cd0:	0fcb      	lsrs	r3, r1, #31
 8008cd2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008cd6:	0049      	lsls	r1, r1, #1
 8008cd8:	2316      	movs	r3, #22
 8008cda:	462c      	mov	r4, r5
 8008cdc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008ce0:	19a7      	adds	r7, r4, r6
 8008ce2:	4297      	cmp	r7, r2
 8008ce4:	bfde      	ittt	le
 8008ce6:	19bc      	addle	r4, r7, r6
 8008ce8:	1bd2      	suble	r2, r2, r7
 8008cea:	19ad      	addle	r5, r5, r6
 8008cec:	0fcf      	lsrs	r7, r1, #31
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008cf4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008cf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cfc:	d1f0      	bne.n	8008ce0 <__ieee754_sqrt+0x94>
 8008cfe:	f04f 0c20 	mov.w	ip, #32
 8008d02:	469e      	mov	lr, r3
 8008d04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008d08:	42a2      	cmp	r2, r4
 8008d0a:	eb06 070e 	add.w	r7, r6, lr
 8008d0e:	dc02      	bgt.n	8008d16 <__ieee754_sqrt+0xca>
 8008d10:	d112      	bne.n	8008d38 <__ieee754_sqrt+0xec>
 8008d12:	428f      	cmp	r7, r1
 8008d14:	d810      	bhi.n	8008d38 <__ieee754_sqrt+0xec>
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	eb07 0e06 	add.w	lr, r7, r6
 8008d1c:	da42      	bge.n	8008da4 <__ieee754_sqrt+0x158>
 8008d1e:	f1be 0f00 	cmp.w	lr, #0
 8008d22:	db3f      	blt.n	8008da4 <__ieee754_sqrt+0x158>
 8008d24:	f104 0801 	add.w	r8, r4, #1
 8008d28:	1b12      	subs	r2, r2, r4
 8008d2a:	428f      	cmp	r7, r1
 8008d2c:	bf88      	it	hi
 8008d2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008d32:	1bc9      	subs	r1, r1, r7
 8008d34:	4433      	add	r3, r6
 8008d36:	4644      	mov	r4, r8
 8008d38:	0052      	lsls	r2, r2, #1
 8008d3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008d3e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008d42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008d4a:	d1dd      	bne.n	8008d08 <__ieee754_sqrt+0xbc>
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	d006      	beq.n	8008d5e <__ieee754_sqrt+0x112>
 8008d50:	1c5c      	adds	r4, r3, #1
 8008d52:	bf13      	iteet	ne
 8008d54:	3301      	addne	r3, #1
 8008d56:	3501      	addeq	r5, #1
 8008d58:	4663      	moveq	r3, ip
 8008d5a:	f023 0301 	bicne.w	r3, r3, #1
 8008d5e:	106a      	asrs	r2, r5, #1
 8008d60:	085b      	lsrs	r3, r3, #1
 8008d62:	07e9      	lsls	r1, r5, #31
 8008d64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008d68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008d6c:	bf48      	it	mi
 8008d6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008d72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008d76:	461c      	mov	r4, r3
 8008d78:	e780      	b.n	8008c7c <__ieee754_sqrt+0x30>
 8008d7a:	0aca      	lsrs	r2, r1, #11
 8008d7c:	3815      	subs	r0, #21
 8008d7e:	0549      	lsls	r1, r1, #21
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	d0fa      	beq.n	8008d7a <__ieee754_sqrt+0x12e>
 8008d84:	02d6      	lsls	r6, r2, #11
 8008d86:	d50a      	bpl.n	8008d9e <__ieee754_sqrt+0x152>
 8008d88:	f1c3 0420 	rsb	r4, r3, #32
 8008d8c:	fa21 f404 	lsr.w	r4, r1, r4
 8008d90:	1e5d      	subs	r5, r3, #1
 8008d92:	4099      	lsls	r1, r3
 8008d94:	4322      	orrs	r2, r4
 8008d96:	1b43      	subs	r3, r0, r5
 8008d98:	e78b      	b.n	8008cb2 <__ieee754_sqrt+0x66>
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	e7f0      	b.n	8008d80 <__ieee754_sqrt+0x134>
 8008d9e:	0052      	lsls	r2, r2, #1
 8008da0:	3301      	adds	r3, #1
 8008da2:	e7ef      	b.n	8008d84 <__ieee754_sqrt+0x138>
 8008da4:	46a0      	mov	r8, r4
 8008da6:	e7bf      	b.n	8008d28 <__ieee754_sqrt+0xdc>
 8008da8:	7ff00000 	.word	0x7ff00000

08008dac <fabs>:
 8008dac:	ec51 0b10 	vmov	r0, r1, d0
 8008db0:	ee10 2a10 	vmov	r2, s0
 8008db4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008db8:	ec43 2b10 	vmov	d0, r2, r3
 8008dbc:	4770      	bx	lr

08008dbe <finite>:
 8008dbe:	ee10 3a90 	vmov	r3, s1
 8008dc2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008dc6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008dca:	0fc0      	lsrs	r0, r0, #31
 8008dcc:	4770      	bx	lr

08008dce <matherr>:
 8008dce:	2000      	movs	r0, #0
 8008dd0:	4770      	bx	lr
 8008dd2:	0000      	movs	r0, r0
 8008dd4:	0000      	movs	r0, r0
	...

08008dd8 <nan>:
 8008dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008de0 <nan+0x8>
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	00000000 	.word	0x00000000
 8008de4:	7ff80000 	.word	0x7ff80000

08008de8 <rint>:
 8008de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dea:	ec51 0b10 	vmov	r0, r1, d0
 8008dee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008df2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008df6:	2e13      	cmp	r6, #19
 8008df8:	460b      	mov	r3, r1
 8008dfa:	ee10 4a10 	vmov	r4, s0
 8008dfe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008e02:	dc56      	bgt.n	8008eb2 <rint+0xca>
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	da2b      	bge.n	8008e60 <rint+0x78>
 8008e08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008e0c:	4302      	orrs	r2, r0
 8008e0e:	d023      	beq.n	8008e58 <rint+0x70>
 8008e10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008e14:	4302      	orrs	r2, r0
 8008e16:	4254      	negs	r4, r2
 8008e18:	4314      	orrs	r4, r2
 8008e1a:	0c4b      	lsrs	r3, r1, #17
 8008e1c:	0b24      	lsrs	r4, r4, #12
 8008e1e:	045b      	lsls	r3, r3, #17
 8008e20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008e24:	ea44 0103 	orr.w	r1, r4, r3
 8008e28:	460b      	mov	r3, r1
 8008e2a:	492f      	ldr	r1, [pc, #188]	; (8008ee8 <rint+0x100>)
 8008e2c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008e30:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008e34:	4602      	mov	r2, r0
 8008e36:	4639      	mov	r1, r7
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7f7 fa37 	bl	80002ac <__adddf3>
 8008e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e42:	463b      	mov	r3, r7
 8008e44:	4632      	mov	r2, r6
 8008e46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e4a:	f7f7 fa2d 	bl	80002a8 <__aeabi_dsub>
 8008e4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008e56:	4639      	mov	r1, r7
 8008e58:	ec41 0b10 	vmov	d0, r0, r1
 8008e5c:	b003      	add	sp, #12
 8008e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e60:	4a22      	ldr	r2, [pc, #136]	; (8008eec <rint+0x104>)
 8008e62:	4132      	asrs	r2, r6
 8008e64:	ea01 0702 	and.w	r7, r1, r2
 8008e68:	4307      	orrs	r7, r0
 8008e6a:	d0f5      	beq.n	8008e58 <rint+0x70>
 8008e6c:	0852      	lsrs	r2, r2, #1
 8008e6e:	4011      	ands	r1, r2
 8008e70:	430c      	orrs	r4, r1
 8008e72:	d00b      	beq.n	8008e8c <rint+0xa4>
 8008e74:	ea23 0202 	bic.w	r2, r3, r2
 8008e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e7c:	2e13      	cmp	r6, #19
 8008e7e:	fa43 f306 	asr.w	r3, r3, r6
 8008e82:	bf0c      	ite	eq
 8008e84:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008e88:	2400      	movne	r4, #0
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	4916      	ldr	r1, [pc, #88]	; (8008ee8 <rint+0x100>)
 8008e8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008e92:	4622      	mov	r2, r4
 8008e94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 fa06 	bl	80002ac <__adddf3>
 8008ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eac:	f7f7 f9fc 	bl	80002a8 <__aeabi_dsub>
 8008eb0:	e7d2      	b.n	8008e58 <rint+0x70>
 8008eb2:	2e33      	cmp	r6, #51	; 0x33
 8008eb4:	dd07      	ble.n	8008ec6 <rint+0xde>
 8008eb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008eba:	d1cd      	bne.n	8008e58 <rint+0x70>
 8008ebc:	ee10 2a10 	vmov	r2, s0
 8008ec0:	f7f7 f9f4 	bl	80002ac <__adddf3>
 8008ec4:	e7c8      	b.n	8008e58 <rint+0x70>
 8008ec6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	40f2      	lsrs	r2, r6
 8008ed0:	4210      	tst	r0, r2
 8008ed2:	d0c1      	beq.n	8008e58 <rint+0x70>
 8008ed4:	0852      	lsrs	r2, r2, #1
 8008ed6:	4210      	tst	r0, r2
 8008ed8:	bf1f      	itttt	ne
 8008eda:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008ede:	ea20 0202 	bicne.w	r2, r0, r2
 8008ee2:	4134      	asrne	r4, r6
 8008ee4:	4314      	orrne	r4, r2
 8008ee6:	e7d1      	b.n	8008e8c <rint+0xa4>
 8008ee8:	08009270 	.word	0x08009270
 8008eec:	000fffff 	.word	0x000fffff

08008ef0 <scalbn>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	ec55 4b10 	vmov	r4, r5, d0
 8008ef6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008efa:	4606      	mov	r6, r0
 8008efc:	462b      	mov	r3, r5
 8008efe:	b9aa      	cbnz	r2, 8008f2c <scalbn+0x3c>
 8008f00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f04:	4323      	orrs	r3, r4
 8008f06:	d03b      	beq.n	8008f80 <scalbn+0x90>
 8008f08:	4b31      	ldr	r3, [pc, #196]	; (8008fd0 <scalbn+0xe0>)
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	ee10 0a10 	vmov	r0, s0
 8008f12:	f7f7 fb81 	bl	8000618 <__aeabi_dmul>
 8008f16:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <scalbn+0xe4>)
 8008f18:	429e      	cmp	r6, r3
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	460d      	mov	r5, r1
 8008f1e:	da12      	bge.n	8008f46 <scalbn+0x56>
 8008f20:	a327      	add	r3, pc, #156	; (adr r3, 8008fc0 <scalbn+0xd0>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb77 	bl	8000618 <__aeabi_dmul>
 8008f2a:	e009      	b.n	8008f40 <scalbn+0x50>
 8008f2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008f30:	428a      	cmp	r2, r1
 8008f32:	d10c      	bne.n	8008f4e <scalbn+0x5e>
 8008f34:	ee10 2a10 	vmov	r2, s0
 8008f38:	4620      	mov	r0, r4
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	f7f7 f9b6 	bl	80002ac <__adddf3>
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	e01c      	b.n	8008f80 <scalbn+0x90>
 8008f46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	3a36      	subs	r2, #54	; 0x36
 8008f4e:	4432      	add	r2, r6
 8008f50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008f54:	428a      	cmp	r2, r1
 8008f56:	dd0b      	ble.n	8008f70 <scalbn+0x80>
 8008f58:	ec45 4b11 	vmov	d1, r4, r5
 8008f5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008fc8 <scalbn+0xd8>
 8008f60:	f000 f83c 	bl	8008fdc <copysign>
 8008f64:	a318      	add	r3, pc, #96	; (adr r3, 8008fc8 <scalbn+0xd8>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	ec51 0b10 	vmov	r0, r1, d0
 8008f6e:	e7da      	b.n	8008f26 <scalbn+0x36>
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	dd08      	ble.n	8008f86 <scalbn+0x96>
 8008f74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008f78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008f80:	ec45 4b10 	vmov	d0, r4, r5
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008f8a:	da0d      	bge.n	8008fa8 <scalbn+0xb8>
 8008f8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008f90:	429e      	cmp	r6, r3
 8008f92:	ec45 4b11 	vmov	d1, r4, r5
 8008f96:	dce1      	bgt.n	8008f5c <scalbn+0x6c>
 8008f98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008fc0 <scalbn+0xd0>
 8008f9c:	f000 f81e 	bl	8008fdc <copysign>
 8008fa0:	a307      	add	r3, pc, #28	; (adr r3, 8008fc0 <scalbn+0xd0>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	e7e0      	b.n	8008f6a <scalbn+0x7a>
 8008fa8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fac:	3236      	adds	r2, #54	; 0x36
 8008fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	4629      	mov	r1, r5
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <scalbn+0xe8>)
 8008fbe:	e7b2      	b.n	8008f26 <scalbn+0x36>
 8008fc0:	c2f8f359 	.word	0xc2f8f359
 8008fc4:	01a56e1f 	.word	0x01a56e1f
 8008fc8:	8800759c 	.word	0x8800759c
 8008fcc:	7e37e43c 	.word	0x7e37e43c
 8008fd0:	43500000 	.word	0x43500000
 8008fd4:	ffff3cb0 	.word	0xffff3cb0
 8008fd8:	3c900000 	.word	0x3c900000

08008fdc <copysign>:
 8008fdc:	ec51 0b10 	vmov	r0, r1, d0
 8008fe0:	ee11 0a90 	vmov	r0, s3
 8008fe4:	ee10 2a10 	vmov	r2, s0
 8008fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008fec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008ff0:	ea41 0300 	orr.w	r3, r1, r0
 8008ff4:	ec43 2b10 	vmov	d0, r2, r3
 8008ff8:	4770      	bx	lr
	...

08008ffc <_init>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr

08009008 <_fini>:
 8009008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900a:	bf00      	nop
 800900c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800900e:	bc08      	pop	{r3}
 8009010:	469e      	mov	lr, r3
 8009012:	4770      	bx	lr

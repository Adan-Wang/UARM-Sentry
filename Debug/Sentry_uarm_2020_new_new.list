
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e48  08006e48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e50  08006e50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e50  08006e50  00016e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004190  20000074  08006ecc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004204  08006ecc  00024204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8e0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c3a  00000000  00000000  0003b984  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001430  00000000  00000000  0003f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  000409f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c0d  00000000  00000000  00041c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000128fa  00000000  00000000  00068855  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e29ad  00000000  00000000  0007b14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015dafc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000591c  00000000  00000000  0015db78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c1c 	.word	0x08006c1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006c1c 	.word	0x08006c1c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b972 	b.w	8000904 <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9e08      	ldr	r6, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	4688      	mov	r8, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	d14b      	bne.n	80006de <__udivmoddi4+0xa6>
 8000646:	428a      	cmp	r2, r1
 8000648:	4615      	mov	r5, r2
 800064a:	d967      	bls.n	800071c <__udivmoddi4+0xe4>
 800064c:	fab2 f282 	clz	r2, r2
 8000650:	b14a      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000652:	f1c2 0720 	rsb	r7, r2, #32
 8000656:	fa01 f302 	lsl.w	r3, r1, r2
 800065a:	fa20 f707 	lsr.w	r7, r0, r7
 800065e:	4095      	lsls	r5, r2
 8000660:	ea47 0803 	orr.w	r8, r7, r3
 8000664:	4094      	lsls	r4, r2
 8000666:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800066a:	0c23      	lsrs	r3, r4, #16
 800066c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000670:	fa1f fc85 	uxth.w	ip, r5
 8000674:	fb0e 8817 	mls	r8, lr, r7, r8
 8000678:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800067c:	fb07 f10c 	mul.w	r1, r7, ip
 8000680:	4299      	cmp	r1, r3
 8000682:	d909      	bls.n	8000698 <__udivmoddi4+0x60>
 8000684:	18eb      	adds	r3, r5, r3
 8000686:	f107 30ff 	add.w	r0, r7, #4294967295
 800068a:	f080 811b 	bcs.w	80008c4 <__udivmoddi4+0x28c>
 800068e:	4299      	cmp	r1, r3
 8000690:	f240 8118 	bls.w	80008c4 <__udivmoddi4+0x28c>
 8000694:	3f02      	subs	r7, #2
 8000696:	442b      	add	r3, r5
 8000698:	1a5b      	subs	r3, r3, r1
 800069a:	b2a4      	uxth	r4, r4
 800069c:	fbb3 f0fe 	udiv	r0, r3, lr
 80006a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ac:	45a4      	cmp	ip, r4
 80006ae:	d909      	bls.n	80006c4 <__udivmoddi4+0x8c>
 80006b0:	192c      	adds	r4, r5, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	f080 8107 	bcs.w	80008c8 <__udivmoddi4+0x290>
 80006ba:	45a4      	cmp	ip, r4
 80006bc:	f240 8104 	bls.w	80008c8 <__udivmoddi4+0x290>
 80006c0:	3802      	subs	r0, #2
 80006c2:	442c      	add	r4, r5
 80006c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006c8:	eba4 040c 	sub.w	r4, r4, ip
 80006cc:	2700      	movs	r7, #0
 80006ce:	b11e      	cbz	r6, 80006d8 <__udivmoddi4+0xa0>
 80006d0:	40d4      	lsrs	r4, r2
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9c6 4300 	strd	r4, r3, [r6]
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	428b      	cmp	r3, r1
 80006e0:	d909      	bls.n	80006f6 <__udivmoddi4+0xbe>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	f000 80eb 	beq.w	80008be <__udivmoddi4+0x286>
 80006e8:	2700      	movs	r7, #0
 80006ea:	e9c6 0100 	strd	r0, r1, [r6]
 80006ee:	4638      	mov	r0, r7
 80006f0:	4639      	mov	r1, r7
 80006f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006f6:	fab3 f783 	clz	r7, r3
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d147      	bne.n	800078e <__udivmoddi4+0x156>
 80006fe:	428b      	cmp	r3, r1
 8000700:	d302      	bcc.n	8000708 <__udivmoddi4+0xd0>
 8000702:	4282      	cmp	r2, r0
 8000704:	f200 80fa 	bhi.w	80008fc <__udivmoddi4+0x2c4>
 8000708:	1a84      	subs	r4, r0, r2
 800070a:	eb61 0303 	sbc.w	r3, r1, r3
 800070e:	2001      	movs	r0, #1
 8000710:	4698      	mov	r8, r3
 8000712:	2e00      	cmp	r6, #0
 8000714:	d0e0      	beq.n	80006d8 <__udivmoddi4+0xa0>
 8000716:	e9c6 4800 	strd	r4, r8, [r6]
 800071a:	e7dd      	b.n	80006d8 <__udivmoddi4+0xa0>
 800071c:	b902      	cbnz	r2, 8000720 <__udivmoddi4+0xe8>
 800071e:	deff      	udf	#255	; 0xff
 8000720:	fab2 f282 	clz	r2, r2
 8000724:	2a00      	cmp	r2, #0
 8000726:	f040 808f 	bne.w	8000848 <__udivmoddi4+0x210>
 800072a:	1b49      	subs	r1, r1, r5
 800072c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000730:	fa1f f885 	uxth.w	r8, r5
 8000734:	2701      	movs	r7, #1
 8000736:	fbb1 fcfe 	udiv	ip, r1, lr
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000740:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000744:	fb08 f10c 	mul.w	r1, r8, ip
 8000748:	4299      	cmp	r1, r3
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x124>
 800074c:	18eb      	adds	r3, r5, r3
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x122>
 8000754:	4299      	cmp	r1, r3
 8000756:	f200 80cd 	bhi.w	80008f4 <__udivmoddi4+0x2bc>
 800075a:	4684      	mov	ip, r0
 800075c:	1a59      	subs	r1, r3, r1
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1410 	mls	r4, lr, r0, r1
 8000768:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x14c>
 8000774:	192c      	adds	r4, r5, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x14a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80b6 	bhi.w	80008ee <__udivmoddi4+0x2b6>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e79f      	b.n	80006ce <__udivmoddi4+0x96>
 800078e:	f1c7 0c20 	rsb	ip, r7, #32
 8000792:	40bb      	lsls	r3, r7
 8000794:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000798:	ea4e 0e03 	orr.w	lr, lr, r3
 800079c:	fa01 f407 	lsl.w	r4, r1, r7
 80007a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007ac:	4325      	orrs	r5, r4
 80007ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80007b2:	0c2c      	lsrs	r4, r5, #16
 80007b4:	fb08 3319 	mls	r3, r8, r9, r3
 80007b8:	fa1f fa8e 	uxth.w	sl, lr
 80007bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007c0:	fb09 f40a 	mul.w	r4, r9, sl
 80007c4:	429c      	cmp	r4, r3
 80007c6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ca:	fa00 f107 	lsl.w	r1, r0, r7
 80007ce:	d90b      	bls.n	80007e8 <__udivmoddi4+0x1b0>
 80007d0:	eb1e 0303 	adds.w	r3, lr, r3
 80007d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007d8:	f080 8087 	bcs.w	80008ea <__udivmoddi4+0x2b2>
 80007dc:	429c      	cmp	r4, r3
 80007de:	f240 8084 	bls.w	80008ea <__udivmoddi4+0x2b2>
 80007e2:	f1a9 0902 	sub.w	r9, r9, #2
 80007e6:	4473      	add	r3, lr
 80007e8:	1b1b      	subs	r3, r3, r4
 80007ea:	b2ad      	uxth	r5, r5
 80007ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f0:	fb08 3310 	mls	r3, r8, r0, r3
 80007f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007fc:	45a2      	cmp	sl, r4
 80007fe:	d908      	bls.n	8000812 <__udivmoddi4+0x1da>
 8000800:	eb1e 0404 	adds.w	r4, lr, r4
 8000804:	f100 33ff 	add.w	r3, r0, #4294967295
 8000808:	d26b      	bcs.n	80008e2 <__udivmoddi4+0x2aa>
 800080a:	45a2      	cmp	sl, r4
 800080c:	d969      	bls.n	80008e2 <__udivmoddi4+0x2aa>
 800080e:	3802      	subs	r0, #2
 8000810:	4474      	add	r4, lr
 8000812:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000816:	fba0 8902 	umull	r8, r9, r0, r2
 800081a:	eba4 040a 	sub.w	r4, r4, sl
 800081e:	454c      	cmp	r4, r9
 8000820:	46c2      	mov	sl, r8
 8000822:	464b      	mov	r3, r9
 8000824:	d354      	bcc.n	80008d0 <__udivmoddi4+0x298>
 8000826:	d051      	beq.n	80008cc <__udivmoddi4+0x294>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d069      	beq.n	8000900 <__udivmoddi4+0x2c8>
 800082c:	ebb1 050a 	subs.w	r5, r1, sl
 8000830:	eb64 0403 	sbc.w	r4, r4, r3
 8000834:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000838:	40fd      	lsrs	r5, r7
 800083a:	40fc      	lsrs	r4, r7
 800083c:	ea4c 0505 	orr.w	r5, ip, r5
 8000840:	e9c6 5400 	strd	r5, r4, [r6]
 8000844:	2700      	movs	r7, #0
 8000846:	e747      	b.n	80006d8 <__udivmoddi4+0xa0>
 8000848:	f1c2 0320 	rsb	r3, r2, #32
 800084c:	fa20 f703 	lsr.w	r7, r0, r3
 8000850:	4095      	lsls	r5, r2
 8000852:	fa01 f002 	lsl.w	r0, r1, r2
 8000856:	fa21 f303 	lsr.w	r3, r1, r3
 800085a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800085e:	4338      	orrs	r0, r7
 8000860:	0c01      	lsrs	r1, r0, #16
 8000862:	fbb3 f7fe 	udiv	r7, r3, lr
 8000866:	fa1f f885 	uxth.w	r8, r5
 800086a:	fb0e 3317 	mls	r3, lr, r7, r3
 800086e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000872:	fb07 f308 	mul.w	r3, r7, r8
 8000876:	428b      	cmp	r3, r1
 8000878:	fa04 f402 	lsl.w	r4, r4, r2
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x256>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f107 3cff 	add.w	ip, r7, #4294967295
 8000884:	d22f      	bcs.n	80008e6 <__udivmoddi4+0x2ae>
 8000886:	428b      	cmp	r3, r1
 8000888:	d92d      	bls.n	80008e6 <__udivmoddi4+0x2ae>
 800088a:	3f02      	subs	r7, #2
 800088c:	4429      	add	r1, r5
 800088e:	1acb      	subs	r3, r1, r3
 8000890:	b281      	uxth	r1, r0
 8000892:	fbb3 f0fe 	udiv	r0, r3, lr
 8000896:	fb0e 3310 	mls	r3, lr, r0, r3
 800089a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800089e:	fb00 f308 	mul.w	r3, r0, r8
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d907      	bls.n	80008b6 <__udivmoddi4+0x27e>
 80008a6:	1869      	adds	r1, r5, r1
 80008a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008ac:	d217      	bcs.n	80008de <__udivmoddi4+0x2a6>
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d915      	bls.n	80008de <__udivmoddi4+0x2a6>
 80008b2:	3802      	subs	r0, #2
 80008b4:	4429      	add	r1, r5
 80008b6:	1ac9      	subs	r1, r1, r3
 80008b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008bc:	e73b      	b.n	8000736 <__udivmoddi4+0xfe>
 80008be:	4637      	mov	r7, r6
 80008c0:	4630      	mov	r0, r6
 80008c2:	e709      	b.n	80006d8 <__udivmoddi4+0xa0>
 80008c4:	4607      	mov	r7, r0
 80008c6:	e6e7      	b.n	8000698 <__udivmoddi4+0x60>
 80008c8:	4618      	mov	r0, r3
 80008ca:	e6fb      	b.n	80006c4 <__udivmoddi4+0x8c>
 80008cc:	4541      	cmp	r1, r8
 80008ce:	d2ab      	bcs.n	8000828 <__udivmoddi4+0x1f0>
 80008d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008d4:	eb69 020e 	sbc.w	r2, r9, lr
 80008d8:	3801      	subs	r0, #1
 80008da:	4613      	mov	r3, r2
 80008dc:	e7a4      	b.n	8000828 <__udivmoddi4+0x1f0>
 80008de:	4660      	mov	r0, ip
 80008e0:	e7e9      	b.n	80008b6 <__udivmoddi4+0x27e>
 80008e2:	4618      	mov	r0, r3
 80008e4:	e795      	b.n	8000812 <__udivmoddi4+0x1da>
 80008e6:	4667      	mov	r7, ip
 80008e8:	e7d1      	b.n	800088e <__udivmoddi4+0x256>
 80008ea:	4681      	mov	r9, r0
 80008ec:	e77c      	b.n	80007e8 <__udivmoddi4+0x1b0>
 80008ee:	3802      	subs	r0, #2
 80008f0:	442c      	add	r4, r5
 80008f2:	e747      	b.n	8000784 <__udivmoddi4+0x14c>
 80008f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f8:	442b      	add	r3, r5
 80008fa:	e72f      	b.n	800075c <__udivmoddi4+0x124>
 80008fc:	4638      	mov	r0, r7
 80008fe:	e708      	b.n	8000712 <__udivmoddi4+0xda>
 8000900:	4637      	mov	r7, r6
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0xa0>

08000904 <__aeabi_idiv0>:
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Chassis_Task_Func */
void Chassis_Task_Func(void const * argument)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);
  /* Infinite loop */
  double i=0;
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	f04f 0400 	mov.w	r4, #0
 8000918:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {
	//printf("\nWelcome to RM-EE\n");
	//printf("Hello, the current time is %.2F",i);
	i+=0.1;
 800091c:	a30a      	add	r3, pc, #40	; (adr r3, 8000948 <Chassis_Task_Func+0x40>)
 800091e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000926:	f7ff fcb9 	bl	800029c <__adddf3>
 800092a:	4603      	mov	r3, r0
 800092c:	460c      	mov	r4, r1
 800092e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    osDelay(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000936:	f004 f8a4 	bl	8004a82 <osDelay>
    osDelay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f004 f8a1 	bl	8004a82 <osDelay>
	i+=0.1;
 8000940:	e7ec      	b.n	800091c <Chassis_Task_Func+0x14>
 8000942:	bf00      	nop
 8000944:	f3af 8000 	nop.w
 8000948:	9999999a 	.word	0x9999999a
 800094c:	3fb99999 	.word	0x3fb99999

08000950 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000958:	2102      	movs	r1, #2
 800095a:	4824      	ldr	r0, [pc, #144]	; (80009ec <Gimbal_Task_Function+0x9c>)
 800095c:	f001 fc31 	bl	80021c2 <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 8000962:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000966:	801a      	strh	r2, [r3, #0]



  for(;;)
  {
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4822      	ldr	r0, [pc, #136]	; (80009f4 <Gimbal_Task_Function+0xa4>)
 800096c:	f002 f91d 	bl	8002baa <HAL_GPIO_TogglePin>
	  CAN_Send_Gimbal(velocity,0);
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 8000972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f843 	bl	8000a04 <CAN_Send_Gimbal>
	  uint8_t motorStatus2[8];

	  can_filter_enable(&hcan1);
 800097e:	481b      	ldr	r0, [pc, #108]	; (80009ec <Gimbal_Task_Function+0x9c>)
 8000980:	f000 f888 	bl	8000a94 <can_filter_enable>

	  memcpy(motorStatus2, can_rx_buffer,8);
 8000984:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <Gimbal_Task_Function+0xa8>)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	6810      	ldr	r0, [r2, #0]
 800098c:	6851      	ldr	r1, [r2, #4]
 800098e:	c303      	stmia	r3!, {r0, r1}
	  current_angle=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 8000990:	7a3b      	ldrb	r3, [r7, #8]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21a      	sxth	r2, r3
 8000996:	7a7b      	ldrb	r3, [r7, #9]
 8000998:	b21b      	sxth	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b21a      	sxth	r2, r3
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009a0:	801a      	strh	r2, [r3, #0]
	  //Current angle is absolute
	  printf("The current angle is %d\n",current_angle);
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4815      	ldr	r0, [pc, #84]	; (8000a00 <Gimbal_Task_Function+0xb0>)
 80009ac:	f005 fa52 	bl	8005e54 <iprintf>
	  if (abs(current_angle-4096)<50){
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80009ba:	f113 0f31 	cmn.w	r3, #49	; 0x31
 80009be:	db0a      	blt.n	80009d6 <Gimbal_Task_Function+0x86>
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <Gimbal_Task_Function+0xac>)
 80009c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009c6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80009ca:	2b31      	cmp	r3, #49	; 0x31
 80009cc:	dc03      	bgt.n	80009d6 <Gimbal_Task_Function+0x86>
		  velocity=0;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	801a      	strh	r2, [r3, #0]
 80009d4:	e003      	b.n	80009de <Gimbal_Task_Function+0x8e>
	  }
	  else{
		  velocity=3000;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <Gimbal_Task_Function+0xa0>)
 80009d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009dc:	801a      	strh	r2, [r3, #0]
	  }
	  can_filter_disable(&hcan1);
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <Gimbal_Task_Function+0x9c>)
 80009e0:	f000 f87a 	bl	8000ad8 <can_filter_disable>

	  //End of not working part


	  //osDelay(500);
	  osDelay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f004 f84c 	bl	8004a82 <osDelay>
  {
 80009ea:	e7bd      	b.n	8000968 <Gimbal_Task_Function+0x18>
 80009ec:	200040c4 	.word	0x200040c4
 80009f0:	2000412e 	.word	0x2000412e
 80009f4:	40021800 	.word	0x40021800
 80009f8:	20004130 	.word	0x20004130
 80009fc:	2000412c 	.word	0x2000412c
 8000a00:	08006c34 	.word	0x08006c34

08000a04 <CAN_Send_Gimbal>:
  }
  /* USER CODE END Gimbal_Task_Function */
}

void CAN_Send_Gimbal(int16_t yaw_raw, int16_t pitch_raw)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    //chassis_tx_message.StdId = 0x200;  // 3508
	chassis_tx_message.StdId = 0x1FF;  // gimbal
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000a1a:	601a      	str	r2, [r3, #0]
    chassis_tx_message.IDE = CAN_ID_STD;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
    chassis_tx_message.DLC = 0x08;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	611a      	str	r2, [r3, #16]
    chassis_can_send_data[0] = yaw_raw >> 8;
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	121b      	asrs	r3, r3, #8
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a3a:	701a      	strb	r2, [r3, #0]
    chassis_can_send_data[1] = yaw_raw;
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a42:	705a      	strb	r2, [r3, #1]
    chassis_can_send_data[2] = pitch_raw >> 8;
 8000a44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a48:	121b      	asrs	r3, r3, #8
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a50:	709a      	strb	r2, [r3, #2]
    chassis_can_send_data[3] = pitch_raw;
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a58:	70da      	strb	r2, [r3, #3]
    chassis_can_send_data[4] = 0;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	711a      	strb	r2, [r3, #4]
    chassis_can_send_data[5] = 0;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	715a      	strb	r2, [r3, #5]
    chassis_can_send_data[6] = 0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	719a      	strb	r2, [r3, #6]
    chassis_can_send_data[7] = 0;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	71da      	strb	r2, [r3, #7]


    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <CAN_Send_Gimbal+0x88>)
 8000a78:	4903      	ldr	r1, [pc, #12]	; (8000a88 <CAN_Send_Gimbal+0x84>)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <CAN_Send_Gimbal+0x8c>)
 8000a7c:	f001 f9b4 	bl	8001de8 <HAL_CAN_AddTxMessage>
//    else{
//    	buzzer_play_c1(100);
//    	buzzer_play_d1(100);
//    	buzzer_play_e1(100);
//    }
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	200040c4 	.word	0x200040c4

08000a94 <can_filter_enable>:

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000abc:	231b      	movs	r3, #27
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4619      	mov	r1, r3
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f001 f868 	bl	8001ba0 <HAL_CAN_ConfigFilter>
}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000af8:	2301      	movs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000b00:	231b      	movs	r3, #27
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f001 f846 	bl	8001ba0 <HAL_CAN_ConfigFilter>
}
 8000b14:	bf00      	nop
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_CAN_RxFifo0MsgPendingCallback>:

//This function activates whenever the RxFifo receives a message persumably? But it doesnt seem to work right now
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000b2c:	0d5b      	lsrs	r3, r3, #21
 8000b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b32:	60fb      	str	r3, [r7, #12]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer);
 8000b34:	f107 020c 	add.w	r2, r7, #12
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f001 fa2e 	bl	8001f9e <HAL_CAN_GetRxMessage>
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
	//HAL_Delay(1000);
}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20004130 	.word	0x20004130

08000b50 <HAL_GPIO_EXTI_Callback>:

//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d12b      	bne.n	8000bb8 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8000b60:	4817      	ldr	r0, [pc, #92]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b62:	f7ff ff97 	bl	8000a94 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	6810      	ldr	r0, [r2, #0]
 8000b6e:	6851      	ldr	r1, [r2, #4]
 8000b70:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000b72:	7a3b      	ldrb	r3, [r7, #8]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	7a7b      	ldrb	r3, [r7, #9]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000b80:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000b82:	7abb      	ldrb	r3, [r7, #10]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000b90:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000b92:	7b3b      	ldrb	r3, [r7, #12]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	7b7b      	ldrb	r3, [r7, #13]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000ba2:	9201      	str	r2, [sp, #4]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	2101      	movs	r1, #1
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x78>)
 8000bae:	f005 f951 	bl	8005e54 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bb4:	f7ff ff90 	bl	8000ad8 <can_filter_disable>


	}
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200040c4 	.word	0x200040c4
 8000bc4:	20004130 	.word	0x20004130
 8000bc8:	08006c50 	.word	0x08006c50

08000bcc <Shoot_Task_Func>:
 */
#include "Shoot_App.h"
void shoot_init(void);

void Shoot_Task_Func(void const * argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000bd4:	f000 f81c 	bl	8000c10 <shoot_init>
  for(;;)
  {
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <Shoot_Task_Func+0x3c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <Shoot_Task_Func+0x3c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <Shoot_Task_Func+0x40>)
 8000bf2:	f001 ffda 	bl	8002baa <HAL_GPIO_TogglePin>
    osDelay(500);
 8000bf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bfa:	f003 ff42 	bl	8004a82 <osDelay>
    osDelay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f003 ff3f 	bl	8004a82 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
 8000c04:	e7e8      	b.n	8000bd8 <Shoot_Task_Func+0xc>
 8000c06:	bf00      	nop
 8000c08:	2000405c 	.word	0x2000405c
 8000c0c:	40021800 	.word	0x40021800

08000c10 <shoot_init>:
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000c14:	2100      	movs	r1, #0
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <shoot_init+0x50>)
 8000c18:	f002 fce2 	bl	80035e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <shoot_init+0x50>)
 8000c20:	f002 fcde 	bl	80035e0 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,2000);
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <shoot_init+0x50>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,2000);
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <shoot_init+0x50>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c36:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000c38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c3c:	f003 ff21 	bl	8004a82 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1000);
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <shoot_init+0x50>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1000);
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <shoot_init+0x50>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c52:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000c54:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000c58:	f003 ff13 	bl	8004a82 <osDelay>

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000405c 	.word	0x2000405c

08000c64 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4802      	ldr	r0, [pc, #8]	; (8000c74 <buzzer_init+0x10>)
 8000c6c:	f002 fcb8 	bl	80035e0 <HAL_TIM_PWM_Start>

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200040ec 	.word	0x200040ec

08000c78 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_CAN1_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000c84:	2203      	movs	r2, #3
 8000c86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000c96:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000c9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000c9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ca2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_CAN1_Init+0x64>)
 8000cca:	f000 fe6d 	bl	80019a8 <HAL_CAN_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000cd4:	f000 fa5c 	bl	8001190 <Error_Handler>
  }

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200040c4 	.word	0x200040c4
 8000ce0:	40006400 	.word	0x40006400

08000ce4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d13b      	bne.n	8000d7e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d4e:	2309      	movs	r3, #9
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <HAL_CAN_MspInit+0xac>)
 8000d5a:	f001 fd63 	bl	8002824 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2105      	movs	r1, #5
 8000d62:	2013      	movs	r0, #19
 8000d64:	f001 fd34 	bl	80027d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d68:	2013      	movs	r0, #19
 8000d6a:	f001 fd4d 	bl	8002808 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2105      	movs	r1, #5
 8000d72:	2014      	movs	r0, #20
 8000d74:	f001 fd2c 	bl	80027d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d78:	2014      	movs	r0, #20
 8000d7a:	f001 fd45 	bl	8002808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40006400 	.word	0x40006400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020c00 	.word	0x40020c00

08000d94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000da4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <vApplicationGetIdleTaskMemory+0x30>)
 8000daa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	200000b0 	.word	0x200000b0
 8000dc4:	20000104 	.word	0x20000104

08000dc8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b0a0      	sub	sp, #128	; 0x80
 8000dcc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_FREERTOS_Init+0x98>)
 8000dd0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000de2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fdfe 	bl	80049ea <osThreadCreate>
 8000dee:	4602      	mov	r2, r0
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_FREERTOS_Init+0x9c>)
 8000df2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_FREERTOS_Init+0xa0>)
 8000df6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000dfa:	461d      	mov	r5, r3
 8000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8000e08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fdeb 	bl	80049ea <osThreadCreate>
 8000e14:	67f8      	str	r0, [r7, #124]	; 0x7c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <MX_FREERTOS_Init+0xa4>)
 8000e18:	f107 0420 	add.w	r4, r7, #32
 8000e1c:	461d      	mov	r5, r3
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fdda 	bl	80049ea <osThreadCreate>
 8000e36:	67b8      	str	r0, [r7, #120]	; 0x78

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_FREERTOS_Init+0xa8>)
 8000e3a:	1d3c      	adds	r4, r7, #4
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fdcb 	bl	80049ea <osThreadCreate>
 8000e54:	6778      	str	r0, [r7, #116]	; 0x74
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e56:	bf00      	nop
 8000e58:	3780      	adds	r7, #128	; 0x80
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08006cfc 	.word	0x08006cfc
 8000e64:	20004138 	.word	0x20004138
 8000e68:	08006d24 	.word	0x08006d24
 8000e6c:	08006d4c 	.word	0x08006d4c
 8000e70:	08006d74 	.word	0x08006d74

08000e74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f003 fe00 	bl	8004a82 <osDelay>
 8000e82:	e7fb      	b.n	8000e7c <StartDefaultTask+0x8>

08000e84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a5d      	ldr	r2, [pc, #372]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <MX_GPIO_Init+0x194>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b57      	ldr	r3, [pc, #348]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ec0:	f043 0308 	orr.w	r3, r3, #8
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b54      	ldr	r3, [pc, #336]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b50      	ldr	r3, [pc, #320]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a4f      	ldr	r2, [pc, #316]	; (8001018 <MX_GPIO_Init+0x194>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a48      	ldr	r2, [pc, #288]	; (8001018 <MX_GPIO_Init+0x194>)
 8000ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b46      	ldr	r3, [pc, #280]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b42      	ldr	r3, [pc, #264]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a41      	ldr	r2, [pc, #260]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a3a      	ldr	r2, [pc, #232]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a33      	ldr	r2, [pc, #204]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_GPIO_Init+0x194>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000f64:	482d      	ldr	r0, [pc, #180]	; (800101c <MX_GPIO_Init+0x198>)
 8000f66:	f001 fe07 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	211e      	movs	r1, #30
 8000f6e:	482b      	ldr	r0, [pc, #172]	; (800101c <MX_GPIO_Init+0x198>)
 8000f70:	f001 fe02 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <MX_GPIO_Init+0x19c>)
 8000f7c:	f001 fdfc 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f86:	4827      	ldr	r0, [pc, #156]	; (8001024 <MX_GPIO_Init+0x1a0>)
 8000f88:	f001 fdf6 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8000f8c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000f90:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	481d      	ldr	r0, [pc, #116]	; (800101c <MX_GPIO_Init+0x198>)
 8000fa6:	f001 fc3d 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000faa:	2304      	movs	r3, #4
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_GPIO_Init+0x1a4>)
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481b      	ldr	r0, [pc, #108]	; (800102c <MX_GPIO_Init+0x1a8>)
 8000fbe:	f001 fc31 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8000fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_GPIO_Init+0x19c>)
 8000fdc:	f001 fc22 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <MX_GPIO_Init+0x1a0>)
 8000ffa:	f001 fc13 	bl	8002824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	2008      	movs	r0, #8
 8001004:	f001 fbe4 	bl	80027d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001008:	2008      	movs	r0, #8
 800100a:	f001 fbfd 	bl	8002808 <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	; 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40021800 	.word	0x40021800
 8001020:	40021000 	.word	0x40021000
 8001024:	40021400 	.word	0x40021400
 8001028:	10110000 	.word	0x10110000
 800102c:	40020400 	.word	0x40020400

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 fc76 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f81e 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f7ff ff22 	bl	8000e84 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001040:	f7ff fe1a 	bl	8000c78 <MX_CAN1_Init>
  MX_TIM4_Init();
 8001044:	f000 fa2e 	bl	80014a4 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001048:	f000 fa92 	bl	8001570 <MX_TIM12_Init>
  MX_UART7_Init();
 800104c:	f000 fbce 	bl	80017ec <MX_UART7_Init>
  MX_TIM14_Init();
 8001050:	f000 fad4 	bl	80015fc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001054:	f7ff fe06 	bl	8000c64 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <main+0x40>)
 800105a:	f000 fe81 	bl	8001d60 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <main+0x44>)
 8001060:	f002 fa6f 	bl	8003542 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001064:	f7ff feb0 	bl	8000dc8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001068:	f003 fcb8 	bl	80049dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106c:	e7fe      	b.n	800106c <main+0x3c>
 800106e:	bf00      	nop
 8001070:	200040c4 	.word	0x200040c4
 8001074:	2000417c 	.word	0x2000417c

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fedc 	bl	8005e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a28      	ldr	r2, [pc, #160]	; (8001148 <SystemClock_Config+0xd0>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <SystemClock_Config+0xd0>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <SystemClock_Config+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <SystemClock_Config+0xd4>)
 80010c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <SystemClock_Config+0xd4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d8:	2301      	movs	r3, #1
 80010da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80010ec:	2306      	movs	r3, #6
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010f0:	23a8      	movs	r3, #168	; 0xa8
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fd85 	bl	8002c10 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800110c:	f000 f840 	bl	8001190 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	230f      	movs	r3, #15
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2102      	movs	r1, #2
 800112e:	4618      	mov	r0, r3
 8001130:	f001 ffde 	bl	80030f0 <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800113a:	f000 f829 	bl	8001190 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3750      	adds	r7, #80	; 0x50
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d104      	bne.n	800116c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8001162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001168:	f001 fd1f 	bl	8002baa <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001176:	f000 fbf7 	bl	8001968 <HAL_IncTick>
  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40002000 	.word	0x40002000
 8001188:	40021000 	.word	0x40021000
 800118c:	40000c00 	.word	0x40000c00

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001196:	e7fe      	b.n	8001196 <Error_Handler+0x6>

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_MspInit+0x54>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_MspInit+0x54>)
 80011a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x54>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_MspInit+0x54>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <HAL_MspInit+0x54>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_MspInit+0x54>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	210f      	movs	r1, #15
 80011da:	f06f 0001 	mvn.w	r0, #1
 80011de:	f001 faf7 	bl	80027d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2032      	movs	r0, #50	; 0x32
 8001206:	f001 fae3 	bl	80027d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800120a:	2032      	movs	r0, #50	; 0x32
 800120c:	f001 fafc 	bl	8002808 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_InitTick+0xa4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_InitTick+0xa4>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_InitTick+0xa4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800122c:	f107 0210 	add.w	r2, r7, #16
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f002 f926 	bl	8003488 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800123c:	f002 f8fc 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8001240:	4603      	mov	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <HAL_InitTick+0xa8>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0c9b      	lsrs	r3, r3, #18
 8001250:	3b01      	subs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_InitTick+0xac>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <HAL_InitTick+0xb0>)
 8001258:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_InitTick+0xac>)
 800125c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001260:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_InitTick+0xac>)
 8001264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001266:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_InitTick+0xac>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_InitTick+0xac>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <HAL_InitTick+0xac>)
 8001276:	f002 f939 	bl	80034ec <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d104      	bne.n	800128a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001280:	4806      	ldr	r0, [pc, #24]	; (800129c <HAL_InitTick+0xac>)
 8001282:	f002 f95e 	bl	8003542 <HAL_TIM_Base_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3730      	adds	r7, #48	; 0x30
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	431bde83 	.word	0x431bde83
 800129c:	2000413c 	.word	0x2000413c
 80012a0:	40000c00 	.word	0x40000c00

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80012d4:	2004      	movs	r0, #4
 80012d6:	f001 fc83 	bl	8002be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <CAN1_TX_IRQHandler+0x10>)
 80012e6:	f000 ff92 	bl	800220e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200040c4 	.word	0x200040c4

080012f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <CAN1_RX0_IRQHandler+0x10>)
 80012fa:	f000 ff88 	bl	800220e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200040c4 	.word	0x200040c4

08001308 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800130e:	f002 f9a5 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000417c 	.word	0x2000417c

0800131c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM5_IRQHandler+0x10>)
 8001322:	f002 f99b 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000413c 	.word	0x2000413c

08001330 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00a      	b.n	8001358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001342:	f3af 8000 	nop.w
 8001346:	4601      	mov	r1, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	b2ca      	uxtb	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf0      	blt.n	8001342 <_read+0x12>
	}

return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e009      	b.n	8001390 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fa1f 	bl	80017c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <_write+0x12>
	}
	return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_close>:

int _close(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ca:	605a      	str	r2, [r3, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_isatty>:

int _isatty(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return 1;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
	return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f004 fcd8 	bl	8005df0 <__errno>
 8001440:	4602      	mov	r2, r0
 8001442:	230c      	movs	r3, #12
 8001444:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20030000 	.word	0x20030000
 800146c:	00000400 	.word	0x00000400
 8001470:	20000304 	.word	0x20000304
 8001474:	20004208 	.word	0x20004208

08001478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <SystemInit+0x28>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <SystemInit+0x28>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SystemInit+0x28>)
 800148e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001492:	609a      	str	r2, [r3, #8]
#endif
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
 80014c4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014c8:	4a28      	ldr	r2, [pc, #160]	; (800156c <MX_TIM4_Init+0xc8>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014ce:	2253      	movs	r2, #83	; 0x53
 80014d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014da:	f242 720f 	movw	r2, #9999	; 0x270f
 80014de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014ec:	481e      	ldr	r0, [pc, #120]	; (8001568 <MX_TIM4_Init+0xc4>)
 80014ee:	f002 f84c 	bl	800358a <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80014f8:	f7ff fe4a 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4619      	mov	r1, r3
 800150a:	4817      	ldr	r0, [pc, #92]	; (8001568 <MX_TIM4_Init+0xc4>)
 800150c:	f002 fd12 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001516:	f7ff fe3b 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151a:	2360      	movs	r3, #96	; 0x60
 800151c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM4_Init+0xc4>)
 8001534:	f002 f99a 	bl	800386c <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800153e:	f7ff fe27 	bl	8001190 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2208      	movs	r2, #8
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM4_Init+0xc4>)
 800154a:	f002 f98f 	bl	800386c <HAL_TIM_PWM_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001554:	f7ff fe1c 	bl	8001190 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM4_Init+0xc4>)
 800155a:	f000 f8d3 	bl	8001704 <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000405c 	.word	0x2000405c
 800156c:	40000800 	.word	0x40000800

08001570 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_TIM12_Init+0x84>)
 800158a:	4a1b      	ldr	r2, [pc, #108]	; (80015f8 <MX_TIM12_Init+0x88>)
 800158c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_TIM12_Init+0x84>)
 8001590:	2223      	movs	r2, #35	; 0x23
 8001592:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_TIM12_Init+0x84>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <MX_TIM12_Init+0x84>)
 800159c:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <MX_TIM12_Init+0x84>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <MX_TIM12_Init+0x84>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015ae:	4811      	ldr	r0, [pc, #68]	; (80015f4 <MX_TIM12_Init+0x84>)
 80015b0:	f001 ffeb 	bl	800358a <HAL_TIM_PWM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015ba:	f7ff fde9 	bl	8001190 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015be:	2360      	movs	r3, #96	; 0x60
 80015c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <MX_TIM12_Init+0x84>)
 80015d6:	f002 f949 	bl	800386c <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80015e0:	f7ff fdd6 	bl	8001190 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <MX_TIM12_Init+0x84>)
 80015e6:	f000 f88d 	bl	8001704 <HAL_TIM_MspPostInit>

}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200040ec 	.word	0x200040ec
 80015f8:	40001800 	.word	0x40001800

080015fc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_TIM14_Init+0x40>)
 8001602:	4a0f      	ldr	r2, [pc, #60]	; (8001640 <MX_TIM14_Init+0x44>)
 8001604:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <MX_TIM14_Init+0x40>)
 8001608:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800160c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_TIM14_Init+0x40>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_TIM14_Init+0x40>)
 8001616:	f242 720f 	movw	r2, #9999	; 0x270f
 800161a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_TIM14_Init+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_TIM14_Init+0x40>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_TIM14_Init+0x40>)
 800162a:	f001 ff5f 	bl	80034ec <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001634:	f7ff fdac 	bl	8001190 <Error_Handler>
  }

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000417c 	.word	0x2000417c
 8001640:	40002000 	.word	0x40002000

08001644 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_TIM_PWM_MspInit+0x64>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10e      	bne.n	8001674 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <HAL_TIM_PWM_MspInit+0x68>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_TIM_PWM_MspInit+0x68>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_TIM_PWM_MspInit+0x68>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001672:	e012      	b.n	800169a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_TIM_PWM_MspInit+0x6c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_PWM_MspInit+0x68>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_TIM_PWM_MspInit+0x68>)
 8001688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_TIM_PWM_MspInit+0x68>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40000800 	.word	0x40000800
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40001800 	.word	0x40001800

080016b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_TIM_Base_MspInit+0x48>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d115      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_TIM_Base_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_TIM_Base_MspInit+0x4c>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_TIM_Base_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2105      	movs	r1, #5
 80016e6:	202d      	movs	r0, #45	; 0x2d
 80016e8:	f001 f872 	bl	80027d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80016ec:	202d      	movs	r0, #45	; 0x2d
 80016ee:	f001 f88b 	bl	8002808 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40002000 	.word	0x40002000
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <HAL_TIM_MspPostInit+0xb0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11f      	bne.n	8001766 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_TIM_MspPostInit+0xb4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <HAL_TIM_MspPostInit+0xb4>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_TIM_MspPostInit+0xb4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8001742:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001754:	2302      	movs	r3, #2
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <HAL_TIM_MspPostInit+0xb8>)
 8001760:	f001 f860 	bl	8002824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001764:	e022      	b.n	80017ac <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_TIM_MspPostInit+0xbc>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d11d      	bne.n	80017ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_TIM_MspPostInit+0xb4>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_TIM_MspPostInit+0xb4>)
 800177a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_TIM_MspPostInit+0xb4>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800179c:	2309      	movs	r3, #9
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <HAL_TIM_MspPostInit+0xc0>)
 80017a8:	f001 f83c 	bl	8002824 <HAL_GPIO_Init>
}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40000800 	.word	0x40000800
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40001800 	.word	0x40001800
 80017c4:	40021c00 	.word	0x40021c00

080017c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 80017d0:	1d39      	adds	r1, r7, #4
 80017d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d6:	2201      	movs	r2, #1
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <__io_putchar+0x20>)
 80017da:	f002 fc88 	bl	80040ee <HAL_UART_Transmit>

  return ch;
 80017de:	687b      	ldr	r3, [r7, #4]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200041bc 	.word	0x200041bc

080017ec <MX_UART7_Init>:

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_UART7_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_UART7_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_UART7_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_UART7_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_UART7_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_UART7_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_UART7_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_UART7_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_UART7_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_UART7_Init+0x4c>)
 8001824:	f002 fc16 	bl	8004054 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800182e:	f7ff fcaf 	bl	8001190 <Error_Handler>
  }

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200041bc 	.word	0x200041bc
 800183c:	40007800 	.word	0x40007800

08001840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12c      	bne.n	80018bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_MspInit+0x88>)
 800186c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_UART_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800189a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80018ac:	2308      	movs	r3, #8
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_UART_MspInit+0x8c>)
 80018b8:	f000 ffb4 	bl	8002824 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40007800 	.word	0x40007800
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40021000 	.word	0x40021000

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d6:	e003      	b.n	80018e0 <LoopCopyDataInit>

080018d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018de:	3104      	adds	r1, #4

080018e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e8:	d3f6      	bcc.n	80018d8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018ec:	e002      	b.n	80018f4 <LoopFillZerobss>

080018ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018f0:	f842 3b04 	str.w	r3, [r2], #4

080018f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f8:	d3f9      	bcc.n	80018ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7ff fdbd 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f004 fa7d 	bl	8005dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fb95 	bl	8001030 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001908:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800190c:	08006e58 	.word	0x08006e58
  ldr  r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001914:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001918:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800191c:	20004204 	.word	0x20004204

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 ff34 	bl	80027ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc4c 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fc1e 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	200041fc 	.word	0x200041fc

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200041fc 	.word	0x200041fc

080019a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0ed      	b.n	8001b96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff f98c 	bl	8000ce4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0202 	bic.w	r2, r2, #2
 80019da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019dc:	f7ff ffd8 	bl	8001990 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019e2:	e012      	b.n	8001a0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019e4:	f7ff ffd4 	bl	8001990 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d90b      	bls.n	8001a0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2205      	movs	r2, #5
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0c5      	b.n	8001b96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e5      	bne.n	80019e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a28:	f7ff ffb2 	bl	8001990 <HAL_GetTick>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a2e:	e012      	b.n	8001a56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a30:	f7ff ffae 	bl	8001990 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d90b      	bls.n	8001a56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e09f      	b.n	8001b96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0e5      	beq.n	8001a30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7e1b      	ldrb	r3, [r3, #24]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d108      	bne.n	8001a7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e007      	b.n	8001a8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7e5b      	ldrb	r3, [r3, #25]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d108      	bne.n	8001aa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7e9b      	ldrb	r3, [r3, #26]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e007      	b.n	8001ae2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0220 	bic.w	r2, r2, #32
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7edb      	ldrb	r3, [r3, #27]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d108      	bne.n	8001afc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0210 	bic.w	r2, r2, #16
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e007      	b.n	8001b0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0210 	orr.w	r2, r2, #16
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7f1b      	ldrb	r3, [r3, #28]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d108      	bne.n	8001b26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0208 	orr.w	r2, r2, #8
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e007      	b.n	8001b36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0208 	bic.w	r2, r2, #8
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7f5b      	ldrb	r3, [r3, #29]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d108      	bne.n	8001b50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0204 	orr.w	r2, r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e007      	b.n	8001b60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	ea42 0103 	orr.w	r1, r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d003      	beq.n	8001bc6 <HAL_CAN_ConfigFilter+0x26>
 8001bbe:	7cfb      	ldrb	r3, [r7, #19]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f040 80be 	bne.w	8001d42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001bc6:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <HAL_CAN_ConfigFilter+0x1bc>)
 8001bc8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001be0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2201      	movs	r2, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d123      	bne.n	8001c70 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3248      	adds	r2, #72	; 0x48
 8001c50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c66:	6979      	ldr	r1, [r7, #20]
 8001c68:	3348      	adds	r3, #72	; 0x48
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d122      	bne.n	8001cbe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3248      	adds	r2, #72	; 0x48
 8001c9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	3348      	adds	r3, #72	; 0x48
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001cd8:	e007      	b.n	8001cea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d04:	e007      	b.n	8001d16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d34:	f023 0201 	bic.w	r2, r3, #1
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e006      	b.n	8001d50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
  }
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40006400 	.word	0x40006400

08001d60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d12e      	bne.n	8001dd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0201 	bic.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff fe00 	bl	8001990 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d92:	e012      	b.n	8001dba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d94:	f7ff fdfc 	bl	8001990 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b0a      	cmp	r3, #10
 8001da0:	d90b      	bls.n	8001dba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2205      	movs	r2, #5
 8001db2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e012      	b.n	8001de0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e5      	bne.n	8001d94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e006      	b.n	8001de0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
  }
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d003      	beq.n	8001e14 <HAL_CAN_AddTxMessage+0x2c>
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	f040 80b8 	bne.w	8001f84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80a0 	beq.w	8001f74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	0e1b      	lsrs	r3, r3, #24
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d907      	bls.n	8001e54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e09e      	b.n	8001f92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e54:	2201      	movs	r2, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e70:	68f9      	ldr	r1, [r7, #12]
 8001e72:	6809      	ldr	r1, [r1, #0]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	440b      	add	r3, r1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e00f      	b.n	8001ea2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	440b      	add	r3, r1
 8001ea0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3318      	adds	r3, #24
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	7d1b      	ldrb	r3, [r3, #20]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d111      	bne.n	8001ee2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	3304      	adds	r3, #4
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	6811      	ldr	r1, [r2, #0]
 8001ed2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3318      	adds	r3, #24
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	440b      	add	r3, r1
 8001ede:	3304      	adds	r3, #4
 8001ee0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3307      	adds	r3, #7
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	061a      	lsls	r2, r3, #24
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3306      	adds	r3, #6
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3305      	adds	r3, #5
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	4313      	orrs	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	3204      	adds	r2, #4
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	4610      	mov	r0, r2
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6811      	ldr	r1, [r2, #0]
 8001f0a:	ea43 0200 	orr.w	r2, r3, r0
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3302      	adds	r3, #2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4313      	orrs	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6811      	ldr	r1, [r2, #0]
 8001f40:	ea43 0200 	orr.w	r2, r3, r0
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	440b      	add	r3, r1
 8001f4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3318      	adds	r3, #24
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3318      	adds	r3, #24
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	440b      	add	r3, r1
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e00e      	b.n	8001f92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e006      	b.n	8001f92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b087      	sub	sp, #28
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_GetRxMessage+0x24>
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	f040 80f3 	bne.w	80021a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10e      	bne.n	8001fe6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0e7      	b.n	80021b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0d8      	b.n	80021b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	331b      	adds	r3, #27
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0204 	and.w	r2, r3, #4
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	331b      	adds	r3, #27
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4413      	add	r3, r2
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0d5b      	lsrs	r3, r3, #21
 8002032:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e00b      	b.n	8002054 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	331b      	adds	r3, #27
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	08db      	lsrs	r3, r3, #3
 800204c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	331b      	adds	r3, #27
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4413      	add	r3, r2
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0202 	and.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	331b      	adds	r3, #27
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3304      	adds	r3, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	331b      	adds	r3, #27
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b2da      	uxtb	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	331b      	adds	r3, #27
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0a1a      	lsrs	r2, r3, #8
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	0c1a      	lsrs	r2, r3, #16
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	3302      	adds	r3, #2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	4413      	add	r3, r2
 8002106:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	0e1a      	lsrs	r2, r3, #24
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	3303      	adds	r3, #3
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4413      	add	r3, r2
 8002120:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3304      	adds	r3, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	4413      	add	r3, r2
 8002138:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0a1a      	lsrs	r2, r3, #8
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	3305      	adds	r3, #5
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	4413      	add	r3, r2
 8002152:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0c1a      	lsrs	r2, r3, #16
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3306      	adds	r3, #6
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0e1a      	lsrs	r2, r3, #24
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3307      	adds	r3, #7
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	e007      	b.n	80021a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e006      	b.n	80021b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d002      	beq.n	80021e0 <HAL_CAN_ActivateNotification+0x1e>
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d109      	bne.n	80021f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6959      	ldr	r1, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e006      	b.n	8002202 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b08a      	sub	sp, #40	; 0x28
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d07c      	beq.n	800234e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d023      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f97d 	bl	8002570 <HAL_CAN_TxMailbox0CompleteCallback>
 8002276:	e016      	b.n	80022a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	e00c      	b.n	80022a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e002      	b.n	80022a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f983 	bl	80025ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d024      	beq.n	80022fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f95d 	bl	8002584 <HAL_CAN_TxMailbox1CompleteCallback>
 80022ca:	e016      	b.n	80022fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	e00c      	b.n	80022fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	e002      	b.n	80022fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f963 	bl	80025c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d024      	beq.n	800234e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800230c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f93d 	bl	8002598 <HAL_CAN_TxMailbox2CompleteCallback>
 800231e:	e016      	b.n	800234e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	e00c      	b.n	800234e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
 8002346:	e002      	b.n	800234e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f943 	bl	80025d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2210      	movs	r2, #16
 8002370:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2208      	movs	r2, #8
 800238c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f92a 	bl	80025e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7fe fbb5 	bl	8000b1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00c      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2208      	movs	r2, #8
 80023f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f90c 	bl	8002610 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8f3 	bl	80025fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2210      	movs	r2, #16
 8002430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8f6 	bl	8002624 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2208      	movs	r2, #8
 8002452:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f8ef 	bl	8002638 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d075      	beq.n	8002550 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06c      	beq.n	8002548 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03d      	beq.n	8002548 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d038      	beq.n	8002548 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d017      	beq.n	8002510 <HAL_CAN_IRQHandler+0x302>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d804      	bhi.n	80024ee <HAL_CAN_IRQHandler+0x2e0>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d009      	beq.n	80024fc <HAL_CAN_IRQHandler+0x2ee>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d00c      	beq.n	8002506 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024ec:	e024      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80024ee:	2b50      	cmp	r3, #80	; 0x50
 80024f0:	d018      	beq.n	8002524 <HAL_CAN_IRQHandler+0x316>
 80024f2:	2b60      	cmp	r3, #96	; 0x60
 80024f4:	d01b      	beq.n	800252e <HAL_CAN_IRQHandler+0x320>
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d00f      	beq.n	800251a <HAL_CAN_IRQHandler+0x30c>
            break;
 80024fa:	e01d      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002504:	e018      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800250e:	e013      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	f043 0320 	orr.w	r3, r3, #32
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002518:	e00e      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002522:	e009      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800252c:	e004      	b.n	8002538 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002536:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002546:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2204      	movs	r2, #4
 800254e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f872 	bl	800264c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002568:	bf00      	nop
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	; (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff4c 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e2:	f7ff ff61 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 80027e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	6978      	ldr	r0, [r7, #20]
 80027ee:	f7ff ffb1 	bl	8002754 <NVIC_EncodePriority>
 80027f2:	4602      	mov	r2, r0
 80027f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff80 	bl	8002700 <__NVIC_SetPriority>
}
 8002800:	bf00      	nop
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff54 	bl	80026c4 <__NVIC_EnableIRQ>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	e177      	b.n	8002b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	f040 8166 	bne.w	8002b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d00b      	beq.n	800287e <HAL_GPIO_Init+0x5a>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002872:	2b11      	cmp	r3, #17
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b12      	cmp	r3, #18
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0xfc>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b12      	cmp	r3, #18
 800291e:	d123      	bne.n	8002968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	08da      	lsrs	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3208      	adds	r2, #8
 8002962:	69b9      	ldr	r1, [r7, #24]
 8002964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2203      	movs	r2, #3
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80c0 	beq.w	8002b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_GPIO_Init+0x320>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a64      	ldr	r2, [pc, #400]	; (8002b44 <HAL_GPIO_Init+0x320>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_GPIO_Init+0x320>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029c6:	4a60      	ldr	r2, [pc, #384]	; (8002b48 <HAL_GPIO_Init+0x324>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <HAL_GPIO_Init+0x328>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d037      	beq.n	8002a62 <HAL_GPIO_Init+0x23e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a56      	ldr	r2, [pc, #344]	; (8002b50 <HAL_GPIO_Init+0x32c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_GPIO_Init+0x23a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a55      	ldr	r2, [pc, #340]	; (8002b54 <HAL_GPIO_Init+0x330>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02b      	beq.n	8002a5a <HAL_GPIO_Init+0x236>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <HAL_GPIO_Init+0x334>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d025      	beq.n	8002a56 <HAL_GPIO_Init+0x232>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_GPIO_Init+0x338>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01f      	beq.n	8002a52 <HAL_GPIO_Init+0x22e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_GPIO_Init+0x33c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d019      	beq.n	8002a4e <HAL_GPIO_Init+0x22a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_GPIO_Init+0x340>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_GPIO_Init+0x226>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a50      	ldr	r2, [pc, #320]	; (8002b68 <HAL_GPIO_Init+0x344>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00d      	beq.n	8002a46 <HAL_GPIO_Init+0x222>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <HAL_GPIO_Init+0x348>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <HAL_GPIO_Init+0x21e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4e      	ldr	r2, [pc, #312]	; (8002b70 <HAL_GPIO_Init+0x34c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_GPIO_Init+0x21a>
 8002a3a:	2309      	movs	r3, #9
 8002a3c:	e012      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a3e:	230a      	movs	r3, #10
 8002a40:	e010      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e00e      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a46:	2307      	movs	r3, #7
 8002a48:	e00c      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00a      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a4e:	2305      	movs	r3, #5
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4934      	ldr	r1, [pc, #208]	; (8002b48 <HAL_GPIO_Init+0x324>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a82:	4b3c      	ldr	r3, [pc, #240]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa6:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad0:	4a28      	ldr	r2, [pc, #160]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <HAL_GPIO_Init+0x350>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f ae84 	bls.w	8002840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3724      	adds	r7, #36	; 0x24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020c00 	.word	0x40020c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40021400 	.word	0x40021400
 8002b64:	40021800 	.word	0x40021800
 8002b68:	40021c00 	.word	0x40021c00
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40022400 	.word	0x40022400
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	887b      	ldrh	r3, [r7, #2]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d104      	bne.n	8002bce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	041a      	lsls	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd ffa6 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e25b      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d075      	beq.n	8002d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2e:	4ba3      	ldr	r3, [pc, #652]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4ba0      	ldr	r3, [pc, #640]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d112      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b9d      	ldr	r3, [pc, #628]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	4b99      	ldr	r3, [pc, #612]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x108>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d157      	bne.n	8002d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e236      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x74>
 8002c76:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a90      	ldr	r2, [pc, #576]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x98>
 8002c8e:	4b8b      	ldr	r3, [pc, #556]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a8a      	ldr	r2, [pc, #552]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b88      	ldr	r3, [pc, #544]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a87      	ldr	r2, [pc, #540]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002ca8:	4b84      	ldr	r3, [pc, #528]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a83      	ldr	r2, [pc, #524]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b81      	ldr	r3, [pc, #516]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a80      	ldr	r2, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fe62 	bl	8001990 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fe5e 	bl	8001990 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1fb      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xc0>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fe4e 	bl	8001990 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fe4a 	bl	8001990 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1e7      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b6c      	ldr	r3, [pc, #432]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xe8>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d063      	beq.n	8002dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d26:	4b65      	ldr	r3, [pc, #404]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b62      	ldr	r3, [pc, #392]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x152>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1bb      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b56      	ldr	r3, [pc, #344]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4952      	ldr	r1, [pc, #328]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fe03 	bl	8001990 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fdff 	bl	8001990 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e19c      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4940      	ldr	r1, [pc, #256]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fde2 	bl	8001990 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fdde 	bl	8001990 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e17b      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d030      	beq.n	8002e5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b30      	ldr	r3, [pc, #192]	; (8002ec4 <HAL_RCC_OscConfig+0x2b4>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe fdc2 	bl	8001990 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe fdbe 	bl	8001990 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e15b      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x200>
 8002e2e:	e015      	b.n	8002e5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x2b4>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fdab 	bl	8001990 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fda7 	bl	8001990 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e144      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a0 	beq.w	8002faa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x2b8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d121      	bne.n	8002eea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_RCC_OscConfig+0x2b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_RCC_OscConfig+0x2b8>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe fd6d 	bl	8001990 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e011      	b.n	8002ede <HAL_RCC_OscConfig+0x2ce>
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	42470000 	.word	0x42470000
 8002ec4:	42470e80 	.word	0x42470e80
 8002ec8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe fd60 	bl	8001990 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0fd      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b81      	ldr	r3, [pc, #516]	; (80030e4 <HAL_RCC_OscConfig+0x4d4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <HAL_RCC_OscConfig+0x2f0>
 8002ef2:	4b7d      	ldr	r3, [pc, #500]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a7c      	ldr	r2, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
 8002efe:	e01c      	b.n	8002f3a <HAL_RCC_OscConfig+0x32a>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x312>
 8002f08:	4b77      	ldr	r3, [pc, #476]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a76      	ldr	r2, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	4b74      	ldr	r3, [pc, #464]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f20:	e00b      	b.n	8002f3a <HAL_RCC_OscConfig+0x32a>
 8002f22:	4b71      	ldr	r3, [pc, #452]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a70      	ldr	r2, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a6d      	ldr	r2, [pc, #436]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d015      	beq.n	8002f6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fd25 	bl	8001990 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fd21 	bl	8001990 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0bc      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ee      	beq.n	8002f4a <HAL_RCC_OscConfig+0x33a>
 8002f6c:	e014      	b.n	8002f98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fd0f 	bl	8001990 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fd0b 	bl	8001990 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0a6      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ee      	bne.n	8002f76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b52      	ldr	r3, [pc, #328]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	4a51      	ldr	r2, [pc, #324]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8092 	beq.w	80030d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb4:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d05c      	beq.n	800307a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d141      	bne.n	800304c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b48      	ldr	r3, [pc, #288]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe fcdf 	bl	8001990 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fcdb 	bl	8001990 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e078      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	019b      	lsls	r3, r3, #6
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	3b01      	subs	r3, #1
 800300e:	041b      	lsls	r3, r3, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	061b      	lsls	r3, r3, #24
 8003018:	4933      	ldr	r1, [pc, #204]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fcb4 	bl	8001990 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fcb0 	bl	8001990 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e04d      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x41c>
 800304a:	e045      	b.n	80030d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe fc9d 	bl	8001990 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe fc99 	bl	8001990 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e036      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x44a>
 8003078:	e02e      	b.n	80030d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e029      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_RCC_OscConfig+0x4d8>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	429a      	cmp	r2, r3
 8003098:	d11c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d115      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d106      	bne.n	80030d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470060 	.word	0x42470060

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fbd6 	bl	8001990 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fbd2 	bl	8001990 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4601      	mov	r1, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5cd3      	ldrb	r3, [r2, r3]
 800328a:	fa21 f303 	lsr.w	r3, r1, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd ffaa 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	08006d98 	.word	0x08006d98
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000004 	.word	0x20000004

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d2:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_GetSysClockFreq+0x158>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d007      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x32>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d008      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x38>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f040 808d 	bne.w	8003402 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_RCC_GetSysClockFreq+0x15c>)
 80032ea:	60bb      	str	r3, [r7, #8]
       break;
 80032ec:	e08c      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ee:	4b4b      	ldr	r3, [pc, #300]	; (800341c <HAL_RCC_GetSysClockFreq+0x160>)
 80032f0:	60bb      	str	r3, [r7, #8]
      break;
 80032f2:	e089      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_GetSysClockFreq+0x158>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fe:	4b45      	ldr	r3, [pc, #276]	; (8003414 <HAL_RCC_GetSysClockFreq+0x158>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d023      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b42      	ldr	r3, [pc, #264]	; (8003414 <HAL_RCC_GetSysClockFreq+0x158>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	f04f 0400 	mov.w	r4, #0
 8003314:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	ea03 0501 	and.w	r5, r3, r1
 8003320:	ea04 0602 	and.w	r6, r4, r2
 8003324:	4a3d      	ldr	r2, [pc, #244]	; (800341c <HAL_RCC_GetSysClockFreq+0x160>)
 8003326:	fb02 f106 	mul.w	r1, r2, r6
 800332a:	2200      	movs	r2, #0
 800332c:	fb02 f205 	mul.w	r2, r2, r5
 8003330:	440a      	add	r2, r1
 8003332:	493a      	ldr	r1, [pc, #232]	; (800341c <HAL_RCC_GetSysClockFreq+0x160>)
 8003334:	fba5 0101 	umull	r0, r1, r5, r1
 8003338:	1853      	adds	r3, r2, r1
 800333a:	4619      	mov	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	461a      	mov	r2, r3
 8003344:	4623      	mov	r3, r4
 8003346:	f7fd f95f 	bl	8000608 <__aeabi_uldivmod>
 800334a:	4603      	mov	r3, r0
 800334c:	460c      	mov	r4, r1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e049      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_GetSysClockFreq+0x158>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea03 0501 	and.w	r5, r3, r1
 8003368:	ea04 0602 	and.w	r6, r4, r2
 800336c:	4629      	mov	r1, r5
 800336e:	4632      	mov	r2, r6
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	0154      	lsls	r4, r2, #5
 800337a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800337e:	014b      	lsls	r3, r1, #5
 8003380:	4619      	mov	r1, r3
 8003382:	4622      	mov	r2, r4
 8003384:	1b49      	subs	r1, r1, r5
 8003386:	eb62 0206 	sbc.w	r2, r2, r6
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	0194      	lsls	r4, r2, #6
 8003394:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003398:	018b      	lsls	r3, r1, #6
 800339a:	1a5b      	subs	r3, r3, r1
 800339c:	eb64 0402 	sbc.w	r4, r4, r2
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	00e2      	lsls	r2, r4, #3
 80033aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ae:	00d9      	lsls	r1, r3, #3
 80033b0:	460b      	mov	r3, r1
 80033b2:	4614      	mov	r4, r2
 80033b4:	195b      	adds	r3, r3, r5
 80033b6:	eb44 0406 	adc.w	r4, r4, r6
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	02a2      	lsls	r2, r4, #10
 80033c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033c8:	0299      	lsls	r1, r3, #10
 80033ca:	460b      	mov	r3, r1
 80033cc:	4614      	mov	r4, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	4621      	mov	r1, r4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 0400 	mov.w	r4, #0
 80033d8:	461a      	mov	r2, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	f7fd f914 	bl	8000608 <__aeabi_uldivmod>
 80033e0:	4603      	mov	r3, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_GetSysClockFreq+0x158>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	3301      	adds	r3, #1
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	60bb      	str	r3, [r7, #8]
      break;
 8003400:	e002      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003404:	60bb      	str	r3, [r7, #8]
      break;
 8003406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003408:	68bb      	ldr	r3, [r7, #8]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	00f42400 	.word	0x00f42400
 800341c:	00b71b00 	.word	0x00b71b00

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4601      	mov	r1, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4a03      	ldr	r2, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	08006da8 	.word	0x08006da8

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4601      	mov	r1, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4a03      	ldr	r2, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	fa21 f303 	lsr.w	r3, r1, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08006da8 	.word	0x08006da8

08003488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	220f      	movs	r2, #15
 8003496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_RCC_GetClockConfig+0x60>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40023c00 	.word	0x40023c00

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01d      	b.n	800353a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe f8ce 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fa8c 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d007      	beq.n	800357c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01d      	b.n	80035d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fe f847 	bl	8001644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2202      	movs	r2, #2
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f000 fa3d 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fc78 	bl	8003ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a15      	ldr	r2, [pc, #84]	; (8003654 <HAL_TIM_PWM_Start+0x74>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_TIM_PWM_Start+0x2c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a14      	ldr	r2, [pc, #80]	; (8003658 <HAL_TIM_PWM_Start+0x78>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_TIM_PWM_Start+0x30>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_TIM_PWM_Start+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d007      	beq.n	8003648 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40010000 	.word	0x40010000
 8003658:	40010400 	.word	0x40010400

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0202 	mvn.w	r2, #2
 8003688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9b4 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9a6 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f9b7 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f98a 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f97c 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f98d 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0208 	mvn.w	r2, #8
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2204      	movs	r2, #4
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f960 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f952 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f963 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f936 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f928 	bl	80039f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f939 	bl	8003a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd fcb8 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fc1a 	bl	8004040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8fe 	bl	8003a34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b20      	cmp	r3, #32
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0220 	mvn.w	r2, #32
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fbe4 	bl	800402c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003882:	2302      	movs	r3, #2
 8003884:	e0b4      	b.n	80039f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b0c      	cmp	r3, #12
 800389a:	f200 809f 	bhi.w	80039dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800389e:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038d9 	.word	0x080038d9
 80038a8:	080039dd 	.word	0x080039dd
 80038ac:	080039dd 	.word	0x080039dd
 80038b0:	080039dd 	.word	0x080039dd
 80038b4:	08003919 	.word	0x08003919
 80038b8:	080039dd 	.word	0x080039dd
 80038bc:	080039dd 	.word	0x080039dd
 80038c0:	080039dd 	.word	0x080039dd
 80038c4:	0800395b 	.word	0x0800395b
 80038c8:	080039dd 	.word	0x080039dd
 80038cc:	080039dd 	.word	0x080039dd
 80038d0:	080039dd 	.word	0x080039dd
 80038d4:	0800399b 	.word	0x0800399b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f952 	bl	8003b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0208 	orr.w	r2, r2, #8
 80038f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6999      	ldr	r1, [r3, #24]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	619a      	str	r2, [r3, #24]
      break;
 8003916:	e062      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f9a2 	bl	8003c68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6999      	ldr	r1, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	021a      	lsls	r2, r3, #8
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	619a      	str	r2, [r3, #24]
      break;
 8003958:	e041      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f9f7 	bl	8003d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0208 	orr.w	r2, r2, #8
 8003974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0204 	bic.w	r2, r2, #4
 8003984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69d9      	ldr	r1, [r3, #28]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	61da      	str	r2, [r3, #28]
      break;
 8003998:	e021      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa4b 	bl	8003e3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69da      	ldr	r2, [r3, #28]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	021a      	lsls	r2, r3, #8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	61da      	str	r2, [r3, #28]
      break;
 80039da:	e000      	b.n	80039de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80039dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d013      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d00f      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a3d      	ldr	r2, [pc, #244]	; (8003b60 <TIM_Base_SetConfig+0x118>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <TIM_Base_SetConfig+0x120>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d108      	bne.n	8003a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d02b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d027      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2c      	ldr	r2, [pc, #176]	; (8003b60 <TIM_Base_SetConfig+0x118>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d023      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <TIM_Base_SetConfig+0x120>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d017      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a28      	ldr	r2, [pc, #160]	; (8003b70 <TIM_Base_SetConfig+0x128>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00f      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <TIM_Base_SetConfig+0x130>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <TIM_Base_SetConfig+0x134>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <TIM_Base_SetConfig+0x138>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <TIM_Base_SetConfig+0x13c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <TIM_Base_SetConfig+0x114>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_Base_SetConfig+0xf8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <TIM_Base_SetConfig+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d103      	bne.n	8003b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40000400 	.word	0x40000400
 8003b64:	40000800 	.word	0x40000800
 8003b68:	40000c00 	.word	0x40000c00
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800
 8003b7c:	40001800 	.word	0x40001800
 8003b80:	40001c00 	.word	0x40001c00
 8003b84:	40002000 	.word	0x40002000

08003b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 0302 	bic.w	r3, r3, #2
 8003bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <TIM_OC1_SetConfig+0xd8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC1_SetConfig+0x64>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <TIM_OC1_SetConfig+0xdc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d10c      	bne.n	8003c06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0308 	bic.w	r3, r3, #8
 8003bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <TIM_OC1_SetConfig+0xd8>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d003      	beq.n	8003c16 <TIM_OC1_SetConfig+0x8e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <TIM_OC1_SetConfig+0xdc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d111      	bne.n	8003c3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010400 	.word	0x40010400

08003c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0210 	bic.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0320 	bic.w	r3, r3, #32
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <TIM_OC2_SetConfig+0xe4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_OC2_SetConfig+0x68>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <TIM_OC2_SetConfig+0xe8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d10d      	bne.n	8003cec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <TIM_OC2_SetConfig+0xe4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_OC2_SetConfig+0x94>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <TIM_OC2_SetConfig+0xe8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d113      	bne.n	8003d24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	621a      	str	r2, [r3, #32]
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40010400 	.word	0x40010400

08003d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <TIM_OC3_SetConfig+0xe0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC3_SetConfig+0x66>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <TIM_OC3_SetConfig+0xe4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10d      	bne.n	8003dd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <TIM_OC3_SetConfig+0xe0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d003      	beq.n	8003de6 <TIM_OC3_SetConfig+0x92>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <TIM_OC3_SetConfig+0xe4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d113      	bne.n	8003e0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	621a      	str	r2, [r3, #32]
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40010400 	.word	0x40010400

08003e3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	031b      	lsls	r3, r3, #12
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a12      	ldr	r2, [pc, #72]	; (8003ee0 <TIM_OC4_SetConfig+0xa4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_OC4_SetConfig+0x68>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a11      	ldr	r2, [pc, #68]	; (8003ee4 <TIM_OC4_SetConfig+0xa8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d109      	bne.n	8003eb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	621a      	str	r2, [r3, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	2201      	movs	r2, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e05a      	b.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a21      	ldr	r2, [pc, #132]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d022      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f98:	d01d      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d018      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d009      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40010400 	.word	0x40010400
 8004024:	40014000 	.word	0x40014000
 8004028:	40001800 	.word	0x40001800

0800402c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e03f      	b.n	80040e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd fbe0 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2224      	movs	r2, #36	; 0x24
 8004084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f90b 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b088      	sub	sp, #32
 80040f2:	af02      	add	r7, sp, #8
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4613      	mov	r3, r2
 80040fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 8083 	bne.w	8004216 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_UART_Transmit+0x2e>
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e07b      	b.n	8004218 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_UART_Transmit+0x40>
 800412a:	2302      	movs	r3, #2
 800412c:	e074      	b.n	8004218 <HAL_UART_Transmit+0x12a>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2221      	movs	r2, #33	; 0x21
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004144:	f7fd fc24 	bl	8001990 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	88fa      	ldrh	r2, [r7, #6]
 800414e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	88fa      	ldrh	r2, [r7, #6]
 8004154:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800415e:	e042      	b.n	80041e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d122      	bne.n	80041be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	2180      	movs	r1, #128	; 0x80
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f84c 	bl	8004220 <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e042      	b.n	8004218 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3302      	adds	r3, #2
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	e017      	b.n	80041e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	e013      	b.n	80041e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2200      	movs	r2, #0
 80041c6:	2180      	movs	r1, #128	; 0x80
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f829 	bl	8004220 <UART_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e01f      	b.n	8004218 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	60ba      	str	r2, [r7, #8]
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1b7      	bne.n	8004160 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	2140      	movs	r1, #64	; 0x40
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f810 	bl	8004220 <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e006      	b.n	8004218 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	4613      	mov	r3, r2
 800422e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004230:	e02c      	b.n	800428c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d028      	beq.n	800428c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x30>
 8004240:	f7fd fba6 	bl	8001990 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	429a      	cmp	r2, r3
 800424e:	d21d      	bcs.n	800428c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800425e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e00f      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4013      	ands	r3, r2
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	429a      	cmp	r2, r3
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d0c3      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042f6:	f023 030c 	bic.w	r3, r3, #12
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	430b      	orrs	r3, r1
 8004302:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004322:	f040 818b 	bne.w	800463c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4ac1      	ldr	r2, [pc, #772]	; (8004630 <UART_SetConfig+0x37c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d005      	beq.n	800433c <UART_SetConfig+0x88>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4abf      	ldr	r2, [pc, #764]	; (8004634 <UART_SetConfig+0x380>)
 8004336:	4293      	cmp	r3, r2
 8004338:	f040 80bd 	bne.w	80044b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7ff f890 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004340:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	461d      	mov	r5, r3
 8004346:	f04f 0600 	mov.w	r6, #0
 800434a:	46a8      	mov	r8, r5
 800434c:	46b1      	mov	r9, r6
 800434e:	eb18 0308 	adds.w	r3, r8, r8
 8004352:	eb49 0409 	adc.w	r4, r9, r9
 8004356:	4698      	mov	r8, r3
 8004358:	46a1      	mov	r9, r4
 800435a:	eb18 0805 	adds.w	r8, r8, r5
 800435e:	eb49 0906 	adc.w	r9, r9, r6
 8004362:	f04f 0100 	mov.w	r1, #0
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800436e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004372:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004376:	4688      	mov	r8, r1
 8004378:	4691      	mov	r9, r2
 800437a:	eb18 0005 	adds.w	r0, r8, r5
 800437e:	eb49 0106 	adc.w	r1, r9, r6
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	461d      	mov	r5, r3
 8004388:	f04f 0600 	mov.w	r6, #0
 800438c:	196b      	adds	r3, r5, r5
 800438e:	eb46 0406 	adc.w	r4, r6, r6
 8004392:	461a      	mov	r2, r3
 8004394:	4623      	mov	r3, r4
 8004396:	f7fc f937 	bl	8000608 <__aeabi_uldivmod>
 800439a:	4603      	mov	r3, r0
 800439c:	460c      	mov	r4, r1
 800439e:	461a      	mov	r2, r3
 80043a0:	4ba5      	ldr	r3, [pc, #660]	; (8004638 <UART_SetConfig+0x384>)
 80043a2:	fba3 2302 	umull	r2, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	461d      	mov	r5, r3
 80043b0:	f04f 0600 	mov.w	r6, #0
 80043b4:	46a9      	mov	r9, r5
 80043b6:	46b2      	mov	sl, r6
 80043b8:	eb19 0309 	adds.w	r3, r9, r9
 80043bc:	eb4a 040a 	adc.w	r4, sl, sl
 80043c0:	4699      	mov	r9, r3
 80043c2:	46a2      	mov	sl, r4
 80043c4:	eb19 0905 	adds.w	r9, r9, r5
 80043c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e0:	4689      	mov	r9, r1
 80043e2:	4692      	mov	sl, r2
 80043e4:	eb19 0005 	adds.w	r0, r9, r5
 80043e8:	eb4a 0106 	adc.w	r1, sl, r6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	461d      	mov	r5, r3
 80043f2:	f04f 0600 	mov.w	r6, #0
 80043f6:	196b      	adds	r3, r5, r5
 80043f8:	eb46 0406 	adc.w	r4, r6, r6
 80043fc:	461a      	mov	r2, r3
 80043fe:	4623      	mov	r3, r4
 8004400:	f7fc f902 	bl	8000608 <__aeabi_uldivmod>
 8004404:	4603      	mov	r3, r0
 8004406:	460c      	mov	r4, r1
 8004408:	461a      	mov	r2, r3
 800440a:	4b8b      	ldr	r3, [pc, #556]	; (8004638 <UART_SetConfig+0x384>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	; 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	; 0x32
 800441e:	4a86      	ldr	r2, [pc, #536]	; (8004638 <UART_SetConfig+0x384>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800442c:	4498      	add	r8, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	461d      	mov	r5, r3
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	46a9      	mov	r9, r5
 8004438:	46b2      	mov	sl, r6
 800443a:	eb19 0309 	adds.w	r3, r9, r9
 800443e:	eb4a 040a 	adc.w	r4, sl, sl
 8004442:	4699      	mov	r9, r3
 8004444:	46a2      	mov	sl, r4
 8004446:	eb19 0905 	adds.w	r9, r9, r5
 800444a:	eb4a 0a06 	adc.w	sl, sl, r6
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004462:	4689      	mov	r9, r1
 8004464:	4692      	mov	sl, r2
 8004466:	eb19 0005 	adds.w	r0, r9, r5
 800446a:	eb4a 0106 	adc.w	r1, sl, r6
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	461d      	mov	r5, r3
 8004474:	f04f 0600 	mov.w	r6, #0
 8004478:	196b      	adds	r3, r5, r5
 800447a:	eb46 0406 	adc.w	r4, r6, r6
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	f7fc f8c1 	bl	8000608 <__aeabi_uldivmod>
 8004486:	4603      	mov	r3, r0
 8004488:	460c      	mov	r4, r1
 800448a:	461a      	mov	r2, r3
 800448c:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <UART_SetConfig+0x384>)
 800448e:	fba3 1302 	umull	r1, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2164      	movs	r1, #100	; 0x64
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a65      	ldr	r2, [pc, #404]	; (8004638 <UART_SetConfig+0x384>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f003 0207 	and.w	r2, r3, #7
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4442      	add	r2, r8
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	e26f      	b.n	8004996 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b6:	f7fe ffbf 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 80044ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	461d      	mov	r5, r3
 80044c0:	f04f 0600 	mov.w	r6, #0
 80044c4:	46a8      	mov	r8, r5
 80044c6:	46b1      	mov	r9, r6
 80044c8:	eb18 0308 	adds.w	r3, r8, r8
 80044cc:	eb49 0409 	adc.w	r4, r9, r9
 80044d0:	4698      	mov	r8, r3
 80044d2:	46a1      	mov	r9, r4
 80044d4:	eb18 0805 	adds.w	r8, r8, r5
 80044d8:	eb49 0906 	adc.w	r9, r9, r6
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044f0:	4688      	mov	r8, r1
 80044f2:	4691      	mov	r9, r2
 80044f4:	eb18 0005 	adds.w	r0, r8, r5
 80044f8:	eb49 0106 	adc.w	r1, r9, r6
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	461d      	mov	r5, r3
 8004502:	f04f 0600 	mov.w	r6, #0
 8004506:	196b      	adds	r3, r5, r5
 8004508:	eb46 0406 	adc.w	r4, r6, r6
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fc f87a 	bl	8000608 <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	461a      	mov	r2, r3
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <UART_SetConfig+0x384>)
 800451c:	fba3 2302 	umull	r2, r3, r3, r2
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	461d      	mov	r5, r3
 800452a:	f04f 0600 	mov.w	r6, #0
 800452e:	46a9      	mov	r9, r5
 8004530:	46b2      	mov	sl, r6
 8004532:	eb19 0309 	adds.w	r3, r9, r9
 8004536:	eb4a 040a 	adc.w	r4, sl, sl
 800453a:	4699      	mov	r9, r3
 800453c:	46a2      	mov	sl, r4
 800453e:	eb19 0905 	adds.w	r9, r9, r5
 8004542:	eb4a 0a06 	adc.w	sl, sl, r6
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800455a:	4689      	mov	r9, r1
 800455c:	4692      	mov	sl, r2
 800455e:	eb19 0005 	adds.w	r0, r9, r5
 8004562:	eb4a 0106 	adc.w	r1, sl, r6
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	461d      	mov	r5, r3
 800456c:	f04f 0600 	mov.w	r6, #0
 8004570:	196b      	adds	r3, r5, r5
 8004572:	eb46 0406 	adc.w	r4, r6, r6
 8004576:	461a      	mov	r2, r3
 8004578:	4623      	mov	r3, r4
 800457a:	f7fc f845 	bl	8000608 <__aeabi_uldivmod>
 800457e:	4603      	mov	r3, r0
 8004580:	460c      	mov	r4, r1
 8004582:	461a      	mov	r2, r3
 8004584:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <UART_SetConfig+0x384>)
 8004586:	fba3 1302 	umull	r1, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2164      	movs	r1, #100	; 0x64
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	3332      	adds	r3, #50	; 0x32
 8004598:	4a27      	ldr	r2, [pc, #156]	; (8004638 <UART_SetConfig+0x384>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045a6:	4498      	add	r8, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	461d      	mov	r5, r3
 80045ac:	f04f 0600 	mov.w	r6, #0
 80045b0:	46a9      	mov	r9, r5
 80045b2:	46b2      	mov	sl, r6
 80045b4:	eb19 0309 	adds.w	r3, r9, r9
 80045b8:	eb4a 040a 	adc.w	r4, sl, sl
 80045bc:	4699      	mov	r9, r3
 80045be:	46a2      	mov	sl, r4
 80045c0:	eb19 0905 	adds.w	r9, r9, r5
 80045c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045dc:	4689      	mov	r9, r1
 80045de:	4692      	mov	sl, r2
 80045e0:	eb19 0005 	adds.w	r0, r9, r5
 80045e4:	eb4a 0106 	adc.w	r1, sl, r6
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	461d      	mov	r5, r3
 80045ee:	f04f 0600 	mov.w	r6, #0
 80045f2:	196b      	adds	r3, r5, r5
 80045f4:	eb46 0406 	adc.w	r4, r6, r6
 80045f8:	461a      	mov	r2, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	f7fc f804 	bl	8000608 <__aeabi_uldivmod>
 8004600:	4603      	mov	r3, r0
 8004602:	460c      	mov	r4, r1
 8004604:	461a      	mov	r2, r3
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <UART_SetConfig+0x384>)
 8004608:	fba3 1302 	umull	r1, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2164      	movs	r1, #100	; 0x64
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	3332      	adds	r3, #50	; 0x32
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <UART_SetConfig+0x384>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	f003 0207 	and.w	r2, r3, #7
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4442      	add	r2, r8
 800462c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800462e:	e1b2      	b.n	8004996 <UART_SetConfig+0x6e2>
 8004630:	40011000 	.word	0x40011000
 8004634:	40011400 	.word	0x40011400
 8004638:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4ad7      	ldr	r2, [pc, #860]	; (80049a0 <UART_SetConfig+0x6ec>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d005      	beq.n	8004652 <UART_SetConfig+0x39e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4ad6      	ldr	r2, [pc, #856]	; (80049a4 <UART_SetConfig+0x6f0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	f040 80d1 	bne.w	80047f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004652:	f7fe ff05 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004656:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	469a      	mov	sl, r3
 800465c:	f04f 0b00 	mov.w	fp, #0
 8004660:	46d0      	mov	r8, sl
 8004662:	46d9      	mov	r9, fp
 8004664:	eb18 0308 	adds.w	r3, r8, r8
 8004668:	eb49 0409 	adc.w	r4, r9, r9
 800466c:	4698      	mov	r8, r3
 800466e:	46a1      	mov	r9, r4
 8004670:	eb18 080a 	adds.w	r8, r8, sl
 8004674:	eb49 090b 	adc.w	r9, r9, fp
 8004678:	f04f 0100 	mov.w	r1, #0
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004684:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004688:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800468c:	4688      	mov	r8, r1
 800468e:	4691      	mov	r9, r2
 8004690:	eb1a 0508 	adds.w	r5, sl, r8
 8004694:	eb4b 0609 	adc.w	r6, fp, r9
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4619      	mov	r1, r3
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	f04f 0400 	mov.w	r4, #0
 80046aa:	0094      	lsls	r4, r2, #2
 80046ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	461a      	mov	r2, r3
 80046b4:	4623      	mov	r3, r4
 80046b6:	4628      	mov	r0, r5
 80046b8:	4631      	mov	r1, r6
 80046ba:	f7fb ffa5 	bl	8000608 <__aeabi_uldivmod>
 80046be:	4603      	mov	r3, r0
 80046c0:	460c      	mov	r4, r1
 80046c2:	461a      	mov	r2, r3
 80046c4:	4bb8      	ldr	r3, [pc, #736]	; (80049a8 <UART_SetConfig+0x6f4>)
 80046c6:	fba3 2302 	umull	r2, r3, r3, r2
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	469b      	mov	fp, r3
 80046d4:	f04f 0c00 	mov.w	ip, #0
 80046d8:	46d9      	mov	r9, fp
 80046da:	46e2      	mov	sl, ip
 80046dc:	eb19 0309 	adds.w	r3, r9, r9
 80046e0:	eb4a 040a 	adc.w	r4, sl, sl
 80046e4:	4699      	mov	r9, r3
 80046e6:	46a2      	mov	sl, r4
 80046e8:	eb19 090b 	adds.w	r9, r9, fp
 80046ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004704:	4689      	mov	r9, r1
 8004706:	4692      	mov	sl, r2
 8004708:	eb1b 0509 	adds.w	r5, fp, r9
 800470c:	eb4c 060a 	adc.w	r6, ip, sl
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	f04f 0400 	mov.w	r4, #0
 8004722:	0094      	lsls	r4, r2, #2
 8004724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004728:	008b      	lsls	r3, r1, #2
 800472a:	461a      	mov	r2, r3
 800472c:	4623      	mov	r3, r4
 800472e:	4628      	mov	r0, r5
 8004730:	4631      	mov	r1, r6
 8004732:	f7fb ff69 	bl	8000608 <__aeabi_uldivmod>
 8004736:	4603      	mov	r3, r0
 8004738:	460c      	mov	r4, r1
 800473a:	461a      	mov	r2, r3
 800473c:	4b9a      	ldr	r3, [pc, #616]	; (80049a8 <UART_SetConfig+0x6f4>)
 800473e:	fba3 1302 	umull	r1, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2164      	movs	r1, #100	; 0x64
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a95      	ldr	r2, [pc, #596]	; (80049a8 <UART_SetConfig+0x6f4>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475c:	4498      	add	r8, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	469b      	mov	fp, r3
 8004762:	f04f 0c00 	mov.w	ip, #0
 8004766:	46d9      	mov	r9, fp
 8004768:	46e2      	mov	sl, ip
 800476a:	eb19 0309 	adds.w	r3, r9, r9
 800476e:	eb4a 040a 	adc.w	r4, sl, sl
 8004772:	4699      	mov	r9, r3
 8004774:	46a2      	mov	sl, r4
 8004776:	eb19 090b 	adds.w	r9, r9, fp
 800477a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800477e:	f04f 0100 	mov.w	r1, #0
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800478e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004792:	4689      	mov	r9, r1
 8004794:	4692      	mov	sl, r2
 8004796:	eb1b 0509 	adds.w	r5, fp, r9
 800479a:	eb4c 060a 	adc.w	r6, ip, sl
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4619      	mov	r1, r3
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	f04f 0400 	mov.w	r4, #0
 80047b0:	0094      	lsls	r4, r2, #2
 80047b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047b6:	008b      	lsls	r3, r1, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	4631      	mov	r1, r6
 80047c0:	f7fb ff22 	bl	8000608 <__aeabi_uldivmod>
 80047c4:	4603      	mov	r3, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b77      	ldr	r3, [pc, #476]	; (80049a8 <UART_SetConfig+0x6f4>)
 80047cc:	fba3 1302 	umull	r1, r3, r3, r2
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	2164      	movs	r1, #100	; 0x64
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	3332      	adds	r3, #50	; 0x32
 80047de:	4a72      	ldr	r2, [pc, #456]	; (80049a8 <UART_SetConfig+0x6f4>)
 80047e0:	fba2 2303 	umull	r2, r3, r2, r3
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 020f 	and.w	r2, r3, #15
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4442      	add	r2, r8
 80047f0:	609a      	str	r2, [r3, #8]
 80047f2:	e0d0      	b.n	8004996 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe fe20 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 80047f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	469a      	mov	sl, r3
 80047fe:	f04f 0b00 	mov.w	fp, #0
 8004802:	46d0      	mov	r8, sl
 8004804:	46d9      	mov	r9, fp
 8004806:	eb18 0308 	adds.w	r3, r8, r8
 800480a:	eb49 0409 	adc.w	r4, r9, r9
 800480e:	4698      	mov	r8, r3
 8004810:	46a1      	mov	r9, r4
 8004812:	eb18 080a 	adds.w	r8, r8, sl
 8004816:	eb49 090b 	adc.w	r9, r9, fp
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004826:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800482a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800482e:	4688      	mov	r8, r1
 8004830:	4691      	mov	r9, r2
 8004832:	eb1a 0508 	adds.w	r5, sl, r8
 8004836:	eb4b 0609 	adc.w	r6, fp, r9
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	f04f 0400 	mov.w	r4, #0
 800484c:	0094      	lsls	r4, r2, #2
 800484e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	461a      	mov	r2, r3
 8004856:	4623      	mov	r3, r4
 8004858:	4628      	mov	r0, r5
 800485a:	4631      	mov	r1, r6
 800485c:	f7fb fed4 	bl	8000608 <__aeabi_uldivmod>
 8004860:	4603      	mov	r3, r0
 8004862:	460c      	mov	r4, r1
 8004864:	461a      	mov	r2, r3
 8004866:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <UART_SetConfig+0x6f4>)
 8004868:	fba3 2302 	umull	r2, r3, r3, r2
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	469b      	mov	fp, r3
 8004876:	f04f 0c00 	mov.w	ip, #0
 800487a:	46d9      	mov	r9, fp
 800487c:	46e2      	mov	sl, ip
 800487e:	eb19 0309 	adds.w	r3, r9, r9
 8004882:	eb4a 040a 	adc.w	r4, sl, sl
 8004886:	4699      	mov	r9, r3
 8004888:	46a2      	mov	sl, r4
 800488a:	eb19 090b 	adds.w	r9, r9, fp
 800488e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048a6:	4689      	mov	r9, r1
 80048a8:	4692      	mov	sl, r2
 80048aa:	eb1b 0509 	adds.w	r5, fp, r9
 80048ae:	eb4c 060a 	adc.w	r6, ip, sl
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4619      	mov	r1, r3
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	0094      	lsls	r4, r2, #2
 80048c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ca:	008b      	lsls	r3, r1, #2
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	4631      	mov	r1, r6
 80048d4:	f7fb fe98 	bl	8000608 <__aeabi_uldivmod>
 80048d8:	4603      	mov	r3, r0
 80048da:	460c      	mov	r4, r1
 80048dc:	461a      	mov	r2, r3
 80048de:	4b32      	ldr	r3, [pc, #200]	; (80049a8 <UART_SetConfig+0x6f4>)
 80048e0:	fba3 1302 	umull	r1, r3, r3, r2
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	2164      	movs	r1, #100	; 0x64
 80048e8:	fb01 f303 	mul.w	r3, r1, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	3332      	adds	r3, #50	; 0x32
 80048f2:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <UART_SetConfig+0x6f4>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fe:	4498      	add	r8, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	469b      	mov	fp, r3
 8004904:	f04f 0c00 	mov.w	ip, #0
 8004908:	46d9      	mov	r9, fp
 800490a:	46e2      	mov	sl, ip
 800490c:	eb19 0309 	adds.w	r3, r9, r9
 8004910:	eb4a 040a 	adc.w	r4, sl, sl
 8004914:	4699      	mov	r9, r3
 8004916:	46a2      	mov	sl, r4
 8004918:	eb19 090b 	adds.w	r9, r9, fp
 800491c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800492c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004930:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004934:	4689      	mov	r9, r1
 8004936:	4692      	mov	sl, r2
 8004938:	eb1b 0509 	adds.w	r5, fp, r9
 800493c:	eb4c 060a 	adc.w	r6, ip, sl
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4619      	mov	r1, r3
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f04f 0400 	mov.w	r4, #0
 8004952:	0094      	lsls	r4, r2, #2
 8004954:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004958:	008b      	lsls	r3, r1, #2
 800495a:	461a      	mov	r2, r3
 800495c:	4623      	mov	r3, r4
 800495e:	4628      	mov	r0, r5
 8004960:	4631      	mov	r1, r6
 8004962:	f7fb fe51 	bl	8000608 <__aeabi_uldivmod>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	461a      	mov	r2, r3
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <UART_SetConfig+0x6f4>)
 800496e:	fba3 1302 	umull	r1, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	2164      	movs	r1, #100	; 0x64
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	3332      	adds	r3, #50	; 0x32
 8004980:	4a09      	ldr	r2, [pc, #36]	; (80049a8 <UART_SetConfig+0x6f4>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4442      	add	r2, r8
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	e7ff      	b.n	8004996 <UART_SetConfig+0x6e2>
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80049ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049be:	2b84      	cmp	r3, #132	; 0x84
 80049c0:	d005      	beq.n	80049ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80049c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	3303      	adds	r3, #3
 80049cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049e0:	f000 fada 	bl	8004f98 <vTaskStartScheduler>
  
  return osOK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	bd80      	pop	{r7, pc}

080049ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ec:	b089      	sub	sp, #36	; 0x24
 80049ee:	af04      	add	r7, sp, #16
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <osThreadCreate+0x54>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01c      	beq.n	8004a3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685c      	ldr	r4, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681d      	ldr	r5, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691e      	ldr	r6, [r3, #16]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff ffc8 	bl	80049ac <makeFreeRtosPriority>
 8004a1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a26:	9202      	str	r2, [sp, #8]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	9100      	str	r1, [sp, #0]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	4632      	mov	r2, r6
 8004a30:	4629      	mov	r1, r5
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 f8ed 	bl	8004c12 <xTaskCreateStatic>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e01c      	b.n	8004a78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685c      	ldr	r4, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a4a:	b29e      	uxth	r6, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff ffaa 	bl	80049ac <makeFreeRtosPriority>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	f107 030c 	add.w	r3, r7, #12
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	9200      	str	r2, [sp, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	4632      	mov	r2, r6
 8004a66:	4629      	mov	r1, r5
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 f92c 	bl	8004cc6 <xTaskCreate>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d001      	beq.n	8004a78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <osDelay+0x16>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	e000      	b.n	8004a9a <osDelay+0x18>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa48 	bl	8004f30 <vTaskDelay>
  
  return osOK;
 8004aa0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f103 0208 	add.w	r2, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f103 0208 	add.w	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f103 0208 	add.w	r2, r3, #8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d103      	bne.n	8004b6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e00c      	b.n	8004b86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e002      	b.n	8004b7a <vListInsert+0x2e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d2f6      	bcs.n	8004b74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6892      	ldr	r2, [r2, #8]
 8004bd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6852      	ldr	r2, [r2, #4]
 8004bde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d103      	bne.n	8004bf2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	1e5a      	subs	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b08e      	sub	sp, #56	; 0x38
 8004c16:	af04      	add	r7, sp, #16
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	623b      	str	r3, [r7, #32]
 8004c38:	e7fe      	b.n	8004c38 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <xTaskCreateStatic+0x42>
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e7fe      	b.n	8004c52 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c54:	2354      	movs	r3, #84	; 0x54
 8004c56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b54      	cmp	r3, #84	; 0x54
 8004c5c:	d009      	beq.n	8004c72 <xTaskCreateStatic+0x60>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e7fe      	b.n	8004c70 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01e      	beq.n	8004cb8 <xTaskCreateStatic+0xa6>
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01b      	beq.n	8004cb8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c92:	2300      	movs	r3, #0
 8004c94:	9303      	str	r3, [sp, #12]
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f850 	bl	8004d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cb2:	f000 f8d3 	bl	8004e5c <prvAddNewTaskToReadyList>
 8004cb6:	e001      	b.n	8004cbc <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cbc:	697b      	ldr	r3, [r7, #20]
	}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3728      	adds	r7, #40	; 0x28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08c      	sub	sp, #48	; 0x30
 8004cca:	af04      	add	r7, sp, #16
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cd6:	88fb      	ldrh	r3, [r7, #6]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 feb2 	bl	8005a44 <pvPortMalloc>
 8004ce0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ce8:	2054      	movs	r0, #84	; 0x54
 8004cea:	f000 feab 	bl	8005a44 <pvPortMalloc>
 8004cee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfc:	e005      	b.n	8004d0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cfe:	6978      	ldr	r0, [r7, #20]
 8004d00:	f000 ff62 	bl	8005bc8 <vPortFree>
 8004d04:	e001      	b.n	8004d0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d017      	beq.n	8004d40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	9302      	str	r3, [sp, #8]
 8004d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f80e 	bl	8004d50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d34:	69f8      	ldr	r0, [r7, #28]
 8004d36:	f000 f891 	bl	8004e5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e002      	b.n	8004d46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295
 8004d44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d46:	69bb      	ldr	r3, [r7, #24]
	}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f023 0307 	bic.w	r3, r3, #7
 8004d76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <prvInitialiseNewTask+0x46>
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e7fe      	b.n	8004d94 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01f      	beq.n	8004ddc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e012      	b.n	8004dc8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	7819      	ldrb	r1, [r3, #0]
 8004daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	3334      	adds	r3, #52	; 0x34
 8004db2:	460a      	mov	r2, r1
 8004db4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	d9e9      	bls.n	8004da2 <prvInitialiseNewTask+0x52>
 8004dce:	e000      	b.n	8004dd2 <prvInitialiseNewTask+0x82>
			{
				break;
 8004dd0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dda:	e003      	b.n	8004de4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d901      	bls.n	8004dee <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dea:	2306      	movs	r3, #6
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	3304      	adds	r3, #4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fe70 	bl	8004aea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fe6b 	bl	8004aea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	f1c3 0207 	rsb	r2, r3, #7
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	69b8      	ldr	r0, [r7, #24]
 8004e3e:	f000 fbfd 	bl	800563c <pxPortInitialiseStack>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e54:	bf00      	nop
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e64:	f000 fd12 	bl	800588c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e68:	4b2a      	ldr	r3, [pc, #168]	; (8004f14 <prvAddNewTaskToReadyList+0xb8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <prvAddNewTaskToReadyList+0xb8>)
 8004e70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e72:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <prvAddNewTaskToReadyList+0xbc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e7a:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <prvAddNewTaskToReadyList+0xbc>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <prvAddNewTaskToReadyList+0xb8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d110      	bne.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e88:	f000 fab8 	bl	80053fc <prvInitialiseTaskLists>
 8004e8c:	e00d      	b.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <prvAddNewTaskToReadyList+0xc0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <prvAddNewTaskToReadyList+0xbc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d802      	bhi.n	8004eaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <prvAddNewTaskToReadyList+0xbc>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <prvAddNewTaskToReadyList+0xc4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <prvAddNewTaskToReadyList+0xc4>)
 8004eb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	4a18      	ldr	r2, [pc, #96]	; (8004f24 <prvAddNewTaskToReadyList+0xc8>)
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <prvAddNewTaskToReadyList+0xcc>)
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7ff fe11 	bl	8004b04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ee2:	f000 fd01 	bl	80058e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <prvAddNewTaskToReadyList+0xc0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00e      	beq.n	8004f0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <prvAddNewTaskToReadyList+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d207      	bcs.n	8004f0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <prvAddNewTaskToReadyList+0xd0>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000408 	.word	0x20000408
 8004f18:	20000308 	.word	0x20000308
 8004f1c:	20000414 	.word	0x20000414
 8004f20:	20000424 	.word	0x20000424
 8004f24:	20000410 	.word	0x20000410
 8004f28:	2000030c 	.word	0x2000030c
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d016      	beq.n	8004f70 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <vTaskDelay+0x60>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <vTaskDelay+0x2e>
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	60bb      	str	r3, [r7, #8]
 8004f5c:	e7fe      	b.n	8004f5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004f5e:	f000 f879 	bl	8005054 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f62:	2100      	movs	r1, #0
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fb03 	bl	8005570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f6a:	f000 f881 	bl	8005070 <xTaskResumeAll>
 8004f6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d107      	bne.n	8004f86 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <vTaskDelay+0x64>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000430 	.word	0x20000430
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	1d39      	adds	r1, r7, #4
 8004faa:	f107 0308 	add.w	r3, r7, #8
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fb fef0 	bl	8000d94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	9202      	str	r2, [sp, #8]
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	460a      	mov	r2, r1
 8004fc6:	491d      	ldr	r1, [pc, #116]	; (800503c <vTaskStartScheduler+0xa4>)
 8004fc8:	481d      	ldr	r0, [pc, #116]	; (8005040 <vTaskStartScheduler+0xa8>)
 8004fca:	f7ff fe22 	bl	8004c12 <xTaskCreateStatic>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <vTaskStartScheduler+0xac>)
 8004fd2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <vTaskStartScheduler+0xac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e001      	b.n	8004fe6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d115      	bne.n	8005018 <vTaskStartScheduler+0x80>
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <vTaskStartScheduler+0xb0>)
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <vTaskStartScheduler+0xb4>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800500c:	4b10      	ldr	r3, [pc, #64]	; (8005050 <vTaskStartScheduler+0xb8>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005012:	f000 fb9d 	bl	8005750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005016:	e00d      	b.n	8005034 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d109      	bne.n	8005034 <vTaskStartScheduler+0x9c>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	e7fe      	b.n	8005032 <vTaskStartScheduler+0x9a>
}
 8005034:	bf00      	nop
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	08006d90 	.word	0x08006d90
 8005040:	080053cd 	.word	0x080053cd
 8005044:	2000042c 	.word	0x2000042c
 8005048:	20000428 	.word	0x20000428
 800504c:	20000414 	.word	0x20000414
 8005050:	2000040c 	.word	0x2000040c

08005054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <vTaskSuspendAll+0x18>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	4a03      	ldr	r2, [pc, #12]	; (800506c <vTaskSuspendAll+0x18>)
 8005060:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	20000430 	.word	0x20000430

08005070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800507e:	4b41      	ldr	r3, [pc, #260]	; (8005184 <xTaskResumeAll+0x114>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <xTaskResumeAll+0x2a>
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	e7fe      	b.n	8005098 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800509a:	f000 fbf7 	bl	800588c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800509e:	4b39      	ldr	r3, [pc, #228]	; (8005184 <xTaskResumeAll+0x114>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	4a37      	ldr	r2, [pc, #220]	; (8005184 <xTaskResumeAll+0x114>)
 80050a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050a8:	4b36      	ldr	r3, [pc, #216]	; (8005184 <xTaskResumeAll+0x114>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d161      	bne.n	8005174 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050b0:	4b35      	ldr	r3, [pc, #212]	; (8005188 <xTaskResumeAll+0x118>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05d      	beq.n	8005174 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050b8:	e02e      	b.n	8005118 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ba:	4b34      	ldr	r3, [pc, #208]	; (800518c <xTaskResumeAll+0x11c>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3318      	adds	r3, #24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fd79 	bl	8004bbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fd74 	bl	8004bbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	2201      	movs	r2, #1
 80050dc:	409a      	lsls	r2, r3
 80050de:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <xTaskResumeAll+0x120>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	4a2a      	ldr	r2, [pc, #168]	; (8005190 <xTaskResumeAll+0x120>)
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4a27      	ldr	r2, [pc, #156]	; (8005194 <xTaskResumeAll+0x124>)
 80050f6:	441a      	add	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7ff fd00 	bl	8004b04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b23      	ldr	r3, [pc, #140]	; (8005198 <xTaskResumeAll+0x128>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005112:	4b22      	ldr	r3, [pc, #136]	; (800519c <xTaskResumeAll+0x12c>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005118:	4b1c      	ldr	r3, [pc, #112]	; (800518c <xTaskResumeAll+0x11c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1cc      	bne.n	80050ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005126:	f000 fa03 	bl	8005530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <xTaskResumeAll+0x130>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d010      	beq.n	8005158 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005136:	f000 f837 	bl	80051a8 <xTaskIncrementTick>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005140:	4b16      	ldr	r3, [pc, #88]	; (800519c <xTaskResumeAll+0x12c>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3b01      	subs	r3, #1
 800514a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f1      	bne.n	8005136 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <xTaskResumeAll+0x130>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005158:	4b10      	ldr	r3, [pc, #64]	; (800519c <xTaskResumeAll+0x12c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <xTaskResumeAll+0x134>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005174:	f000 fbb8 	bl	80058e8 <vPortExitCritical>

	return xAlreadyYielded;
 8005178:	68bb      	ldr	r3, [r7, #8]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000430 	.word	0x20000430
 8005188:	20000408 	.word	0x20000408
 800518c:	200003c8 	.word	0x200003c8
 8005190:	20000410 	.word	0x20000410
 8005194:	2000030c 	.word	0x2000030c
 8005198:	20000308 	.word	0x20000308
 800519c:	2000041c 	.word	0x2000041c
 80051a0:	20000418 	.word	0x20000418
 80051a4:	e000ed04 	.word	0xe000ed04

080051a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b2:	4b4e      	ldr	r3, [pc, #312]	; (80052ec <xTaskIncrementTick+0x144>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 8087 	bne.w	80052ca <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051bc:	4b4c      	ldr	r3, [pc, #304]	; (80052f0 <xTaskIncrementTick+0x148>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051c4:	4a4a      	ldr	r2, [pc, #296]	; (80052f0 <xTaskIncrementTick+0x148>)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11f      	bne.n	8005210 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80051d0:	4b48      	ldr	r3, [pc, #288]	; (80052f4 <xTaskIncrementTick+0x14c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <xTaskIncrementTick+0x46>
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	603b      	str	r3, [r7, #0]
 80051ec:	e7fe      	b.n	80051ec <xTaskIncrementTick+0x44>
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <xTaskIncrementTick+0x14c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <xTaskIncrementTick+0x150>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3e      	ldr	r2, [pc, #248]	; (80052f4 <xTaskIncrementTick+0x14c>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	4a3e      	ldr	r2, [pc, #248]	; (80052f8 <xTaskIncrementTick+0x150>)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <xTaskIncrementTick+0x154>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3301      	adds	r3, #1
 8005208:	4a3c      	ldr	r2, [pc, #240]	; (80052fc <xTaskIncrementTick+0x154>)
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	f000 f990 	bl	8005530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <xTaskIncrementTick+0x158>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d348      	bcc.n	80052ac <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800521a:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <xTaskIncrementTick+0x14c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005224:	4b36      	ldr	r3, [pc, #216]	; (8005300 <xTaskIncrementTick+0x158>)
 8005226:	f04f 32ff 	mov.w	r2, #4294967295
 800522a:	601a      	str	r2, [r3, #0]
					break;
 800522c:	e03e      	b.n	80052ac <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522e:	4b31      	ldr	r3, [pc, #196]	; (80052f4 <xTaskIncrementTick+0x14c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d203      	bcs.n	800524e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005246:	4a2e      	ldr	r2, [pc, #184]	; (8005300 <xTaskIncrementTick+0x158>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800524c:	e02e      	b.n	80052ac <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3304      	adds	r3, #4
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fcb3 	bl	8004bbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	3318      	adds	r3, #24
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fcaa 	bl	8004bbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	2201      	movs	r2, #1
 8005270:	409a      	lsls	r2, r3
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <xTaskIncrementTick+0x15c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4313      	orrs	r3, r2
 8005278:	4a22      	ldr	r2, [pc, #136]	; (8005304 <xTaskIncrementTick+0x15c>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a1f      	ldr	r2, [pc, #124]	; (8005308 <xTaskIncrementTick+0x160>)
 800528a:	441a      	add	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7ff fc36 	bl	8004b04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <xTaskIncrementTick+0x164>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d3b9      	bcc.n	800521a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80052a6:	2301      	movs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052aa:	e7b6      	b.n	800521a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <xTaskIncrementTick+0x164>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b2:	4915      	ldr	r1, [pc, #84]	; (8005308 <xTaskIncrementTick+0x160>)
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d907      	bls.n	80052d4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e004      	b.n	80052d4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <xTaskIncrementTick+0x168>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	4a0f      	ldr	r2, [pc, #60]	; (8005310 <xTaskIncrementTick+0x168>)
 80052d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052d4:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <xTaskIncrementTick+0x16c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052e0:	697b      	ldr	r3, [r7, #20]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000430 	.word	0x20000430
 80052f0:	2000040c 	.word	0x2000040c
 80052f4:	200003c0 	.word	0x200003c0
 80052f8:	200003c4 	.word	0x200003c4
 80052fc:	20000420 	.word	0x20000420
 8005300:	20000428 	.word	0x20000428
 8005304:	20000410 	.word	0x20000410
 8005308:	2000030c 	.word	0x2000030c
 800530c:	20000308 	.word	0x20000308
 8005310:	20000418 	.word	0x20000418
 8005314:	2000041c 	.word	0x2000041c

08005318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <vTaskSwitchContext+0xa0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005326:	4b25      	ldr	r3, [pc, #148]	; (80053bc <vTaskSwitchContext+0xa4>)
 8005328:	2201      	movs	r2, #1
 800532a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800532c:	e03e      	b.n	80053ac <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800532e:	4b23      	ldr	r3, [pc, #140]	; (80053bc <vTaskSwitchContext+0xa4>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005334:	4b22      	ldr	r3, [pc, #136]	; (80053c0 <vTaskSwitchContext+0xa8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	fab3 f383 	clz	r3, r3
 8005340:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005342:	7afb      	ldrb	r3, [r7, #11]
 8005344:	f1c3 031f 	rsb	r3, r3, #31
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	491e      	ldr	r1, [pc, #120]	; (80053c4 <vTaskSwitchContext+0xac>)
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <vTaskSwitchContext+0x5a>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	607b      	str	r3, [r7, #4]
 8005370:	e7fe      	b.n	8005370 <vTaskSwitchContext+0x58>
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4a11      	ldr	r2, [pc, #68]	; (80053c4 <vTaskSwitchContext+0xac>)
 800537e:	4413      	add	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3308      	adds	r3, #8
 8005394:	429a      	cmp	r2, r3
 8005396:	d104      	bne.n	80053a2 <vTaskSwitchContext+0x8a>
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	605a      	str	r2, [r3, #4]
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4a07      	ldr	r2, [pc, #28]	; (80053c8 <vTaskSwitchContext+0xb0>)
 80053aa:	6013      	str	r3, [r2, #0]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20000430 	.word	0x20000430
 80053bc:	2000041c 	.word	0x2000041c
 80053c0:	20000410 	.word	0x20000410
 80053c4:	2000030c 	.word	0x2000030c
 80053c8:	20000308 	.word	0x20000308

080053cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053d4:	f000 f852 	bl	800547c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <prvIdleTask+0x28>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d9f9      	bls.n	80053d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <prvIdleTask+0x2c>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f0:	e7f0      	b.n	80053d4 <prvIdleTask+0x8>
 80053f2:	bf00      	nop
 80053f4:	2000030c 	.word	0x2000030c
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005402:	2300      	movs	r3, #0
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	e00c      	b.n	8005422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a12      	ldr	r2, [pc, #72]	; (800545c <prvInitialiseTaskLists+0x60>)
 8005414:	4413      	add	r3, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fb47 	bl	8004aaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b06      	cmp	r3, #6
 8005426:	d9ef      	bls.n	8005408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005428:	480d      	ldr	r0, [pc, #52]	; (8005460 <prvInitialiseTaskLists+0x64>)
 800542a:	f7ff fb3e 	bl	8004aaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800542e:	480d      	ldr	r0, [pc, #52]	; (8005464 <prvInitialiseTaskLists+0x68>)
 8005430:	f7ff fb3b 	bl	8004aaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005434:	480c      	ldr	r0, [pc, #48]	; (8005468 <prvInitialiseTaskLists+0x6c>)
 8005436:	f7ff fb38 	bl	8004aaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800543a:	480c      	ldr	r0, [pc, #48]	; (800546c <prvInitialiseTaskLists+0x70>)
 800543c:	f7ff fb35 	bl	8004aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005440:	480b      	ldr	r0, [pc, #44]	; (8005470 <prvInitialiseTaskLists+0x74>)
 8005442:	f7ff fb32 	bl	8004aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <prvInitialiseTaskLists+0x78>)
 8005448:	4a05      	ldr	r2, [pc, #20]	; (8005460 <prvInitialiseTaskLists+0x64>)
 800544a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <prvInitialiseTaskLists+0x7c>)
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <prvInitialiseTaskLists+0x68>)
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	2000030c 	.word	0x2000030c
 8005460:	20000398 	.word	0x20000398
 8005464:	200003ac 	.word	0x200003ac
 8005468:	200003c8 	.word	0x200003c8
 800546c:	200003dc 	.word	0x200003dc
 8005470:	200003f4 	.word	0x200003f4
 8005474:	200003c0 	.word	0x200003c0
 8005478:	200003c4 	.word	0x200003c4

0800547c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005482:	e019      	b.n	80054b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005484:	f000 fa02 	bl	800588c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005488:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <prvCheckTasksWaitingTermination+0x4c>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fb92 	bl	8004bbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <prvCheckTasksWaitingTermination+0x50>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3b01      	subs	r3, #1
 80054a0:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <prvCheckTasksWaitingTermination+0x50>)
 80054a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <prvCheckTasksWaitingTermination+0x54>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <prvCheckTasksWaitingTermination+0x54>)
 80054ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054ae:	f000 fa1b 	bl	80058e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f80e 	bl	80054d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <prvCheckTasksWaitingTermination+0x54>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e1      	bne.n	8005484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c0:	bf00      	nop
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	200003dc 	.word	0x200003dc
 80054cc:	20000408 	.word	0x20000408
 80054d0:	200003f0 	.word	0x200003f0

080054d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fb6c 	bl	8005bc8 <vPortFree>
				vPortFree( pxTCB );
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fb69 	bl	8005bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054f6:	e017      	b.n	8005528 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d103      	bne.n	800550a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb60 	bl	8005bc8 <vPortFree>
	}
 8005508:	e00e      	b.n	8005528 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005510:	2b02      	cmp	r3, #2
 8005512:	d009      	beq.n	8005528 <prvDeleteTCB+0x54>
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e7fe      	b.n	8005526 <prvDeleteTCB+0x52>
	}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvResetNextTaskUnblockTime+0x38>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <prvResetNextTaskUnblockTime+0x3c>)
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005548:	e008      	b.n	800555c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800554a:	4b07      	ldr	r3, [pc, #28]	; (8005568 <prvResetNextTaskUnblockTime+0x38>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a04      	ldr	r2, [pc, #16]	; (800556c <prvResetNextTaskUnblockTime+0x3c>)
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	200003c0 	.word	0x200003c0
 800556c:	20000428 	.word	0x20000428

08005570 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800557a:	4b29      	ldr	r3, [pc, #164]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3304      	adds	r3, #4
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fb19 	bl	8004bbe <uxListRemove>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10b      	bne.n	80055aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	2201      	movs	r2, #1
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	4b21      	ldr	r3, [pc, #132]	; (8005628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4013      	ands	r3, r2
 80055a6:	4a20      	ldr	r2, [pc, #128]	; (8005628 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d10a      	bne.n	80055c8 <prvAddCurrentTaskToDelayedList+0x58>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b8:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	4619      	mov	r1, r3
 80055c0:	481a      	ldr	r0, [pc, #104]	; (800562c <prvAddCurrentTaskToDelayedList+0xbc>)
 80055c2:	f7ff fa9f 	bl	8004b04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c6:	e026      	b.n	8005616 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d209      	bcs.n	80055f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <prvAddCurrentTaskToDelayedList+0xc0>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7ff faad 	bl	8004b4c <vListInsert>
}
 80055f2:	e010      	b.n	8005616 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f4:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3304      	adds	r3, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f7ff faa3 	bl	8004b4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d202      	bcs.n	8005616 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005610:	4a09      	ldr	r2, [pc, #36]	; (8005638 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6013      	str	r3, [r2, #0]
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	2000040c 	.word	0x2000040c
 8005624:	20000308 	.word	0x20000308
 8005628:	20000410 	.word	0x20000410
 800562c:	200003f4 	.word	0x200003f4
 8005630:	200003c4 	.word	0x200003c4
 8005634:	200003c0 	.word	0x200003c0
 8005638:	20000428 	.word	0x20000428

0800563c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3b04      	subs	r3, #4
 800564c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3b04      	subs	r3, #4
 800565a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f023 0201 	bic.w	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3b04      	subs	r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800566c:	4a0c      	ldr	r2, [pc, #48]	; (80056a0 <pxPortInitialiseStack+0x64>)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b14      	subs	r3, #20
 8005676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3b04      	subs	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f06f 0202 	mvn.w	r2, #2
 800568a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3b20      	subs	r3, #32
 8005690:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005692:	68fb      	ldr	r3, [r7, #12]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	080056a5 	.word	0x080056a5

080056a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <prvTaskExitError+0x50>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d009      	beq.n	80056cc <prvTaskExitError+0x28>
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e7fe      	b.n	80056ca <prvTaskExitError+0x26>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056de:	bf00      	nop
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0fc      	beq.n	80056e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c
	...

08005700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <pxCurrentTCBConst2>)
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	6808      	ldr	r0, [r1, #0]
 8005706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	f380 8809 	msr	PSP, r0
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f380 8811 	msr	BASEPRI, r0
 800571a:	4770      	bx	lr
 800571c:	f3af 8000 	nop.w

08005720 <pxCurrentTCBConst2>:
 8005720:	20000308 	.word	0x20000308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop

08005728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005728:	4808      	ldr	r0, [pc, #32]	; (800574c <prvPortStartFirstTask+0x24>)
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	6800      	ldr	r0, [r0, #0]
 800572e:	f380 8808 	msr	MSP, r0
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8814 	msr	CONTROL, r0
 800573a:	b662      	cpsie	i
 800573c:	b661      	cpsie	f
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	df00      	svc	0
 8005748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800574a:	bf00      	nop
 800574c:	e000ed08 	.word	0xe000ed08

08005750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005756:	4b44      	ldr	r3, [pc, #272]	; (8005868 <xPortStartScheduler+0x118>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a44      	ldr	r2, [pc, #272]	; (800586c <xPortStartScheduler+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d109      	bne.n	8005774 <xPortStartScheduler+0x24>
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	e7fe      	b.n	8005772 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005774:	4b3c      	ldr	r3, [pc, #240]	; (8005868 <xPortStartScheduler+0x118>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <xPortStartScheduler+0x120>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <xPortStartScheduler+0x42>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e7fe      	b.n	8005790 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005792:	4b38      	ldr	r3, [pc, #224]	; (8005874 <xPortStartScheduler+0x124>)
 8005794:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	4b30      	ldr	r3, [pc, #192]	; (8005878 <xPortStartScheduler+0x128>)
 80057b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80057ba:	4b30      	ldr	r3, [pc, #192]	; (800587c <xPortStartScheduler+0x12c>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057c0:	e009      	b.n	80057d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <xPortStartScheduler+0x12c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <xPortStartScheduler+0x12c>)
 80057ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057de:	2b80      	cmp	r3, #128	; 0x80
 80057e0:	d0ef      	beq.n	80057c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <xPortStartScheduler+0x12c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1c3 0307 	rsb	r3, r3, #7
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d009      	beq.n	8005802 <xPortStartScheduler+0xb2>
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	e7fe      	b.n	8005800 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <xPortStartScheduler+0x12c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	4a1c      	ldr	r2, [pc, #112]	; (800587c <xPortStartScheduler+0x12c>)
 800580a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <xPortStartScheduler+0x12c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005814:	4a19      	ldr	r2, [pc, #100]	; (800587c <xPortStartScheduler+0x12c>)
 8005816:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <xPortStartScheduler+0x130>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <xPortStartScheduler+0x130>)
 8005826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800582a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <xPortStartScheduler+0x130>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <xPortStartScheduler+0x130>)
 8005832:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005836:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005838:	f000 f8d6 	bl	80059e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800583c:	4b11      	ldr	r3, [pc, #68]	; (8005884 <xPortStartScheduler+0x134>)
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005842:	f000 f8f5 	bl	8005a30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <xPortStartScheduler+0x138>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a0f      	ldr	r2, [pc, #60]	; (8005888 <xPortStartScheduler+0x138>)
 800584c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005850:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005852:	f7ff ff69 	bl	8005728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005856:	f7ff fd5f 	bl	8005318 <vTaskSwitchContext>
	prvTaskExitError();
 800585a:	f7ff ff23 	bl	80056a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed00 	.word	0xe000ed00
 800586c:	410fc271 	.word	0x410fc271
 8005870:	410fc270 	.word	0x410fc270
 8005874:	e000e400 	.word	0xe000e400
 8005878:	20000434 	.word	0x20000434
 800587c:	20000438 	.word	0x20000438
 8005880:	e000ed20 	.word	0xe000ed20
 8005884:	2000000c 	.word	0x2000000c
 8005888:	e000ef34 	.word	0xe000ef34

0800588c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <vPortEnterCritical+0x54>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <vPortEnterCritical+0x54>)
 80058ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <vPortEnterCritical+0x54>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d10e      	bne.n	80058d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <vPortEnterCritical+0x58>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <vPortEnterCritical+0x48>
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	603b      	str	r3, [r7, #0]
 80058d2:	e7fe      	b.n	80058d2 <vPortEnterCritical+0x46>
	}
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	2000000c 	.word	0x2000000c
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <vPortExitCritical+0x4c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <vPortExitCritical+0x22>
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e7fe      	b.n	8005908 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <vPortExitCritical+0x4c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	4a08      	ldr	r2, [pc, #32]	; (8005934 <vPortExitCritical+0x4c>)
 8005912:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <vPortExitCritical+0x4c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <vPortExitCritical+0x3e>
 800591c:	2300      	movs	r3, #0
 800591e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
	...

08005940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005940:	f3ef 8009 	mrs	r0, PSP
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <pxCurrentTCBConst>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f01e 0f10 	tst.w	lr, #16
 8005950:	bf08      	it	eq
 8005952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595a:	6010      	str	r0, [r2, #0]
 800595c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005964:	f380 8811 	msr	BASEPRI, r0
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f7ff fcd2 	bl	8005318 <vTaskSwitchContext>
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f380 8811 	msr	BASEPRI, r0
 800597c:	bc09      	pop	{r0, r3}
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005986:	f01e 0f10 	tst.w	lr, #16
 800598a:	bf08      	it	eq
 800598c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005990:	f380 8809 	msr	PSP, r0
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	f3af 8000 	nop.w

080059a0 <pxCurrentTCBConst>:
 80059a0:	20000308 	.word	0x20000308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop

080059a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059c0:	f7ff fbf2 	bl	80051a8 <xTaskIncrementTick>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <SysTick_Handler+0x3c>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <vPortSetupTimerInterrupt+0x34>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <vPortSetupTimerInterrupt+0x38>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059f8:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <vPortSetupTimerInterrupt+0x3c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <vPortSetupTimerInterrupt+0x40>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <vPortSetupTimerInterrupt+0x44>)
 8005a06:	3b01      	subs	r3, #1
 8005a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a0a:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <vPortSetupTimerInterrupt+0x34>)
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	601a      	str	r2, [r3, #0]
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000e010 	.word	0xe000e010
 8005a20:	e000e018 	.word	0xe000e018
 8005a24:	20000000 	.word	0x20000000
 8005a28:	10624dd3 	.word	0x10624dd3
 8005a2c:	e000e014 	.word	0xe000e014

08005a30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a40 <vPortEnableVFP+0x10>
 8005a34:	6801      	ldr	r1, [r0, #0]
 8005a36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a3a:	6001      	str	r1, [r0, #0]
 8005a3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a3e:	bf00      	nop
 8005a40:	e000ed88 	.word	0xe000ed88

08005a44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a50:	f7ff fb00 	bl	8005054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a54:	4b57      	ldr	r3, [pc, #348]	; (8005bb4 <pvPortMalloc+0x170>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d101      	bne.n	8005a60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a5c:	f000 f90c 	bl	8005c78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a60:	4b55      	ldr	r3, [pc, #340]	; (8005bb8 <pvPortMalloc+0x174>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 808c 	bne.w	8005b86 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01c      	beq.n	8005aae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a74:	2208      	movs	r2, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f023 0307 	bic.w	r3, r3, #7
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <pvPortMalloc+0x6a>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e7fe      	b.n	8005aac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d068      	beq.n	8005b86 <pvPortMalloc+0x142>
 8005ab4:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <pvPortMalloc+0x178>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d863      	bhi.n	8005b86 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005abe:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <pvPortMalloc+0x17c>)
 8005ac0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ac2:	4b3f      	ldr	r3, [pc, #252]	; (8005bc0 <pvPortMalloc+0x17c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac8:	e004      	b.n	8005ad4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d903      	bls.n	8005ae6 <pvPortMalloc+0xa2>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f1      	bne.n	8005aca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ae6:	4b33      	ldr	r3, [pc, #204]	; (8005bb4 <pvPortMalloc+0x170>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d04a      	beq.n	8005b86 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2208      	movs	r2, #8
 8005af6:	4413      	add	r3, r2
 8005af8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	2308      	movs	r3, #8
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d91e      	bls.n	8005b50 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d009      	beq.n	8005b38 <pvPortMalloc+0xf4>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e7fe      	b.n	8005b36 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b4a:	69b8      	ldr	r0, [r7, #24]
 8005b4c:	f000 f8f6 	bl	8005d3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b50:	4b1a      	ldr	r3, [pc, #104]	; (8005bbc <pvPortMalloc+0x178>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <pvPortMalloc+0x178>)
 8005b5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <pvPortMalloc+0x178>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <pvPortMalloc+0x180>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d203      	bcs.n	8005b72 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <pvPortMalloc+0x178>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <pvPortMalloc+0x180>)
 8005b70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <pvPortMalloc+0x174>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b86:	f7ff fa73 	bl	8005070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <pvPortMalloc+0x164>
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e7fe      	b.n	8005ba6 <pvPortMalloc+0x162>
	return pvReturn;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3728      	adds	r7, #40	; 0x28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20004044 	.word	0x20004044
 8005bb8:	20004050 	.word	0x20004050
 8005bbc:	20004048 	.word	0x20004048
 8005bc0:	2000403c 	.word	0x2000403c
 8005bc4:	2000404c 	.word	0x2000404c

08005bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d046      	beq.n	8005c68 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bda:	2308      	movs	r3, #8
 8005bdc:	425b      	negs	r3, r3
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <vPortFree+0xa8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <vPortFree+0x42>
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e7fe      	b.n	8005c08 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <vPortFree+0x5e>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	e7fe      	b.n	8005c24 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <vPortFree+0xa8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d019      	beq.n	8005c68 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d115      	bne.n	8005c68 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortFree+0xa8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	401a      	ands	r2, r3
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c4c:	f7ff fa02 	bl	8005054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <vPortFree+0xac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4413      	add	r3, r2
 8005c5a:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <vPortFree+0xac>)
 8005c5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f000 f86c 	bl	8005d3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c64:	f7ff fa04 	bl	8005070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c68:	bf00      	nop
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20004050 	.word	0x20004050
 8005c74:	20004048 	.word	0x20004048

08005c78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c84:	4b27      	ldr	r3, [pc, #156]	; (8005d24 <prvHeapInit+0xac>)
 8005c86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00c      	beq.n	8005cac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3307      	adds	r3, #7
 8005c96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0307 	bic.w	r3, r3, #7
 8005c9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <prvHeapInit+0xac>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <prvHeapInit+0xb0>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cb6:	4b1c      	ldr	r3, [pc, #112]	; (8005d28 <prvHeapInit+0xb0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <prvHeapInit+0xb4>)
 8005cd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <prvHeapInit+0xb4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <prvHeapInit+0xb4>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <prvHeapInit+0xb4>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	4a0a      	ldr	r2, [pc, #40]	; (8005d30 <prvHeapInit+0xb8>)
 8005d06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <prvHeapInit+0xbc>)
 8005d0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <prvHeapInit+0xc0>)
 8005d12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	2000043c 	.word	0x2000043c
 8005d28:	2000403c 	.word	0x2000403c
 8005d2c:	20004044 	.word	0x20004044
 8005d30:	2000404c 	.word	0x2000404c
 8005d34:	20004048 	.word	0x20004048
 8005d38:	20004050 	.word	0x20004050

08005d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d44:	4b28      	ldr	r3, [pc, #160]	; (8005de8 <prvInsertBlockIntoFreeList+0xac>)
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e002      	b.n	8005d50 <prvInsertBlockIntoFreeList+0x14>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d8f7      	bhi.n	8005d4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d108      	bne.n	8005d7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	441a      	add	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d118      	bne.n	8005dc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b15      	ldr	r3, [pc, #84]	; (8005dec <prvInsertBlockIntoFreeList+0xb0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d00d      	beq.n	8005dba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e008      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <prvInsertBlockIntoFreeList+0xb0>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e003      	b.n	8005dcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d002      	beq.n	8005dda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	2000403c 	.word	0x2000403c
 8005dec:	20004044 	.word	0x20004044

08005df0 <__errno>:
 8005df0:	4b01      	ldr	r3, [pc, #4]	; (8005df8 <__errno+0x8>)
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000010 	.word	0x20000010

08005dfc <__libc_init_array>:
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4e0d      	ldr	r6, [pc, #52]	; (8005e34 <__libc_init_array+0x38>)
 8005e00:	4c0d      	ldr	r4, [pc, #52]	; (8005e38 <__libc_init_array+0x3c>)
 8005e02:	1ba4      	subs	r4, r4, r6
 8005e04:	10a4      	asrs	r4, r4, #2
 8005e06:	2500      	movs	r5, #0
 8005e08:	42a5      	cmp	r5, r4
 8005e0a:	d109      	bne.n	8005e20 <__libc_init_array+0x24>
 8005e0c:	4e0b      	ldr	r6, [pc, #44]	; (8005e3c <__libc_init_array+0x40>)
 8005e0e:	4c0c      	ldr	r4, [pc, #48]	; (8005e40 <__libc_init_array+0x44>)
 8005e10:	f000 ff04 	bl	8006c1c <_init>
 8005e14:	1ba4      	subs	r4, r4, r6
 8005e16:	10a4      	asrs	r4, r4, #2
 8005e18:	2500      	movs	r5, #0
 8005e1a:	42a5      	cmp	r5, r4
 8005e1c:	d105      	bne.n	8005e2a <__libc_init_array+0x2e>
 8005e1e:	bd70      	pop	{r4, r5, r6, pc}
 8005e20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e24:	4798      	blx	r3
 8005e26:	3501      	adds	r5, #1
 8005e28:	e7ee      	b.n	8005e08 <__libc_init_array+0xc>
 8005e2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e2e:	4798      	blx	r3
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7f2      	b.n	8005e1a <__libc_init_array+0x1e>
 8005e34:	08006e50 	.word	0x08006e50
 8005e38:	08006e50 	.word	0x08006e50
 8005e3c:	08006e50 	.word	0x08006e50
 8005e40:	08006e54 	.word	0x08006e54

08005e44 <memset>:
 8005e44:	4402      	add	r2, r0
 8005e46:	4603      	mov	r3, r0
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d100      	bne.n	8005e4e <memset+0xa>
 8005e4c:	4770      	bx	lr
 8005e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e52:	e7f9      	b.n	8005e48 <memset+0x4>

08005e54 <iprintf>:
 8005e54:	b40f      	push	{r0, r1, r2, r3}
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <iprintf+0x2c>)
 8005e58:	b513      	push	{r0, r1, r4, lr}
 8005e5a:	681c      	ldr	r4, [r3, #0]
 8005e5c:	b124      	cbz	r4, 8005e68 <iprintf+0x14>
 8005e5e:	69a3      	ldr	r3, [r4, #24]
 8005e60:	b913      	cbnz	r3, 8005e68 <iprintf+0x14>
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f84e 	bl	8005f04 <__sinit>
 8005e68:	ab05      	add	r3, sp, #20
 8005e6a:	9a04      	ldr	r2, [sp, #16]
 8005e6c:	68a1      	ldr	r1, [r4, #8]
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 f955 	bl	8006120 <_vfiprintf_r>
 8005e76:	b002      	add	sp, #8
 8005e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7c:	b004      	add	sp, #16
 8005e7e:	4770      	bx	lr
 8005e80:	20000010 	.word	0x20000010

08005e84 <std>:
 8005e84:	2300      	movs	r3, #0
 8005e86:	b510      	push	{r4, lr}
 8005e88:	4604      	mov	r4, r0
 8005e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e8e:	6083      	str	r3, [r0, #8]
 8005e90:	8181      	strh	r1, [r0, #12]
 8005e92:	6643      	str	r3, [r0, #100]	; 0x64
 8005e94:	81c2      	strh	r2, [r0, #14]
 8005e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e9a:	6183      	str	r3, [r0, #24]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	305c      	adds	r0, #92	; 0x5c
 8005ea2:	f7ff ffcf 	bl	8005e44 <memset>
 8005ea6:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <std+0x38>)
 8005ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8005eaa:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <std+0x3c>)
 8005eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <std+0x40>)
 8005eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <std+0x44>)
 8005eb4:	6224      	str	r4, [r4, #32]
 8005eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop
 8005ebc:	0800667d 	.word	0x0800667d
 8005ec0:	0800669f 	.word	0x0800669f
 8005ec4:	080066d7 	.word	0x080066d7
 8005ec8:	080066fb 	.word	0x080066fb

08005ecc <_cleanup_r>:
 8005ecc:	4901      	ldr	r1, [pc, #4]	; (8005ed4 <_cleanup_r+0x8>)
 8005ece:	f000 b885 	b.w	8005fdc <_fwalk_reent>
 8005ed2:	bf00      	nop
 8005ed4:	080069d5 	.word	0x080069d5

08005ed8 <__sfmoreglue>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	1e4a      	subs	r2, r1, #1
 8005edc:	2568      	movs	r5, #104	; 0x68
 8005ede:	4355      	muls	r5, r2
 8005ee0:	460e      	mov	r6, r1
 8005ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ee6:	f000 f897 	bl	8006018 <_malloc_r>
 8005eea:	4604      	mov	r4, r0
 8005eec:	b140      	cbz	r0, 8005f00 <__sfmoreglue+0x28>
 8005eee:	2100      	movs	r1, #0
 8005ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ef4:	300c      	adds	r0, #12
 8005ef6:	60a0      	str	r0, [r4, #8]
 8005ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005efc:	f7ff ffa2 	bl	8005e44 <memset>
 8005f00:	4620      	mov	r0, r4
 8005f02:	bd70      	pop	{r4, r5, r6, pc}

08005f04 <__sinit>:
 8005f04:	6983      	ldr	r3, [r0, #24]
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	bb33      	cbnz	r3, 8005f5a <__sinit+0x56>
 8005f0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005f10:	6503      	str	r3, [r0, #80]	; 0x50
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <__sinit+0x58>)
 8005f14:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <__sinit+0x5c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6282      	str	r2, [r0, #40]	; 0x28
 8005f1a:	4298      	cmp	r0, r3
 8005f1c:	bf04      	itt	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	6183      	streq	r3, [r0, #24]
 8005f22:	f000 f81f 	bl	8005f64 <__sfp>
 8005f26:	6060      	str	r0, [r4, #4]
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 f81b 	bl	8005f64 <__sfp>
 8005f2e:	60a0      	str	r0, [r4, #8]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 f817 	bl	8005f64 <__sfp>
 8005f36:	2200      	movs	r2, #0
 8005f38:	60e0      	str	r0, [r4, #12]
 8005f3a:	2104      	movs	r1, #4
 8005f3c:	6860      	ldr	r0, [r4, #4]
 8005f3e:	f7ff ffa1 	bl	8005e84 <std>
 8005f42:	2201      	movs	r2, #1
 8005f44:	2109      	movs	r1, #9
 8005f46:	68a0      	ldr	r0, [r4, #8]
 8005f48:	f7ff ff9c 	bl	8005e84 <std>
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	2112      	movs	r1, #18
 8005f50:	68e0      	ldr	r0, [r4, #12]
 8005f52:	f7ff ff97 	bl	8005e84 <std>
 8005f56:	2301      	movs	r3, #1
 8005f58:	61a3      	str	r3, [r4, #24]
 8005f5a:	bd10      	pop	{r4, pc}
 8005f5c:	08006db0 	.word	0x08006db0
 8005f60:	08005ecd 	.word	0x08005ecd

08005f64 <__sfp>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <__sfp+0x70>)
 8005f68:	681e      	ldr	r6, [r3, #0]
 8005f6a:	69b3      	ldr	r3, [r6, #24]
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	b913      	cbnz	r3, 8005f76 <__sfp+0x12>
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7ff ffc7 	bl	8005f04 <__sinit>
 8005f76:	3648      	adds	r6, #72	; 0x48
 8005f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	d503      	bpl.n	8005f88 <__sfp+0x24>
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	b133      	cbz	r3, 8005f92 <__sfp+0x2e>
 8005f84:	6836      	ldr	r6, [r6, #0]
 8005f86:	e7f7      	b.n	8005f78 <__sfp+0x14>
 8005f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f8c:	b16d      	cbz	r5, 8005faa <__sfp+0x46>
 8005f8e:	3468      	adds	r4, #104	; 0x68
 8005f90:	e7f4      	b.n	8005f7c <__sfp+0x18>
 8005f92:	2104      	movs	r1, #4
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7ff ff9f 	bl	8005ed8 <__sfmoreglue>
 8005f9a:	6030      	str	r0, [r6, #0]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d1f1      	bne.n	8005f84 <__sfp+0x20>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <__sfp+0x74>)
 8005fac:	6665      	str	r5, [r4, #100]	; 0x64
 8005fae:	e9c4 5500 	strd	r5, r5, [r4]
 8005fb2:	60a5      	str	r5, [r4, #8]
 8005fb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005fb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fc4:	f7ff ff3e 	bl	8005e44 <memset>
 8005fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fd0:	e7e9      	b.n	8005fa6 <__sfp+0x42>
 8005fd2:	bf00      	nop
 8005fd4:	08006db0 	.word	0x08006db0
 8005fd8:	ffff0001 	.word	0xffff0001

08005fdc <_fwalk_reent>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fe8:	2600      	movs	r6, #0
 8005fea:	b914      	cbnz	r4, 8005ff2 <_fwalk_reent+0x16>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005ff6:	3f01      	subs	r7, #1
 8005ff8:	d501      	bpl.n	8005ffe <_fwalk_reent+0x22>
 8005ffa:	6824      	ldr	r4, [r4, #0]
 8005ffc:	e7f5      	b.n	8005fea <_fwalk_reent+0xe>
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d907      	bls.n	8006014 <_fwalk_reent+0x38>
 8006004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006008:	3301      	adds	r3, #1
 800600a:	d003      	beq.n	8006014 <_fwalk_reent+0x38>
 800600c:	4629      	mov	r1, r5
 800600e:	4640      	mov	r0, r8
 8006010:	47c8      	blx	r9
 8006012:	4306      	orrs	r6, r0
 8006014:	3568      	adds	r5, #104	; 0x68
 8006016:	e7ee      	b.n	8005ff6 <_fwalk_reent+0x1a>

08006018 <_malloc_r>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	1ccd      	adds	r5, r1, #3
 800601c:	f025 0503 	bic.w	r5, r5, #3
 8006020:	3508      	adds	r5, #8
 8006022:	2d0c      	cmp	r5, #12
 8006024:	bf38      	it	cc
 8006026:	250c      	movcc	r5, #12
 8006028:	2d00      	cmp	r5, #0
 800602a:	4606      	mov	r6, r0
 800602c:	db01      	blt.n	8006032 <_malloc_r+0x1a>
 800602e:	42a9      	cmp	r1, r5
 8006030:	d903      	bls.n	800603a <_malloc_r+0x22>
 8006032:	230c      	movs	r3, #12
 8006034:	6033      	str	r3, [r6, #0]
 8006036:	2000      	movs	r0, #0
 8006038:	bd70      	pop	{r4, r5, r6, pc}
 800603a:	f000 fd6b 	bl	8006b14 <__malloc_lock>
 800603e:	4a21      	ldr	r2, [pc, #132]	; (80060c4 <_malloc_r+0xac>)
 8006040:	6814      	ldr	r4, [r2, #0]
 8006042:	4621      	mov	r1, r4
 8006044:	b991      	cbnz	r1, 800606c <_malloc_r+0x54>
 8006046:	4c20      	ldr	r4, [pc, #128]	; (80060c8 <_malloc_r+0xb0>)
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	b91b      	cbnz	r3, 8006054 <_malloc_r+0x3c>
 800604c:	4630      	mov	r0, r6
 800604e:	f000 fb05 	bl	800665c <_sbrk_r>
 8006052:	6020      	str	r0, [r4, #0]
 8006054:	4629      	mov	r1, r5
 8006056:	4630      	mov	r0, r6
 8006058:	f000 fb00 	bl	800665c <_sbrk_r>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d124      	bne.n	80060aa <_malloc_r+0x92>
 8006060:	230c      	movs	r3, #12
 8006062:	6033      	str	r3, [r6, #0]
 8006064:	4630      	mov	r0, r6
 8006066:	f000 fd56 	bl	8006b16 <__malloc_unlock>
 800606a:	e7e4      	b.n	8006036 <_malloc_r+0x1e>
 800606c:	680b      	ldr	r3, [r1, #0]
 800606e:	1b5b      	subs	r3, r3, r5
 8006070:	d418      	bmi.n	80060a4 <_malloc_r+0x8c>
 8006072:	2b0b      	cmp	r3, #11
 8006074:	d90f      	bls.n	8006096 <_malloc_r+0x7e>
 8006076:	600b      	str	r3, [r1, #0]
 8006078:	50cd      	str	r5, [r1, r3]
 800607a:	18cc      	adds	r4, r1, r3
 800607c:	4630      	mov	r0, r6
 800607e:	f000 fd4a 	bl	8006b16 <__malloc_unlock>
 8006082:	f104 000b 	add.w	r0, r4, #11
 8006086:	1d23      	adds	r3, r4, #4
 8006088:	f020 0007 	bic.w	r0, r0, #7
 800608c:	1ac3      	subs	r3, r0, r3
 800608e:	d0d3      	beq.n	8006038 <_malloc_r+0x20>
 8006090:	425a      	negs	r2, r3
 8006092:	50e2      	str	r2, [r4, r3]
 8006094:	e7d0      	b.n	8006038 <_malloc_r+0x20>
 8006096:	428c      	cmp	r4, r1
 8006098:	684b      	ldr	r3, [r1, #4]
 800609a:	bf16      	itet	ne
 800609c:	6063      	strne	r3, [r4, #4]
 800609e:	6013      	streq	r3, [r2, #0]
 80060a0:	460c      	movne	r4, r1
 80060a2:	e7eb      	b.n	800607c <_malloc_r+0x64>
 80060a4:	460c      	mov	r4, r1
 80060a6:	6849      	ldr	r1, [r1, #4]
 80060a8:	e7cc      	b.n	8006044 <_malloc_r+0x2c>
 80060aa:	1cc4      	adds	r4, r0, #3
 80060ac:	f024 0403 	bic.w	r4, r4, #3
 80060b0:	42a0      	cmp	r0, r4
 80060b2:	d005      	beq.n	80060c0 <_malloc_r+0xa8>
 80060b4:	1a21      	subs	r1, r4, r0
 80060b6:	4630      	mov	r0, r6
 80060b8:	f000 fad0 	bl	800665c <_sbrk_r>
 80060bc:	3001      	adds	r0, #1
 80060be:	d0cf      	beq.n	8006060 <_malloc_r+0x48>
 80060c0:	6025      	str	r5, [r4, #0]
 80060c2:	e7db      	b.n	800607c <_malloc_r+0x64>
 80060c4:	20004054 	.word	0x20004054
 80060c8:	20004058 	.word	0x20004058

080060cc <__sfputc_r>:
 80060cc:	6893      	ldr	r3, [r2, #8]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	b410      	push	{r4}
 80060d4:	6093      	str	r3, [r2, #8]
 80060d6:	da08      	bge.n	80060ea <__sfputc_r+0x1e>
 80060d8:	6994      	ldr	r4, [r2, #24]
 80060da:	42a3      	cmp	r3, r4
 80060dc:	db01      	blt.n	80060e2 <__sfputc_r+0x16>
 80060de:	290a      	cmp	r1, #10
 80060e0:	d103      	bne.n	80060ea <__sfputc_r+0x1e>
 80060e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e6:	f000 bb0d 	b.w	8006704 <__swbuf_r>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	1c58      	adds	r0, r3, #1
 80060ee:	6010      	str	r0, [r2, #0]
 80060f0:	7019      	strb	r1, [r3, #0]
 80060f2:	4608      	mov	r0, r1
 80060f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <__sfputs_r>:
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	4614      	mov	r4, r2
 8006102:	18d5      	adds	r5, r2, r3
 8006104:	42ac      	cmp	r4, r5
 8006106:	d101      	bne.n	800610c <__sfputs_r+0x12>
 8006108:	2000      	movs	r0, #0
 800610a:	e007      	b.n	800611c <__sfputs_r+0x22>
 800610c:	463a      	mov	r2, r7
 800610e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ffda 	bl	80060cc <__sfputc_r>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d1f3      	bne.n	8006104 <__sfputs_r+0xa>
 800611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006120 <_vfiprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	460c      	mov	r4, r1
 8006126:	b09d      	sub	sp, #116	; 0x74
 8006128:	4617      	mov	r7, r2
 800612a:	461d      	mov	r5, r3
 800612c:	4606      	mov	r6, r0
 800612e:	b118      	cbz	r0, 8006138 <_vfiprintf_r+0x18>
 8006130:	6983      	ldr	r3, [r0, #24]
 8006132:	b90b      	cbnz	r3, 8006138 <_vfiprintf_r+0x18>
 8006134:	f7ff fee6 	bl	8005f04 <__sinit>
 8006138:	4b7c      	ldr	r3, [pc, #496]	; (800632c <_vfiprintf_r+0x20c>)
 800613a:	429c      	cmp	r4, r3
 800613c:	d158      	bne.n	80061f0 <_vfiprintf_r+0xd0>
 800613e:	6874      	ldr	r4, [r6, #4]
 8006140:	89a3      	ldrh	r3, [r4, #12]
 8006142:	0718      	lsls	r0, r3, #28
 8006144:	d55e      	bpl.n	8006204 <_vfiprintf_r+0xe4>
 8006146:	6923      	ldr	r3, [r4, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d05b      	beq.n	8006204 <_vfiprintf_r+0xe4>
 800614c:	2300      	movs	r3, #0
 800614e:	9309      	str	r3, [sp, #36]	; 0x24
 8006150:	2320      	movs	r3, #32
 8006152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006156:	2330      	movs	r3, #48	; 0x30
 8006158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800615c:	9503      	str	r5, [sp, #12]
 800615e:	f04f 0b01 	mov.w	fp, #1
 8006162:	46b8      	mov	r8, r7
 8006164:	4645      	mov	r5, r8
 8006166:	f815 3b01 	ldrb.w	r3, [r5], #1
 800616a:	b10b      	cbz	r3, 8006170 <_vfiprintf_r+0x50>
 800616c:	2b25      	cmp	r3, #37	; 0x25
 800616e:	d154      	bne.n	800621a <_vfiprintf_r+0xfa>
 8006170:	ebb8 0a07 	subs.w	sl, r8, r7
 8006174:	d00b      	beq.n	800618e <_vfiprintf_r+0x6e>
 8006176:	4653      	mov	r3, sl
 8006178:	463a      	mov	r2, r7
 800617a:	4621      	mov	r1, r4
 800617c:	4630      	mov	r0, r6
 800617e:	f7ff ffbc 	bl	80060fa <__sfputs_r>
 8006182:	3001      	adds	r0, #1
 8006184:	f000 80c2 	beq.w	800630c <_vfiprintf_r+0x1ec>
 8006188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800618a:	4453      	add	r3, sl
 800618c:	9309      	str	r3, [sp, #36]	; 0x24
 800618e:	f898 3000 	ldrb.w	r3, [r8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80ba 	beq.w	800630c <_vfiprintf_r+0x1ec>
 8006198:	2300      	movs	r3, #0
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	9307      	str	r3, [sp, #28]
 80061a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061aa:	931a      	str	r3, [sp, #104]	; 0x68
 80061ac:	46a8      	mov	r8, r5
 80061ae:	2205      	movs	r2, #5
 80061b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80061b4:	485e      	ldr	r0, [pc, #376]	; (8006330 <_vfiprintf_r+0x210>)
 80061b6:	f7fa f81b 	bl	80001f0 <memchr>
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	bb78      	cbnz	r0, 800621e <_vfiprintf_r+0xfe>
 80061be:	06d9      	lsls	r1, r3, #27
 80061c0:	bf44      	itt	mi
 80061c2:	2220      	movmi	r2, #32
 80061c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061c8:	071a      	lsls	r2, r3, #28
 80061ca:	bf44      	itt	mi
 80061cc:	222b      	movmi	r2, #43	; 0x2b
 80061ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061d2:	782a      	ldrb	r2, [r5, #0]
 80061d4:	2a2a      	cmp	r2, #42	; 0x2a
 80061d6:	d02a      	beq.n	800622e <_vfiprintf_r+0x10e>
 80061d8:	9a07      	ldr	r2, [sp, #28]
 80061da:	46a8      	mov	r8, r5
 80061dc:	2000      	movs	r0, #0
 80061de:	250a      	movs	r5, #10
 80061e0:	4641      	mov	r1, r8
 80061e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e6:	3b30      	subs	r3, #48	; 0x30
 80061e8:	2b09      	cmp	r3, #9
 80061ea:	d969      	bls.n	80062c0 <_vfiprintf_r+0x1a0>
 80061ec:	b360      	cbz	r0, 8006248 <_vfiprintf_r+0x128>
 80061ee:	e024      	b.n	800623a <_vfiprintf_r+0x11a>
 80061f0:	4b50      	ldr	r3, [pc, #320]	; (8006334 <_vfiprintf_r+0x214>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <_vfiprintf_r+0xda>
 80061f6:	68b4      	ldr	r4, [r6, #8]
 80061f8:	e7a2      	b.n	8006140 <_vfiprintf_r+0x20>
 80061fa:	4b4f      	ldr	r3, [pc, #316]	; (8006338 <_vfiprintf_r+0x218>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68f4      	ldreq	r4, [r6, #12]
 8006202:	e79d      	b.n	8006140 <_vfiprintf_r+0x20>
 8006204:	4621      	mov	r1, r4
 8006206:	4630      	mov	r0, r6
 8006208:	f000 fae0 	bl	80067cc <__swsetup_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	d09d      	beq.n	800614c <_vfiprintf_r+0x2c>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	b01d      	add	sp, #116	; 0x74
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621a:	46a8      	mov	r8, r5
 800621c:	e7a2      	b.n	8006164 <_vfiprintf_r+0x44>
 800621e:	4a44      	ldr	r2, [pc, #272]	; (8006330 <_vfiprintf_r+0x210>)
 8006220:	1a80      	subs	r0, r0, r2
 8006222:	fa0b f000 	lsl.w	r0, fp, r0
 8006226:	4318      	orrs	r0, r3
 8006228:	9004      	str	r0, [sp, #16]
 800622a:	4645      	mov	r5, r8
 800622c:	e7be      	b.n	80061ac <_vfiprintf_r+0x8c>
 800622e:	9a03      	ldr	r2, [sp, #12]
 8006230:	1d11      	adds	r1, r2, #4
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	9103      	str	r1, [sp, #12]
 8006236:	2a00      	cmp	r2, #0
 8006238:	db01      	blt.n	800623e <_vfiprintf_r+0x11e>
 800623a:	9207      	str	r2, [sp, #28]
 800623c:	e004      	b.n	8006248 <_vfiprintf_r+0x128>
 800623e:	4252      	negs	r2, r2
 8006240:	f043 0302 	orr.w	r3, r3, #2
 8006244:	9207      	str	r2, [sp, #28]
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	f898 3000 	ldrb.w	r3, [r8]
 800624c:	2b2e      	cmp	r3, #46	; 0x2e
 800624e:	d10e      	bne.n	800626e <_vfiprintf_r+0x14e>
 8006250:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006254:	2b2a      	cmp	r3, #42	; 0x2a
 8006256:	d138      	bne.n	80062ca <_vfiprintf_r+0x1aa>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	1d1a      	adds	r2, r3, #4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	9203      	str	r2, [sp, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	bfb8      	it	lt
 8006264:	f04f 33ff 	movlt.w	r3, #4294967295
 8006268:	f108 0802 	add.w	r8, r8, #2
 800626c:	9305      	str	r3, [sp, #20]
 800626e:	4d33      	ldr	r5, [pc, #204]	; (800633c <_vfiprintf_r+0x21c>)
 8006270:	f898 1000 	ldrb.w	r1, [r8]
 8006274:	2203      	movs	r2, #3
 8006276:	4628      	mov	r0, r5
 8006278:	f7f9 ffba 	bl	80001f0 <memchr>
 800627c:	b140      	cbz	r0, 8006290 <_vfiprintf_r+0x170>
 800627e:	2340      	movs	r3, #64	; 0x40
 8006280:	1b40      	subs	r0, r0, r5
 8006282:	fa03 f000 	lsl.w	r0, r3, r0
 8006286:	9b04      	ldr	r3, [sp, #16]
 8006288:	4303      	orrs	r3, r0
 800628a:	f108 0801 	add.w	r8, r8, #1
 800628e:	9304      	str	r3, [sp, #16]
 8006290:	f898 1000 	ldrb.w	r1, [r8]
 8006294:	482a      	ldr	r0, [pc, #168]	; (8006340 <_vfiprintf_r+0x220>)
 8006296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800629a:	2206      	movs	r2, #6
 800629c:	f108 0701 	add.w	r7, r8, #1
 80062a0:	f7f9 ffa6 	bl	80001f0 <memchr>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d037      	beq.n	8006318 <_vfiprintf_r+0x1f8>
 80062a8:	4b26      	ldr	r3, [pc, #152]	; (8006344 <_vfiprintf_r+0x224>)
 80062aa:	bb1b      	cbnz	r3, 80062f4 <_vfiprintf_r+0x1d4>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	3307      	adds	r3, #7
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	3308      	adds	r3, #8
 80062b6:	9303      	str	r3, [sp, #12]
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	444b      	add	r3, r9
 80062bc:	9309      	str	r3, [sp, #36]	; 0x24
 80062be:	e750      	b.n	8006162 <_vfiprintf_r+0x42>
 80062c0:	fb05 3202 	mla	r2, r5, r2, r3
 80062c4:	2001      	movs	r0, #1
 80062c6:	4688      	mov	r8, r1
 80062c8:	e78a      	b.n	80061e0 <_vfiprintf_r+0xc0>
 80062ca:	2300      	movs	r3, #0
 80062cc:	f108 0801 	add.w	r8, r8, #1
 80062d0:	9305      	str	r3, [sp, #20]
 80062d2:	4619      	mov	r1, r3
 80062d4:	250a      	movs	r5, #10
 80062d6:	4640      	mov	r0, r8
 80062d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062dc:	3a30      	subs	r2, #48	; 0x30
 80062de:	2a09      	cmp	r2, #9
 80062e0:	d903      	bls.n	80062ea <_vfiprintf_r+0x1ca>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0c3      	beq.n	800626e <_vfiprintf_r+0x14e>
 80062e6:	9105      	str	r1, [sp, #20]
 80062e8:	e7c1      	b.n	800626e <_vfiprintf_r+0x14e>
 80062ea:	fb05 2101 	mla	r1, r5, r1, r2
 80062ee:	2301      	movs	r3, #1
 80062f0:	4680      	mov	r8, r0
 80062f2:	e7f0      	b.n	80062d6 <_vfiprintf_r+0x1b6>
 80062f4:	ab03      	add	r3, sp, #12
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4622      	mov	r2, r4
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <_vfiprintf_r+0x228>)
 80062fc:	a904      	add	r1, sp, #16
 80062fe:	4630      	mov	r0, r6
 8006300:	f3af 8000 	nop.w
 8006304:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006308:	4681      	mov	r9, r0
 800630a:	d1d5      	bne.n	80062b8 <_vfiprintf_r+0x198>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	065b      	lsls	r3, r3, #25
 8006310:	f53f af7e 	bmi.w	8006210 <_vfiprintf_r+0xf0>
 8006314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006316:	e77d      	b.n	8006214 <_vfiprintf_r+0xf4>
 8006318:	ab03      	add	r3, sp, #12
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	4622      	mov	r2, r4
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <_vfiprintf_r+0x228>)
 8006320:	a904      	add	r1, sp, #16
 8006322:	4630      	mov	r0, r6
 8006324:	f000 f888 	bl	8006438 <_printf_i>
 8006328:	e7ec      	b.n	8006304 <_vfiprintf_r+0x1e4>
 800632a:	bf00      	nop
 800632c:	08006dd4 	.word	0x08006dd4
 8006330:	08006e14 	.word	0x08006e14
 8006334:	08006df4 	.word	0x08006df4
 8006338:	08006db4 	.word	0x08006db4
 800633c:	08006e1a 	.word	0x08006e1a
 8006340:	08006e1e 	.word	0x08006e1e
 8006344:	00000000 	.word	0x00000000
 8006348:	080060fb 	.word	0x080060fb

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4691      	mov	r9, r2
 8006352:	461f      	mov	r7, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800635c:	4293      	cmp	r3, r2
 800635e:	bfb8      	it	lt
 8006360:	4613      	movlt	r3, r2
 8006362:	f8c9 3000 	str.w	r3, [r9]
 8006366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800636a:	4606      	mov	r6, r0
 800636c:	460c      	mov	r4, r1
 800636e:	b112      	cbz	r2, 8006376 <_printf_common+0x2a>
 8006370:	3301      	adds	r3, #1
 8006372:	f8c9 3000 	str.w	r3, [r9]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	0699      	lsls	r1, r3, #26
 800637a:	bf42      	ittt	mi
 800637c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006380:	3302      	addmi	r3, #2
 8006382:	f8c9 3000 	strmi.w	r3, [r9]
 8006386:	6825      	ldr	r5, [r4, #0]
 8006388:	f015 0506 	ands.w	r5, r5, #6
 800638c:	d107      	bne.n	800639e <_printf_common+0x52>
 800638e:	f104 0a19 	add.w	sl, r4, #25
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	f8d9 2000 	ldr.w	r2, [r9]
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	42ab      	cmp	r3, r5
 800639c:	dc28      	bgt.n	80063f0 <_printf_common+0xa4>
 800639e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	3300      	adds	r3, #0
 80063a6:	bf18      	it	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	0692      	lsls	r2, r2, #26
 80063ac:	d42d      	bmi.n	800640a <_printf_common+0xbe>
 80063ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b2:	4639      	mov	r1, r7
 80063b4:	4630      	mov	r0, r6
 80063b6:	47c0      	blx	r8
 80063b8:	3001      	adds	r0, #1
 80063ba:	d020      	beq.n	80063fe <_printf_common+0xb2>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	68e5      	ldr	r5, [r4, #12]
 80063c0:	f8d9 2000 	ldr.w	r2, [r9]
 80063c4:	f003 0306 	and.w	r3, r3, #6
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	bf08      	it	eq
 80063cc:	1aad      	subeq	r5, r5, r2
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	6922      	ldr	r2, [r4, #16]
 80063d2:	bf0c      	ite	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	2500      	movne	r5, #0
 80063da:	4293      	cmp	r3, r2
 80063dc:	bfc4      	itt	gt
 80063de:	1a9b      	subgt	r3, r3, r2
 80063e0:	18ed      	addgt	r5, r5, r3
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	341a      	adds	r4, #26
 80063e8:	454d      	cmp	r5, r9
 80063ea:	d11a      	bne.n	8006422 <_printf_common+0xd6>
 80063ec:	2000      	movs	r0, #0
 80063ee:	e008      	b.n	8006402 <_printf_common+0xb6>
 80063f0:	2301      	movs	r3, #1
 80063f2:	4652      	mov	r2, sl
 80063f4:	4639      	mov	r1, r7
 80063f6:	4630      	mov	r0, r6
 80063f8:	47c0      	blx	r8
 80063fa:	3001      	adds	r0, #1
 80063fc:	d103      	bne.n	8006406 <_printf_common+0xba>
 80063fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	3501      	adds	r5, #1
 8006408:	e7c3      	b.n	8006392 <_printf_common+0x46>
 800640a:	18e1      	adds	r1, r4, r3
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	2030      	movs	r0, #48	; 0x30
 8006410:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006414:	4422      	add	r2, r4
 8006416:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800641a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800641e:	3302      	adds	r3, #2
 8006420:	e7c5      	b.n	80063ae <_printf_common+0x62>
 8006422:	2301      	movs	r3, #1
 8006424:	4622      	mov	r2, r4
 8006426:	4639      	mov	r1, r7
 8006428:	4630      	mov	r0, r6
 800642a:	47c0      	blx	r8
 800642c:	3001      	adds	r0, #1
 800642e:	d0e6      	beq.n	80063fe <_printf_common+0xb2>
 8006430:	f109 0901 	add.w	r9, r9, #1
 8006434:	e7d8      	b.n	80063e8 <_printf_common+0x9c>
	...

08006438 <_printf_i>:
 8006438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800643c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006440:	460c      	mov	r4, r1
 8006442:	7e09      	ldrb	r1, [r1, #24]
 8006444:	b085      	sub	sp, #20
 8006446:	296e      	cmp	r1, #110	; 0x6e
 8006448:	4617      	mov	r7, r2
 800644a:	4606      	mov	r6, r0
 800644c:	4698      	mov	r8, r3
 800644e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006450:	f000 80b3 	beq.w	80065ba <_printf_i+0x182>
 8006454:	d822      	bhi.n	800649c <_printf_i+0x64>
 8006456:	2963      	cmp	r1, #99	; 0x63
 8006458:	d036      	beq.n	80064c8 <_printf_i+0x90>
 800645a:	d80a      	bhi.n	8006472 <_printf_i+0x3a>
 800645c:	2900      	cmp	r1, #0
 800645e:	f000 80b9 	beq.w	80065d4 <_printf_i+0x19c>
 8006462:	2958      	cmp	r1, #88	; 0x58
 8006464:	f000 8083 	beq.w	800656e <_printf_i+0x136>
 8006468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800646c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006470:	e032      	b.n	80064d8 <_printf_i+0xa0>
 8006472:	2964      	cmp	r1, #100	; 0x64
 8006474:	d001      	beq.n	800647a <_printf_i+0x42>
 8006476:	2969      	cmp	r1, #105	; 0x69
 8006478:	d1f6      	bne.n	8006468 <_printf_i+0x30>
 800647a:	6820      	ldr	r0, [r4, #0]
 800647c:	6813      	ldr	r3, [r2, #0]
 800647e:	0605      	lsls	r5, r0, #24
 8006480:	f103 0104 	add.w	r1, r3, #4
 8006484:	d52a      	bpl.n	80064dc <_printf_i+0xa4>
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	da03      	bge.n	8006496 <_printf_i+0x5e>
 800648e:	222d      	movs	r2, #45	; 0x2d
 8006490:	425b      	negs	r3, r3
 8006492:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006496:	486f      	ldr	r0, [pc, #444]	; (8006654 <_printf_i+0x21c>)
 8006498:	220a      	movs	r2, #10
 800649a:	e039      	b.n	8006510 <_printf_i+0xd8>
 800649c:	2973      	cmp	r1, #115	; 0x73
 800649e:	f000 809d 	beq.w	80065dc <_printf_i+0x1a4>
 80064a2:	d808      	bhi.n	80064b6 <_printf_i+0x7e>
 80064a4:	296f      	cmp	r1, #111	; 0x6f
 80064a6:	d020      	beq.n	80064ea <_printf_i+0xb2>
 80064a8:	2970      	cmp	r1, #112	; 0x70
 80064aa:	d1dd      	bne.n	8006468 <_printf_i+0x30>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	f043 0320 	orr.w	r3, r3, #32
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	e003      	b.n	80064be <_printf_i+0x86>
 80064b6:	2975      	cmp	r1, #117	; 0x75
 80064b8:	d017      	beq.n	80064ea <_printf_i+0xb2>
 80064ba:	2978      	cmp	r1, #120	; 0x78
 80064bc:	d1d4      	bne.n	8006468 <_printf_i+0x30>
 80064be:	2378      	movs	r3, #120	; 0x78
 80064c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064c4:	4864      	ldr	r0, [pc, #400]	; (8006658 <_printf_i+0x220>)
 80064c6:	e055      	b.n	8006574 <_printf_i+0x13c>
 80064c8:	6813      	ldr	r3, [r2, #0]
 80064ca:	1d19      	adds	r1, r3, #4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6011      	str	r1, [r2, #0]
 80064d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d8:	2301      	movs	r3, #1
 80064da:	e08c      	b.n	80065f6 <_printf_i+0x1be>
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6011      	str	r1, [r2, #0]
 80064e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064e4:	bf18      	it	ne
 80064e6:	b21b      	sxthne	r3, r3
 80064e8:	e7cf      	b.n	800648a <_printf_i+0x52>
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	1d18      	adds	r0, r3, #4
 80064f0:	6010      	str	r0, [r2, #0]
 80064f2:	0628      	lsls	r0, r5, #24
 80064f4:	d501      	bpl.n	80064fa <_printf_i+0xc2>
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	e002      	b.n	8006500 <_printf_i+0xc8>
 80064fa:	0668      	lsls	r0, r5, #25
 80064fc:	d5fb      	bpl.n	80064f6 <_printf_i+0xbe>
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	4854      	ldr	r0, [pc, #336]	; (8006654 <_printf_i+0x21c>)
 8006502:	296f      	cmp	r1, #111	; 0x6f
 8006504:	bf14      	ite	ne
 8006506:	220a      	movne	r2, #10
 8006508:	2208      	moveq	r2, #8
 800650a:	2100      	movs	r1, #0
 800650c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006510:	6865      	ldr	r5, [r4, #4]
 8006512:	60a5      	str	r5, [r4, #8]
 8006514:	2d00      	cmp	r5, #0
 8006516:	f2c0 8095 	blt.w	8006644 <_printf_i+0x20c>
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	f021 0104 	bic.w	r1, r1, #4
 8006520:	6021      	str	r1, [r4, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d13d      	bne.n	80065a2 <_printf_i+0x16a>
 8006526:	2d00      	cmp	r5, #0
 8006528:	f040 808e 	bne.w	8006648 <_printf_i+0x210>
 800652c:	4665      	mov	r5, ip
 800652e:	2a08      	cmp	r2, #8
 8006530:	d10b      	bne.n	800654a <_printf_i+0x112>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	07db      	lsls	r3, r3, #31
 8006536:	d508      	bpl.n	800654a <_printf_i+0x112>
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	bfde      	ittt	le
 8006540:	2330      	movle	r3, #48	; 0x30
 8006542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006546:	f105 35ff 	addle.w	r5, r5, #4294967295
 800654a:	ebac 0305 	sub.w	r3, ip, r5
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	f8cd 8000 	str.w	r8, [sp]
 8006554:	463b      	mov	r3, r7
 8006556:	aa03      	add	r2, sp, #12
 8006558:	4621      	mov	r1, r4
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff fef6 	bl	800634c <_printf_common>
 8006560:	3001      	adds	r0, #1
 8006562:	d14d      	bne.n	8006600 <_printf_i+0x1c8>
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	b005      	add	sp, #20
 800656a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800656e:	4839      	ldr	r0, [pc, #228]	; (8006654 <_printf_i+0x21c>)
 8006570:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	6821      	ldr	r1, [r4, #0]
 8006578:	1d1d      	adds	r5, r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6015      	str	r5, [r2, #0]
 800657e:	060a      	lsls	r2, r1, #24
 8006580:	d50b      	bpl.n	800659a <_printf_i+0x162>
 8006582:	07ca      	lsls	r2, r1, #31
 8006584:	bf44      	itt	mi
 8006586:	f041 0120 	orrmi.w	r1, r1, #32
 800658a:	6021      	strmi	r1, [r4, #0]
 800658c:	b91b      	cbnz	r3, 8006596 <_printf_i+0x15e>
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	f022 0220 	bic.w	r2, r2, #32
 8006594:	6022      	str	r2, [r4, #0]
 8006596:	2210      	movs	r2, #16
 8006598:	e7b7      	b.n	800650a <_printf_i+0xd2>
 800659a:	064d      	lsls	r5, r1, #25
 800659c:	bf48      	it	mi
 800659e:	b29b      	uxthmi	r3, r3
 80065a0:	e7ef      	b.n	8006582 <_printf_i+0x14a>
 80065a2:	4665      	mov	r5, ip
 80065a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80065a8:	fb02 3311 	mls	r3, r2, r1, r3
 80065ac:	5cc3      	ldrb	r3, [r0, r3]
 80065ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065b2:	460b      	mov	r3, r1
 80065b4:	2900      	cmp	r1, #0
 80065b6:	d1f5      	bne.n	80065a4 <_printf_i+0x16c>
 80065b8:	e7b9      	b.n	800652e <_printf_i+0xf6>
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	6825      	ldr	r5, [r4, #0]
 80065be:	6961      	ldr	r1, [r4, #20]
 80065c0:	1d18      	adds	r0, r3, #4
 80065c2:	6010      	str	r0, [r2, #0]
 80065c4:	0628      	lsls	r0, r5, #24
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	d501      	bpl.n	80065ce <_printf_i+0x196>
 80065ca:	6019      	str	r1, [r3, #0]
 80065cc:	e002      	b.n	80065d4 <_printf_i+0x19c>
 80065ce:	066a      	lsls	r2, r5, #25
 80065d0:	d5fb      	bpl.n	80065ca <_printf_i+0x192>
 80065d2:	8019      	strh	r1, [r3, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	4665      	mov	r5, ip
 80065da:	e7b9      	b.n	8006550 <_printf_i+0x118>
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	1d19      	adds	r1, r3, #4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	681d      	ldr	r5, [r3, #0]
 80065e4:	6862      	ldr	r2, [r4, #4]
 80065e6:	2100      	movs	r1, #0
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7f9 fe01 	bl	80001f0 <memchr>
 80065ee:	b108      	cbz	r0, 80065f4 <_printf_i+0x1bc>
 80065f0:	1b40      	subs	r0, r0, r5
 80065f2:	6060      	str	r0, [r4, #4]
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	2300      	movs	r3, #0
 80065fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065fe:	e7a7      	b.n	8006550 <_printf_i+0x118>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	462a      	mov	r2, r5
 8006604:	4639      	mov	r1, r7
 8006606:	4630      	mov	r0, r6
 8006608:	47c0      	blx	r8
 800660a:	3001      	adds	r0, #1
 800660c:	d0aa      	beq.n	8006564 <_printf_i+0x12c>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	079b      	lsls	r3, r3, #30
 8006612:	d413      	bmi.n	800663c <_printf_i+0x204>
 8006614:	68e0      	ldr	r0, [r4, #12]
 8006616:	9b03      	ldr	r3, [sp, #12]
 8006618:	4298      	cmp	r0, r3
 800661a:	bfb8      	it	lt
 800661c:	4618      	movlt	r0, r3
 800661e:	e7a3      	b.n	8006568 <_printf_i+0x130>
 8006620:	2301      	movs	r3, #1
 8006622:	464a      	mov	r2, r9
 8006624:	4639      	mov	r1, r7
 8006626:	4630      	mov	r0, r6
 8006628:	47c0      	blx	r8
 800662a:	3001      	adds	r0, #1
 800662c:	d09a      	beq.n	8006564 <_printf_i+0x12c>
 800662e:	3501      	adds	r5, #1
 8006630:	68e3      	ldr	r3, [r4, #12]
 8006632:	9a03      	ldr	r2, [sp, #12]
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	42ab      	cmp	r3, r5
 8006638:	dcf2      	bgt.n	8006620 <_printf_i+0x1e8>
 800663a:	e7eb      	b.n	8006614 <_printf_i+0x1dc>
 800663c:	2500      	movs	r5, #0
 800663e:	f104 0919 	add.w	r9, r4, #25
 8006642:	e7f5      	b.n	8006630 <_printf_i+0x1f8>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ac      	bne.n	80065a2 <_printf_i+0x16a>
 8006648:	7803      	ldrb	r3, [r0, #0]
 800664a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800664e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006652:	e76c      	b.n	800652e <_printf_i+0xf6>
 8006654:	08006e25 	.word	0x08006e25
 8006658:	08006e36 	.word	0x08006e36

0800665c <_sbrk_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4c06      	ldr	r4, [pc, #24]	; (8006678 <_sbrk_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4605      	mov	r5, r0
 8006664:	4608      	mov	r0, r1
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	f7fa fed0 	bl	800140c <_sbrk>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_sbrk_r+0x1a>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	b103      	cbz	r3, 8006676 <_sbrk_r+0x1a>
 8006674:	602b      	str	r3, [r5, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20004200 	.word	0x20004200

0800667c <__sread>:
 800667c:	b510      	push	{r4, lr}
 800667e:	460c      	mov	r4, r1
 8006680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006684:	f000 fa96 	bl	8006bb4 <_read_r>
 8006688:	2800      	cmp	r0, #0
 800668a:	bfab      	itete	ge
 800668c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800668e:	89a3      	ldrhlt	r3, [r4, #12]
 8006690:	181b      	addge	r3, r3, r0
 8006692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006696:	bfac      	ite	ge
 8006698:	6563      	strge	r3, [r4, #84]	; 0x54
 800669a:	81a3      	strhlt	r3, [r4, #12]
 800669c:	bd10      	pop	{r4, pc}

0800669e <__swrite>:
 800669e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a2:	461f      	mov	r7, r3
 80066a4:	898b      	ldrh	r3, [r1, #12]
 80066a6:	05db      	lsls	r3, r3, #23
 80066a8:	4605      	mov	r5, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4616      	mov	r6, r2
 80066ae:	d505      	bpl.n	80066bc <__swrite+0x1e>
 80066b0:	2302      	movs	r3, #2
 80066b2:	2200      	movs	r2, #0
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	f000 f9b6 	bl	8006a28 <_lseek_r>
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c6:	81a3      	strh	r3, [r4, #12]
 80066c8:	4632      	mov	r2, r6
 80066ca:	463b      	mov	r3, r7
 80066cc:	4628      	mov	r0, r5
 80066ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d2:	f000 b869 	b.w	80067a8 <_write_r>

080066d6 <__sseek>:
 80066d6:	b510      	push	{r4, lr}
 80066d8:	460c      	mov	r4, r1
 80066da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066de:	f000 f9a3 	bl	8006a28 <_lseek_r>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	bf15      	itete	ne
 80066e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066f2:	81a3      	strheq	r3, [r4, #12]
 80066f4:	bf18      	it	ne
 80066f6:	81a3      	strhne	r3, [r4, #12]
 80066f8:	bd10      	pop	{r4, pc}

080066fa <__sclose>:
 80066fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fe:	f000 b8d3 	b.w	80068a8 <_close_r>
	...

08006704 <__swbuf_r>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	460e      	mov	r6, r1
 8006708:	4614      	mov	r4, r2
 800670a:	4605      	mov	r5, r0
 800670c:	b118      	cbz	r0, 8006716 <__swbuf_r+0x12>
 800670e:	6983      	ldr	r3, [r0, #24]
 8006710:	b90b      	cbnz	r3, 8006716 <__swbuf_r+0x12>
 8006712:	f7ff fbf7 	bl	8005f04 <__sinit>
 8006716:	4b21      	ldr	r3, [pc, #132]	; (800679c <__swbuf_r+0x98>)
 8006718:	429c      	cmp	r4, r3
 800671a:	d12a      	bne.n	8006772 <__swbuf_r+0x6e>
 800671c:	686c      	ldr	r4, [r5, #4]
 800671e:	69a3      	ldr	r3, [r4, #24]
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	071a      	lsls	r2, r3, #28
 8006726:	d52e      	bpl.n	8006786 <__swbuf_r+0x82>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	b363      	cbz	r3, 8006786 <__swbuf_r+0x82>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	1ac0      	subs	r0, r0, r3
 8006732:	6963      	ldr	r3, [r4, #20]
 8006734:	b2f6      	uxtb	r6, r6
 8006736:	4283      	cmp	r3, r0
 8006738:	4637      	mov	r7, r6
 800673a:	dc04      	bgt.n	8006746 <__swbuf_r+0x42>
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f948 	bl	80069d4 <_fflush_r>
 8006744:	bb28      	cbnz	r0, 8006792 <__swbuf_r+0x8e>
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	3b01      	subs	r3, #1
 800674a:	60a3      	str	r3, [r4, #8]
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	701e      	strb	r6, [r3, #0]
 8006754:	6963      	ldr	r3, [r4, #20]
 8006756:	3001      	adds	r0, #1
 8006758:	4283      	cmp	r3, r0
 800675a:	d004      	beq.n	8006766 <__swbuf_r+0x62>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	07db      	lsls	r3, r3, #31
 8006760:	d519      	bpl.n	8006796 <__swbuf_r+0x92>
 8006762:	2e0a      	cmp	r6, #10
 8006764:	d117      	bne.n	8006796 <__swbuf_r+0x92>
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f933 	bl	80069d4 <_fflush_r>
 800676e:	b190      	cbz	r0, 8006796 <__swbuf_r+0x92>
 8006770:	e00f      	b.n	8006792 <__swbuf_r+0x8e>
 8006772:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <__swbuf_r+0x9c>)
 8006774:	429c      	cmp	r4, r3
 8006776:	d101      	bne.n	800677c <__swbuf_r+0x78>
 8006778:	68ac      	ldr	r4, [r5, #8]
 800677a:	e7d0      	b.n	800671e <__swbuf_r+0x1a>
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <__swbuf_r+0xa0>)
 800677e:	429c      	cmp	r4, r3
 8006780:	bf08      	it	eq
 8006782:	68ec      	ldreq	r4, [r5, #12]
 8006784:	e7cb      	b.n	800671e <__swbuf_r+0x1a>
 8006786:	4621      	mov	r1, r4
 8006788:	4628      	mov	r0, r5
 800678a:	f000 f81f 	bl	80067cc <__swsetup_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	d0cc      	beq.n	800672c <__swbuf_r+0x28>
 8006792:	f04f 37ff 	mov.w	r7, #4294967295
 8006796:	4638      	mov	r0, r7
 8006798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679a:	bf00      	nop
 800679c:	08006dd4 	.word	0x08006dd4
 80067a0:	08006df4 	.word	0x08006df4
 80067a4:	08006db4 	.word	0x08006db4

080067a8 <_write_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4c07      	ldr	r4, [pc, #28]	; (80067c8 <_write_r+0x20>)
 80067ac:	4605      	mov	r5, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fa fdd7 	bl	800136a <_write>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_write_r+0x1e>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_write_r+0x1e>
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	20004200 	.word	0x20004200

080067cc <__swsetup_r>:
 80067cc:	4b32      	ldr	r3, [pc, #200]	; (8006898 <__swsetup_r+0xcc>)
 80067ce:	b570      	push	{r4, r5, r6, lr}
 80067d0:	681d      	ldr	r5, [r3, #0]
 80067d2:	4606      	mov	r6, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	b125      	cbz	r5, 80067e2 <__swsetup_r+0x16>
 80067d8:	69ab      	ldr	r3, [r5, #24]
 80067da:	b913      	cbnz	r3, 80067e2 <__swsetup_r+0x16>
 80067dc:	4628      	mov	r0, r5
 80067de:	f7ff fb91 	bl	8005f04 <__sinit>
 80067e2:	4b2e      	ldr	r3, [pc, #184]	; (800689c <__swsetup_r+0xd0>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	d10f      	bne.n	8006808 <__swsetup_r+0x3c>
 80067e8:	686c      	ldr	r4, [r5, #4]
 80067ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	0715      	lsls	r5, r2, #28
 80067f2:	d42c      	bmi.n	800684e <__swsetup_r+0x82>
 80067f4:	06d0      	lsls	r0, r2, #27
 80067f6:	d411      	bmi.n	800681c <__swsetup_r+0x50>
 80067f8:	2209      	movs	r2, #9
 80067fa:	6032      	str	r2, [r6, #0]
 80067fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006800:	81a3      	strh	r3, [r4, #12]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295
 8006806:	e03e      	b.n	8006886 <__swsetup_r+0xba>
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <__swsetup_r+0xd4>)
 800680a:	429c      	cmp	r4, r3
 800680c:	d101      	bne.n	8006812 <__swsetup_r+0x46>
 800680e:	68ac      	ldr	r4, [r5, #8]
 8006810:	e7eb      	b.n	80067ea <__swsetup_r+0x1e>
 8006812:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <__swsetup_r+0xd8>)
 8006814:	429c      	cmp	r4, r3
 8006816:	bf08      	it	eq
 8006818:	68ec      	ldreq	r4, [r5, #12]
 800681a:	e7e6      	b.n	80067ea <__swsetup_r+0x1e>
 800681c:	0751      	lsls	r1, r2, #29
 800681e:	d512      	bpl.n	8006846 <__swsetup_r+0x7a>
 8006820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006822:	b141      	cbz	r1, 8006836 <__swsetup_r+0x6a>
 8006824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006828:	4299      	cmp	r1, r3
 800682a:	d002      	beq.n	8006832 <__swsetup_r+0x66>
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f973 	bl	8006b18 <_free_r>
 8006832:	2300      	movs	r3, #0
 8006834:	6363      	str	r3, [r4, #52]	; 0x34
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	2300      	movs	r3, #0
 8006840:	6063      	str	r3, [r4, #4]
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f043 0308 	orr.w	r3, r3, #8
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	b94b      	cbnz	r3, 8006866 <__swsetup_r+0x9a>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685c:	d003      	beq.n	8006866 <__swsetup_r+0x9a>
 800685e:	4621      	mov	r1, r4
 8006860:	4630      	mov	r0, r6
 8006862:	f000 f917 	bl	8006a94 <__smakebuf_r>
 8006866:	89a2      	ldrh	r2, [r4, #12]
 8006868:	f012 0301 	ands.w	r3, r2, #1
 800686c:	d00c      	beq.n	8006888 <__swsetup_r+0xbc>
 800686e:	2300      	movs	r3, #0
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	6963      	ldr	r3, [r4, #20]
 8006874:	425b      	negs	r3, r3
 8006876:	61a3      	str	r3, [r4, #24]
 8006878:	6923      	ldr	r3, [r4, #16]
 800687a:	b953      	cbnz	r3, 8006892 <__swsetup_r+0xc6>
 800687c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006880:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006884:	d1ba      	bne.n	80067fc <__swsetup_r+0x30>
 8006886:	bd70      	pop	{r4, r5, r6, pc}
 8006888:	0792      	lsls	r2, r2, #30
 800688a:	bf58      	it	pl
 800688c:	6963      	ldrpl	r3, [r4, #20]
 800688e:	60a3      	str	r3, [r4, #8]
 8006890:	e7f2      	b.n	8006878 <__swsetup_r+0xac>
 8006892:	2000      	movs	r0, #0
 8006894:	e7f7      	b.n	8006886 <__swsetup_r+0xba>
 8006896:	bf00      	nop
 8006898:	20000010 	.word	0x20000010
 800689c:	08006dd4 	.word	0x08006dd4
 80068a0:	08006df4 	.word	0x08006df4
 80068a4:	08006db4 	.word	0x08006db4

080068a8 <_close_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4c06      	ldr	r4, [pc, #24]	; (80068c4 <_close_r+0x1c>)
 80068ac:	2300      	movs	r3, #0
 80068ae:	4605      	mov	r5, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	f7fa fd75 	bl	80013a2 <_close>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_close_r+0x1a>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_close_r+0x1a>
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	20004200 	.word	0x20004200

080068c8 <__sflush_r>:
 80068c8:	898a      	ldrh	r2, [r1, #12]
 80068ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	4605      	mov	r5, r0
 80068d0:	0710      	lsls	r0, r2, #28
 80068d2:	460c      	mov	r4, r1
 80068d4:	d458      	bmi.n	8006988 <__sflush_r+0xc0>
 80068d6:	684b      	ldr	r3, [r1, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc05      	bgt.n	80068e8 <__sflush_r+0x20>
 80068dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	dc02      	bgt.n	80068e8 <__sflush_r+0x20>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	d0f9      	beq.n	80068e2 <__sflush_r+0x1a>
 80068ee:	2300      	movs	r3, #0
 80068f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068f4:	682f      	ldr	r7, [r5, #0]
 80068f6:	6a21      	ldr	r1, [r4, #32]
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	d032      	beq.n	8006962 <__sflush_r+0x9a>
 80068fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	075a      	lsls	r2, r3, #29
 8006902:	d505      	bpl.n	8006910 <__sflush_r+0x48>
 8006904:	6863      	ldr	r3, [r4, #4]
 8006906:	1ac0      	subs	r0, r0, r3
 8006908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800690a:	b10b      	cbz	r3, 8006910 <__sflush_r+0x48>
 800690c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800690e:	1ac0      	subs	r0, r0, r3
 8006910:	2300      	movs	r3, #0
 8006912:	4602      	mov	r2, r0
 8006914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006916:	6a21      	ldr	r1, [r4, #32]
 8006918:	4628      	mov	r0, r5
 800691a:	47b0      	blx	r6
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	d106      	bne.n	8006930 <__sflush_r+0x68>
 8006922:	6829      	ldr	r1, [r5, #0]
 8006924:	291d      	cmp	r1, #29
 8006926:	d848      	bhi.n	80069ba <__sflush_r+0xf2>
 8006928:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <__sflush_r+0x108>)
 800692a:	40ca      	lsrs	r2, r1
 800692c:	07d6      	lsls	r6, r2, #31
 800692e:	d544      	bpl.n	80069ba <__sflush_r+0xf2>
 8006930:	2200      	movs	r2, #0
 8006932:	6062      	str	r2, [r4, #4]
 8006934:	04d9      	lsls	r1, r3, #19
 8006936:	6922      	ldr	r2, [r4, #16]
 8006938:	6022      	str	r2, [r4, #0]
 800693a:	d504      	bpl.n	8006946 <__sflush_r+0x7e>
 800693c:	1c42      	adds	r2, r0, #1
 800693e:	d101      	bne.n	8006944 <__sflush_r+0x7c>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b903      	cbnz	r3, 8006946 <__sflush_r+0x7e>
 8006944:	6560      	str	r0, [r4, #84]	; 0x54
 8006946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006948:	602f      	str	r7, [r5, #0]
 800694a:	2900      	cmp	r1, #0
 800694c:	d0c9      	beq.n	80068e2 <__sflush_r+0x1a>
 800694e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006952:	4299      	cmp	r1, r3
 8006954:	d002      	beq.n	800695c <__sflush_r+0x94>
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f8de 	bl	8006b18 <_free_r>
 800695c:	2000      	movs	r0, #0
 800695e:	6360      	str	r0, [r4, #52]	; 0x34
 8006960:	e7c0      	b.n	80068e4 <__sflush_r+0x1c>
 8006962:	2301      	movs	r3, #1
 8006964:	4628      	mov	r0, r5
 8006966:	47b0      	blx	r6
 8006968:	1c41      	adds	r1, r0, #1
 800696a:	d1c8      	bne.n	80068fe <__sflush_r+0x36>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0c5      	beq.n	80068fe <__sflush_r+0x36>
 8006972:	2b1d      	cmp	r3, #29
 8006974:	d001      	beq.n	800697a <__sflush_r+0xb2>
 8006976:	2b16      	cmp	r3, #22
 8006978:	d101      	bne.n	800697e <__sflush_r+0xb6>
 800697a:	602f      	str	r7, [r5, #0]
 800697c:	e7b1      	b.n	80068e2 <__sflush_r+0x1a>
 800697e:	89a3      	ldrh	r3, [r4, #12]
 8006980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	e7ad      	b.n	80068e4 <__sflush_r+0x1c>
 8006988:	690f      	ldr	r7, [r1, #16]
 800698a:	2f00      	cmp	r7, #0
 800698c:	d0a9      	beq.n	80068e2 <__sflush_r+0x1a>
 800698e:	0793      	lsls	r3, r2, #30
 8006990:	680e      	ldr	r6, [r1, #0]
 8006992:	bf08      	it	eq
 8006994:	694b      	ldreq	r3, [r1, #20]
 8006996:	600f      	str	r7, [r1, #0]
 8006998:	bf18      	it	ne
 800699a:	2300      	movne	r3, #0
 800699c:	eba6 0807 	sub.w	r8, r6, r7
 80069a0:	608b      	str	r3, [r1, #8]
 80069a2:	f1b8 0f00 	cmp.w	r8, #0
 80069a6:	dd9c      	ble.n	80068e2 <__sflush_r+0x1a>
 80069a8:	4643      	mov	r3, r8
 80069aa:	463a      	mov	r2, r7
 80069ac:	6a21      	ldr	r1, [r4, #32]
 80069ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069b0:	4628      	mov	r0, r5
 80069b2:	47b0      	blx	r6
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dc06      	bgt.n	80069c6 <__sflush_r+0xfe>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	e78e      	b.n	80068e4 <__sflush_r+0x1c>
 80069c6:	4407      	add	r7, r0
 80069c8:	eba8 0800 	sub.w	r8, r8, r0
 80069cc:	e7e9      	b.n	80069a2 <__sflush_r+0xda>
 80069ce:	bf00      	nop
 80069d0:	20400001 	.word	0x20400001

080069d4 <_fflush_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	690b      	ldr	r3, [r1, #16]
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	b1db      	cbz	r3, 8006a16 <_fflush_r+0x42>
 80069de:	b118      	cbz	r0, 80069e8 <_fflush_r+0x14>
 80069e0:	6983      	ldr	r3, [r0, #24]
 80069e2:	b90b      	cbnz	r3, 80069e8 <_fflush_r+0x14>
 80069e4:	f7ff fa8e 	bl	8005f04 <__sinit>
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <_fflush_r+0x48>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d109      	bne.n	8006a02 <_fflush_r+0x2e>
 80069ee:	686c      	ldr	r4, [r5, #4]
 80069f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f4:	b17b      	cbz	r3, 8006a16 <_fflush_r+0x42>
 80069f6:	4621      	mov	r1, r4
 80069f8:	4628      	mov	r0, r5
 80069fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069fe:	f7ff bf63 	b.w	80068c8 <__sflush_r>
 8006a02:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <_fflush_r+0x4c>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d101      	bne.n	8006a0c <_fflush_r+0x38>
 8006a08:	68ac      	ldr	r4, [r5, #8]
 8006a0a:	e7f1      	b.n	80069f0 <_fflush_r+0x1c>
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <_fflush_r+0x50>)
 8006a0e:	429c      	cmp	r4, r3
 8006a10:	bf08      	it	eq
 8006a12:	68ec      	ldreq	r4, [r5, #12]
 8006a14:	e7ec      	b.n	80069f0 <_fflush_r+0x1c>
 8006a16:	2000      	movs	r0, #0
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08006dd4 	.word	0x08006dd4
 8006a20:	08006df4 	.word	0x08006df4
 8006a24:	08006db4 	.word	0x08006db4

08006a28 <_lseek_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4c07      	ldr	r4, [pc, #28]	; (8006a48 <_lseek_r+0x20>)
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	4608      	mov	r0, r1
 8006a30:	4611      	mov	r1, r2
 8006a32:	2200      	movs	r2, #0
 8006a34:	6022      	str	r2, [r4, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fa fcda 	bl	80013f0 <_lseek>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_lseek_r+0x1e>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_lseek_r+0x1e>
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20004200 	.word	0x20004200

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460e      	mov	r6, r1
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	2900      	cmp	r1, #0
 8006a56:	b096      	sub	sp, #88	; 0x58
 8006a58:	4614      	mov	r4, r2
 8006a5a:	461d      	mov	r5, r3
 8006a5c:	da07      	bge.n	8006a6e <__swhatbuf_r+0x22>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	89b3      	ldrh	r3, [r6, #12]
 8006a64:	061a      	lsls	r2, r3, #24
 8006a66:	d410      	bmi.n	8006a8a <__swhatbuf_r+0x3e>
 8006a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a6c:	e00e      	b.n	8006a8c <__swhatbuf_r+0x40>
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f000 f8b2 	bl	8006bd8 <_fstat_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	dbf2      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a82:	425a      	negs	r2, r3
 8006a84:	415a      	adcs	r2, r3
 8006a86:	602a      	str	r2, [r5, #0]
 8006a88:	e7ee      	b.n	8006a68 <__swhatbuf_r+0x1c>
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	b016      	add	sp, #88	; 0x58
 8006a92:	bd70      	pop	{r4, r5, r6, pc}

08006a94 <__smakebuf_r>:
 8006a94:	898b      	ldrh	r3, [r1, #12]
 8006a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a98:	079d      	lsls	r5, r3, #30
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	d507      	bpl.n	8006ab0 <__smakebuf_r+0x1c>
 8006aa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	6123      	str	r3, [r4, #16]
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	6163      	str	r3, [r4, #20]
 8006aac:	b002      	add	sp, #8
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	ab01      	add	r3, sp, #4
 8006ab2:	466a      	mov	r2, sp
 8006ab4:	f7ff ffca 	bl	8006a4c <__swhatbuf_r>
 8006ab8:	9900      	ldr	r1, [sp, #0]
 8006aba:	4605      	mov	r5, r0
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff faab 	bl	8006018 <_malloc_r>
 8006ac2:	b948      	cbnz	r0, 8006ad8 <__smakebuf_r+0x44>
 8006ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac8:	059a      	lsls	r2, r3, #22
 8006aca:	d4ef      	bmi.n	8006aac <__smakebuf_r+0x18>
 8006acc:	f023 0303 	bic.w	r3, r3, #3
 8006ad0:	f043 0302 	orr.w	r3, r3, #2
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	e7e3      	b.n	8006aa0 <__smakebuf_r+0xc>
 8006ad8:	4b0d      	ldr	r3, [pc, #52]	; (8006b10 <__smakebuf_r+0x7c>)
 8006ada:	62b3      	str	r3, [r6, #40]	; 0x28
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	6020      	str	r0, [r4, #0]
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	81a3      	strh	r3, [r4, #12]
 8006ae6:	9b00      	ldr	r3, [sp, #0]
 8006ae8:	6163      	str	r3, [r4, #20]
 8006aea:	9b01      	ldr	r3, [sp, #4]
 8006aec:	6120      	str	r0, [r4, #16]
 8006aee:	b15b      	cbz	r3, 8006b08 <__smakebuf_r+0x74>
 8006af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 f881 	bl	8006bfc <_isatty_r>
 8006afa:	b128      	cbz	r0, 8006b08 <__smakebuf_r+0x74>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f023 0303 	bic.w	r3, r3, #3
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	431d      	orrs	r5, r3
 8006b0c:	81a5      	strh	r5, [r4, #12]
 8006b0e:	e7cd      	b.n	8006aac <__smakebuf_r+0x18>
 8006b10:	08005ecd 	.word	0x08005ecd

08006b14 <__malloc_lock>:
 8006b14:	4770      	bx	lr

08006b16 <__malloc_unlock>:
 8006b16:	4770      	bx	lr

08006b18 <_free_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	d045      	beq.n	8006bac <_free_r+0x94>
 8006b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b24:	1f0c      	subs	r4, r1, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfb8      	it	lt
 8006b2a:	18e4      	addlt	r4, r4, r3
 8006b2c:	f7ff fff2 	bl	8006b14 <__malloc_lock>
 8006b30:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <_free_r+0x98>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	4610      	mov	r0, r2
 8006b36:	b933      	cbnz	r3, 8006b46 <_free_r+0x2e>
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	6014      	str	r4, [r2, #0]
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b42:	f7ff bfe8 	b.w	8006b16 <__malloc_unlock>
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	d90c      	bls.n	8006b64 <_free_r+0x4c>
 8006b4a:	6821      	ldr	r1, [r4, #0]
 8006b4c:	1862      	adds	r2, r4, r1
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bf04      	itt	eq
 8006b52:	681a      	ldreq	r2, [r3, #0]
 8006b54:	685b      	ldreq	r3, [r3, #4]
 8006b56:	6063      	str	r3, [r4, #4]
 8006b58:	bf04      	itt	eq
 8006b5a:	1852      	addeq	r2, r2, r1
 8006b5c:	6022      	streq	r2, [r4, #0]
 8006b5e:	6004      	str	r4, [r0, #0]
 8006b60:	e7ec      	b.n	8006b3c <_free_r+0x24>
 8006b62:	4613      	mov	r3, r2
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	b10a      	cbz	r2, 8006b6c <_free_r+0x54>
 8006b68:	42a2      	cmp	r2, r4
 8006b6a:	d9fa      	bls.n	8006b62 <_free_r+0x4a>
 8006b6c:	6819      	ldr	r1, [r3, #0]
 8006b6e:	1858      	adds	r0, r3, r1
 8006b70:	42a0      	cmp	r0, r4
 8006b72:	d10b      	bne.n	8006b8c <_free_r+0x74>
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	4401      	add	r1, r0
 8006b78:	1858      	adds	r0, r3, r1
 8006b7a:	4282      	cmp	r2, r0
 8006b7c:	6019      	str	r1, [r3, #0]
 8006b7e:	d1dd      	bne.n	8006b3c <_free_r+0x24>
 8006b80:	6810      	ldr	r0, [r2, #0]
 8006b82:	6852      	ldr	r2, [r2, #4]
 8006b84:	605a      	str	r2, [r3, #4]
 8006b86:	4401      	add	r1, r0
 8006b88:	6019      	str	r1, [r3, #0]
 8006b8a:	e7d7      	b.n	8006b3c <_free_r+0x24>
 8006b8c:	d902      	bls.n	8006b94 <_free_r+0x7c>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	e7d3      	b.n	8006b3c <_free_r+0x24>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	1821      	adds	r1, r4, r0
 8006b98:	428a      	cmp	r2, r1
 8006b9a:	bf04      	itt	eq
 8006b9c:	6811      	ldreq	r1, [r2, #0]
 8006b9e:	6852      	ldreq	r2, [r2, #4]
 8006ba0:	6062      	str	r2, [r4, #4]
 8006ba2:	bf04      	itt	eq
 8006ba4:	1809      	addeq	r1, r1, r0
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	605c      	str	r4, [r3, #4]
 8006baa:	e7c7      	b.n	8006b3c <_free_r+0x24>
 8006bac:	bd38      	pop	{r3, r4, r5, pc}
 8006bae:	bf00      	nop
 8006bb0:	20004054 	.word	0x20004054

08006bb4 <_read_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4c07      	ldr	r4, [pc, #28]	; (8006bd4 <_read_r+0x20>)
 8006bb8:	4605      	mov	r5, r0
 8006bba:	4608      	mov	r0, r1
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	6022      	str	r2, [r4, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f7fa fbb4 	bl	8001330 <_read>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_read_r+0x1e>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_read_r+0x1e>
 8006bd0:	602b      	str	r3, [r5, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20004200 	.word	0x20004200

08006bd8 <_fstat_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4c07      	ldr	r4, [pc, #28]	; (8006bf8 <_fstat_r+0x20>)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4605      	mov	r5, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	f7fa fbe8 	bl	80013ba <_fstat>
 8006bea:	1c43      	adds	r3, r0, #1
 8006bec:	d102      	bne.n	8006bf4 <_fstat_r+0x1c>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	b103      	cbz	r3, 8006bf4 <_fstat_r+0x1c>
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20004200 	.word	0x20004200

08006bfc <_isatty_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4c06      	ldr	r4, [pc, #24]	; (8006c18 <_isatty_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4605      	mov	r5, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	f7fa fbe7 	bl	80013da <_isatty>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_isatty_r+0x1a>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_isatty_r+0x1a>
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20004200 	.word	0x20004200

08006c1c <_init>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr

08006c28 <_fini>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

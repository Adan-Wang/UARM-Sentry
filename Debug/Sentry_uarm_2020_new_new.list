
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000074  0800809c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000439c  0800809c  0002439c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f39c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000434b  00000000  00000000  0003f440  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  00043790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001308  00000000  00000000  00044c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000290cd  00000000  00000000  00045f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138de  00000000  00000000  0006f065  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3a08  00000000  00000000  00082943  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  0016634b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dbc  00000000  00000000  0016641c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007de0 	.word	0x08007de0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007de0 	.word	0x08007de0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b972 	b.w	8000e88 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4688      	mov	r8, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14b      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4615      	mov	r5, r2
 8000bce:	d967      	bls.n	8000ca0 <__udivmoddi4+0xe4>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b14a      	cbz	r2, 8000bea <__udivmoddi4+0x2e>
 8000bd6:	f1c2 0720 	rsb	r7, r2, #32
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	fa20 f707 	lsr.w	r7, r0, r7
 8000be2:	4095      	lsls	r5, r2
 8000be4:	ea47 0803 	orr.w	r8, r7, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bf4:	fa1f fc85 	uxth.w	ip, r5
 8000bf8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c00:	fb07 f10c 	mul.w	r1, r7, ip
 8000c04:	4299      	cmp	r1, r3
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x60>
 8000c08:	18eb      	adds	r3, r5, r3
 8000c0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c0e:	f080 811b 	bcs.w	8000e48 <__udivmoddi4+0x28c>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 8118 	bls.w	8000e48 <__udivmoddi4+0x28c>
 8000c18:	3f02      	subs	r7, #2
 8000c1a:	442b      	add	r3, r5
 8000c1c:	1a5b      	subs	r3, r3, r1
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c30:	45a4      	cmp	ip, r4
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x8c>
 8000c34:	192c      	adds	r4, r5, r4
 8000c36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3a:	f080 8107 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	f240 8104 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c44:	3802      	subs	r0, #2
 8000c46:	442c      	add	r4, r5
 8000c48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c4c:	eba4 040c 	sub.w	r4, r4, ip
 8000c50:	2700      	movs	r7, #0
 8000c52:	b11e      	cbz	r6, 8000c5c <__udivmoddi4+0xa0>
 8000c54:	40d4      	lsrs	r4, r2
 8000c56:	2300      	movs	r3, #0
 8000c58:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0xbe>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80eb 	beq.w	8000e42 <__udivmoddi4+0x286>
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c72:	4638      	mov	r0, r7
 8000c74:	4639      	mov	r1, r7
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	fab3 f783 	clz	r7, r3
 8000c7e:	2f00      	cmp	r7, #0
 8000c80:	d147      	bne.n	8000d12 <__udivmoddi4+0x156>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xd0>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 80fa 	bhi.w	8000e80 <__udivmoddi4+0x2c4>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4698      	mov	r8, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d0e0      	beq.n	8000c5c <__udivmoddi4+0xa0>
 8000c9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c9e:	e7dd      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000ca0:	b902      	cbnz	r2, 8000ca4 <__udivmoddi4+0xe8>
 8000ca2:	deff      	udf	#255	; 0xff
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	f040 808f 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cae:	1b49      	subs	r1, r1, r5
 8000cb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb4:	fa1f f885 	uxth.w	r8, r5
 8000cb8:	2701      	movs	r7, #1
 8000cba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cd0:	18eb      	adds	r3, r5, r3
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	f200 80cd 	bhi.w	8000e78 <__udivmoddi4+0x2bc>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1a59      	subs	r1, r3, r1
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x14c>
 8000cf8:	192c      	adds	r4, r5, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x14a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80b6 	bhi.w	8000e72 <__udivmoddi4+0x2b6>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e79f      	b.n	8000c52 <__udivmoddi4+0x96>
 8000d12:	f1c7 0c20 	rsb	ip, r7, #32
 8000d16:	40bb      	lsls	r3, r7
 8000d18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d20:	fa01 f407 	lsl.w	r4, r1, r7
 8000d24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d30:	4325      	orrs	r5, r4
 8000d32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d36:	0c2c      	lsrs	r4, r5, #16
 8000d38:	fb08 3319 	mls	r3, r8, r9, r3
 8000d3c:	fa1f fa8e 	uxth.w	sl, lr
 8000d40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d44:	fb09 f40a 	mul.w	r4, r9, sl
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1e 0303 	adds.w	r3, lr, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	f080 8087 	bcs.w	8000e6e <__udivmoddi4+0x2b2>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f240 8084 	bls.w	8000e6e <__udivmoddi4+0x2b2>
 8000d66:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6a:	4473      	add	r3, lr
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	b2ad      	uxth	r5, r5
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d80:	45a2      	cmp	sl, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1e 0404 	adds.w	r4, lr, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	d26b      	bcs.n	8000e66 <__udivmoddi4+0x2aa>
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d969      	bls.n	8000e66 <__udivmoddi4+0x2aa>
 8000d92:	3802      	subs	r0, #2
 8000d94:	4474      	add	r4, lr
 8000d96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	eba4 040a 	sub.w	r4, r4, sl
 8000da2:	454c      	cmp	r4, r9
 8000da4:	46c2      	mov	sl, r8
 8000da6:	464b      	mov	r3, r9
 8000da8:	d354      	bcc.n	8000e54 <__udivmoddi4+0x298>
 8000daa:	d051      	beq.n	8000e50 <__udivmoddi4+0x294>
 8000dac:	2e00      	cmp	r6, #0
 8000dae:	d069      	beq.n	8000e84 <__udivmoddi4+0x2c8>
 8000db0:	ebb1 050a 	subs.w	r5, r1, sl
 8000db4:	eb64 0403 	sbc.w	r4, r4, r3
 8000db8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	40fc      	lsrs	r4, r7
 8000dc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000dc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000dc8:	2700      	movs	r7, #0
 8000dca:	e747      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	fa21 f303 	lsr.w	r3, r1, r3
 8000dde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de2:	4338      	orrs	r0, r7
 8000de4:	0c01      	lsrs	r1, r0, #16
 8000de6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dea:	fa1f f885 	uxth.w	r8, r5
 8000dee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb07 f308 	mul.w	r3, r7, r8
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x256>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e08:	d22f      	bcs.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d92d      	bls.n	8000e6a <__udivmoddi4+0x2ae>
 8000e0e:	3f02      	subs	r7, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1acb      	subs	r3, r1, r3
 8000e14:	b281      	uxth	r1, r0
 8000e16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb00 f308 	mul.w	r3, r0, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x27e>
 8000e2a:	1869      	adds	r1, r5, r1
 8000e2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e30:	d217      	bcs.n	8000e62 <__udivmoddi4+0x2a6>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d915      	bls.n	8000e62 <__udivmoddi4+0x2a6>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4429      	add	r1, r5
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e40:	e73b      	b.n	8000cba <__udivmoddi4+0xfe>
 8000e42:	4637      	mov	r7, r6
 8000e44:	4630      	mov	r0, r6
 8000e46:	e709      	b.n	8000c5c <__udivmoddi4+0xa0>
 8000e48:	4607      	mov	r7, r0
 8000e4a:	e6e7      	b.n	8000c1c <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fb      	b.n	8000c48 <__udivmoddi4+0x8c>
 8000e50:	4541      	cmp	r1, r8
 8000e52:	d2ab      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e58:	eb69 020e 	sbc.w	r2, r9, lr
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	e7a4      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e62:	4660      	mov	r0, ip
 8000e64:	e7e9      	b.n	8000e3a <__udivmoddi4+0x27e>
 8000e66:	4618      	mov	r0, r3
 8000e68:	e795      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6a:	4667      	mov	r7, ip
 8000e6c:	e7d1      	b.n	8000e12 <__udivmoddi4+0x256>
 8000e6e:	4681      	mov	r9, r0
 8000e70:	e77c      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	442c      	add	r4, r5
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0x14c>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	442b      	add	r3, r5
 8000e7e:	e72f      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e80:	4638      	mov	r0, r7
 8000e82:	e708      	b.n	8000c96 <__udivmoddi4+0xda>
 8000e84:	4637      	mov	r7, r6
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0xa0>

08000e88 <__aeabi_idiv0>:
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(200);
 8000e94:	20c8      	movs	r0, #200	; 0xc8
 8000e96:	f000 fc43 	bl	8001720 <buzzer_play_mario>


  int32_t direction = CLOCKWISE; // direction of motor
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
  double vel = 1000; //Velocity of motor
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	4c06      	ldr	r4, [pc, #24]	; (8000ebc <Chassis_Task_Func+0x30>)
 8000ea4:	e9c7 3404 	strd	r3, r4, [r7, #16]
  uint32_t cycles_s=5; //Time period is 1 seconds per cycle, 5=5 cycles=5s, the timer is controlled by TIM13
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	 // Forever loop
	  motor_move_period(cycles_s, vel, direction);
 8000eac:	69f9      	ldr	r1, [r7, #28]
 8000eae:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 f804 	bl	8000ec0 <motor_move_period>
 8000eb8:	e7f8      	b.n	8000eac <Chassis_Task_Func+0x20>
 8000eba:	bf00      	nop
 8000ebc:	408f4000 	.word	0x408f4000

08000ec0 <motor_move_period>:
 * 		initial_direction: initial direction for motors
 *
 * @ Return: Null
 * @ Author: Haoran, Adan
 */
void motor_move_period(uint32_t cycles, double vel, int32_t initial_direction){
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	ed87 0b00 	vstr	d0, [r7]
 8000ecc:	60b9      	str	r1, [r7, #8]
	int32_t direction;

	//If first loop
	if (first_loop){
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <motor_move_period+0xac>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <motor_move_period+0x1a>
		direction = initial_direction;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	617b      	str	r3, [r7, #20]
	else{

	}
	//TIMEBASE = (APBxTIMCLK / (Prescaler + 1)) / (Period + 1) (Hertz)
	//currently set 1 Hz, if want 0.1s, set Prescaler of TIM13 to 839 (10 Hz)
	if(direction == CLOCKWISE){
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d115      	bne.n	8000f0c <motor_move_period+0x4c>
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <motor_move_period+0xb0>)
 8000ee8:	f002 fed4 	bl	8003c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <motor_move_period+0xb0>)
 8000ef2:	f002 fecf 	bl	8003c94 <HAL_GPIO_WritePin>
		// Clockwise Direction
		// give time counter here
		if (period_counter >= cycles) {
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <motor_move_period+0xb4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d805      	bhi.n	8000f0c <motor_move_period+0x4c>
			period_counter = 0;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <motor_move_period+0xb4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
			direction = COUNTER_CLOCKWISE;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	617b      	str	r3, [r7, #20]
		}
	}
	if(direction == COUNTER_CLOCKWISE){
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d109      	bne.n	8000f28 <motor_move_period+0x68>
		// Counter Clockwise Direction
		if (period_counter >= cycles){
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <motor_move_period+0xb4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d804      	bhi.n	8000f28 <motor_move_period+0x68>
			period_counter = 0;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <motor_move_period+0xb4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
			direction = CLOCKWISE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
		}
	}
	//Calculate velocity via direction * speed
	vel = direction*vel;
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff fb03 	bl	8000534 <__aeabi_i2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f36:	f7ff fb67 	bl	8000608 <__aeabi_dmul>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	e9c7 2300 	strd	r2, r3, [r7]

	//Send velocity to motor
	//and function should be written to control the RPM rather than just setting raw value
	Motor_set_raw_value(&motor_data[0], vel);
 8000f42:	ed97 0b00 	vldr	d0, [r7]
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <motor_move_period+0xb8>)
 8000f48:	f000 fb28 	bl	800159c <Motor_set_raw_value>
	Motor_set_raw_value(&motor_data[1], -vel);
 8000f4c:	683c      	ldr	r4, [r7, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f54:	ec45 4b10 	vmov	d0, r4, r5
 8000f58:	4808      	ldr	r0, [pc, #32]	; (8000f7c <motor_move_period+0xbc>)
 8000f5a:	f000 fb1f 	bl	800159c <Motor_set_raw_value>
	osDelay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f004 fe1d 	bl	8005b9e <osDelay>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6c:	20004188 	.word	0x20004188
 8000f70:	40021800 	.word	0x40021800
 8000f74:	200002e4 	.word	0x200002e4
 8000f78:	20004080 	.word	0x20004080
 8000f7c:	2000409c 	.word	0x2000409c

08000f80 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Gimbal_Task_Function */
  char *pdata; // data packet from computer
  double vmax=30000;
 8000f88:	a41d      	add	r4, pc, #116	; (adr r4, 8001000 <Gimbal_Task_Function+0x80>)
 8000f8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000f8e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  double max_angle=4096;
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	4c16      	ldr	r4, [pc, #88]	; (8000ff0 <Gimbal_Task_Function+0x70>)
 8000f98:	e9c7 3404 	strd	r3, r4, [r7, #16]
  pdata = malloc(PACKLEN+1);
 8000f9c:	2011      	movs	r0, #17
 8000f9e:	f005 ffe1 	bl	8006f64 <malloc>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <Gimbal_Task_Function+0x74>)
 8000faa:	f002 f998 	bl	80032de <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <Gimbal_Task_Function+0x78>)
 8000fb0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fb4:	801a      	strh	r2, [r3, #0]
	  Motor_pid_set_angle(&motor_data[4], angle_preprocess(4, comm_pack.yaw_data), 1,0,0);
	  char arr[sizeof(temp)+1];
	  memcpy(arr,&temp,sizeof(temp)+1);
	  arr[sizeof(temp)] = 0x0A;
	  HAL_UART_Transmit(&husart6, (char*)arr, sizeof(temp)+1,1);*/
	  Motor_pid_set_angle(&motor_data[4], 0, vmax/max_angle,0,0);
 8000fb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fbe:	f7ff fc4d 	bl	800085c <__aeabi_ddiv>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f7ff fdb7 	bl	8000b3c <__aeabi_d2iz>
 8000fce:	4601      	mov	r1, r0
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8000fe8 <Gimbal_Task_Function+0x68>
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <Gimbal_Task_Function+0x7c>)
 8000fda:	f000 f9dd 	bl	8001398 <Motor_pid_set_angle>
	  //Motor_set_raw_value(&motor_data[4],-3000);
	  osDelay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f004 fddd 	bl	8005b9e <osDelay>
	  Motor_pid_set_angle(&motor_data[4], 0, vmax/max_angle,0,0);
 8000fe4:	e7e7      	b.n	8000fb6 <Gimbal_Task_Function+0x36>
 8000fe6:	bf00      	nop
	...
 8000ff0:	40b00000 	.word	0x40b00000
 8000ff4:	2000418c 	.word	0x2000418c
 8000ff8:	20004236 	.word	0x20004236
 8000ffc:	200040f0 	.word	0x200040f0
 8001000:	00000000 	.word	0x00000000
 8001004:	40dd4c00 	.word	0x40dd4c00

08001008 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8001010:	f000 f818 	bl	8001044 <shoot_init>
  double fric_wheel_speed_percent=50;
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	4c08      	ldr	r4, [pc, #32]	; (800103c <Shoot_Task_Func+0x34>)
 800101a:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	4c07      	ldr	r4, [pc, #28]	; (8001040 <Shoot_Task_Func+0x38>)
 8001024:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8001028:	ed97 1b04 	vldr	d1, [r7, #16]
 800102c:	ed97 0b02 	vldr	d0, [r7, #8]
 8001030:	f000 f832 	bl	8001098 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8001034:	2001      	movs	r0, #1
 8001036:	f004 fdb2 	bl	8005b9e <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 800103a:	e7f5      	b.n	8001028 <Shoot_Task_Func+0x20>
 800103c:	40490000 	.word	0x40490000
 8001040:	40240000 	.word	0x40240000

08001044 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001048:	2100      	movs	r1, #0
 800104a:	4812      	ldr	r0, [pc, #72]	; (8001094 <shoot_init+0x50>)
 800104c:	f003 fb56 	bl	80046fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001050:	2108      	movs	r1, #8
 8001052:	4810      	ldr	r0, [pc, #64]	; (8001094 <shoot_init+0x50>)
 8001054:	f003 fb52 	bl	80046fc <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <shoot_init+0x50>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f640 0298 	movw	r2, #2200	; 0x898
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <shoot_init+0x50>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f640 0298 	movw	r2, #2200	; 0x898
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 800106c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001070:	f004 fd95 	bl	8005b9e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <shoot_init+0x50>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <shoot_init+0x50>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8001088:	f240 60d6 	movw	r0, #1750	; 0x6d6
 800108c:	f004 fd87 	bl	8005b9e <osDelay>

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20004040 	.word	0x20004040

08001098 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0b02 	vstr	d0, [r7, #8]
 80010a2:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <cmd_execute_shoot+0x50>)
 80010ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b0:	f7ff fbd4 	bl	800085c <__aeabi_ddiv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	a308      	add	r3, pc, #32	; (adr r3, 80010e0 <cmd_execute_shoot+0x48>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff faa1 	bl	8000608 <__aeabi_dmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	460c      	mov	r4, r1
 80010ca:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 80010ce:	ed97 0b04 	vldr	d0, [r7, #16]
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <cmd_execute_shoot+0x54>)
 80010d4:	f000 fa62 	bl	800159c <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40c38800 	.word	0x40c38800
 80010e8:	40590000 	.word	0x40590000
 80010ec:	200040d4 	.word	0x200040d4

080010f0 <Timer_Task_Func>:
 */

#include "Timer_App.h"


void Timer_Task_Func(void const * argument){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	uint32_t tick;

	for (;;){

		Motor_Data_Read();
 80010f8:	f000 f816 	bl	8001128 <Motor_Data_Read>
		Motor_Data_Sent();
 80010fc:	f000 f87a 	bl	80011f4 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <Timer_Task_Func+0x30>)
 8001108:	f000 f8f8 	bl	80012fc <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4619      	mov	r1, r3
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <Timer_Task_Func+0x34>)
 8001114:	f000 f8f2 	bl	80012fc <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f004 fd40 	bl	8005b9e <osDelay>
	for (;;){
 800111e:	e7eb      	b.n	80010f8 <Timer_Task_Func+0x8>
 8001120:	200040f0 	.word	0x200040f0
 8001124:	20004080 	.word	0x20004080

08001128 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e052      	b.n	80011da <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <Motor_Data_Read+0xc0>)
 8001136:	f000 fd19 	bl	8001b6c <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <Motor_Data_Read+0xc4>)
 8001140:	441a      	add	r2, r3
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	6810      	ldr	r0, [r2, #0]
 8001146:	6851      	ldr	r1, [r2, #4]
 8001148:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b218      	sxth	r0, r3
 8001158:	4925      	ldr	r1, [pc, #148]	; (80011f0 <Motor_Data_Read+0xc8>)
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3310      	adds	r3, #16
 8001168:	4602      	mov	r2, r0
 800116a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b218      	sxth	r0, r3
 800117a:	491d      	ldr	r1, [pc, #116]	; (80011f0 <Motor_Data_Read+0xc8>)
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3312      	adds	r3, #18
 800118a:	4602      	mov	r2, r0
 800118c:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7a7b      	ldrb	r3, [r7, #9]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b218      	sxth	r0, r3
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <Motor_Data_Read+0xc8>)
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	1a9b      	subs	r3, r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	3314      	adds	r3, #20
 80011ac:	4602      	mov	r2, r0
 80011ae:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 80011b0:	7abb      	ldrb	r3, [r7, #10]
 80011b2:	b218      	sxth	r0, r3
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <Motor_Data_Read+0xc8>)
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3316      	adds	r3, #22
 80011c4:	4602      	mov	r2, r0
 80011c6:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f004 fce8 	bl	8005b9e <osDelay>

		can_filter_disable(&hcan1);
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <Motor_Data_Read+0xc0>)
 80011d0:	f000 fcee 	bl	8001bb0 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b07      	cmp	r3, #7
 80011de:	dda9      	ble.n	8001134 <Motor_Data_Read+0xc>
	}
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000418c 	.word	0x2000418c
 80011ec:	200041b4 	.word	0x200041b4
 80011f0:	20004080 	.word	0x20004080

080011f4 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 8001202:	2308      	movs	r3, #8
 8001204:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	e06c      	b.n	80012e6 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	2b00      	cmp	r3, #0
 8001210:	d12b      	bne.n	800126a <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 8001212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001216:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 8001218:	4b36      	ldr	r3, [pc, #216]	; (80012f4 <Motor_Data_Sent+0x100>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	b2db      	uxtb	r3, r3
 8001220:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 800122a:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <Motor_Data_Sent+0x100>)
 800122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b2db      	uxtb	r3, r3
 8001232:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8001234:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001238:	b2db      	uxtb	r3, r3
 800123a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <Motor_Data_Sent+0x100>)
 800123e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001240:	121b      	asrs	r3, r3, #8
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <Motor_Data_Sent+0x100>)
 800124a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001256:	121b      	asrs	r3, r3, #8
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001268:	e032      	b.n	80012d0 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 800126a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800126e:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001276:	121b      	asrs	r3, r3, #8
 8001278:	b2db      	uxtb	r3, r3
 800127a:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <Motor_Data_Sent+0x100>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	b2db      	uxtb	r3, r3
 8001284:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800128c:	121b      	asrs	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <Motor_Data_Sent+0x100>)
 8001294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001298:	b2db      	uxtb	r3, r3
 800129a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <Motor_Data_Sent+0x100>)
 800129e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012a2:	121b      	asrs	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <Motor_Data_Sent+0x100>)
 80012ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <Motor_Data_Sent+0x100>)
 80012b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80012bc:	121b      	asrs	r3, r3, #8
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <Motor_Data_Sent+0x100>)
 80012c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	f107 021c 	add.w	r2, r7, #28
 80012d8:	4639      	mov	r1, r7
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <Motor_Data_Sent+0x104>)
 80012dc:	f001 fe12 	bl	8002f04 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	3301      	adds	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	dd8f      	ble.n	800120c <Motor_Data_Sent+0x18>
	}
}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20004080 	.word	0x20004080
 80012f8:	2000418c 	.word	0x2000418c

080012fc <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f811 	bl	8001330 <Motor_Data_Replacement>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f804 	bl	8001330 <Motor_Data_Replacement>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699a      	ldr	r2, [r3, #24]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <Motor_pid_set_angle>:


//PID Function, expects a POINTER to motor structure, target ABSOLUTE angle in DEGREES (between 0 and 360), and P/I/D parameters
void Motor_pid_set_angle(Motor* motor, double angle, int32_t p, int32_t i, int32_t d){
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b097      	sub	sp, #92	; 0x5c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6178      	str	r0, [r7, #20]
 80013a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80013a4:	6139      	str	r1, [r7, #16]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t current_error;
	int16_t target_angle;
	int16_t min_speed=1000;
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t tolerance=20;
 80013b2:	2314      	movs	r3, #20
 80013b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t direction=1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	double velocity=0;
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f04f 0400 	mov.w	r4, #0
 80013c6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double speed=0;
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	f04f 0400 	mov.w	r4, #0
 80013d2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	input_angle=round(angle/360*8192);
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b6e      	ldr	r3, [pc, #440]	; (8001594 <Motor_pid_set_angle+0x1fc>)
 80013dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e0:	f7ff fa3c 	bl	800085c <__aeabi_ddiv>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	4618      	mov	r0, r3
 80013ea:	4621      	mov	r1, r4
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <Motor_pid_set_angle+0x200>)
 80013f2:	f7ff f909 	bl	8000608 <__aeabi_dmul>
 80013f6:	4603      	mov	r3, r0
 80013f8:	460c      	mov	r4, r1
 80013fa:	ec44 3b17 	vmov	d7, r3, r4
 80013fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001402:	eef0 0a67 	vmov.f32	s1, s15
 8001406:	f006 fca1 	bl	8007d4c <round>
 800140a:	ec54 3b10 	vmov	r3, r4, d0
 800140e:	4618      	mov	r0, r3
 8001410:	4621      	mov	r1, r4
 8001412:	f7ff fb93 	bl	8000b3c <__aeabi_d2iz>
 8001416:	4603      	mov	r3, r0
 8001418:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	get_Motor_buffer(motor, &temp_motor_buffer);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff6a 	bl	80012fc <get_Motor_buffer>


	temp_motor_buffer.motor_info.P_parameter=p;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	623b      	str	r3, [r7, #32]
	temp_motor_buffer.motor_info.I_parameter=i;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
	temp_motor_buffer.motor_info.D_parameter=d;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 8001434:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001436:	87fb      	strh	r3, [r7, #62]	; 0x3e

	target_angle=input_angle;
 8001438:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800143c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	/*if (target_angle % 8192 !=0){
		target_angle=target_angle%8192;
	}*/

	current_error=(target_angle-rx_angle+8192)%8192; //Use target - rx + 8192 to always make it positive, mod 8192 to make sure its within [0,8192]
 800143e:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001442:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800144c:	425a      	negs	r2, r3
 800144e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001452:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001456:	bf58      	it	pl
 8001458:	4253      	negpl	r3, r2
 800145a:	877b      	strh	r3, [r7, #58]	; 0x3a
	//If error is not small, but motor turns less than 180 degrees, turn as per usual using p*error
	//If error is not small, but motor needs to turn more than 180 degrees, reverse direction, and error is the error "the other way"
	//In cases where error is not small, set minimum speed so that the motor doesnt stop turning due to friction

	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	if (current_error<tolerance){
 800145c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001460:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001464:	429a      	cmp	r2, r3
 8001466:	da06      	bge.n	8001476 <Motor_pid_set_angle+0xde>
		velocity=0;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	f04f 0400 	mov.w	r4, #0
 8001470:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001474:	e07d      	b.n	8001572 <Motor_pid_set_angle+0x1da>
	}
	else{
		if (current_error<=4096){ //If need to turn less than 180 degrees, go CW
 8001476:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800147a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800147e:	dc39      	bgt.n	80014f4 <Motor_pid_set_angle+0x15c>
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, SET);
			direction=1;
 8001480:	2301      	movs	r3, #1
 8001482:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 8001486:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f84f 	bl	8000534 <__aeabi_i2d>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 800149e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f846 	bl	8000534 <__aeabi_i2d>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	461a      	mov	r2, r3
 80014ae:	4623      	mov	r3, r4
 80014b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80014b4:	f7ff fb1a 	bl	8000aec <__aeabi_dcmplt>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <Motor_pid_set_angle+0x138>
				speed=min_speed;
 80014be:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f836 	bl	8000534 <__aeabi_i2d>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 80014d0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f82d 	bl	8000534 <__aeabi_i2d>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	461a      	mov	r2, r3
 80014e0:	4623      	mov	r3, r4
 80014e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80014e6:	f7ff f88f 	bl	8000608 <__aeabi_dmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80014f2:	e03e      	b.n	8001572 <Motor_pid_set_angle+0x1da>
		}
		else{ //Otherwise, go CCW
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, SET);
			current_error=(8192-current_error); //Error from "the other side" obtained by 8192-error if CCW
 80014f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80014f6:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	877b      	strh	r3, [r7, #58]	; 0x3a
			direction=-1;
 80014fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001502:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 8001506:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f80f 	bl	8000534 <__aeabi_i2d>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 800151e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f806 	bl	8000534 <__aeabi_i2d>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001534:	f7ff fada 	bl	8000aec <__aeabi_dcmplt>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <Motor_pid_set_angle+0x1b8>
				speed=min_speed;
 800153e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fff6 	bl	8000534 <__aeabi_i2d>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 8001550:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffed 	bl	8000534 <__aeabi_i2d>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	461a      	mov	r2, r3
 8001560:	4623      	mov	r3, r4
 8001562:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001566:	f7ff f84f 	bl	8000608 <__aeabi_dmul>
 800156a:	4603      	mov	r3, r0
 800156c:	460c      	mov	r4, r1
 800156e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	//current_error=3000;



	temp_motor_buffer.tx_data=velocity;
 8001572:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001576:	f7ff fae1 	bl	8000b3c <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
	set_Motor_buffer(&temp_motor_buffer,motor);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	6979      	ldr	r1, [r7, #20]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fec6 	bl	8001316 <set_Motor_buffer>

}
 800158a:	bf00      	nop
 800158c:	375c      	adds	r7, #92	; 0x5c
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	40768000 	.word	0x40768000
 8001598:	40c00000 	.word	0x40c00000

0800159c <Motor_set_raw_value>:

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fea4 	bl	80012fc <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 80015b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015b8:	f7ff fac0 	bl	8000b3c <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fea5 	bl	8001316 <set_Motor_buffer>
}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80015d8:	2100      	movs	r1, #0
 80015da:	4802      	ldr	r0, [pc, #8]	; (80015e4 <buzzer_init+0x10>)
 80015dc:	f003 f88e 	bl	80046fc <HAL_TIM_PWM_Start>

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200041f4 	.word	0x200041f4

080015e8 <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <buzzer_play_g0+0x44>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <buzzer_play_g0+0x44>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f242 5233 	movw	r2, #9523	; 0x2533
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <buzzer_play_g0+0x44>)
 8001604:	f242 5233 	movw	r2, #9523	; 0x2533
 8001608:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <buzzer_play_g0+0x44>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2264      	movs	r2, #100	; 0x64
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f004 fac2 	bl	8005b9e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <buzzer_play_g0+0x44>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2200      	movs	r2, #0
 8001620:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200041f4 	.word	0x200041f4

08001630 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <buzzer_play_c1+0x44>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <buzzer_play_c1+0x44>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <buzzer_play_c1+0x44>)
 800164c:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8001650:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <buzzer_play_c1+0x44>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2264      	movs	r2, #100	; 0x64
 8001658:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f004 fa9e 	bl	8005b9e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <buzzer_play_c1+0x44>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2200      	movs	r2, #0
 8001668:	635a      	str	r2, [r3, #52]	; 0x34
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200041f4 	.word	0x200041f4

08001678 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <buzzer_play_e1+0x44>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <buzzer_play_e1+0x44>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f241 621e 	movw	r2, #5662	; 0x161e
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <buzzer_play_e1+0x44>)
 8001694:	f241 621e 	movw	r2, #5662	; 0x161e
 8001698:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <buzzer_play_e1+0x44>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2264      	movs	r2, #100	; 0x64
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fa7a 	bl	8005b9e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <buzzer_play_e1+0x44>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200041f4 	.word	0x200041f4

080016c0 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <buzzer_play_g1+0x44>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <buzzer_play_g1+0x44>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f241 2299 	movw	r2, #4761	; 0x1299
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <buzzer_play_g1+0x44>)
 80016dc:	f241 2299 	movw	r2, #4761	; 0x1299
 80016e0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <buzzer_play_g1+0x44>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2264      	movs	r2, #100	; 0x64
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fa56 	bl	8005b9e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <buzzer_play_g1+0x44>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2200      	movs	r2, #0
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200041f4 	.word	0x200041f4

08001708 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fa43 	bl	8005b9e <osDelay>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08d      	sub	sp, #52	; 0x34
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7fe ff03 	bl	8000534 <__aeabi_i2d>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	f04f 0000 	mov.w	r0, #0
 800173a:	49bf      	ldr	r1, [pc, #764]	; (8001a38 <buzzer_play_mario+0x318>)
 800173c:	f7ff f88e 	bl	800085c <__aeabi_ddiv>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	4618      	mov	r0, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4bbb      	ldr	r3, [pc, #748]	; (8001a3c <buzzer_play_mario+0x31c>)
 800174e:	f7fe ff5b 	bl	8000608 <__aeabi_dmul>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	f7ff f9ef 	bl	8000b3c <__aeabi_d2iz>
 800175e:	4603      	mov	r3, r0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7fe fee6 	bl	8000534 <__aeabi_i2d>
 8001768:	4603      	mov	r3, r0
 800176a:	460c      	mov	r4, r1
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	f04f 0000 	mov.w	r0, #0
 8001774:	49b0      	ldr	r1, [pc, #704]	; (8001a38 <buzzer_play_mario+0x318>)
 8001776:	f7ff f871 	bl	800085c <__aeabi_ddiv>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	4618      	mov	r0, r3
 8001780:	4621      	mov	r1, r4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4bad      	ldr	r3, [pc, #692]	; (8001a3c <buzzer_play_mario+0x31c>)
 8001788:	f7fe ff3e 	bl	8000608 <__aeabi_dmul>
 800178c:	4603      	mov	r3, r0
 800178e:	460c      	mov	r4, r1
 8001790:	4618      	mov	r0, r3
 8001792:	4621      	mov	r1, r4
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4ba9      	ldr	r3, [pc, #676]	; (8001a40 <buzzer_play_mario+0x320>)
 800179a:	f7fe ff35 	bl	8000608 <__aeabi_dmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	460c      	mov	r4, r1
 80017a2:	4618      	mov	r0, r3
 80017a4:	4621      	mov	r1, r4
 80017a6:	f7ff f9c9 	bl	8000b3c <__aeabi_d2iz>
 80017aa:	4603      	mov	r3, r0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7fe fec0 	bl	8000534 <__aeabi_i2d>
 80017b4:	4603      	mov	r3, r0
 80017b6:	460c      	mov	r4, r1
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	499d      	ldr	r1, [pc, #628]	; (8001a38 <buzzer_play_mario+0x318>)
 80017c2:	f7ff f84b 	bl	800085c <__aeabi_ddiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	4b9a      	ldr	r3, [pc, #616]	; (8001a3c <buzzer_play_mario+0x31c>)
 80017d4:	f7fe ff18 	bl	8000608 <__aeabi_dmul>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4618      	mov	r0, r3
 80017de:	4621      	mov	r1, r4
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	4b97      	ldr	r3, [pc, #604]	; (8001a44 <buzzer_play_mario+0x324>)
 80017e6:	f7fe ff0f 	bl	8000608 <__aeabi_dmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	460c      	mov	r4, r1
 80017ee:	4618      	mov	r0, r3
 80017f0:	4621      	mov	r1, r4
 80017f2:	f7ff f9a3 	bl	8000b3c <__aeabi_d2iz>
 80017f6:	4603      	mov	r3, r0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7fe fe9a 	bl	8000534 <__aeabi_i2d>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	498a      	ldr	r1, [pc, #552]	; (8001a38 <buzzer_play_mario+0x318>)
 800180e:	f7ff f825 	bl	800085c <__aeabi_ddiv>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b87      	ldr	r3, [pc, #540]	; (8001a3c <buzzer_play_mario+0x31c>)
 8001820:	f7fe fef2 	bl	8000608 <__aeabi_dmul>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	4618      	mov	r0, r3
 800182a:	4621      	mov	r1, r4
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <buzzer_play_mario+0x324>)
 8001832:	f7fe fee9 	bl	8000608 <__aeabi_dmul>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	4618      	mov	r0, r3
 800183c:	4621      	mov	r1, r4
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <buzzer_play_mario+0x320>)
 8001844:	f7fe fee0 	bl	8000608 <__aeabi_dmul>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f7ff f974 	bl	8000b3c <__aeabi_d2iz>
 8001854:	4603      	mov	r3, r0
 8001856:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7fe fe6b 	bl	8000534 <__aeabi_i2d>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	461a      	mov	r2, r3
 8001864:	4623      	mov	r3, r4
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	4973      	ldr	r1, [pc, #460]	; (8001a38 <buzzer_play_mario+0x318>)
 800186c:	f7fe fff6 	bl	800085c <__aeabi_ddiv>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4618      	mov	r0, r3
 8001876:	4621      	mov	r1, r4
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <buzzer_play_mario+0x328>)
 800187e:	f7fe fec3 	bl	8000608 <__aeabi_dmul>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	4618      	mov	r0, r3
 8001888:	4621      	mov	r1, r4
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <buzzer_play_mario+0x31c>)
 8001890:	f7fe feba 	bl	8000608 <__aeabi_dmul>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	4618      	mov	r0, r3
 800189a:	4621      	mov	r1, r4
 800189c:	f7ff f94e 	bl	8000b3c <__aeabi_d2iz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7fe fe45 	bl	8000534 <__aeabi_i2d>
 80018aa:	4603      	mov	r3, r0
 80018ac:	460c      	mov	r4, r1
 80018ae:	461a      	mov	r2, r3
 80018b0:	4623      	mov	r3, r4
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	4960      	ldr	r1, [pc, #384]	; (8001a38 <buzzer_play_mario+0x318>)
 80018b8:	f7fe ffd0 	bl	800085c <__aeabi_ddiv>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	4618      	mov	r0, r3
 80018c2:	4621      	mov	r1, r4
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <buzzer_play_mario+0x328>)
 80018ca:	f7fe fe9d 	bl	8000608 <__aeabi_dmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	4618      	mov	r0, r3
 80018d4:	4621      	mov	r1, r4
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <buzzer_play_mario+0x31c>)
 80018dc:	f7fe fe94 	bl	8000608 <__aeabi_dmul>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	4618      	mov	r0, r3
 80018e6:	4621      	mov	r1, r4
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	4b54      	ldr	r3, [pc, #336]	; (8001a40 <buzzer_play_mario+0x320>)
 80018ee:	f7fe fe8b 	bl	8000608 <__aeabi_dmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4618      	mov	r0, r3
 80018f8:	4621      	mov	r1, r4
 80018fa:	f7ff f91f 	bl	8000b3c <__aeabi_d2iz>
 80018fe:	4603      	mov	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fe16 	bl	8000534 <__aeabi_i2d>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	461a      	mov	r2, r3
 800190e:	4623      	mov	r3, r4
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	4948      	ldr	r1, [pc, #288]	; (8001a38 <buzzer_play_mario+0x318>)
 8001916:	f7fe ffa1 	bl	800085c <__aeabi_ddiv>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	4618      	mov	r0, r3
 8001920:	4621      	mov	r1, r4
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	f7fe fcb9 	bl	800029c <__adddf3>
 800192a:	4603      	mov	r3, r0
 800192c:	460c      	mov	r4, r1
 800192e:	4618      	mov	r0, r3
 8001930:	4621      	mov	r1, r4
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <buzzer_play_mario+0x31c>)
 8001938:	f7fe fe66 	bl	8000608 <__aeabi_dmul>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	4618      	mov	r0, r3
 8001942:	4621      	mov	r1, r4
 8001944:	f7ff f8fa 	bl	8000b3c <__aeabi_d2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7fe fdf1 	bl	8000534 <__aeabi_i2d>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	4936      	ldr	r1, [pc, #216]	; (8001a38 <buzzer_play_mario+0x318>)
 8001960:	f7fe ff7c 	bl	800085c <__aeabi_ddiv>
 8001964:	4603      	mov	r3, r0
 8001966:	460c      	mov	r4, r1
 8001968:	4618      	mov	r0, r3
 800196a:	4621      	mov	r1, r4
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	f7fe fc94 	bl	800029c <__adddf3>
 8001974:	4603      	mov	r3, r0
 8001976:	460c      	mov	r4, r1
 8001978:	4618      	mov	r0, r3
 800197a:	4621      	mov	r1, r4
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <buzzer_play_mario+0x31c>)
 8001982:	f7fe fe41 	bl	8000608 <__aeabi_dmul>
 8001986:	4603      	mov	r3, r0
 8001988:	460c      	mov	r4, r1
 800198a:	4618      	mov	r0, r3
 800198c:	4621      	mov	r1, r4
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <buzzer_play_mario+0x320>)
 8001994:	f7fe fe38 	bl	8000608 <__aeabi_dmul>
 8001998:	4603      	mov	r3, r0
 800199a:	460c      	mov	r4, r1
 800199c:	4618      	mov	r0, r3
 800199e:	4621      	mov	r1, r4
 80019a0:	f7ff f8cc 	bl	8000b3c <__aeabi_d2iz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fdc3 	bl	8000534 <__aeabi_i2d>
 80019ae:	4603      	mov	r3, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	461a      	mov	r2, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	491f      	ldr	r1, [pc, #124]	; (8001a38 <buzzer_play_mario+0x318>)
 80019bc:	f7fe ff4e 	bl	800085c <__aeabi_ddiv>
 80019c0:	4603      	mov	r3, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	4618      	mov	r0, r3
 80019c6:	4621      	mov	r1, r4
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <buzzer_play_mario+0x32c>)
 80019ce:	f7fe fe1b 	bl	8000608 <__aeabi_dmul>
 80019d2:	4603      	mov	r3, r0
 80019d4:	460c      	mov	r4, r1
 80019d6:	4618      	mov	r0, r3
 80019d8:	4621      	mov	r1, r4
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <buzzer_play_mario+0x31c>)
 80019e0:	f7fe fe12 	bl	8000608 <__aeabi_dmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	4618      	mov	r0, r3
 80019ea:	4621      	mov	r1, r4
 80019ec:	f7ff f8a6 	bl	8000b3c <__aeabi_d2iz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 80019f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019f6:	f7ff fe3f 	bl	8001678 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 80019fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019fc:	f7ff fe3c 	bl	8001678 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a02:	f7ff fe81 	bl	8001708 <buzzer_rest>
	buzzer_play_e1(eighth);
 8001a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a08:	f7ff fe36 	bl	8001678 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a0e:	f7ff fe7b 	bl	8001708 <buzzer_rest>
	buzzer_play_c1(eighth);
 8001a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a14:	f7ff fe0c 	bl	8001630 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8001a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a1a:	f7ff fe2d 	bl	8001678 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 8001a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a20:	f7ff fe4e 	bl	80016c0 <buzzer_play_g1>
	buzzer_rest(quarter);
 8001a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a26:	f7ff fe6f 	bl	8001708 <buzzer_rest>
	buzzer_play_g0(quarter);
 8001a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a2c:	f7ff fddc 	bl	80015e8 <buzzer_play_g0>


}
 8001a30:	bf00      	nop
 8001a32:	3734      	adds	r7, #52	; 0x34
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	404e0000 	.word	0x404e0000
 8001a3c:	408f4000 	.word	0x408f4000
 8001a40:	3ff80000 	.word	0x3ff80000
 8001a44:	3fe00000 	.word	0x3fe00000
 8001a48:	3fd00000 	.word	0x3fd00000
 8001a4c:	40100000 	.word	0x40100000

08001a50 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a54:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <MX_CAN1_Init+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a6e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001a72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a7a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_CAN1_Init+0x64>)
 8001aa2:	f001 f80f 	bl	8002ac4 <HAL_CAN_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f000 fb38 	bl	8002120 <Error_Handler>
  }

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000418c 	.word	0x2000418c
 8001ab8:	40006400 	.word	0x40006400

08001abc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <HAL_CAN_MspInit+0xa4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d13b      	bne.n	8001b56 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_CAN_MspInit+0xa8>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <HAL_CAN_MspInit+0xa8>)
 8001ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_CAN_MspInit+0xa8>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_CAN_MspInit+0xa8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_CAN_MspInit+0xa8>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_CAN_MspInit+0xa8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b16:	2303      	movs	r3, #3
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b26:	2309      	movs	r3, #9
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <HAL_CAN_MspInit+0xac>)
 8001b32:	f001 ff05 	bl	8003940 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	2013      	movs	r0, #19
 8001b3c:	f001 fed6 	bl	80038ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b40:	2013      	movs	r0, #19
 8001b42:	f001 feef 	bl	8003924 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	2014      	movs	r0, #20
 8001b4c:	f001 fece 	bl	80038ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b50:	2014      	movs	r0, #20
 8001b52:	f001 fee7 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40006400 	.word	0x40006400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020c00 	.word	0x40020c00

08001b6c <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001b94:	231b      	movs	r3, #27
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f001 f88a 	bl	8002cbc <HAL_CAN_ConfigFilter>
}
 8001ba8:	bf00      	nop
 8001baa:	3730      	adds	r7, #48	; 0x30
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8001bd8:	231b      	movs	r3, #27
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f001 f868 	bl	8002cbc <HAL_CAN_ConfigFilter>
}
 8001bec:	bf00      	nop
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	; 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001c04:	0d5b      	lsrs	r3, r3, #21
 8001c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c0a:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8001c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	f107 0208 	add.w	r2, r7, #8
 8001c24:	2100      	movs	r1, #0
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f001 fa47 	bl	80030ba <HAL_CAN_GetRxMessage>
}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200041b4 	.word	0x200041b4

08001c38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <vApplicationGetIdleTaskMemory+0x2c>)
 8001c48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4a06      	ldr	r2, [pc, #24]	; (8001c68 <vApplicationGetIdleTaskMemory+0x30>)
 8001c4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000090 	.word	0x20000090
 8001c68:	200000e4 	.word	0x200000e4

08001c6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b0a8      	sub	sp, #160	; 0xa0
 8001c70:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <MX_FREERTOS_Init+0xc0>)
 8001c74:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001c78:	461d      	mov	r5, r3
 8001c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f003 ff3a 	bl	8005b06 <osThreadCreate>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <MX_FREERTOS_Init+0xc4>)
 8001c96:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <MX_FREERTOS_Init+0xc8>)
 8001c9a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8001cac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 ff27 	bl	8005b06 <osThreadCreate>
 8001cb8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_FREERTOS_Init+0xcc>)
 8001cbe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ccc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8001cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 ff15 	bl	8005b06 <osThreadCreate>
 8001cdc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_FREERTOS_Init+0xd0>)
 8001ce2:	f107 0420 	add.w	r4, r7, #32
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 ff03 	bl	8005b06 <osThreadCreate>
 8001d00:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_FREERTOS_Init+0xd4>)
 8001d06:	1d3c      	adds	r4, r7, #4
 8001d08:	461d      	mov	r5, r3
 8001d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fef3 	bl	8005b06 <osThreadCreate>
 8001d20:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001d24:	bf00      	nop
 8001d26:	37a0      	adds	r7, #160	; 0xa0
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2c:	08007e04 	.word	0x08007e04
 8001d30:	20004250 	.word	0x20004250
 8001d34:	08007e2c 	.word	0x08007e2c
 8001d38:	08007e54 	.word	0x08007e54
 8001d3c:	08007e7c 	.word	0x08007e7c
 8001d40:	08007ea4 	.word	0x08007ea4

08001d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f003 ff26 	bl	8005b9e <osDelay>
 8001d52:	e7fb      	b.n	8001d4c <StartDefaultTask+0x8>

08001d54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
 8001d6e:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a69      	ldr	r2, [pc, #420]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b67      	ldr	r3, [pc, #412]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	61bb      	str	r3, [r7, #24]
 8001d84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a62      	ldr	r2, [pc, #392]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a5b      	ldr	r2, [pc, #364]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a54      	ldr	r2, [pc, #336]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b44      	ldr	r3, [pc, #272]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <MX_GPIO_Init+0x1c4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001e34:	4839      	ldr	r0, [pc, #228]	; (8001f1c <MX_GPIO_Init+0x1c8>)
 8001e36:	f001 ff2d 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	211e      	movs	r1, #30
 8001e3e:	4837      	ldr	r0, [pc, #220]	; (8001f1c <MX_GPIO_Init+0x1c8>)
 8001e40:	f001 ff28 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e4a:	4835      	ldr	r0, [pc, #212]	; (8001f20 <MX_GPIO_Init+0x1cc>)
 8001e4c:	f001 ff22 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e56:	4833      	ldr	r0, [pc, #204]	; (8001f24 <MX_GPIO_Init+0x1d0>)
 8001e58:	f001 ff1c 	bl	8003c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482c      	ldr	r0, [pc, #176]	; (8001f20 <MX_GPIO_Init+0x1cc>)
 8001e70:	f001 fd66 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8001e74:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001e78:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e86:	f107 031c 	add.w	r3, r7, #28
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4823      	ldr	r0, [pc, #140]	; (8001f1c <MX_GPIO_Init+0x1c8>)
 8001e8e:	f001 fd57 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 8001e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481f      	ldr	r0, [pc, #124]	; (8001f24 <MX_GPIO_Init+0x1d0>)
 8001ea8:	f001 fd4a 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001eac:	2304      	movs	r3, #4
 8001eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <MX_GPIO_Init+0x1d4>)
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481b      	ldr	r0, [pc, #108]	; (8001f2c <MX_GPIO_Init+0x1d8>)
 8001ec0:	f001 fd3e 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001ec4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4810      	ldr	r0, [pc, #64]	; (8001f20 <MX_GPIO_Init+0x1cc>)
 8001ede:	f001 fd2f 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480a      	ldr	r0, [pc, #40]	; (8001f24 <MX_GPIO_Init+0x1d0>)
 8001efc:	f001 fd20 	bl	8003940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2105      	movs	r1, #5
 8001f04:	2008      	movs	r0, #8
 8001f06:	f001 fcf1 	bl	80038ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001f0a:	2008      	movs	r0, #8
 8001f0c:	f001 fd0a 	bl	8003924 <HAL_NVIC_EnableIRQ>

}
 8001f10:	bf00      	nop
 8001f12:	3730      	adds	r7, #48	; 0x30
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40021800 	.word	0x40021800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40021400 	.word	0x40021400
 8001f28:	10110000 	.word	0x10110000
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d12b      	bne.n	8001f98 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8001f40:	4817      	ldr	r0, [pc, #92]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f42:	f7ff fe13 	bl	8001b6c <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0x74>)
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	6810      	ldr	r0, [r2, #0]
 8001f4e:	6851      	ldr	r1, [r2, #4]
 8001f50:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001f52:	7a3b      	ldrb	r3, [r7, #8]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	7a7b      	ldrb	r3, [r7, #9]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001f60:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001f62:	7abb      	ldrb	r3, [r7, #10]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	b21a      	sxth	r2, r3
 8001f68:	7afb      	ldrb	r3, [r7, #11]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001f70:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001f72:	7b3b      	ldrb	r3, [r7, #12]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	7b7b      	ldrb	r3, [r7, #13]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001f82:	9201      	str	r2, [sp, #4]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f8e:	f005 f8a1 	bl	80070d4 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8001f92:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x70>)
 8001f94:	f7ff fe0c 	bl	8001bb0 <can_filter_disable>


	}
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000418c 	.word	0x2000418c
 8001fa4:	200041b4 	.word	0x200041b4
 8001fa8:	08007ec0 	.word	0x08007ec0

08001fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb0:	f000 fd46 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb4:	f000 f822 	bl	8001ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb8:	f7ff fecc 	bl	8001d54 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001fbc:	f7ff fd48 	bl	8001a50 <MX_CAN1_Init>
  MX_TIM4_Init();
 8001fc0:	f000 fa42 	bl	8002448 <MX_TIM4_Init>
  MX_TIM12_Init();
 8001fc4:	f000 faa6 	bl	8002514 <MX_TIM12_Init>
  MX_UART7_Init();
 8001fc8:	f000 fc3e 	bl	8002848 <MX_UART7_Init>
  MX_USART6_Init();
 8001fcc:	f000 fc66 	bl	800289c <MX_USART6_Init>
  MX_TIM14_Init();
 8001fd0:	f000 fb0a 	bl	80025e8 <MX_TIM14_Init>
  MX_TIM13_Init();
 8001fd4:	f000 fae4 	bl	80025a0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8001fd8:	f7ff fafc 	bl	80015d4 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <main+0x48>)
 8001fde:	f000 ff4d 	bl	8002e7c <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8001fe2:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <main+0x4c>)
 8001fe4:	f002 fb3b 	bl	800465e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001fe8:	f7ff fe40 	bl	8001c6c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001fec:	f003 fd84 	bl	8005af8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <main+0x44>
 8001ff2:	bf00      	nop
 8001ff4:	2000418c 	.word	0x2000418c
 8001ff8:	20004294 	.word	0x20004294

08001ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b094      	sub	sp, #80	; 0x50
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2230      	movs	r2, #48	; 0x30
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f004 ffb2 	bl	8006f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <SystemClock_Config+0xd0>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a28      	ldr	r2, [pc, #160]	; (80020cc <SystemClock_Config+0xd0>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <SystemClock_Config+0xd0>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <SystemClock_Config+0xd4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002048:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <SystemClock_Config+0xd4>)
 800204a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <SystemClock_Config+0xd4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800205c:	2301      	movs	r3, #1
 800205e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002066:	2302      	movs	r3, #2
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002070:	2306      	movs	r3, #6
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002074:	23a8      	movs	r3, #168	; 0xa8
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002078:	2302      	movs	r3, #2
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800207c:	2304      	movs	r3, #4
 800207e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002080:	f107 0320 	add.w	r3, r7, #32
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fe51 	bl	8003d2c <HAL_RCC_OscConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002090:	f000 f846 	bl	8002120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002094:	230f      	movs	r3, #15
 8002096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 f8aa 	bl	800420c <HAL_RCC_ClockConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020be:	f000 f82f 	bl	8002120 <Error_Handler>
  }
}
 80020c2:	bf00      	nop
 80020c4:	3750      	adds	r7, #80	; 0x50
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d109      	bne.n	80020fa <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020ee:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 80020f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80020f6:	f001 fde6 	bl	8003cc6 <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8002104:	f000 fcbe 	bl	8002a84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40001c00 	.word	0x40001c00
 8002114:	200002e4 	.word	0x200002e4
 8002118:	40021000 	.word	0x40021000
 800211c:	40000c00 	.word	0x40000c00

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002126:	e7fe      	b.n	8002126 <Error_Handler+0x6>

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_MspInit+0x54>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a11      	ldr	r2, [pc, #68]	; (800217c <HAL_MspInit+0x54>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_MspInit+0x54>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_MspInit+0x54>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_MspInit+0x54>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_MspInit+0x54>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	210f      	movs	r1, #15
 800216a:	f06f 0001 	mvn.w	r0, #1
 800216e:	f001 fbbd 	bl	80038ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	; 0x30
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	2032      	movs	r0, #50	; 0x32
 8002196:	f001 fba9 	bl	80038ec <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800219a:	2032      	movs	r0, #50	; 0x32
 800219c:	f001 fbc2 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <HAL_InitTick+0xa4>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_InitTick+0xa4>)
 80021aa:	f043 0308 	orr.w	r3, r3, #8
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
 80021b0:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_InitTick+0xa4>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021bc:	f107 0210 	add.w	r2, r7, #16
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 f9ec 	bl	80045a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021cc:	f002 f9c2 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80021d0:	4603      	mov	r3, r0
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d8:	4a13      	ldr	r2, [pc, #76]	; (8002228 <HAL_InitTick+0xa8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	3b01      	subs	r3, #1
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_InitTick+0xac>)
 80021e6:	4a12      	ldr	r2, [pc, #72]	; (8002230 <HAL_InitTick+0xb0>)
 80021e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_InitTick+0xac>)
 80021ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021f0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <HAL_InitTick+0xac>)
 80021f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_InitTick+0xac>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_InitTick+0xac>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <HAL_InitTick+0xac>)
 8002206:	f002 f9ff 	bl	8004608 <HAL_TIM_Base_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d104      	bne.n	800221a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <HAL_InitTick+0xac>)
 8002212:	f002 fa24 	bl	800465e <HAL_TIM_Base_Start_IT>
 8002216:	4603      	mov	r3, r0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3730      	adds	r7, #48	; 0x30
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	431bde83 	.word	0x431bde83
 800222c:	20004254 	.word	0x20004254
 8002230:	40000c00 	.word	0x40000c00

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <NMI_Handler+0x4>

0800223a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002264:	2004      	movs	r0, #4
 8002266:	f001 fd49 	bl	8003cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <CAN1_TX_IRQHandler+0x10>)
 8002276:	f001 f858 	bl	800332a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000418c 	.word	0x2000418c

08002284 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <CAN1_RX0_IRQHandler+0x10>)
 800228a:	f001 f84e 	bl	800332a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000418c 	.word	0x2000418c

08002298 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800229e:	f002 fa6b 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20004294 	.word	0x20004294

080022ac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80022b2:	f002 fa61 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200042d4 	.word	0x200042d4

080022c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM5_IRQHandler+0x10>)
 80022c6:	f002 fa57 	bl	8004778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20004254 	.word	0x20004254

080022d4 <_read>:
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fa7b 	bl	8002824 <__io_putchar>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	2300      	movs	r3, #0
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	2301      	movs	r3, #1
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	2300      	movs	r3, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
 80023e0:	f004 fd96 	bl	8006f10 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20030000 	.word	0x20030000
 8002410:	00000400 	.word	0x00000400
 8002414:	200002e8 	.word	0x200002e8
 8002418:	200043a0 	.word	0x200043a0

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <SystemInit+0x28>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <SystemInit+0x28>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SystemInit+0x28>)
 8002432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002436:	609a      	str	r2, [r3, #8]
#endif
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244e:	f107 0320 	add.w	r3, r7, #32
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	615a      	str	r2, [r3, #20]
 8002468:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <MX_TIM4_Init+0xc4>)
 800246c:	4a28      	ldr	r2, [pc, #160]	; (8002510 <MX_TIM4_Init+0xc8>)
 800246e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <MX_TIM4_Init+0xc4>)
 8002472:	2253      	movs	r2, #83	; 0x53
 8002474:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <MX_TIM4_Init+0xc4>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <MX_TIM4_Init+0xc4>)
 800247e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002482:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <MX_TIM4_Init+0xc4>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <MX_TIM4_Init+0xc4>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002490:	481e      	ldr	r0, [pc, #120]	; (800250c <MX_TIM4_Init+0xc4>)
 8002492:	f002 f908 	bl	80046a6 <HAL_TIM_PWM_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800249c:	f7ff fe40 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024a8:	f107 0320 	add.w	r3, r7, #32
 80024ac:	4619      	mov	r1, r3
 80024ae:	4817      	ldr	r0, [pc, #92]	; (800250c <MX_TIM4_Init+0xc4>)
 80024b0:	f002 fdce 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024ba:	f7ff fe31 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024be:	2360      	movs	r3, #96	; 0x60
 80024c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80024c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2200      	movs	r2, #0
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	; (800250c <MX_TIM4_Init+0xc4>)
 80024d8:	f002 fa56 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024e2:	f7ff fe1d 	bl	8002120 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2208      	movs	r2, #8
 80024ea:	4619      	mov	r1, r3
 80024ec:	4807      	ldr	r0, [pc, #28]	; (800250c <MX_TIM4_Init+0xc4>)
 80024ee:	f002 fa4b 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80024f8:	f7ff fe12 	bl	8002120 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <MX_TIM4_Init+0xc4>)
 80024fe:	f000 f92f 	bl	8002760 <HAL_TIM_MspPostInit>

}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20004040 	.word	0x20004040
 8002510:	40000800 	.word	0x40000800

08002514 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	615a      	str	r2, [r3, #20]
 800252a:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_TIM12_Init+0x84>)
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <MX_TIM12_Init+0x88>)
 8002530:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_TIM12_Init+0x84>)
 8002534:	2223      	movs	r2, #35	; 0x23
 8002536:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_TIM12_Init+0x84>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_TIM12_Init+0x84>)
 8002540:	f242 720f 	movw	r2, #9999	; 0x270f
 8002544:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <MX_TIM12_Init+0x84>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_TIM12_Init+0x84>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <MX_TIM12_Init+0x84>)
 8002554:	f002 f8a7 	bl	80046a6 <HAL_TIM_PWM_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800255e:	f7ff fddf 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	2360      	movs	r3, #96	; 0x60
 8002564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	4619      	mov	r1, r3
 8002578:	4807      	ldr	r0, [pc, #28]	; (8002598 <MX_TIM12_Init+0x84>)
 800257a:	f002 fa05 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002584:	f7ff fdcc 	bl	8002120 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002588:	4803      	ldr	r0, [pc, #12]	; (8002598 <MX_TIM12_Init+0x84>)
 800258a:	f000 f8e9 	bl	8002760 <HAL_TIM_MspPostInit>

}
 800258e:	bf00      	nop
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200041f4 	.word	0x200041f4
 800259c:	40001800 	.word	0x40001800

080025a0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025a6:	4a0f      	ldr	r2, [pc, #60]	; (80025e4 <MX_TIM13_Init+0x44>)
 80025a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025ac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80025b0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80025be:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80025cc:	4804      	ldr	r0, [pc, #16]	; (80025e0 <MX_TIM13_Init+0x40>)
 80025ce:	f002 f81b 	bl	8004608 <HAL_TIM_Base_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80025d8:	f7ff fda2 	bl	8002120 <Error_Handler>
  }

}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20004294 	.word	0x20004294
 80025e4:	40001c00 	.word	0x40001c00

080025e8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_TIM14_Init+0x40>)
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <MX_TIM14_Init+0x44>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <MX_TIM14_Init+0x40>)
 80025f4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80025f8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <MX_TIM14_Init+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_TIM14_Init+0x40>)
 8002602:	f242 720f 	movw	r2, #9999	; 0x270f
 8002606:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <MX_TIM14_Init+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_TIM14_Init+0x40>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_TIM14_Init+0x40>)
 8002616:	f001 fff7 	bl	8004608 <HAL_TIM_Base_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002620:	f7ff fd7e 	bl	8002120 <Error_Handler>
  }

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200042d4 	.word	0x200042d4
 800262c:	40002000 	.word	0x40002000

08002630 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <HAL_TIM_PWM_MspInit+0x64>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_TIM_PWM_MspInit+0x68>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	4a13      	ldr	r2, [pc, #76]	; (8002698 <HAL_TIM_PWM_MspInit+0x68>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6413      	str	r3, [r2, #64]	; 0x40
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_TIM_PWM_MspInit+0x68>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800265e:	e012      	b.n	8002686 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_TIM_PWM_MspInit+0x6c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10d      	bne.n	8002686 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_TIM_PWM_MspInit+0x68>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_TIM_PWM_MspInit+0x68>)
 8002674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_TIM_PWM_MspInit+0x68>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40000800 	.word	0x40000800
 8002698:	40023800 	.word	0x40023800
 800269c:	40001800 	.word	0x40001800

080026a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a29      	ldr	r2, [pc, #164]	; (8002754 <HAL_TIM_Base_MspInit+0xb4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d116      	bne.n	80026e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2105      	movs	r1, #5
 80026d2:	202c      	movs	r0, #44	; 0x2c
 80026d4:	f001 f90a 	bl	80038ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80026d8:	202c      	movs	r0, #44	; 0x2c
 80026da:	f001 f923 	bl	8003924 <HAL_NVIC_EnableIRQ>
 80026de:	e01a      	b.n	8002716 <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_TIM_Base_MspInit+0xbc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d115      	bne.n	8002716 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2105      	movs	r1, #5
 800270a:	202d      	movs	r0, #45	; 0x2d
 800270c:	f001 f8ee 	bl	80038ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002710:	202d      	movs	r0, #45	; 0x2d
 8002712:	f001 f907 	bl	8003924 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_TIM_Base_MspInit+0xb4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d115      	bne.n	800274c <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_TIM_Base_MspInit+0xb8>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2101      	movs	r1, #1
 8002740:	202c      	movs	r0, #44	; 0x2c
 8002742:	f001 f8d3 	bl	80038ec <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002746:	202c      	movs	r0, #44	; 0x2c
 8002748:	f001 f8ec 	bl	8003924 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800274c:	bf00      	nop
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40001c00 	.word	0x40001c00
 8002758:	40023800 	.word	0x40023800
 800275c:	40002000 	.word	0x40002000

08002760 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a24      	ldr	r2, [pc, #144]	; (8002810 <HAL_TIM_MspPostInit+0xb0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d11f      	bne.n	80027c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a22      	ldr	r2, [pc, #136]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 800279e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027b0:	2302      	movs	r3, #2
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	4619      	mov	r1, r3
 80027ba:	4817      	ldr	r0, [pc, #92]	; (8002818 <HAL_TIM_MspPostInit+0xb8>)
 80027bc:	f001 f8c0 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80027c0:	e022      	b.n	8002808 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_TIM_MspPostInit+0xbc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d11d      	bne.n	8002808 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 80027d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027da:	6313      	str	r3, [r2, #48]	; 0x30
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_TIM_MspPostInit+0xb4>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027e8:	2340      	movs	r3, #64	; 0x40
 80027ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027f8:	2309      	movs	r3, #9
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	4619      	mov	r1, r3
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <HAL_TIM_MspPostInit+0xc0>)
 8002804:	f001 f89c 	bl	8003940 <HAL_GPIO_Init>
}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40000800 	.word	0x40000800
 8002814:	40023800 	.word	0x40023800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40001800 	.word	0x40001800
 8002820:	40021c00 	.word	0x40021c00

08002824 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 800282c:	1d39      	adds	r1, r7, #4
 800282e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002832:	2201      	movs	r2, #1
 8002834:	4803      	ldr	r0, [pc, #12]	; (8002844 <__io_putchar+0x20>)
 8002836:	f002 fce8 	bl	800520a <HAL_UART_Transmit>

  return ch;
 800283a:	687b      	ldr	r3, [r7, #4]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20004354 	.word	0x20004354

08002848 <MX_UART7_Init>:
// For RM competition and latest A type board, use huart7
UART_HandleTypeDef husart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <MX_UART7_Init+0x4c>)
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <MX_UART7_Init+0x50>)
 8002850:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <MX_UART7_Init+0x4c>)
 8002854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002858:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <MX_UART7_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <MX_UART7_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <MX_UART7_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <MX_UART7_Init+0x4c>)
 800286e:	220c      	movs	r2, #12
 8002870:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <MX_UART7_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <MX_UART7_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_UART7_Init+0x4c>)
 8002880:	f002 fc76 	bl	8005170 <HAL_UART_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800288a:	f7ff fc49 	bl	8002120 <Error_Handler>
  }

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20004354 	.word	0x20004354
 8002898:	40007800 	.word	0x40007800

0800289c <MX_USART6_Init>:

/* USART6 init function */
void MX_USART6_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0

  husart6.Instance = USART6;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <MX_USART6_Init+0x50>)
 80028a4:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028ac:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = UART_STOPBITS_1;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = UART_PARITY_NONE;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = UART_MODE_TX_RX;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028c2:	220c      	movs	r2, #12
 80028c4:	615a      	str	r2, [r3, #20]
  husart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  husart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&husart6) != HAL_OK)
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_USART6_Init+0x4c>)
 80028d4:	f002 fc4c 	bl	8005170 <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART6_Init+0x46>
  {
    Error_Handler();
 80028de:	f7ff fc1f 	bl	8002120 <Error_Handler>
  }

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20004314 	.word	0x20004314
 80028ec:	40011400 	.word	0x40011400

080028f0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08c      	sub	sp, #48	; 0x30
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <HAL_UART_MspInit+0xe8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12c      	bne.n	800296c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_UART_MspInit+0xec>)
 800291c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a29      	ldr	r2, [pc, #164]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002938:	f043 0310 	orr.w	r3, r3, #16
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800294a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800294e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002954:	2301      	movs	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800295c:	2308      	movs	r3, #8
 800295e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	481e      	ldr	r0, [pc, #120]	; (80029e0 <HAL_UART_MspInit+0xf0>)
 8002968:	f000 ffea 	bl	8003940 <HAL_GPIO_Init>
  }

  if(uartHandle->Instance==USART6)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_UART_MspInit+0xf4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12c      	bne.n	80029d0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
	/* UART7 clock enable */
	__HAL_RCC_USART6_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_UART_MspInit+0xec>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_UART_MspInit+0xec>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_UART_MspInit+0xec>)
 800299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <HAL_UART_MspInit+0xec>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
	/**USART6 GPIO Configuration
	  PG14     ------> USART6_TX
	  PG9     ------> USART6_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80029ae:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80029b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029bc:	2303      	movs	r3, #3
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029c0:	2308      	movs	r3, #8
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029c4:	f107 031c 	add.w	r3, r7, #28
 80029c8:	4619      	mov	r1, r3
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <HAL_UART_MspInit+0xf8>)
 80029cc:	f000 ffb8 	bl	8003940 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 80029d0:	bf00      	nop
 80029d2:	3730      	adds	r7, #48	; 0x30
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40007800 	.word	0x40007800
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	40021800 	.word	0x40021800

080029ec <Reset_Handler>:
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x14>
 80029f0:	2100      	movs	r1, #0
 80029f2:	e003      	b.n	80029fc <LoopCopyDataInit>

080029f4 <CopyDataInit>:
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <LoopFillZerobss+0x18>)
 80029f6:	585b      	ldr	r3, [r3, r1]
 80029f8:	5043      	str	r3, [r0, r1]
 80029fa:	3104      	adds	r1, #4

080029fc <LoopCopyDataInit>:
 80029fc:	480b      	ldr	r0, [pc, #44]	; (8002a2c <LoopFillZerobss+0x1c>)
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <LoopFillZerobss+0x20>)
 8002a00:	1842      	adds	r2, r0, r1
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d3f6      	bcc.n	80029f4 <CopyDataInit>
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x24>)
 8002a08:	e002      	b.n	8002a10 <LoopFillZerobss>

08002a0a <FillZerobss>:
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f842 3b04 	str.w	r3, [r2], #4

08002a10 <LoopFillZerobss>:
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <LoopFillZerobss+0x28>)
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d3f9      	bcc.n	8002a0a <FillZerobss>
 8002a16:	f7ff fd01 	bl	800241c <SystemInit>
 8002a1a:	f004 fa7f 	bl	8006f1c <__libc_init_array>
 8002a1e:	f7ff fac5 	bl	8001fac <main>
 8002a22:	4770      	bx	lr
 8002a24:	20030000 	.word	0x20030000
 8002a28:	08008028 	.word	0x08008028
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000074 	.word	0x20000074
 8002a34:	20000074 	.word	0x20000074
 8002a38:	2000439c 	.word	0x2000439c

08002a3c <ADC_IRQHandler>:
 8002a3c:	e7fe      	b.n	8002a3c <ADC_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 ff34 	bl	80038d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7ff fb86 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fb58 	bl	8002128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000008 	.word	0x20000008
 8002aa8:	20004394 	.word	0x20004394

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20004394 	.word	0x20004394

08002ac4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0ed      	b.n	8002cb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe ffea 	bl	8001abc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0202 	bic.w	r2, r2, #2
 8002af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af8:	f7ff ffd8 	bl	8002aac <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002afe:	e012      	b.n	8002b26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b00:	f7ff ffd4 	bl	8002aac <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b0a      	cmp	r3, #10
 8002b0c:	d90b      	bls.n	8002b26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0c5      	b.n	8002cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b44:	f7ff ffb2 	bl	8002aac <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b4a:	e012      	b.n	8002b72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b4c:	f7ff ffae 	bl	8002aac <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	d90b      	bls.n	8002b72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2205      	movs	r2, #5
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e09f      	b.n	8002cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0e5      	beq.n	8002b4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7e1b      	ldrb	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e007      	b.n	8002baa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7e5b      	ldrb	r3, [r3, #25]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d108      	bne.n	8002bc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e007      	b.n	8002bd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e9b      	ldrb	r3, [r3, #26]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d108      	bne.n	8002bee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e007      	b.n	8002bfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0220 	bic.w	r2, r2, #32
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7edb      	ldrb	r3, [r3, #27]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d108      	bne.n	8002c18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0210 	bic.w	r2, r2, #16
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e007      	b.n	8002c28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0210 	orr.w	r2, r2, #16
 8002c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7f1b      	ldrb	r3, [r3, #28]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d108      	bne.n	8002c42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0208 	orr.w	r2, r2, #8
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e007      	b.n	8002c52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7f5b      	ldrb	r3, [r3, #29]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0204 	orr.w	r2, r2, #4
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0204 	bic.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d003      	beq.n	8002ce2 <HAL_CAN_ConfigFilter+0x26>
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f040 80be 	bne.w	8002e5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_CAN_ConfigFilter+0x1bc>)
 8002ce4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	021b      	lsls	r3, r3, #8
 8002d12:	431a      	orrs	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	401a      	ands	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d123      	bne.n	8002d8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3248      	adds	r2, #72	; 0x48
 8002d6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	3348      	adds	r3, #72	; 0x48
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d122      	bne.n	8002dda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002db4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3248      	adds	r2, #72	; 0x48
 8002dba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dd0:	6979      	ldr	r1, [r7, #20]
 8002dd2:	3348      	adds	r3, #72	; 0x48
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	43db      	mvns	r3, r3
 8002dec:	401a      	ands	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002df4:	e007      	b.n	8002e06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	401a      	ands	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e20:	e007      	b.n	8002e32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e50:	f023 0201 	bic.w	r2, r3, #1
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e006      	b.n	8002e6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40006400 	.word	0x40006400

08002e7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d12e      	bne.n	8002eee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7ff fe00 	bl	8002aac <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eae:	e012      	b.n	8002ed6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb0:	f7ff fdfc 	bl	8002aac <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d90b      	bls.n	8002ed6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2205      	movs	r2, #5
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e012      	b.n	8002efc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e5      	bne.n	8002eb0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e006      	b.n	8002efc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
  }
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d003      	beq.n	8002f30 <HAL_CAN_AddTxMessage+0x2c>
 8002f28:	7ffb      	ldrb	r3, [r7, #31]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	f040 80b8 	bne.w	80030a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80a0 	beq.w	8003090 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	0e1b      	lsrs	r3, r3, #24
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d907      	bls.n	8002f70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e09e      	b.n	80030ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f70:	2201      	movs	r2, #1
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	409a      	lsls	r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10d      	bne.n	8002f9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	6809      	ldr	r1, [r1, #0]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3318      	adds	r3, #24
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	440b      	add	r3, r1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e00f      	b.n	8002fbe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	440b      	add	r3, r1
 8002fbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3318      	adds	r3, #24
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	440b      	add	r3, r1
 8002fce:	3304      	adds	r3, #4
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	7d1b      	ldrb	r3, [r3, #20]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d111      	bne.n	8002ffe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6811      	ldr	r1, [r2, #0]
 8002fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3318      	adds	r3, #24
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3307      	adds	r3, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	061a      	lsls	r2, r3, #24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3306      	adds	r3, #6
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3305      	adds	r3, #5
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	4313      	orrs	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	3204      	adds	r2, #4
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	4610      	mov	r0, r2
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6811      	ldr	r1, [r2, #0]
 8003026:	ea43 0200 	orr.w	r2, r3, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	440b      	add	r3, r1
 8003030:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003034:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3303      	adds	r3, #3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	061a      	lsls	r2, r3, #24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3302      	adds	r3, #2
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3301      	adds	r3, #1
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	4313      	orrs	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	4610      	mov	r0, r2
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	6811      	ldr	r1, [r2, #0]
 800305c:	ea43 0200 	orr.w	r2, r3, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	440b      	add	r3, r1
 8003066:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800306a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3318      	adds	r3, #24
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4413      	add	r3, r2
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	6811      	ldr	r1, [r2, #0]
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3318      	adds	r3, #24
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	440b      	add	r3, r1
 800308a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e00e      	b.n	80030ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e006      	b.n	80030ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d003      	beq.n	80030de <HAL_CAN_GetRxMessage+0x24>
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f040 80f3 	bne.w	80032c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10e      	bne.n	8003102 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0e7      	b.n	80032d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0d8      	b.n	80032d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	331b      	adds	r3, #27
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4413      	add	r3, r2
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0204 	and.w	r2, r3, #4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	331b      	adds	r3, #27
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4413      	add	r3, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0d5b      	lsrs	r3, r3, #21
 800314e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e00b      	b.n	8003170 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	331b      	adds	r3, #27
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	4413      	add	r3, r2
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	08db      	lsrs	r3, r3, #3
 8003168:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	331b      	adds	r3, #27
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0202 	and.w	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	331b      	adds	r3, #27
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 020f 	and.w	r2, r3, #15
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	331b      	adds	r3, #27
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	3304      	adds	r3, #4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	331b      	adds	r3, #27
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0c1b      	lsrs	r3, r3, #16
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0a1a      	lsrs	r2, r3, #8
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0c1a      	lsrs	r2, r3, #16
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3302      	adds	r3, #2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4413      	add	r3, r2
 8003222:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0e1a      	lsrs	r2, r3, #24
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	3303      	adds	r3, #3
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	3304      	adds	r3, #4
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0a1a      	lsrs	r2, r3, #8
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	3305      	adds	r3, #5
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	4413      	add	r3, r2
 800326e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0c1a      	lsrs	r2, r3, #16
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	3306      	adds	r3, #6
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4413      	add	r3, r2
 8003288:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0e1a      	lsrs	r2, r3, #24
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	3307      	adds	r3, #7
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0220 	orr.w	r2, r2, #32
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	e007      	b.n	80032c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0220 	orr.w	r2, r2, #32
 80032be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e006      	b.n	80032d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <HAL_CAN_ActivateNotification+0x1e>
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d109      	bne.n	8003310 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6959      	ldr	r1, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e006      	b.n	800331e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08a      	sub	sp, #40	; 0x28
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d07c      	beq.n	800346a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d023      	beq.n	80033c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2201      	movs	r2, #1
 8003380:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f97d 	bl	800368c <HAL_CAN_TxMailbox0CompleteCallback>
 8003392:	e016      	b.n	80033c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e00c      	b.n	80033c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	e002      	b.n	80033c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f983 	bl	80036c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d024      	beq.n	8003416 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f95d 	bl	80036a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80033e6:	e016      	b.n	8003416 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e00c      	b.n	8003416 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	e002      	b.n	8003416 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f963 	bl	80036dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d024      	beq.n	800346a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f93d 	bl	80036b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800343a:	e016      	b.n	800346a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
 800344e:	e00c      	b.n	800346a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
 8003462:	e002      	b.n	800346a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f943 	bl	80036f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003484:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2210      	movs	r2, #16
 800348c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2208      	movs	r2, #8
 80034a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f92a 	bl	8003704 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fe fb93 	bl	8001bf4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f90c 	bl	800372c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8f3 	bl	8003718 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2210      	movs	r2, #16
 800354c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8f6 	bl	8003740 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2208      	movs	r2, #8
 800356e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8ef 	bl	8003754 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d075      	beq.n	800366c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d06c      	beq.n	8003664 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	f043 0302 	orr.w	r3, r3, #2
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d03d      	beq.n	8003664 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d038      	beq.n	8003664 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d017      	beq.n	800362c <HAL_CAN_IRQHandler+0x302>
 80035fc:	2b30      	cmp	r3, #48	; 0x30
 80035fe:	d804      	bhi.n	800360a <HAL_CAN_IRQHandler+0x2e0>
 8003600:	2b10      	cmp	r3, #16
 8003602:	d009      	beq.n	8003618 <HAL_CAN_IRQHandler+0x2ee>
 8003604:	2b20      	cmp	r3, #32
 8003606:	d00c      	beq.n	8003622 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003608:	e024      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800360a:	2b50      	cmp	r3, #80	; 0x50
 800360c:	d018      	beq.n	8003640 <HAL_CAN_IRQHandler+0x316>
 800360e:	2b60      	cmp	r3, #96	; 0x60
 8003610:	d01b      	beq.n	800364a <HAL_CAN_IRQHandler+0x320>
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d00f      	beq.n	8003636 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003616:	e01d      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f043 0308 	orr.w	r3, r3, #8
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003620:	e018      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f043 0310 	orr.w	r3, r3, #16
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800362a:	e013      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	f043 0320 	orr.w	r3, r3, #32
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003634:	e00e      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800363e:	e009      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003648:	e004      	b.n	8003654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003652:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003662:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2204      	movs	r2, #4
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f872 	bl	8003768 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	60d3      	str	r3, [r2, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <__NVIC_GetPriorityGrouping+0x18>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0307 	and.w	r3, r3, #7
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db0b      	blt.n	800380a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <__NVIC_EnableIRQ+0x38>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db0a      	blt.n	8003846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	490c      	ldr	r1, [pc, #48]	; (8003868 <__NVIC_SetPriority+0x4c>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	440b      	add	r3, r1
 8003840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003844:	e00a      	b.n	800385c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <__NVIC_SetPriority+0x50>)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3b04      	subs	r3, #4
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	440b      	add	r3, r1
 800385a:	761a      	strb	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f1c3 0307 	rsb	r3, r3, #7
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf28      	it	cs
 800388e:	2304      	movcs	r3, #4
 8003890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3304      	adds	r3, #4
 8003896:	2b06      	cmp	r3, #6
 8003898:	d902      	bls.n	80038a0 <NVIC_EncodePriority+0x30>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3b03      	subs	r3, #3
 800389e:	e000      	b.n	80038a2 <NVIC_EncodePriority+0x32>
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	401a      	ands	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	4313      	orrs	r3, r2
         );
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff4c 	bl	800377c <__NVIC_SetPriorityGrouping>
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038fe:	f7ff ff61 	bl	80037c4 <__NVIC_GetPriorityGrouping>
 8003902:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f7ff ffb1 	bl	8003870 <NVIC_EncodePriority>
 800390e:	4602      	mov	r2, r0
 8003910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff80 	bl	800381c <__NVIC_SetPriority>
}
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff54 	bl	80037e0 <__NVIC_EnableIRQ>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e177      	b.n	8003c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	f040 8166 	bne.w	8003c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d00b      	beq.n	800399a <HAL_GPIO_Init+0x5a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d007      	beq.n	800399a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800398e:	2b11      	cmp	r3, #17
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b12      	cmp	r3, #18
 8003998:	d130      	bne.n	80039fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	2203      	movs	r2, #3
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039d0:	2201      	movs	r2, #1
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 0201 	and.w	r2, r3, #1
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0xfc>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b12      	cmp	r3, #18
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80c0 	beq.w	8003c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <HAL_GPIO_Init+0x320>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a64      	ldr	r2, [pc, #400]	; (8003c60 <HAL_GPIO_Init+0x320>)
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b62      	ldr	r3, [pc, #392]	; (8003c60 <HAL_GPIO_Init+0x320>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae2:	4a60      	ldr	r2, [pc, #384]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a57      	ldr	r2, [pc, #348]	; (8003c68 <HAL_GPIO_Init+0x328>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d037      	beq.n	8003b7e <HAL_GPIO_Init+0x23e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a56      	ldr	r2, [pc, #344]	; (8003c6c <HAL_GPIO_Init+0x32c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d031      	beq.n	8003b7a <HAL_GPIO_Init+0x23a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a55      	ldr	r2, [pc, #340]	; (8003c70 <HAL_GPIO_Init+0x330>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02b      	beq.n	8003b76 <HAL_GPIO_Init+0x236>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a54      	ldr	r2, [pc, #336]	; (8003c74 <HAL_GPIO_Init+0x334>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d025      	beq.n	8003b72 <HAL_GPIO_Init+0x232>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a53      	ldr	r2, [pc, #332]	; (8003c78 <HAL_GPIO_Init+0x338>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01f      	beq.n	8003b6e <HAL_GPIO_Init+0x22e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_GPIO_Init+0x33c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d019      	beq.n	8003b6a <HAL_GPIO_Init+0x22a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a51      	ldr	r2, [pc, #324]	; (8003c80 <HAL_GPIO_Init+0x340>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_GPIO_Init+0x226>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a50      	ldr	r2, [pc, #320]	; (8003c84 <HAL_GPIO_Init+0x344>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00d      	beq.n	8003b62 <HAL_GPIO_Init+0x222>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4f      	ldr	r2, [pc, #316]	; (8003c88 <HAL_GPIO_Init+0x348>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <HAL_GPIO_Init+0x21e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <HAL_GPIO_Init+0x34c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_GPIO_Init+0x21a>
 8003b56:	2309      	movs	r3, #9
 8003b58:	e012      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	e010      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	e00e      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e00c      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b66:	2306      	movs	r3, #6
 8003b68:	e00a      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b90:	4934      	ldr	r1, [pc, #208]	; (8003c64 <HAL_GPIO_Init+0x324>)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b9e:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bc2:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bec:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf2:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c16:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c1c:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c40:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <HAL_GPIO_Init+0x350>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	f67f ae84 	bls.w	800395c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	3724      	adds	r7, #36	; 0x24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40013800 	.word	0x40013800
 8003c68:	40020000 	.word	0x40020000
 8003c6c:	40020400 	.word	0x40020400
 8003c70:	40020800 	.word	0x40020800
 8003c74:	40020c00 	.word	0x40020c00
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40021400 	.word	0x40021400
 8003c80:	40021800 	.word	0x40021800
 8003c84:	40021c00 	.word	0x40021c00
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40022400 	.word	0x40022400
 8003c90:	40013c00 	.word	0x40013c00

08003c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb0:	e003      	b.n	8003cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	041a      	lsls	r2, r3, #16
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	401a      	ands	r2, r3
 8003cda:	887b      	ldrh	r3, [r7, #2]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d104      	bne.n	8003cea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d006      	beq.n	8003d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe f908 	bl	8001f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40013c00 	.word	0x40013c00

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e25b      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d075      	beq.n	8003e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	4ba3      	ldr	r3, [pc, #652]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d00c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d56:	4ba0      	ldr	r3, [pc, #640]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d62:	4b9d      	ldr	r3, [pc, #628]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4b99      	ldr	r3, [pc, #612]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d05b      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d157      	bne.n	8003e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e236      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x74>
 8003d92:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a90      	ldr	r2, [pc, #576]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003daa:	4b8b      	ldr	r3, [pc, #556]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a8a      	ldr	r2, [pc, #552]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b88      	ldr	r3, [pc, #544]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a87      	ldr	r2, [pc, #540]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xb0>
 8003dc4:	4b84      	ldr	r3, [pc, #528]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a83      	ldr	r2, [pc, #524]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a80      	ldr	r2, [pc, #512]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fe62 	bl	8002aac <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fe5e 	bl	8002aac <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1fb      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b76      	ldr	r3, [pc, #472]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xc0>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fe4e 	bl	8002aac <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fe4a 	bl	8002aac <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e1e7      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	4b6c      	ldr	r3, [pc, #432]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0xe8>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d11c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b5f      	ldr	r3, [pc, #380]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e1bb      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	4b56      	ldr	r3, [pc, #344]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4952      	ldr	r1, [pc, #328]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	e03a      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b4f      	ldr	r3, [pc, #316]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fe fe03 	bl	8002aac <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eaa:	f7fe fdff 	bl	8002aac <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e19c      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebc:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec8:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4940      	ldr	r1, [pc, #256]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]
 8003edc:	e015      	b.n	8003f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_OscConfig+0x2b0>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fde2 	bl	8002aac <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eec:	f7fe fdde 	bl	8002aac <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e17b      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efe:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d030      	beq.n	8003f78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1e:	4b30      	ldr	r3, [pc, #192]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fe fdc2 	bl	8002aac <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fdbe 	bl	8002aac <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e15b      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x200>
 8003f4a:	e015      	b.n	8003f78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <HAL_RCC_OscConfig+0x2b4>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe fdab 	bl	8002aac <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fda7 	bl	8002aac <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e144      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a0 	beq.w	80040c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d121      	bne.n	8004006 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a07      	ldr	r2, [pc, #28]	; (8003fe4 <HAL_RCC_OscConfig+0x2b8>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fce:	f7fe fd6d 	bl	8002aac <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	e011      	b.n	8003ffa <HAL_RCC_OscConfig+0x2ce>
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	42470000 	.word	0x42470000
 8003fe0:	42470e80 	.word	0x42470e80
 8003fe4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe8:	f7fe fd60 	bl	8002aac <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0fd      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b81      	ldr	r3, [pc, #516]	; (8004200 <HAL_RCC_OscConfig+0x4d4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <HAL_RCC_OscConfig+0x2f0>
 800400e:	4b7d      	ldr	r3, [pc, #500]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a7c      	ldr	r2, [pc, #496]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	e01c      	b.n	8004056 <HAL_RCC_OscConfig+0x32a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b05      	cmp	r3, #5
 8004022:	d10c      	bne.n	800403e <HAL_RCC_OscConfig+0x312>
 8004024:	4b77      	ldr	r3, [pc, #476]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a76      	ldr	r2, [pc, #472]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b74      	ldr	r3, [pc, #464]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a73      	ldr	r2, [pc, #460]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
 800403c:	e00b      	b.n	8004056 <HAL_RCC_OscConfig+0x32a>
 800403e:	4b71      	ldr	r3, [pc, #452]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a70      	ldr	r2, [pc, #448]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
 800404a:	4b6e      	ldr	r3, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	4a6d      	ldr	r2, [pc, #436]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004050:	f023 0304 	bic.w	r3, r3, #4
 8004054:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe fd25 	bl	8002aac <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe fd21 	bl	8002aac <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e0bc      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	4b61      	ldr	r3, [pc, #388]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ee      	beq.n	8004066 <HAL_RCC_OscConfig+0x33a>
 8004088:	e014      	b.n	80040b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408a:	f7fe fd0f 	bl	8002aac <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fe fd0b 	bl	8002aac <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e0a6      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a8:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ee      	bne.n	8004092 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4b52      	ldr	r3, [pc, #328]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a51      	ldr	r2, [pc, #324]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 80040c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8092 	beq.w	80041f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040d0:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d05c      	beq.n	8004196 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d141      	bne.n	8004168 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b48      	ldr	r3, [pc, #288]	; (8004208 <HAL_RCC_OscConfig+0x4dc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe fcdf 	bl	8002aac <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe fcdb 	bl	8002aac <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e078      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004104:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69da      	ldr	r2, [r3, #28]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	019b      	lsls	r3, r3, #6
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	3b01      	subs	r3, #1
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	4933      	ldr	r1, [pc, #204]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800413a:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCC_OscConfig+0x4dc>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe fcb4 	bl	8002aac <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004148:	f7fe fcb0 	bl	8002aac <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e04d      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x41c>
 8004166:	e045      	b.n	80041f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004168:	4b27      	ldr	r3, [pc, #156]	; (8004208 <HAL_RCC_OscConfig+0x4dc>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fe fc9d 	bl	8002aac <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004176:	f7fe fc99 	bl	8002aac <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e036      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004188:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x44a>
 8004194:	e02e      	b.n	80041f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e029      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <HAL_RCC_OscConfig+0x4d8>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d115      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10d      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d106      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40007000 	.word	0x40007000
 8004204:	40023800 	.word	0x40023800
 8004208:	42470060 	.word	0x42470060

0800420c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0cc      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d90c      	bls.n	8004248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b63      	ldr	r3, [pc, #396]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b8      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b50      	ldr	r3, [pc, #320]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	494d      	ldr	r1, [pc, #308]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d044      	beq.n	800432c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d119      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e07f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e06f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e067      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4934      	ldr	r1, [pc, #208]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042fc:	f7fe fbd6 	bl	8002aac <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fe fbd2 	bl	8002aac <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e04f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d20c      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e032      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4916      	ldr	r1, [pc, #88]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	490e      	ldr	r1, [pc, #56]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004392:	f000 f821 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004396:	4601      	mov	r1, r0
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	5cd3      	ldrb	r3, [r2, r3]
 80043a6:	fa21 f303 	lsr.w	r3, r1, r3
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fee4 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08007f68 	.word	0x08007f68
 80043d0:	20000000 	.word	0x20000000
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	2300      	movs	r3, #0
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ee:	4b50      	ldr	r3, [pc, #320]	; (8004530 <HAL_RCC_GetSysClockFreq+0x158>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d007      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x32>
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d008      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x38>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 808d 	bne.w	800451e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b4b      	ldr	r3, [pc, #300]	; (8004534 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004406:	60bb      	str	r3, [r7, #8]
       break;
 8004408:	e08c      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440a:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_RCC_GetSysClockFreq+0x160>)
 800440c:	60bb      	str	r3, [r7, #8]
      break;
 800440e:	e089      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004410:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCC_GetSysClockFreq+0x158>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004418:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441a:	4b45      	ldr	r3, [pc, #276]	; (8004530 <HAL_RCC_GetSysClockFreq+0x158>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004426:	4b42      	ldr	r3, [pc, #264]	; (8004530 <HAL_RCC_GetSysClockFreq+0x158>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	f04f 0400 	mov.w	r4, #0
 8004430:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	ea03 0501 	and.w	r5, r3, r1
 800443c:	ea04 0602 	and.w	r6, r4, r2
 8004440:	4a3d      	ldr	r2, [pc, #244]	; (8004538 <HAL_RCC_GetSysClockFreq+0x160>)
 8004442:	fb02 f106 	mul.w	r1, r2, r6
 8004446:	2200      	movs	r2, #0
 8004448:	fb02 f205 	mul.w	r2, r2, r5
 800444c:	440a      	add	r2, r1
 800444e:	493a      	ldr	r1, [pc, #232]	; (8004538 <HAL_RCC_GetSysClockFreq+0x160>)
 8004450:	fba5 0101 	umull	r0, r1, r5, r1
 8004454:	1853      	adds	r3, r2, r1
 8004456:	4619      	mov	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f04f 0400 	mov.w	r4, #0
 800445e:	461a      	mov	r2, r3
 8004460:	4623      	mov	r3, r4
 8004462:	f7fc fb93 	bl	8000b8c <__aeabi_uldivmod>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	e049      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446e:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_RCC_GetSysClockFreq+0x158>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	099b      	lsrs	r3, r3, #6
 8004474:	f04f 0400 	mov.w	r4, #0
 8004478:	f240 11ff 	movw	r1, #511	; 0x1ff
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	ea03 0501 	and.w	r5, r3, r1
 8004484:	ea04 0602 	and.w	r6, r4, r2
 8004488:	4629      	mov	r1, r5
 800448a:	4632      	mov	r2, r6
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	f04f 0400 	mov.w	r4, #0
 8004494:	0154      	lsls	r4, r2, #5
 8004496:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800449a:	014b      	lsls	r3, r1, #5
 800449c:	4619      	mov	r1, r3
 800449e:	4622      	mov	r2, r4
 80044a0:	1b49      	subs	r1, r1, r5
 80044a2:	eb62 0206 	sbc.w	r2, r2, r6
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	f04f 0400 	mov.w	r4, #0
 80044ae:	0194      	lsls	r4, r2, #6
 80044b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044b4:	018b      	lsls	r3, r1, #6
 80044b6:	1a5b      	subs	r3, r3, r1
 80044b8:	eb64 0402 	sbc.w	r4, r4, r2
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	00e2      	lsls	r2, r4, #3
 80044c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044ca:	00d9      	lsls	r1, r3, #3
 80044cc:	460b      	mov	r3, r1
 80044ce:	4614      	mov	r4, r2
 80044d0:	195b      	adds	r3, r3, r5
 80044d2:	eb44 0406 	adc.w	r4, r4, r6
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	02a2      	lsls	r2, r4, #10
 80044e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80044e4:	0299      	lsls	r1, r3, #10
 80044e6:	460b      	mov	r3, r1
 80044e8:	4614      	mov	r4, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	4621      	mov	r1, r4
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f04f 0400 	mov.w	r4, #0
 80044f4:	461a      	mov	r2, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	f7fc fb48 	bl	8000b8c <__aeabi_uldivmod>
 80044fc:	4603      	mov	r3, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_GetSysClockFreq+0x158>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	3301      	adds	r3, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	60bb      	str	r3, [r7, #8]
      break;
 800451c:	e002      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004520:	60bb      	str	r3, [r7, #8]
      break;
 8004522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004524:	68bb      	ldr	r3, [r7, #8]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400
 8004538:	00b71b00 	.word	0x00b71b00

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000000 	.word	0x20000000

08004554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004558:	f7ff fff0 	bl	800453c <HAL_RCC_GetHCLKFreq>
 800455c:	4601      	mov	r1, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4a03      	ldr	r2, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800456a:	5cd3      	ldrb	r3, [r2, r3]
 800456c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08007f78 	.word	0x08007f78

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004580:	f7ff ffdc 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004584:	4601      	mov	r1, r0
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	08007f78 	.word	0x08007f78

080045a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	220f      	movs	r2, #15
 80045b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0203 	and.w	r2, r3, #3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_GetClockConfig+0x5c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <HAL_RCC_GetClockConfig+0x60>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40023c00 	.word	0x40023c00

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e01d      	b.n	8004656 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe f836 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fa8c 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d007      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e01d      	b.n	80046f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d106      	bne.n	80046d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fd ffaf 	bl	8002630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f000 fa3d 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fc78 	bl	8005004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_TIM_PWM_Start+0x74>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_PWM_Start+0x2c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a14      	ldr	r2, [pc, #80]	; (8004774 <HAL_TIM_PWM_Start+0x78>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_TIM_PWM_Start+0x30>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_TIM_PWM_Start+0x32>
 800472c:	2300      	movs	r3, #0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b06      	cmp	r3, #6
 8004752:	d007      	beq.n	8004764 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40010400 	.word	0x40010400

08004778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0202 	mvn.w	r2, #2
 80047a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f9b4 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9a6 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f9b7 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d122      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d11b      	bne.n	8004828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0204 	mvn.w	r2, #4
 80047f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f98a 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 8004814:	e005      	b.n	8004822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f97c 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f98d 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b08      	cmp	r3, #8
 8004834:	d122      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b08      	cmp	r3, #8
 8004842:	d11b      	bne.n	800487c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0208 	mvn.w	r2, #8
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2204      	movs	r2, #4
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f960 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f952 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f963 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b10      	cmp	r3, #16
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b10      	cmp	r3, #16
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0210 	mvn.w	r2, #16
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2208      	movs	r2, #8
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f936 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f928 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f939 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d10e      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0201 	mvn.w	r2, #1
 80048f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fbec 	bl	80020d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b80      	cmp	r3, #128	; 0x80
 8004908:	d10e      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d107      	bne.n	8004928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fc1a 	bl	800515c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d107      	bne.n	8004954 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8fe 	bl	8004b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b20      	cmp	r3, #32
 8004960:	d10e      	bne.n	8004980 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b20      	cmp	r3, #32
 800496e:	d107      	bne.n	8004980 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0220 	mvn.w	r2, #32
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fbe4 	bl	8005148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e0b4      	b.n	8004b0c <HAL_TIM_PWM_ConfigChannel+0x184>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	f200 809f 	bhi.w	8004af8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80049ba:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004af9 	.word	0x08004af9
 80049c8:	08004af9 	.word	0x08004af9
 80049cc:	08004af9 	.word	0x08004af9
 80049d0:	08004a35 	.word	0x08004a35
 80049d4:	08004af9 	.word	0x08004af9
 80049d8:	08004af9 	.word	0x08004af9
 80049dc:	08004af9 	.word	0x08004af9
 80049e0:	08004a77 	.word	0x08004a77
 80049e4:	08004af9 	.word	0x08004af9
 80049e8:	08004af9 	.word	0x08004af9
 80049ec:	08004af9 	.word	0x08004af9
 80049f0:	08004ab7 	.word	0x08004ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f952 	bl	8004ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0208 	orr.w	r2, r2, #8
 8004a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0204 	bic.w	r2, r2, #4
 8004a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6999      	ldr	r1, [r3, #24]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	619a      	str	r2, [r3, #24]
      break;
 8004a32:	e062      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f9a2 	bl	8004d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6999      	ldr	r1, [r3, #24]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	619a      	str	r2, [r3, #24]
      break;
 8004a74:	e041      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 f9f7 	bl	8004e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0208 	orr.w	r2, r2, #8
 8004a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0204 	bic.w	r2, r2, #4
 8004aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69d9      	ldr	r1, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	61da      	str	r2, [r3, #28]
      break;
 8004ab4:	e021      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fa4b 	bl	8004f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69d9      	ldr	r1, [r3, #28]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	021a      	lsls	r2, r3, #8
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	61da      	str	r2, [r3, #28]
      break;
 8004af6:	e000      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004af8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a40      	ldr	r2, [pc, #256]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d00f      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3a      	ldr	r2, [pc, #232]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d02b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d027      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d023      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01f      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d017      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <TIM_Base_SetConfig+0x134>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <TIM_Base_SetConfig+0x138>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <TIM_Base_SetConfig+0x13c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40010000 	.word	0x40010000
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40010400 	.word	0x40010400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800
 8004c98:	40001800 	.word	0x40001800
 8004c9c:	40001c00 	.word	0x40001c00
 8004ca0:	40002000 	.word	0x40002000

08004ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0201 	bic.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 0302 	bic.w	r3, r3, #2
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a20      	ldr	r2, [pc, #128]	; (8004d7c <TIM_OC1_SetConfig+0xd8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_OC1_SetConfig+0x64>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <TIM_OC1_SetConfig+0xdc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10c      	bne.n	8004d22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0308 	bic.w	r3, r3, #8
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <TIM_OC1_SetConfig+0xd8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC1_SetConfig+0x8e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a14      	ldr	r2, [pc, #80]	; (8004d80 <TIM_OC1_SetConfig+0xdc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d111      	bne.n	8004d56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40010400 	.word	0x40010400

08004d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0210 	bic.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0320 	bic.w	r3, r3, #32
 8004dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <TIM_OC2_SetConfig+0xe4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_OC2_SetConfig+0x68>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <TIM_OC2_SetConfig+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d10d      	bne.n	8004e08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <TIM_OC2_SetConfig+0xe4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC2_SetConfig+0x94>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <TIM_OC2_SetConfig+0xe8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d113      	bne.n	8004e40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40010400 	.word	0x40010400

08004e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <TIM_OC3_SetConfig+0xe0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_OC3_SetConfig+0x66>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <TIM_OC3_SetConfig+0xe4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10d      	bne.n	8004ef2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <TIM_OC3_SetConfig+0xe0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_OC3_SetConfig+0x92>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <TIM_OC3_SetConfig+0xe4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d113      	bne.n	8004f2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40010400 	.word	0x40010400

08004f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	031b      	lsls	r3, r3, #12
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <TIM_OC4_SetConfig+0xa4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC4_SetConfig+0x68>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a11      	ldr	r2, [pc, #68]	; (8005000 <TIM_OC4_SetConfig+0xa8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d109      	bne.n	8004fd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40010400 	.word	0x40010400

08005004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e05a      	b.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1a      	ldr	r2, [pc, #104]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a17      	ldr	r2, [pc, #92]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10c      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800

08005148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e03f      	b.n	8005202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fd fbaa 	bl	80028f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f90b 	bl	80053d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695a      	ldr	r2, [r3, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af02      	add	r7, sp, #8
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	f040 8083 	bne.w	8005332 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Transmit+0x2e>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e07b      	b.n	8005334 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Transmit+0x40>
 8005246:	2302      	movs	r3, #2
 8005248:	e074      	b.n	8005334 <HAL_UART_Transmit+0x12a>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2221      	movs	r2, #33	; 0x21
 800525c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005260:	f7fd fc24 	bl	8002aac <HAL_GetTick>
 8005264:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800527a:	e042      	b.n	8005302 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	d122      	bne.n	80052da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f84c 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e042      	b.n	8005334 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	3302      	adds	r3, #2
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	e017      	b.n	8005302 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3301      	adds	r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	e013      	b.n	8005302 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f829 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e01f      	b.n	8005334 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	60ba      	str	r2, [r7, #8]
 80052fa:	781a      	ldrb	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1b7      	bne.n	800527c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f810 	bl	800533c <UART_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e006      	b.n	8005334 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	e02c      	b.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d028      	beq.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <UART_WaitOnFlagUntilTimeout+0x30>
 800535c:	f7fd fba6 	bl	8002aac <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	d21d      	bcs.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800537a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e00f      	b.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d0c3      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005412:	f023 030c 	bic.w	r3, r3, #12
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	430b      	orrs	r3, r1
 800541e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	f040 818b 	bne.w	8005758 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4ac1      	ldr	r2, [pc, #772]	; (800574c <UART_SetConfig+0x37c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d005      	beq.n	8005458 <UART_SetConfig+0x88>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4abf      	ldr	r2, [pc, #764]	; (8005750 <UART_SetConfig+0x380>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f040 80bd 	bne.w	80055d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005458:	f7ff f890 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 800545c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	461d      	mov	r5, r3
 8005462:	f04f 0600 	mov.w	r6, #0
 8005466:	46a8      	mov	r8, r5
 8005468:	46b1      	mov	r9, r6
 800546a:	eb18 0308 	adds.w	r3, r8, r8
 800546e:	eb49 0409 	adc.w	r4, r9, r9
 8005472:	4698      	mov	r8, r3
 8005474:	46a1      	mov	r9, r4
 8005476:	eb18 0805 	adds.w	r8, r8, r5
 800547a:	eb49 0906 	adc.w	r9, r9, r6
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800548a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800548e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005492:	4688      	mov	r8, r1
 8005494:	4691      	mov	r9, r2
 8005496:	eb18 0005 	adds.w	r0, r8, r5
 800549a:	eb49 0106 	adc.w	r1, r9, r6
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	461d      	mov	r5, r3
 80054a4:	f04f 0600 	mov.w	r6, #0
 80054a8:	196b      	adds	r3, r5, r5
 80054aa:	eb46 0406 	adc.w	r4, r6, r6
 80054ae:	461a      	mov	r2, r3
 80054b0:	4623      	mov	r3, r4
 80054b2:	f7fb fb6b 	bl	8000b8c <__aeabi_uldivmod>
 80054b6:	4603      	mov	r3, r0
 80054b8:	460c      	mov	r4, r1
 80054ba:	461a      	mov	r2, r3
 80054bc:	4ba5      	ldr	r3, [pc, #660]	; (8005754 <UART_SetConfig+0x384>)
 80054be:	fba3 2302 	umull	r2, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	461d      	mov	r5, r3
 80054cc:	f04f 0600 	mov.w	r6, #0
 80054d0:	46a9      	mov	r9, r5
 80054d2:	46b2      	mov	sl, r6
 80054d4:	eb19 0309 	adds.w	r3, r9, r9
 80054d8:	eb4a 040a 	adc.w	r4, sl, sl
 80054dc:	4699      	mov	r9, r3
 80054de:	46a2      	mov	sl, r4
 80054e0:	eb19 0905 	adds.w	r9, r9, r5
 80054e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80054e8:	f04f 0100 	mov.w	r1, #0
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054fc:	4689      	mov	r9, r1
 80054fe:	4692      	mov	sl, r2
 8005500:	eb19 0005 	adds.w	r0, r9, r5
 8005504:	eb4a 0106 	adc.w	r1, sl, r6
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	461d      	mov	r5, r3
 800550e:	f04f 0600 	mov.w	r6, #0
 8005512:	196b      	adds	r3, r5, r5
 8005514:	eb46 0406 	adc.w	r4, r6, r6
 8005518:	461a      	mov	r2, r3
 800551a:	4623      	mov	r3, r4
 800551c:	f7fb fb36 	bl	8000b8c <__aeabi_uldivmod>
 8005520:	4603      	mov	r3, r0
 8005522:	460c      	mov	r4, r1
 8005524:	461a      	mov	r2, r3
 8005526:	4b8b      	ldr	r3, [pc, #556]	; (8005754 <UART_SetConfig+0x384>)
 8005528:	fba3 1302 	umull	r1, r3, r3, r2
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	2164      	movs	r1, #100	; 0x64
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	3332      	adds	r3, #50	; 0x32
 800553a:	4a86      	ldr	r2, [pc, #536]	; (8005754 <UART_SetConfig+0x384>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005548:	4498      	add	r8, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	461d      	mov	r5, r3
 800554e:	f04f 0600 	mov.w	r6, #0
 8005552:	46a9      	mov	r9, r5
 8005554:	46b2      	mov	sl, r6
 8005556:	eb19 0309 	adds.w	r3, r9, r9
 800555a:	eb4a 040a 	adc.w	r4, sl, sl
 800555e:	4699      	mov	r9, r3
 8005560:	46a2      	mov	sl, r4
 8005562:	eb19 0905 	adds.w	r9, r9, r5
 8005566:	eb4a 0a06 	adc.w	sl, sl, r6
 800556a:	f04f 0100 	mov.w	r1, #0
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800557a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800557e:	4689      	mov	r9, r1
 8005580:	4692      	mov	sl, r2
 8005582:	eb19 0005 	adds.w	r0, r9, r5
 8005586:	eb4a 0106 	adc.w	r1, sl, r6
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	461d      	mov	r5, r3
 8005590:	f04f 0600 	mov.w	r6, #0
 8005594:	196b      	adds	r3, r5, r5
 8005596:	eb46 0406 	adc.w	r4, r6, r6
 800559a:	461a      	mov	r2, r3
 800559c:	4623      	mov	r3, r4
 800559e:	f7fb faf5 	bl	8000b8c <__aeabi_uldivmod>
 80055a2:	4603      	mov	r3, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	461a      	mov	r2, r3
 80055a8:	4b6a      	ldr	r3, [pc, #424]	; (8005754 <UART_SetConfig+0x384>)
 80055aa:	fba3 1302 	umull	r1, r3, r3, r2
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	2164      	movs	r1, #100	; 0x64
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	3332      	adds	r3, #50	; 0x32
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <UART_SetConfig+0x384>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	f003 0207 	and.w	r2, r3, #7
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4442      	add	r2, r8
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	e26f      	b.n	8005ab2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055d2:	f7fe ffbf 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 80055d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	461d      	mov	r5, r3
 80055dc:	f04f 0600 	mov.w	r6, #0
 80055e0:	46a8      	mov	r8, r5
 80055e2:	46b1      	mov	r9, r6
 80055e4:	eb18 0308 	adds.w	r3, r8, r8
 80055e8:	eb49 0409 	adc.w	r4, r9, r9
 80055ec:	4698      	mov	r8, r3
 80055ee:	46a1      	mov	r9, r4
 80055f0:	eb18 0805 	adds.w	r8, r8, r5
 80055f4:	eb49 0906 	adc.w	r9, r9, r6
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800560c:	4688      	mov	r8, r1
 800560e:	4691      	mov	r9, r2
 8005610:	eb18 0005 	adds.w	r0, r8, r5
 8005614:	eb49 0106 	adc.w	r1, r9, r6
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	461d      	mov	r5, r3
 800561e:	f04f 0600 	mov.w	r6, #0
 8005622:	196b      	adds	r3, r5, r5
 8005624:	eb46 0406 	adc.w	r4, r6, r6
 8005628:	461a      	mov	r2, r3
 800562a:	4623      	mov	r3, r4
 800562c:	f7fb faae 	bl	8000b8c <__aeabi_uldivmod>
 8005630:	4603      	mov	r3, r0
 8005632:	460c      	mov	r4, r1
 8005634:	461a      	mov	r2, r3
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <UART_SetConfig+0x384>)
 8005638:	fba3 2302 	umull	r2, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	461d      	mov	r5, r3
 8005646:	f04f 0600 	mov.w	r6, #0
 800564a:	46a9      	mov	r9, r5
 800564c:	46b2      	mov	sl, r6
 800564e:	eb19 0309 	adds.w	r3, r9, r9
 8005652:	eb4a 040a 	adc.w	r4, sl, sl
 8005656:	4699      	mov	r9, r3
 8005658:	46a2      	mov	sl, r4
 800565a:	eb19 0905 	adds.w	r9, r9, r5
 800565e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800566e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005676:	4689      	mov	r9, r1
 8005678:	4692      	mov	sl, r2
 800567a:	eb19 0005 	adds.w	r0, r9, r5
 800567e:	eb4a 0106 	adc.w	r1, sl, r6
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	461d      	mov	r5, r3
 8005688:	f04f 0600 	mov.w	r6, #0
 800568c:	196b      	adds	r3, r5, r5
 800568e:	eb46 0406 	adc.w	r4, r6, r6
 8005692:	461a      	mov	r2, r3
 8005694:	4623      	mov	r3, r4
 8005696:	f7fb fa79 	bl	8000b8c <__aeabi_uldivmod>
 800569a:	4603      	mov	r3, r0
 800569c:	460c      	mov	r4, r1
 800569e:	461a      	mov	r2, r3
 80056a0:	4b2c      	ldr	r3, [pc, #176]	; (8005754 <UART_SetConfig+0x384>)
 80056a2:	fba3 1302 	umull	r1, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2164      	movs	r1, #100	; 0x64
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	3332      	adds	r3, #50	; 0x32
 80056b4:	4a27      	ldr	r2, [pc, #156]	; (8005754 <UART_SetConfig+0x384>)
 80056b6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ba:	095b      	lsrs	r3, r3, #5
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c2:	4498      	add	r8, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	461d      	mov	r5, r3
 80056c8:	f04f 0600 	mov.w	r6, #0
 80056cc:	46a9      	mov	r9, r5
 80056ce:	46b2      	mov	sl, r6
 80056d0:	eb19 0309 	adds.w	r3, r9, r9
 80056d4:	eb4a 040a 	adc.w	r4, sl, sl
 80056d8:	4699      	mov	r9, r3
 80056da:	46a2      	mov	sl, r4
 80056dc:	eb19 0905 	adds.w	r9, r9, r5
 80056e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056f8:	4689      	mov	r9, r1
 80056fa:	4692      	mov	sl, r2
 80056fc:	eb19 0005 	adds.w	r0, r9, r5
 8005700:	eb4a 0106 	adc.w	r1, sl, r6
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	461d      	mov	r5, r3
 800570a:	f04f 0600 	mov.w	r6, #0
 800570e:	196b      	adds	r3, r5, r5
 8005710:	eb46 0406 	adc.w	r4, r6, r6
 8005714:	461a      	mov	r2, r3
 8005716:	4623      	mov	r3, r4
 8005718:	f7fb fa38 	bl	8000b8c <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	461a      	mov	r2, r3
 8005722:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <UART_SetConfig+0x384>)
 8005724:	fba3 1302 	umull	r1, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	2164      	movs	r1, #100	; 0x64
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	3332      	adds	r3, #50	; 0x32
 8005736:	4a07      	ldr	r2, [pc, #28]	; (8005754 <UART_SetConfig+0x384>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 0207 	and.w	r2, r3, #7
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4442      	add	r2, r8
 8005748:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800574a:	e1b2      	b.n	8005ab2 <UART_SetConfig+0x6e2>
 800574c:	40011000 	.word	0x40011000
 8005750:	40011400 	.word	0x40011400
 8005754:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4ad7      	ldr	r2, [pc, #860]	; (8005abc <UART_SetConfig+0x6ec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d005      	beq.n	800576e <UART_SetConfig+0x39e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4ad6      	ldr	r2, [pc, #856]	; (8005ac0 <UART_SetConfig+0x6f0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	f040 80d1 	bne.w	8005910 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800576e:	f7fe ff05 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005772:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	469a      	mov	sl, r3
 8005778:	f04f 0b00 	mov.w	fp, #0
 800577c:	46d0      	mov	r8, sl
 800577e:	46d9      	mov	r9, fp
 8005780:	eb18 0308 	adds.w	r3, r8, r8
 8005784:	eb49 0409 	adc.w	r4, r9, r9
 8005788:	4698      	mov	r8, r3
 800578a:	46a1      	mov	r9, r4
 800578c:	eb18 080a 	adds.w	r8, r8, sl
 8005790:	eb49 090b 	adc.w	r9, r9, fp
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057a8:	4688      	mov	r8, r1
 80057aa:	4691      	mov	r9, r2
 80057ac:	eb1a 0508 	adds.w	r5, sl, r8
 80057b0:	eb4b 0609 	adc.w	r6, fp, r9
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4619      	mov	r1, r3
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	f04f 0300 	mov.w	r3, #0
 80057c2:	f04f 0400 	mov.w	r4, #0
 80057c6:	0094      	lsls	r4, r2, #2
 80057c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057cc:	008b      	lsls	r3, r1, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	4623      	mov	r3, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	4631      	mov	r1, r6
 80057d6:	f7fb f9d9 	bl	8000b8c <__aeabi_uldivmod>
 80057da:	4603      	mov	r3, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	461a      	mov	r2, r3
 80057e0:	4bb8      	ldr	r3, [pc, #736]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80057e2:	fba3 2302 	umull	r2, r3, r3, r2
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	469b      	mov	fp, r3
 80057f0:	f04f 0c00 	mov.w	ip, #0
 80057f4:	46d9      	mov	r9, fp
 80057f6:	46e2      	mov	sl, ip
 80057f8:	eb19 0309 	adds.w	r3, r9, r9
 80057fc:	eb4a 040a 	adc.w	r4, sl, sl
 8005800:	4699      	mov	r9, r3
 8005802:	46a2      	mov	sl, r4
 8005804:	eb19 090b 	adds.w	r9, r9, fp
 8005808:	eb4a 0a0c 	adc.w	sl, sl, ip
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005818:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800581c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005820:	4689      	mov	r9, r1
 8005822:	4692      	mov	sl, r2
 8005824:	eb1b 0509 	adds.w	r5, fp, r9
 8005828:	eb4c 060a 	adc.w	r6, ip, sl
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4619      	mov	r1, r3
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	0094      	lsls	r4, r2, #2
 8005840:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005844:	008b      	lsls	r3, r1, #2
 8005846:	461a      	mov	r2, r3
 8005848:	4623      	mov	r3, r4
 800584a:	4628      	mov	r0, r5
 800584c:	4631      	mov	r1, r6
 800584e:	f7fb f99d 	bl	8000b8c <__aeabi_uldivmod>
 8005852:	4603      	mov	r3, r0
 8005854:	460c      	mov	r4, r1
 8005856:	461a      	mov	r2, r3
 8005858:	4b9a      	ldr	r3, [pc, #616]	; (8005ac4 <UART_SetConfig+0x6f4>)
 800585a:	fba3 1302 	umull	r1, r3, r3, r2
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	2164      	movs	r1, #100	; 0x64
 8005862:	fb01 f303 	mul.w	r3, r1, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	3332      	adds	r3, #50	; 0x32
 800586c:	4a95      	ldr	r2, [pc, #596]	; (8005ac4 <UART_SetConfig+0x6f4>)
 800586e:	fba2 2303 	umull	r2, r3, r2, r3
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005878:	4498      	add	r8, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	469b      	mov	fp, r3
 800587e:	f04f 0c00 	mov.w	ip, #0
 8005882:	46d9      	mov	r9, fp
 8005884:	46e2      	mov	sl, ip
 8005886:	eb19 0309 	adds.w	r3, r9, r9
 800588a:	eb4a 040a 	adc.w	r4, sl, sl
 800588e:	4699      	mov	r9, r3
 8005890:	46a2      	mov	sl, r4
 8005892:	eb19 090b 	adds.w	r9, r9, fp
 8005896:	eb4a 0a0c 	adc.w	sl, sl, ip
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ae:	4689      	mov	r9, r1
 80058b0:	4692      	mov	sl, r2
 80058b2:	eb1b 0509 	adds.w	r5, fp, r9
 80058b6:	eb4c 060a 	adc.w	r6, ip, sl
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	f04f 0400 	mov.w	r4, #0
 80058cc:	0094      	lsls	r4, r2, #2
 80058ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058d2:	008b      	lsls	r3, r1, #2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	4631      	mov	r1, r6
 80058dc:	f7fb f956 	bl	8000b8c <__aeabi_uldivmod>
 80058e0:	4603      	mov	r3, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	461a      	mov	r2, r3
 80058e6:	4b77      	ldr	r3, [pc, #476]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80058e8:	fba3 1302 	umull	r1, r3, r3, r2
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	2164      	movs	r1, #100	; 0x64
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	3332      	adds	r3, #50	; 0x32
 80058fa:	4a72      	ldr	r2, [pc, #456]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80058fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4442      	add	r2, r8
 800590c:	609a      	str	r2, [r3, #8]
 800590e:	e0d0      	b.n	8005ab2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fe fe20 	bl	8004554 <HAL_RCC_GetPCLK1Freq>
 8005914:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	469a      	mov	sl, r3
 800591a:	f04f 0b00 	mov.w	fp, #0
 800591e:	46d0      	mov	r8, sl
 8005920:	46d9      	mov	r9, fp
 8005922:	eb18 0308 	adds.w	r3, r8, r8
 8005926:	eb49 0409 	adc.w	r4, r9, r9
 800592a:	4698      	mov	r8, r3
 800592c:	46a1      	mov	r9, r4
 800592e:	eb18 080a 	adds.w	r8, r8, sl
 8005932:	eb49 090b 	adc.w	r9, r9, fp
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005942:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005946:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800594a:	4688      	mov	r8, r1
 800594c:	4691      	mov	r9, r2
 800594e:	eb1a 0508 	adds.w	r5, sl, r8
 8005952:	eb4b 0609 	adc.w	r6, fp, r9
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4619      	mov	r1, r3
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	0094      	lsls	r4, r2, #2
 800596a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800596e:	008b      	lsls	r3, r1, #2
 8005970:	461a      	mov	r2, r3
 8005972:	4623      	mov	r3, r4
 8005974:	4628      	mov	r0, r5
 8005976:	4631      	mov	r1, r6
 8005978:	f7fb f908 	bl	8000b8c <__aeabi_uldivmod>
 800597c:	4603      	mov	r3, r0
 800597e:	460c      	mov	r4, r1
 8005980:	461a      	mov	r2, r3
 8005982:	4b50      	ldr	r3, [pc, #320]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005984:	fba3 2302 	umull	r2, r3, r3, r2
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	469b      	mov	fp, r3
 8005992:	f04f 0c00 	mov.w	ip, #0
 8005996:	46d9      	mov	r9, fp
 8005998:	46e2      	mov	sl, ip
 800599a:	eb19 0309 	adds.w	r3, r9, r9
 800599e:	eb4a 040a 	adc.w	r4, sl, sl
 80059a2:	4699      	mov	r9, r3
 80059a4:	46a2      	mov	sl, r4
 80059a6:	eb19 090b 	adds.w	r9, r9, fp
 80059aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059c2:	4689      	mov	r9, r1
 80059c4:	4692      	mov	sl, r2
 80059c6:	eb1b 0509 	adds.w	r5, fp, r9
 80059ca:	eb4c 060a 	adc.w	r6, ip, sl
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	4619      	mov	r1, r3
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	f04f 0400 	mov.w	r4, #0
 80059e0:	0094      	lsls	r4, r2, #2
 80059e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059e6:	008b      	lsls	r3, r1, #2
 80059e8:	461a      	mov	r2, r3
 80059ea:	4623      	mov	r3, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	4631      	mov	r1, r6
 80059f0:	f7fb f8cc 	bl	8000b8c <__aeabi_uldivmod>
 80059f4:	4603      	mov	r3, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	461a      	mov	r2, r3
 80059fa:	4b32      	ldr	r3, [pc, #200]	; (8005ac4 <UART_SetConfig+0x6f4>)
 80059fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	2164      	movs	r1, #100	; 0x64
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	3332      	adds	r3, #50	; 0x32
 8005a0e:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a1a:	4498      	add	r8, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	469b      	mov	fp, r3
 8005a20:	f04f 0c00 	mov.w	ip, #0
 8005a24:	46d9      	mov	r9, fp
 8005a26:	46e2      	mov	sl, ip
 8005a28:	eb19 0309 	adds.w	r3, r9, r9
 8005a2c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a30:	4699      	mov	r9, r3
 8005a32:	46a2      	mov	sl, r4
 8005a34:	eb19 090b 	adds.w	r9, r9, fp
 8005a38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a3c:	f04f 0100 	mov.w	r1, #0
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a50:	4689      	mov	r9, r1
 8005a52:	4692      	mov	sl, r2
 8005a54:	eb1b 0509 	adds.w	r5, fp, r9
 8005a58:	eb4c 060a 	adc.w	r6, ip, sl
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4619      	mov	r1, r3
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	f04f 0400 	mov.w	r4, #0
 8005a6e:	0094      	lsls	r4, r2, #2
 8005a70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a74:	008b      	lsls	r3, r1, #2
 8005a76:	461a      	mov	r2, r3
 8005a78:	4623      	mov	r3, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	f7fb f885 	bl	8000b8c <__aeabi_uldivmod>
 8005a82:	4603      	mov	r3, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	461a      	mov	r2, r3
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2164      	movs	r1, #100	; 0x64
 8005a92:	fb01 f303 	mul.w	r3, r1, r3
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	3332      	adds	r3, #50	; 0x32
 8005a9c:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <UART_SetConfig+0x6f4>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4442      	add	r2, r8
 8005aae:	609a      	str	r2, [r3, #8]
}
 8005ab0:	e7ff      	b.n	8005ab2 <UART_SetConfig+0x6e2>
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	40011400 	.word	0x40011400
 8005ac4:	51eb851f 	.word	0x51eb851f

08005ac8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ada:	2b84      	cmp	r3, #132	; 0x84
 8005adc:	d005      	beq.n	8005aea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ade:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3303      	adds	r3, #3
 8005ae8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005afc:	f000 fada 	bl	80060b4 <vTaskStartScheduler>
  
  return osOK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b08:	b089      	sub	sp, #36	; 0x24
 8005b0a:	af04      	add	r7, sp, #16
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <osThreadCreate+0x54>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01c      	beq.n	8005b5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685c      	ldr	r4, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681d      	ldr	r5, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691e      	ldr	r6, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ffc8 	bl	8005ac8 <makeFreeRtosPriority>
 8005b38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	9100      	str	r1, [sp, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 f8ed 	bl	8005d2e <xTaskCreateStatic>
 8005b54:	4603      	mov	r3, r0
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	e01c      	b.n	8005b94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685c      	ldr	r4, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b66:	b29e      	uxth	r6, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff ffaa 	bl	8005ac8 <makeFreeRtosPriority>
 8005b74:	4602      	mov	r2, r0
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	9200      	str	r2, [sp, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4632      	mov	r2, r6
 8005b82:	4629      	mov	r1, r5
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 f92c 	bl	8005de2 <xTaskCreate>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d001      	beq.n	8005b94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b94:	68fb      	ldr	r3, [r7, #12]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <osDelay+0x16>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	e000      	b.n	8005bb6 <osDelay+0x18>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fa48 	bl	800604c <vTaskDelay>
  
  return osOK;
 8005bbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <vListInitialise>:
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f103 0208 	add.w	r2, r3, #8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	609a      	str	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f103 0208 	add.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	611a      	str	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <vListInitialiseItem>:
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <vListInsertEnd>:
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	609a      	str	r2, [r3, #8]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	611a      	str	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <vListInsert>:
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d103      	bne.n	8005c88 <vListInsert+0x20>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e00c      	b.n	8005ca2 <vListInsert+0x3a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e002      	b.n	8005c96 <vListInsert+0x2e>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d2f6      	bcs.n	8005c90 <vListInsert+0x28>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	611a      	str	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <uxListRemove>:
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6892      	ldr	r2, [r2, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6852      	ldr	r2, [r2, #4]
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d103      	bne.n	8005d0e <uxListRemove+0x34>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <xTaskCreateStatic>:
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b08e      	sub	sp, #56	; 0x38
 8005d32:	af04      	add	r7, sp, #16
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <xTaskCreateStatic+0x28>
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	e7fe      	b.n	8005d54 <xTaskCreateStatic+0x26>
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d109      	bne.n	8005d70 <xTaskCreateStatic+0x42>
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	e7fe      	b.n	8005d6e <xTaskCreateStatic+0x40>
 8005d70:	2354      	movs	r3, #84	; 0x54
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b54      	cmp	r3, #84	; 0x54
 8005d78:	d009      	beq.n	8005d8e <xTaskCreateStatic+0x60>
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	e7fe      	b.n	8005d8c <xTaskCreateStatic+0x5e>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01e      	beq.n	8005dd4 <xTaskCreateStatic+0xa6>
 8005d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01b      	beq.n	8005dd4 <xTaskCreateStatic+0xa6>
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da4:	631a      	str	r2, [r3, #48]	; 0x30
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	2202      	movs	r2, #2
 8005daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005dae:	2300      	movs	r3, #0
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	9302      	str	r3, [sp, #8]
 8005db6:	f107 0314 	add.w	r3, r7, #20
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f850 	bl	8005e6c <prvInitialiseNewTask>
 8005dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dce:	f000 f8d3 	bl	8005f78 <prvAddNewTaskToReadyList>
 8005dd2:	e001      	b.n	8005dd8 <xTaskCreateStatic+0xaa>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3728      	adds	r7, #40	; 0x28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <xTaskCreate>:
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08c      	sub	sp, #48	; 0x30
 8005de6:	af04      	add	r7, sp, #16
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 feb4 	bl	8006b64 <pvPortMalloc>
 8005dfc:	6178      	str	r0, [r7, #20]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00e      	beq.n	8005e22 <xTaskCreate+0x40>
 8005e04:	2054      	movs	r0, #84	; 0x54
 8005e06:	f000 fead 	bl	8006b64 <pvPortMalloc>
 8005e0a:	61f8      	str	r0, [r7, #28]
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <xTaskCreate+0x38>
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
 8005e18:	e005      	b.n	8005e26 <xTaskCreate+0x44>
 8005e1a:	6978      	ldr	r0, [r7, #20]
 8005e1c:	f000 ff64 	bl	8006ce8 <vPortFree>
 8005e20:	e001      	b.n	8005e26 <xTaskCreate+0x44>
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d017      	beq.n	8005e5c <xTaskCreate+0x7a>
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005e34:	88fa      	ldrh	r2, [r7, #6]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9303      	str	r3, [sp, #12]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f80e 	bl	8005e6c <prvInitialiseNewTask>
 8005e50:	69f8      	ldr	r0, [r7, #28]
 8005e52:	f000 f891 	bl	8005f78 <prvAddNewTaskToReadyList>
 8005e56:	2301      	movs	r3, #1
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	e002      	b.n	8005e62 <xTaskCreate+0x80>
 8005e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <prvInitialiseNewTask>:
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e84:	3b01      	subs	r3, #1
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f023 0307 	bic.w	r3, r3, #7
 8005e92:	61bb      	str	r3, [r7, #24]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <prvInitialiseNewTask+0x46>
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e7fe      	b.n	8005eb0 <prvInitialiseNewTask+0x44>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01f      	beq.n	8005ef8 <prvInitialiseNewTask+0x8c>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e012      	b.n	8005ee4 <prvInitialiseNewTask+0x78>
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	7819      	ldrb	r1, [r3, #0]
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	3334      	adds	r3, #52	; 0x34
 8005ece:	460a      	mov	r2, r1
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <prvInitialiseNewTask+0x80>
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	d9e9      	bls.n	8005ebe <prvInitialiseNewTask+0x52>
 8005eea:	e000      	b.n	8005eee <prvInitialiseNewTask+0x82>
 8005eec:	bf00      	nop
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef6:	e003      	b.n	8005f00 <prvInitialiseNewTask+0x94>
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d901      	bls.n	8005f0a <prvInitialiseNewTask+0x9e>
 8005f06:	2306      	movs	r3, #6
 8005f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f14:	645a      	str	r2, [r3, #68]	; 0x44
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2200      	movs	r2, #0
 8005f1a:	649a      	str	r2, [r3, #72]	; 0x48
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fe70 	bl	8005c06 <vListInitialiseItem>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	3318      	adds	r3, #24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fe6b 	bl	8005c06 <vListInitialiseItem>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	f1c3 0207 	rsb	r2, r3, #7
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	619a      	str	r2, [r3, #24]
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	2200      	movs	r2, #0
 8005f4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	69b8      	ldr	r0, [r7, #24]
 8005f5a:	f000 fbfd 	bl	8006758 <pxPortInitialiseStack>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <prvInitialiseNewTask+0x104>
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	bf00      	nop
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvAddNewTaskToReadyList>:
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	f000 fd14 	bl	80069ac <vPortEnterCritical>
 8005f84:	4b2a      	ldr	r3, [pc, #168]	; (8006030 <prvAddNewTaskToReadyList+0xb8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a29      	ldr	r2, [pc, #164]	; (8006030 <prvAddNewTaskToReadyList+0xb8>)
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	4b29      	ldr	r3, [pc, #164]	; (8006034 <prvAddNewTaskToReadyList+0xbc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <prvAddNewTaskToReadyList+0x32>
 8005f96:	4a27      	ldr	r2, [pc, #156]	; (8006034 <prvAddNewTaskToReadyList+0xbc>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4b24      	ldr	r3, [pc, #144]	; (8006030 <prvAddNewTaskToReadyList+0xb8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d110      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
 8005fa4:	f000 fab8 	bl	8006518 <prvInitialiseTaskLists>
 8005fa8:	e00d      	b.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
 8005faa:	4b23      	ldr	r3, [pc, #140]	; (8006038 <prvAddNewTaskToReadyList+0xc0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
 8005fb2:	4b20      	ldr	r3, [pc, #128]	; (8006034 <prvAddNewTaskToReadyList+0xbc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d802      	bhi.n	8005fc6 <prvAddNewTaskToReadyList+0x4e>
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <prvAddNewTaskToReadyList+0xbc>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	4b1d      	ldr	r3, [pc, #116]	; (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	; (800603c <prvAddNewTaskToReadyList+0xc4>)
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	4a18      	ldr	r2, [pc, #96]	; (8006040 <prvAddNewTaskToReadyList+0xc8>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a15      	ldr	r2, [pc, #84]	; (8006044 <prvAddNewTaskToReadyList+0xcc>)
 8005ff0:	441a      	add	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7ff fe11 	bl	8005c20 <vListInsertEnd>
 8005ffe:	f000 fd03 	bl	8006a08 <vPortExitCritical>
 8006002:	4b0d      	ldr	r3, [pc, #52]	; (8006038 <prvAddNewTaskToReadyList+0xc0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00e      	beq.n	8006028 <prvAddNewTaskToReadyList+0xb0>
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <prvAddNewTaskToReadyList+0xbc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	429a      	cmp	r2, r3
 8006016:	d207      	bcs.n	8006028 <prvAddNewTaskToReadyList+0xb0>
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <prvAddNewTaskToReadyList+0xd0>)
 800601a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200003ec 	.word	0x200003ec
 8006034:	200002ec 	.word	0x200002ec
 8006038:	200003f8 	.word	0x200003f8
 800603c:	20000408 	.word	0x20000408
 8006040:	200003f4 	.word	0x200003f4
 8006044:	200002f0 	.word	0x200002f0
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vTaskDelay>:
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	2300      	movs	r3, #0
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d016      	beq.n	800608c <vTaskDelay+0x40>
 800605e:	4b13      	ldr	r3, [pc, #76]	; (80060ac <vTaskDelay+0x60>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <vTaskDelay+0x2e>
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	60bb      	str	r3, [r7, #8]
 8006078:	e7fe      	b.n	8006078 <vTaskDelay+0x2c>
 800607a:	f000 f879 	bl	8006170 <vTaskSuspendAll>
 800607e:	2100      	movs	r1, #0
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fb03 	bl	800668c <prvAddCurrentTaskToDelayedList>
 8006086:	f000 f881 	bl	800618c <xTaskResumeAll>
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d107      	bne.n	80060a2 <vTaskDelay+0x56>
 8006092:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <vTaskDelay+0x64>)
 8006094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000414 	.word	0x20000414
 80060b0:	e000ed04 	.word	0xe000ed04

080060b4 <vTaskStartScheduler>:
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	2300      	movs	r3, #0
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	463a      	mov	r2, r7
 80060c4:	1d39      	adds	r1, r7, #4
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fb fdb4 	bl	8001c38 <vApplicationGetIdleTaskMemory>
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	9202      	str	r2, [sp, #8]
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	2300      	movs	r3, #0
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	2300      	movs	r3, #0
 80060e0:	460a      	mov	r2, r1
 80060e2:	491d      	ldr	r1, [pc, #116]	; (8006158 <vTaskStartScheduler+0xa4>)
 80060e4:	481d      	ldr	r0, [pc, #116]	; (800615c <vTaskStartScheduler+0xa8>)
 80060e6:	f7ff fe22 	bl	8005d2e <xTaskCreateStatic>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <vTaskStartScheduler+0xac>)
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	4b1b      	ldr	r3, [pc, #108]	; (8006160 <vTaskStartScheduler+0xac>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <vTaskStartScheduler+0x4a>
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	e001      	b.n	8006102 <vTaskStartScheduler+0x4e>
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d115      	bne.n	8006134 <vTaskStartScheduler+0x80>
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <vTaskStartScheduler+0xb0>)
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <vTaskStartScheduler+0xb4>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <vTaskStartScheduler+0xb8>)
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	f000 fb9f 	bl	8006870 <xPortStartScheduler>
 8006132:	e00d      	b.n	8006150 <vTaskStartScheduler+0x9c>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	d109      	bne.n	8006150 <vTaskStartScheduler+0x9c>
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e7fe      	b.n	800614e <vTaskStartScheduler+0x9a>
 8006150:	bf00      	nop
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	08007f60 	.word	0x08007f60
 800615c:	080064e9 	.word	0x080064e9
 8006160:	20000410 	.word	0x20000410
 8006164:	2000040c 	.word	0x2000040c
 8006168:	200003f8 	.word	0x200003f8
 800616c:	200003f0 	.word	0x200003f0

08006170 <vTaskSuspendAll>:
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
 8006174:	4b04      	ldr	r3, [pc, #16]	; (8006188 <vTaskSuspendAll+0x18>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	4a03      	ldr	r2, [pc, #12]	; (8006188 <vTaskSuspendAll+0x18>)
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	20000414 	.word	0x20000414

0800618c <xTaskResumeAll>:
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	4b41      	ldr	r3, [pc, #260]	; (80062a0 <xTaskResumeAll+0x114>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <xTaskResumeAll+0x2a>
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	e7fe      	b.n	80061b4 <xTaskResumeAll+0x28>
 80061b6:	f000 fbf9 	bl	80069ac <vPortEnterCritical>
 80061ba:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <xTaskResumeAll+0x114>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a37      	ldr	r2, [pc, #220]	; (80062a0 <xTaskResumeAll+0x114>)
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <xTaskResumeAll+0x114>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d161      	bne.n	8006290 <xTaskResumeAll+0x104>
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <xTaskResumeAll+0x118>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d05d      	beq.n	8006290 <xTaskResumeAll+0x104>
 80061d4:	e02e      	b.n	8006234 <xTaskResumeAll+0xa8>
 80061d6:	4b34      	ldr	r3, [pc, #208]	; (80062a8 <xTaskResumeAll+0x11c>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3318      	adds	r3, #24
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fd79 	bl	8005cda <uxListRemove>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fd74 	bl	8005cda <uxListRemove>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	2201      	movs	r2, #1
 80061f8:	409a      	lsls	r2, r3
 80061fa:	4b2c      	ldr	r3, [pc, #176]	; (80062ac <xTaskResumeAll+0x120>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4313      	orrs	r3, r2
 8006200:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <xTaskResumeAll+0x120>)
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4a27      	ldr	r2, [pc, #156]	; (80062b0 <xTaskResumeAll+0x124>)
 8006212:	441a      	add	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7ff fd00 	bl	8005c20 <vListInsertEnd>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <xTaskResumeAll+0x128>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	429a      	cmp	r2, r3
 800622c:	d302      	bcc.n	8006234 <xTaskResumeAll+0xa8>
 800622e:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <xTaskResumeAll+0x12c>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <xTaskResumeAll+0x11c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1cc      	bne.n	80061d6 <xTaskResumeAll+0x4a>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <xTaskResumeAll+0xba>
 8006242:	f000 fa03 	bl	800664c <prvResetNextTaskUnblockTime>
 8006246:	4b1d      	ldr	r3, [pc, #116]	; (80062bc <xTaskResumeAll+0x130>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d010      	beq.n	8006274 <xTaskResumeAll+0xe8>
 8006252:	f000 f837 	bl	80062c4 <xTaskIncrementTick>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <xTaskResumeAll+0xd6>
 800625c:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <xTaskResumeAll+0x12c>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3b01      	subs	r3, #1
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f1      	bne.n	8006252 <xTaskResumeAll+0xc6>
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <xTaskResumeAll+0x130>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	4b10      	ldr	r3, [pc, #64]	; (80062b8 <xTaskResumeAll+0x12c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <xTaskResumeAll+0x104>
 800627c:	2301      	movs	r3, #1
 800627e:	60bb      	str	r3, [r7, #8]
 8006280:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <xTaskResumeAll+0x134>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f000 fbba 	bl	8006a08 <vPortExitCritical>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000414 	.word	0x20000414
 80062a4:	200003ec 	.word	0x200003ec
 80062a8:	200003ac 	.word	0x200003ac
 80062ac:	200003f4 	.word	0x200003f4
 80062b0:	200002f0 	.word	0x200002f0
 80062b4:	200002ec 	.word	0x200002ec
 80062b8:	20000400 	.word	0x20000400
 80062bc:	200003fc 	.word	0x200003fc
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <xTaskIncrementTick>:
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	4b4e      	ldr	r3, [pc, #312]	; (8006408 <xTaskIncrementTick+0x144>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 8087 	bne.w	80063e6 <xTaskIncrementTick+0x122>
 80062d8:	4b4c      	ldr	r3, [pc, #304]	; (800640c <xTaskIncrementTick+0x148>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	4a4a      	ldr	r2, [pc, #296]	; (800640c <xTaskIncrementTick+0x148>)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d11f      	bne.n	800632c <xTaskIncrementTick+0x68>
 80062ec:	4b48      	ldr	r3, [pc, #288]	; (8006410 <xTaskIncrementTick+0x14c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <xTaskIncrementTick+0x46>
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	e7fe      	b.n	8006308 <xTaskIncrementTick+0x44>
 800630a:	4b41      	ldr	r3, [pc, #260]	; (8006410 <xTaskIncrementTick+0x14c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	4b40      	ldr	r3, [pc, #256]	; (8006414 <xTaskIncrementTick+0x150>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a3e      	ldr	r2, [pc, #248]	; (8006410 <xTaskIncrementTick+0x14c>)
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	4a3e      	ldr	r2, [pc, #248]	; (8006414 <xTaskIncrementTick+0x150>)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <xTaskIncrementTick+0x154>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a3c      	ldr	r2, [pc, #240]	; (8006418 <xTaskIncrementTick+0x154>)
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	f000 f990 	bl	800664c <prvResetNextTaskUnblockTime>
 800632c:	4b3b      	ldr	r3, [pc, #236]	; (800641c <xTaskIncrementTick+0x158>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	429a      	cmp	r2, r3
 8006334:	d348      	bcc.n	80063c8 <xTaskIncrementTick+0x104>
 8006336:	4b36      	ldr	r3, [pc, #216]	; (8006410 <xTaskIncrementTick+0x14c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <xTaskIncrementTick+0x86>
 8006340:	4b36      	ldr	r3, [pc, #216]	; (800641c <xTaskIncrementTick+0x158>)
 8006342:	f04f 32ff 	mov.w	r2, #4294967295
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e03e      	b.n	80063c8 <xTaskIncrementTick+0x104>
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <xTaskIncrementTick+0x14c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	60bb      	str	r3, [r7, #8]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	607b      	str	r3, [r7, #4]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	429a      	cmp	r2, r3
 8006360:	d203      	bcs.n	800636a <xTaskIncrementTick+0xa6>
 8006362:	4a2e      	ldr	r2, [pc, #184]	; (800641c <xTaskIncrementTick+0x158>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e02e      	b.n	80063c8 <xTaskIncrementTick+0x104>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	3304      	adds	r3, #4
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fcb3 	bl	8005cda <uxListRemove>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <xTaskIncrementTick+0xc2>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	3318      	adds	r3, #24
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fcaa 	bl	8005cda <uxListRemove>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	2201      	movs	r2, #1
 800638c:	409a      	lsls	r2, r3
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <xTaskIncrementTick+0x15c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	4a22      	ldr	r2, [pc, #136]	; (8006420 <xTaskIncrementTick+0x15c>)
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4a1f      	ldr	r2, [pc, #124]	; (8006424 <xTaskIncrementTick+0x160>)
 80063a6:	441a      	add	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7ff fc36 	bl	8005c20 <vListInsertEnd>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <xTaskIncrementTick+0x164>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	429a      	cmp	r2, r3
 80063c0:	d3b9      	bcc.n	8006336 <xTaskIncrementTick+0x72>
 80063c2:	2301      	movs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e7b6      	b.n	8006336 <xTaskIncrementTick+0x72>
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <xTaskIncrementTick+0x164>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	4915      	ldr	r1, [pc, #84]	; (8006424 <xTaskIncrementTick+0x160>)
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d907      	bls.n	80063f0 <xTaskIncrementTick+0x12c>
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e004      	b.n	80063f0 <xTaskIncrementTick+0x12c>
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <xTaskIncrementTick+0x168>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	4a0f      	ldr	r2, [pc, #60]	; (800642c <xTaskIncrementTick+0x168>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b0f      	ldr	r3, [pc, #60]	; (8006430 <xTaskIncrementTick+0x16c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <xTaskIncrementTick+0x138>
 80063f8:	2301      	movs	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000414 	.word	0x20000414
 800640c:	200003f0 	.word	0x200003f0
 8006410:	200003a4 	.word	0x200003a4
 8006414:	200003a8 	.word	0x200003a8
 8006418:	20000404 	.word	0x20000404
 800641c:	2000040c 	.word	0x2000040c
 8006420:	200003f4 	.word	0x200003f4
 8006424:	200002f0 	.word	0x200002f0
 8006428:	200002ec 	.word	0x200002ec
 800642c:	200003fc 	.word	0x200003fc
 8006430:	20000400 	.word	0x20000400

08006434 <vTaskSwitchContext>:
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <vTaskSwitchContext+0xa0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <vTaskSwitchContext+0x16>
 8006442:	4b25      	ldr	r3, [pc, #148]	; (80064d8 <vTaskSwitchContext+0xa4>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e03e      	b.n	80064c8 <vTaskSwitchContext+0x94>
 800644a:	4b23      	ldr	r3, [pc, #140]	; (80064d8 <vTaskSwitchContext+0xa4>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	4b22      	ldr	r3, [pc, #136]	; (80064dc <vTaskSwitchContext+0xa8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	72fb      	strb	r3, [r7, #11]
 800645e:	7afb      	ldrb	r3, [r7, #11]
 8006460:	f1c3 031f 	rsb	r3, r3, #31
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	491e      	ldr	r1, [pc, #120]	; (80064e0 <vTaskSwitchContext+0xac>)
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <vTaskSwitchContext+0x5a>
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	e7fe      	b.n	800648c <vTaskSwitchContext+0x58>
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <vTaskSwitchContext+0xac>)
 800649a:	4413      	add	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3308      	adds	r3, #8
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d104      	bne.n	80064be <vTaskSwitchContext+0x8a>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4a07      	ldr	r2, [pc, #28]	; (80064e4 <vTaskSwitchContext+0xb0>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	20000414 	.word	0x20000414
 80064d8:	20000400 	.word	0x20000400
 80064dc:	200003f4 	.word	0x200003f4
 80064e0:	200002f0 	.word	0x200002f0
 80064e4:	200002ec 	.word	0x200002ec

080064e8 <prvIdleTask>:
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	f000 f852 	bl	8006598 <prvCheckTasksWaitingTermination>
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <prvIdleTask+0x28>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d9f9      	bls.n	80064f0 <prvIdleTask+0x8>
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <prvIdleTask+0x2c>)
 80064fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	e7f0      	b.n	80064f0 <prvIdleTask+0x8>
 800650e:	bf00      	nop
 8006510:	200002f0 	.word	0x200002f0
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <prvInitialiseTaskLists>:
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	e00c      	b.n	800653e <prvInitialiseTaskLists+0x26>
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4a12      	ldr	r2, [pc, #72]	; (8006578 <prvInitialiseTaskLists+0x60>)
 8006530:	4413      	add	r3, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fb47 	bl	8005bc6 <vListInitialise>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3301      	adds	r3, #1
 800653c:	607b      	str	r3, [r7, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b06      	cmp	r3, #6
 8006542:	d9ef      	bls.n	8006524 <prvInitialiseTaskLists+0xc>
 8006544:	480d      	ldr	r0, [pc, #52]	; (800657c <prvInitialiseTaskLists+0x64>)
 8006546:	f7ff fb3e 	bl	8005bc6 <vListInitialise>
 800654a:	480d      	ldr	r0, [pc, #52]	; (8006580 <prvInitialiseTaskLists+0x68>)
 800654c:	f7ff fb3b 	bl	8005bc6 <vListInitialise>
 8006550:	480c      	ldr	r0, [pc, #48]	; (8006584 <prvInitialiseTaskLists+0x6c>)
 8006552:	f7ff fb38 	bl	8005bc6 <vListInitialise>
 8006556:	480c      	ldr	r0, [pc, #48]	; (8006588 <prvInitialiseTaskLists+0x70>)
 8006558:	f7ff fb35 	bl	8005bc6 <vListInitialise>
 800655c:	480b      	ldr	r0, [pc, #44]	; (800658c <prvInitialiseTaskLists+0x74>)
 800655e:	f7ff fb32 	bl	8005bc6 <vListInitialise>
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <prvInitialiseTaskLists+0x78>)
 8006564:	4a05      	ldr	r2, [pc, #20]	; (800657c <prvInitialiseTaskLists+0x64>)
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvInitialiseTaskLists+0x7c>)
 800656a:	4a05      	ldr	r2, [pc, #20]	; (8006580 <prvInitialiseTaskLists+0x68>)
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200002f0 	.word	0x200002f0
 800657c:	2000037c 	.word	0x2000037c
 8006580:	20000390 	.word	0x20000390
 8006584:	200003ac 	.word	0x200003ac
 8006588:	200003c0 	.word	0x200003c0
 800658c:	200003d8 	.word	0x200003d8
 8006590:	200003a4 	.word	0x200003a4
 8006594:	200003a8 	.word	0x200003a8

08006598 <prvCheckTasksWaitingTermination>:
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	e019      	b.n	80065d4 <prvCheckTasksWaitingTermination+0x3c>
 80065a0:	f000 fa04 	bl	80069ac <vPortEnterCritical>
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <prvCheckTasksWaitingTermination+0x4c>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fb92 	bl	8005cda <uxListRemove>
 80065b6:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <prvCheckTasksWaitingTermination+0x50>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <prvCheckTasksWaitingTermination+0x50>)
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <prvCheckTasksWaitingTermination+0x54>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	4a09      	ldr	r2, [pc, #36]	; (80065ec <prvCheckTasksWaitingTermination+0x54>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	f000 fa1d 	bl	8006a08 <vPortExitCritical>
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f80e 	bl	80065f0 <prvDeleteTCB>
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <prvCheckTasksWaitingTermination+0x54>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e1      	bne.n	80065a0 <prvCheckTasksWaitingTermination+0x8>
 80065dc:	bf00      	nop
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200003c0 	.word	0x200003c0
 80065e8:	200003ec 	.word	0x200003ec
 80065ec:	200003d4 	.word	0x200003d4

080065f0 <prvDeleteTCB>:
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <prvDeleteTCB+0x24>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fb6e 	bl	8006ce8 <vPortFree>
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fb6b 	bl	8006ce8 <vPortFree>
 8006612:	e017      	b.n	8006644 <prvDeleteTCB+0x54>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661a:	2b01      	cmp	r3, #1
 800661c:	d103      	bne.n	8006626 <prvDeleteTCB+0x36>
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fb62 	bl	8006ce8 <vPortFree>
 8006624:	e00e      	b.n	8006644 <prvDeleteTCB+0x54>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800662c:	2b02      	cmp	r3, #2
 800662e:	d009      	beq.n	8006644 <prvDeleteTCB+0x54>
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e7fe      	b.n	8006642 <prvDeleteTCB+0x52>
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <prvResetNextTaskUnblockTime>:
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <prvResetNextTaskUnblockTime+0x38>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <prvResetNextTaskUnblockTime+0x1a>
 800665c:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <prvResetNextTaskUnblockTime+0x3c>)
 800665e:	f04f 32ff 	mov.w	r2, #4294967295
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e008      	b.n	8006678 <prvResetNextTaskUnblockTime+0x2c>
 8006666:	4b07      	ldr	r3, [pc, #28]	; (8006684 <prvResetNextTaskUnblockTime+0x38>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4a04      	ldr	r2, [pc, #16]	; (8006688 <prvResetNextTaskUnblockTime+0x3c>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	200003a4 	.word	0x200003a4
 8006688:	2000040c 	.word	0x2000040c

0800668c <prvAddCurrentTaskToDelayedList>:
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	4b29      	ldr	r3, [pc, #164]	; (800673c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fb19 	bl	8005cda <uxListRemove>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	2201      	movs	r2, #1
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43da      	mvns	r2, r3
 80066bc:	4b21      	ldr	r3, [pc, #132]	; (8006744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	4a20      	ldr	r2, [pc, #128]	; (8006744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d10a      	bne.n	80066e4 <prvAddCurrentTaskToDelayedList+0x58>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <prvAddCurrentTaskToDelayedList+0x58>
 80066d4:	4b1a      	ldr	r3, [pc, #104]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	481a      	ldr	r0, [pc, #104]	; (8006748 <prvAddCurrentTaskToDelayedList+0xbc>)
 80066de:	f7ff fa9f 	bl	8005c20 <vListInsertEnd>
 80066e2:	e026      	b.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4413      	add	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d209      	bcs.n	8006710 <prvAddCurrentTaskToDelayedList+0x84>
 80066fc:	4b13      	ldr	r3, [pc, #76]	; (800674c <prvAddCurrentTaskToDelayedList+0xc0>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7ff faad 	bl	8005c68 <vListInsert>
 800670e:	e010      	b.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7ff faa3 	bl	8005c68 <vListInsert>
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	429a      	cmp	r2, r3
 800672a:	d202      	bcs.n	8006732 <prvAddCurrentTaskToDelayedList+0xa6>
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	200003f0 	.word	0x200003f0
 8006740:	200002ec 	.word	0x200002ec
 8006744:	200003f4 	.word	0x200003f4
 8006748:	200003d8 	.word	0x200003d8
 800674c:	200003a8 	.word	0x200003a8
 8006750:	200003a4 	.word	0x200003a4
 8006754:	2000040c 	.word	0x2000040c

08006758 <pxPortInitialiseStack>:
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3b04      	subs	r3, #4
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b04      	subs	r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f023 0201 	bic.w	r2, r3, #1
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3b04      	subs	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	4a0c      	ldr	r2, [pc, #48]	; (80067bc <pxPortInitialiseStack+0x64>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3b14      	subs	r3, #20
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3b04      	subs	r3, #4
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f06f 0202 	mvn.w	r2, #2
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3b20      	subs	r3, #32
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	080067c1 	.word	0x080067c1

080067c0 <prvTaskExitError>:
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <prvTaskExitError+0x50>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d009      	beq.n	80067e8 <prvTaskExitError+0x28>
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e7fe      	b.n	80067e6 <prvTaskExitError+0x26>
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	bf00      	nop
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0fc      	beq.n	80067fc <prvTaskExitError+0x3c>
 8006802:	bf00      	nop
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	2000000c 	.word	0x2000000c
	...

08006820 <SVC_Handler>:
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <pxCurrentTCBConst2>)
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f380 8809 	msr	PSP, r0
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	4770      	bx	lr
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst2>:
 8006840:	200002ec 	.word	0x200002ec
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <prvPortStartFirstTask>:
 8006848:	4808      	ldr	r0, [pc, #32]	; (800686c <prvPortStartFirstTask+0x24>)
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f380 8808 	msr	MSP, r0
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8814 	msr	CONTROL, r0
 800685a:	b662      	cpsie	i
 800685c:	b661      	cpsie	f
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	df00      	svc	0
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e000ed08 	.word	0xe000ed08

08006870 <xPortStartScheduler>:
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	4b44      	ldr	r3, [pc, #272]	; (8006988 <xPortStartScheduler+0x118>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a44      	ldr	r2, [pc, #272]	; (800698c <xPortStartScheduler+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <xPortStartScheduler+0x24>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	e7fe      	b.n	8006892 <xPortStartScheduler+0x22>
 8006894:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <xPortStartScheduler+0x118>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <xPortStartScheduler+0x120>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d109      	bne.n	80068b2 <xPortStartScheduler+0x42>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e7fe      	b.n	80068b0 <xPortStartScheduler+0x40>
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <xPortStartScheduler+0x124>)
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	70fb      	strb	r3, [r7, #3]
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <xPortStartScheduler+0x128>)
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	4b30      	ldr	r3, [pc, #192]	; (800699c <xPortStartScheduler+0x12c>)
 80068dc:	2207      	movs	r2, #7
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e009      	b.n	80068f6 <xPortStartScheduler+0x86>
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <xPortStartScheduler+0x12c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4a2c      	ldr	r2, [pc, #176]	; (800699c <xPortStartScheduler+0x12c>)
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	70fb      	strb	r3, [r7, #3]
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d0ef      	beq.n	80068e2 <xPortStartScheduler+0x72>
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <xPortStartScheduler+0x12c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1c3 0307 	rsb	r3, r3, #7
 800690a:	2b04      	cmp	r3, #4
 800690c:	d009      	beq.n	8006922 <xPortStartScheduler+0xb2>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	e7fe      	b.n	8006920 <xPortStartScheduler+0xb0>
 8006922:	4b1e      	ldr	r3, [pc, #120]	; (800699c <xPortStartScheduler+0x12c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <xPortStartScheduler+0x12c>)
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <xPortStartScheduler+0x12c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <xPortStartScheduler+0x12c>)
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	701a      	strb	r2, [r3, #0]
 8006940:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <xPortStartScheduler+0x130>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <xPortStartScheduler+0x130>)
 8006946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <xPortStartScheduler+0x130>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <xPortStartScheduler+0x130>)
 8006952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	f000 f8d6 	bl	8006b08 <vPortSetupTimerInterrupt>
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <xPortStartScheduler+0x134>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f000 f8f5 	bl	8006b50 <vPortEnableVFP>
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <xPortStartScheduler+0x138>)
 800696c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	f7ff ff69 	bl	8006848 <prvPortStartFirstTask>
 8006976:	f7ff fd5d 	bl	8006434 <vTaskSwitchContext>
 800697a:	f7ff ff21 	bl	80067c0 <prvTaskExitError>
 800697e:	2300      	movs	r3, #0
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed00 	.word	0xe000ed00
 800698c:	410fc271 	.word	0x410fc271
 8006990:	410fc270 	.word	0x410fc270
 8006994:	e000e400 	.word	0xe000e400
 8006998:	20000418 	.word	0x20000418
 800699c:	2000041c 	.word	0x2000041c
 80069a0:	e000ed20 	.word	0xe000ed20
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	e000ef34 	.word	0xe000ef34

080069ac <vPortEnterCritical>:
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <vPortEnterCritical+0x54>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	4a0d      	ldr	r2, [pc, #52]	; (8006a00 <vPortEnterCritical+0x54>)
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <vPortEnterCritical+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10e      	bne.n	80069f4 <vPortEnterCritical+0x48>
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortEnterCritical+0x58>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <vPortEnterCritical+0x48>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	e7fe      	b.n	80069f2 <vPortEnterCritical+0x46>
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vPortExitCritical>:
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <vPortExitCritical+0x22>
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e7fe      	b.n	8006a28 <vPortExitCritical+0x20>
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <vPortExitCritical+0x3e>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000000c 	.word	0x2000000c
	...

08006a60 <PendSV_Handler>:
 8006a60:	f3ef 8009 	mrs	r0, PSP
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <pxCurrentTCBConst>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	f01e 0f10 	tst.w	lr, #16
 8006a70:	bf08      	it	eq
 8006a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	6010      	str	r0, [r2, #0]
 8006a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a84:	f380 8811 	msr	BASEPRI, r0
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f7ff fcd0 	bl	8006434 <vTaskSwitchContext>
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f380 8811 	msr	BASEPRI, r0
 8006a9c:	bc09      	pop	{r0, r3}
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa6:	f01e 0f10 	tst.w	lr, #16
 8006aaa:	bf08      	it	eq
 8006aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ab0:	f380 8809 	msr	PSP, r0
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst>:
 8006ac0:	200002ec 	.word	0x200002ec
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <SysTick_Handler>:
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	f7ff fbf0 	bl	80062c4 <xTaskIncrementTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <SysTick_Handler+0x2a>
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SysTick_Handler+0x3c>)
 8006aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vPortSetupTimerInterrupt>:
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <vPortSetupTimerInterrupt+0x38>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <vPortSetupTimerInterrupt+0x3c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <vPortSetupTimerInterrupt+0x40>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <vPortSetupTimerInterrupt+0x44>)
 8006b26:	3b01      	subs	r3, #1
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b2c:	2207      	movs	r2, #7
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	e000e010 	.word	0xe000e010
 8006b40:	e000e018 	.word	0xe000e018
 8006b44:	20000000 	.word	0x20000000
 8006b48:	10624dd3 	.word	0x10624dd3
 8006b4c:	e000e014 	.word	0xe000e014

08006b50 <vPortEnableVFP>:
 8006b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b60 <vPortEnableVFP+0x10>
 8006b54:	6801      	ldr	r1, [r0, #0]
 8006b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b5a:	6001      	str	r1, [r0, #0]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	e000ed88 	.word	0xe000ed88

08006b64 <pvPortMalloc>:
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	f7ff fafe 	bl	8006170 <vTaskSuspendAll>
 8006b74:	4b57      	ldr	r3, [pc, #348]	; (8006cd4 <pvPortMalloc+0x170>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <pvPortMalloc+0x1c>
 8006b7c:	f000 f90c 	bl	8006d98 <prvHeapInit>
 8006b80:	4b55      	ldr	r3, [pc, #340]	; (8006cd8 <pvPortMalloc+0x174>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 808c 	bne.w	8006ca6 <pvPortMalloc+0x142>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01c      	beq.n	8006bce <pvPortMalloc+0x6a>
 8006b94:	2208      	movs	r2, #8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f003 0307 	and.w	r3, r3, #7
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d013      	beq.n	8006bce <pvPortMalloc+0x6a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f023 0307 	bic.w	r3, r3, #7
 8006bac:	3308      	adds	r3, #8
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f003 0307 	and.w	r3, r3, #7
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <pvPortMalloc+0x6a>
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e7fe      	b.n	8006bcc <pvPortMalloc+0x68>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d068      	beq.n	8006ca6 <pvPortMalloc+0x142>
 8006bd4:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <pvPortMalloc+0x178>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d863      	bhi.n	8006ca6 <pvPortMalloc+0x142>
 8006bde:	4b40      	ldr	r3, [pc, #256]	; (8006ce0 <pvPortMalloc+0x17c>)
 8006be0:	623b      	str	r3, [r7, #32]
 8006be2:	4b3f      	ldr	r3, [pc, #252]	; (8006ce0 <pvPortMalloc+0x17c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
 8006be8:	e004      	b.n	8006bf4 <pvPortMalloc+0x90>
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	623b      	str	r3, [r7, #32]
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d903      	bls.n	8006c06 <pvPortMalloc+0xa2>
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f1      	bne.n	8006bea <pvPortMalloc+0x86>
 8006c06:	4b33      	ldr	r3, [pc, #204]	; (8006cd4 <pvPortMalloc+0x170>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d04a      	beq.n	8006ca6 <pvPortMalloc+0x142>
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2208      	movs	r2, #8
 8006c16:	4413      	add	r3, r2
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d91e      	bls.n	8006c70 <pvPortMalloc+0x10c>
 8006c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <pvPortMalloc+0xf4>
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	613b      	str	r3, [r7, #16]
 8006c56:	e7fe      	b.n	8006c56 <pvPortMalloc+0xf2>
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	605a      	str	r2, [r3, #4]
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
 8006c6a:	69b8      	ldr	r0, [r7, #24]
 8006c6c:	f000 f8f6 	bl	8006e5c <prvInsertBlockIntoFreeList>
 8006c70:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <pvPortMalloc+0x178>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <pvPortMalloc+0x178>)
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <pvPortMalloc+0x178>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <pvPortMalloc+0x180>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d203      	bcs.n	8006c92 <pvPortMalloc+0x12e>
 8006c8a:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <pvPortMalloc+0x178>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <pvPortMalloc+0x180>)
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <pvPortMalloc+0x174>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	431a      	orrs	r2, r3
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	605a      	str	r2, [r3, #4]
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f7ff fa71 	bl	800618c <xTaskResumeAll>
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f003 0307 	and.w	r3, r3, #7
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d009      	beq.n	8006cc8 <pvPortMalloc+0x164>
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e7fe      	b.n	8006cc6 <pvPortMalloc+0x162>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3728      	adds	r7, #40	; 0x28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20004028 	.word	0x20004028
 8006cd8:	20004034 	.word	0x20004034
 8006cdc:	2000402c 	.word	0x2000402c
 8006ce0:	20004020 	.word	0x20004020
 8006ce4:	20004030 	.word	0x20004030

08006ce8 <vPortFree>:
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d046      	beq.n	8006d88 <vPortFree+0xa0>
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	425b      	negs	r3, r3
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4413      	add	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <vPortFree+0xa8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4013      	ands	r3, r2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <vPortFree+0x42>
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e7fe      	b.n	8006d28 <vPortFree+0x40>
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <vPortFree+0x5e>
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60bb      	str	r3, [r7, #8]
 8006d44:	e7fe      	b.n	8006d44 <vPortFree+0x5c>
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <vPortFree+0xa8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d019      	beq.n	8006d88 <vPortFree+0xa0>
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d115      	bne.n	8006d88 <vPortFree+0xa0>
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <vPortFree+0xa8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	401a      	ands	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	605a      	str	r2, [r3, #4]
 8006d6c:	f7ff fa00 	bl	8006170 <vTaskSuspendAll>
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <vPortFree+0xac>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4413      	add	r3, r2
 8006d7a:	4a06      	ldr	r2, [pc, #24]	; (8006d94 <vPortFree+0xac>)
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f000 f86c 	bl	8006e5c <prvInsertBlockIntoFreeList>
 8006d84:	f7ff fa02 	bl	800618c <xTaskResumeAll>
 8006d88:	bf00      	nop
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20004034 	.word	0x20004034
 8006d94:	2000402c 	.word	0x2000402c

08006d98 <prvHeapInit>:
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006da2:	60bb      	str	r3, [r7, #8]
 8006da4:	4b27      	ldr	r3, [pc, #156]	; (8006e44 <prvHeapInit+0xac>)
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <prvHeapInit+0x34>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3307      	adds	r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a1f      	ldr	r2, [pc, #124]	; (8006e44 <prvHeapInit+0xac>)
 8006dc8:	4413      	add	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <prvHeapInit+0xb0>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <prvHeapInit+0xb0>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	605a      	str	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	2208      	movs	r2, #8
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0307 	bic.w	r3, r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <prvHeapInit+0xb4>)
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <prvHeapInit+0xb4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <prvHeapInit+0xb4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2200      	movs	r2, #0
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <prvHeapInit+0xb4>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <prvHeapInit+0xb8>)
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4a09      	ldr	r2, [pc, #36]	; (8006e54 <prvHeapInit+0xbc>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <prvHeapInit+0xc0>)
 8006e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20000420 	.word	0x20000420
 8006e48:	20004020 	.word	0x20004020
 8006e4c:	20004028 	.word	0x20004028
 8006e50:	20004030 	.word	0x20004030
 8006e54:	2000402c 	.word	0x2000402c
 8006e58:	20004034 	.word	0x20004034

08006e5c <prvInsertBlockIntoFreeList>:
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <prvInsertBlockIntoFreeList+0xac>)
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e002      	b.n	8006e70 <prvInsertBlockIntoFreeList+0x14>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d8f7      	bhi.n	8006e6a <prvInsertBlockIntoFreeList+0xe>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	60bb      	str	r3, [r7, #8]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	4413      	add	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d108      	bne.n	8006e9e <prvInsertBlockIntoFreeList+0x42>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	441a      	add	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d118      	bne.n	8006ee4 <prvInsertBlockIntoFreeList+0x88>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <prvInsertBlockIntoFreeList+0xb0>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d00d      	beq.n	8006eda <prvInsertBlockIntoFreeList+0x7e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	441a      	add	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e008      	b.n	8006eec <prvInsertBlockIntoFreeList+0x90>
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <prvInsertBlockIntoFreeList+0xb0>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e003      	b.n	8006eec <prvInsertBlockIntoFreeList+0x90>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <prvInsertBlockIntoFreeList+0x9e>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20004020 	.word	0x20004020
 8006f0c:	20004028 	.word	0x20004028

08006f10 <__errno>:
 8006f10:	4b01      	ldr	r3, [pc, #4]	; (8006f18 <__errno+0x8>)
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000010 	.word	0x20000010

08006f1c <__libc_init_array>:
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	4e0d      	ldr	r6, [pc, #52]	; (8006f54 <__libc_init_array+0x38>)
 8006f20:	4c0d      	ldr	r4, [pc, #52]	; (8006f58 <__libc_init_array+0x3c>)
 8006f22:	1ba4      	subs	r4, r4, r6
 8006f24:	10a4      	asrs	r4, r4, #2
 8006f26:	2500      	movs	r5, #0
 8006f28:	42a5      	cmp	r5, r4
 8006f2a:	d109      	bne.n	8006f40 <__libc_init_array+0x24>
 8006f2c:	4e0b      	ldr	r6, [pc, #44]	; (8006f5c <__libc_init_array+0x40>)
 8006f2e:	4c0c      	ldr	r4, [pc, #48]	; (8006f60 <__libc_init_array+0x44>)
 8006f30:	f000 ff56 	bl	8007de0 <_init>
 8006f34:	1ba4      	subs	r4, r4, r6
 8006f36:	10a4      	asrs	r4, r4, #2
 8006f38:	2500      	movs	r5, #0
 8006f3a:	42a5      	cmp	r5, r4
 8006f3c:	d105      	bne.n	8006f4a <__libc_init_array+0x2e>
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f44:	4798      	blx	r3
 8006f46:	3501      	adds	r5, #1
 8006f48:	e7ee      	b.n	8006f28 <__libc_init_array+0xc>
 8006f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f4e:	4798      	blx	r3
 8006f50:	3501      	adds	r5, #1
 8006f52:	e7f2      	b.n	8006f3a <__libc_init_array+0x1e>
 8006f54:	08008020 	.word	0x08008020
 8006f58:	08008020 	.word	0x08008020
 8006f5c:	08008020 	.word	0x08008020
 8006f60:	08008024 	.word	0x08008024

08006f64 <malloc>:
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <malloc+0xc>)
 8006f66:	4601      	mov	r1, r0
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	f000 b859 	b.w	8007020 <_malloc_r>
 8006f6e:	bf00      	nop
 8006f70:	20000010 	.word	0x20000010

08006f74 <memset>:
 8006f74:	4402      	add	r2, r0
 8006f76:	4603      	mov	r3, r0
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d100      	bne.n	8006f7e <memset+0xa>
 8006f7c:	4770      	bx	lr
 8006f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f82:	e7f9      	b.n	8006f78 <memset+0x4>

08006f84 <_free_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4605      	mov	r5, r0
 8006f88:	2900      	cmp	r1, #0
 8006f8a:	d045      	beq.n	8007018 <_free_r+0x94>
 8006f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f90:	1f0c      	subs	r4, r1, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfb8      	it	lt
 8006f96:	18e4      	addlt	r4, r4, r3
 8006f98:	f000 f98e 	bl	80072b8 <__malloc_lock>
 8006f9c:	4a1f      	ldr	r2, [pc, #124]	; (800701c <_free_r+0x98>)
 8006f9e:	6813      	ldr	r3, [r2, #0]
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	b933      	cbnz	r3, 8006fb2 <_free_r+0x2e>
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	6014      	str	r4, [r2, #0]
 8006fa8:	4628      	mov	r0, r5
 8006faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fae:	f000 b984 	b.w	80072ba <__malloc_unlock>
 8006fb2:	42a3      	cmp	r3, r4
 8006fb4:	d90c      	bls.n	8006fd0 <_free_r+0x4c>
 8006fb6:	6821      	ldr	r1, [r4, #0]
 8006fb8:	1862      	adds	r2, r4, r1
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	bf04      	itt	eq
 8006fbe:	681a      	ldreq	r2, [r3, #0]
 8006fc0:	685b      	ldreq	r3, [r3, #4]
 8006fc2:	6063      	str	r3, [r4, #4]
 8006fc4:	bf04      	itt	eq
 8006fc6:	1852      	addeq	r2, r2, r1
 8006fc8:	6022      	streq	r2, [r4, #0]
 8006fca:	6004      	str	r4, [r0, #0]
 8006fcc:	e7ec      	b.n	8006fa8 <_free_r+0x24>
 8006fce:	4613      	mov	r3, r2
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	b10a      	cbz	r2, 8006fd8 <_free_r+0x54>
 8006fd4:	42a2      	cmp	r2, r4
 8006fd6:	d9fa      	bls.n	8006fce <_free_r+0x4a>
 8006fd8:	6819      	ldr	r1, [r3, #0]
 8006fda:	1858      	adds	r0, r3, r1
 8006fdc:	42a0      	cmp	r0, r4
 8006fde:	d10b      	bne.n	8006ff8 <_free_r+0x74>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	4401      	add	r1, r0
 8006fe4:	1858      	adds	r0, r3, r1
 8006fe6:	4282      	cmp	r2, r0
 8006fe8:	6019      	str	r1, [r3, #0]
 8006fea:	d1dd      	bne.n	8006fa8 <_free_r+0x24>
 8006fec:	6810      	ldr	r0, [r2, #0]
 8006fee:	6852      	ldr	r2, [r2, #4]
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	4401      	add	r1, r0
 8006ff4:	6019      	str	r1, [r3, #0]
 8006ff6:	e7d7      	b.n	8006fa8 <_free_r+0x24>
 8006ff8:	d902      	bls.n	8007000 <_free_r+0x7c>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	e7d3      	b.n	8006fa8 <_free_r+0x24>
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	1821      	adds	r1, r4, r0
 8007004:	428a      	cmp	r2, r1
 8007006:	bf04      	itt	eq
 8007008:	6811      	ldreq	r1, [r2, #0]
 800700a:	6852      	ldreq	r2, [r2, #4]
 800700c:	6062      	str	r2, [r4, #4]
 800700e:	bf04      	itt	eq
 8007010:	1809      	addeq	r1, r1, r0
 8007012:	6021      	streq	r1, [r4, #0]
 8007014:	605c      	str	r4, [r3, #4]
 8007016:	e7c7      	b.n	8006fa8 <_free_r+0x24>
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	bf00      	nop
 800701c:	20004038 	.word	0x20004038

08007020 <_malloc_r>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	1ccd      	adds	r5, r1, #3
 8007024:	f025 0503 	bic.w	r5, r5, #3
 8007028:	3508      	adds	r5, #8
 800702a:	2d0c      	cmp	r5, #12
 800702c:	bf38      	it	cc
 800702e:	250c      	movcc	r5, #12
 8007030:	2d00      	cmp	r5, #0
 8007032:	4606      	mov	r6, r0
 8007034:	db01      	blt.n	800703a <_malloc_r+0x1a>
 8007036:	42a9      	cmp	r1, r5
 8007038:	d903      	bls.n	8007042 <_malloc_r+0x22>
 800703a:	230c      	movs	r3, #12
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	2000      	movs	r0, #0
 8007040:	bd70      	pop	{r4, r5, r6, pc}
 8007042:	f000 f939 	bl	80072b8 <__malloc_lock>
 8007046:	4a21      	ldr	r2, [pc, #132]	; (80070cc <_malloc_r+0xac>)
 8007048:	6814      	ldr	r4, [r2, #0]
 800704a:	4621      	mov	r1, r4
 800704c:	b991      	cbnz	r1, 8007074 <_malloc_r+0x54>
 800704e:	4c20      	ldr	r4, [pc, #128]	; (80070d0 <_malloc_r+0xb0>)
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	b91b      	cbnz	r3, 800705c <_malloc_r+0x3c>
 8007054:	4630      	mov	r0, r6
 8007056:	f000 f855 	bl	8007104 <_sbrk_r>
 800705a:	6020      	str	r0, [r4, #0]
 800705c:	4629      	mov	r1, r5
 800705e:	4630      	mov	r0, r6
 8007060:	f000 f850 	bl	8007104 <_sbrk_r>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d124      	bne.n	80070b2 <_malloc_r+0x92>
 8007068:	230c      	movs	r3, #12
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	4630      	mov	r0, r6
 800706e:	f000 f924 	bl	80072ba <__malloc_unlock>
 8007072:	e7e4      	b.n	800703e <_malloc_r+0x1e>
 8007074:	680b      	ldr	r3, [r1, #0]
 8007076:	1b5b      	subs	r3, r3, r5
 8007078:	d418      	bmi.n	80070ac <_malloc_r+0x8c>
 800707a:	2b0b      	cmp	r3, #11
 800707c:	d90f      	bls.n	800709e <_malloc_r+0x7e>
 800707e:	600b      	str	r3, [r1, #0]
 8007080:	50cd      	str	r5, [r1, r3]
 8007082:	18cc      	adds	r4, r1, r3
 8007084:	4630      	mov	r0, r6
 8007086:	f000 f918 	bl	80072ba <__malloc_unlock>
 800708a:	f104 000b 	add.w	r0, r4, #11
 800708e:	1d23      	adds	r3, r4, #4
 8007090:	f020 0007 	bic.w	r0, r0, #7
 8007094:	1ac3      	subs	r3, r0, r3
 8007096:	d0d3      	beq.n	8007040 <_malloc_r+0x20>
 8007098:	425a      	negs	r2, r3
 800709a:	50e2      	str	r2, [r4, r3]
 800709c:	e7d0      	b.n	8007040 <_malloc_r+0x20>
 800709e:	428c      	cmp	r4, r1
 80070a0:	684b      	ldr	r3, [r1, #4]
 80070a2:	bf16      	itet	ne
 80070a4:	6063      	strne	r3, [r4, #4]
 80070a6:	6013      	streq	r3, [r2, #0]
 80070a8:	460c      	movne	r4, r1
 80070aa:	e7eb      	b.n	8007084 <_malloc_r+0x64>
 80070ac:	460c      	mov	r4, r1
 80070ae:	6849      	ldr	r1, [r1, #4]
 80070b0:	e7cc      	b.n	800704c <_malloc_r+0x2c>
 80070b2:	1cc4      	adds	r4, r0, #3
 80070b4:	f024 0403 	bic.w	r4, r4, #3
 80070b8:	42a0      	cmp	r0, r4
 80070ba:	d005      	beq.n	80070c8 <_malloc_r+0xa8>
 80070bc:	1a21      	subs	r1, r4, r0
 80070be:	4630      	mov	r0, r6
 80070c0:	f000 f820 	bl	8007104 <_sbrk_r>
 80070c4:	3001      	adds	r0, #1
 80070c6:	d0cf      	beq.n	8007068 <_malloc_r+0x48>
 80070c8:	6025      	str	r5, [r4, #0]
 80070ca:	e7db      	b.n	8007084 <_malloc_r+0x64>
 80070cc:	20004038 	.word	0x20004038
 80070d0:	2000403c 	.word	0x2000403c

080070d4 <iprintf>:
 80070d4:	b40f      	push	{r0, r1, r2, r3}
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <iprintf+0x2c>)
 80070d8:	b513      	push	{r0, r1, r4, lr}
 80070da:	681c      	ldr	r4, [r3, #0]
 80070dc:	b124      	cbz	r4, 80070e8 <iprintf+0x14>
 80070de:	69a3      	ldr	r3, [r4, #24]
 80070e0:	b913      	cbnz	r3, 80070e8 <iprintf+0x14>
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 f85e 	bl	80071a4 <__sinit>
 80070e8:	ab05      	add	r3, sp, #20
 80070ea:	9a04      	ldr	r2, [sp, #16]
 80070ec:	68a1      	ldr	r1, [r4, #8]
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f90d 	bl	8007310 <_vfiprintf_r>
 80070f6:	b002      	add	sp, #8
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070fc:	b004      	add	sp, #16
 80070fe:	4770      	bx	lr
 8007100:	20000010 	.word	0x20000010

08007104 <_sbrk_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4c06      	ldr	r4, [pc, #24]	; (8007120 <_sbrk_r+0x1c>)
 8007108:	2300      	movs	r3, #0
 800710a:	4605      	mov	r5, r0
 800710c:	4608      	mov	r0, r1
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	f7fb f94e 	bl	80023b0 <_sbrk>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_sbrk_r+0x1a>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	b103      	cbz	r3, 800711e <_sbrk_r+0x1a>
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	20004398 	.word	0x20004398

08007124 <std>:
 8007124:	2300      	movs	r3, #0
 8007126:	b510      	push	{r4, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	e9c0 3300 	strd	r3, r3, [r0]
 800712e:	6083      	str	r3, [r0, #8]
 8007130:	8181      	strh	r1, [r0, #12]
 8007132:	6643      	str	r3, [r0, #100]	; 0x64
 8007134:	81c2      	strh	r2, [r0, #14]
 8007136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800713a:	6183      	str	r3, [r0, #24]
 800713c:	4619      	mov	r1, r3
 800713e:	2208      	movs	r2, #8
 8007140:	305c      	adds	r0, #92	; 0x5c
 8007142:	f7ff ff17 	bl	8006f74 <memset>
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x38>)
 8007148:	6263      	str	r3, [r4, #36]	; 0x24
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <std+0x3c>)
 800714c:	62a3      	str	r3, [r4, #40]	; 0x28
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <std+0x40>)
 8007150:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007152:	4b05      	ldr	r3, [pc, #20]	; (8007168 <std+0x44>)
 8007154:	6224      	str	r4, [r4, #32]
 8007156:	6323      	str	r3, [r4, #48]	; 0x30
 8007158:	bd10      	pop	{r4, pc}
 800715a:	bf00      	nop
 800715c:	0800784d 	.word	0x0800784d
 8007160:	0800786f 	.word	0x0800786f
 8007164:	080078a7 	.word	0x080078a7
 8007168:	080078cb 	.word	0x080078cb

0800716c <_cleanup_r>:
 800716c:	4901      	ldr	r1, [pc, #4]	; (8007174 <_cleanup_r+0x8>)
 800716e:	f000 b885 	b.w	800727c <_fwalk_reent>
 8007172:	bf00      	nop
 8007174:	08007ba5 	.word	0x08007ba5

08007178 <__sfmoreglue>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	1e4a      	subs	r2, r1, #1
 800717c:	2568      	movs	r5, #104	; 0x68
 800717e:	4355      	muls	r5, r2
 8007180:	460e      	mov	r6, r1
 8007182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007186:	f7ff ff4b 	bl	8007020 <_malloc_r>
 800718a:	4604      	mov	r4, r0
 800718c:	b140      	cbz	r0, 80071a0 <__sfmoreglue+0x28>
 800718e:	2100      	movs	r1, #0
 8007190:	e9c0 1600 	strd	r1, r6, [r0]
 8007194:	300c      	adds	r0, #12
 8007196:	60a0      	str	r0, [r4, #8]
 8007198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800719c:	f7ff feea 	bl	8006f74 <memset>
 80071a0:	4620      	mov	r0, r4
 80071a2:	bd70      	pop	{r4, r5, r6, pc}

080071a4 <__sinit>:
 80071a4:	6983      	ldr	r3, [r0, #24]
 80071a6:	b510      	push	{r4, lr}
 80071a8:	4604      	mov	r4, r0
 80071aa:	bb33      	cbnz	r3, 80071fa <__sinit+0x56>
 80071ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80071b0:	6503      	str	r3, [r0, #80]	; 0x50
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <__sinit+0x58>)
 80071b4:	4a12      	ldr	r2, [pc, #72]	; (8007200 <__sinit+0x5c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6282      	str	r2, [r0, #40]	; 0x28
 80071ba:	4298      	cmp	r0, r3
 80071bc:	bf04      	itt	eq
 80071be:	2301      	moveq	r3, #1
 80071c0:	6183      	streq	r3, [r0, #24]
 80071c2:	f000 f81f 	bl	8007204 <__sfp>
 80071c6:	6060      	str	r0, [r4, #4]
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 f81b 	bl	8007204 <__sfp>
 80071ce:	60a0      	str	r0, [r4, #8]
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f817 	bl	8007204 <__sfp>
 80071d6:	2200      	movs	r2, #0
 80071d8:	60e0      	str	r0, [r4, #12]
 80071da:	2104      	movs	r1, #4
 80071dc:	6860      	ldr	r0, [r4, #4]
 80071de:	f7ff ffa1 	bl	8007124 <std>
 80071e2:	2201      	movs	r2, #1
 80071e4:	2109      	movs	r1, #9
 80071e6:	68a0      	ldr	r0, [r4, #8]
 80071e8:	f7ff ff9c 	bl	8007124 <std>
 80071ec:	2202      	movs	r2, #2
 80071ee:	2112      	movs	r1, #18
 80071f0:	68e0      	ldr	r0, [r4, #12]
 80071f2:	f7ff ff97 	bl	8007124 <std>
 80071f6:	2301      	movs	r3, #1
 80071f8:	61a3      	str	r3, [r4, #24]
 80071fa:	bd10      	pop	{r4, pc}
 80071fc:	08007f80 	.word	0x08007f80
 8007200:	0800716d 	.word	0x0800716d

08007204 <__sfp>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <__sfp+0x70>)
 8007208:	681e      	ldr	r6, [r3, #0]
 800720a:	69b3      	ldr	r3, [r6, #24]
 800720c:	4607      	mov	r7, r0
 800720e:	b913      	cbnz	r3, 8007216 <__sfp+0x12>
 8007210:	4630      	mov	r0, r6
 8007212:	f7ff ffc7 	bl	80071a4 <__sinit>
 8007216:	3648      	adds	r6, #72	; 0x48
 8007218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800721c:	3b01      	subs	r3, #1
 800721e:	d503      	bpl.n	8007228 <__sfp+0x24>
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	b133      	cbz	r3, 8007232 <__sfp+0x2e>
 8007224:	6836      	ldr	r6, [r6, #0]
 8007226:	e7f7      	b.n	8007218 <__sfp+0x14>
 8007228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800722c:	b16d      	cbz	r5, 800724a <__sfp+0x46>
 800722e:	3468      	adds	r4, #104	; 0x68
 8007230:	e7f4      	b.n	800721c <__sfp+0x18>
 8007232:	2104      	movs	r1, #4
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ff9f 	bl	8007178 <__sfmoreglue>
 800723a:	6030      	str	r0, [r6, #0]
 800723c:	2800      	cmp	r0, #0
 800723e:	d1f1      	bne.n	8007224 <__sfp+0x20>
 8007240:	230c      	movs	r3, #12
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	4604      	mov	r4, r0
 8007246:	4620      	mov	r0, r4
 8007248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724a:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <__sfp+0x74>)
 800724c:	6665      	str	r5, [r4, #100]	; 0x64
 800724e:	e9c4 5500 	strd	r5, r5, [r4]
 8007252:	60a5      	str	r5, [r4, #8]
 8007254:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007258:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800725c:	2208      	movs	r2, #8
 800725e:	4629      	mov	r1, r5
 8007260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007264:	f7ff fe86 	bl	8006f74 <memset>
 8007268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800726c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007270:	e7e9      	b.n	8007246 <__sfp+0x42>
 8007272:	bf00      	nop
 8007274:	08007f80 	.word	0x08007f80
 8007278:	ffff0001 	.word	0xffff0001

0800727c <_fwalk_reent>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4680      	mov	r8, r0
 8007282:	4689      	mov	r9, r1
 8007284:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007288:	2600      	movs	r6, #0
 800728a:	b914      	cbnz	r4, 8007292 <_fwalk_reent+0x16>
 800728c:	4630      	mov	r0, r6
 800728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007292:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007296:	3f01      	subs	r7, #1
 8007298:	d501      	bpl.n	800729e <_fwalk_reent+0x22>
 800729a:	6824      	ldr	r4, [r4, #0]
 800729c:	e7f5      	b.n	800728a <_fwalk_reent+0xe>
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d907      	bls.n	80072b4 <_fwalk_reent+0x38>
 80072a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072a8:	3301      	adds	r3, #1
 80072aa:	d003      	beq.n	80072b4 <_fwalk_reent+0x38>
 80072ac:	4629      	mov	r1, r5
 80072ae:	4640      	mov	r0, r8
 80072b0:	47c8      	blx	r9
 80072b2:	4306      	orrs	r6, r0
 80072b4:	3568      	adds	r5, #104	; 0x68
 80072b6:	e7ee      	b.n	8007296 <_fwalk_reent+0x1a>

080072b8 <__malloc_lock>:
 80072b8:	4770      	bx	lr

080072ba <__malloc_unlock>:
 80072ba:	4770      	bx	lr

080072bc <__sfputc_r>:
 80072bc:	6893      	ldr	r3, [r2, #8]
 80072be:	3b01      	subs	r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	b410      	push	{r4}
 80072c4:	6093      	str	r3, [r2, #8]
 80072c6:	da08      	bge.n	80072da <__sfputc_r+0x1e>
 80072c8:	6994      	ldr	r4, [r2, #24]
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	db01      	blt.n	80072d2 <__sfputc_r+0x16>
 80072ce:	290a      	cmp	r1, #10
 80072d0:	d103      	bne.n	80072da <__sfputc_r+0x1e>
 80072d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d6:	f000 bafd 	b.w	80078d4 <__swbuf_r>
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	1c58      	adds	r0, r3, #1
 80072de:	6010      	str	r0, [r2, #0]
 80072e0:	7019      	strb	r1, [r3, #0]
 80072e2:	4608      	mov	r0, r1
 80072e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <__sfputs_r>:
 80072ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ec:	4606      	mov	r6, r0
 80072ee:	460f      	mov	r7, r1
 80072f0:	4614      	mov	r4, r2
 80072f2:	18d5      	adds	r5, r2, r3
 80072f4:	42ac      	cmp	r4, r5
 80072f6:	d101      	bne.n	80072fc <__sfputs_r+0x12>
 80072f8:	2000      	movs	r0, #0
 80072fa:	e007      	b.n	800730c <__sfputs_r+0x22>
 80072fc:	463a      	mov	r2, r7
 80072fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ffda 	bl	80072bc <__sfputc_r>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d1f3      	bne.n	80072f4 <__sfputs_r+0xa>
 800730c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007310 <_vfiprintf_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	460c      	mov	r4, r1
 8007316:	b09d      	sub	sp, #116	; 0x74
 8007318:	4617      	mov	r7, r2
 800731a:	461d      	mov	r5, r3
 800731c:	4606      	mov	r6, r0
 800731e:	b118      	cbz	r0, 8007328 <_vfiprintf_r+0x18>
 8007320:	6983      	ldr	r3, [r0, #24]
 8007322:	b90b      	cbnz	r3, 8007328 <_vfiprintf_r+0x18>
 8007324:	f7ff ff3e 	bl	80071a4 <__sinit>
 8007328:	4b7c      	ldr	r3, [pc, #496]	; (800751c <_vfiprintf_r+0x20c>)
 800732a:	429c      	cmp	r4, r3
 800732c:	d158      	bne.n	80073e0 <_vfiprintf_r+0xd0>
 800732e:	6874      	ldr	r4, [r6, #4]
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	0718      	lsls	r0, r3, #28
 8007334:	d55e      	bpl.n	80073f4 <_vfiprintf_r+0xe4>
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d05b      	beq.n	80073f4 <_vfiprintf_r+0xe4>
 800733c:	2300      	movs	r3, #0
 800733e:	9309      	str	r3, [sp, #36]	; 0x24
 8007340:	2320      	movs	r3, #32
 8007342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007346:	2330      	movs	r3, #48	; 0x30
 8007348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800734c:	9503      	str	r5, [sp, #12]
 800734e:	f04f 0b01 	mov.w	fp, #1
 8007352:	46b8      	mov	r8, r7
 8007354:	4645      	mov	r5, r8
 8007356:	f815 3b01 	ldrb.w	r3, [r5], #1
 800735a:	b10b      	cbz	r3, 8007360 <_vfiprintf_r+0x50>
 800735c:	2b25      	cmp	r3, #37	; 0x25
 800735e:	d154      	bne.n	800740a <_vfiprintf_r+0xfa>
 8007360:	ebb8 0a07 	subs.w	sl, r8, r7
 8007364:	d00b      	beq.n	800737e <_vfiprintf_r+0x6e>
 8007366:	4653      	mov	r3, sl
 8007368:	463a      	mov	r2, r7
 800736a:	4621      	mov	r1, r4
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ffbc 	bl	80072ea <__sfputs_r>
 8007372:	3001      	adds	r0, #1
 8007374:	f000 80c2 	beq.w	80074fc <_vfiprintf_r+0x1ec>
 8007378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737a:	4453      	add	r3, sl
 800737c:	9309      	str	r3, [sp, #36]	; 0x24
 800737e:	f898 3000 	ldrb.w	r3, [r8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80ba 	beq.w	80074fc <_vfiprintf_r+0x1ec>
 8007388:	2300      	movs	r3, #0
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007392:	9304      	str	r3, [sp, #16]
 8007394:	9307      	str	r3, [sp, #28]
 8007396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800739a:	931a      	str	r3, [sp, #104]	; 0x68
 800739c:	46a8      	mov	r8, r5
 800739e:	2205      	movs	r2, #5
 80073a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80073a4:	485e      	ldr	r0, [pc, #376]	; (8007520 <_vfiprintf_r+0x210>)
 80073a6:	f7f8 ff23 	bl	80001f0 <memchr>
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	bb78      	cbnz	r0, 800740e <_vfiprintf_r+0xfe>
 80073ae:	06d9      	lsls	r1, r3, #27
 80073b0:	bf44      	itt	mi
 80073b2:	2220      	movmi	r2, #32
 80073b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073b8:	071a      	lsls	r2, r3, #28
 80073ba:	bf44      	itt	mi
 80073bc:	222b      	movmi	r2, #43	; 0x2b
 80073be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80073c2:	782a      	ldrb	r2, [r5, #0]
 80073c4:	2a2a      	cmp	r2, #42	; 0x2a
 80073c6:	d02a      	beq.n	800741e <_vfiprintf_r+0x10e>
 80073c8:	9a07      	ldr	r2, [sp, #28]
 80073ca:	46a8      	mov	r8, r5
 80073cc:	2000      	movs	r0, #0
 80073ce:	250a      	movs	r5, #10
 80073d0:	4641      	mov	r1, r8
 80073d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073d6:	3b30      	subs	r3, #48	; 0x30
 80073d8:	2b09      	cmp	r3, #9
 80073da:	d969      	bls.n	80074b0 <_vfiprintf_r+0x1a0>
 80073dc:	b360      	cbz	r0, 8007438 <_vfiprintf_r+0x128>
 80073de:	e024      	b.n	800742a <_vfiprintf_r+0x11a>
 80073e0:	4b50      	ldr	r3, [pc, #320]	; (8007524 <_vfiprintf_r+0x214>)
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d101      	bne.n	80073ea <_vfiprintf_r+0xda>
 80073e6:	68b4      	ldr	r4, [r6, #8]
 80073e8:	e7a2      	b.n	8007330 <_vfiprintf_r+0x20>
 80073ea:	4b4f      	ldr	r3, [pc, #316]	; (8007528 <_vfiprintf_r+0x218>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	bf08      	it	eq
 80073f0:	68f4      	ldreq	r4, [r6, #12]
 80073f2:	e79d      	b.n	8007330 <_vfiprintf_r+0x20>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4630      	mov	r0, r6
 80073f8:	f000 fad0 	bl	800799c <__swsetup_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d09d      	beq.n	800733c <_vfiprintf_r+0x2c>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b01d      	add	sp, #116	; 0x74
 8007406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740a:	46a8      	mov	r8, r5
 800740c:	e7a2      	b.n	8007354 <_vfiprintf_r+0x44>
 800740e:	4a44      	ldr	r2, [pc, #272]	; (8007520 <_vfiprintf_r+0x210>)
 8007410:	1a80      	subs	r0, r0, r2
 8007412:	fa0b f000 	lsl.w	r0, fp, r0
 8007416:	4318      	orrs	r0, r3
 8007418:	9004      	str	r0, [sp, #16]
 800741a:	4645      	mov	r5, r8
 800741c:	e7be      	b.n	800739c <_vfiprintf_r+0x8c>
 800741e:	9a03      	ldr	r2, [sp, #12]
 8007420:	1d11      	adds	r1, r2, #4
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	9103      	str	r1, [sp, #12]
 8007426:	2a00      	cmp	r2, #0
 8007428:	db01      	blt.n	800742e <_vfiprintf_r+0x11e>
 800742a:	9207      	str	r2, [sp, #28]
 800742c:	e004      	b.n	8007438 <_vfiprintf_r+0x128>
 800742e:	4252      	negs	r2, r2
 8007430:	f043 0302 	orr.w	r3, r3, #2
 8007434:	9207      	str	r2, [sp, #28]
 8007436:	9304      	str	r3, [sp, #16]
 8007438:	f898 3000 	ldrb.w	r3, [r8]
 800743c:	2b2e      	cmp	r3, #46	; 0x2e
 800743e:	d10e      	bne.n	800745e <_vfiprintf_r+0x14e>
 8007440:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007444:	2b2a      	cmp	r3, #42	; 0x2a
 8007446:	d138      	bne.n	80074ba <_vfiprintf_r+0x1aa>
 8007448:	9b03      	ldr	r3, [sp, #12]
 800744a:	1d1a      	adds	r2, r3, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	9203      	str	r2, [sp, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	bfb8      	it	lt
 8007454:	f04f 33ff 	movlt.w	r3, #4294967295
 8007458:	f108 0802 	add.w	r8, r8, #2
 800745c:	9305      	str	r3, [sp, #20]
 800745e:	4d33      	ldr	r5, [pc, #204]	; (800752c <_vfiprintf_r+0x21c>)
 8007460:	f898 1000 	ldrb.w	r1, [r8]
 8007464:	2203      	movs	r2, #3
 8007466:	4628      	mov	r0, r5
 8007468:	f7f8 fec2 	bl	80001f0 <memchr>
 800746c:	b140      	cbz	r0, 8007480 <_vfiprintf_r+0x170>
 800746e:	2340      	movs	r3, #64	; 0x40
 8007470:	1b40      	subs	r0, r0, r5
 8007472:	fa03 f000 	lsl.w	r0, r3, r0
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	4303      	orrs	r3, r0
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	f898 1000 	ldrb.w	r1, [r8]
 8007484:	482a      	ldr	r0, [pc, #168]	; (8007530 <_vfiprintf_r+0x220>)
 8007486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800748a:	2206      	movs	r2, #6
 800748c:	f108 0701 	add.w	r7, r8, #1
 8007490:	f7f8 feae 	bl	80001f0 <memchr>
 8007494:	2800      	cmp	r0, #0
 8007496:	d037      	beq.n	8007508 <_vfiprintf_r+0x1f8>
 8007498:	4b26      	ldr	r3, [pc, #152]	; (8007534 <_vfiprintf_r+0x224>)
 800749a:	bb1b      	cbnz	r3, 80074e4 <_vfiprintf_r+0x1d4>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	3307      	adds	r3, #7
 80074a0:	f023 0307 	bic.w	r3, r3, #7
 80074a4:	3308      	adds	r3, #8
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	444b      	add	r3, r9
 80074ac:	9309      	str	r3, [sp, #36]	; 0x24
 80074ae:	e750      	b.n	8007352 <_vfiprintf_r+0x42>
 80074b0:	fb05 3202 	mla	r2, r5, r2, r3
 80074b4:	2001      	movs	r0, #1
 80074b6:	4688      	mov	r8, r1
 80074b8:	e78a      	b.n	80073d0 <_vfiprintf_r+0xc0>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f108 0801 	add.w	r8, r8, #1
 80074c0:	9305      	str	r3, [sp, #20]
 80074c2:	4619      	mov	r1, r3
 80074c4:	250a      	movs	r5, #10
 80074c6:	4640      	mov	r0, r8
 80074c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074cc:	3a30      	subs	r2, #48	; 0x30
 80074ce:	2a09      	cmp	r2, #9
 80074d0:	d903      	bls.n	80074da <_vfiprintf_r+0x1ca>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c3      	beq.n	800745e <_vfiprintf_r+0x14e>
 80074d6:	9105      	str	r1, [sp, #20]
 80074d8:	e7c1      	b.n	800745e <_vfiprintf_r+0x14e>
 80074da:	fb05 2101 	mla	r1, r5, r1, r2
 80074de:	2301      	movs	r3, #1
 80074e0:	4680      	mov	r8, r0
 80074e2:	e7f0      	b.n	80074c6 <_vfiprintf_r+0x1b6>
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4622      	mov	r2, r4
 80074ea:	4b13      	ldr	r3, [pc, #76]	; (8007538 <_vfiprintf_r+0x228>)
 80074ec:	a904      	add	r1, sp, #16
 80074ee:	4630      	mov	r0, r6
 80074f0:	f3af 8000 	nop.w
 80074f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80074f8:	4681      	mov	r9, r0
 80074fa:	d1d5      	bne.n	80074a8 <_vfiprintf_r+0x198>
 80074fc:	89a3      	ldrh	r3, [r4, #12]
 80074fe:	065b      	lsls	r3, r3, #25
 8007500:	f53f af7e 	bmi.w	8007400 <_vfiprintf_r+0xf0>
 8007504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007506:	e77d      	b.n	8007404 <_vfiprintf_r+0xf4>
 8007508:	ab03      	add	r3, sp, #12
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	4622      	mov	r2, r4
 800750e:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <_vfiprintf_r+0x228>)
 8007510:	a904      	add	r1, sp, #16
 8007512:	4630      	mov	r0, r6
 8007514:	f000 f888 	bl	8007628 <_printf_i>
 8007518:	e7ec      	b.n	80074f4 <_vfiprintf_r+0x1e4>
 800751a:	bf00      	nop
 800751c:	08007fa4 	.word	0x08007fa4
 8007520:	08007fe4 	.word	0x08007fe4
 8007524:	08007fc4 	.word	0x08007fc4
 8007528:	08007f84 	.word	0x08007f84
 800752c:	08007fea 	.word	0x08007fea
 8007530:	08007fee 	.word	0x08007fee
 8007534:	00000000 	.word	0x00000000
 8007538:	080072eb 	.word	0x080072eb

0800753c <_printf_common>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	4691      	mov	r9, r2
 8007542:	461f      	mov	r7, r3
 8007544:	688a      	ldr	r2, [r1, #8]
 8007546:	690b      	ldr	r3, [r1, #16]
 8007548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800754c:	4293      	cmp	r3, r2
 800754e:	bfb8      	it	lt
 8007550:	4613      	movlt	r3, r2
 8007552:	f8c9 3000 	str.w	r3, [r9]
 8007556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800755a:	4606      	mov	r6, r0
 800755c:	460c      	mov	r4, r1
 800755e:	b112      	cbz	r2, 8007566 <_printf_common+0x2a>
 8007560:	3301      	adds	r3, #1
 8007562:	f8c9 3000 	str.w	r3, [r9]
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	0699      	lsls	r1, r3, #26
 800756a:	bf42      	ittt	mi
 800756c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007570:	3302      	addmi	r3, #2
 8007572:	f8c9 3000 	strmi.w	r3, [r9]
 8007576:	6825      	ldr	r5, [r4, #0]
 8007578:	f015 0506 	ands.w	r5, r5, #6
 800757c:	d107      	bne.n	800758e <_printf_common+0x52>
 800757e:	f104 0a19 	add.w	sl, r4, #25
 8007582:	68e3      	ldr	r3, [r4, #12]
 8007584:	f8d9 2000 	ldr.w	r2, [r9]
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	42ab      	cmp	r3, r5
 800758c:	dc28      	bgt.n	80075e0 <_printf_common+0xa4>
 800758e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	3300      	adds	r3, #0
 8007596:	bf18      	it	ne
 8007598:	2301      	movne	r3, #1
 800759a:	0692      	lsls	r2, r2, #26
 800759c:	d42d      	bmi.n	80075fa <_printf_common+0xbe>
 800759e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a2:	4639      	mov	r1, r7
 80075a4:	4630      	mov	r0, r6
 80075a6:	47c0      	blx	r8
 80075a8:	3001      	adds	r0, #1
 80075aa:	d020      	beq.n	80075ee <_printf_common+0xb2>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	68e5      	ldr	r5, [r4, #12]
 80075b0:	f8d9 2000 	ldr.w	r2, [r9]
 80075b4:	f003 0306 	and.w	r3, r3, #6
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	bf08      	it	eq
 80075bc:	1aad      	subeq	r5, r5, r2
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	6922      	ldr	r2, [r4, #16]
 80075c2:	bf0c      	ite	eq
 80075c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075c8:	2500      	movne	r5, #0
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bfc4      	itt	gt
 80075ce:	1a9b      	subgt	r3, r3, r2
 80075d0:	18ed      	addgt	r5, r5, r3
 80075d2:	f04f 0900 	mov.w	r9, #0
 80075d6:	341a      	adds	r4, #26
 80075d8:	454d      	cmp	r5, r9
 80075da:	d11a      	bne.n	8007612 <_printf_common+0xd6>
 80075dc:	2000      	movs	r0, #0
 80075de:	e008      	b.n	80075f2 <_printf_common+0xb6>
 80075e0:	2301      	movs	r3, #1
 80075e2:	4652      	mov	r2, sl
 80075e4:	4639      	mov	r1, r7
 80075e6:	4630      	mov	r0, r6
 80075e8:	47c0      	blx	r8
 80075ea:	3001      	adds	r0, #1
 80075ec:	d103      	bne.n	80075f6 <_printf_common+0xba>
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	3501      	adds	r5, #1
 80075f8:	e7c3      	b.n	8007582 <_printf_common+0x46>
 80075fa:	18e1      	adds	r1, r4, r3
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	2030      	movs	r0, #48	; 0x30
 8007600:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007604:	4422      	add	r2, r4
 8007606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800760a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800760e:	3302      	adds	r3, #2
 8007610:	e7c5      	b.n	800759e <_printf_common+0x62>
 8007612:	2301      	movs	r3, #1
 8007614:	4622      	mov	r2, r4
 8007616:	4639      	mov	r1, r7
 8007618:	4630      	mov	r0, r6
 800761a:	47c0      	blx	r8
 800761c:	3001      	adds	r0, #1
 800761e:	d0e6      	beq.n	80075ee <_printf_common+0xb2>
 8007620:	f109 0901 	add.w	r9, r9, #1
 8007624:	e7d8      	b.n	80075d8 <_printf_common+0x9c>
	...

08007628 <_printf_i>:
 8007628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800762c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007630:	460c      	mov	r4, r1
 8007632:	7e09      	ldrb	r1, [r1, #24]
 8007634:	b085      	sub	sp, #20
 8007636:	296e      	cmp	r1, #110	; 0x6e
 8007638:	4617      	mov	r7, r2
 800763a:	4606      	mov	r6, r0
 800763c:	4698      	mov	r8, r3
 800763e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007640:	f000 80b3 	beq.w	80077aa <_printf_i+0x182>
 8007644:	d822      	bhi.n	800768c <_printf_i+0x64>
 8007646:	2963      	cmp	r1, #99	; 0x63
 8007648:	d036      	beq.n	80076b8 <_printf_i+0x90>
 800764a:	d80a      	bhi.n	8007662 <_printf_i+0x3a>
 800764c:	2900      	cmp	r1, #0
 800764e:	f000 80b9 	beq.w	80077c4 <_printf_i+0x19c>
 8007652:	2958      	cmp	r1, #88	; 0x58
 8007654:	f000 8083 	beq.w	800775e <_printf_i+0x136>
 8007658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800765c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007660:	e032      	b.n	80076c8 <_printf_i+0xa0>
 8007662:	2964      	cmp	r1, #100	; 0x64
 8007664:	d001      	beq.n	800766a <_printf_i+0x42>
 8007666:	2969      	cmp	r1, #105	; 0x69
 8007668:	d1f6      	bne.n	8007658 <_printf_i+0x30>
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	6813      	ldr	r3, [r2, #0]
 800766e:	0605      	lsls	r5, r0, #24
 8007670:	f103 0104 	add.w	r1, r3, #4
 8007674:	d52a      	bpl.n	80076cc <_printf_i+0xa4>
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	da03      	bge.n	8007686 <_printf_i+0x5e>
 800767e:	222d      	movs	r2, #45	; 0x2d
 8007680:	425b      	negs	r3, r3
 8007682:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007686:	486f      	ldr	r0, [pc, #444]	; (8007844 <_printf_i+0x21c>)
 8007688:	220a      	movs	r2, #10
 800768a:	e039      	b.n	8007700 <_printf_i+0xd8>
 800768c:	2973      	cmp	r1, #115	; 0x73
 800768e:	f000 809d 	beq.w	80077cc <_printf_i+0x1a4>
 8007692:	d808      	bhi.n	80076a6 <_printf_i+0x7e>
 8007694:	296f      	cmp	r1, #111	; 0x6f
 8007696:	d020      	beq.n	80076da <_printf_i+0xb2>
 8007698:	2970      	cmp	r1, #112	; 0x70
 800769a:	d1dd      	bne.n	8007658 <_printf_i+0x30>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	f043 0320 	orr.w	r3, r3, #32
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	e003      	b.n	80076ae <_printf_i+0x86>
 80076a6:	2975      	cmp	r1, #117	; 0x75
 80076a8:	d017      	beq.n	80076da <_printf_i+0xb2>
 80076aa:	2978      	cmp	r1, #120	; 0x78
 80076ac:	d1d4      	bne.n	8007658 <_printf_i+0x30>
 80076ae:	2378      	movs	r3, #120	; 0x78
 80076b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076b4:	4864      	ldr	r0, [pc, #400]	; (8007848 <_printf_i+0x220>)
 80076b6:	e055      	b.n	8007764 <_printf_i+0x13c>
 80076b8:	6813      	ldr	r3, [r2, #0]
 80076ba:	1d19      	adds	r1, r3, #4
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6011      	str	r1, [r2, #0]
 80076c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076c8:	2301      	movs	r3, #1
 80076ca:	e08c      	b.n	80077e6 <_printf_i+0x1be>
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6011      	str	r1, [r2, #0]
 80076d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076d4:	bf18      	it	ne
 80076d6:	b21b      	sxthne	r3, r3
 80076d8:	e7cf      	b.n	800767a <_printf_i+0x52>
 80076da:	6813      	ldr	r3, [r2, #0]
 80076dc:	6825      	ldr	r5, [r4, #0]
 80076de:	1d18      	adds	r0, r3, #4
 80076e0:	6010      	str	r0, [r2, #0]
 80076e2:	0628      	lsls	r0, r5, #24
 80076e4:	d501      	bpl.n	80076ea <_printf_i+0xc2>
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	e002      	b.n	80076f0 <_printf_i+0xc8>
 80076ea:	0668      	lsls	r0, r5, #25
 80076ec:	d5fb      	bpl.n	80076e6 <_printf_i+0xbe>
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	4854      	ldr	r0, [pc, #336]	; (8007844 <_printf_i+0x21c>)
 80076f2:	296f      	cmp	r1, #111	; 0x6f
 80076f4:	bf14      	ite	ne
 80076f6:	220a      	movne	r2, #10
 80076f8:	2208      	moveq	r2, #8
 80076fa:	2100      	movs	r1, #0
 80076fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007700:	6865      	ldr	r5, [r4, #4]
 8007702:	60a5      	str	r5, [r4, #8]
 8007704:	2d00      	cmp	r5, #0
 8007706:	f2c0 8095 	blt.w	8007834 <_printf_i+0x20c>
 800770a:	6821      	ldr	r1, [r4, #0]
 800770c:	f021 0104 	bic.w	r1, r1, #4
 8007710:	6021      	str	r1, [r4, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d13d      	bne.n	8007792 <_printf_i+0x16a>
 8007716:	2d00      	cmp	r5, #0
 8007718:	f040 808e 	bne.w	8007838 <_printf_i+0x210>
 800771c:	4665      	mov	r5, ip
 800771e:	2a08      	cmp	r2, #8
 8007720:	d10b      	bne.n	800773a <_printf_i+0x112>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	07db      	lsls	r3, r3, #31
 8007726:	d508      	bpl.n	800773a <_printf_i+0x112>
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	bfde      	ittt	le
 8007730:	2330      	movle	r3, #48	; 0x30
 8007732:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007736:	f105 35ff 	addle.w	r5, r5, #4294967295
 800773a:	ebac 0305 	sub.w	r3, ip, r5
 800773e:	6123      	str	r3, [r4, #16]
 8007740:	f8cd 8000 	str.w	r8, [sp]
 8007744:	463b      	mov	r3, r7
 8007746:	aa03      	add	r2, sp, #12
 8007748:	4621      	mov	r1, r4
 800774a:	4630      	mov	r0, r6
 800774c:	f7ff fef6 	bl	800753c <_printf_common>
 8007750:	3001      	adds	r0, #1
 8007752:	d14d      	bne.n	80077f0 <_printf_i+0x1c8>
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	b005      	add	sp, #20
 800775a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800775e:	4839      	ldr	r0, [pc, #228]	; (8007844 <_printf_i+0x21c>)
 8007760:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007764:	6813      	ldr	r3, [r2, #0]
 8007766:	6821      	ldr	r1, [r4, #0]
 8007768:	1d1d      	adds	r5, r3, #4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6015      	str	r5, [r2, #0]
 800776e:	060a      	lsls	r2, r1, #24
 8007770:	d50b      	bpl.n	800778a <_printf_i+0x162>
 8007772:	07ca      	lsls	r2, r1, #31
 8007774:	bf44      	itt	mi
 8007776:	f041 0120 	orrmi.w	r1, r1, #32
 800777a:	6021      	strmi	r1, [r4, #0]
 800777c:	b91b      	cbnz	r3, 8007786 <_printf_i+0x15e>
 800777e:	6822      	ldr	r2, [r4, #0]
 8007780:	f022 0220 	bic.w	r2, r2, #32
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	2210      	movs	r2, #16
 8007788:	e7b7      	b.n	80076fa <_printf_i+0xd2>
 800778a:	064d      	lsls	r5, r1, #25
 800778c:	bf48      	it	mi
 800778e:	b29b      	uxthmi	r3, r3
 8007790:	e7ef      	b.n	8007772 <_printf_i+0x14a>
 8007792:	4665      	mov	r5, ip
 8007794:	fbb3 f1f2 	udiv	r1, r3, r2
 8007798:	fb02 3311 	mls	r3, r2, r1, r3
 800779c:	5cc3      	ldrb	r3, [r0, r3]
 800779e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80077a2:	460b      	mov	r3, r1
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d1f5      	bne.n	8007794 <_printf_i+0x16c>
 80077a8:	e7b9      	b.n	800771e <_printf_i+0xf6>
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	6961      	ldr	r1, [r4, #20]
 80077b0:	1d18      	adds	r0, r3, #4
 80077b2:	6010      	str	r0, [r2, #0]
 80077b4:	0628      	lsls	r0, r5, #24
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	d501      	bpl.n	80077be <_printf_i+0x196>
 80077ba:	6019      	str	r1, [r3, #0]
 80077bc:	e002      	b.n	80077c4 <_printf_i+0x19c>
 80077be:	066a      	lsls	r2, r5, #25
 80077c0:	d5fb      	bpl.n	80077ba <_printf_i+0x192>
 80077c2:	8019      	strh	r1, [r3, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	6123      	str	r3, [r4, #16]
 80077c8:	4665      	mov	r5, ip
 80077ca:	e7b9      	b.n	8007740 <_printf_i+0x118>
 80077cc:	6813      	ldr	r3, [r2, #0]
 80077ce:	1d19      	adds	r1, r3, #4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	681d      	ldr	r5, [r3, #0]
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	2100      	movs	r1, #0
 80077d8:	4628      	mov	r0, r5
 80077da:	f7f8 fd09 	bl	80001f0 <memchr>
 80077de:	b108      	cbz	r0, 80077e4 <_printf_i+0x1bc>
 80077e0:	1b40      	subs	r0, r0, r5
 80077e2:	6060      	str	r0, [r4, #4]
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	2300      	movs	r3, #0
 80077ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ee:	e7a7      	b.n	8007740 <_printf_i+0x118>
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	462a      	mov	r2, r5
 80077f4:	4639      	mov	r1, r7
 80077f6:	4630      	mov	r0, r6
 80077f8:	47c0      	blx	r8
 80077fa:	3001      	adds	r0, #1
 80077fc:	d0aa      	beq.n	8007754 <_printf_i+0x12c>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	079b      	lsls	r3, r3, #30
 8007802:	d413      	bmi.n	800782c <_printf_i+0x204>
 8007804:	68e0      	ldr	r0, [r4, #12]
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	4298      	cmp	r0, r3
 800780a:	bfb8      	it	lt
 800780c:	4618      	movlt	r0, r3
 800780e:	e7a3      	b.n	8007758 <_printf_i+0x130>
 8007810:	2301      	movs	r3, #1
 8007812:	464a      	mov	r2, r9
 8007814:	4639      	mov	r1, r7
 8007816:	4630      	mov	r0, r6
 8007818:	47c0      	blx	r8
 800781a:	3001      	adds	r0, #1
 800781c:	d09a      	beq.n	8007754 <_printf_i+0x12c>
 800781e:	3501      	adds	r5, #1
 8007820:	68e3      	ldr	r3, [r4, #12]
 8007822:	9a03      	ldr	r2, [sp, #12]
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	42ab      	cmp	r3, r5
 8007828:	dcf2      	bgt.n	8007810 <_printf_i+0x1e8>
 800782a:	e7eb      	b.n	8007804 <_printf_i+0x1dc>
 800782c:	2500      	movs	r5, #0
 800782e:	f104 0919 	add.w	r9, r4, #25
 8007832:	e7f5      	b.n	8007820 <_printf_i+0x1f8>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1ac      	bne.n	8007792 <_printf_i+0x16a>
 8007838:	7803      	ldrb	r3, [r0, #0]
 800783a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800783e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007842:	e76c      	b.n	800771e <_printf_i+0xf6>
 8007844:	08007ff5 	.word	0x08007ff5
 8007848:	08008006 	.word	0x08008006

0800784c <__sread>:
 800784c:	b510      	push	{r4, lr}
 800784e:	460c      	mov	r4, r1
 8007850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007854:	f000 fa46 	bl	8007ce4 <_read_r>
 8007858:	2800      	cmp	r0, #0
 800785a:	bfab      	itete	ge
 800785c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800785e:	89a3      	ldrhlt	r3, [r4, #12]
 8007860:	181b      	addge	r3, r3, r0
 8007862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007866:	bfac      	ite	ge
 8007868:	6563      	strge	r3, [r4, #84]	; 0x54
 800786a:	81a3      	strhlt	r3, [r4, #12]
 800786c:	bd10      	pop	{r4, pc}

0800786e <__swrite>:
 800786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	461f      	mov	r7, r3
 8007874:	898b      	ldrh	r3, [r1, #12]
 8007876:	05db      	lsls	r3, r3, #23
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	4616      	mov	r6, r2
 800787e:	d505      	bpl.n	800788c <__swrite+0x1e>
 8007880:	2302      	movs	r3, #2
 8007882:	2200      	movs	r2, #0
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	f000 f9b6 	bl	8007bf8 <_lseek_r>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	4628      	mov	r0, r5
 800789e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a2:	f000 b869 	b.w	8007978 <_write_r>

080078a6 <__sseek>:
 80078a6:	b510      	push	{r4, lr}
 80078a8:	460c      	mov	r4, r1
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 f9a3 	bl	8007bf8 <_lseek_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	bf15      	itete	ne
 80078b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80078ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078c2:	81a3      	strheq	r3, [r4, #12]
 80078c4:	bf18      	it	ne
 80078c6:	81a3      	strhne	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__sclose>:
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 b8d3 	b.w	8007a78 <_close_r>
	...

080078d4 <__swbuf_r>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	460e      	mov	r6, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	4605      	mov	r5, r0
 80078dc:	b118      	cbz	r0, 80078e6 <__swbuf_r+0x12>
 80078de:	6983      	ldr	r3, [r0, #24]
 80078e0:	b90b      	cbnz	r3, 80078e6 <__swbuf_r+0x12>
 80078e2:	f7ff fc5f 	bl	80071a4 <__sinit>
 80078e6:	4b21      	ldr	r3, [pc, #132]	; (800796c <__swbuf_r+0x98>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d12a      	bne.n	8007942 <__swbuf_r+0x6e>
 80078ec:	686c      	ldr	r4, [r5, #4]
 80078ee:	69a3      	ldr	r3, [r4, #24]
 80078f0:	60a3      	str	r3, [r4, #8]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	071a      	lsls	r2, r3, #28
 80078f6:	d52e      	bpl.n	8007956 <__swbuf_r+0x82>
 80078f8:	6923      	ldr	r3, [r4, #16]
 80078fa:	b363      	cbz	r3, 8007956 <__swbuf_r+0x82>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	1ac0      	subs	r0, r0, r3
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	b2f6      	uxtb	r6, r6
 8007906:	4283      	cmp	r3, r0
 8007908:	4637      	mov	r7, r6
 800790a:	dc04      	bgt.n	8007916 <__swbuf_r+0x42>
 800790c:	4621      	mov	r1, r4
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f948 	bl	8007ba4 <_fflush_r>
 8007914:	bb28      	cbnz	r0, 8007962 <__swbuf_r+0x8e>
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	3b01      	subs	r3, #1
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	6022      	str	r2, [r4, #0]
 8007922:	701e      	strb	r6, [r3, #0]
 8007924:	6963      	ldr	r3, [r4, #20]
 8007926:	3001      	adds	r0, #1
 8007928:	4283      	cmp	r3, r0
 800792a:	d004      	beq.n	8007936 <__swbuf_r+0x62>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	07db      	lsls	r3, r3, #31
 8007930:	d519      	bpl.n	8007966 <__swbuf_r+0x92>
 8007932:	2e0a      	cmp	r6, #10
 8007934:	d117      	bne.n	8007966 <__swbuf_r+0x92>
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f000 f933 	bl	8007ba4 <_fflush_r>
 800793e:	b190      	cbz	r0, 8007966 <__swbuf_r+0x92>
 8007940:	e00f      	b.n	8007962 <__swbuf_r+0x8e>
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <__swbuf_r+0x9c>)
 8007944:	429c      	cmp	r4, r3
 8007946:	d101      	bne.n	800794c <__swbuf_r+0x78>
 8007948:	68ac      	ldr	r4, [r5, #8]
 800794a:	e7d0      	b.n	80078ee <__swbuf_r+0x1a>
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <__swbuf_r+0xa0>)
 800794e:	429c      	cmp	r4, r3
 8007950:	bf08      	it	eq
 8007952:	68ec      	ldreq	r4, [r5, #12]
 8007954:	e7cb      	b.n	80078ee <__swbuf_r+0x1a>
 8007956:	4621      	mov	r1, r4
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f81f 	bl	800799c <__swsetup_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	d0cc      	beq.n	80078fc <__swbuf_r+0x28>
 8007962:	f04f 37ff 	mov.w	r7, #4294967295
 8007966:	4638      	mov	r0, r7
 8007968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796a:	bf00      	nop
 800796c:	08007fa4 	.word	0x08007fa4
 8007970:	08007fc4 	.word	0x08007fc4
 8007974:	08007f84 	.word	0x08007f84

08007978 <_write_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4c07      	ldr	r4, [pc, #28]	; (8007998 <_write_r+0x20>)
 800797c:	4605      	mov	r5, r0
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	2200      	movs	r2, #0
 8007984:	6022      	str	r2, [r4, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f7fa fcc1 	bl	800230e <_write>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_write_r+0x1e>
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	b103      	cbz	r3, 8007996 <_write_r+0x1e>
 8007994:	602b      	str	r3, [r5, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	20004398 	.word	0x20004398

0800799c <__swsetup_r>:
 800799c:	4b32      	ldr	r3, [pc, #200]	; (8007a68 <__swsetup_r+0xcc>)
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	4606      	mov	r6, r0
 80079a4:	460c      	mov	r4, r1
 80079a6:	b125      	cbz	r5, 80079b2 <__swsetup_r+0x16>
 80079a8:	69ab      	ldr	r3, [r5, #24]
 80079aa:	b913      	cbnz	r3, 80079b2 <__swsetup_r+0x16>
 80079ac:	4628      	mov	r0, r5
 80079ae:	f7ff fbf9 	bl	80071a4 <__sinit>
 80079b2:	4b2e      	ldr	r3, [pc, #184]	; (8007a6c <__swsetup_r+0xd0>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	d10f      	bne.n	80079d8 <__swsetup_r+0x3c>
 80079b8:	686c      	ldr	r4, [r5, #4]
 80079ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079be:	b29a      	uxth	r2, r3
 80079c0:	0715      	lsls	r5, r2, #28
 80079c2:	d42c      	bmi.n	8007a1e <__swsetup_r+0x82>
 80079c4:	06d0      	lsls	r0, r2, #27
 80079c6:	d411      	bmi.n	80079ec <__swsetup_r+0x50>
 80079c8:	2209      	movs	r2, #9
 80079ca:	6032      	str	r2, [r6, #0]
 80079cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	e03e      	b.n	8007a56 <__swsetup_r+0xba>
 80079d8:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <__swsetup_r+0xd4>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <__swsetup_r+0x46>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7eb      	b.n	80079ba <__swsetup_r+0x1e>
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <__swsetup_r+0xd8>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7e6      	b.n	80079ba <__swsetup_r+0x1e>
 80079ec:	0751      	lsls	r1, r2, #29
 80079ee:	d512      	bpl.n	8007a16 <__swsetup_r+0x7a>
 80079f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f2:	b141      	cbz	r1, 8007a06 <__swsetup_r+0x6a>
 80079f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079f8:	4299      	cmp	r1, r3
 80079fa:	d002      	beq.n	8007a02 <__swsetup_r+0x66>
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff fac1 	bl	8006f84 <_free_r>
 8007a02:	2300      	movs	r3, #0
 8007a04:	6363      	str	r3, [r4, #52]	; 0x34
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	f043 0308 	orr.w	r3, r3, #8
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	b94b      	cbnz	r3, 8007a36 <__swsetup_r+0x9a>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2c:	d003      	beq.n	8007a36 <__swsetup_r+0x9a>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f917 	bl	8007c64 <__smakebuf_r>
 8007a36:	89a2      	ldrh	r2, [r4, #12]
 8007a38:	f012 0301 	ands.w	r3, r2, #1
 8007a3c:	d00c      	beq.n	8007a58 <__swsetup_r+0xbc>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60a3      	str	r3, [r4, #8]
 8007a42:	6963      	ldr	r3, [r4, #20]
 8007a44:	425b      	negs	r3, r3
 8007a46:	61a3      	str	r3, [r4, #24]
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	b953      	cbnz	r3, 8007a62 <__swsetup_r+0xc6>
 8007a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007a54:	d1ba      	bne.n	80079cc <__swsetup_r+0x30>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	0792      	lsls	r2, r2, #30
 8007a5a:	bf58      	it	pl
 8007a5c:	6963      	ldrpl	r3, [r4, #20]
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	e7f2      	b.n	8007a48 <__swsetup_r+0xac>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e7f7      	b.n	8007a56 <__swsetup_r+0xba>
 8007a66:	bf00      	nop
 8007a68:	20000010 	.word	0x20000010
 8007a6c:	08007fa4 	.word	0x08007fa4
 8007a70:	08007fc4 	.word	0x08007fc4
 8007a74:	08007f84 	.word	0x08007f84

08007a78 <_close_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4c06      	ldr	r4, [pc, #24]	; (8007a94 <_close_r+0x1c>)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4605      	mov	r5, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	f7fa fc5f 	bl	8002346 <_close>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_close_r+0x1a>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_close_r+0x1a>
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	20004398 	.word	0x20004398

08007a98 <__sflush_r>:
 8007a98:	898a      	ldrh	r2, [r1, #12]
 8007a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	0710      	lsls	r0, r2, #28
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	d458      	bmi.n	8007b58 <__sflush_r+0xc0>
 8007aa6:	684b      	ldr	r3, [r1, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	dc05      	bgt.n	8007ab8 <__sflush_r+0x20>
 8007aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dc02      	bgt.n	8007ab8 <__sflush_r+0x20>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	d0f9      	beq.n	8007ab2 <__sflush_r+0x1a>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ac4:	682f      	ldr	r7, [r5, #0]
 8007ac6:	6a21      	ldr	r1, [r4, #32]
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	d032      	beq.n	8007b32 <__sflush_r+0x9a>
 8007acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	075a      	lsls	r2, r3, #29
 8007ad2:	d505      	bpl.n	8007ae0 <__sflush_r+0x48>
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	1ac0      	subs	r0, r0, r3
 8007ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ada:	b10b      	cbz	r3, 8007ae0 <__sflush_r+0x48>
 8007adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ade:	1ac0      	subs	r0, r0, r3
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ae6:	6a21      	ldr	r1, [r4, #32]
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	d106      	bne.n	8007b00 <__sflush_r+0x68>
 8007af2:	6829      	ldr	r1, [r5, #0]
 8007af4:	291d      	cmp	r1, #29
 8007af6:	d848      	bhi.n	8007b8a <__sflush_r+0xf2>
 8007af8:	4a29      	ldr	r2, [pc, #164]	; (8007ba0 <__sflush_r+0x108>)
 8007afa:	40ca      	lsrs	r2, r1
 8007afc:	07d6      	lsls	r6, r2, #31
 8007afe:	d544      	bpl.n	8007b8a <__sflush_r+0xf2>
 8007b00:	2200      	movs	r2, #0
 8007b02:	6062      	str	r2, [r4, #4]
 8007b04:	04d9      	lsls	r1, r3, #19
 8007b06:	6922      	ldr	r2, [r4, #16]
 8007b08:	6022      	str	r2, [r4, #0]
 8007b0a:	d504      	bpl.n	8007b16 <__sflush_r+0x7e>
 8007b0c:	1c42      	adds	r2, r0, #1
 8007b0e:	d101      	bne.n	8007b14 <__sflush_r+0x7c>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b903      	cbnz	r3, 8007b16 <__sflush_r+0x7e>
 8007b14:	6560      	str	r0, [r4, #84]	; 0x54
 8007b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b18:	602f      	str	r7, [r5, #0]
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d0c9      	beq.n	8007ab2 <__sflush_r+0x1a>
 8007b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b22:	4299      	cmp	r1, r3
 8007b24:	d002      	beq.n	8007b2c <__sflush_r+0x94>
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7ff fa2c 	bl	8006f84 <_free_r>
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007b30:	e7c0      	b.n	8007ab4 <__sflush_r+0x1c>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b0      	blx	r6
 8007b38:	1c41      	adds	r1, r0, #1
 8007b3a:	d1c8      	bne.n	8007ace <__sflush_r+0x36>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c5      	beq.n	8007ace <__sflush_r+0x36>
 8007b42:	2b1d      	cmp	r3, #29
 8007b44:	d001      	beq.n	8007b4a <__sflush_r+0xb2>
 8007b46:	2b16      	cmp	r3, #22
 8007b48:	d101      	bne.n	8007b4e <__sflush_r+0xb6>
 8007b4a:	602f      	str	r7, [r5, #0]
 8007b4c:	e7b1      	b.n	8007ab2 <__sflush_r+0x1a>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	e7ad      	b.n	8007ab4 <__sflush_r+0x1c>
 8007b58:	690f      	ldr	r7, [r1, #16]
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	d0a9      	beq.n	8007ab2 <__sflush_r+0x1a>
 8007b5e:	0793      	lsls	r3, r2, #30
 8007b60:	680e      	ldr	r6, [r1, #0]
 8007b62:	bf08      	it	eq
 8007b64:	694b      	ldreq	r3, [r1, #20]
 8007b66:	600f      	str	r7, [r1, #0]
 8007b68:	bf18      	it	ne
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	eba6 0807 	sub.w	r8, r6, r7
 8007b70:	608b      	str	r3, [r1, #8]
 8007b72:	f1b8 0f00 	cmp.w	r8, #0
 8007b76:	dd9c      	ble.n	8007ab2 <__sflush_r+0x1a>
 8007b78:	4643      	mov	r3, r8
 8007b7a:	463a      	mov	r2, r7
 8007b7c:	6a21      	ldr	r1, [r4, #32]
 8007b7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b0      	blx	r6
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dc06      	bgt.n	8007b96 <__sflush_r+0xfe>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	e78e      	b.n	8007ab4 <__sflush_r+0x1c>
 8007b96:	4407      	add	r7, r0
 8007b98:	eba8 0800 	sub.w	r8, r8, r0
 8007b9c:	e7e9      	b.n	8007b72 <__sflush_r+0xda>
 8007b9e:	bf00      	nop
 8007ba0:	20400001 	.word	0x20400001

08007ba4 <_fflush_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	690b      	ldr	r3, [r1, #16]
 8007ba8:	4605      	mov	r5, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	b1db      	cbz	r3, 8007be6 <_fflush_r+0x42>
 8007bae:	b118      	cbz	r0, 8007bb8 <_fflush_r+0x14>
 8007bb0:	6983      	ldr	r3, [r0, #24]
 8007bb2:	b90b      	cbnz	r3, 8007bb8 <_fflush_r+0x14>
 8007bb4:	f7ff faf6 	bl	80071a4 <__sinit>
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <_fflush_r+0x48>)
 8007bba:	429c      	cmp	r4, r3
 8007bbc:	d109      	bne.n	8007bd2 <_fflush_r+0x2e>
 8007bbe:	686c      	ldr	r4, [r5, #4]
 8007bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc4:	b17b      	cbz	r3, 8007be6 <_fflush_r+0x42>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4628      	mov	r0, r5
 8007bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bce:	f7ff bf63 	b.w	8007a98 <__sflush_r>
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <_fflush_r+0x4c>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d101      	bne.n	8007bdc <_fflush_r+0x38>
 8007bd8:	68ac      	ldr	r4, [r5, #8]
 8007bda:	e7f1      	b.n	8007bc0 <_fflush_r+0x1c>
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <_fflush_r+0x50>)
 8007bde:	429c      	cmp	r4, r3
 8007be0:	bf08      	it	eq
 8007be2:	68ec      	ldreq	r4, [r5, #12]
 8007be4:	e7ec      	b.n	8007bc0 <_fflush_r+0x1c>
 8007be6:	2000      	movs	r0, #0
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
 8007bea:	bf00      	nop
 8007bec:	08007fa4 	.word	0x08007fa4
 8007bf0:	08007fc4 	.word	0x08007fc4
 8007bf4:	08007f84 	.word	0x08007f84

08007bf8 <_lseek_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4c07      	ldr	r4, [pc, #28]	; (8007c18 <_lseek_r+0x20>)
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	4608      	mov	r0, r1
 8007c00:	4611      	mov	r1, r2
 8007c02:	2200      	movs	r2, #0
 8007c04:	6022      	str	r2, [r4, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7fa fbc4 	bl	8002394 <_lseek>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_lseek_r+0x1e>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_lseek_r+0x1e>
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20004398 	.word	0x20004398

08007c1c <__swhatbuf_r>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	460e      	mov	r6, r1
 8007c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c24:	2900      	cmp	r1, #0
 8007c26:	b096      	sub	sp, #88	; 0x58
 8007c28:	4614      	mov	r4, r2
 8007c2a:	461d      	mov	r5, r3
 8007c2c:	da07      	bge.n	8007c3e <__swhatbuf_r+0x22>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	89b3      	ldrh	r3, [r6, #12]
 8007c34:	061a      	lsls	r2, r3, #24
 8007c36:	d410      	bmi.n	8007c5a <__swhatbuf_r+0x3e>
 8007c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3c:	e00e      	b.n	8007c5c <__swhatbuf_r+0x40>
 8007c3e:	466a      	mov	r2, sp
 8007c40:	f000 f862 	bl	8007d08 <_fstat_r>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	dbf2      	blt.n	8007c2e <__swhatbuf_r+0x12>
 8007c48:	9a01      	ldr	r2, [sp, #4]
 8007c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c52:	425a      	negs	r2, r3
 8007c54:	415a      	adcs	r2, r3
 8007c56:	602a      	str	r2, [r5, #0]
 8007c58:	e7ee      	b.n	8007c38 <__swhatbuf_r+0x1c>
 8007c5a:	2340      	movs	r3, #64	; 0x40
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	b016      	add	sp, #88	; 0x58
 8007c62:	bd70      	pop	{r4, r5, r6, pc}

08007c64 <__smakebuf_r>:
 8007c64:	898b      	ldrh	r3, [r1, #12]
 8007c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c68:	079d      	lsls	r5, r3, #30
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	460c      	mov	r4, r1
 8007c6e:	d507      	bpl.n	8007c80 <__smakebuf_r+0x1c>
 8007c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	2301      	movs	r3, #1
 8007c7a:	6163      	str	r3, [r4, #20]
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	ab01      	add	r3, sp, #4
 8007c82:	466a      	mov	r2, sp
 8007c84:	f7ff ffca 	bl	8007c1c <__swhatbuf_r>
 8007c88:	9900      	ldr	r1, [sp, #0]
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff f9c7 	bl	8007020 <_malloc_r>
 8007c92:	b948      	cbnz	r0, 8007ca8 <__smakebuf_r+0x44>
 8007c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c98:	059a      	lsls	r2, r3, #22
 8007c9a:	d4ef      	bmi.n	8007c7c <__smakebuf_r+0x18>
 8007c9c:	f023 0303 	bic.w	r3, r3, #3
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	e7e3      	b.n	8007c70 <__smakebuf_r+0xc>
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <__smakebuf_r+0x7c>)
 8007caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	6020      	str	r0, [r4, #0]
 8007cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	6163      	str	r3, [r4, #20]
 8007cba:	9b01      	ldr	r3, [sp, #4]
 8007cbc:	6120      	str	r0, [r4, #16]
 8007cbe:	b15b      	cbz	r3, 8007cd8 <__smakebuf_r+0x74>
 8007cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f000 f831 	bl	8007d2c <_isatty_r>
 8007cca:	b128      	cbz	r0, 8007cd8 <__smakebuf_r+0x74>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f023 0303 	bic.w	r3, r3, #3
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	431d      	orrs	r5, r3
 8007cdc:	81a5      	strh	r5, [r4, #12]
 8007cde:	e7cd      	b.n	8007c7c <__smakebuf_r+0x18>
 8007ce0:	0800716d 	.word	0x0800716d

08007ce4 <_read_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4c07      	ldr	r4, [pc, #28]	; (8007d04 <_read_r+0x20>)
 8007ce8:	4605      	mov	r5, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	6022      	str	r2, [r4, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7fa faee 	bl	80022d4 <_read>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_read_r+0x1e>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_read_r+0x1e>
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20004398 	.word	0x20004398

08007d08 <_fstat_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4c07      	ldr	r4, [pc, #28]	; (8007d28 <_fstat_r+0x20>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4605      	mov	r5, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	4611      	mov	r1, r2
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	f7fa fb22 	bl	800235e <_fstat>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	d102      	bne.n	8007d24 <_fstat_r+0x1c>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	b103      	cbz	r3, 8007d24 <_fstat_r+0x1c>
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	bf00      	nop
 8007d28:	20004398 	.word	0x20004398

08007d2c <_isatty_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4c06      	ldr	r4, [pc, #24]	; (8007d48 <_isatty_r+0x1c>)
 8007d30:	2300      	movs	r3, #0
 8007d32:	4605      	mov	r5, r0
 8007d34:	4608      	mov	r0, r1
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	f7fa fb21 	bl	800237e <_isatty>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d102      	bne.n	8007d46 <_isatty_r+0x1a>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	b103      	cbz	r3, 8007d46 <_isatty_r+0x1a>
 8007d44:	602b      	str	r3, [r5, #0]
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	20004398 	.word	0x20004398

08007d4c <round>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	ec57 6b10 	vmov	r6, r7, d0
 8007d52:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007d56:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007d5a:	2c13      	cmp	r4, #19
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	463d      	mov	r5, r7
 8007d60:	dc17      	bgt.n	8007d92 <round+0x46>
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	da09      	bge.n	8007d7a <round+0x2e>
 8007d66:	3401      	adds	r4, #1
 8007d68:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007d6c:	d103      	bne.n	8007d76 <round+0x2a>
 8007d6e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007d72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007d76:	2100      	movs	r1, #0
 8007d78:	e02c      	b.n	8007dd4 <round+0x88>
 8007d7a:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <round+0x90>)
 8007d7c:	4122      	asrs	r2, r4
 8007d7e:	4217      	tst	r7, r2
 8007d80:	d100      	bne.n	8007d84 <round+0x38>
 8007d82:	b19e      	cbz	r6, 8007dac <round+0x60>
 8007d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007d88:	4123      	asrs	r3, r4
 8007d8a:	442b      	add	r3, r5
 8007d8c:	ea23 0302 	bic.w	r3, r3, r2
 8007d90:	e7f1      	b.n	8007d76 <round+0x2a>
 8007d92:	2c33      	cmp	r4, #51	; 0x33
 8007d94:	dd0d      	ble.n	8007db2 <round+0x66>
 8007d96:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007d9a:	d107      	bne.n	8007dac <round+0x60>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	ee10 2a10 	vmov	r2, s0
 8007da4:	f7f8 fa7a 	bl	800029c <__adddf3>
 8007da8:	4606      	mov	r6, r0
 8007daa:	460f      	mov	r7, r1
 8007dac:	ec47 6b10 	vmov	d0, r6, r7
 8007db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dba:	40d0      	lsrs	r0, r2
 8007dbc:	4206      	tst	r6, r0
 8007dbe:	d0f5      	beq.n	8007dac <round+0x60>
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007dc6:	fa02 f404 	lsl.w	r4, r2, r4
 8007dca:	1931      	adds	r1, r6, r4
 8007dcc:	bf28      	it	cs
 8007dce:	189b      	addcs	r3, r3, r2
 8007dd0:	ea21 0100 	bic.w	r1, r1, r0
 8007dd4:	461f      	mov	r7, r3
 8007dd6:	460e      	mov	r6, r1
 8007dd8:	e7e8      	b.n	8007dac <round+0x60>
 8007dda:	bf00      	nop
 8007ddc:	000fffff 	.word	0x000fffff

08007de0 <_init>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr

08007dec <_fini>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	bf00      	nop
 8007df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df2:	bc08      	pop	{r3}
 8007df4:	469e      	mov	lr, r3
 8007df6:	4770      	bx	lr

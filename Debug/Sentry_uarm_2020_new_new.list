
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00006c44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007018  08007018  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007020  08007020  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007020  08007020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007024  08007024  00017024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d4  20000074  0800709c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004348  0800709c  00024348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020698  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000479b  00000000  00000000  0004073c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00044ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  000463a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c3e  00000000  00000000  00047670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bc7  00000000  00000000  0006f2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e33f4  00000000  00000000  00087e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b4c  00000000  00000000  0016b2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
=======
  1 .text         00006df4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e0  080071e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e8  080071e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080071f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004288  20000074  08007264  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200042fc  08007264  000242fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001daaa  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040bc  00000000  00000000  0003db4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  00041c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  000430c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027409  00000000  00000000  00044378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000141b0  00000000  00000000  0006b781  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2d5d  00000000  00000000  0007f931  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016268e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a78  00000000  00000000  0016270c  2**2
                  CONTENTS, READONLY, DEBUGGING
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001d0:	08006ddc 	.word	0x08006ddc
=======
 80001d0:	08006f8c 	.word	0x08006f8c
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
<<<<<<< HEAD
 80001ec:	08006ddc 	.word	0x08006ddc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
=======
 80001ec:	08006f8c 	.word	0x08006f8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_ddiv>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f2:	bf1d      	ittte	ne
 80004f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f8:	ea94 0f0c 	teqne	r4, ip
 80004fc:	ea95 0f0c 	teqne	r5, ip
 8000500:	f000 f8a7 	bleq	8000652 <__aeabi_ddiv+0x16e>
 8000504:	eba4 0405 	sub.w	r4, r4, r5
 8000508:	ea81 0e03 	eor.w	lr, r1, r3
 800050c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000510:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000514:	f000 8088 	beq.w	8000628 <__aeabi_ddiv+0x144>
 8000518:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800051c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000520:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000524:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000528:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800052c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000530:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000534:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000538:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800053c:	429d      	cmp	r5, r3
 800053e:	bf08      	it	eq
 8000540:	4296      	cmpeq	r6, r2
 8000542:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000546:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800054a:	d202      	bcs.n	8000552 <__aeabi_ddiv+0x6e>
 800054c:	085b      	lsrs	r3, r3, #1
 800054e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000552:	1ab6      	subs	r6, r6, r2
 8000554:	eb65 0503 	sbc.w	r5, r5, r3
 8000558:	085b      	lsrs	r3, r3, #1
 800055a:	ea4f 0232 	mov.w	r2, r2, rrx
 800055e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000562:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000566:	ebb6 0e02 	subs.w	lr, r6, r2
 800056a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800056e:	bf22      	ittt	cs
 8000570:	1ab6      	subcs	r6, r6, r2
 8000572:	4675      	movcs	r5, lr
 8000574:	ea40 000c 	orrcs.w	r0, r0, ip
 8000578:	085b      	lsrs	r3, r3, #1
 800057a:	ea4f 0232 	mov.w	r2, r2, rrx
 800057e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000582:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000586:	bf22      	ittt	cs
 8000588:	1ab6      	subcs	r6, r6, r2
 800058a:	4675      	movcs	r5, lr
 800058c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000590:	085b      	lsrs	r3, r3, #1
 8000592:	ea4f 0232 	mov.w	r2, r2, rrx
 8000596:	ebb6 0e02 	subs.w	lr, r6, r2
 800059a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800059e:	bf22      	ittt	cs
 80005a0:	1ab6      	subcs	r6, r6, r2
 80005a2:	4675      	movcs	r5, lr
 80005a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005a8:	085b      	lsrs	r3, r3, #1
 80005aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80005ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80005b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80005b6:	bf22      	ittt	cs
 80005b8:	1ab6      	subcs	r6, r6, r2
 80005ba:	4675      	movcs	r5, lr
 80005bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80005c4:	d018      	beq.n	80005f8 <__aeabi_ddiv+0x114>
 80005c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80005ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80005ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80005d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80005d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80005da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80005de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80005e2:	d1c0      	bne.n	8000566 <__aeabi_ddiv+0x82>
 80005e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005e8:	d10b      	bne.n	8000602 <__aeabi_ddiv+0x11e>
 80005ea:	ea41 0100 	orr.w	r1, r1, r0
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80005f6:	e7b6      	b.n	8000566 <__aeabi_ddiv+0x82>
 80005f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005fc:	bf04      	itt	eq
 80005fe:	4301      	orreq	r1, r0
 8000600:	2000      	moveq	r0, #0
 8000602:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000606:	bf88      	it	hi
 8000608:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060c:	f63f aeaf 	bhi.w	800036e <__aeabi_dmul+0xde>
 8000610:	ebb5 0c03 	subs.w	ip, r5, r3
 8000614:	bf04      	itt	eq
 8000616:	ebb6 0c02 	subseq.w	ip, r6, r2
 800061a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800062c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000630:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	e690      	b.n	800036e <__aeabi_dmul+0xde>
 800064c:	ea45 0e06 	orr.w	lr, r5, r6
 8000650:	e68d      	b.n	800036e <__aeabi_dmul+0xde>
 8000652:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000656:	ea94 0f0c 	teq	r4, ip
 800065a:	bf08      	it	eq
 800065c:	ea95 0f0c 	teqeq	r5, ip
 8000660:	f43f af3b 	beq.w	80004da <__aeabi_dmul+0x24a>
 8000664:	ea94 0f0c 	teq	r4, ip
 8000668:	d10a      	bne.n	8000680 <__aeabi_ddiv+0x19c>
 800066a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066e:	f47f af34 	bne.w	80004da <__aeabi_dmul+0x24a>
 8000672:	ea95 0f0c 	teq	r5, ip
 8000676:	f47f af25 	bne.w	80004c4 <__aeabi_dmul+0x234>
 800067a:	4610      	mov	r0, r2
 800067c:	4619      	mov	r1, r3
 800067e:	e72c      	b.n	80004da <__aeabi_dmul+0x24a>
 8000680:	ea95 0f0c 	teq	r5, ip
 8000684:	d106      	bne.n	8000694 <__aeabi_ddiv+0x1b0>
 8000686:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800068a:	f43f aefd 	beq.w	8000488 <__aeabi_dmul+0x1f8>
 800068e:	4610      	mov	r0, r2
 8000690:	4619      	mov	r1, r3
 8000692:	e722      	b.n	80004da <__aeabi_dmul+0x24a>
 8000694:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000698:	bf18      	it	ne
 800069a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800069e:	f47f aec5 	bne.w	800042c <__aeabi_dmul+0x19c>
 80006a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80006a6:	f47f af0d 	bne.w	80004c4 <__aeabi_dmul+0x234>
 80006aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80006ae:	f47f aeeb 	bne.w	8000488 <__aeabi_dmul+0x1f8>
 80006b2:	e712      	b.n	80004da <__aeabi_dmul+0x24a>

080006b4 <__aeabi_d2iz>:
 80006b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006bc:	d215      	bcs.n	80006ea <__aeabi_d2iz+0x36>
 80006be:	d511      	bpl.n	80006e4 <__aeabi_d2iz+0x30>
 80006c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006c8:	d912      	bls.n	80006f0 <__aeabi_d2iz+0x3c>
 80006ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006da:	fa23 f002 	lsr.w	r0, r3, r2
 80006de:	bf18      	it	ne
 80006e0:	4240      	negne	r0, r0
 80006e2:	4770      	bx	lr
 80006e4:	f04f 0000 	mov.w	r0, #0
 80006e8:	4770      	bx	lr
 80006ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006ee:	d105      	bne.n	80006fc <__aeabi_d2iz+0x48>
 80006f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fa:	4770      	bx	lr
 80006fc:	f04f 0000 	mov.w	r0, #0
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_uldivmod>:
 8000704:	b953      	cbnz	r3, 800071c <__aeabi_uldivmod+0x18>
 8000706:	b94a      	cbnz	r2, 800071c <__aeabi_uldivmod+0x18>
 8000708:	2900      	cmp	r1, #0
 800070a:	bf08      	it	eq
 800070c:	2800      	cmpeq	r0, #0
 800070e:	bf1c      	itt	ne
 8000710:	f04f 31ff 	movne.w	r1, #4294967295
 8000714:	f04f 30ff 	movne.w	r0, #4294967295
 8000718:	f000 b972 	b.w	8000a00 <__aeabi_idiv0>
 800071c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000720:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000724:	f000 f806 	bl	8000734 <__udivmoddi4>
 8000728:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000730:	b004      	add	sp, #16
 8000732:	4770      	bx	lr

08000734 <__udivmoddi4>:
 8000734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000738:	9e08      	ldr	r6, [sp, #32]
 800073a:	4604      	mov	r4, r0
 800073c:	4688      	mov	r8, r1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d14b      	bne.n	80007da <__udivmoddi4+0xa6>
 8000742:	428a      	cmp	r2, r1
 8000744:	4615      	mov	r5, r2
 8000746:	d967      	bls.n	8000818 <__udivmoddi4+0xe4>
 8000748:	fab2 f282 	clz	r2, r2
 800074c:	b14a      	cbz	r2, 8000762 <__udivmoddi4+0x2e>
 800074e:	f1c2 0720 	rsb	r7, r2, #32
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	fa20 f707 	lsr.w	r7, r0, r7
 800075a:	4095      	lsls	r5, r2
 800075c:	ea47 0803 	orr.w	r8, r7, r3
 8000760:	4094      	lsls	r4, r2
 8000762:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000766:	0c23      	lsrs	r3, r4, #16
 8000768:	fbb8 f7fe 	udiv	r7, r8, lr
 800076c:	fa1f fc85 	uxth.w	ip, r5
 8000770:	fb0e 8817 	mls	r8, lr, r7, r8
 8000774:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000778:	fb07 f10c 	mul.w	r1, r7, ip
 800077c:	4299      	cmp	r1, r3
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x60>
 8000780:	18eb      	adds	r3, r5, r3
 8000782:	f107 30ff 	add.w	r0, r7, #4294967295
 8000786:	f080 811b 	bcs.w	80009c0 <__udivmoddi4+0x28c>
 800078a:	4299      	cmp	r1, r3
 800078c:	f240 8118 	bls.w	80009c0 <__udivmoddi4+0x28c>
 8000790:	3f02      	subs	r7, #2
 8000792:	442b      	add	r3, r5
 8000794:	1a5b      	subs	r3, r3, r1
 8000796:	b2a4      	uxth	r4, r4
 8000798:	fbb3 f0fe 	udiv	r0, r3, lr
 800079c:	fb0e 3310 	mls	r3, lr, r0, r3
 80007a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80007a8:	45a4      	cmp	ip, r4
 80007aa:	d909      	bls.n	80007c0 <__udivmoddi4+0x8c>
 80007ac:	192c      	adds	r4, r5, r4
 80007ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b2:	f080 8107 	bcs.w	80009c4 <__udivmoddi4+0x290>
 80007b6:	45a4      	cmp	ip, r4
 80007b8:	f240 8104 	bls.w	80009c4 <__udivmoddi4+0x290>
 80007bc:	3802      	subs	r0, #2
 80007be:	442c      	add	r4, r5
 80007c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80007c4:	eba4 040c 	sub.w	r4, r4, ip
 80007c8:	2700      	movs	r7, #0
 80007ca:	b11e      	cbz	r6, 80007d4 <__udivmoddi4+0xa0>
 80007cc:	40d4      	lsrs	r4, r2
 80007ce:	2300      	movs	r3, #0
 80007d0:	e9c6 4300 	strd	r4, r3, [r6]
 80007d4:	4639      	mov	r1, r7
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	428b      	cmp	r3, r1
 80007dc:	d909      	bls.n	80007f2 <__udivmoddi4+0xbe>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	f000 80eb 	beq.w	80009ba <__udivmoddi4+0x286>
 80007e4:	2700      	movs	r7, #0
 80007e6:	e9c6 0100 	strd	r0, r1, [r6]
 80007ea:	4638      	mov	r0, r7
 80007ec:	4639      	mov	r1, r7
 80007ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f2:	fab3 f783 	clz	r7, r3
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d147      	bne.n	800088a <__udivmoddi4+0x156>
 80007fa:	428b      	cmp	r3, r1
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xd0>
 80007fe:	4282      	cmp	r2, r0
 8000800:	f200 80fa 	bhi.w	80009f8 <__udivmoddi4+0x2c4>
 8000804:	1a84      	subs	r4, r0, r2
 8000806:	eb61 0303 	sbc.w	r3, r1, r3
 800080a:	2001      	movs	r0, #1
 800080c:	4698      	mov	r8, r3
 800080e:	2e00      	cmp	r6, #0
 8000810:	d0e0      	beq.n	80007d4 <__udivmoddi4+0xa0>
 8000812:	e9c6 4800 	strd	r4, r8, [r6]
 8000816:	e7dd      	b.n	80007d4 <__udivmoddi4+0xa0>
 8000818:	b902      	cbnz	r2, 800081c <__udivmoddi4+0xe8>
 800081a:	deff      	udf	#255	; 0xff
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	2a00      	cmp	r2, #0
 8000822:	f040 808f 	bne.w	8000944 <__udivmoddi4+0x210>
 8000826:	1b49      	subs	r1, r1, r5
 8000828:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800082c:	fa1f f885 	uxth.w	r8, r5
 8000830:	2701      	movs	r7, #1
 8000832:	fbb1 fcfe 	udiv	ip, r1, lr
 8000836:	0c23      	lsrs	r3, r4, #16
 8000838:	fb0e 111c 	mls	r1, lr, ip, r1
 800083c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000840:	fb08 f10c 	mul.w	r1, r8, ip
 8000844:	4299      	cmp	r1, r3
 8000846:	d907      	bls.n	8000858 <__udivmoddi4+0x124>
 8000848:	18eb      	adds	r3, r5, r3
 800084a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800084e:	d202      	bcs.n	8000856 <__udivmoddi4+0x122>
 8000850:	4299      	cmp	r1, r3
 8000852:	f200 80cd 	bhi.w	80009f0 <__udivmoddi4+0x2bc>
 8000856:	4684      	mov	ip, r0
 8000858:	1a59      	subs	r1, r3, r1
 800085a:	b2a3      	uxth	r3, r4
 800085c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000860:	fb0e 1410 	mls	r4, lr, r0, r1
 8000864:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000868:	fb08 f800 	mul.w	r8, r8, r0
 800086c:	45a0      	cmp	r8, r4
 800086e:	d907      	bls.n	8000880 <__udivmoddi4+0x14c>
 8000870:	192c      	adds	r4, r5, r4
 8000872:	f100 33ff 	add.w	r3, r0, #4294967295
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x14a>
 8000878:	45a0      	cmp	r8, r4
 800087a:	f200 80b6 	bhi.w	80009ea <__udivmoddi4+0x2b6>
 800087e:	4618      	mov	r0, r3
 8000880:	eba4 0408 	sub.w	r4, r4, r8
 8000884:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000888:	e79f      	b.n	80007ca <__udivmoddi4+0x96>
 800088a:	f1c7 0c20 	rsb	ip, r7, #32
 800088e:	40bb      	lsls	r3, r7
 8000890:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000894:	ea4e 0e03 	orr.w	lr, lr, r3
 8000898:	fa01 f407 	lsl.w	r4, r1, r7
 800089c:	fa20 f50c 	lsr.w	r5, r0, ip
 80008a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80008a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80008a8:	4325      	orrs	r5, r4
 80008aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80008ae:	0c2c      	lsrs	r4, r5, #16
 80008b0:	fb08 3319 	mls	r3, r8, r9, r3
 80008b4:	fa1f fa8e 	uxth.w	sl, lr
 80008b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80008bc:	fb09 f40a 	mul.w	r4, r9, sl
 80008c0:	429c      	cmp	r4, r3
 80008c2:	fa02 f207 	lsl.w	r2, r2, r7
 80008c6:	fa00 f107 	lsl.w	r1, r0, r7
 80008ca:	d90b      	bls.n	80008e4 <__udivmoddi4+0x1b0>
 80008cc:	eb1e 0303 	adds.w	r3, lr, r3
 80008d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80008d4:	f080 8087 	bcs.w	80009e6 <__udivmoddi4+0x2b2>
 80008d8:	429c      	cmp	r4, r3
 80008da:	f240 8084 	bls.w	80009e6 <__udivmoddi4+0x2b2>
 80008de:	f1a9 0902 	sub.w	r9, r9, #2
 80008e2:	4473      	add	r3, lr
 80008e4:	1b1b      	subs	r3, r3, r4
 80008e6:	b2ad      	uxth	r5, r5
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80008f8:	45a2      	cmp	sl, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x1da>
 80008fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000900:	f100 33ff 	add.w	r3, r0, #4294967295
 8000904:	d26b      	bcs.n	80009de <__udivmoddi4+0x2aa>
 8000906:	45a2      	cmp	sl, r4
 8000908:	d969      	bls.n	80009de <__udivmoddi4+0x2aa>
 800090a:	3802      	subs	r0, #2
 800090c:	4474      	add	r4, lr
 800090e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000912:	fba0 8902 	umull	r8, r9, r0, r2
 8000916:	eba4 040a 	sub.w	r4, r4, sl
 800091a:	454c      	cmp	r4, r9
 800091c:	46c2      	mov	sl, r8
 800091e:	464b      	mov	r3, r9
 8000920:	d354      	bcc.n	80009cc <__udivmoddi4+0x298>
 8000922:	d051      	beq.n	80009c8 <__udivmoddi4+0x294>
 8000924:	2e00      	cmp	r6, #0
 8000926:	d069      	beq.n	80009fc <__udivmoddi4+0x2c8>
 8000928:	ebb1 050a 	subs.w	r5, r1, sl
 800092c:	eb64 0403 	sbc.w	r4, r4, r3
 8000930:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000934:	40fd      	lsrs	r5, r7
 8000936:	40fc      	lsrs	r4, r7
 8000938:	ea4c 0505 	orr.w	r5, ip, r5
 800093c:	e9c6 5400 	strd	r5, r4, [r6]
 8000940:	2700      	movs	r7, #0
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0xa0>
 8000944:	f1c2 0320 	rsb	r3, r2, #32
 8000948:	fa20 f703 	lsr.w	r7, r0, r3
 800094c:	4095      	lsls	r5, r2
 800094e:	fa01 f002 	lsl.w	r0, r1, r2
 8000952:	fa21 f303 	lsr.w	r3, r1, r3
 8000956:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800095a:	4338      	orrs	r0, r7
 800095c:	0c01      	lsrs	r1, r0, #16
 800095e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000962:	fa1f f885 	uxth.w	r8, r5
 8000966:	fb0e 3317 	mls	r3, lr, r7, r3
 800096a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800096e:	fb07 f308 	mul.w	r3, r7, r8
 8000972:	428b      	cmp	r3, r1
 8000974:	fa04 f402 	lsl.w	r4, r4, r2
 8000978:	d907      	bls.n	800098a <__udivmoddi4+0x256>
 800097a:	1869      	adds	r1, r5, r1
 800097c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000980:	d22f      	bcs.n	80009e2 <__udivmoddi4+0x2ae>
 8000982:	428b      	cmp	r3, r1
 8000984:	d92d      	bls.n	80009e2 <__udivmoddi4+0x2ae>
 8000986:	3f02      	subs	r7, #2
 8000988:	4429      	add	r1, r5
 800098a:	1acb      	subs	r3, r1, r3
 800098c:	b281      	uxth	r1, r0
 800098e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000992:	fb0e 3310 	mls	r3, lr, r0, r3
 8000996:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800099a:	fb00 f308 	mul.w	r3, r0, r8
 800099e:	428b      	cmp	r3, r1
 80009a0:	d907      	bls.n	80009b2 <__udivmoddi4+0x27e>
 80009a2:	1869      	adds	r1, r5, r1
 80009a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80009a8:	d217      	bcs.n	80009da <__udivmoddi4+0x2a6>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d915      	bls.n	80009da <__udivmoddi4+0x2a6>
 80009ae:	3802      	subs	r0, #2
 80009b0:	4429      	add	r1, r5
 80009b2:	1ac9      	subs	r1, r1, r3
 80009b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80009b8:	e73b      	b.n	8000832 <__udivmoddi4+0xfe>
 80009ba:	4637      	mov	r7, r6
 80009bc:	4630      	mov	r0, r6
 80009be:	e709      	b.n	80007d4 <__udivmoddi4+0xa0>
 80009c0:	4607      	mov	r7, r0
 80009c2:	e6e7      	b.n	8000794 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fb      	b.n	80007c0 <__udivmoddi4+0x8c>
 80009c8:	4541      	cmp	r1, r8
 80009ca:	d2ab      	bcs.n	8000924 <__udivmoddi4+0x1f0>
 80009cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80009d0:	eb69 020e 	sbc.w	r2, r9, lr
 80009d4:	3801      	subs	r0, #1
 80009d6:	4613      	mov	r3, r2
 80009d8:	e7a4      	b.n	8000924 <__udivmoddi4+0x1f0>
 80009da:	4660      	mov	r0, ip
 80009dc:	e7e9      	b.n	80009b2 <__udivmoddi4+0x27e>
 80009de:	4618      	mov	r0, r3
 80009e0:	e795      	b.n	800090e <__udivmoddi4+0x1da>
 80009e2:	4667      	mov	r7, ip
 80009e4:	e7d1      	b.n	800098a <__udivmoddi4+0x256>
 80009e6:	4681      	mov	r9, r0
 80009e8:	e77c      	b.n	80008e4 <__udivmoddi4+0x1b0>
 80009ea:	3802      	subs	r0, #2
 80009ec:	442c      	add	r4, r5
 80009ee:	e747      	b.n	8000880 <__udivmoddi4+0x14c>
 80009f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f4:	442b      	add	r3, r5
 80009f6:	e72f      	b.n	8000858 <__udivmoddi4+0x124>
 80009f8:	4638      	mov	r0, r7
 80009fa:	e708      	b.n	800080e <__udivmoddi4+0xda>
 80009fc:	4637      	mov	r7, r6
 80009fe:	e6e9      	b.n	80007d4 <__udivmoddi4+0xa0>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <Chassis_Task_Func>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
<<<<<<< HEAD
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
=======
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* USER CODE BEGIN Chassis_Task_Func */
	//buzzer_play_mario(200);

  double vel=1000; // velocity applied to motor
 80005b0:	f04f 0200 	mov.w	r2, #0
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <Chassis_Task_Func+0x28>)
 80005b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int direction = CLOCKWISE; // direction of motor
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  uint32_t t=0;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
  double distance = -1.0;
 80005c2:	f04f 0200 	mov.w	r2, #0
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <Chassis_Task_Func+0x2c>)
 80005c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Infinite loop */
<<<<<<< HEAD
  for(;;)
 80005cc:	e7fe      	b.n	80005cc <Chassis_Task_Func+0x24>
 80005ce:	bf00      	nop
 80005d0:	408f4000 	.word	0x408f4000
 80005d4:	bff00000 	.word	0xbff00000

080005d8 <Gimbal_Task_Function>:
=======
  //double i=0;
  double vmax=16000;
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	4c05      	ldr	r4, [pc, #20]	; (8000a28 <Chassis_Task_Func+0x24>)
 8000a12:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double max_angle=4096;
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	4c04      	ldr	r4, [pc, #16]	; (8000a2c <Chassis_Task_Func+0x28>)
 8000a1c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  //Motor_pid_set_angle(&motor_data[0],360,3,0,0);
	//Motor_set_raw_value(&motor_data[0],200);
	//printf("Hello, the current time is %.2F",i);
	//i+=0.1;
    //osDelay(500);
    osDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f004 f9e6 	bl	8004df2 <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <Chassis_Task_Func+0x1c>
 8000a28:	40cf4000 	.word	0x40cf4000
 8000a2c:	40b00000 	.word	0x40b00000

08000a30 <Gimbal_Task_Function>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
<<<<<<< HEAD
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  char pdata[3];
  char* des = "123";
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <Gimbal_Task_Function+0x4c>)
 80005e2:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  if (HAL_UART_Receive(&huart7, (uint8_t*)pdata, 3, HAL_MAX_DELAY) == HAL_OK){
 80005e4:	f107 0108 	add.w	r1, r7, #8
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2203      	movs	r2, #3
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <Gimbal_Task_Function+0x50>)
 80005f0:	f003 fda6 	bl	8004140 <HAL_UART_Receive>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d1f4      	bne.n	80005e4 <Gimbal_Task_Function+0xc>
		  HAL_GPIO_WritePin(GPIOG, LD_H_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2102      	movs	r1, #2
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <Gimbal_Task_Function+0x54>)
 8000600:	f002 fa46 	bl	8002a90 <HAL_GPIO_WritePin>
		  if(strcmp(pdata, des) == 0){
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fdf0 	bl	80001f0 <strcmp>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1e6      	bne.n	80005e4 <Gimbal_Task_Function+0xc>
			  HAL_GPIO_WritePin(GPIOG, LD_D_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <Gimbal_Task_Function+0x54>)
 800061c:	f002 fa38 	bl	8002a90 <HAL_GPIO_WritePin>
	  if (HAL_UART_Receive(&huart7, (uint8_t*)pdata, 3, HAL_MAX_DELAY) == HAL_OK){
 8000620:	e7e0      	b.n	80005e4 <Gimbal_Task_Function+0xc>
 8000622:	bf00      	nop
 8000624:	08006df4 	.word	0x08006df4
 8000628:	200042f4 	.word	0x200042f4
 800062c:	40021800 	.word	0x40021800

08000630 <Shoot_Task_Func>:


=======
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	  double vmax=30000;
 8000a38:	a411      	add	r4, pc, #68	; (adr r4, 8000a80 <Gimbal_Task_Function+0x50>)
 8000a3a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000a3e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  double max_angle=4096;
 8000a42:	f04f 0300 	mov.w	r3, #0
 8000a46:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <Gimbal_Task_Function+0x40>)
 8000a48:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//buzzer_play_chromatic(100);

	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <Gimbal_Task_Function+0x44>)
 8000a50:	f001 fd6f 	bl	8002532 <HAL_CAN_ActivateNotification>
	velocity=3000;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <Gimbal_Task_Function+0x48>)
 8000a56:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a5a:	801a      	strh	r2, [r3, #0]


  for(;;)
  {
	  //Motor_pid_set_angle(&motor_data[4],360,vmax/max_angle,0,0);
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <Gimbal_Task_Function+0x4c>)
 8000a60:	f002 fa5b 	bl	8002f1a <HAL_GPIO_TogglePin>

	  //Motor_set_raw_value(&motor_data[4],0);

	  osDelay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f004 f9c4 	bl	8004df2 <osDelay>
	  HAL_GPIO_TogglePin(LD_C_GPIO_Port, LD_C_Pin);
 8000a6a:	e7f7      	b.n	8000a5c <Gimbal_Task_Function+0x2c>
 8000a6c:	f3af 8000 	nop.w
 8000a70:	40b00000 	.word	0x40b00000
 8000a74:	20004184 	.word	0x20004184
 8000a78:	2000422e 	.word	0x2000422e
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	00000000 	.word	0x00000000
 8000a84:	40dd4c00 	.word	0x40dd4c00

08000a88 <Shoot_Task_Func>:
//Internal Functions
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
<<<<<<< HEAD
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000638:	f000 f812 	bl	8000660 <shoot_init>
  double fric_wheel_speed=75.5;
 800063c:	a306      	add	r3, pc, #24	; (adr r3, 8000658 <Shoot_Task_Func+0x28>)
 800063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000642:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//Shoot motor on half speed
	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,1500);
	//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,1500);
	//fric_wheel_set_speed(fric_wheel_speed);
	//HAL_GPIO_TogglePin(LD_A_GPIO_Port,LD_A_Pin);
    osDelay(500);
 8000646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064a:	f004 fa70 	bl	8004b2e <osDelay>
    osDelay(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f004 fa6d 	bl	8004b2e <osDelay>
    osDelay(500);
 8000654:	e7f7      	b.n	8000646 <Shoot_Task_Func+0x16>
 8000656:	bf00      	nop
 8000658:	00000000 	.word	0x00000000
 800065c:	4052e000 	.word	0x4052e000

08000660 <shoot_init>:
=======
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 8000a90:	f000 f818 	bl	8000ac4 <shoot_init>
  double fric_wheel_speed_percent=50;
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	4c08      	ldr	r4, [pc, #32]	; (8000abc <Shoot_Task_Func+0x34>)
 8000a9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	4c07      	ldr	r4, [pc, #28]	; (8000ac0 <Shoot_Task_Func+0x38>)
 8000aa4:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000aa8:	ed97 1b04 	vldr	d1, [r7, #16]
 8000aac:	ed97 0b02 	vldr	d0, [r7, #8]
 8000ab0:	f000 f832 	bl	8000b18 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f004 f99c 	bl	8004df2 <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 8000aba:	e7f5      	b.n	8000aa8 <Shoot_Task_Func+0x20>
 8000abc:	40490000 	.word	0x40490000
 8000ac0:	40240000 	.word	0x40240000

08000ac4 <shoot_init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  /* USER CODE END 5 */
}

void shoot_init(void){
<<<<<<< HEAD
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <shoot_init+0x50>)
 8000668:	f002 ff4a 	bl	8003500 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 800066c:	2108      	movs	r1, #8
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <shoot_init+0x50>)
 8000670:	f002 ff46 	bl	8003500 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <shoot_init+0x50>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <shoot_init+0x50>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(2000);
 8000688:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068c:	f004 fa4f 	bl	8004b2e <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <shoot_init+0x50>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000698:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <shoot_init+0x50>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a2:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 80006a4:	f240 60d6 	movw	r0, #1750	; 0x6d6
 80006a8:	f004 fa41 	bl	8004b2e <osDelay>

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20004040 	.word	0x20004040

080006b4 <Timer_Task_Func>:
=======
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4812      	ldr	r0, [pc, #72]	; (8000b14 <shoot_init+0x50>)
 8000acc:	f002 ff40 	bl	8003950 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <shoot_init+0x50>)
 8000ad4:	f002 ff3c 	bl	8003950 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <shoot_init+0x50>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f640 0298 	movw	r2, #2200	; 0x898
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <shoot_init+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f640 0298 	movw	r2, #2200	; 0x898
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 8000aec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000af0:	f004 f97f 	bl	8004df2 <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <shoot_init+0x50>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <shoot_init+0x50>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000b06:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8000b08:	f240 60d6 	movw	r0, #1750	; 0x6d6
 8000b0c:	f004 f971 	bl	8004df2 <osDelay>

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000403c 	.word	0x2000403c

08000b18 <cmd_execute_shoot>:

}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b22:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <cmd_execute_shoot+0x50>)
 8000b2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b30:	f7ff fcd8 	bl	80004e4 <__aeabi_ddiv>
 8000b34:	4603      	mov	r3, r0
 8000b36:	460c      	mov	r4, r1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	4621      	mov	r1, r4
 8000b3c:	a308      	add	r3, pc, #32	; (adr r3, 8000b60 <cmd_execute_shoot+0x48>)
 8000b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b42:	f7ff fba5 	bl	8000290 <__aeabi_dmul>
 8000b46:	4603      	mov	r3, r0
 8000b48:	460c      	mov	r4, r1
 8000b4a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 8000b4e:	ed97 0b04 	vldr	d0, [r7, #16]
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <cmd_execute_shoot+0x54>)
 8000b54:	f000 f967 	bl	8000e26 <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 8000b58:	bf00      	nop
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	00000000 	.word	0x00000000
 8000b64:	40c38800 	.word	0x40c38800
 8000b68:	40590000 	.word	0x40590000
 8000b6c:	200040d0 	.word	0x200040d0

08000b70 <Timer_Task_Func>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#include "Timer_App.h"



void Timer_Task_Func(void const * argument){
<<<<<<< HEAD
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	; 0x40
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
=======
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	; 0x40
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

uint32_t tick;
	for (;;){
		Motor_Data_Read();
<<<<<<< HEAD
 80006bc:	f000 f816 	bl	80006ec <Motor_Data_Read>
		Motor_Data_Sent();
 80006c0:	f000 f87c 	bl	80007bc <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 80006c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <Timer_Task_Func+0x30>)
 80006cc:	f000 f8fc 	bl	80008c8 <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <Timer_Task_Func+0x34>)
 80006d8:	f000 f8f6 	bl	80008c8 <get_Motor_buffer>
=======
 8000b78:	f000 f81e 	bl	8000bb8 <Motor_Data_Read>
		Motor_Data_Sent();
 8000b7c:	f000 f882 	bl	8000c84 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <Timer_Task_Func+0x3c>)
 8000b88:	f000 f900 	bl	8000d8c <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <Timer_Task_Func+0x40>)
 8000b94:	f000 f8fa 	bl	8000d8c <get_Motor_buffer>



		printf("Current angle (6020): %d \n", temp_buffer.motor_feedback.rx_angle);
 8000b98:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <Timer_Task_Func+0x44>)
 8000ba0:	f005 fb10 	bl	80061c4 <iprintf>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
<<<<<<< HEAD
 80006dc:	2001      	movs	r0, #1
 80006de:	f004 fa26 	bl	8004b2e <osDelay>
	for (;;){
 80006e2:	e7eb      	b.n	80006bc <Timer_Task_Func+0x8>
 80006e4:	200040f0 	.word	0x200040f0
 80006e8:	20004080 	.word	0x20004080

080006ec <Motor_Data_Read>:
=======
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f004 f924 	bl	8004df2 <osDelay>
	for (;;){
 8000baa:	e7e5      	b.n	8000b78 <Timer_Task_Func+0x8>
 8000bac:	200040ec 	.word	0x200040ec
 8000bb0:	2000407c 	.word	0x2000407c
 8000bb4:	08006fa4 	.word	0x08006fa4

08000bb8 <Motor_Data_Read>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
<<<<<<< HEAD
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e052      	b.n	800079e <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 80006f8:	482d      	ldr	r0, [pc, #180]	; (80007b0 <Motor_Data_Read+0xc4>)
 80006fa:	f000 f9bd 	bl	8000a78 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4a2c      	ldr	r2, [pc, #176]	; (80007b4 <Motor_Data_Read+0xc8>)
 8000704:	441a      	add	r2, r3
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	6810      	ldr	r0, [r2, #0]
 800070a:	6851      	ldr	r1, [r2, #4]
 800070c:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 800070e:	793b      	ldrb	r3, [r7, #4]
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b21a      	sxth	r2, r3
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	b218      	sxth	r0, r3
 800071c:	4926      	ldr	r1, [pc, #152]	; (80007b8 <Motor_Data_Read+0xcc>)
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4613      	mov	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	440b      	add	r3, r1
 800072a:	3310      	adds	r3, #16
 800072c:	4602      	mov	r2, r0
 800072e:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b218      	sxth	r0, r3
 800073e:	491e      	ldr	r1, [pc, #120]	; (80007b8 <Motor_Data_Read+0xcc>)
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	4613      	mov	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	3312      	adds	r3, #18
 800074e:	4602      	mov	r2, r0
 8000750:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 8000752:	7a3b      	ldrb	r3, [r7, #8]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b21a      	sxth	r2, r3
 8000758:	7a7b      	ldrb	r3, [r7, #9]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b218      	sxth	r0, r3
 8000760:	4915      	ldr	r1, [pc, #84]	; (80007b8 <Motor_Data_Read+0xcc>)
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	3314      	adds	r3, #20
 8000770:	4602      	mov	r2, r0
 8000772:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8000774:	7abb      	ldrb	r3, [r7, #10]
 8000776:	b218      	sxth	r0, r3
 8000778:	490f      	ldr	r1, [pc, #60]	; (80007b8 <Motor_Data_Read+0xcc>)
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4613      	mov	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	3316      	adds	r3, #22
 8000788:	4602      	mov	r2, r0
 800078a:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 800078c:	2001      	movs	r0, #1
 800078e:	f004 f9ce 	bl	8004b2e <osDelay>

		can_filter_disable(&hcan1);
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <Motor_Data_Read+0xc4>)
 8000794:	f000 f992 	bl	8000abc <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	dda9      	ble.n	80006f8 <Motor_Data_Read+0xc>
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20004188 	.word	0x20004188
 80007b4:	200041b0 	.word	0x200041b0
 80007b8:	20004080 	.word	0x20004080

080007bc <Motor_Data_Sent>:
=======
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e052      	b.n	8000c6a <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8000bc4:	482c      	ldr	r0, [pc, #176]	; (8000c78 <Motor_Data_Read+0xc0>)
 8000bc6:	f000 f9e3 	bl	8000f90 <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4a2b      	ldr	r2, [pc, #172]	; (8000c7c <Motor_Data_Read+0xc4>)
 8000bd0:	441a      	add	r2, r3
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	6810      	ldr	r0, [r2, #0]
 8000bd6:	6851      	ldr	r1, [r2, #4]
 8000bd8:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 8000bda:	793b      	ldrb	r3, [r7, #4]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	797b      	ldrb	r3, [r7, #5]
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b218      	sxth	r0, r3
 8000be8:	4925      	ldr	r1, [pc, #148]	; (8000c80 <Motor_Data_Read+0xc8>)
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4613      	mov	r3, r2
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3310      	adds	r3, #16
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b218      	sxth	r0, r3
 8000c0a:	491d      	ldr	r1, [pc, #116]	; (8000c80 <Motor_Data_Read+0xc8>)
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	3312      	adds	r3, #18
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 8000c1e:	7a3b      	ldrb	r3, [r7, #8]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	7a7b      	ldrb	r3, [r7, #9]
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b218      	sxth	r0, r3
 8000c2c:	4914      	ldr	r1, [pc, #80]	; (8000c80 <Motor_Data_Read+0xc8>)
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4613      	mov	r3, r2
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	3314      	adds	r3, #20
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8000c40:	7abb      	ldrb	r3, [r7, #10]
 8000c42:	b218      	sxth	r0, r3
 8000c44:	490e      	ldr	r1, [pc, #56]	; (8000c80 <Motor_Data_Read+0xc8>)
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	3316      	adds	r3, #22
 8000c54:	4602      	mov	r2, r0
 8000c56:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f004 f8ca 	bl	8004df2 <osDelay>

		can_filter_disable(&hcan1);
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <Motor_Data_Read+0xc0>)
 8000c60:	f000 f9b8 	bl	8000fd4 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	dda9      	ble.n	8000bc4 <Motor_Data_Read+0xc>
	}
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20004184 	.word	0x20004184
 8000c7c:	200041ac 	.word	0x200041ac
 8000c80:	2000407c 	.word	0x2000407c

08000c84 <Motor_Data_Sent>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
<<<<<<< HEAD
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
=======
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
<<<<<<< HEAD
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 80007ca:	2308      	movs	r3, #8
 80007cc:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
 80007d2:	e06c      	b.n	80008ae <Motor_Data_Sent+0xf2>
		if (i == 0) {
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d12b      	bne.n	8000832 <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 80007da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007de:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <Motor_Data_Sent+0x104>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	121b      	asrs	r3, r3, #8
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <Motor_Data_Sent+0x104>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <Motor_Data_Sent+0x104>)
 80007f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f6:	121b      	asrs	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 80007fc:	4b30      	ldr	r3, [pc, #192]	; (80008c0 <Motor_Data_Sent+0x104>)
 80007fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000800:	b2db      	uxtb	r3, r3
 8000802:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000808:	121b      	asrs	r3, r3, #8
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <Motor_Data_Sent+0x104>)
 800081c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800081e:	121b      	asrs	r3, r3, #8
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000830:	e032      	b.n	8000898 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 8000832:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000836:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <Motor_Data_Sent+0x104>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	121b      	asrs	r3, r3, #8
 8000840:	b2db      	uxtb	r3, r3
 8000842:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	b2db      	uxtb	r3, r3
 800084c:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000850:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000854:	121b      	asrs	r3, r3, #8
 8000856:	b2db      	uxtb	r3, r3
 8000858:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <Motor_Data_Sent+0x104>)
 800085c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000860:	b2db      	uxtb	r3, r3
 8000862:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000866:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800086a:	121b      	asrs	r3, r3, #8
 800086c:	b2db      	uxtb	r3, r3
 800086e:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000874:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <Motor_Data_Sent+0x104>)
 8000880:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000884:	121b      	asrs	r3, r3, #8
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <Motor_Data_Sent+0x104>)
 800088e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	f107 021c 	add.w	r2, r7, #28
 80008a0:	4639      	mov	r1, r7
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <Motor_Data_Sent+0x108>)
 80008a4:	f001 fa4a 	bl	8001d3c <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 80008a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008aa:	3301      	adds	r3, #1
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
 80008ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	dd8f      	ble.n	80007d4 <Motor_Data_Sent+0x18>
	}
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20004080 	.word	0x20004080
 80008c4:	20004188 	.word	0x20004188

080008c8 <get_Motor_buffer>:
=======
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 8000c92:	2308      	movs	r3, #8
 8000c94:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9a:	e06c      	b.n	8000d76 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d12b      	bne.n	8000cfa <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 8000ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca6:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	121b      	asrs	r3, r3, #8
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	121b      	asrs	r3, r3, #8
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd0:	121b      	asrs	r3, r3, #8
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ce6:	121b      	asrs	r3, r3, #8
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 8000cee:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000cf8:	e032      	b.n	8000d60 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 8000cfa:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000cfe:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	121b      	asrs	r3, r3, #8
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d1c:	121b      	asrs	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d2e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d32:	121b      	asrs	r3, r3, #8
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d4c:	121b      	asrs	r3, r3, #8
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <Motor_Data_Sent+0x100>)
 8000d56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	f107 021c 	add.w	r2, r7, #28
 8000d68:	4639      	mov	r1, r7
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <Motor_Data_Sent+0x104>)
 8000d6c:	f001 f9f4 	bl	8002158 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3301      	adds	r3, #1
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	dd8f      	ble.n	8000c9c <Motor_Data_Sent+0x18>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000407c 	.word	0x2000407c
 8000d88:	20004184 	.word	0x20004184

08000d8c <get_Motor_buffer>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
<<<<<<< HEAD
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80008d2:	6839      	ldr	r1, [r7, #0]
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f804 	bl	80008e2 <Motor_Data_Replacement>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <Motor_Data_Replacement>:
=======
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f811 	bl	8000dc0 <Motor_Data_Replacement>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f804 	bl	8000dc0 <Motor_Data_Replacement>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <Motor_Data_Replacement>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
<<<<<<< HEAD
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	699a      	ldr	r2, [r3, #24]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689a      	ldr	r2, [r3, #8]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68da      	ldr	r2, [r3, #12]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	60da      	str	r2, [r3, #12]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <buzzer_init>:
=======
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68da      	ldr	r2, [r3, #12]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	60da      	str	r2, [r3, #12]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <Motor_set_raw_value>:

}

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b08c      	sub	sp, #48	; 0x30
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff ffa7 	bl	8000d8c <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 8000e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e42:	f7ff fc37 	bl	80006b4 <__aeabi_d2iz>
 8000e46:	4603      	mov	r3, r0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	68f9      	ldr	r1, [r7, #12]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ffa8 	bl	8000da6 <set_Motor_buffer>
}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <buzzer_init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
<<<<<<< HEAD
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	4802      	ldr	r0, [pc, #8]	; (8000958 <buzzer_init+0x10>)
 8000950:	f002 fdd6 	bl	8003500 <HAL_TIM_PWM_Start>

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200041f0 	.word	0x200041f0

0800095c <MX_CAN1_Init>:
=======
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000e64:	2100      	movs	r1, #0
 8000e66:	4802      	ldr	r0, [pc, #8]	; (8000e70 <buzzer_init+0x10>)
 8000e68:	f002 fd72 	bl	8003950 <HAL_TIM_PWM_Start>

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200041ec 	.word	0x200041ec

08000e74 <MX_CAN1_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
<<<<<<< HEAD
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_CAN1_Init+0x64>)
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <MX_CAN1_Init+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_CAN1_Init+0x64>)
 8000968:	2203      	movs	r2, #3
 800096a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_CAN1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_CAN1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_CAN1_Init+0x64>)
 800097a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800097e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_CAN1_Init+0x64>)
 8000982:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000986:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_CAN1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_CAN1_Init+0x64>)
 8000990:	2201      	movs	r2, #1
 8000992:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_CAN1_Init+0x64>)
 8000996:	2201      	movs	r2, #1
 8000998:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_CAN1_Init+0x64>)
 800099c:	2201      	movs	r2, #1
 800099e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_CAN1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_CAN1_Init+0x64>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_CAN1_Init+0x64>)
 80009ae:	f000 ffa5 	bl	80018fc <HAL_CAN_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009b8:	f000 fb42 	bl	8001040 <Error_Handler>
  }

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20004188 	.word	0x20004188
 80009c4:	40006400 	.word	0x40006400

080009c8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_CAN_MspInit+0xa4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d13b      	bne.n	8000a62 <HAL_CAN_MspInit+0x9a>
=======
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MX_CAN1_Init+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000e80:	2203      	movs	r2, #3
 8000e82:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000e92:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000e96:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000e9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e9e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_CAN1_Init+0x64>)
 8000ec6:	f000 ff27 	bl	8001d18 <HAL_CAN_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ed0:	f000 fb16 	bl	8001500 <Error_Handler>
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20004184 	.word	0x20004184
 8000edc:	40006400 	.word	0x40006400

08000ee0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <HAL_CAN_MspInit+0xa4>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d13b      	bne.n	8000f7a <HAL_CAN_MspInit+0x9a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
<<<<<<< HEAD
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_CAN_MspInit+0xa8>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_CAN_MspInit+0xa8>)
 80009f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_CAN_MspInit+0xa8>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_CAN_MspInit+0xa8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_CAN_MspInit+0xa8>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_CAN_MspInit+0xa8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
=======
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_CAN_MspInit+0xa8>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_CAN_MspInit+0xa8>)
 8000f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_CAN_MspInit+0xa8>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_CAN_MspInit+0xa8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a18      	ldr	r2, [pc, #96]	; (8000f88 <HAL_CAN_MspInit+0xa8>)
 8000f28:	f043 0308 	orr.w	r3, r3, #8
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_CAN_MspInit+0xa8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
<<<<<<< HEAD
 8000a22:	2303      	movs	r3, #3
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a32:	2309      	movs	r3, #9
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <HAL_CAN_MspInit+0xac>)
 8000a3e:	f001 fe7b 	bl	8002738 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2013      	movs	r0, #19
 8000a48:	f001 fe4c 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a4c:	2013      	movs	r0, #19
 8000a4e:	f001 fe65 	bl	800271c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2014      	movs	r0, #20
 8000a58:	f001 fe44 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a5c:	2014      	movs	r0, #20
 8000a5e:	f001 fe5d 	bl	800271c <HAL_NVIC_EnableIRQ>
=======
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f4a:	2309      	movs	r3, #9
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <HAL_CAN_MspInit+0xac>)
 8000f56:	f001 fe1d 	bl	8002b94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2013      	movs	r0, #19
 8000f60:	f001 fdee 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f64:	2013      	movs	r0, #19
 8000f66:	f001 fe07 	bl	8002b78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	2014      	movs	r0, #20
 8000f70:	f001 fde6 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f74:	2014      	movs	r0, #20
 8000f76:	f001 fdff 	bl	8002b78 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40006400 	.word	0x40006400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <can_filter_enable>:
=======
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40006400 	.word	0x40006400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020c00 	.word	0x40020c00

08000f90 <can_filter_enable>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
<<<<<<< HEAD
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000aa0:	231b      	movs	r3, #27
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4619      	mov	r1, r3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f001 f820 	bl	8001af4 <HAL_CAN_ConfigFilter>
}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <can_filter_disable>:
=======
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000fb8:	231b      	movs	r3, #27
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 ffa2 	bl	8001f10 <HAL_CAN_ConfigFilter>
}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <can_filter_disable>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7



void can_filter_disable(CAN_HandleTypeDef* hcan){
<<<<<<< HEAD
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000adc:	2301      	movs	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000ae4:	231b      	movs	r3, #27
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4619      	mov	r1, r3
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 fffe 	bl	8001af4 <HAL_CAN_ConfigFilter>
}
 8000af8:	bf00      	nop
 8000afa:	3730      	adds	r7, #48	; 0x30
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_CAN_RxFifo0MsgPendingCallback>:
=======
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8000ffc:	231b      	movs	r3, #27
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 ff80 	bl	8001f10 <HAL_CAN_ConfigFilter>
}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	; 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_CAN_RxFifo0MsgPendingCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
<<<<<<< HEAD
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000b10:	0d5b      	lsrs	r3, r3, #21
 8000b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b16:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8000b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000b2a:	4413      	add	r3, r2
 8000b2c:	f107 0208 	add.w	r2, r7, #8
 8000b30:	2100      	movs	r1, #0
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f001 f9dd 	bl	8001ef2 <HAL_CAN_GetRxMessage>
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200041b0 	.word	0x200041b0

08000b44 <vApplicationGetIdleTaskMemory>:
=======
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001028:	0d5b      	lsrs	r3, r3, #21
 800102a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800102e:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 800103a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001042:	4413      	add	r3, r2
 8001044:	f107 0208 	add.w	r2, r7, #8
 8001048:	2100      	movs	r1, #0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f001 f95f 	bl	800230e <HAL_CAN_GetRxMessage>
}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200041ac 	.word	0x200041ac

0800105c <vApplicationGetIdleTaskMemory>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
<<<<<<< HEAD
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <vApplicationGetIdleTaskMemory+0x30>)
 8000b5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000090 	.word	0x20000090
 8000b74:	200000e4 	.word	0x200000e4

08000b78 <MX_FREERTOS_Init>:
=======
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <vApplicationGetIdleTaskMemory+0x2c>)
 800106c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <vApplicationGetIdleTaskMemory+0x30>)
 8001072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000090 	.word	0x20000090
 800108c:	200000e4 	.word	0x200000e4

08001090 <MX_FREERTOS_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
<<<<<<< HEAD
 8000b78:	b5b0      	push	{r4, r5, r7, lr}
 8000b7a:	b0a8      	sub	sp, #160	; 0xa0
 8000b7c:	af00      	add	r7, sp, #0
=======
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b0a8      	sub	sp, #160	; 0xa0
 8001094:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
<<<<<<< HEAD
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_FREERTOS_Init+0xc0>)
 8000b80:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b84:	461d      	mov	r5, r3
 8000b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 ff7c 	bl	8004a96 <osThreadCreate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <MX_FREERTOS_Init+0xc4>)
 8000ba2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_FREERTOS_Init+0xc8>)
 8000ba6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000baa:	461d      	mov	r5, r3
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8000bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f003 ff69 	bl	8004a96 <osThreadCreate>
 8000bc4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_FREERTOS_Init+0xcc>)
 8000bca:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bce:	461d      	mov	r5, r3
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8000bdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 ff57 	bl	8004a96 <osThreadCreate>
 8000be8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_FREERTOS_Init+0xd0>)
 8000bee:	f107 0420 	add.w	r4, r7, #32
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 ff45 	bl	8004a96 <osThreadCreate>
 8000c0c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_FREERTOS_Init+0xd4>)
 8000c12:	1d3c      	adds	r4, r7, #4
 8000c14:	461d      	mov	r5, r3
 8000c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 ff35 	bl	8004a96 <osThreadCreate>
 8000c2c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
=======
 8001096:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <MX_FREERTOS_Init+0xc0>)
 8001098:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800109c:	461d      	mov	r5, r3
 800109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fe52 	bl	8004d5a <osThreadCreate>
 80010b6:	4602      	mov	r2, r0
 80010b8:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_FREERTOS_Init+0xc4>)
 80010ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_FREERTOS_Init+0xc8>)
 80010be:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80010c2:	461d      	mov	r5, r3
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 80010d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fe3f 	bl	8004d5a <osThreadCreate>
 80010dc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_FREERTOS_Init+0xcc>)
 80010e2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 80010f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fe2d 	bl	8004d5a <osThreadCreate>
 8001100:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_FREERTOS_Init+0xd0>)
 8001106:	f107 0420 	add.w	r4, r7, #32
 800110a:	461d      	mov	r5, r3
 800110c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001110:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001114:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fe1b 	bl	8004d5a <osThreadCreate>
 8001124:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_FREERTOS_Init+0xd4>)
 800112a:	1d3c      	adds	r4, r7, #4
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fe0b 	bl	8004d5a <osThreadCreate>
 8001144:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
<<<<<<< HEAD
 8000c30:	bf00      	nop
 8000c32:	37a0      	adds	r7, #160	; 0xa0
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}
 8000c38:	08006e34 	.word	0x08006e34
 8000c3c:	20004230 	.word	0x20004230
 8000c40:	08006e50 	.word	0x08006e50
 8000c44:	08006e6c 	.word	0x08006e6c
 8000c48:	08006e88 	.word	0x08006e88
 8000c4c:	08006ea4 	.word	0x08006ea4

08000c50 <StartDefaultTask>:
=======
 8001148:	bf00      	nop
 800114a:	37a0      	adds	r7, #160	; 0xa0
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	08006fcc 	.word	0x08006fcc
 8001154:	20004230 	.word	0x20004230
 8001158:	08006ff4 	.word	0x08006ff4
 800115c:	0800701c 	.word	0x0800701c
 8001160:	08007044 	.word	0x08007044
 8001164:	0800706c 	.word	0x0800706c

08001168 <StartDefaultTask>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
<<<<<<< HEAD
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
=======
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f003 ff68 	bl	8004b2e <osDelay>
 8000c5e:	e7fb      	b.n	8000c58 <StartDefaultTask+0x8>

08000c60 <MX_GPIO_Init>:
=======
 8001170:	2001      	movs	r0, #1
 8001172:	f003 fe3e 	bl	8004df2 <osDelay>
 8001176:	e7fb      	b.n	8001170 <StartDefaultTask+0x8>

08001178 <MX_GPIO_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	; 0x30
 8000c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	4b6c      	ldr	r3, [pc, #432]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a6b      	ldr	r2, [pc, #428]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b69      	ldr	r3, [pc, #420]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	4b65      	ldr	r3, [pc, #404]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a64      	ldr	r2, [pc, #400]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b5e      	ldr	r3, [pc, #376]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a5d      	ldr	r2, [pc, #372]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b5b      	ldr	r3, [pc, #364]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b57      	ldr	r3, [pc, #348]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a56      	ldr	r2, [pc, #344]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a41      	ldr	r2, [pc, #260]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <MX_GPIO_Init+0x1cc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0320 	and.w	r3, r3, #32
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d40:	483b      	ldr	r0, [pc, #236]	; (8000e30 <MX_GPIO_Init+0x1d0>)
 8000d42:	f001 fea5 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	211e      	movs	r1, #30
 8000d4a:	4839      	ldr	r0, [pc, #228]	; (8000e30 <MX_GPIO_Init+0x1d0>)
 8000d4c:	f001 fea0 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d56:	4837      	ldr	r0, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x1d4>)
 8000d58:	f001 fe9a 	bl	8002a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d62:	4835      	ldr	r0, [pc, #212]	; (8000e38 <MX_GPIO_Init+0x1d8>)
 8000d64:	f001 fe94 	bl	8002a90 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(UltraSound_Trig_Port, UltraSound_Trig, GPIO_PIN_RESET);
//  HAL_GPIO_WritePin(UltraSound_Echo_Port, UltraSound_Echo, GPIO_PIN_RESET);
=======
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <MX_GPIO_Init+0x194>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a5d      	ldr	r2, [pc, #372]	; (800130c <MX_GPIO_Init+0x194>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <MX_GPIO_Init+0x194>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	4b57      	ldr	r3, [pc, #348]	; (800130c <MX_GPIO_Init+0x194>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a56      	ldr	r2, [pc, #344]	; (800130c <MX_GPIO_Init+0x194>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <MX_GPIO_Init+0x194>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <MX_GPIO_Init+0x194>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a4f      	ldr	r2, [pc, #316]	; (800130c <MX_GPIO_Init+0x194>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <MX_GPIO_Init+0x194>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b49      	ldr	r3, [pc, #292]	; (800130c <MX_GPIO_Init+0x194>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a48      	ldr	r2, [pc, #288]	; (800130c <MX_GPIO_Init+0x194>)
 80011ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <MX_GPIO_Init+0x194>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <MX_GPIO_Init+0x194>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a41      	ldr	r2, [pc, #260]	; (800130c <MX_GPIO_Init+0x194>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <MX_GPIO_Init+0x194>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <MX_GPIO_Init+0x194>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a3a      	ldr	r2, [pc, #232]	; (800130c <MX_GPIO_Init+0x194>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <MX_GPIO_Init+0x194>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <MX_GPIO_Init+0x194>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a33      	ldr	r2, [pc, #204]	; (800130c <MX_GPIO_Init+0x194>)
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b31      	ldr	r3, [pc, #196]	; (800130c <MX_GPIO_Init+0x194>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001258:	482d      	ldr	r0, [pc, #180]	; (8001310 <MX_GPIO_Init+0x198>)
 800125a:	f001 fe45 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	211e      	movs	r1, #30
 8001262:	482b      	ldr	r0, [pc, #172]	; (8001310 <MX_GPIO_Init+0x198>)
 8001264:	f001 fe40 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126e:	4829      	ldr	r0, [pc, #164]	; (8001314 <MX_GPIO_Init+0x19c>)
 8001270:	f001 fe3a 	bl	8002ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <MX_GPIO_Init+0x1a0>)
 800127c:	f001 fe34 	bl	8002ee8 <HAL_GPIO_WritePin>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
<<<<<<< HEAD
 8000d68:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8000d6c:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482b      	ldr	r0, [pc, #172]	; (8000e30 <MX_GPIO_Init+0x1d0>)
 8000d82:	f001 fcd9 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000d86:	2304      	movs	r3, #4
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <MX_GPIO_Init+0x1dc>)
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4829      	ldr	r0, [pc, #164]	; (8000e40 <MX_GPIO_Init+0x1e0>)
 8000d9a:	f001 fccd 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8000d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	481f      	ldr	r0, [pc, #124]	; (8000e34 <MX_GPIO_Init+0x1d4>)
 8000db8:	f001 fcbe 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8000dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <MX_GPIO_Init+0x1d8>)
 8000dd6:	f001 fcaf 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : UltraSound */
  GPIO_InitStruct.Pin = UltraSound_Trig;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	2302      	movs	r3, #2
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UltraSound_Trig_Port, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_GPIO_Init+0x1d4>)
 8000df2:	f001 fca1 	bl	8002738 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = UltraSound_Echo;
 8000df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UltraSound_Echo_Port, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <MX_GPIO_Init+0x1d8>)
 8000e10:	f001 fc92 	bl	8002738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2105      	movs	r1, #5
 8000e18:	2008      	movs	r0, #8
 8000e1a:	f001 fc63 	bl	80026e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f001 fc7c 	bl	800271c <HAL_NVIC_EnableIRQ>

}
 8000e24:	bf00      	nop
 8000e26:	3730      	adds	r7, #48	; 0x30
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40021800 	.word	0x40021800
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	10110000 	.word	0x10110000
 8000e40:	40020400 	.word	0x40020400

08000e44 <HAL_GPIO_EXTI_Callback>:
=======
 8001280:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001284:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <MX_GPIO_Init+0x198>)
 800129a:	f001 fc7b 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800129e:	2304      	movs	r3, #4
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_GPIO_Init+0x1a4>)
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_GPIO_Init+0x1a8>)
 80012b2:	f001 fc6f 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 80012b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_GPIO_Init+0x19c>)
 80012d0:	f001 fc60 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80012d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <MX_GPIO_Init+0x1a0>)
 80012ee:	f001 fc51 	bl	8002b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2008      	movs	r0, #8
 80012f8:	f001 fc22 	bl	8002b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012fc:	2008      	movs	r0, #8
 80012fe:	f001 fc3b 	bl	8002b78 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40021800 	.word	0x40021800
 8001314:	40021000 	.word	0x40021000
 8001318:	40021400 	.word	0x40021400
 800131c:	10110000 	.word	0x10110000
 8001320:	40020400 	.word	0x40020400

08001324 <HAL_GPIO_EXTI_Callback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
<<<<<<< HEAD
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d12b      	bne.n	8000eac <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8000e54:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e56:	f7ff fe0f 	bl	8000a78 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	6810      	ldr	r0, [r2, #0]
 8000e62:	6851      	ldr	r1, [r2, #4]
 8000e64:	c303      	stmia	r3!, {r0, r1}
=======
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b04      	cmp	r3, #4
 8001332:	d12b      	bne.n	800138c <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8001334:	4817      	ldr	r0, [pc, #92]	; (8001394 <HAL_GPIO_EXTI_Callback+0x70>)
 8001336:	f7ff fe2b 	bl	8000f90 <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_GPIO_EXTI_Callback+0x74>)
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	6810      	ldr	r0, [r2, #0]
 8001342:	6851      	ldr	r1, [r2, #4]
 8001344:	c303      	stmia	r3!, {r0, r1}
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
<<<<<<< HEAD
 8000e66:	7a3b      	ldrb	r3, [r7, #8]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b21a      	sxth	r2, r3
 8000e6c:	7a7b      	ldrb	r3, [r7, #9]
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000e74:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000e76:	7abb      	ldrb	r3, [r7, #10]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000e84:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8000e86:	7b3b      	ldrb	r3, [r7, #12]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x78>)
 8000ea2:	f005 f845 	bl	8005f30 <iprintf>
=======
 8001346:	7a3b      	ldrb	r3, [r7, #8]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	7a7b      	ldrb	r3, [r7, #9]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001354:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7afb      	ldrb	r3, [r7, #11]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001364:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8001366:	7b3b      	ldrb	r3, [r7, #12]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21b      	sxth	r3, r3
 8001374:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	2101      	movs	r1, #1
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <HAL_GPIO_EXTI_Callback+0x78>)
 8001382:	f004 ff1f 	bl	80061c4 <iprintf>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
<<<<<<< HEAD
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ea8:	f7ff fe08 	bl	8000abc <can_filter_disable>
=======
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <HAL_GPIO_EXTI_Callback+0x70>)
 8001388:	f7ff fe24 	bl	8000fd4 <can_filter_disable>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7


	}
}
<<<<<<< HEAD
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20004188 	.word	0x20004188
 8000eb8:	200041b0 	.word	0x200041b0
 8000ebc:	08006ec0 	.word	0x08006ec0

08000ec0 <main>:
=======
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20004184 	.word	0x20004184
 8001398:	200041ac 	.word	0x200041ac
 800139c:	08007088 	.word	0x08007088

080013a0 <main>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
=======
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000ec4:	f000 fcd8 	bl	8001878 <HAL_Init>
=======
 80013a4:	f000 fc76 	bl	8001c94 <HAL_Init>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000ec8:	f000 f820 	bl	8000f0c <SystemClock_Config>
=======
 80013a8:	f000 f81e 	bl	80013e8 <SystemClock_Config>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000ecc:	f7ff fec8 	bl	8000c60 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ed0:	f7ff fd44 	bl	800095c <MX_CAN1_Init>
  MX_TIM4_Init();
 8000ed4:	f000 fa4a 	bl	800136c <MX_TIM4_Init>
  MX_TIM12_Init();
 8000ed8:	f000 faae 	bl	8001438 <MX_TIM12_Init>
  MX_UART7_Init();
 8000edc:	f000 fc30 	bl	8001740 <MX_UART7_Init>
  MX_TIM14_Init();
 8000ee0:	f000 faf0 	bl	80014c4 <MX_TIM14_Init>
  MX_TIM13_Init();
 8000ee4:	f000 fb12 	bl	800150c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 8000ee8:	f7ff fd2e 	bl	8000948 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <main+0x44>)
 8000eee:	f000 fee1 	bl	8001cb4 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <main+0x48>)
 8000ef4:	f002 fab5 	bl	8003462 <HAL_TIM_Base_Start_IT>
=======
 80013ac:	f7ff fee4 	bl	8001178 <MX_GPIO_Init>
  MX_CAN1_Init();
 80013b0:	f7ff fd60 	bl	8000e74 <MX_CAN1_Init>
  MX_TIM4_Init();
 80013b4:	f000 fa2e 	bl	8001814 <MX_TIM4_Init>
  MX_TIM12_Init();
 80013b8:	f000 fa92 	bl	80018e0 <MX_TIM12_Init>
  MX_UART7_Init();
 80013bc:	f000 fbce 	bl	8001b5c <MX_UART7_Init>
  MX_TIM14_Init();
 80013c0:	f000 fad4 	bl	800196c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80013c4:	f7ff fd4c 	bl	8000e60 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <main+0x40>)
 80013ca:	f000 fe81 	bl	80020d0 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <main+0x44>)
 80013d0:	f002 fa6f 	bl	80038b2 <HAL_TIM_Base_Start_IT>

>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
<<<<<<< HEAD
 8000ef8:	f7ff fe3e 	bl	8000b78 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000efc:	f003 fdc4 	bl	8004a88 <osKernelStart>
=======
 80013d4:	f7ff fe5c 	bl	8001090 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80013d8:	f003 fcb8 	bl	8004d4c <osKernelStart>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8000f00:	e7fe      	b.n	8000f00 <main+0x40>
 8000f02:	bf00      	nop
 8000f04:	20004188 	.word	0x20004188
 8000f08:	20004274 	.word	0x20004274

08000f0c <SystemClock_Config>:
=======
 80013dc:	e7fe      	b.n	80013dc <main+0x3c>
 80013de:	bf00      	nop
 80013e0:	20004184 	.word	0x20004184
 80013e4:	20004274 	.word	0x20004274

080013e8 <SystemClock_Config>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f005 f800 	bl	8005f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
=======
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2230      	movs	r2, #48	; 0x30
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 fedc 	bl	80061b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f58:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <SystemClock_Config+0xd4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
=======
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <SystemClock_Config+0xd0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <SystemClock_Config+0xd0>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <SystemClock_Config+0xd0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <SystemClock_Config+0xd4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xd4>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000f80:	2306      	movs	r3, #6
 8000f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f84:	23a8      	movs	r3, #168	; 0xa8
 8000f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fdc7 	bl	8002b28 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa0:	f000 f84e 	bl	8001040 <Error_Handler>
=======
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800145c:	2306      	movs	r3, #6
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001460:	23a8      	movs	r3, #168	; 0xa8
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001464:	2302      	movs	r3, #2
 8001466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001468:	2304      	movs	r3, #4
 800146a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fd85 	bl	8002f80 <HAL_RCC_OscConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800147c:	f000 f840 	bl	8001500 <Error_Handler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 f820 	bl	8003008 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fce:	f000 f837 	bl	8001040 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3750      	adds	r7, #80	; 0x50
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001480:	230f      	movs	r3, #15
 8001482:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 ffde 	bl	8003460 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014aa:	f000 f829 	bl	8001500 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	; 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d104      	bne.n	8001000 <HAL_TIM_PeriodElapsedCallback+0x1c>
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ffc:	f001 fd61 	bl	8002ac2 <HAL_GPIO_TogglePin>
=======
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d104      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 80014d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d6:	4808      	ldr	r0, [pc, #32]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014d8:	f001 fd1f 	bl	8002f1a <HAL_GPIO_TogglePin>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
<<<<<<< HEAD
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 800100a:	f000 fc57 	bl	80018bc <HAL_IncTick>
  }

  if(htim->Instance == TIM13)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d104      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	 period_counter++;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001020:	6013      	str	r3, [r2, #0]
=======
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80014e6:	f000 fbf7 	bl	8001cd8 <HAL_IncTick>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40002000 	.word	0x40002000
 8001030:	40021000 	.word	0x40021000
 8001034:	40000c00 	.word	0x40000c00
 8001038:	40001c00 	.word	0x40001c00
 800103c:	200002e4 	.word	0x200002e4

08001040 <Error_Handler>:
=======
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40002000 	.word	0x40002000
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40000c00 	.word	0x40000c00

08001500 <Error_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
=======
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
=======
 8001504:	b672      	cpsid	i
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
=======
 8001506:	e7fe      	b.n	8001506 <Error_Handler+0x6>

08001508 <HAL_MspInit>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
=======
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_MspInit+0x54>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <HAL_MspInit+0x54>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x54>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_MspInit+0x54>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_MspInit+0x54>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_MspInit+0x54>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
=======
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_MspInit+0x54>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_MspInit+0x54>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_MspInit+0x54>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_MspInit+0x54>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_MspInit+0x54>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_MspInit+0x54>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 800108a:	2200      	movs	r2, #0
 800108c:	210f      	movs	r1, #15
 800108e:	f06f 0001 	mvn.w	r0, #1
 8001092:	f001 fb27 	bl	80026e4 <HAL_NVIC_SetPriority>
=======
 8001546:	2200      	movs	r2, #0
 8001548:	210f      	movs	r1, #15
 800154a:	f06f 0001 	mvn.w	r0, #1
 800154e:	f001 faf7 	bl	8002b40 <HAL_NVIC_SetPriority>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_InitTick>:
=======
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_InitTick>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2032      	movs	r0, #50	; 0x32
 80010ba:	f001 fb13 	bl	80026e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80010be:	2032      	movs	r0, #50	; 0x32
 80010c0:	f001 fb2c 	bl	800271c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_InitTick+0xa4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_InitTick+0xa4>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_InitTick+0xa4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 0308 	and.w	r3, r3, #8
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	f107 0210 	add.w	r2, r7, #16
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 f95c 	bl	80033a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010f0:	f002 f932 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80010f4:	4603      	mov	r3, r0
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_InitTick+0xa8>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_InitTick+0xac>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <HAL_InitTick+0xb0>)
 800110c:	601a      	str	r2, [r3, #0]
=======
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	2032      	movs	r0, #50	; 0x32
 8001576:	f001 fae3 	bl	8002b40 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f001 fafc 	bl	8002b78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_InitTick+0xa4>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_InitTick+0xa4>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_InitTick+0xa4>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159c:	f107 0210 	add.w	r2, r7, #16
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 f926 	bl	80037f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015ac:	f002 f8fc 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_InitTick+0xa8>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	0c9b      	lsrs	r3, r3, #18
 80015c0:	3b01      	subs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_InitTick+0xac>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_InitTick+0xb0>)
 80015c8:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_InitTick+0xac>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_InitTick+0xac>)
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_InitTick+0xac>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_InitTick+0xac>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <HAL_InitTick+0xac>)
 800112a:	f002 f96f 	bl	800340c <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d104      	bne.n	800113e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <HAL_InitTick+0xac>)
 8001136:	f002 f994 	bl	8003462 <HAL_TIM_Base_Start_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x9c>
=======
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_InitTick+0xac>)
 80015cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_InitTick+0xac>)
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_InitTick+0xac>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_InitTick+0xac>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80015e4:	4809      	ldr	r0, [pc, #36]	; (800160c <HAL_InitTick+0xac>)
 80015e6:	f002 f939 	bl	800385c <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80015f0:	4806      	ldr	r0, [pc, #24]	; (800160c <HAL_InitTick+0xac>)
 80015f2:	f002 f95e 	bl	80038b2 <HAL_TIM_Base_Start_IT>
 80015f6:	4603      	mov	r3, r0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x9c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3730      	adds	r7, #48	; 0x30
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	431bde83 	.word	0x431bde83
 8001150:	20004234 	.word	0x20004234
 8001154:	40000c00 	.word	0x40000c00

08001158 <NMI_Handler>:
=======
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	431bde83 	.word	0x431bde83
 800160c:	20004234 	.word	0x20004234
 8001610:	40000c00 	.word	0x40000c00

08001614 <NMI_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
=======
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:
=======
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
=======
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:
=======
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
=======
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:
=======
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
=======
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:
=======
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
=======
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <DebugMon_Handler>:
=======
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <DebugMon_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
=======
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <EXTI2_IRQHandler>:
=======
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <EXTI2_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
<<<<<<< HEAD
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
=======
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
<<<<<<< HEAD
 8001188:	2004      	movs	r0, #4
 800118a:	f001 fcb5 	bl	8002af8 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001644:	2004      	movs	r0, #4
 8001646:	f001 fc83 	bl	8002f50 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
<<<<<<< HEAD
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <CAN1_TX_IRQHandler>:
=======
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <CAN1_TX_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
<<<<<<< HEAD
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
=======
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <CAN1_TX_IRQHandler+0x10>)
 800119a:	f000 ffbc 	bl	8002116 <HAL_CAN_IRQHandler>
=======
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <CAN1_TX_IRQHandler+0x10>)
 8001656:	f000 ff92 	bl	800257e <HAL_CAN_IRQHandler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
<<<<<<< HEAD
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20004188 	.word	0x20004188

080011a8 <CAN1_RX0_IRQHandler>:
=======
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20004184 	.word	0x20004184

08001664 <CAN1_RX0_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
=======
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <CAN1_RX0_IRQHandler+0x10>)
 80011ae:	f000 ffb2 	bl	8002116 <HAL_CAN_IRQHandler>
=======
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <CAN1_RX0_IRQHandler+0x10>)
 800166a:	f000 ff88 	bl	800257e <HAL_CAN_IRQHandler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20004188 	.word	0x20004188

080011bc <TIM8_TRG_COM_TIM14_IRQHandler>:
=======
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20004184 	.word	0x20004184

08001678 <TIM8_TRG_COM_TIM14_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
<<<<<<< HEAD
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
=======
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
<<<<<<< HEAD
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011c2:	f002 f9db 	bl	800357c <HAL_TIM_IRQHandler>
=======
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800167e:	f002 f9a5 	bl	80039cc <HAL_TIM_IRQHandler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
<<<<<<< HEAD
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200042b4 	.word	0x200042b4

080011d0 <TIM5_IRQHandler>:
=======
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20004274 	.word	0x20004274

0800168c <TIM5_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
<<<<<<< HEAD
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
=======
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
<<<<<<< HEAD
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM5_IRQHandler+0x10>)
 80011d6:	f002 f9d1 	bl	800357c <HAL_TIM_IRQHandler>
=======
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM5_IRQHandler+0x10>)
 8001692:	f002 f99b 	bl	80039cc <HAL_TIM_IRQHandler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
<<<<<<< HEAD
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20004234 	.word	0x20004234

080011e4 <TIM8_UP_TIM13_IRQHandler>:


/* USER CODE BEGIN 1 */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80011ea:	f002 f9c7 	bl	800357c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20004274 	.word	0x20004274

080011f8 <_read>:
=======
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20004234 	.word	0x20004234

080016a0 <_read>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e00a      	b.n	8001220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800120a:	f3af 8000 	nop.w
 800120e:	4601      	mov	r1, r0
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	b2ca      	uxtb	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf0      	blt.n	800120a <_read+0x12>
	}

return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e009      	b.n	8001258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fa65 	bl	800171c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf1      	blt.n	8001244 <_write+0x12>
	}
	return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_close>:

int _close(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_fstat>:
=======
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e00a      	b.n	80016c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016b2:	f3af 8000 	nop.w
 80016b6:	4601      	mov	r1, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf0      	blt.n	80016b2 <_read+0x12>
	}

return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e009      	b.n	8001700 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fa1f 	bl	8001b38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf1      	blt.n	80016ec <_write+0x12>
	}
	return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001292:	605a      	str	r2, [r3, #4]
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_isatty>:

int _isatty(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	return 1;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <_sbrk>:
=======
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
	return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <_sbrk>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
=======
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
=======
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
=======
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f004 fde2 	bl	8005ecc <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20030000 	.word	0x20030000
 8001334:	00000400 	.word	0x00000400
 8001338:	200002e8 	.word	0x200002e8
 800133c:	20004348 	.word	0x20004348

08001340 <SystemInit>:
=======
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f004 fcd8 	bl	8006160 <__errno>
 80017b0:	4602      	mov	r2, r0
 80017b2:	230c      	movs	r3, #12
 80017b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20030000 	.word	0x20030000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	200002e4 	.word	0x200002e4
 80017e4:	20004300 	.word	0x20004300

080017e8 <SystemInit>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <SystemInit+0x28>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <SystemInit+0x28>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <SystemInit+0x28>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <SystemInit+0x28>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SystemInit+0x28>)
 8001356:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800135a:	609a      	str	r2, [r3, #8]
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_TIM4_Init>:
=======
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SystemInit+0x28>)
 80017fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001802:	609a      	str	r2, [r3, #8]
#endif
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <MX_TIM4_Init>:
TIM_HandleTypeDef htim12;
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim13;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_TIM4_Init+0xc4>)
 8001390:	4a28      	ldr	r2, [pc, #160]	; (8001434 <MX_TIM4_Init+0xc8>)
 8001392:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_TIM4_Init+0xc4>)
 8001396:	2253      	movs	r2, #83	; 0x53
 8001398:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <MX_TIM4_Init+0xc4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <MX_TIM4_Init+0xc4>)
 80013a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_TIM4_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <MX_TIM4_Init+0xc4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013b4:	481e      	ldr	r0, [pc, #120]	; (8001430 <MX_TIM4_Init+0xc4>)
 80013b6:	f002 f878 	bl	80034aa <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80013c0:	f7ff fe3e 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	4619      	mov	r1, r3
 80013d2:	4817      	ldr	r0, [pc, #92]	; (8001430 <MX_TIM4_Init+0xc4>)
 80013d4:	f002 fd3e 	bl	8003e54 <HAL_TIMEx_MasterConfigSynchronization>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013de:	f7ff fe2f 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e2:	2360      	movs	r3, #96	; 0x60
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM4_Init+0xc4>)
 80013fc:	f002 f9c6 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001406:	f7ff fe1b 	bl	8001040 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2208      	movs	r2, #8
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM4_Init+0xc4>)
 8001412:	f002 f9bb 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800141c:	f7ff fe10 	bl	8001040 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM4_Init+0xc4>)
 8001422:	f000 f919 	bl	8001658 <HAL_TIM_MspPostInit>

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20004040 	.word	0x20004040
 8001434:	40000800 	.word	0x40000800

08001438 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	615a      	str	r2, [r3, #20]
 800144e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM12_Init+0x84>)
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <MX_TIM12_Init+0x88>)
 8001454:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM12_Init+0x84>)
 8001458:	2223      	movs	r2, #35	; 0x23
 800145a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_TIM12_Init+0x84>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_TIM12_Init+0x84>)
 8001464:	f242 720f 	movw	r2, #9999	; 0x270f
 8001468:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_TIM12_Init+0x84>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_TIM12_Init+0x84>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_TIM12_Init+0x84>)
 8001478:	f002 f817 	bl	80034aa <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001482:	f7ff fddd 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	; 0x60
 8001488:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_TIM12_Init+0x84>)
 800149e:	f002 f975 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80014a8:	f7ff fdca 	bl	8001040 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <MX_TIM12_Init+0x84>)
 80014ae:	f000 f8d3 	bl	8001658 <HAL_TIM_MspPostInit>

}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200041f0 	.word	0x200041f0
 80014c0:	40001800 	.word	0x40001800

080014c4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM14_Init+0x40>)
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_TIM14_Init+0x44>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_TIM14_Init+0x40>)
 80014d0:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80014d4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_TIM14_Init+0x40>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_TIM14_Init+0x40>)
 80014de:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_TIM14_Init+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_TIM14_Init+0x40>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_TIM14_Init+0x40>)
 80014f2:	f001 ff8b 	bl	800340c <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80014fc:	f7ff fda0 	bl	8001040 <Error_Handler>
  }

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200042b4 	.word	0x200042b4
 8001508:	40002000 	.word	0x40002000

0800150c <MX_TIM13_Init>:

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_TIM13_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_TIM13_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_TIM13_Init+0x4c>)
 8001518:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800151c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_TIM13_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4999;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_TIM13_Init+0x4c>)
 8001526:	f241 3287 	movw	r2, #4999	; 0x1387
 800152a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <MX_TIM13_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_TIM13_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM13_Init+0x4c>)
 800153a:	f001 ff67 	bl	800340c <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001544:	f7ff fd7c 	bl	8001040 <Error_Handler>
  }

  __HAL_TIM_CLEAR_IT(&htim13, TIM_IT_UPDATE);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <MX_TIM13_Init+0x4c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f06f 0201 	mvn.w	r2, #1
 8001550:	611a      	str	r2, [r3, #16]
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20004274 	.word	0x20004274
 800155c:	40001c00 	.word	0x40001c00

08001560 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_TIM_PWM_MspInit+0x64>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10e      	bne.n	8001590 <HAL_TIM_PWM_MspInit+0x30>
=======
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <MX_TIM4_Init+0xc4>)
 8001838:	4a28      	ldr	r2, [pc, #160]	; (80018dc <MX_TIM4_Init+0xc8>)
 800183a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <MX_TIM4_Init+0xc4>)
 800183e:	2253      	movs	r2, #83	; 0x53
 8001840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <MX_TIM4_Init+0xc4>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <MX_TIM4_Init+0xc4>)
 800184a:	f242 720f 	movw	r2, #9999	; 0x270f
 800184e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_TIM4_Init+0xc4>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <MX_TIM4_Init+0xc4>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <MX_TIM4_Init+0xc4>)
 800185e:	f002 f84c 	bl	80038fa <HAL_TIM_PWM_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001868:	f7ff fe4a 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	; (80018d8 <MX_TIM4_Init+0xc4>)
 800187c:	f002 fd12 	bl	80042a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001886:	f7ff fe3b 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	; 0x60
 800188c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	; (80018d8 <MX_TIM4_Init+0xc4>)
 80018a4:	f002 f99a 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80018ae:	f7ff fe27 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2208      	movs	r2, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM4_Init+0xc4>)
 80018ba:	f002 f98f 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80018c4:	f7ff fe1c 	bl	8001500 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM4_Init+0xc4>)
 80018ca:	f000 f8d3 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000403c 	.word	0x2000403c
 80018dc:	40000800 	.word	0x40000800

080018e0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
 80018f4:	615a      	str	r2, [r3, #20]
 80018f6:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_TIM12_Init+0x84>)
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <MX_TIM12_Init+0x88>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM12_Init+0x84>)
 8001900:	2223      	movs	r2, #35	; 0x23
 8001902:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_TIM12_Init+0x84>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM12_Init+0x84>)
 800190c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001910:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_TIM12_Init+0x84>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_TIM12_Init+0x84>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_TIM12_Init+0x84>)
 8001920:	f001 ffeb 	bl	80038fa <HAL_TIM_PWM_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800192a:	f7ff fde9 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192e:	2360      	movs	r3, #96	; 0x60
 8001930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <MX_TIM12_Init+0x84>)
 8001946:	f002 f949 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001950:	f7ff fdd6 	bl	8001500 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <MX_TIM12_Init+0x84>)
 8001956:	f000 f88d 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 800195a:	bf00      	nop
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200041ec 	.word	0x200041ec
 8001968:	40001800 	.word	0x40001800

0800196c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_TIM14_Init+0x40>)
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <MX_TIM14_Init+0x44>)
 8001974:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <MX_TIM14_Init+0x40>)
 8001978:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800197c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_TIM14_Init+0x40>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_TIM14_Init+0x40>)
 8001986:	f242 720f 	movw	r2, #9999	; 0x270f
 800198a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_TIM14_Init+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_TIM14_Init+0x40>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_TIM14_Init+0x40>)
 800199a:	f001 ff5f 	bl	800385c <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80019a4:	f7ff fdac 	bl	8001500 <Error_Handler>
  }

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20004274 	.word	0x20004274
 80019b0:	40002000 	.word	0x40002000

080019b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_TIM_PWM_MspInit+0x64>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10e      	bne.n	80019e4 <HAL_TIM_PWM_MspInit+0x30>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
<<<<<<< HEAD
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HAL_TIM_PWM_MspInit+0x68>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <HAL_TIM_PWM_MspInit+0x68>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_TIM_PWM_MspInit+0x68>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
=======
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_TIM_PWM_MspInit+0x68>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <HAL_TIM_PWM_MspInit+0x68>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_TIM_PWM_MspInit+0x68>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
<<<<<<< HEAD
 800158e:	e012      	b.n	80015b6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_TIM_PWM_MspInit+0x6c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10d      	bne.n	80015b6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <HAL_TIM_PWM_MspInit+0x68>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_TIM_PWM_MspInit+0x68>)
 80015a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <HAL_TIM_PWM_MspInit+0x68>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40000800 	.word	0x40000800
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40001800 	.word	0x40001800

080015d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_TIM_Base_MspInit+0x7c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d115      	bne.n	800160e <HAL_TIM_Base_MspInit+0x3e>
=======
 80019e2:	e012      	b.n	8001a0a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_TIM_PWM_MspInit+0x6c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_PWM_MspInit+0x68>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_TIM_PWM_MspInit+0x68>)
 80019f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_TIM_PWM_MspInit+0x68>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40001800 	.word	0x40001800

08001a24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_TIM_Base_MspInit+0x48>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d115      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x3e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
<<<<<<< HEAD
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_TIM_Base_MspInit+0x80>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_TIM_Base_MspInit+0x80>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_TIM_Base_MspInit+0x80>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	202d      	movs	r0, #45	; 0x2d
 8001604:	f001 f86e 	bl	80026e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001608:	202d      	movs	r0, #45	; 0x2d
 800160a:	f001 f887 	bl	800271c <HAL_NVIC_EnableIRQ>
=======
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_TIM_Base_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <HAL_TIM_Base_MspInit+0x4c>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_TIM_Base_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2105      	movs	r1, #5
 8001a56:	202d      	movs	r0, #45	; 0x2d
 8001a58:	f001 f872 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a5c:	202d      	movs	r0, #45	; 0x2d
 8001a5e:	f001 f88b 	bl	8002b78 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <HAL_TIM_Base_MspInit+0x84>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d115      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x74>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_TIM_Base_MspInit+0x80>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x80>)
 8001622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_TIM_Base_MspInit+0x80>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2101      	movs	r1, #1
 8001638:	202c      	movs	r0, #44	; 0x2c
 800163a:	f001 f853 	bl	80026e4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800163e:	202c      	movs	r0, #44	; 0x2c
 8001640:	f001 f86c 	bl	800271c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
<<<<<<< HEAD
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40002000 	.word	0x40002000
 8001650:	40023800 	.word	0x40023800
 8001654:	40001c00 	.word	0x40001c00

08001658 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_TIM_MspPostInit+0xb0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11f      	bne.n	80016ba <HAL_TIM_MspPostInit+0x62>
=======
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40002000 	.word	0x40002000
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_TIM_MspPostInit+0xb0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11f      	bne.n	8001ad6 <HAL_TIM_MspPostInit+0x62>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
<<<<<<< HEAD
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a22      	ldr	r2, [pc, #136]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
=======
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_TIM_MspPostInit+0xb4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_TIM_MspPostInit+0xb4>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_TIM_MspPostInit+0xb4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
<<<<<<< HEAD
 8001696:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a8:	2302      	movs	r3, #2
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4817      	ldr	r0, [pc, #92]	; (8001710 <HAL_TIM_MspPostInit+0xb8>)
 80016b4:	f001 f840 	bl	8002738 <HAL_GPIO_Init>
=======
 8001ab2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4817      	ldr	r0, [pc, #92]	; (8001b2c <HAL_TIM_MspPostInit+0xb8>)
 8001ad0:	f001 f860 	bl	8002b94 <HAL_GPIO_Init>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 80016b8:	e022      	b.n	8001700 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <HAL_TIM_MspPostInit+0xbc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11d      	bne.n	8001700 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 80016ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_TIM_MspPostInit+0xb4>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e0:	2340      	movs	r3, #64	; 0x40
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80016f0:	2309      	movs	r3, #9
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <HAL_TIM_MspPostInit+0xc0>)
 80016fc:	f001 f81c 	bl	8002738 <HAL_GPIO_Init>
}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40000800 	.word	0x40000800
 800170c:	40023800 	.word	0x40023800
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40001800 	.word	0x40001800
 8001718:	40021c00 	.word	0x40021c00

0800171c <__io_putchar>:
=======
 8001ad4:	e022      	b.n	8001b1c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_TIM_MspPostInit+0xbc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d11d      	bne.n	8001b1c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_TIM_MspPostInit+0xb4>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_TIM_MspPostInit+0xb4>)
 8001aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_TIM_MspPostInit+0xb4>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b0c:	2309      	movs	r3, #9
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4807      	ldr	r0, [pc, #28]	; (8001b34 <HAL_TIM_MspPostInit+0xc0>)
 8001b18:	f001 f83c 	bl	8002b94 <HAL_GPIO_Init>
}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40000800 	.word	0x40000800
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40001800 	.word	0x40001800
 8001b34:	40021c00 	.word	0x40021c00

08001b38 <__io_putchar>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
<<<<<<< HEAD
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8001724:	1d39      	adds	r1, r7, #4
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	2201      	movs	r2, #1
 800172c:	4803      	ldr	r0, [pc, #12]	; (800173c <__io_putchar+0x20>)
 800172e:	f002 fc6e 	bl	800400e <HAL_UART_Transmit>

  return ch;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200042f4 	.word	0x200042f4

08001740 <MX_UART7_Init>:
=======
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, 0xFFFF);
 8001b40:	1d39      	adds	r1, r7, #4
 8001b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b46:	2201      	movs	r2, #1
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <__io_putchar+0x20>)
 8001b4a:	f002 fc88 	bl	800445e <HAL_UART_Transmit>

  return ch;
 8001b4e:	687b      	ldr	r3, [r7, #4]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200042b4 	.word	0x200042b4

08001b5c <MX_UART7_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

UART_HandleTypeDef huart7;

/* UART7 init function */
void MX_UART7_Init(void)
{
<<<<<<< HEAD
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_UART7_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_UART7_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_UART7_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_UART7_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_UART7_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_UART7_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_UART7_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_UART7_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_UART7_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_UART7_Init+0x4c>)
 8001778:	f002 fbfc 	bl	8003f74 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001782:	f7ff fc5d 	bl	8001040 <Error_Handler>
  }

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200042f4 	.word	0x200042f4
 8001790:	40007800 	.word	0x40007800

08001794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_UART_MspInit+0x7c>
=======
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_UART7_Init+0x50>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_UART7_Init+0x4c>)
 8001b94:	f002 fc16 	bl	80043c4 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001b9e:	f7ff fcaf 	bl	8001500 <Error_Handler>
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200042b4 	.word	0x200042b4
 8001bac:	40007800 	.word	0x40007800

08001bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_UART_MspInit+0x84>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12c      	bne.n	8001c2c <HAL_UART_MspInit+0x7c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
<<<<<<< HEAD
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_UART_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_UART_MspInit+0x88>)
 80017c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_UART_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_UART_MspInit+0x88>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_UART_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
=======
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001bf8:	f043 0310 	orr.w	r3, r3, #16
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_UART_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
<<<<<<< HEAD
 80017ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001800:	2308      	movs	r3, #8
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_UART_MspInit+0x8c>)
 800180c:	f000 ff94 	bl	8002738 <HAL_GPIO_Init>
=======
 8001c0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0x8c>)
 8001c28:	f000 ffb4 	bl	8002b94 <HAL_GPIO_Init>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	; 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40007800 	.word	0x40007800
 800181c:	40023800 	.word	0x40023800
 8001820:	40021000 	.word	0x40021000

08001824 <Reset_Handler>:
=======
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40007800 	.word	0x40007800
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40021000 	.word	0x40021000

08001c40 <Reset_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001828:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800182a:	e003      	b.n	8001834 <LoopCopyDataInit>

0800182c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800182e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001830:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001832:	3104      	adds	r1, #4

08001834 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001838:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800183c:	d3f6      	bcc.n	800182c <CopyDataInit>
  ldr  r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001840:	e002      	b.n	8001848 <LoopFillZerobss>

08001842 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001842:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001844:	f842 3b04 	str.w	r3, [r2], #4

08001848 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800184c:	d3f9      	bcc.n	8001842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800184e:	f7ff fd77 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f004 fb41 	bl	8005ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fb33 	bl	8000ec0 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001860:	08007028 	.word	0x08007028
  ldr  r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001868:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800186c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001870:	20004348 	.word	0x20004348

08001874 <ADC_IRQHandler>:
=======
 8001c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
  ldr  r2, =_sbss
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6a:	f7ff fdbd 	bl	80017e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f004 fa7d 	bl	800616c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c72:	f7ff fb95 	bl	80013a0 <main>
  bx  lr    
 8001c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c7c:	080071f0 	.word	0x080071f0
  ldr  r0, =_sdata
 8001c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c84:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c88:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001c8c:	200042fc 	.word	0x200042fc

08001c90 <ADC_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>
	...

08001878 <HAL_Init>:
=======
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_Init+0x40>)
 8001882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001886:	6013      	str	r3, [r2, #0]
=======
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_Init+0x40>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_Init+0x40>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001892:	6013      	str	r3, [r2, #0]
=======
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_Init+0x40>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_Init+0x40>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cae:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x40>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6013      	str	r3, [r2, #0]
=======
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_Init+0x40>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 ff14 	bl	80026ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fbfc 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fbce 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_IncTick>:
=======
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 ff34 	bl	8002b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff fc4c 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fc1e 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023c00 	.word	0x40023c00

08001cd8 <HAL_IncTick>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20004334 	.word	0x20004334

080018e4 <HAL_GetTick>:
=======
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	200042f4 	.word	0x200042f4

08001d00 <HAL_GetTick>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20004334 	.word	0x20004334

080018fc <HAL_CAN_Init>:
=======
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200042f4 	.word	0x200042f4

08001d18 <HAL_CAN_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
=======
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0ed      	b.n	8001aea <HAL_CAN_Init+0x1ee>
=======
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0ed      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff f854 	bl	80009c8 <HAL_CAN_MspInit>
=======
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f8d2 	bl	8000ee0 <HAL_CAN_MspInit>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0202 	bic.w	r2, r2, #2
 800192e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff ffd8 	bl	80018e4 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7ff ffd4 	bl	80018e4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0c5      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e5      	bne.n	8001938 <HAL_CAN_Init+0x3c>
=======
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0202 	bic.w	r2, r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff ffd8 	bl	8001d00 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff ffd4 	bl	8001d00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0c5      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e5      	bne.n	8001d54 <HAL_CAN_Init+0x3c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800197c:	f7ff ffb2 	bl	80018e4 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001982:	e012      	b.n	80019aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001984:	f7ff ffae 	bl	80018e4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b0a      	cmp	r3, #10
 8001990:	d90b      	bls.n	80019aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2205      	movs	r2, #5
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e09f      	b.n	8001aea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0e5      	beq.n	8001984 <HAL_CAN_Init+0x88>
=======
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff ffb2 	bl	8001d00 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff ffae 	bl	8001d00 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09f      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0e5      	beq.n	8001da0 <HAL_CAN_Init+0x88>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7e1b      	ldrb	r3, [r3, #24]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <HAL_CAN_Init+0xe6>
=======
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0xe6>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	601a      	str	r2, [r3, #0]
=======
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7e5b      	ldrb	r3, [r3, #25]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d108      	bne.n	80019fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	e007      	b.n	8001a0c <HAL_CAN_Init+0x110>
=======
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7e5b      	ldrb	r3, [r3, #25]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x110>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a0a:	601a      	str	r2, [r3, #0]
=======
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e26:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7e9b      	ldrb	r3, [r3, #26]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d108      	bne.n	8001a26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0220 	orr.w	r2, r2, #32
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	e007      	b.n	8001a36 <HAL_CAN_Init+0x13a>
=======
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e9b      	ldrb	r3, [r3, #26]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x13a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0220 	bic.w	r2, r2, #32
 8001a34:	601a      	str	r2, [r3, #0]
=======
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0220 	bic.w	r2, r2, #32
 8001e50:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7edb      	ldrb	r3, [r3, #27]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0210 	bic.w	r2, r2, #16
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_Init+0x164>
=======
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7edb      	ldrb	r3, [r3, #27]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0210 	bic.w	r2, r2, #16
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x164>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0210 	orr.w	r2, r2, #16
 8001a5e:	601a      	str	r2, [r3, #0]
=======
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0210 	orr.w	r2, r2, #16
 8001e7a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	7f1b      	ldrb	r3, [r3, #28]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0208 	orr.w	r2, r2, #8
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_CAN_Init+0x18e>
=======
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7f1b      	ldrb	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x18e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0208 	bic.w	r2, r2, #8
 8001a88:	601a      	str	r2, [r3, #0]
=======
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7f5b      	ldrb	r3, [r3, #29]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0204 	orr.w	r2, r2, #4
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e007      	b.n	8001ab4 <HAL_CAN_Init+0x1b8>
=======
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7f5b      	ldrb	r3, [r3, #29]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x1b8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0204 	bic.w	r2, r2, #4
 8001ab2:	601a      	str	r2, [r3, #0]
=======
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	ea42 0103 	orr.w	r1, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	61da      	str	r2, [r3, #28]
=======
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	ea42 0103 	orr.w	r1, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_CAN_ConfigFilter>:
=======
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_CAN_ConfigFilter>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b0c:	7cfb      	ldrb	r3, [r7, #19]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_ConfigFilter+0x26>
 8001b12:	7cfb      	ldrb	r3, [r7, #19]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	f040 80be 	bne.w	8001c96 <HAL_CAN_ConfigFilter+0x1a2>
=======
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d003      	beq.n	8001f36 <HAL_CAN_ConfigFilter+0x26>
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	f040 80be 	bne.w	80020b2 <HAL_CAN_ConfigFilter+0x1a2>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
<<<<<<< HEAD
 8001b1a:	4b65      	ldr	r3, [pc, #404]	; (8001cb0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001b1c:	617b      	str	r3, [r7, #20]
=======
 8001f36:	4b65      	ldr	r3, [pc, #404]	; (80020cc <HAL_CAN_ConfigFilter+0x1bc>)
 8001f38:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
<<<<<<< HEAD
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d123      	bne.n	8001bc4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2201      	movs	r2, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d123      	bne.n	8001fe0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3248      	adds	r2, #72	; 0x48
 8001ba4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3248      	adds	r2, #72	; 0x48
 8001fc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	3348      	adds	r3, #72	; 0x48
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d122      	bne.n	8001c12 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	3348      	adds	r3, #72	; 0x48
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d122      	bne.n	800202e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3248      	adds	r2, #72	; 0x48
 8001bf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002008:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3248      	adds	r2, #72	; 0x48
 800200e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c08:	6979      	ldr	r1, [r7, #20]
 8001c0a:	3348      	adds	r3, #72	; 0x48
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	605a      	str	r2, [r3, #4]
=======
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002022:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002024:	6979      	ldr	r1, [r7, #20]
 8002026:	3348      	adds	r3, #72	; 0x48
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c2c:	e007      	b.n	8001c3e <HAL_CAN_ConfigFilter+0x14a>
=======
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	401a      	ands	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002048:	e007      	b.n	800205a <HAL_CAN_ConfigFilter+0x14a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	401a      	ands	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c58:	e007      	b.n	8001c6a <HAL_CAN_ConfigFilter+0x176>
=======
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002074:	e007      	b.n	8002086 <HAL_CAN_ConfigFilter+0x176>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c88:	f023 0201 	bic.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e006      	b.n	8001ca4 <HAL_CAN_ConfigFilter+0x1b0>
=======
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020a4:	f023 0201 	bic.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e006      	b.n	80020c0 <HAL_CAN_ConfigFilter+0x1b0>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40006400 	.word	0x40006400

08001cb4 <HAL_CAN_Start>:
=======
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
  }
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	40006400 	.word	0x40006400

080020d0 <HAL_CAN_Start>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d12e      	bne.n	8001d26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fe00 	bl	80018e4 <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ce6:	e012      	b.n	8001d0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ce8:	f7ff fdfc 	bl	80018e4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	d90b      	bls.n	8001d0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2205      	movs	r2, #5
 8001d06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e012      	b.n	8001d34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e5      	bne.n	8001ce8 <HAL_CAN_Start+0x34>
=======
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d12e      	bne.n	8002142 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020fc:	f7ff fe00 	bl	8001d00 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff fdfc 	bl	8001d00 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e012      	b.n	8002150 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_CAN_Start+0x34>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e006      	b.n	8001d34 <HAL_CAN_Start+0x80>
=======
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e006      	b.n	8002150 <HAL_CAN_Start+0x80>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_CAN_AddTxMessage>:
=======
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
  }
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_CAN_AddTxMessage>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	61bb      	str	r3, [r7, #24]
=======
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8001d5a:	7ffb      	ldrb	r3, [r7, #31]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d003      	beq.n	8001d68 <HAL_CAN_AddTxMessage+0x2c>
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	f040 80b8 	bne.w	8001ed8 <HAL_CAN_AddTxMessage+0x19c>
=======
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d003      	beq.n	8002184 <HAL_CAN_AddTxMessage+0x2c>
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b02      	cmp	r3, #2
 8002180:	f040 80b8 	bne.w	80022f4 <HAL_CAN_AddTxMessage+0x19c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10a      	bne.n	8001d88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80a0 	beq.w	8001ec8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	0e1b      	lsrs	r3, r3, #24
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d907      	bls.n	8001da8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e09e      	b.n	8001ee6 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a0 	beq.w	80022e4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	0e1b      	lsrs	r3, r3, #24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d907      	bls.n	80021c4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e09e      	b.n	8002302 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< HEAD
 8001da8:	2201      	movs	r2, #1
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	409a      	lsls	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	6809      	ldr	r1, [r1, #0]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3318      	adds	r3, #24
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e00f      	b.n	8001df6 <HAL_CAN_AddTxMessage+0xba>
=======
 80021c4:	2201      	movs	r2, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	409a      	lsls	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	6809      	ldr	r1, [r1, #0]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3318      	adds	r3, #24
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	440b      	add	r3, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e00f      	b.n	8002212 <HAL_CAN_AddTxMessage+0xba>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de6:	68f9      	ldr	r1, [r7, #12]
 8001de8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3318      	adds	r3, #24
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	440b      	add	r3, r1
 8001df4:	601a      	str	r2, [r3, #0]
=======
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002206:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3318      	adds	r3, #24
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	440b      	add	r3, r1
 8002210:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6819      	ldr	r1, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3318      	adds	r3, #24
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	440b      	add	r3, r1
 8001e06:	3304      	adds	r3, #4
 8001e08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	7d1b      	ldrb	r3, [r3, #20]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d111      	bne.n	8001e36 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6811      	ldr	r1, [r2, #0]
 8001e26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	440b      	add	r3, r1
 8001e32:	3304      	adds	r3, #4
 8001e34:	601a      	str	r2, [r3, #0]
=======
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	691a      	ldr	r2, [r3, #16]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	3318      	adds	r3, #24
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	440b      	add	r3, r1
 8002222:	3304      	adds	r3, #4
 8002224:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	7d1b      	ldrb	r3, [r3, #20]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d111      	bne.n	8002252 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3318      	adds	r3, #24
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	4413      	add	r3, r2
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6811      	ldr	r1, [r2, #0]
 8002242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3318      	adds	r3, #24
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	440b      	add	r3, r1
 800224e:	3304      	adds	r3, #4
 8002250:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3307      	adds	r3, #7
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3306      	adds	r3, #6
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	4313      	orrs	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	3204      	adds	r2, #4
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	4610      	mov	r0, r2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	6811      	ldr	r1, [r2, #0]
 8001e5e:	ea43 0200 	orr.w	r2, r3, r0
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e6c:	601a      	str	r2, [r3, #0]
=======
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3307      	adds	r3, #7
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	061a      	lsls	r2, r3, #24
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3306      	adds	r3, #6
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3305      	adds	r3, #5
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	4313      	orrs	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	3204      	adds	r2, #4
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	4610      	mov	r0, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6811      	ldr	r1, [r2, #0]
 800227a:	ea43 0200 	orr.w	r2, r3, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	440b      	add	r3, r1
 8002284:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002288:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3303      	adds	r3, #3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	061a      	lsls	r2, r3, #24
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	4610      	mov	r0, r2
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	ea43 0200 	orr.w	r2, r3, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ea2:	601a      	str	r2, [r3, #0]
=======
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3303      	adds	r3, #3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	061a      	lsls	r2, r3, #24
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3302      	adds	r3, #2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	041b      	lsls	r3, r3, #16
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4313      	orrs	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	4610      	mov	r0, r2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	ea43 0200 	orr.w	r2, r3, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	440b      	add	r3, r1
 80022ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022be:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3318      	adds	r3, #24
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6811      	ldr	r1, [r2, #0]
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e00e      	b.n	8001ee6 <HAL_CAN_AddTxMessage+0x1aa>
=======
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3318      	adds	r3, #24
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	4413      	add	r3, r2
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6811      	ldr	r1, [r2, #0]
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3318      	adds	r3, #24
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	440b      	add	r3, r1
 80022de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e00e      	b.n	8002302 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e006      	b.n	8001ee6 <HAL_CAN_AddTxMessage+0x1aa>
=======
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e006      	b.n	8002302 <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_CAN_GetRxMessage>:
=======
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_CAN_GetRxMessage>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f06:	75fb      	strb	r3, [r7, #23]
=======
 800230e:	b480      	push	{r7}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002322:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d003      	beq.n	8001f16 <HAL_CAN_GetRxMessage+0x24>
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	f040 80f3 	bne.w	80020fc <HAL_CAN_GetRxMessage+0x20a>
=======
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <HAL_CAN_GetRxMessage+0x24>
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f040 80f3 	bne.w	8002518 <HAL_CAN_GetRxMessage+0x20a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10e      	bne.n	8001f3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0e7      	b.n	800210a <HAL_CAN_GetRxMessage+0x218>
=======
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10e      	bne.n	8002356 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d116      	bne.n	8002374 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0e7      	b.n	8002526 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0d8      	b.n	800210a <HAL_CAN_GetRxMessage+0x218>
=======
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0d8      	b.n	8002526 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	331b      	adds	r3, #27
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4413      	add	r3, r2
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0204 	and.w	r2, r3, #4
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	331b      	adds	r3, #27
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0d5b      	lsrs	r3, r3, #21
 8001f86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_CAN_GetRxMessage+0xb6>
=======
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	331b      	adds	r3, #27
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0204 	and.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	331b      	adds	r3, #27
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0d5b      	lsrs	r3, r3, #21
 80023a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	331b      	adds	r3, #27
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	4413      	add	r3, r2
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	331b      	adds	r3, #27
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0202 	and.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	331b      	adds	r3, #27
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 020f 	and.w	r2, r3, #15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	331b      	adds	r3, #27
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	331b      	adds	r3, #27
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0c1b      	lsrs	r3, r3, #16
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	4413      	add	r3, r2
 8002026:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0a1a      	lsrs	r2, r3, #8
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	4413      	add	r3, r2
 8002040:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0c1a      	lsrs	r2, r3, #16
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	3302      	adds	r3, #2
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4413      	add	r3, r2
 800205a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e1a      	lsrs	r2, r3, #24
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3303      	adds	r3, #3
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	3304      	adds	r3, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0a1a      	lsrs	r2, r3, #8
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	3305      	adds	r3, #5
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0c1a      	lsrs	r2, r3, #16
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	3306      	adds	r3, #6
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e1a      	lsrs	r2, r3, #24
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3307      	adds	r3, #7
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0220 	orr.w	r2, r2, #32
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	e007      	b.n	80020f8 <HAL_CAN_GetRxMessage+0x206>
=======
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	331b      	adds	r3, #27
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	331b      	adds	r3, #27
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	4413      	add	r3, r2
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0202 	and.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	331b      	adds	r3, #27
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	331b      	adds	r3, #27
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	3304      	adds	r3, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b2da      	uxtb	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	331b      	adds	r3, #27
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	4413      	add	r3, r2
 8002416:	3304      	adds	r3, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	4413      	add	r3, r2
 800242c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0a1a      	lsrs	r2, r3, #8
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	0c1a      	lsrs	r2, r3, #16
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	3302      	adds	r3, #2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e1a      	lsrs	r2, r3, #24
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	3303      	adds	r3, #3
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	4413      	add	r3, r2
 8002490:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	3304      	adds	r3, #4
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0a1a      	lsrs	r2, r3, #8
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3305      	adds	r3, #5
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0c1a      	lsrs	r2, r3, #16
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3306      	adds	r3, #6
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e1a      	lsrs	r2, r3, #24
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	3307      	adds	r3, #7
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	e007      	b.n	8002514 <HAL_CAN_GetRxMessage+0x206>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	611a      	str	r2, [r3, #16]
=======
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 80020f8:	2300      	movs	r3, #0
 80020fa:	e006      	b.n	800210a <HAL_CAN_GetRxMessage+0x218>
=======
 8002514:	2300      	movs	r3, #0
 8002516:	e006      	b.n	8002526 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
  }
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_CAN_IRQHandler>:
=======
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
  }
}
 8002526:	4618      	mov	r0, r3
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002542:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d002      	beq.n	8002550 <HAL_CAN_ActivateNotification+0x1e>
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d109      	bne.n	8002564 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6959      	ldr	r1, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e006      	b.n	8002572 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_CAN_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002116:	b580      	push	{r7, lr}
 8002118:	b08a      	sub	sp, #40	; 0x28
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d07c      	beq.n	8002256 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d023      	beq.n	80021ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_CAN_IRQHandler+0x6a>
=======
 800257e:	b580      	push	{r7, lr}
 8002580:	b08a      	sub	sp, #40	; 0x28
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d07c      	beq.n	80026be <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d023      	beq.n	8002616 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x6a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
<<<<<<< HEAD
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f983 	bl	8002484 <HAL_CAN_TxMailbox0CompleteCallback>
 800217e:	e016      	b.n	80021ae <HAL_CAN_IRQHandler+0x98>
=======
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f97d 	bl	80028e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80025e6:	e016      	b.n	8002616 <HAL_CAN_IRQHandler+0x98>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< HEAD
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	e00c      	b.n	80021ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d004      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	e002      	b.n	80021ae <HAL_CAN_IRQHandler+0x98>
=======
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e00c      	b.n	8002616 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
 800260e:	e002      	b.n	8002616 <HAL_CAN_IRQHandler+0x98>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
<<<<<<< HEAD
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f989 	bl	80024c0 <HAL_CAN_TxMailbox0AbortCallback>
=======
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f983 	bl	800291c <HAL_CAN_TxMailbox0AbortCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< HEAD
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d024      	beq.n	8002202 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_CAN_IRQHandler+0xbe>
=======
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d024      	beq.n	800266a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002628:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_CAN_IRQHandler+0xbe>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
<<<<<<< HEAD
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f963 	bl	8002498 <HAL_CAN_TxMailbox1CompleteCallback>
 80021d2:	e016      	b.n	8002202 <HAL_CAN_IRQHandler+0xec>
=======
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f95d 	bl	80028f4 <HAL_CAN_TxMailbox1CompleteCallback>
 800263a:	e016      	b.n	800266a <HAL_CAN_IRQHandler+0xec>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< HEAD
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
 80021e6:	e00c      	b.n	8002202 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e002      	b.n	8002202 <HAL_CAN_IRQHandler+0xec>
=======
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	e00c      	b.n	800266a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
 8002662:	e002      	b.n	800266a <HAL_CAN_IRQHandler+0xec>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
<<<<<<< HEAD
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f969 	bl	80024d4 <HAL_CAN_TxMailbox1AbortCallback>
=======
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f963 	bl	8002930 <HAL_CAN_TxMailbox1AbortCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< HEAD
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d024      	beq.n	8002256 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002214:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_CAN_IRQHandler+0x112>
=======
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d024      	beq.n	80026be <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800267c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_CAN_IRQHandler+0x112>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
<<<<<<< HEAD
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f943 	bl	80024ac <HAL_CAN_TxMailbox2CompleteCallback>
 8002226:	e016      	b.n	8002256 <HAL_CAN_IRQHandler+0x140>
=======
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f93d 	bl	8002908 <HAL_CAN_TxMailbox2CompleteCallback>
 800268e:	e016      	b.n	80026be <HAL_CAN_IRQHandler+0x140>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< HEAD
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	e00c      	b.n	8002256 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	e002      	b.n	8002256 <HAL_CAN_IRQHandler+0x140>
=======
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e00c      	b.n	80026be <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	e002      	b.n	80026be <HAL_CAN_IRQHandler+0x140>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
<<<<<<< HEAD
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f949 	bl	80024e8 <HAL_CAN_TxMailbox2AbortCallback>
=======
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f943 	bl	8002944 <HAL_CAN_TxMailbox2AbortCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< HEAD
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002270:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2210      	movs	r2, #16
 8002278:	60da      	str	r2, [r3, #12]
=======
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00c      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2210      	movs	r2, #16
 80026e0:	60da      	str	r2, [r3, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< HEAD
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2208      	movs	r2, #8
 8002294:	60da      	str	r2, [r3, #12]
=======
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2208      	movs	r2, #8
 80026fc:	60da      	str	r2, [r3, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
<<<<<<< HEAD
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f930 	bl	80024fc <HAL_CAN_RxFifo0FullCallback>
=======
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f92a 	bl	8002958 <HAL_CAN_RxFifo0FullCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
<<<<<<< HEAD
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_CAN_IRQHandler+0x1a4>
=======
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_CAN_IRQHandler+0x1a4>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
<<<<<<< HEAD
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fe fc23 	bl	8000b00 <HAL_CAN_RxFifo0MsgPendingCallback>
=======
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7fe fc7b 	bl	8001018 <HAL_CAN_RxFifo0MsgPendingCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< HEAD
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00c      	beq.n	80022de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2210      	movs	r2, #16
 80022dc:	611a      	str	r2, [r3, #16]
=======
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< HEAD
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00b      	beq.n	8002300 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2208      	movs	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
=======
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2208      	movs	r2, #8
 8002760:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
<<<<<<< HEAD
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f912 	bl	8002524 <HAL_CAN_RxFifo1FullCallback>
=======
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f90c 	bl	8002980 <HAL_CAN_RxFifo1FullCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
<<<<<<< HEAD
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_CAN_IRQHandler+0x208>
=======
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_CAN_IRQHandler+0x208>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
<<<<<<< HEAD
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8f9 	bl	8002510 <HAL_CAN_RxFifo1MsgPendingCallback>
=======
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8f3 	bl	800296c <HAL_CAN_RxFifo1MsgPendingCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< HEAD
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d006      	beq.n	8002340 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2210      	movs	r2, #16
 8002338:	605a      	str	r2, [r3, #4]
=======
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2210      	movs	r2, #16
 80027a0:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
<<<<<<< HEAD
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8fc 	bl	8002538 <HAL_CAN_SleepCallback>
=======
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8f6 	bl	8002994 <HAL_CAN_SleepCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< HEAD
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2208      	movs	r2, #8
 800235a:	605a      	str	r2, [r3, #4]
=======
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2208      	movs	r2, #8
 80027c2:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
<<<<<<< HEAD
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8f5 	bl	800254c <HAL_CAN_WakeUpFromRxMsgCallback>
=======
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8ef 	bl	80029a8 <HAL_CAN_WakeUpFromRxMsgCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< HEAD
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d07b      	beq.n	8002464 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d072      	beq.n	800245c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d075      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d06c      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< HEAD
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< HEAD
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< HEAD
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d043      	beq.n	800245c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d03e      	beq.n	800245c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023e4:	2b60      	cmp	r3, #96	; 0x60
 80023e6:	d02b      	beq.n	8002440 <HAL_CAN_IRQHandler+0x32a>
 80023e8:	2b60      	cmp	r3, #96	; 0x60
 80023ea:	d82e      	bhi.n	800244a <HAL_CAN_IRQHandler+0x334>
 80023ec:	2b50      	cmp	r3, #80	; 0x50
 80023ee:	d022      	beq.n	8002436 <HAL_CAN_IRQHandler+0x320>
 80023f0:	2b50      	cmp	r3, #80	; 0x50
 80023f2:	d82a      	bhi.n	800244a <HAL_CAN_IRQHandler+0x334>
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d019      	beq.n	800242c <HAL_CAN_IRQHandler+0x316>
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d826      	bhi.n	800244a <HAL_CAN_IRQHandler+0x334>
 80023fc:	2b30      	cmp	r3, #48	; 0x30
 80023fe:	d010      	beq.n	8002422 <HAL_CAN_IRQHandler+0x30c>
 8002400:	2b30      	cmp	r3, #48	; 0x30
 8002402:	d822      	bhi.n	800244a <HAL_CAN_IRQHandler+0x334>
 8002404:	2b10      	cmp	r3, #16
 8002406:	d002      	beq.n	800240e <HAL_CAN_IRQHandler+0x2f8>
 8002408:	2b20      	cmp	r3, #32
 800240a:	d005      	beq.n	8002418 <HAL_CAN_IRQHandler+0x302>
=======
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002838:	2b00      	cmp	r3, #0
 800283a:	d03d      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	d038      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800284c:	2b30      	cmp	r3, #48	; 0x30
 800284e:	d017      	beq.n	8002880 <HAL_CAN_IRQHandler+0x302>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d804      	bhi.n	800285e <HAL_CAN_IRQHandler+0x2e0>
 8002854:	2b10      	cmp	r3, #16
 8002856:	d009      	beq.n	800286c <HAL_CAN_IRQHandler+0x2ee>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d00c      	beq.n	8002876 <HAL_CAN_IRQHandler+0x2f8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< HEAD
 800240c:	e01d      	b.n	800244a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	f043 0308 	orr.w	r3, r3, #8
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002416:	e019      	b.n	800244c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002420:	e014      	b.n	800244c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	f043 0320 	orr.w	r3, r3, #32
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800242a:	e00f      	b.n	800244c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002434:	e00a      	b.n	800244c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243e:	e005      	b.n	800244c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002448:	e000      	b.n	800244c <HAL_CAN_IRQHandler+0x336>
            break;
 800244a:	bf00      	nop
=======
 800285c:	e024      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800285e:	2b50      	cmp	r3, #80	; 0x50
 8002860:	d018      	beq.n	8002894 <HAL_CAN_IRQHandler+0x316>
 8002862:	2b60      	cmp	r3, #96	; 0x60
 8002864:	d01b      	beq.n	800289e <HAL_CAN_IRQHandler+0x320>
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	d00f      	beq.n	800288a <HAL_CAN_IRQHandler+0x30c>
            break;
 800286a:	e01d      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002874:	e018      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800287e:	e013      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	f043 0320 	orr.w	r3, r3, #32
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002888:	e00e      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002892:	e009      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800289c:	e004      	b.n	80028a8 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a6:	bf00      	nop
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< HEAD
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699a      	ldr	r2, [r3, #24]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800245a:	619a      	str	r2, [r3, #24]
=======
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028b6:	619a      	str	r2, [r3, #24]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< HEAD
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2204      	movs	r2, #4
 8002462:	605a      	str	r2, [r3, #4]
=======
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2204      	movs	r2, #4
 80028be:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< HEAD
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
=======
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
<<<<<<< HEAD
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f872 	bl	8002560 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f872 	bl	80029bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
=======
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
=======
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
=======
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_CAN_TxMailbox0AbortCallback>:
=======
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
=======
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_TxMailbox1AbortCallback>:
=======
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
=======
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
=======
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_RxFifo0FullCallback>:
=======
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
=======
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
=======
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_CAN_RxFifo1FullCallback>:
=======
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
=======
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_CAN_SleepCallback>:
=======
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_CAN_SleepCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
=======
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
=======
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_CAN_ErrorCallback>:
=======
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_CAN_ErrorCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
=======
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <__NVIC_SetPriorityGrouping>:
=======
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <__NVIC_SetPriorityGrouping>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800259c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a6:	4a04      	ldr	r2, [pc, #16]	; (80025b8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	60d3      	str	r3, [r2, #12]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_GetPriorityGrouping>:
=======
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a02:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	60d3      	str	r3, [r2, #12]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_GetPriorityGrouping>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_GetPriorityGrouping+0x18>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0307 	and.w	r3, r3, #7
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_EnableIRQ>:
=======
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	db0b      	blt.n	8002602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4907      	ldr	r1, [pc, #28]	; (8002610 <__NVIC_EnableIRQ+0x38>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2001      	movs	r0, #1
 80025fa:	fa00 f202 	lsl.w	r2, r0, r2
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
=======
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	; (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
=======
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
=======
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_NVIC_SetPriorityGrouping>:
=======
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
=======
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff4c 	bl	8002574 <__NVIC_SetPriorityGrouping>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_NVIC_SetPriority>:
=======
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff4c 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_NVIC_SetPriority>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
=======
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80026f6:	f7ff ff61 	bl	80025bc <__NVIC_GetPriorityGrouping>
 80026fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f7ff ffb1 	bl	8002668 <NVIC_EncodePriority>
 8002706:	4602      	mov	r2, r0
 8002708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff80 	bl	8002614 <__NVIC_SetPriority>
}
 8002714:	bf00      	nop
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_NVIC_EnableIRQ>:
=======
 8002b52:	f7ff ff61 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	6978      	ldr	r0, [r7, #20]
 8002b5e:	f7ff ffb1 	bl	8002ac4 <NVIC_EncodePriority>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff80 	bl	8002a70 <__NVIC_SetPriority>
}
 8002b70:	bf00      	nop
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_NVIC_EnableIRQ>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
=======
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	71fb      	strb	r3, [r7, #7]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff54 	bl	80025d8 <__NVIC_EnableIRQ>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_GPIO_Init>:
=======
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff54 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_GPIO_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
=======
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e177      	b.n	8002a44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8166 	bne.w	8002a3e <HAL_GPIO_Init+0x306>
=======
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e177      	b.n	8002ea0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 8166 	bne.w	8002e9a <HAL_GPIO_Init+0x306>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d00b      	beq.n	8002792 <HAL_GPIO_Init+0x5a>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002786:	2b11      	cmp	r3, #17
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b12      	cmp	r3, #18
 8002790:	d130      	bne.n	80027f4 <HAL_GPIO_Init+0xbc>
=======
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00b      	beq.n	8002bee <HAL_GPIO_Init+0x5a>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be2:	2b11      	cmp	r3, #17
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	d130      	bne.n	8002c50 <HAL_GPIO_Init+0xbc>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	f003 0201 	and.w	r2, r3, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	605a      	str	r2, [r3, #4]
=======
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c24:	2201      	movs	r2, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 0201 	and.w	r2, r3, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0xfc>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b12      	cmp	r3, #18
 8002832:	d123      	bne.n	800287c <HAL_GPIO_Init+0x144>
=======
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0xfc>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b12      	cmp	r3, #18
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x144>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]
=======
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80c0 	beq.w	8002a3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_GPIO_Init+0x324>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028da:	4a61      	ldr	r2, [pc, #388]	; (8002a60 <HAL_GPIO_Init+0x328>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_GPIO_Init+0x32c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d037      	beq.n	8002976 <HAL_GPIO_Init+0x23e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_GPIO_Init+0x330>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_GPIO_Init+0x23a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_GPIO_Init+0x334>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <HAL_GPIO_Init+0x236>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a55      	ldr	r2, [pc, #340]	; (8002a70 <HAL_GPIO_Init+0x338>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <HAL_GPIO_Init+0x232>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a54      	ldr	r2, [pc, #336]	; (8002a74 <HAL_GPIO_Init+0x33c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <HAL_GPIO_Init+0x22e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a53      	ldr	r2, [pc, #332]	; (8002a78 <HAL_GPIO_Init+0x340>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d019      	beq.n	8002962 <HAL_GPIO_Init+0x22a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_GPIO_Init+0x344>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_GPIO_Init+0x226>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a51      	ldr	r2, [pc, #324]	; (8002a80 <HAL_GPIO_Init+0x348>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00d      	beq.n	800295a <HAL_GPIO_Init+0x222>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <HAL_GPIO_Init+0x34c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d007      	beq.n	8002956 <HAL_GPIO_Init+0x21e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4f      	ldr	r2, [pc, #316]	; (8002a88 <HAL_GPIO_Init+0x350>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_GPIO_Init+0x21a>
 800294e:	2309      	movs	r3, #9
 8002950:	e012      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002952:	230a      	movs	r3, #10
 8002954:	e010      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002956:	2308      	movs	r3, #8
 8002958:	e00e      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800295a:	2307      	movs	r3, #7
 800295c:	e00c      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800295e:	2306      	movs	r3, #6
 8002960:	e00a      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002962:	2305      	movs	r3, #5
 8002964:	e008      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002966:	2304      	movs	r3, #4
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800296a:	2303      	movs	r3, #3
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x240>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x240>
 8002976:	2300      	movs	r3, #0
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f002 0203 	and.w	r2, r2, #3
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x328>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_GPIO_Init+0x354>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ba:	4a34      	ldr	r2, [pc, #208]	; (8002a8c <HAL_GPIO_Init+0x354>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_GPIO_Init+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_GPIO_Init+0x354>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_GPIO_Init+0x354>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	; (8002a8c <HAL_GPIO_Init+0x354>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_GPIO_Init+0x354>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_GPIO_Init+0x354>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	f67f ae84 	bls.w	8002754 <HAL_GPIO_Init+0x1c>
=======
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80c0 	beq.w	8002e9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_GPIO_Init+0x320>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a64      	ldr	r2, [pc, #400]	; (8002eb4 <HAL_GPIO_Init+0x320>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <HAL_GPIO_Init+0x320>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d36:	4a60      	ldr	r2, [pc, #384]	; (8002eb8 <HAL_GPIO_Init+0x324>)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a57      	ldr	r2, [pc, #348]	; (8002ebc <HAL_GPIO_Init+0x328>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d037      	beq.n	8002dd2 <HAL_GPIO_Init+0x23e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a56      	ldr	r2, [pc, #344]	; (8002ec0 <HAL_GPIO_Init+0x32c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d031      	beq.n	8002dce <HAL_GPIO_Init+0x23a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a55      	ldr	r2, [pc, #340]	; (8002ec4 <HAL_GPIO_Init+0x330>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02b      	beq.n	8002dca <HAL_GPIO_Init+0x236>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a54      	ldr	r2, [pc, #336]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d025      	beq.n	8002dc6 <HAL_GPIO_Init+0x232>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a53      	ldr	r2, [pc, #332]	; (8002ecc <HAL_GPIO_Init+0x338>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01f      	beq.n	8002dc2 <HAL_GPIO_Init+0x22e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_GPIO_Init+0x33c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d019      	beq.n	8002dbe <HAL_GPIO_Init+0x22a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a51      	ldr	r2, [pc, #324]	; (8002ed4 <HAL_GPIO_Init+0x340>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0x226>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a50      	ldr	r2, [pc, #320]	; (8002ed8 <HAL_GPIO_Init+0x344>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00d      	beq.n	8002db6 <HAL_GPIO_Init+0x222>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	; (8002edc <HAL_GPIO_Init+0x348>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <HAL_GPIO_Init+0x21e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_GPIO_Init+0x34c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d101      	bne.n	8002dae <HAL_GPIO_Init+0x21a>
 8002daa:	2309      	movs	r3, #9
 8002dac:	e012      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dae:	230a      	movs	r3, #10
 8002db0:	e010      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002db2:	2308      	movs	r3, #8
 8002db4:	e00e      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e00c      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dba:	2306      	movs	r3, #6
 8002dbc:	e00a      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dbe:	2305      	movs	r3, #5
 8002dc0:	e008      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e004      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <HAL_GPIO_Init+0x240>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	f002 0203 	and.w	r2, r2, #3
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	4093      	lsls	r3, r2
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de4:	4934      	ldr	r1, [pc, #208]	; (8002eb8 <HAL_GPIO_Init+0x324>)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	3302      	adds	r3, #2
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df2:	4b3c      	ldr	r3, [pc, #240]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e16:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e1c:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <HAL_GPIO_Init+0x350>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b0f      	cmp	r3, #15
 8002ea4:	f67f ae84 	bls.w	8002bb0 <HAL_GPIO_Init+0x1c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
  }
}
<<<<<<< HEAD
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40021400 	.word	0x40021400
 8002a7c:	40021800 	.word	0x40021800
 8002a80:	40021c00 	.word	0x40021c00
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40022400 	.word	0x40022400
 8002a8c:	40013c00 	.word	0x40013c00

08002a90 <HAL_GPIO_WritePin>:
=======
 8002ea8:	bf00      	nop
 8002eaa:	3724      	adds	r7, #36	; 0x24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022400 	.word	0x40022400
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_WritePin>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	807b      	strh	r3, [r7, #2]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	707b      	strb	r3, [r7, #1]
=======
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	707b      	strb	r3, [r7, #1]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
=======
 8002ef8:	787b      	ldrb	r3, [r7, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002aac:	e003      	b.n	8002ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aae:	887b      	ldrh	r3, [r7, #2]
 8002ab0:	041a      	lsls	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_GPIO_TogglePin>:
=======
 8002f04:	e003      	b.n	8002f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_GPIO_TogglePin>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	807b      	strh	r3, [r7, #2]
=======
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	807b      	strh	r3, [r7, #2]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
<<<<<<< HEAD
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	401a      	ands	r2, r3
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d104      	bne.n	8002ae6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	041a      	lsls	r2, r3, #16
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
=======
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d104      	bne.n	8002f3e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f34:	887b      	ldrh	r3, [r7, #2]
 8002f36:	041a      	lsls	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	619a      	str	r2, [r3, #24]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
<<<<<<< HEAD
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8002f3c:	e002      	b.n	8002f44 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b0e:	4a05      	ldr	r2, [pc, #20]	; (8002b24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f994 	bl	8000e44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_RCC_OscConfig>:
=======
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f66:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe f9d8 	bl	8001324 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40013c00 	.word	0x40013c00

08002f80 <HAL_RCC_OscConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
=======
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e25b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
=======
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e25b      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d075      	beq.n	8002c32 <HAL_RCC_OscConfig+0x10a>
=======
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d075      	beq.n	800308a <HAL_RCC_OscConfig+0x10a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8002b46:	4ba3      	ldr	r3, [pc, #652]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b52:	4ba0      	ldr	r3, [pc, #640]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d112      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5e:	4b9d      	ldr	r3, [pc, #628]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b99      	ldr	r3, [pc, #612]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x108>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d157      	bne.n	8002c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e236      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
=======
 8002f9e:	4ba3      	ldr	r3, [pc, #652]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00c      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002faa:	4ba0      	ldr	r3, [pc, #640]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d112      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4b9d      	ldr	r3, [pc, #628]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc2:	d10b      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	4b99      	ldr	r3, [pc, #612]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d05b      	beq.n	8003088 <HAL_RCC_OscConfig+0x108>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d157      	bne.n	8003088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e236      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x74>
 8002b8e:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a90      	ldr	r2, [pc, #576]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x98>
 8002ba6:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a8a      	ldr	r2, [pc, #552]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xb0>
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a83      	ldr	r2, [pc, #524]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a80      	ldr	r2, [pc, #512]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fe80 	bl	80018e4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fe7c 	bl	80018e4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1fb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xc0>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
=======
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x74>
 8002fe6:	4b91      	ldr	r3, [pc, #580]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a90      	ldr	r2, [pc, #576]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e01d      	b.n	8003030 <HAL_RCC_OscConfig+0xb0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x98>
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a8a      	ldr	r2, [pc, #552]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a87      	ldr	r2, [pc, #540]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e00b      	b.n	8003030 <HAL_RCC_OscConfig+0xb0>
 8003018:	4b84      	ldr	r3, [pc, #528]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a83      	ldr	r2, [pc, #524]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d013      	beq.n	8003060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fe62 	bl	8001d00 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe fe5e 	bl	8001d00 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1fb      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0xc0>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x10a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002c08:	f7fe fe6c 	bl	80018e4 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fe68 	bl	80018e4 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1e7      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b6c      	ldr	r3, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0xe8>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
=======
 8003060:	f7fe fe4e 	bl	8001d00 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003068:	f7fe fe4a 	bl	8001d00 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b64      	cmp	r3, #100	; 0x64
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e1e7      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	4b6c      	ldr	r3, [pc, #432]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0xe8>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	bf00      	nop
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1de>
=======
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d063      	beq.n	800315e <HAL_RCC_OscConfig+0x1de>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8002c3e:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4a:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1bb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
=======
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a2:	4b62      	ldr	r3, [pc, #392]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d11c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d116      	bne.n	80030e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x152>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1bb      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4952      	ldr	r1, [pc, #328]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
=======
 80030d2:	4b56      	ldr	r3, [pc, #344]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4952      	ldr	r1, [pc, #328]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	e03a      	b.n	800315e <HAL_RCC_OscConfig+0x1de>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <HAL_RCC_OscConfig+0x2b0>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fe21 	bl	80018e4 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fe1d 	bl	80018e4 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e19c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x17e>
=======
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <HAL_RCC_OscConfig+0x2b0>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fe03 	bl	8001d00 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fdff 	bl	8001d00 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e19c      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x17e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4940      	ldr	r1, [pc, #256]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x1de>
=======
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4940      	ldr	r1, [pc, #256]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e015      	b.n	800315e <HAL_RCC_OscConfig+0x1de>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_RCC_OscConfig+0x2b0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fe00 	bl	80018e4 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe fdfc 	bl	80018e4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e17b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1c0>
=======
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_OscConfig+0x2b0>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fde2 	bl	8001d00 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe fdde 	bl	8001d00 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e17b      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d030      	beq.n	8002d74 <HAL_RCC_OscConfig+0x24c>
=======
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d030      	beq.n	80031cc <HAL_RCC_OscConfig+0x24c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe fde0 	bl	80018e4 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d28:	f7fe fddc 	bl	80018e4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e15b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x200>
 8002d46:	e015      	b.n	8002d74 <HAL_RCC_OscConfig+0x24c>
=======
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003172:	4b30      	ldr	r3, [pc, #192]	; (8003234 <HAL_RCC_OscConfig+0x2b4>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe fdc2 	bl	8001d00 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003180:	f7fe fdbe 	bl	8001d00 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e15b      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x200>
 800319e:	e015      	b.n	80031cc <HAL_RCC_OscConfig+0x24c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8002d48:	4b24      	ldr	r3, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fdc9 	bl	80018e4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d56:	f7fe fdc5 	bl	80018e4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e144      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x22e>
=======
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x2b4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fe fdab 	bl	8001d00 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ae:	f7fe fda7 	bl	8001d00 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e144      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x22e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a0 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]
=======
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a0 	beq.w	800331a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dca:	f7fe fd8b 	bl	80018e4 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd0:	e011      	b.n	8002df6 <HAL_RCC_OscConfig+0x2ce>
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
 8002de0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fd7e 	bl	80018e4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0fd      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x4d4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2bc>
=======
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003206:	2301      	movs	r3, #1
 8003208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <HAL_RCC_OscConfig+0x2b8>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003222:	f7fe fd6d 	bl	8001d00 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	e011      	b.n	800324e <HAL_RCC_OscConfig+0x2ce>
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
 8003238:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323c:	f7fe fd60 	bl	8001d00 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0fd      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_OscConfig+0x4d4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x2bc>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x2f0>
 8002e0a:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a7c      	ldr	r2, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	e01c      	b.n	8002e52 <HAL_RCC_OscConfig+0x32a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d10c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x312>
 8002e20:	4b77      	ldr	r3, [pc, #476]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a76      	ldr	r2, [pc, #472]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e26:	f043 0304 	orr.w	r3, r3, #4
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	4b74      	ldr	r3, [pc, #464]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a73      	ldr	r2, [pc, #460]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	e00b      	b.n	8002e52 <HAL_RCC_OscConfig+0x32a>
 8002e3a:	4b71      	ldr	r3, [pc, #452]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a70      	ldr	r2, [pc, #448]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	f023 0301 	bic.w	r3, r3, #1
 8002e44:	6713      	str	r3, [r2, #112]	; 0x70
 8002e46:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e4c:	f023 0304 	bic.w	r3, r3, #4
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d015      	beq.n	8002e86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fd43 	bl	80018e4 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fd3f 	bl	80018e4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e0bc      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ee      	beq.n	8002e62 <HAL_RCC_OscConfig+0x33a>
 8002e84:	e014      	b.n	8002eb0 <HAL_RCC_OscConfig+0x388>
=======
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x2f0>
 8003262:	4b7d      	ldr	r3, [pc, #500]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a7c      	ldr	r2, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
 800326e:	e01c      	b.n	80032aa <HAL_RCC_OscConfig+0x32a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d10c      	bne.n	8003292 <HAL_RCC_OscConfig+0x312>
 8003278:	4b77      	ldr	r3, [pc, #476]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a76      	ldr	r2, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 800327e:	f043 0304 	orr.w	r3, r3, #4
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	4b74      	ldr	r3, [pc, #464]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a73      	ldr	r2, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	e00b      	b.n	80032aa <HAL_RCC_OscConfig+0x32a>
 8003292:	4b71      	ldr	r3, [pc, #452]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a70      	ldr	r2, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
 800329e:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a6d      	ldr	r2, [pc, #436]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d015      	beq.n	80032de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fd25 	bl	8001d00 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe fd21 	bl	8001d00 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0bc      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ee      	beq.n	80032ba <HAL_RCC_OscConfig+0x33a>
 80032dc:	e014      	b.n	8003308 <HAL_RCC_OscConfig+0x388>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002e86:	f7fe fd2d 	bl	80018e4 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fd29 	bl	80018e4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0a6      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	4b56      	ldr	r3, [pc, #344]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ee      	bne.n	8002e8e <HAL_RCC_OscConfig+0x366>
=======
 80032de:	f7fe fd0f 	bl	8001d00 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e6:	f7fe fd0b 	bl	8001d00 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0a6      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	4b56      	ldr	r3, [pc, #344]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ee      	bne.n	80032e6 <HAL_RCC_OscConfig+0x366>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b52      	ldr	r3, [pc, #328]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a51      	ldr	r2, [pc, #324]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8092 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ecc:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d05c      	beq.n	8002f92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d141      	bne.n	8002f64 <HAL_RCC_OscConfig+0x43c>
=======
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8092 	beq.w	8003448 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d05c      	beq.n	80033ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d141      	bne.n	80033bc <HAL_RCC_OscConfig+0x43c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fcfd 	bl	80018e4 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe fcf9 	bl	80018e4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e078      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x3c6>
=======
 8003338:	4b48      	ldr	r3, [pc, #288]	; (800345c <HAL_RCC_OscConfig+0x4dc>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fcdf 	bl	8001d00 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fe fcdb 	bl	8001d00 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e078      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x3c6>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	4933      	ldr	r1, [pc, #204]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
=======
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	019b      	lsls	r3, r3, #6
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	4933      	ldr	r1, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8002f36:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fcd2 	bl	80018e4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fcce 	bl	80018e4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x41c>
 8002f62:	e045      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
=======
 800338e:	4b33      	ldr	r3, [pc, #204]	; (800345c <HAL_RCC_OscConfig+0x4dc>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fcb4 	bl	8001d00 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fcb0 	bl	8001d00 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e04d      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ae:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x41c>
 80033ba:	e045      	b.n	8003448 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fcbb 	bl	80018e4 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fe fcb7 	bl	80018e4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e036      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x44a>
 8002f90:	e02e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
=======
 80033bc:	4b27      	ldr	r3, [pc, #156]	; (800345c <HAL_RCC_OscConfig+0x4dc>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fe fc9d 	bl	8001d00 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fc99 	bl	8001d00 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e036      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x44a>
 80033e8:	e02e      	b.n	8003448 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e029      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
=======
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e029      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <HAL_RCC_OscConfig+0x4d8>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d115      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10d      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4ca>
=======
 80033f6:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_RCC_OscConfig+0x4d8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	429a      	cmp	r2, r3
 8003408:	d11c      	bne.n	8003444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d115      	bne.n	8003444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800341e:	4013      	ands	r3, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003424:	4293      	cmp	r3, r2
 8003426:	d10d      	bne.n	8003444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000
 8003000:	40023800 	.word	0x40023800
 8003004:	42470060 	.word	0x42470060

08003008 <HAL_RCC_ClockConfig>:
=======
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40007000 	.word	0x40007000
 8003458:	40023800 	.word	0x40023800
 800345c:	42470060 	.word	0x42470060

08003460 <HAL_RCC_ClockConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
=======
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0cc      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0cc      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800301c:	4b68      	ldr	r3, [pc, #416]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d90c      	bls.n	8003044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	701a      	strb	r2, [r3, #0]
=======
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d90c      	bls.n	800349c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b8      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_ClockConfig+0x8a>
=======
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a58      	ldr	r2, [pc, #352]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307e:	6093      	str	r3, [r2, #8]
=======
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d6:	6093      	str	r3, [r2, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	494d      	ldr	r1, [pc, #308]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
=======
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	494d      	ldr	r1, [pc, #308]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d044      	beq.n	8003128 <HAL_RCC_ClockConfig+0x120>
=======
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d044      	beq.n	8003580 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d119      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
=======
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d119      	bne.n	800353e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e06f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d003      	beq.n	800351e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800351a:	2b03      	cmp	r3, #3
 800351c:	d107      	bne.n	800352e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351e:	4b3f      	ldr	r3, [pc, #252]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80030d6:	4b3b      	ldr	r3, [pc, #236]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e067      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80030e6:	4b37      	ldr	r3, [pc, #220]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f023 0203 	bic.w	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4934      	ldr	r1, [pc, #208]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fbf4 	bl	80018e4 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f7fe fbf0 	bl	80018e4 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e04f      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 020c 	and.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	429a      	cmp	r2, r3
 8003126:	d1eb      	bne.n	8003100 <HAL_RCC_ClockConfig+0xf8>
=======
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 0203 	bic.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4934      	ldr	r1, [pc, #208]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003550:	f7fe fbd6 	bl	8001d00 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	e00a      	b.n	800356e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003558:	f7fe fbd2 	bl	8001d00 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e04f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 020c 	and.w	r2, r3, #12
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	429a      	cmp	r2, r3
 800357e:	d1eb      	bne.n	8003558 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d20c      	bcs.n	8003150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]
=======
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d20c      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e032      	b.n	80031b6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_RCC_ClockConfig+0x1b8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e032      	b.n	800360e <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4916      	ldr	r1, [pc, #88]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
=======
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4916      	ldr	r1, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	490e      	ldr	r1, [pc, #56]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
=======
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	490e      	ldr	r1, [pc, #56]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800318e:	f000 f821 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003192:	4602      	mov	r2, r0
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	490a      	ldr	r1, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	5ccb      	ldrb	r3, [r1, r3]
 80031a2:	fa22 f303 	lsr.w	r3, r2, r3
 80031a6:	4a09      	ldr	r2, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd ff78 	bl	80010a4 <HAL_InitTick>

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023c00 	.word	0x40023c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08006f68 	.word	0x08006f68
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000004 	.word	0x20000004

080031d4 <HAL_RCC_GetSysClockFreq>:
=======
 80035e6:	f000 f821 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035ea:	4601      	mov	r1, r0
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	fa21 f303 	lsr.w	r3, r1, r3
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd ffaa 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023c00 	.word	0x40023c00
 800361c:	40023800 	.word	0x40023800
 8003620:	08007130 	.word	0x08007130
 8003624:	20000000 	.word	0x20000000
 8003628:	20000004 	.word	0x20000004

0800362c <HAL_RCC_GetSysClockFreq>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031da:	2100      	movs	r1, #0
 80031dc:	6079      	str	r1, [r7, #4]
 80031de:	2100      	movs	r1, #0
 80031e0:	60f9      	str	r1, [r7, #12]
 80031e2:	2100      	movs	r1, #0
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031e6:	2100      	movs	r1, #0
 80031e8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ea:	4952      	ldr	r1, [pc, #328]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 80031ec:	6889      	ldr	r1, [r1, #8]
 80031ee:	f001 010c 	and.w	r1, r1, #12
 80031f2:	2908      	cmp	r1, #8
 80031f4:	d00d      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0x3e>
 80031f6:	2908      	cmp	r1, #8
 80031f8:	f200 8094 	bhi.w	8003324 <HAL_RCC_GetSysClockFreq+0x150>
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d002      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x32>
 8003200:	2904      	cmp	r1, #4
 8003202:	d003      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x38>
 8003204:	e08e      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x150>
=======
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	2300      	movs	r3, #0
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003642:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d007      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x32>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d008      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x38>
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 808d 	bne.w	8003772 <HAL_RCC_GetSysClockFreq+0x146>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <HAL_RCC_GetSysClockFreq+0x164>)
 8003208:	60bb      	str	r3, [r7, #8]
       break;
 800320a:	e08e      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x156>
=======
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_GetSysClockFreq+0x15c>)
 800365a:	60bb      	str	r3, [r7, #8]
       break;
 800365c:	e08c      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800320c:	4b4b      	ldr	r3, [pc, #300]	; (800333c <HAL_RCC_GetSysClockFreq+0x168>)
 800320e:	60bb      	str	r3, [r7, #8]
      break;
 8003210:	e08b      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x156>
=======
 800365e:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_GetSysClockFreq+0x160>)
 8003660:	60bb      	str	r3, [r7, #8]
      break;
 8003662:	e089      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003212:	4948      	ldr	r1, [pc, #288]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 8003214:	6849      	ldr	r1, [r1, #4]
 8003216:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800321a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800321c:	4945      	ldr	r1, [pc, #276]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 800321e:	6849      	ldr	r1, [r1, #4]
 8003220:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003224:	2900      	cmp	r1, #0
 8003226:	d024      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003228:	4942      	ldr	r1, [pc, #264]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 800322a:	6849      	ldr	r1, [r1, #4]
 800322c:	0989      	lsrs	r1, r1, #6
 800322e:	4608      	mov	r0, r1
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003238:	f04f 0500 	mov.w	r5, #0
 800323c:	ea00 0204 	and.w	r2, r0, r4
 8003240:	ea01 0305 	and.w	r3, r1, r5
 8003244:	493d      	ldr	r1, [pc, #244]	; (800333c <HAL_RCC_GetSysClockFreq+0x168>)
 8003246:	fb01 f003 	mul.w	r0, r1, r3
 800324a:	2100      	movs	r1, #0
 800324c:	fb01 f102 	mul.w	r1, r1, r2
 8003250:	1844      	adds	r4, r0, r1
 8003252:	493a      	ldr	r1, [pc, #232]	; (800333c <HAL_RCC_GetSysClockFreq+0x168>)
 8003254:	fba2 0101 	umull	r0, r1, r2, r1
 8003258:	1863      	adds	r3, r4, r1
 800325a:	4619      	mov	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	f7fd f824 	bl	80002b0 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4613      	mov	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e04a      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x134>
=======
 8003664:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366e:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d023      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b42      	ldr	r3, [pc, #264]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	f04f 0400 	mov.w	r4, #0
 8003684:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	ea03 0501 	and.w	r5, r3, r1
 8003690:	ea04 0602 	and.w	r6, r4, r2
 8003694:	4a3d      	ldr	r2, [pc, #244]	; (800378c <HAL_RCC_GetSysClockFreq+0x160>)
 8003696:	fb02 f106 	mul.w	r1, r2, r6
 800369a:	2200      	movs	r2, #0
 800369c:	fb02 f205 	mul.w	r2, r2, r5
 80036a0:	440a      	add	r2, r1
 80036a2:	493a      	ldr	r1, [pc, #232]	; (800378c <HAL_RCC_GetSysClockFreq+0x160>)
 80036a4:	fba5 0101 	umull	r0, r1, r5, r1
 80036a8:	1853      	adds	r3, r2, r1
 80036aa:	4619      	mov	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	f7fd f825 	bl	8000704 <__aeabi_uldivmod>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e049      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x12a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	461a      	mov	r2, r3
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	ea02 0400 	and.w	r4, r2, r0
 800328a:	ea03 0501 	and.w	r5, r3, r1
 800328e:	4620      	mov	r0, r4
 8003290:	4629      	mov	r1, r5
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	014b      	lsls	r3, r1, #5
 800329c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032a0:	0142      	lsls	r2, r0, #5
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	1b00      	subs	r0, r0, r4
 80032a8:	eb61 0105 	sbc.w	r1, r1, r5
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	018b      	lsls	r3, r1, #6
 80032b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032ba:	0182      	lsls	r2, r0, #6
 80032bc:	1a12      	subs	r2, r2, r0
 80032be:	eb63 0301 	sbc.w	r3, r3, r1
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f04f 0100 	mov.w	r1, #0
 80032ca:	00d9      	lsls	r1, r3, #3
 80032cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032d0:	00d0      	lsls	r0, r2, #3
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	1912      	adds	r2, r2, r4
 80032d8:	eb45 0303 	adc.w	r3, r5, r3
 80032dc:	f04f 0000 	mov.w	r0, #0
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	0299      	lsls	r1, r3, #10
 80032e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032ea:	0290      	lsls	r0, r2, #10
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f7fc ffd8 	bl	80002b0 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_RCC_GetSysClockFreq+0x160>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	3301      	adds	r3, #1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	60bb      	str	r3, [r7, #8]
      break;
 8003322:	e002      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x156>
=======
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	ea03 0501 	and.w	r5, r3, r1
 80036d8:	ea04 0602 	and.w	r6, r4, r2
 80036dc:	4629      	mov	r1, r5
 80036de:	4632      	mov	r2, r6
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	0154      	lsls	r4, r2, #5
 80036ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ee:	014b      	lsls	r3, r1, #5
 80036f0:	4619      	mov	r1, r3
 80036f2:	4622      	mov	r2, r4
 80036f4:	1b49      	subs	r1, r1, r5
 80036f6:	eb62 0206 	sbc.w	r2, r2, r6
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f04f 0400 	mov.w	r4, #0
 8003702:	0194      	lsls	r4, r2, #6
 8003704:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003708:	018b      	lsls	r3, r1, #6
 800370a:	1a5b      	subs	r3, r3, r1
 800370c:	eb64 0402 	sbc.w	r4, r4, r2
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	00e2      	lsls	r2, r4, #3
 800371a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800371e:	00d9      	lsls	r1, r3, #3
 8003720:	460b      	mov	r3, r1
 8003722:	4614      	mov	r4, r2
 8003724:	195b      	adds	r3, r3, r5
 8003726:	eb44 0406 	adc.w	r4, r4, r6
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	02a2      	lsls	r2, r4, #10
 8003734:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003738:	0299      	lsls	r1, r3, #10
 800373a:	460b      	mov	r3, r1
 800373c:	4614      	mov	r4, r2
 800373e:	4618      	mov	r0, r3
 8003740:	4621      	mov	r1, r4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	461a      	mov	r2, r3
 800374a:	4623      	mov	r3, r4
 800374c:	f7fc ffda 	bl	8000704 <__aeabi_uldivmod>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	3301      	adds	r3, #1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	60bb      	str	r3, [r7, #8]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCC_GetSysClockFreq+0x164>)
 8003326:	60bb      	str	r3, [r7, #8]
      break;
 8003328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332a:	68bb      	ldr	r3, [r7, #8]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	00f42400 	.word	0x00f42400
 800333c:	00b71b00 	.word	0x00b71b00

08003340 <HAL_RCC_GetHCLKFreq>:
=======
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003774:	60bb      	str	r3, [r7, #8]
      break;
 8003776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003778:	68bb      	ldr	r3, [r7, #8]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	00b71b00 	.word	0x00b71b00

08003790 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCC_GetHCLKFreq+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000

08003358 <HAL_RCC_GetPCLK1Freq>:
=======
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800335c:	f7ff fff0 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0a9b      	lsrs	r3, r3, #10
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	08006f78 	.word	0x08006f78

08003380 <HAL_RCC_GetPCLK2Freq>:
=======
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff0 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b0:	4601      	mov	r1, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4a03      	ldr	r2, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08007140 	.word	0x08007140

080037d0 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003384:	f7ff ffdc 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0b5b      	lsrs	r3, r3, #13
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08006f78 	.word	0x08006f78

080033a8 <HAL_RCC_GetClockConfig>:
=======
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d8:	4601      	mov	r1, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08007140 	.word	0x08007140

080037f8 <HAL_RCC_GetClockConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	220f      	movs	r2, #15
 80033b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0203 	and.w	r2, r3, #3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033c4:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_GetClockConfig+0x5c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_RCC_GetClockConfig+0x60>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40023c00 	.word	0x40023c00

0800340c <HAL_TIM_Base_Init>:
=======
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	220f      	movs	r2, #15
 8003806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0203 	and.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	08db      	lsrs	r3, r3, #3
 8003832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCC_GetClockConfig+0x60>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40023c00 	.word	0x40023c00

0800385c <HAL_TIM_Base_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e01d      	b.n	800345a <HAL_TIM_Base_Init+0x4e>
=======
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e01d      	b.n	80038aa <HAL_TIM_Base_Init+0x4e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f8cc 	bl	80015d0 <HAL_TIM_Base_MspInit>
=======
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe f8ce 	bl	8001a24 <HAL_TIM_Base_MspInit>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f000 fa8c 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_TIM_Base_Start_IT>:
=======
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fa8c 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_TIM_Base_Start_IT>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
=======
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b06      	cmp	r3, #6
 800348a:	d007      	beq.n	800349c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
=======
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b06      	cmp	r3, #6
 80038da:	d007      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_PWM_Init>:
=======
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_PWM_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e01d      	b.n	80034f8 <HAL_TIM_PWM_Init+0x4e>
=======
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01d      	b.n	8003948 <HAL_TIM_PWM_Init+0x4e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe f845 	bl	8001560 <HAL_TIM_PWM_MspInit>
=======
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fe f847 	bl	80019b4 <HAL_TIM_PWM_MspInit>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 fa3d 	bl	8003968 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_PWM_Start>:
=======
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 fa3d 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_TIM_PWM_Start>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
=======
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2201      	movs	r2, #1
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fc78 	bl	8003e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a15      	ldr	r2, [pc, #84]	; (8003574 <HAL_TIM_PWM_Start+0x74>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIM_PWM_Start+0x2c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIM_PWM_Start+0x78>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_TIM_PWM_Start+0x30>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_TIM_PWM_Start+0x32>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	6839      	ldr	r1, [r7, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fc78 	bl	8004258 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <HAL_TIM_PWM_Start+0x74>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_TIM_PWM_Start+0x2c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_TIM_PWM_Start+0x78>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_TIM_PWM_Start+0x30>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_TIM_PWM_Start+0x32>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d007      	beq.n	8003568 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
=======
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000
 8003578:	40010400 	.word	0x40010400

0800357c <HAL_TIM_IRQHandler>:
=======
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40010400 	.word	0x40010400

080039cc <HAL_TIM_IRQHandler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0202 	mvn.w	r2, #2
 80035a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x4a>
=======
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0202 	mvn.w	r2, #2
 80039f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9b4 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0x56>
=======
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9b4 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0x56>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f9a6 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f9b7 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
=======
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f9a6 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f9b7 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0204 	mvn.w	r2, #4
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x9e>
=======
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0204 	mvn.w	r2, #4
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f98a 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xaa>
=======
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f98a 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f97c 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f98d 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
=======
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f97c 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f98d 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b08      	cmp	r3, #8
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xf2>
=======
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d122      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d11b      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0208 	mvn.w	r2, #8
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f960 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xfe>
=======
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f960 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f952 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f963 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
=======
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f952 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f963 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d122      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2208      	movs	r2, #8
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0x146>
=======
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d122      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d11b      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0210 	mvn.w	r2, #16
 8003af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2208      	movs	r2, #8
 8003afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x146>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f936 	bl	800392c <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0x152>
=======
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f936 	bl	8003d7c <HAL_TIM_IC_CaptureCallback>
 8003b10:	e005      	b.n	8003b1e <HAL_TIM_IRQHandler+0x152>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f928 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f939 	bl	8003940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
=======
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f928 	bl	8003d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f939 	bl	8003d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0201 	mvn.w	r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
=======
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10e      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0201 	mvn.w	r2, #1
 8003b48:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fc72 	bl	8000fe4 <HAL_TIM_PeriodElapsedCallback>
=======
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fd fcb8 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d10e      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d107      	bne.n	800372c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003724:	611a      	str	r2, [r3, #16]
=======
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d10e      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b68:	2b80      	cmp	r3, #128	; 0x80
 8003b6a:	d107      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b74:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fc1a 	bl	8003f60 <HAL_TIMEx_BreakCallback>
=======
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fc1a 	bl	80043b0 <HAL_TIMEx_BreakCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d107      	bne.n	8003758 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003750:	611a      	str	r2, [r3, #16]
=======
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d10e      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d107      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ba0:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8fe 	bl	8003954 <HAL_TIM_TriggerCallback>
=======
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8fe 	bl	8003da4 <HAL_TIM_TriggerCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b20      	cmp	r3, #32
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d107      	bne.n	8003784 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0220 	mvn.w	r2, #32
 800377c:	611a      	str	r2, [r3, #16]
=======
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d10e      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d107      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0220 	mvn.w	r2, #32
 8003bcc:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fbe4 	bl	8003f4c <HAL_TIMEx_CommutCallback>
=======
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fbe4 	bl	800439c <HAL_TIMEx_CommutCallback>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_PWM_ConfigChannel>:
=======
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
=======
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e0b4      	b.n	8003910 <HAL_TIM_PWM_ConfigChannel+0x184>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	f200 809f 	bhi.w	80038fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	080038fd 	.word	0x080038fd
 80037cc:	080038fd 	.word	0x080038fd
 80037d0:	080038fd 	.word	0x080038fd
 80037d4:	08003839 	.word	0x08003839
 80037d8:	080038fd 	.word	0x080038fd
 80037dc:	080038fd 	.word	0x080038fd
 80037e0:	080038fd 	.word	0x080038fd
 80037e4:	0800387b 	.word	0x0800387b
 80037e8:	080038fd 	.word	0x080038fd
 80037ec:	080038fd 	.word	0x080038fd
 80037f0:	080038fd 	.word	0x080038fd
 80037f4:	080038bb 	.word	0x080038bb
=======
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0b4      	b.n	8003d60 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2202      	movs	r2, #2
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	f200 809f 	bhi.w	8003d4c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003d4d 	.word	0x08003d4d
 8003c1c:	08003d4d 	.word	0x08003d4d
 8003c20:	08003d4d 	.word	0x08003d4d
 8003c24:	08003c89 	.word	0x08003c89
 8003c28:	08003d4d 	.word	0x08003d4d
 8003c2c:	08003d4d 	.word	0x08003d4d
 8003c30:	08003d4d 	.word	0x08003d4d
 8003c34:	08003ccb 	.word	0x08003ccb
 8003c38:	08003d4d 	.word	0x08003d4d
 8003c3c:	08003d4d 	.word	0x08003d4d
 8003c40:	08003d4d 	.word	0x08003d4d
 8003c44:	08003d0b 	.word	0x08003d0b
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f952 	bl	8003aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0208 	orr.w	r2, r2, #8
 8003812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6999      	ldr	r1, [r3, #24]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	619a      	str	r2, [r3, #24]
      break;
 8003836:	e062      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f952 	bl	8003ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
      break;
 8003c86:	e062      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f9a2 	bl	8003b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699a      	ldr	r2, [r3, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6999      	ldr	r1, [r3, #24]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	619a      	str	r2, [r3, #24]
      break;
 8003878:	e041      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f9a2 	bl	8003fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]
      break;
 8003cc8:	e041      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f9f7 	bl	8003c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0208 	orr.w	r2, r2, #8
 8003894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0204 	bic.w	r2, r2, #4
 80038a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	61da      	str	r2, [r3, #28]
      break;
 80038b8:	e021      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f9f7 	bl	80040c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0204 	bic.w	r2, r2, #4
 8003cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]
      break;
 8003d08:	e021      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fa4b 	bl	8003d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69d9      	ldr	r1, [r3, #28]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	021a      	lsls	r2, r3, #8
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	61da      	str	r2, [r3, #28]
      break;
 80038fa:	e000      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fa4b 	bl	80041ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69d9      	ldr	r1, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	61da      	str	r2, [r3, #28]
      break;
 8003d4a:	e000      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    default:
      break;
<<<<<<< HEAD
 80038fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003d4c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
=======
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_IC_CaptureCallback>:
=======
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
=======
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
=======
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_TriggerCallback>:
=======
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_TriggerCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
=======
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_Base_SetConfig>:
=======
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_Base_SetConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d013      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3c      	ldr	r2, [pc, #240]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3a      	ldr	r2, [pc, #232]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c8:	d027      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <TIM_Base_SetConfig+0x118>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d023      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2b      	ldr	r2, [pc, #172]	; (8003a84 <TIM_Base_SetConfig+0x11c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <TIM_Base_SetConfig+0x120>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d017      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <TIM_Base_SetConfig+0x128>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <TIM_Base_SetConfig+0x12c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00f      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <TIM_Base_SetConfig+0x130>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <TIM_Base_SetConfig+0x134>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <TIM_Base_SetConfig+0x138>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d003      	beq.n	8003a1a <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <TIM_Base_SetConfig+0x13c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
=======
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a40      	ldr	r2, [pc, #256]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3d      	ldr	r2, [pc, #244]	; (8003ed0 <TIM_Base_SetConfig+0x118>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3c      	ldr	r2, [pc, #240]	; (8003ed4 <TIM_Base_SetConfig+0x11c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3b      	ldr	r2, [pc, #236]	; (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d027      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <TIM_Base_SetConfig+0x118>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d023      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <TIM_Base_SetConfig+0x11c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a29      	ldr	r2, [pc, #164]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <TIM_Base_SetConfig+0x128>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a25      	ldr	r2, [pc, #148]	; (8003eec <TIM_Base_SetConfig+0x134>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <TIM_Base_SetConfig+0x138>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <TIM_Base_SetConfig+0x13c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <TIM_Base_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0xf8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0x124>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <TIM_Base_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0xf8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	615a      	str	r2, [r3, #20]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000

08003aa8 <TIM_OC1_SetConfig>:
=======
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40010400 	.word	0x40010400
 8003ee0:	40014000 	.word	0x40014000
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	40014800 	.word	0x40014800
 8003eec:	40001800 	.word	0x40001800
 8003ef0:	40001c00 	.word	0x40001c00
 8003ef4:	40002000 	.word	0x40002000

08003ef8 <TIM_OC1_SetConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
=======
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	f023 0201 	bic.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 0302 	bic.w	r3, r3, #2
 8003af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <TIM_OC1_SetConfig+0xd8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_OC1_SetConfig+0x64>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <TIM_OC1_SetConfig+0xdc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10c      	bne.n	8003b26 <TIM_OC1_SetConfig+0x7e>
=======
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f023 0201 	bic.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 0302 	bic.w	r3, r3, #2
 8003f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <TIM_OC1_SetConfig+0xd8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_OC1_SetConfig+0x64>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <TIM_OC1_SetConfig+0xdc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10c      	bne.n	8003f76 <TIM_OC1_SetConfig+0x7e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0308 	bic.w	r3, r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <TIM_OC1_SetConfig+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC1_SetConfig+0x8e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <TIM_OC1_SetConfig+0xdc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d111      	bne.n	8003b5a <TIM_OC1_SetConfig+0xb2>
=======
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0308 	bic.w	r3, r3, #8
 8003f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <TIM_OC1_SetConfig+0xd8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_OC1_SetConfig+0x8e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <TIM_OC1_SetConfig+0xdc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d111      	bne.n	8003faa <TIM_OC1_SetConfig+0xb2>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
=======
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40010400 	.word	0x40010400

08003b88 <TIM_OC2_SetConfig>:
=======
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	621a      	str	r2, [r3, #32]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <TIM_OC2_SetConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
=======
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0210 	bic.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0320 	bic.w	r3, r3, #32
 8003bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a22      	ldr	r2, [pc, #136]	; (8003c6c <TIM_OC2_SetConfig+0xe4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_OC2_SetConfig+0x68>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <TIM_OC2_SetConfig+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10d      	bne.n	8003c0c <TIM_OC2_SetConfig+0x84>
=======
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0210 	bic.w	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f023 0320 	bic.w	r3, r3, #32
 8004022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a22      	ldr	r2, [pc, #136]	; (80040bc <TIM_OC2_SetConfig+0xe4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC2_SetConfig+0x68>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a21      	ldr	r2, [pc, #132]	; (80040c0 <TIM_OC2_SetConfig+0xe8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10d      	bne.n	800405c <TIM_OC2_SetConfig+0x84>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0a:	617b      	str	r3, [r7, #20]
=======
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405a:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <TIM_OC2_SetConfig+0xe4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC2_SetConfig+0x94>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <TIM_OC2_SetConfig+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d113      	bne.n	8003c44 <TIM_OC2_SetConfig+0xbc>
=======
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <TIM_OC2_SetConfig+0xe4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC2_SetConfig+0x94>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <TIM_OC2_SetConfig+0xe8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d113      	bne.n	8004094 <TIM_OC2_SetConfig+0xbc>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
=======
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800407a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40010400 	.word	0x40010400

08003c74 <TIM_OC3_SetConfig>:
=======
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	621a      	str	r2, [r3, #32]
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40010400 	.word	0x40010400

080040c4 <TIM_OC3_SetConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
=======
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a21      	ldr	r2, [pc, #132]	; (8003d54 <TIM_OC3_SetConfig+0xe0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC3_SetConfig+0x66>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a20      	ldr	r2, [pc, #128]	; (8003d58 <TIM_OC3_SetConfig+0xe4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10d      	bne.n	8003cf6 <TIM_OC3_SetConfig+0x82>
=======
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <TIM_OC3_SetConfig+0xe0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_OC3_SetConfig+0x66>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <TIM_OC3_SetConfig+0xe4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10d      	bne.n	8004146 <TIM_OC3_SetConfig+0x82>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <TIM_OC3_SetConfig+0xe0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_OC3_SetConfig+0x92>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <TIM_OC3_SetConfig+0xe4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d113      	bne.n	8003d2e <TIM_OC3_SetConfig+0xba>
=======
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <TIM_OC3_SetConfig+0xe0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_OC3_SetConfig+0x92>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <TIM_OC3_SetConfig+0xe4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d113      	bne.n	800417e <TIM_OC3_SetConfig+0xba>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
=======
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800415c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40010400 	.word	0x40010400

08003d5c <TIM_OC4_SetConfig>:
=======
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40010400 	.word	0x40010400

080041ac <TIM_OC4_SetConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
=======
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	021b      	lsls	r3, r3, #8
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	031b      	lsls	r3, r3, #12
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <TIM_OC4_SetConfig+0xa4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_OC4_SetConfig+0x68>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <TIM_OC4_SetConfig+0xa8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d109      	bne.n	8003dd8 <TIM_OC4_SetConfig+0x7c>
=======
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	031b      	lsls	r3, r3, #12
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <TIM_OC4_SetConfig+0xa4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_OC4_SetConfig+0x68>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a11      	ldr	r2, [pc, #68]	; (8004254 <TIM_OC4_SetConfig+0xa8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d109      	bne.n	8004228 <TIM_OC4_SetConfig+0x7c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
=======
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800421a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	019b      	lsls	r3, r3, #6
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40010400 	.word	0x40010400

08003e08 <TIM_CCxChannelCmd>:
=======
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40010000 	.word	0x40010000
 8004254:	40010400 	.word	0x40010400

08004258 <TIM_CCxChannelCmd>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
=======
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1a      	ldr	r2, [r3, #32]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	431a      	orrs	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	621a      	str	r2, [r3, #32]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2201      	movs	r2, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	43db      	mvns	r3, r3
 800427a:	401a      	ands	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1a      	ldr	r2, [r3, #32]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
=======
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e05a      	b.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d01d      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d018      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10c      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
=======
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e05a      	b.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d022      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004308:	d01d      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d018      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1b      	ldr	r2, [pc, #108]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1a      	ldr	r2, [pc, #104]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d10c      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4313      	orrs	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40001800 	.word	0x40001800

08003f4c <HAL_TIMEx_CommutCallback>:
=======
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40010000 	.word	0x40010000
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40010400 	.word	0x40010400
 8004394:	40014000 	.word	0x40014000
 8004398:	40001800 	.word	0x40001800

0800439c <HAL_TIMEx_CommutCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
=======
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_BreakCallback>:
=======
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIMEx_BreakCallback>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
=======
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_UART_Init>:
=======
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_Init>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e03f      	b.n	8004006 <HAL_UART_Init+0x92>
=======
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e03f      	b.n	8004456 <HAL_UART_Init+0x92>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fd fbfa 	bl	8001794 <HAL_UART_MspInit>
=======
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fbe0 	bl	8001bb0 <HAL_UART_MspInit>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f9b1 	bl	8004320 <UART_SetConfig>
=======
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f90b 	bl	8004624 <UART_SetConfig>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_UART_Transmit>:
=======
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800441c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800442c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800443c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UART_Transmit>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800400e:	b580      	push	{r7, lr}
 8004010:	b088      	sub	sp, #32
 8004012:	af02      	add	r7, sp, #8
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b20      	cmp	r3, #32
 800402c:	f040 8083 	bne.w	8004136 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_UART_Transmit+0x2e>
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e07b      	b.n	8004138 <HAL_UART_Transmit+0x12a>
=======
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af02      	add	r7, sp, #8
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	f040 8083 	bne.w	8004586 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Transmit+0x2e>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e07b      	b.n	8004588 <HAL_UART_Transmit+0x12a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_UART_Transmit+0x40>
 800404a:	2302      	movs	r3, #2
 800404c:	e074      	b.n	8004138 <HAL_UART_Transmit+0x12a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2221      	movs	r2, #33	; 0x21
 8004060:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004064:	f7fd fc3e 	bl	80018e4 <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800407e:	e042      	b.n	8004106 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004096:	d122      	bne.n	80040de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8f2 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e042      	b.n	8004138 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3302      	adds	r3, #2
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	e017      	b.n	8004106 <HAL_UART_Transmit+0xf8>
=======
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_UART_Transmit+0x40>
 800449a:	2302      	movs	r3, #2
 800449c:	e074      	b.n	8004588 <HAL_UART_Transmit+0x12a>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2221      	movs	r2, #33	; 0x21
 80044b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80044b4:	f7fd fc24 	bl	8001d00 <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80044ce:	e042      	b.n	8004556 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e6:	d122      	bne.n	800452e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2200      	movs	r2, #0
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f84c 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e042      	b.n	8004588 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004514:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3302      	adds	r3, #2
 8004522:	60bb      	str	r3, [r7, #8]
 8004524:	e017      	b.n	8004556 <HAL_UART_Transmit+0xf8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
        else
        {
          pData += 1U;
<<<<<<< HEAD
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	e013      	b.n	8004106 <HAL_UART_Transmit+0xf8>
=======
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3301      	adds	r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	e013      	b.n	8004556 <HAL_UART_Transmit+0xf8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f8cf 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e01f      	b.n	8004138 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	60ba      	str	r2, [r7, #8]
 80040fe:	781a      	ldrb	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1b7      	bne.n	8004080 <HAL_UART_Transmit+0x72>
=======
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f829 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e01f      	b.n	8004588 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	60ba      	str	r2, [r7, #8]
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1b7      	bne.n	80044d0 <HAL_UART_Transmit+0x72>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
<<<<<<< HEAD
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	2140      	movs	r1, #64	; 0x40
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f8b6 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e006      	b.n	8004138 <HAL_UART_Transmit+0x12a>
=======
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2200      	movs	r2, #0
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f810 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e006      	b.n	8004588 <HAL_UART_Transmit+0x12a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_UART_Transmit+0x12a>
=======
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e000      	b.n	8004588 <HAL_UART_Transmit+0x12a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004136:	2302      	movs	r3, #2
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b20      	cmp	r3, #32
 800415e:	f040 8090 	bne.w	8004282 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_UART_Receive+0x2e>
 8004168:	88fb      	ldrh	r3, [r7, #6]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e088      	b.n	8004284 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_UART_Receive+0x40>
 800417c:	2302      	movs	r3, #2
 800417e:	e081      	b.n	8004284 <HAL_UART_Receive+0x144>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2222      	movs	r2, #34	; 0x22
 8004192:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004196:	f7fd fba5 	bl	80018e4 <HAL_GetTick>
 800419a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041b0:	e05c      	b.n	800426c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d12b      	bne.n	8004222 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2120      	movs	r1, #32
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f859 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e04f      	b.n	8004284 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10c      	bne.n	800420a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3302      	adds	r3, #2
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	e030      	b.n	800426c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	b29b      	uxth	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	b29a      	uxth	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3301      	adds	r3, #1
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	e024      	b.n	800426c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	2120      	movs	r1, #32
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f82d 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e023      	b.n	8004284 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d108      	bne.n	8004256 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	60ba      	str	r2, [r7, #8]
 8004250:	b2ca      	uxtb	r2, r1
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e00a      	b.n	800426c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d19d      	bne.n	80041b2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_WaitOnFlagUntilTimeout>:
=======
 8004586:	2302      	movs	r3, #2
  }
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	e02c      	b.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d028      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <UART_WaitOnFlagUntilTimeout+0x30>
 80042ac:	f7fd fb1a 	bl	80018e4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d21d      	bcs.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e00f      	b.n	8004318 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	429a      	cmp	r2, r3
 8004314:	d0c3      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a0:	e02c      	b.n	80045fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d028      	beq.n	80045fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045b0:	f7fd fba6 	bl	8001d00 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d21d      	bcs.n	80045fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e00f      	b.n	800461c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	429a      	cmp	r2, r3
 8004618:	d0c3      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_SetConfig>:
=======
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_SetConfig>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	b0bd      	sub	sp, #244	; 0xf4
 8004326:	af00      	add	r7, sp, #0
 8004328:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
=======
 8004624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433c:	68d9      	ldr	r1, [r3, #12]
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	ea40 0301 	orr.w	r3, r0, r1
 8004348:	6113      	str	r3, [r2, #16]
=======
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004378:	f021 010c 	bic.w	r1, r1, #12
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004386:	430b      	orrs	r3, r1
 8004388:	60d3      	str	r3, [r2, #12]
=======
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004666:	f023 030c 	bic.w	r3, r3, #12
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	430b      	orrs	r3, r1
 8004672:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	6999      	ldr	r1, [r3, #24]
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	ea40 0301 	orr.w	r3, r0, r1
 80043a6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	f040 81a5 	bne.w	8004700 <UART_SetConfig+0x3e0>
=======
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004692:	f040 818b 	bne.w	80049ac <UART_SetConfig+0x388>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4bcd      	ldr	r3, [pc, #820]	; (80046f4 <UART_SetConfig+0x3d4>)
 80043be:	429a      	cmp	r2, r3
 80043c0:	d006      	beq.n	80043d0 <UART_SetConfig+0xb0>
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4bcb      	ldr	r3, [pc, #812]	; (80046f8 <UART_SetConfig+0x3d8>)
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f040 80cb 	bne.w	8004566 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7fe ffd6 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 80043d4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043dc:	461c      	mov	r4, r3
 80043de:	f04f 0500 	mov.w	r5, #0
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80043ec:	415b      	adcs	r3, r3
 80043ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80043f6:	1912      	adds	r2, r2, r4
 80043f8:	eb45 0303 	adc.w	r3, r5, r3
 80043fc:	f04f 0000 	mov.w	r0, #0
 8004400:	f04f 0100 	mov.w	r1, #0
 8004404:	00d9      	lsls	r1, r3, #3
 8004406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800440a:	00d0      	lsls	r0, r2, #3
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	1911      	adds	r1, r2, r4
 8004412:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004416:	416b      	adcs	r3, r5
 8004418:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	1891      	adds	r1, r2, r2
 800442a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800442e:	415b      	adcs	r3, r3
 8004430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004434:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004438:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800443c:	f7fb ff38 	bl	80002b0 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4bad      	ldr	r3, [pc, #692]	; (80046fc <UART_SetConfig+0x3dc>)
 8004446:	fba3 2302 	umull	r2, r3, r3, r2
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	011e      	lsls	r6, r3, #4
 800444e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004452:	461c      	mov	r4, r3
 8004454:	f04f 0500 	mov.w	r5, #0
 8004458:	4622      	mov	r2, r4
 800445a:	462b      	mov	r3, r5
 800445c:	1891      	adds	r1, r2, r2
 800445e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004460:	415b      	adcs	r3, r3
 8004462:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004464:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004468:	1912      	adds	r2, r2, r4
 800446a:	eb45 0303 	adc.w	r3, r5, r3
 800446e:	f04f 0000 	mov.w	r0, #0
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	00d9      	lsls	r1, r3, #3
 8004478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800447c:	00d0      	lsls	r0, r2, #3
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	1911      	adds	r1, r2, r4
 8004484:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004488:	416b      	adcs	r3, r5
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800448e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	461a      	mov	r2, r3
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	1891      	adds	r1, r2, r2
 800449c:	6739      	str	r1, [r7, #112]	; 0x70
 800449e:	415b      	adcs	r3, r3
 80044a0:	677b      	str	r3, [r7, #116]	; 0x74
 80044a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80044a6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80044aa:	f7fb ff01 	bl	80002b0 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4b92      	ldr	r3, [pc, #584]	; (80046fc <UART_SetConfig+0x3dc>)
 80044b4:	fba3 1302 	umull	r1, r3, r3, r2
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	2164      	movs	r1, #100	; 0x64
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	3332      	adds	r3, #50	; 0x32
 80044c6:	4a8d      	ldr	r2, [pc, #564]	; (80046fc <UART_SetConfig+0x3dc>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044d4:	441e      	add	r6, r3
 80044d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044da:	4618      	mov	r0, r3
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	1894      	adds	r4, r2, r2
 80044e6:	66bc      	str	r4, [r7, #104]	; 0x68
 80044e8:	415b      	adcs	r3, r3
 80044ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80044f0:	1812      	adds	r2, r2, r0
 80044f2:	eb41 0303 	adc.w	r3, r1, r3
 80044f6:	f04f 0400 	mov.w	r4, #0
 80044fa:	f04f 0500 	mov.w	r5, #0
 80044fe:	00dd      	lsls	r5, r3, #3
 8004500:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004504:	00d4      	lsls	r4, r2, #3
 8004506:	4622      	mov	r2, r4
 8004508:	462b      	mov	r3, r5
 800450a:	1814      	adds	r4, r2, r0
 800450c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004510:	414b      	adcs	r3, r1
 8004512:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	461a      	mov	r2, r3
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	1891      	adds	r1, r2, r2
 8004524:	6639      	str	r1, [r7, #96]	; 0x60
 8004526:	415b      	adcs	r3, r3
 8004528:	667b      	str	r3, [r7, #100]	; 0x64
 800452a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800452e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004532:	f7fb febd 	bl	80002b0 <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4b70      	ldr	r3, [pc, #448]	; (80046fc <UART_SetConfig+0x3dc>)
 800453c:	fba3 1302 	umull	r1, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	2164      	movs	r1, #100	; 0x64
 8004544:	fb01 f303 	mul.w	r3, r1, r3
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	3332      	adds	r3, #50	; 0x32
 800454e:	4a6b      	ldr	r2, [pc, #428]	; (80046fc <UART_SetConfig+0x3dc>)
 8004550:	fba2 2303 	umull	r2, r3, r2, r3
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	f003 0207 	and.w	r2, r3, #7
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4432      	add	r2, r6
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e26d      	b.n	8004a42 <UART_SetConfig+0x722>
=======
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4ac1      	ldr	r2, [pc, #772]	; (80049a0 <UART_SetConfig+0x37c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d005      	beq.n	80046ac <UART_SetConfig+0x88>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4abf      	ldr	r2, [pc, #764]	; (80049a4 <UART_SetConfig+0x380>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	f040 80bd 	bne.w	8004826 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7ff f890 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 80046b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	461d      	mov	r5, r3
 80046b6:	f04f 0600 	mov.w	r6, #0
 80046ba:	46a8      	mov	r8, r5
 80046bc:	46b1      	mov	r9, r6
 80046be:	eb18 0308 	adds.w	r3, r8, r8
 80046c2:	eb49 0409 	adc.w	r4, r9, r9
 80046c6:	4698      	mov	r8, r3
 80046c8:	46a1      	mov	r9, r4
 80046ca:	eb18 0805 	adds.w	r8, r8, r5
 80046ce:	eb49 0906 	adc.w	r9, r9, r6
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046e6:	4688      	mov	r8, r1
 80046e8:	4691      	mov	r9, r2
 80046ea:	eb18 0005 	adds.w	r0, r8, r5
 80046ee:	eb49 0106 	adc.w	r1, r9, r6
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	461d      	mov	r5, r3
 80046f8:	f04f 0600 	mov.w	r6, #0
 80046fc:	196b      	adds	r3, r5, r5
 80046fe:	eb46 0406 	adc.w	r4, r6, r6
 8004702:	461a      	mov	r2, r3
 8004704:	4623      	mov	r3, r4
 8004706:	f7fb fffd 	bl	8000704 <__aeabi_uldivmod>
 800470a:	4603      	mov	r3, r0
 800470c:	460c      	mov	r4, r1
 800470e:	461a      	mov	r2, r3
 8004710:	4ba5      	ldr	r3, [pc, #660]	; (80049a8 <UART_SetConfig+0x384>)
 8004712:	fba3 2302 	umull	r2, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	461d      	mov	r5, r3
 8004720:	f04f 0600 	mov.w	r6, #0
 8004724:	46a9      	mov	r9, r5
 8004726:	46b2      	mov	sl, r6
 8004728:	eb19 0309 	adds.w	r3, r9, r9
 800472c:	eb4a 040a 	adc.w	r4, sl, sl
 8004730:	4699      	mov	r9, r3
 8004732:	46a2      	mov	sl, r4
 8004734:	eb19 0905 	adds.w	r9, r9, r5
 8004738:	eb4a 0a06 	adc.w	sl, sl, r6
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004748:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800474c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004750:	4689      	mov	r9, r1
 8004752:	4692      	mov	sl, r2
 8004754:	eb19 0005 	adds.w	r0, r9, r5
 8004758:	eb4a 0106 	adc.w	r1, sl, r6
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	461d      	mov	r5, r3
 8004762:	f04f 0600 	mov.w	r6, #0
 8004766:	196b      	adds	r3, r5, r5
 8004768:	eb46 0406 	adc.w	r4, r6, r6
 800476c:	461a      	mov	r2, r3
 800476e:	4623      	mov	r3, r4
 8004770:	f7fb ffc8 	bl	8000704 <__aeabi_uldivmod>
 8004774:	4603      	mov	r3, r0
 8004776:	460c      	mov	r4, r1
 8004778:	461a      	mov	r2, r3
 800477a:	4b8b      	ldr	r3, [pc, #556]	; (80049a8 <UART_SetConfig+0x384>)
 800477c:	fba3 1302 	umull	r1, r3, r3, r2
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	2164      	movs	r1, #100	; 0x64
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	3332      	adds	r3, #50	; 0x32
 800478e:	4a86      	ldr	r2, [pc, #536]	; (80049a8 <UART_SetConfig+0x384>)
 8004790:	fba2 2303 	umull	r2, r3, r2, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800479c:	4498      	add	r8, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	461d      	mov	r5, r3
 80047a2:	f04f 0600 	mov.w	r6, #0
 80047a6:	46a9      	mov	r9, r5
 80047a8:	46b2      	mov	sl, r6
 80047aa:	eb19 0309 	adds.w	r3, r9, r9
 80047ae:	eb4a 040a 	adc.w	r4, sl, sl
 80047b2:	4699      	mov	r9, r3
 80047b4:	46a2      	mov	sl, r4
 80047b6:	eb19 0905 	adds.w	r9, r9, r5
 80047ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047d2:	4689      	mov	r9, r1
 80047d4:	4692      	mov	sl, r2
 80047d6:	eb19 0005 	adds.w	r0, r9, r5
 80047da:	eb4a 0106 	adc.w	r1, sl, r6
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	461d      	mov	r5, r3
 80047e4:	f04f 0600 	mov.w	r6, #0
 80047e8:	196b      	adds	r3, r5, r5
 80047ea:	eb46 0406 	adc.w	r4, r6, r6
 80047ee:	461a      	mov	r2, r3
 80047f0:	4623      	mov	r3, r4
 80047f2:	f7fb ff87 	bl	8000704 <__aeabi_uldivmod>
 80047f6:	4603      	mov	r3, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b6a      	ldr	r3, [pc, #424]	; (80049a8 <UART_SetConfig+0x384>)
 80047fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2164      	movs	r1, #100	; 0x64
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	3332      	adds	r3, #50	; 0x32
 8004810:	4a65      	ldr	r2, [pc, #404]	; (80049a8 <UART_SetConfig+0x384>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 0207 	and.w	r2, r3, #7
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4442      	add	r2, r8
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	e26f      	b.n	8004d06 <UART_SetConfig+0x6e2>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8004566:	f7fe fef7 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 800456a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800456e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004572:	461c      	mov	r4, r3
 8004574:	f04f 0500 	mov.w	r5, #0
 8004578:	4622      	mov	r2, r4
 800457a:	462b      	mov	r3, r5
 800457c:	1891      	adds	r1, r2, r2
 800457e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004580:	415b      	adcs	r3, r3
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004584:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004588:	1912      	adds	r2, r2, r4
 800458a:	eb45 0303 	adc.w	r3, r5, r3
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	00d9      	lsls	r1, r3, #3
 8004598:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800459c:	00d0      	lsls	r0, r2, #3
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	1911      	adds	r1, r2, r4
 80045a4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80045a8:	416b      	adcs	r3, r5
 80045aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	6539      	str	r1, [r7, #80]	; 0x50
 80045be:	415b      	adcs	r3, r3
 80045c0:	657b      	str	r3, [r7, #84]	; 0x54
 80045c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045c6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80045ca:	f7fb fe71 	bl	80002b0 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <UART_SetConfig+0x3dc>)
 80045d4:	fba3 2302 	umull	r2, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	011e      	lsls	r6, r3, #4
 80045dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045e0:	461c      	mov	r4, r3
 80045e2:	f04f 0500 	mov.w	r5, #0
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80045ee:	415b      	adcs	r3, r3
 80045f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045f6:	1912      	adds	r2, r2, r4
 80045f8:	eb45 0303 	adc.w	r3, r5, r3
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	00d9      	lsls	r1, r3, #3
 8004606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800460a:	00d0      	lsls	r0, r2, #3
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	1911      	adds	r1, r2, r4
 8004612:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004616:	416b      	adcs	r3, r5
 8004618:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800461c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	1891      	adds	r1, r2, r2
 800462a:	6439      	str	r1, [r7, #64]	; 0x40
 800462c:	415b      	adcs	r3, r3
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
 8004630:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004634:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004638:	f7fb fe3a 	bl	80002b0 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <UART_SetConfig+0x3dc>)
 8004642:	fba3 1302 	umull	r1, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2164      	movs	r1, #100	; 0x64
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	3332      	adds	r3, #50	; 0x32
 8004654:	4a29      	ldr	r2, [pc, #164]	; (80046fc <UART_SetConfig+0x3dc>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004662:	441e      	add	r6, r3
 8004664:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004668:	4618      	mov	r0, r3
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	1894      	adds	r4, r2, r2
 8004674:	63bc      	str	r4, [r7, #56]	; 0x38
 8004676:	415b      	adcs	r3, r3
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800467a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800467e:	1812      	adds	r2, r2, r0
 8004680:	eb41 0303 	adc.w	r3, r1, r3
 8004684:	f04f 0400 	mov.w	r4, #0
 8004688:	f04f 0500 	mov.w	r5, #0
 800468c:	00dd      	lsls	r5, r3, #3
 800468e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004692:	00d4      	lsls	r4, r2, #3
 8004694:	4622      	mov	r2, r4
 8004696:	462b      	mov	r3, r5
 8004698:	1814      	adds	r4, r2, r0
 800469a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800469e:	414b      	adcs	r3, r1
 80046a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	6339      	str	r1, [r7, #48]	; 0x30
 80046b4:	415b      	adcs	r3, r3
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
 80046b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046bc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046c0:	f7fb fdf6 	bl	80002b0 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <UART_SetConfig+0x3dc>)
 80046ca:	fba3 1302 	umull	r1, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2164      	movs	r1, #100	; 0x64
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	3332      	adds	r3, #50	; 0x32
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <UART_SetConfig+0x3dc>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	f003 0207 	and.w	r2, r3, #7
 80046e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4432      	add	r2, r6
 80046f0:	609a      	str	r2, [r3, #8]
=======
 8004826:	f7fe ffbf 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 800482a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	461d      	mov	r5, r3
 8004830:	f04f 0600 	mov.w	r6, #0
 8004834:	46a8      	mov	r8, r5
 8004836:	46b1      	mov	r9, r6
 8004838:	eb18 0308 	adds.w	r3, r8, r8
 800483c:	eb49 0409 	adc.w	r4, r9, r9
 8004840:	4698      	mov	r8, r3
 8004842:	46a1      	mov	r9, r4
 8004844:	eb18 0805 	adds.w	r8, r8, r5
 8004848:	eb49 0906 	adc.w	r9, r9, r6
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004858:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800485c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004860:	4688      	mov	r8, r1
 8004862:	4691      	mov	r9, r2
 8004864:	eb18 0005 	adds.w	r0, r8, r5
 8004868:	eb49 0106 	adc.w	r1, r9, r6
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	461d      	mov	r5, r3
 8004872:	f04f 0600 	mov.w	r6, #0
 8004876:	196b      	adds	r3, r5, r5
 8004878:	eb46 0406 	adc.w	r4, r6, r6
 800487c:	461a      	mov	r2, r3
 800487e:	4623      	mov	r3, r4
 8004880:	f7fb ff40 	bl	8000704 <__aeabi_uldivmod>
 8004884:	4603      	mov	r3, r0
 8004886:	460c      	mov	r4, r1
 8004888:	461a      	mov	r2, r3
 800488a:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <UART_SetConfig+0x384>)
 800488c:	fba3 2302 	umull	r2, r3, r3, r2
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	461d      	mov	r5, r3
 800489a:	f04f 0600 	mov.w	r6, #0
 800489e:	46a9      	mov	r9, r5
 80048a0:	46b2      	mov	sl, r6
 80048a2:	eb19 0309 	adds.w	r3, r9, r9
 80048a6:	eb4a 040a 	adc.w	r4, sl, sl
 80048aa:	4699      	mov	r9, r3
 80048ac:	46a2      	mov	sl, r4
 80048ae:	eb19 0905 	adds.w	r9, r9, r5
 80048b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80048b6:	f04f 0100 	mov.w	r1, #0
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048ca:	4689      	mov	r9, r1
 80048cc:	4692      	mov	sl, r2
 80048ce:	eb19 0005 	adds.w	r0, r9, r5
 80048d2:	eb4a 0106 	adc.w	r1, sl, r6
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	461d      	mov	r5, r3
 80048dc:	f04f 0600 	mov.w	r6, #0
 80048e0:	196b      	adds	r3, r5, r5
 80048e2:	eb46 0406 	adc.w	r4, r6, r6
 80048e6:	461a      	mov	r2, r3
 80048e8:	4623      	mov	r3, r4
 80048ea:	f7fb ff0b 	bl	8000704 <__aeabi_uldivmod>
 80048ee:	4603      	mov	r3, r0
 80048f0:	460c      	mov	r4, r1
 80048f2:	461a      	mov	r2, r3
 80048f4:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <UART_SetConfig+0x384>)
 80048f6:	fba3 1302 	umull	r1, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2164      	movs	r1, #100	; 0x64
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	3332      	adds	r3, #50	; 0x32
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <UART_SetConfig+0x384>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004916:	4498      	add	r8, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	461d      	mov	r5, r3
 800491c:	f04f 0600 	mov.w	r6, #0
 8004920:	46a9      	mov	r9, r5
 8004922:	46b2      	mov	sl, r6
 8004924:	eb19 0309 	adds.w	r3, r9, r9
 8004928:	eb4a 040a 	adc.w	r4, sl, sl
 800492c:	4699      	mov	r9, r3
 800492e:	46a2      	mov	sl, r4
 8004930:	eb19 0905 	adds.w	r9, r9, r5
 8004934:	eb4a 0a06 	adc.w	sl, sl, r6
 8004938:	f04f 0100 	mov.w	r1, #0
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800494c:	4689      	mov	r9, r1
 800494e:	4692      	mov	sl, r2
 8004950:	eb19 0005 	adds.w	r0, r9, r5
 8004954:	eb4a 0106 	adc.w	r1, sl, r6
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	461d      	mov	r5, r3
 800495e:	f04f 0600 	mov.w	r6, #0
 8004962:	196b      	adds	r3, r5, r5
 8004964:	eb46 0406 	adc.w	r4, r6, r6
 8004968:	461a      	mov	r2, r3
 800496a:	4623      	mov	r3, r4
 800496c:	f7fb feca 	bl	8000704 <__aeabi_uldivmod>
 8004970:	4603      	mov	r3, r0
 8004972:	460c      	mov	r4, r1
 8004974:	461a      	mov	r2, r3
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <UART_SetConfig+0x384>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <UART_SetConfig+0x384>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4442      	add	r2, r8
 800499c:	609a      	str	r2, [r3, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
 80046f2:	e1a6      	b.n	8004a42 <UART_SetConfig+0x722>
 80046f4:	40011000 	.word	0x40011000
 80046f8:	40011400 	.word	0x40011400
 80046fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4bd1      	ldr	r3, [pc, #836]	; (8004a4c <UART_SetConfig+0x72c>)
 8004708:	429a      	cmp	r2, r3
 800470a:	d006      	beq.n	800471a <UART_SetConfig+0x3fa>
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4bcf      	ldr	r3, [pc, #828]	; (8004a50 <UART_SetConfig+0x730>)
 8004714:	429a      	cmp	r2, r3
 8004716:	f040 80ca 	bne.w	80048ae <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800471a:	f7fe fe31 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 800471e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004722:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004726:	461c      	mov	r4, r3
 8004728:	f04f 0500 	mov.w	r5, #0
 800472c:	4622      	mov	r2, r4
 800472e:	462b      	mov	r3, r5
 8004730:	1891      	adds	r1, r2, r2
 8004732:	62b9      	str	r1, [r7, #40]	; 0x28
 8004734:	415b      	adcs	r3, r3
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800473c:	1912      	adds	r2, r2, r4
 800473e:	eb45 0303 	adc.w	r3, r5, r3
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	00d9      	lsls	r1, r3, #3
 800474c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004750:	00d0      	lsls	r0, r2, #3
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	eb12 0a04 	adds.w	sl, r2, r4
 800475a:	eb43 0b05 	adc.w	fp, r3, r5
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4618      	mov	r0, r3
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004778:	0082      	lsls	r2, r0, #2
 800477a:	4650      	mov	r0, sl
 800477c:	4659      	mov	r1, fp
 800477e:	f7fb fd97 	bl	80002b0 <__aeabi_uldivmod>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4bb3      	ldr	r3, [pc, #716]	; (8004a54 <UART_SetConfig+0x734>)
 8004788:	fba3 2302 	umull	r2, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	011e      	lsls	r6, r3, #4
 8004790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004794:	4618      	mov	r0, r3
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	1894      	adds	r4, r2, r2
 80047a0:	623c      	str	r4, [r7, #32]
 80047a2:	415b      	adcs	r3, r3
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
 80047a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047aa:	1812      	adds	r2, r2, r0
 80047ac:	eb41 0303 	adc.w	r3, r1, r3
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	f04f 0500 	mov.w	r5, #0
 80047b8:	00dd      	lsls	r5, r3, #3
 80047ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047be:	00d4      	lsls	r4, r2, #3
 80047c0:	4622      	mov	r2, r4
 80047c2:	462b      	mov	r3, r5
 80047c4:	1814      	adds	r4, r2, r0
 80047c6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80047ca:	414b      	adcs	r3, r1
 80047cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f04f 0100 	mov.w	r1, #0
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	008b      	lsls	r3, r1, #2
 80047e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ea:	0082      	lsls	r2, r0, #2
 80047ec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80047f0:	f7fb fd5e 	bl	80002b0 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4b96      	ldr	r3, [pc, #600]	; (8004a54 <UART_SetConfig+0x734>)
 80047fa:	fba3 1302 	umull	r1, r3, r3, r2
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2164      	movs	r1, #100	; 0x64
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a91      	ldr	r2, [pc, #580]	; (8004a54 <UART_SetConfig+0x734>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004818:	441e      	add	r6, r3
 800481a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800481e:	4618      	mov	r0, r3
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	1894      	adds	r4, r2, r2
 800482a:	61bc      	str	r4, [r7, #24]
 800482c:	415b      	adcs	r3, r3
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004834:	1812      	adds	r2, r2, r0
 8004836:	eb41 0303 	adc.w	r3, r1, r3
 800483a:	f04f 0400 	mov.w	r4, #0
 800483e:	f04f 0500 	mov.w	r5, #0
 8004842:	00dd      	lsls	r5, r3, #3
 8004844:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004848:	00d4      	lsls	r4, r2, #3
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	1814      	adds	r4, r2, r0
 8004850:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004854:	414b      	adcs	r3, r1
 8004856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	008b      	lsls	r3, r1, #2
 8004870:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004874:	0082      	lsls	r2, r0, #2
 8004876:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800487a:	f7fb fd19 	bl	80002b0 <__aeabi_uldivmod>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4b74      	ldr	r3, [pc, #464]	; (8004a54 <UART_SetConfig+0x734>)
 8004884:	fba3 1302 	umull	r1, r3, r3, r2
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	2164      	movs	r1, #100	; 0x64
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	3332      	adds	r3, #50	; 0x32
 8004896:	4a6f      	ldr	r2, [pc, #444]	; (8004a54 <UART_SetConfig+0x734>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	f003 020f 	and.w	r2, r3, #15
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4432      	add	r2, r6
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e0c9      	b.n	8004a42 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7fe fd53 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 80048b2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80048ba:	461c      	mov	r4, r3
 80048bc:	f04f 0500 	mov.w	r5, #0
 80048c0:	4622      	mov	r2, r4
 80048c2:	462b      	mov	r3, r5
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	6139      	str	r1, [r7, #16]
 80048c8:	415b      	adcs	r3, r3
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048d0:	1912      	adds	r2, r2, r4
 80048d2:	eb45 0303 	adc.w	r3, r5, r3
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	00d9      	lsls	r1, r3, #3
 80048e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e4:	00d0      	lsls	r0, r2, #3
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	eb12 0804 	adds.w	r8, r2, r4
 80048ee:	eb43 0905 	adc.w	r9, r3, r5
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	008b      	lsls	r3, r1, #2
 8004908:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800490c:	0082      	lsls	r2, r0, #2
 800490e:	4640      	mov	r0, r8
 8004910:	4649      	mov	r1, r9
 8004912:	f7fb fccd 	bl	80002b0 <__aeabi_uldivmod>
 8004916:	4602      	mov	r2, r0
 8004918:	460b      	mov	r3, r1
 800491a:	4b4e      	ldr	r3, [pc, #312]	; (8004a54 <UART_SetConfig+0x734>)
 800491c:	fba3 2302 	umull	r2, r3, r3, r2
 8004920:	095b      	lsrs	r3, r3, #5
 8004922:	011e      	lsls	r6, r3, #4
 8004924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004928:	4618      	mov	r0, r3
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	1894      	adds	r4, r2, r2
 8004934:	60bc      	str	r4, [r7, #8]
 8004936:	415b      	adcs	r3, r3
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493e:	1812      	adds	r2, r2, r0
 8004940:	eb41 0303 	adc.w	r3, r1, r3
 8004944:	f04f 0400 	mov.w	r4, #0
 8004948:	f04f 0500 	mov.w	r5, #0
 800494c:	00dd      	lsls	r5, r3, #3
 800494e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004952:	00d4      	lsls	r4, r2, #3
 8004954:	4622      	mov	r2, r4
 8004956:	462b      	mov	r3, r5
 8004958:	1814      	adds	r4, r2, r0
 800495a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800495e:	414b      	adcs	r3, r1
 8004960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4618      	mov	r0, r3
 800496c:	f04f 0100 	mov.w	r1, #0
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	008b      	lsls	r3, r1, #2
 800497a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800497e:	0082      	lsls	r2, r0, #2
 8004980:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004984:	f7fb fc94 	bl	80002b0 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <UART_SetConfig+0x734>)
 800498e:	fba3 1302 	umull	r1, r3, r3, r2
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2164      	movs	r1, #100	; 0x64
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	3332      	adds	r3, #50	; 0x32
 80049a0:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <UART_SetConfig+0x734>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ac:	441e      	add	r6, r3
 80049ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049b2:	4618      	mov	r0, r3
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	1894      	adds	r4, r2, r2
 80049be:	603c      	str	r4, [r7, #0]
 80049c0:	415b      	adcs	r3, r3
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	1812      	adds	r2, r2, r0
 80049ca:	eb41 0303 	adc.w	r3, r1, r3
 80049ce:	f04f 0400 	mov.w	r4, #0
 80049d2:	f04f 0500 	mov.w	r5, #0
 80049d6:	00dd      	lsls	r5, r3, #3
 80049d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049dc:	00d4      	lsls	r4, r2, #3
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	1814      	adds	r4, r2, r0
 80049e4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80049e8:	414b      	adcs	r3, r1
 80049ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	008b      	lsls	r3, r1, #2
 8004a04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a08:	0082      	lsls	r2, r0, #2
 8004a0a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004a0e:	f7fb fc4f 	bl	80002b0 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <UART_SetConfig+0x734>)
 8004a18:	fba3 1302 	umull	r1, r3, r3, r2
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	2164      	movs	r1, #100	; 0x64
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	3332      	adds	r3, #50	; 0x32
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <UART_SetConfig+0x734>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	f003 020f 	and.w	r2, r3, #15
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4432      	add	r2, r6
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	e7ff      	b.n	8004a42 <UART_SetConfig+0x722>
 8004a42:	bf00      	nop
 8004a44:	37f4      	adds	r7, #244	; 0xf4
 8004a46:	46bd      	mov	sp, r7
 8004a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4c:	40011000 	.word	0x40011000
 8004a50:	40011400 	.word	0x40011400
 8004a54:	51eb851f 	.word	0x51eb851f

08004a58 <makeFreeRtosPriority>:
=======
 800499e:	e1b2      	b.n	8004d06 <UART_SetConfig+0x6e2>
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4ad7      	ldr	r2, [pc, #860]	; (8004d10 <UART_SetConfig+0x6ec>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d005      	beq.n	80049c2 <UART_SetConfig+0x39e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4ad6      	ldr	r2, [pc, #856]	; (8004d14 <UART_SetConfig+0x6f0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	f040 80d1 	bne.w	8004b64 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c2:	f7fe ff05 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 80049c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	469a      	mov	sl, r3
 80049cc:	f04f 0b00 	mov.w	fp, #0
 80049d0:	46d0      	mov	r8, sl
 80049d2:	46d9      	mov	r9, fp
 80049d4:	eb18 0308 	adds.w	r3, r8, r8
 80049d8:	eb49 0409 	adc.w	r4, r9, r9
 80049dc:	4698      	mov	r8, r3
 80049de:	46a1      	mov	r9, r4
 80049e0:	eb18 080a 	adds.w	r8, r8, sl
 80049e4:	eb49 090b 	adc.w	r9, r9, fp
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049fc:	4688      	mov	r8, r1
 80049fe:	4691      	mov	r9, r2
 8004a00:	eb1a 0508 	adds.w	r5, sl, r8
 8004a04:	eb4b 0609 	adc.w	r6, fp, r9
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	f04f 0400 	mov.w	r4, #0
 8004a1a:	0094      	lsls	r4, r2, #2
 8004a1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	461a      	mov	r2, r3
 8004a24:	4623      	mov	r3, r4
 8004a26:	4628      	mov	r0, r5
 8004a28:	4631      	mov	r1, r6
 8004a2a:	f7fb fe6b 	bl	8000704 <__aeabi_uldivmod>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	460c      	mov	r4, r1
 8004a32:	461a      	mov	r2, r3
 8004a34:	4bb8      	ldr	r3, [pc, #736]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004a36:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	469b      	mov	fp, r3
 8004a44:	f04f 0c00 	mov.w	ip, #0
 8004a48:	46d9      	mov	r9, fp
 8004a4a:	46e2      	mov	sl, ip
 8004a4c:	eb19 0309 	adds.w	r3, r9, r9
 8004a50:	eb4a 040a 	adc.w	r4, sl, sl
 8004a54:	4699      	mov	r9, r3
 8004a56:	46a2      	mov	sl, r4
 8004a58:	eb19 090b 	adds.w	r9, r9, fp
 8004a5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a60:	f04f 0100 	mov.w	r1, #0
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a74:	4689      	mov	r9, r1
 8004a76:	4692      	mov	sl, r2
 8004a78:	eb1b 0509 	adds.w	r5, fp, r9
 8004a7c:	eb4c 060a 	adc.w	r6, ip, sl
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	f04f 0400 	mov.w	r4, #0
 8004a92:	0094      	lsls	r4, r2, #2
 8004a94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4623      	mov	r3, r4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	f7fb fe2f 	bl	8000704 <__aeabi_uldivmod>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b9a      	ldr	r3, [pc, #616]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004aae:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2164      	movs	r1, #100	; 0x64
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	3332      	adds	r3, #50	; 0x32
 8004ac0:	4a95      	ldr	r2, [pc, #596]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004acc:	4498      	add	r8, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	469b      	mov	fp, r3
 8004ad2:	f04f 0c00 	mov.w	ip, #0
 8004ad6:	46d9      	mov	r9, fp
 8004ad8:	46e2      	mov	sl, ip
 8004ada:	eb19 0309 	adds.w	r3, r9, r9
 8004ade:	eb4a 040a 	adc.w	r4, sl, sl
 8004ae2:	4699      	mov	r9, r3
 8004ae4:	46a2      	mov	sl, r4
 8004ae6:	eb19 090b 	adds.w	r9, r9, fp
 8004aea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b02:	4689      	mov	r9, r1
 8004b04:	4692      	mov	sl, r2
 8004b06:	eb1b 0509 	adds.w	r5, fp, r9
 8004b0a:	eb4c 060a 	adc.w	r6, ip, sl
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4619      	mov	r1, r3
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	f04f 0400 	mov.w	r4, #0
 8004b20:	0094      	lsls	r4, r2, #2
 8004b22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b26:	008b      	lsls	r3, r1, #2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	4631      	mov	r1, r6
 8004b30:	f7fb fde8 	bl	8000704 <__aeabi_uldivmod>
 8004b34:	4603      	mov	r3, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b77      	ldr	r3, [pc, #476]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2164      	movs	r1, #100	; 0x64
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a72      	ldr	r2, [pc, #456]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	f003 020f 	and.w	r2, r3, #15
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4442      	add	r2, r8
 8004b60:	609a      	str	r2, [r3, #8]
 8004b62:	e0d0      	b.n	8004d06 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe fe20 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8004b68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	469a      	mov	sl, r3
 8004b6e:	f04f 0b00 	mov.w	fp, #0
 8004b72:	46d0      	mov	r8, sl
 8004b74:	46d9      	mov	r9, fp
 8004b76:	eb18 0308 	adds.w	r3, r8, r8
 8004b7a:	eb49 0409 	adc.w	r4, r9, r9
 8004b7e:	4698      	mov	r8, r3
 8004b80:	46a1      	mov	r9, r4
 8004b82:	eb18 080a 	adds.w	r8, r8, sl
 8004b86:	eb49 090b 	adc.w	r9, r9, fp
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b9e:	4688      	mov	r8, r1
 8004ba0:	4691      	mov	r9, r2
 8004ba2:	eb1a 0508 	adds.w	r5, sl, r8
 8004ba6:	eb4b 0609 	adc.w	r6, fp, r9
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	f04f 0400 	mov.w	r4, #0
 8004bbc:	0094      	lsls	r4, r2, #2
 8004bbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bc2:	008b      	lsls	r3, r1, #2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4623      	mov	r3, r4
 8004bc8:	4628      	mov	r0, r5
 8004bca:	4631      	mov	r1, r6
 8004bcc:	f7fb fd9a 	bl	8000704 <__aeabi_uldivmod>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4b50      	ldr	r3, [pc, #320]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	469b      	mov	fp, r3
 8004be6:	f04f 0c00 	mov.w	ip, #0
 8004bea:	46d9      	mov	r9, fp
 8004bec:	46e2      	mov	sl, ip
 8004bee:	eb19 0309 	adds.w	r3, r9, r9
 8004bf2:	eb4a 040a 	adc.w	r4, sl, sl
 8004bf6:	4699      	mov	r9, r3
 8004bf8:	46a2      	mov	sl, r4
 8004bfa:	eb19 090b 	adds.w	r9, r9, fp
 8004bfe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c16:	4689      	mov	r9, r1
 8004c18:	4692      	mov	sl, r2
 8004c1a:	eb1b 0509 	adds.w	r5, fp, r9
 8004c1e:	eb4c 060a 	adc.w	r6, ip, sl
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	f04f 0400 	mov.w	r4, #0
 8004c34:	0094      	lsls	r4, r2, #2
 8004c36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c3a:	008b      	lsls	r3, r1, #2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4623      	mov	r3, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	4631      	mov	r1, r6
 8004c44:	f7fb fd5e 	bl	8000704 <__aeabi_uldivmod>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b32      	ldr	r3, [pc, #200]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a2d      	ldr	r2, [pc, #180]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c6e:	4498      	add	r8, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	469b      	mov	fp, r3
 8004c74:	f04f 0c00 	mov.w	ip, #0
 8004c78:	46d9      	mov	r9, fp
 8004c7a:	46e2      	mov	sl, ip
 8004c7c:	eb19 0309 	adds.w	r3, r9, r9
 8004c80:	eb4a 040a 	adc.w	r4, sl, sl
 8004c84:	4699      	mov	r9, r3
 8004c86:	46a2      	mov	sl, r4
 8004c88:	eb19 090b 	adds.w	r9, r9, fp
 8004c8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ca4:	4689      	mov	r9, r1
 8004ca6:	4692      	mov	sl, r2
 8004ca8:	eb1b 0509 	adds.w	r5, fp, r9
 8004cac:	eb4c 060a 	adc.w	r6, ip, sl
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	f04f 0400 	mov.w	r4, #0
 8004cc2:	0094      	lsls	r4, r2, #2
 8004cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cc8:	008b      	lsls	r3, r1, #2
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4623      	mov	r3, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	f7fb fd17 	bl	8000704 <__aeabi_uldivmod>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	460c      	mov	r4, r1
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004cde:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	2164      	movs	r1, #100	; 0x64
 8004ce6:	fb01 f303 	mul.w	r3, r1, r3
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	3332      	adds	r3, #50	; 0x32
 8004cf0:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <UART_SetConfig+0x6f4>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	f003 020f 	and.w	r2, r3, #15
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4442      	add	r2, r8
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	e7ff      	b.n	8004d06 <UART_SetConfig+0x6e2>
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d10:	40011000 	.word	0x40011000
 8004d14:	40011400 	.word	0x40011400
 8004d18:	51eb851f 	.word	0x51eb851f

08004d1c <makeFreeRtosPriority>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
<<<<<<< HEAD
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a6a:	2b84      	cmp	r3, #132	; 0x84
 8004a6c:	d005      	beq.n	8004a7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	3303      	adds	r3, #3
 8004a78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <osKernelStart>:
=======
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2e:	2b84      	cmp	r3, #132	; 0x84
 8004d30:	d005      	beq.n	8004d3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	3303      	adds	r3, #3
 8004d3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <osKernelStart>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< HEAD
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a8c:	f000 fade 	bl	800504c <vTaskStartScheduler>
  
  return osOK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <osThreadCreate>:
=======
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004d50:	f000 fada 	bl	8005308 <vTaskStartScheduler>
  
  return osOK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <osThreadCreate>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< HEAD
 8004a96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a98:	b089      	sub	sp, #36	; 0x24
 8004a9a:	af04      	add	r7, sp, #16
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
=======
 8004d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d5c:	b089      	sub	sp, #36	; 0x24
 8004d5e:	af04      	add	r7, sp, #16
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< HEAD
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <osThreadCreate+0x54>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01c      	beq.n	8004aea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685c      	ldr	r4, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681d      	ldr	r5, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691e      	ldr	r6, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ffc8 	bl	8004a58 <makeFreeRtosPriority>
 8004ac8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ad2:	9202      	str	r2, [sp, #8]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	9100      	str	r1, [sp, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4632      	mov	r2, r6
 8004adc:	4629      	mov	r1, r5
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 f8ed 	bl	8004cbe <xTaskCreateStatic>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e01c      	b.n	8004b24 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685c      	ldr	r4, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004af6:	b29e      	uxth	r6, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff ffaa 	bl	8004a58 <makeFreeRtosPriority>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f107 030c 	add.w	r3, r7, #12
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	4632      	mov	r2, r6
 8004b12:	4629      	mov	r1, r5
 8004b14:	4620      	mov	r0, r4
 8004b16:	f000 f92f 	bl	8004d78 <xTaskCreate>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <osThreadCreate+0x90>
=======
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <osThreadCreate+0x54>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01c      	beq.n	8004dae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685c      	ldr	r4, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681d      	ldr	r5, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691e      	ldr	r6, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff ffc8 	bl	8004d1c <makeFreeRtosPriority>
 8004d8c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d96:	9202      	str	r2, [sp, #8]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	9100      	str	r1, [sp, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4632      	mov	r2, r6
 8004da0:	4629      	mov	r1, r5
 8004da2:	4620      	mov	r0, r4
 8004da4:	f000 f8ed 	bl	8004f82 <xTaskCreateStatic>
 8004da8:	4603      	mov	r3, r0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e01c      	b.n	8004de8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685c      	ldr	r4, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dba:	b29e      	uxth	r6, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ffaa 	bl	8004d1c <makeFreeRtosPriority>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	f107 030c 	add.w	r3, r7, #12
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	9200      	str	r2, [sp, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 f92c 	bl	8005036 <xTaskCreate>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d001      	beq.n	8004de8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <osThreadCreate+0x90>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< HEAD
 8004b24:	68fb      	ldr	r3, [r7, #12]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b2e <osDelay>:
=======
 8004de8:	68fb      	ldr	r3, [r7, #12]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004df2 <osDelay>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
<<<<<<< HEAD
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <osDelay+0x16>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e000      	b.n	8004b46 <osDelay+0x18>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 fa4c 	bl	8004fe4 <vTaskDelay>
  
  return osOK;
 8004b4c:	2300      	movs	r3, #0
=======
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <osDelay+0x16>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	e000      	b.n	8004e0a <osDelay+0x18>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fa48 	bl	80052a0 <vTaskDelay>
  
  return osOK;
 8004e10:	2300      	movs	r3, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
<<<<<<< HEAD
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <vListInitialise>:
=======
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <vListInitialise>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
=======
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 0208 	add.w	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	605a      	str	r2, [r3, #4]
=======
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f103 0208 	add.w	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6e:	609a      	str	r2, [r3, #8]
=======
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e32:	609a      	str	r2, [r3, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f103 0208 	add.w	r2, r3, #8
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f103 0208 	add.w	r2, r3, #8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
=======
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f103 0208 	add.w	r2, r3, #8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f103 0208 	add.w	r2, r3, #8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <vListInitialiseItem>:
=======
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <vListInitialiseItem>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	611a      	str	r2, [r3, #16]
=======
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <vListInsertEnd>:
=======
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <vListInsertEnd>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]
=======
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	609a      	str	r2, [r3, #8]
=======
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	609a      	str	r2, [r3, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <vListInsert>:
=======
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	601a      	str	r2, [r3, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <vListInsert>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60bb      	str	r3, [r7, #8]
=======
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d103      	bne.n	8004c18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e00c      	b.n	8004c32 <vListInsert+0x3a>
=======
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d103      	bne.n	8004edc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e00c      	b.n	8004ef6 <vListInsert+0x3a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e002      	b.n	8004c26 <vListInsert+0x2e>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d2f6      	bcs.n	8004c20 <vListInsert+0x28>
=======
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e002      	b.n	8004eea <vListInsert+0x2e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d2f6      	bcs.n	8004ee4 <vListInsert+0x28>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
=======
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <uxListRemove>:
=======
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <uxListRemove>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6892      	ldr	r2, [r2, #8]
 8004c80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6852      	ldr	r2, [r2, #4]
 8004c8a:	605a      	str	r2, [r3, #4]
=======
 8004f2e:	b480      	push	{r7}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6852      	ldr	r2, [r2, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d103      	bne.n	8004c9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
=======
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d103      	bne.n	8004f62 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1e5a      	subs	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <xTaskCreateStatic>:
=======
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	1e5a      	subs	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <xTaskCreateStatic>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b08e      	sub	sp, #56	; 0x38
 8004cc2:	af04      	add	r7, sp, #16
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
=======
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b08e      	sub	sp, #56	; 0x38
 8004f86:	af04      	add	r7, sp, #16
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10a      	bne.n	8004ce8 <xTaskCreateStatic+0x2a>
=======
 8004f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <xTaskCreateStatic+0x28>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8004cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	e7fe      	b.n	8004ce6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xTaskCreateStatic+0x46>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	61fb      	str	r3, [r7, #28]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xTaskCreateStatic+0x44>
=======
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	e7fe      	b.n	8004fa8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <xTaskCreateStatic+0x42>
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	e7fe      	b.n	8004fc2 <xTaskCreateStatic+0x40>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 8004d04:	2354      	movs	r3, #84	; 0x54
 8004d06:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b54      	cmp	r3, #84	; 0x54
 8004d0c:	d00a      	beq.n	8004d24 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	61bb      	str	r3, [r7, #24]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d24:	693b      	ldr	r3, [r7, #16]
=======
 8004fc4:	2354      	movs	r3, #84	; 0x54
 8004fc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b54      	cmp	r3, #84	; 0x54
 8004fcc:	d009      	beq.n	8004fe2 <xTaskCreateStatic+0x60>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	e7fe      	b.n	8004fe0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fe2:	693b      	ldr	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 8004d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01e      	beq.n	8004d6a <xTaskCreateStatic+0xac>
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01b      	beq.n	8004d6a <xTaskCreateStatic+0xac>
=======
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d01e      	beq.n	8005028 <xTaskCreateStatic+0xa6>
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <xTaskCreateStatic+0xa6>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8004d44:	2300      	movs	r3, #0
 8004d46:	9303      	str	r3, [sp, #12]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	9302      	str	r3, [sp, #8]
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f850 	bl	8004e02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d64:	f000 f8d4 	bl	8004f10 <prvAddNewTaskToReadyList>
 8004d68:	e001      	b.n	8004d6e <xTaskCreateStatic+0xb0>
=======
 8005002:	2300      	movs	r3, #0
 8005004:	9303      	str	r3, [sp, #12]
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	9302      	str	r3, [sp, #8]
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f850 	bl	80050c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005022:	f000 f8d3 	bl	80051cc <prvAddNewTaskToReadyList>
 8005026:	e001      	b.n	800502c <xTaskCreateStatic+0xaa>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d6e:	697b      	ldr	r3, [r7, #20]
	}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3728      	adds	r7, #40	; 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <xTaskCreate>:
=======
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800502c:	697b      	ldr	r3, [r7, #20]
	}
 800502e:	4618      	mov	r0, r3
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <xTaskCreate>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08c      	sub	sp, #48	; 0x30
 8004d7c:	af04      	add	r7, sp, #16
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
=======
 8005036:	b580      	push	{r7, lr}
 8005038:	b08c      	sub	sp, #48	; 0x30
 800503a:	af04      	add	r7, sp, #16
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fec3 	bl	8005b18 <pvPortMalloc>
 8004d92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d9a:	2054      	movs	r0, #84	; 0x54
 8004d9c:	f000 febc 	bl	8005b18 <pvPortMalloc>
 8004da0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
 8004dae:	e005      	b.n	8004dbc <xTaskCreate+0x44>
=======
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4618      	mov	r0, r3
 800504c:	f000 feb2 	bl	8005db4 <pvPortMalloc>
 8005050:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005058:	2054      	movs	r0, #84	; 0x54
 800505a:	f000 feab 	bl	8005db4 <pvPortMalloc>
 800505e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
 800506c:	e005      	b.n	800507a <xTaskCreate+0x44>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 8004db0:	6978      	ldr	r0, [r7, #20]
 8004db2:	f000 ff75 	bl	8005ca0 <vPortFree>
 8004db6:	e001      	b.n	8004dbc <xTaskCreate+0x44>
=======
 800506e:	6978      	ldr	r0, [r7, #20]
 8005070:	f000 ff62 	bl	8005f38 <vPortFree>
 8005074:	e001      	b.n	800507a <xTaskCreate+0x44>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
=======
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d017      	beq.n	8004df2 <xTaskCreate+0x7a>
=======
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d017      	beq.n	80050b0 <xTaskCreate+0x7a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	9302      	str	r3, [sp, #8]
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	9301      	str	r3, [sp, #4]
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f80e 	bl	8004e02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004de6:	69f8      	ldr	r0, [r7, #28]
 8004de8:	f000 f892 	bl	8004f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dec:	2301      	movs	r3, #1
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e002      	b.n	8004df8 <xTaskCreate+0x80>
=======
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	2300      	movs	r3, #0
 800508c:	9303      	str	r3, [sp, #12]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	9302      	str	r3, [sp, #8]
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f80e 	bl	80050c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a4:	69f8      	ldr	r0, [r7, #28]
 80050a6:	f000 f891 	bl	80051cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050aa:	2301      	movs	r3, #1
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e002      	b.n	80050b6 <xTaskCreate+0x80>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 8004df2:	f04f 33ff 	mov.w	r3, #4294967295
 8004df6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004df8:	69bb      	ldr	r3, [r7, #24]
	}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <prvInitialiseNewTask>:
=======
 80050b0:	f04f 33ff 	mov.w	r3, #4294967295
 80050b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050b6:	69bb      	ldr	r3, [r7, #24]
	}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3720      	adds	r7, #32
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <prvInitialiseNewTask>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b088      	sub	sp, #32
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]
=======
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	f023 0307 	bic.w	r3, r3, #7
 8004e28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	617b      	str	r3, [r7, #20]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <prvInitialiseNewTask+0x46>
=======
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050d8:	3b01      	subs	r3, #1
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d009      	beq.n	8005106 <prvInitialiseNewTask+0x46>
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e7fe      	b.n	8005104 <prvInitialiseNewTask+0x44>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01f      	beq.n	8004e90 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e012      	b.n	8004e7c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	7819      	ldrb	r1, [r3, #0]
 8004e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	3334      	adds	r3, #52	; 0x34
 8004e66:	460a      	mov	r2, r1
 8004e68:	701a      	strb	r2, [r3, #0]
=======
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01f      	beq.n	800514c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e012      	b.n	8005138 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	7819      	ldrb	r1, [r3, #0]
 800511a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	3334      	adds	r3, #52	; 0x34
 8005122:	460a      	mov	r2, r1
 8005124:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d9e9      	bls.n	8004e56 <prvInitialiseNewTask+0x54>
 8004e82:	e000      	b.n	8004e86 <prvInitialiseNewTask+0x84>
			{
				break;
 8004e84:	bf00      	nop
=======
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3301      	adds	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d9e9      	bls.n	8005112 <prvInitialiseNewTask+0x52>
 800513e:	e000      	b.n	8005142 <prvInitialiseNewTask+0x82>
			{
				break;
 8005140:	bf00      	nop
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e8e:	e003      	b.n	8004e98 <prvInitialiseNewTask+0x96>
=======
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800514a:	e003      	b.n	8005154 <prvInitialiseNewTask+0x94>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	2b06      	cmp	r3, #6
 8004e9c:	d901      	bls.n	8004ea2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	2b06      	cmp	r3, #6
 8005158:	d901      	bls.n	800515e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800515a:	2306      	movs	r3, #6
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	649a      	str	r2, [r3, #72]	; 0x48
=======
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	2200      	movs	r2, #0
 800516e:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fe6c 	bl	8004b96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fe67 	bl	8004b96 <vListInitialiseItem>
=======
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fe70 	bl	8004e5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	3318      	adds	r3, #24
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fe6b 	bl	8004e5a <vListInitialiseItem>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ecc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	f1c3 0207 	rsb	r2, r3, #7
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005188:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	f1c3 0207 	rsb	r2, r3, #7
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	2200      	movs	r2, #0
 800519e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	69b8      	ldr	r0, [r7, #24]
 8004ef2:	f000 fc05 	bl	8005700 <pxPortInitialiseStack>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	601a      	str	r2, [r3, #0]
=======
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	69b8      	ldr	r0, [r7, #24]
 80051ae:	f000 fbfd 	bl	80059ac <pxPortInitialiseStack>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <prvInitialiseNewTask+0x106>
=======
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <prvInitialiseNewTask+0x104>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	601a      	str	r2, [r3, #0]
=======
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <prvAddNewTaskToReadyList>:
=======
 80051c4:	bf00      	nop
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvAddNewTaskToReadyList>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f18:	f000 fd1c 	bl	8005954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f1c:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <prvAddNewTaskToReadyList+0xb8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <prvAddNewTaskToReadyList+0xb8>)
 8004f24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f26:	4b29      	ldr	r3, [pc, #164]	; (8004fcc <prvAddNewTaskToReadyList+0xbc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <prvAddNewTaskToReadyList+0x32>
=======
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051d4:	f000 fd12 	bl	8005bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051d8:	4b2a      	ldr	r3, [pc, #168]	; (8005284 <prvAddNewTaskToReadyList+0xb8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	4a29      	ldr	r2, [pc, #164]	; (8005284 <prvAddNewTaskToReadyList+0xb8>)
 80051e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051e2:	4b29      	ldr	r3, [pc, #164]	; (8005288 <prvAddNewTaskToReadyList+0xbc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <prvAddNewTaskToReadyList+0x32>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 8004f2e:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <prvAddNewTaskToReadyList+0xbc>)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <prvAddNewTaskToReadyList+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d110      	bne.n	8004f5e <prvAddNewTaskToReadyList+0x4e>
=======
 80051ea:	4a27      	ldr	r2, [pc, #156]	; (8005288 <prvAddNewTaskToReadyList+0xbc>)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <prvAddNewTaskToReadyList+0xb8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d110      	bne.n	800521a <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8004f3c:	f000 fabc 	bl	80054b8 <prvInitialiseTaskLists>
 8004f40:	e00d      	b.n	8004f5e <prvAddNewTaskToReadyList+0x4e>
=======
 80051f8:	f000 fab8 	bl	800576c <prvInitialiseTaskLists>
 80051fc:	e00d      	b.n	800521a <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <prvAddNewTaskToReadyList+0xc0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f4a:	4b20      	ldr	r3, [pc, #128]	; (8004fcc <prvAddNewTaskToReadyList+0xbc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d802      	bhi.n	8004f5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f58:	4a1c      	ldr	r2, [pc, #112]	; (8004fcc <prvAddNewTaskToReadyList+0xbc>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6013      	str	r3, [r2, #0]
=======
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <prvAddNewTaskToReadyList+0xc0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <prvAddNewTaskToReadyList+0xbc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	429a      	cmp	r2, r3
 8005212:	d802      	bhi.n	800521a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005214:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <prvAddNewTaskToReadyList+0xbc>)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 8004f5e:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <prvAddNewTaskToReadyList+0xc4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <prvAddNewTaskToReadyList+0xc4>)
 8004f66:	6013      	str	r3, [r2, #0]
=======
 800521a:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <prvAddNewTaskToReadyList+0xc4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3301      	adds	r3, #1
 8005220:	4a1b      	ldr	r2, [pc, #108]	; (8005290 <prvAddNewTaskToReadyList+0xc4>)
 8005222:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	409a      	lsls	r2, r3
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <prvAddNewTaskToReadyList+0xc8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <prvAddNewTaskToReadyList+0xc8>)
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <prvAddNewTaskToReadyList+0xcc>)
 8004f88:	441a      	add	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f7ff fe0d 	bl	8004bb0 <vListInsertEnd>
=======
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	2201      	movs	r2, #1
 800522a:	409a      	lsls	r2, r3
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <prvAddNewTaskToReadyList+0xc8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4313      	orrs	r3, r2
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <prvAddNewTaskToReadyList+0xc8>)
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4a15      	ldr	r2, [pc, #84]	; (8005298 <prvAddNewTaskToReadyList+0xcc>)
 8005244:	441a      	add	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7ff fe11 	bl	8004e74 <vListInsertEnd>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004f96:	f000 fd0d 	bl	80059b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <prvAddNewTaskToReadyList+0xc0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <prvAddNewTaskToReadyList+0xb0>
=======
 8005252:	f000 fd01 	bl	8005c58 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <prvAddNewTaskToReadyList+0xc0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <prvAddNewTaskToReadyList+0xb0>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <prvAddNewTaskToReadyList+0xbc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d207      	bcs.n	8004fc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <prvAddNewTaskToReadyList+0xd0>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
=======
 800525e:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <prvAddNewTaskToReadyList+0xbc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d207      	bcs.n	800527c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <prvAddNewTaskToReadyList+0xd0>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	f3bf 8f6f 	isb	sy
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200003ec 	.word	0x200003ec
 8004fcc:	200002ec 	.word	0x200002ec
 8004fd0:	200003f8 	.word	0x200003f8
 8004fd4:	20000408 	.word	0x20000408
 8004fd8:	200003f4 	.word	0x200003f4
 8004fdc:	200002f0 	.word	0x200002f0
 8004fe0:	e000ed04 	.word	0xe000ed04

08004fe4 <vTaskDelay>:
=======
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	200003e8 	.word	0x200003e8
 8005288:	200002e8 	.word	0x200002e8
 800528c:	200003f4 	.word	0x200003f4
 8005290:	20000404 	.word	0x20000404
 8005294:	200003f0 	.word	0x200003f0
 8005298:	200002ec 	.word	0x200002ec
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <vTaskDelay>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d017      	beq.n	8005026 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <vTaskDelay+0x60>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <vTaskDelay+0x30>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60bb      	str	r3, [r7, #8]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005014:	f000 f87a 	bl	800510c <vTaskSuspendAll>
=======
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d016      	beq.n	80052e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <vTaskDelay+0x60>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <vTaskDelay+0x2e>
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	e7fe      	b.n	80052cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80052ce:	f000 f879 	bl	80053c4 <vTaskSuspendAll>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 8005018:	2100      	movs	r1, #0
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fb0a 	bl	8005634 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005020:	f000 f882 	bl	8005128 <xTaskResumeAll>
 8005024:	60f8      	str	r0, [r7, #12]
=======
 80052d2:	2100      	movs	r1, #0
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fb03 	bl	80058e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052da:	f000 f881 	bl	80053e0 <xTaskResumeAll>
 80052de:	60f8      	str	r0, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <vTaskDelay+0x64>)
 800502e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	f3bf 8f6f 	isb	sy
=======
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <vTaskDelay+0x64>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000414 	.word	0x20000414
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <vTaskStartScheduler>:
=======
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000410 	.word	0x20000410
 8005304:	e000ed04 	.word	0xe000ed04

08005308 <vTaskStartScheduler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800504c:	b580      	push	{r7, lr}
 800504e:	b08a      	sub	sp, #40	; 0x28
 8005050:	af04      	add	r7, sp, #16
=======
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af04      	add	r7, sp, #16
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]
=======
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800505a:	463a      	mov	r2, r7
 800505c:	1d39      	adds	r1, r7, #4
 800505e:	f107 0308 	add.w	r3, r7, #8
 8005062:	4618      	mov	r0, r3
 8005064:	f7fb fd6e 	bl	8000b44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	9202      	str	r2, [sp, #8]
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	2300      	movs	r3, #0
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	460a      	mov	r2, r1
 800507a:	491e      	ldr	r1, [pc, #120]	; (80050f4 <vTaskStartScheduler+0xa8>)
 800507c:	481e      	ldr	r0, [pc, #120]	; (80050f8 <vTaskStartScheduler+0xac>)
 800507e:	f7ff fe1e 	bl	8004cbe <xTaskCreateStatic>
 8005082:	4603      	mov	r3, r0
 8005084:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <vTaskStartScheduler+0xb0>)
 8005086:	6013      	str	r3, [r2, #0]
=======
 8005316:	463a      	mov	r2, r7
 8005318:	1d39      	adds	r1, r7, #4
 800531a:	f107 0308 	add.w	r3, r7, #8
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb fe9c 	bl	800105c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	9202      	str	r2, [sp, #8]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	2300      	movs	r3, #0
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	2300      	movs	r3, #0
 8005334:	460a      	mov	r2, r1
 8005336:	491d      	ldr	r1, [pc, #116]	; (80053ac <vTaskStartScheduler+0xa4>)
 8005338:	481d      	ldr	r0, [pc, #116]	; (80053b0 <vTaskStartScheduler+0xa8>)
 800533a:	f7ff fe22 	bl	8004f82 <xTaskCreateStatic>
 800533e:	4602      	mov	r2, r0
 8005340:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <vTaskStartScheduler+0xac>)
 8005342:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 8005088:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <vTaskStartScheduler+0xb0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005090:	2301      	movs	r3, #1
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	e001      	b.n	800509a <vTaskStartScheduler+0x4e>
=======
 8005344:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <vTaskStartScheduler+0xac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800534c:	2301      	movs	r3, #1
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e001      	b.n	8005356 <vTaskStartScheduler+0x4e>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
=======
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d116      	bne.n	80050ce <vTaskStartScheduler+0x82>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	613b      	str	r3, [r7, #16]
}
 80050b2:	bf00      	nop
=======
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d115      	bne.n	8005388 <vTaskStartScheduler+0x80>
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	613b      	str	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <vTaskStartScheduler+0xb4>)
 80050b6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <vTaskStartScheduler+0xb8>)
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <vTaskStartScheduler+0xbc>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
=======
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <vTaskStartScheduler+0xb0>)
 8005370:	f04f 32ff 	mov.w	r2, #4294967295
 8005374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <vTaskStartScheduler+0xb4>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800537c:	4b10      	ldr	r3, [pc, #64]	; (80053c0 <vTaskStartScheduler+0xb8>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 80050c8:	f000 fba2 	bl	8005810 <xPortStartScheduler>
=======
 8005382:	f000 fb9d 	bl	8005ac0 <xPortStartScheduler>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 80050cc:	e00e      	b.n	80050ec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d10a      	bne.n	80050ec <vTaskStartScheduler+0xa0>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60fb      	str	r3, [r7, #12]
}
 80050e8:	bf00      	nop
 80050ea:	e7fe      	b.n	80050ea <vTaskStartScheduler+0x9e>
}
 80050ec:	bf00      	nop
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	08006f60 	.word	0x08006f60
 80050f8:	08005489 	.word	0x08005489
 80050fc:	20000410 	.word	0x20000410
 8005100:	2000040c 	.word	0x2000040c
 8005104:	200003f8 	.word	0x200003f8
 8005108:	200003f0 	.word	0x200003f0

0800510c <vTaskSuspendAll>:
=======
 8005386:	e00d      	b.n	80053a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d109      	bne.n	80053a4 <vTaskStartScheduler+0x9c>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e7fe      	b.n	80053a2 <vTaskStartScheduler+0x9a>
}
 80053a4:	bf00      	nop
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	08007128 	.word	0x08007128
 80053b0:	0800573d 	.word	0x0800573d
 80053b4:	2000040c 	.word	0x2000040c
 80053b8:	20000408 	.word	0x20000408
 80053bc:	200003f4 	.word	0x200003f4
 80053c0:	200003ec 	.word	0x200003ec

080053c4 <vTaskSuspendAll>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
=======
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <vTaskSuspendAll+0x18>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a03      	ldr	r2, [pc, #12]	; (8005124 <vTaskSuspendAll+0x18>)
 8005118:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	20000414 	.word	0x20000414

08005128 <xTaskResumeAll>:
=======
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <vTaskSuspendAll+0x18>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	4a03      	ldr	r2, [pc, #12]	; (80053dc <vTaskSuspendAll+0x18>)
 80053d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	20000410 	.word	0x20000410

080053e0 <xTaskResumeAll>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
=======
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 8005136:	4b41      	ldr	r3, [pc, #260]	; (800523c <xTaskResumeAll+0x114>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <xTaskResumeAll+0x2c>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	603b      	str	r3, [r7, #0]
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <xTaskResumeAll+0x2a>
=======
 80053ee:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <xTaskResumeAll+0x114>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <xTaskResumeAll+0x2a>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	e7fe      	b.n	8005408 <xTaskResumeAll+0x28>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8005154:	f000 fbfe 	bl	8005954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005158:	4b38      	ldr	r3, [pc, #224]	; (800523c <xTaskResumeAll+0x114>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a37      	ldr	r2, [pc, #220]	; (800523c <xTaskResumeAll+0x114>)
 8005160:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <xTaskResumeAll+0x114>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d161      	bne.n	800522e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <xTaskResumeAll+0x118>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d05d      	beq.n	800522e <xTaskResumeAll+0x106>
=======
 800540a:	f000 fbf7 	bl	8005bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800540e:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <xTaskResumeAll+0x114>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3b01      	subs	r3, #1
 8005414:	4a37      	ldr	r2, [pc, #220]	; (80054f4 <xTaskResumeAll+0x114>)
 8005416:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005418:	4b36      	ldr	r3, [pc, #216]	; (80054f4 <xTaskResumeAll+0x114>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d161      	bne.n	80054e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005420:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <xTaskResumeAll+0x118>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d05d      	beq.n	80054e4 <xTaskResumeAll+0x104>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 8005172:	e02e      	b.n	80051d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005174:	4b33      	ldr	r3, [pc, #204]	; (8005244 <xTaskResumeAll+0x11c>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3318      	adds	r3, #24
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fd72 	bl	8004c6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3304      	adds	r3, #4
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff fd6d 	bl	8004c6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	2201      	movs	r2, #1
 8005196:	409a      	lsls	r2, r3
 8005198:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <xTaskResumeAll+0x120>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	4a2a      	ldr	r2, [pc, #168]	; (8005248 <xTaskResumeAll+0x120>)
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4a27      	ldr	r2, [pc, #156]	; (800524c <xTaskResumeAll+0x124>)
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4619      	mov	r1, r3
 80051b8:	4610      	mov	r0, r2
 80051ba:	f7ff fcf9 	bl	8004bb0 <vListInsertEnd>
=======
 8005428:	e02e      	b.n	8005488 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542a:	4b34      	ldr	r3, [pc, #208]	; (80054fc <xTaskResumeAll+0x11c>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3318      	adds	r3, #24
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fd79 	bl	8004f2e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3304      	adds	r3, #4
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fd74 	bl	8004f2e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <xTaskResumeAll+0x120>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <xTaskResumeAll+0x120>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a27      	ldr	r2, [pc, #156]	; (8005504 <xTaskResumeAll+0x124>)
 8005466:	441a      	add	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7ff fd00 	bl	8004e74 <vListInsertEnd>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <xTaskResumeAll+0x128>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d302      	bcc.n	80051d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051cc:	4b21      	ldr	r3, [pc, #132]	; (8005254 <xTaskResumeAll+0x12c>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051d2:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <xTaskResumeAll+0x11c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1cc      	bne.n	8005174 <xTaskResumeAll+0x4c>
=======
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4b23      	ldr	r3, [pc, #140]	; (8005508 <xTaskResumeAll+0x128>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <xTaskResumeAll+0x12c>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005488:	4b1c      	ldr	r3, [pc, #112]	; (80054fc <xTaskResumeAll+0x11c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1cc      	bne.n	800542a <xTaskResumeAll+0x4a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <xTaskResumeAll+0xbc>
=======
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <xTaskResumeAll+0xba>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 80051e0:	f000 fa08 	bl	80055f4 <prvResetNextTaskUnblockTime>
=======
 8005496:	f000 fa03 	bl	80058a0 <prvResetNextTaskUnblockTime>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <xTaskResumeAll+0x130>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d010      	beq.n	8005212 <xTaskResumeAll+0xea>
=======
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <xTaskResumeAll+0x130>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d010      	beq.n	80054c8 <xTaskResumeAll+0xe8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 80051f0:	f000 f836 	bl	8005260 <xTaskIncrementTick>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051fa:	4b16      	ldr	r3, [pc, #88]	; (8005254 <xTaskResumeAll+0x12c>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
=======
 80054a6:	f000 f837 	bl	8005518 <xTaskIncrementTick>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80054b0:	4b16      	ldr	r3, [pc, #88]	; (800550c <xTaskResumeAll+0x12c>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< HEAD
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3b01      	subs	r3, #1
 8005204:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <xTaskResumeAll+0x130>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
=======
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f1      	bne.n	80054a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80054c2:	4b13      	ldr	r3, [pc, #76]	; (8005510 <xTaskResumeAll+0x130>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <xTaskResumeAll+0x12c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <xTaskResumeAll+0x106>
=======
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <xTaskResumeAll+0x12c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <xTaskResumeAll+0x104>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800521a:	2301      	movs	r3, #1
 800521c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800521e:	4b0f      	ldr	r3, [pc, #60]	; (800525c <xTaskResumeAll+0x134>)
 8005220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	f3bf 8f6f 	isb	sy
=======
 80054d0:	2301      	movs	r3, #1
 80054d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054d4:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <xTaskResumeAll+0x134>)
 80054d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	f3bf 8f6f 	isb	sy
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800522e:	f000 fbc1 	bl	80059b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005232:	68bb      	ldr	r3, [r7, #8]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000414 	.word	0x20000414
 8005240:	200003ec 	.word	0x200003ec
 8005244:	200003ac 	.word	0x200003ac
 8005248:	200003f4 	.word	0x200003f4
 800524c:	200002f0 	.word	0x200002f0
 8005250:	200002ec 	.word	0x200002ec
 8005254:	20000400 	.word	0x20000400
 8005258:	200003fc 	.word	0x200003fc
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <xTaskIncrementTick>:
=======
 80054e4:	f000 fbb8 	bl	8005c58 <vPortExitCritical>

	return xAlreadyYielded;
 80054e8:	68bb      	ldr	r3, [r7, #8]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000410 	.word	0x20000410
 80054f8:	200003e8 	.word	0x200003e8
 80054fc:	200003a8 	.word	0x200003a8
 8005500:	200003f0 	.word	0x200003f0
 8005504:	200002ec 	.word	0x200002ec
 8005508:	200002e8 	.word	0x200002e8
 800550c:	200003fc 	.word	0x200003fc
 8005510:	200003f8 	.word	0x200003f8
 8005514:	e000ed04 	.word	0xe000ed04

08005518 <xTaskIncrementTick>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
=======
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800526a:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <xTaskIncrementTick+0x144>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 8088 	bne.w	8005384 <xTaskIncrementTick+0x124>
=======
 8005522:	4b4e      	ldr	r3, [pc, #312]	; (800565c <xTaskIncrementTick+0x144>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f040 8087 	bne.w	800563a <xTaskIncrementTick+0x122>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 8005274:	4b4c      	ldr	r3, [pc, #304]	; (80053a8 <xTaskIncrementTick+0x148>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
=======
 800552c:	4b4c      	ldr	r3, [pc, #304]	; (8005660 <xTaskIncrementTick+0x148>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3301      	adds	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 800527c:	4a4a      	ldr	r2, [pc, #296]	; (80053a8 <xTaskIncrementTick+0x148>)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d120      	bne.n	80052ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005288:	4b48      	ldr	r3, [pc, #288]	; (80053ac <xTaskIncrementTick+0x14c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	603b      	str	r3, [r7, #0]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xTaskIncrementTick+0x46>
 80052a8:	4b40      	ldr	r3, [pc, #256]	; (80053ac <xTaskIncrementTick+0x14c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	4b40      	ldr	r3, [pc, #256]	; (80053b0 <xTaskIncrementTick+0x150>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a3e      	ldr	r2, [pc, #248]	; (80053ac <xTaskIncrementTick+0x14c>)
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4a3e      	ldr	r2, [pc, #248]	; (80053b0 <xTaskIncrementTick+0x150>)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b3d      	ldr	r3, [pc, #244]	; (80053b4 <xTaskIncrementTick+0x154>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3301      	adds	r3, #1
 80052c2:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <xTaskIncrementTick+0x154>)
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	f000 f995 	bl	80055f4 <prvResetNextTaskUnblockTime>
=======
 8005534:	4a4a      	ldr	r2, [pc, #296]	; (8005660 <xTaskIncrementTick+0x148>)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d11f      	bne.n	8005580 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005540:	4b48      	ldr	r3, [pc, #288]	; (8005664 <xTaskIncrementTick+0x14c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <xTaskIncrementTick+0x46>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	e7fe      	b.n	800555c <xTaskIncrementTick+0x44>
 800555e:	4b41      	ldr	r3, [pc, #260]	; (8005664 <xTaskIncrementTick+0x14c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	4b40      	ldr	r3, [pc, #256]	; (8005668 <xTaskIncrementTick+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3e      	ldr	r2, [pc, #248]	; (8005664 <xTaskIncrementTick+0x14c>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	4a3e      	ldr	r2, [pc, #248]	; (8005668 <xTaskIncrementTick+0x150>)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	4b3e      	ldr	r3, [pc, #248]	; (800566c <xTaskIncrementTick+0x154>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	4a3c      	ldr	r2, [pc, #240]	; (800566c <xTaskIncrementTick+0x154>)
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	f000 f990 	bl	80058a0 <prvResetNextTaskUnblockTime>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <xTaskIncrementTick+0x158>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d348      	bcc.n	8005366 <xTaskIncrementTick+0x106>
=======
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <xTaskIncrementTick+0x158>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d348      	bcc.n	800561c <xTaskIncrementTick+0x104>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 80052d4:	4b35      	ldr	r3, [pc, #212]	; (80053ac <xTaskIncrementTick+0x14c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <xTaskIncrementTick+0x88>
=======
 800558a:	4b36      	ldr	r3, [pc, #216]	; (8005664 <xTaskIncrementTick+0x14c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <xTaskIncrementTick+0x86>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <xTaskIncrementTick+0x158>)
 80052e0:	f04f 32ff 	mov.w	r2, #4294967295
 80052e4:	601a      	str	r2, [r3, #0]
					break;
 80052e6:	e03e      	b.n	8005366 <xTaskIncrementTick+0x106>
=======
 8005594:	4b36      	ldr	r3, [pc, #216]	; (8005670 <xTaskIncrementTick+0x158>)
 8005596:	f04f 32ff 	mov.w	r2, #4294967295
 800559a:	601a      	str	r2, [r3, #0]
					break;
 800559c:	e03e      	b.n	800561c <xTaskIncrementTick+0x104>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 80052e8:	4b30      	ldr	r3, [pc, #192]	; (80053ac <xTaskIncrementTick+0x14c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d203      	bcs.n	8005308 <xTaskIncrementTick+0xa8>
=======
 800559e:	4b31      	ldr	r3, [pc, #196]	; (8005664 <xTaskIncrementTick+0x14c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d203      	bcs.n	80055be <xTaskIncrementTick+0xa6>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8005300:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <xTaskIncrementTick+0x158>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005306:	e02e      	b.n	8005366 <xTaskIncrementTick+0x106>
=======
 80055b6:	4a2e      	ldr	r2, [pc, #184]	; (8005670 <xTaskIncrementTick+0x158>)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055bc:	e02e      	b.n	800561c <xTaskIncrementTick+0x104>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	3304      	adds	r3, #4
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fcac 	bl	8004c6a <uxListRemove>
=======
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fcb3 	bl	8004f2e <uxListRemove>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	2b00      	cmp	r3, #0
 8005318:	d004      	beq.n	8005324 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	3318      	adds	r3, #24
 800531e:	4618      	mov	r0, r3
 8005320:	f7ff fca3 	bl	8004c6a <uxListRemove>
=======
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	3318      	adds	r3, #24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fcaa 	bl	8004f2e <uxListRemove>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	2201      	movs	r2, #1
 800532a:	409a      	lsls	r2, r3
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <xTaskIncrementTick+0x15c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4313      	orrs	r3, r2
 8005332:	4a22      	ldr	r2, [pc, #136]	; (80053bc <xTaskIncrementTick+0x15c>)
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <xTaskIncrementTick+0x160>)
 8005344:	441a      	add	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7ff fc2f 	bl	8004bb0 <vListInsertEnd>
=======
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	2201      	movs	r2, #1
 80055e0:	409a      	lsls	r2, r3
 80055e2:	4b24      	ldr	r3, [pc, #144]	; (8005674 <xTaskIncrementTick+0x15c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	4a22      	ldr	r2, [pc, #136]	; (8005674 <xTaskIncrementTick+0x15c>)
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <xTaskIncrementTick+0x160>)
 80055fa:	441a      	add	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7ff fc36 	bl	8004e74 <vListInsertEnd>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <xTaskIncrementTick+0x164>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d3b9      	bcc.n	80052d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005360:	2301      	movs	r3, #1
 8005362:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005364:	e7b6      	b.n	80052d4 <xTaskIncrementTick+0x74>
=======
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4b1b      	ldr	r3, [pc, #108]	; (800567c <xTaskIncrementTick+0x164>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	429a      	cmp	r2, r3
 8005614:	d3b9      	bcc.n	800558a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800561a:	e7b6      	b.n	800558a <xTaskIncrementTick+0x72>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8005366:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <xTaskIncrementTick+0x164>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4914      	ldr	r1, [pc, #80]	; (80053c0 <xTaskIncrementTick+0x160>)
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d907      	bls.n	800538e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e004      	b.n	800538e <xTaskIncrementTick+0x12e>
=======
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <xTaskIncrementTick+0x164>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005622:	4915      	ldr	r1, [pc, #84]	; (8005678 <xTaskIncrementTick+0x160>)
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d907      	bls.n	8005644 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e004      	b.n	8005644 <xTaskIncrementTick+0x12c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <xTaskIncrementTick+0x168>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3301      	adds	r3, #1
 800538a:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <xTaskIncrementTick+0x168>)
 800538c:	6013      	str	r3, [r2, #0]
=======
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <xTaskIncrementTick+0x168>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a0f      	ldr	r2, [pc, #60]	; (8005680 <xTaskIncrementTick+0x168>)
 8005642:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <xTaskIncrementTick+0x16c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005396:	2301      	movs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
=======
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <xTaskIncrementTick+0x16c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< HEAD
 800539a:	697b      	ldr	r3, [r7, #20]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000414 	.word	0x20000414
 80053a8:	200003f0 	.word	0x200003f0
 80053ac:	200003a4 	.word	0x200003a4
 80053b0:	200003a8 	.word	0x200003a8
 80053b4:	20000404 	.word	0x20000404
 80053b8:	2000040c 	.word	0x2000040c
 80053bc:	200003f4 	.word	0x200003f4
 80053c0:	200002f0 	.word	0x200002f0
 80053c4:	200002ec 	.word	0x200002ec
 80053c8:	200003fc 	.word	0x200003fc
 80053cc:	20000400 	.word	0x20000400

080053d0 <vTaskSwitchContext>:
=======
 8005650:	697b      	ldr	r3, [r7, #20]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000410 	.word	0x20000410
 8005660:	200003ec 	.word	0x200003ec
 8005664:	200003a0 	.word	0x200003a0
 8005668:	200003a4 	.word	0x200003a4
 800566c:	20000400 	.word	0x20000400
 8005670:	20000408 	.word	0x20000408
 8005674:	200003f0 	.word	0x200003f0
 8005678:	200002ec 	.word	0x200002ec
 800567c:	200002e8 	.word	0x200002e8
 8005680:	200003f8 	.word	0x200003f8
 8005684:	200003fc 	.word	0x200003fc

08005688 <vTaskSwitchContext>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <vTaskSwitchContext+0xa4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <vTaskSwitchContext+0x16>
=======
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <vTaskSwitchContext+0xa0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <vTaskSwitchContext+0x16>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <vTaskSwitchContext+0xa8>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
=======
 8005696:	4b25      	ldr	r3, [pc, #148]	; (800572c <vTaskSwitchContext+0xa4>)
 8005698:	2201      	movs	r2, #1
 800569a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 80053e4:	e03f      	b.n	8005466 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <vTaskSwitchContext+0xa8>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ec:	4b23      	ldr	r3, [pc, #140]	; (800547c <vTaskSwitchContext+0xac>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	fab3 f383 	clz	r3, r3
 80053f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	f1c3 031f 	rsb	r3, r3, #31
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	491f      	ldr	r1, [pc, #124]	; (8005480 <vTaskSwitchContext+0xb0>)
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	607b      	str	r3, [r7, #4]
}
 8005428:	bf00      	nop
 800542a:	e7fe      	b.n	800542a <vTaskSwitchContext+0x5a>
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <vTaskSwitchContext+0xb0>)
 8005438:	4413      	add	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3308      	adds	r3, #8
 800544e:	429a      	cmp	r2, r3
 8005450:	d104      	bne.n	800545c <vTaskSwitchContext+0x8c>
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4a08      	ldr	r2, [pc, #32]	; (8005484 <vTaskSwitchContext+0xb4>)
 8005464:	6013      	str	r3, [r2, #0]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000414 	.word	0x20000414
 8005478:	20000400 	.word	0x20000400
 800547c:	200003f4 	.word	0x200003f4
 8005480:	200002f0 	.word	0x200002f0
 8005484:	200002ec 	.word	0x200002ec

08005488 <prvIdleTask>:
=======
 800569c:	e03e      	b.n	800571c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800569e:	4b23      	ldr	r3, [pc, #140]	; (800572c <vTaskSwitchContext+0xa4>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a4:	4b22      	ldr	r3, [pc, #136]	; (8005730 <vTaskSwitchContext+0xa8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	fab3 f383 	clz	r3, r3
 80056b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80056b2:	7afb      	ldrb	r3, [r7, #11]
 80056b4:	f1c3 031f 	rsb	r3, r3, #31
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	491e      	ldr	r1, [pc, #120]	; (8005734 <vTaskSwitchContext+0xac>)
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	e7fe      	b.n	80056e0 <vTaskSwitchContext+0x58>
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a11      	ldr	r2, [pc, #68]	; (8005734 <vTaskSwitchContext+0xac>)
 80056ee:	4413      	add	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	3308      	adds	r3, #8
 8005704:	429a      	cmp	r2, r3
 8005706:	d104      	bne.n	8005712 <vTaskSwitchContext+0x8a>
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a07      	ldr	r2, [pc, #28]	; (8005738 <vTaskSwitchContext+0xb0>)
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000410 	.word	0x20000410
 800572c:	200003fc 	.word	0x200003fc
 8005730:	200003f0 	.word	0x200003f0
 8005734:	200002ec 	.word	0x200002ec
 8005738:	200002e8 	.word	0x200002e8

0800573c <prvIdleTask>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
=======
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 8005490:	f000 f852 	bl	8005538 <prvCheckTasksWaitingTermination>
=======
 8005744:	f000 f852 	bl	80057ec <prvCheckTasksWaitingTermination>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <prvIdleTask+0x28>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d9f9      	bls.n	8005490 <prvIdleTask+0x8>
			{
				taskYIELD();
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <prvIdleTask+0x2c>)
 800549e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054ac:	e7f0      	b.n	8005490 <prvIdleTask+0x8>
 80054ae:	bf00      	nop
 80054b0:	200002f0 	.word	0x200002f0
 80054b4:	e000ed04 	.word	0xe000ed04

080054b8 <prvInitialiseTaskLists>:
=======
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <prvIdleTask+0x28>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d9f9      	bls.n	8005744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005750:	4b05      	ldr	r3, [pc, #20]	; (8005768 <prvIdleTask+0x2c>)
 8005752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005760:	e7f0      	b.n	8005744 <prvIdleTask+0x8>
 8005762:	bf00      	nop
 8005764:	200002ec 	.word	0x200002ec
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <prvInitialiseTaskLists>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054be:	2300      	movs	r3, #0
 80054c0:	607b      	str	r3, [r7, #4]
 80054c2:	e00c      	b.n	80054de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a12      	ldr	r2, [pc, #72]	; (8005518 <prvInitialiseTaskLists+0x60>)
 80054d0:	4413      	add	r3, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff fb3f 	bl	8004b56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3301      	adds	r3, #1
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b06      	cmp	r3, #6
 80054e2:	d9ef      	bls.n	80054c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054e4:	480d      	ldr	r0, [pc, #52]	; (800551c <prvInitialiseTaskLists+0x64>)
 80054e6:	f7ff fb36 	bl	8004b56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054ea:	480d      	ldr	r0, [pc, #52]	; (8005520 <prvInitialiseTaskLists+0x68>)
 80054ec:	f7ff fb33 	bl	8004b56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054f0:	480c      	ldr	r0, [pc, #48]	; (8005524 <prvInitialiseTaskLists+0x6c>)
 80054f2:	f7ff fb30 	bl	8004b56 <vListInitialise>
=======
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
 8005776:	e00c      	b.n	8005792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4a12      	ldr	r2, [pc, #72]	; (80057cc <prvInitialiseTaskLists+0x60>)
 8005784:	4413      	add	r3, r2
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fb47 	bl	8004e1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3301      	adds	r3, #1
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b06      	cmp	r3, #6
 8005796:	d9ef      	bls.n	8005778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005798:	480d      	ldr	r0, [pc, #52]	; (80057d0 <prvInitialiseTaskLists+0x64>)
 800579a:	f7ff fb3e 	bl	8004e1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800579e:	480d      	ldr	r0, [pc, #52]	; (80057d4 <prvInitialiseTaskLists+0x68>)
 80057a0:	f7ff fb3b 	bl	8004e1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057a4:	480c      	ldr	r0, [pc, #48]	; (80057d8 <prvInitialiseTaskLists+0x6c>)
 80057a6:	f7ff fb38 	bl	8004e1a <vListInitialise>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 80054f6:	480c      	ldr	r0, [pc, #48]	; (8005528 <prvInitialiseTaskLists+0x70>)
 80054f8:	f7ff fb2d 	bl	8004b56 <vListInitialise>
=======
 80057aa:	480c      	ldr	r0, [pc, #48]	; (80057dc <prvInitialiseTaskLists+0x70>)
 80057ac:	f7ff fb35 	bl	8004e1a <vListInitialise>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 80054fc:	480b      	ldr	r0, [pc, #44]	; (800552c <prvInitialiseTaskLists+0x74>)
 80054fe:	f7ff fb2a 	bl	8004b56 <vListInitialise>
=======
 80057b0:	480b      	ldr	r0, [pc, #44]	; (80057e0 <prvInitialiseTaskLists+0x74>)
 80057b2:	f7ff fb32 	bl	8004e1a <vListInitialise>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 8005502:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <prvInitialiseTaskLists+0x78>)
 8005504:	4a05      	ldr	r2, [pc, #20]	; (800551c <prvInitialiseTaskLists+0x64>)
 8005506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvInitialiseTaskLists+0x7c>)
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <prvInitialiseTaskLists+0x68>)
 800550c:	601a      	str	r2, [r3, #0]
}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200002f0 	.word	0x200002f0
 800551c:	2000037c 	.word	0x2000037c
 8005520:	20000390 	.word	0x20000390
 8005524:	200003ac 	.word	0x200003ac
 8005528:	200003c0 	.word	0x200003c0
 800552c:	200003d8 	.word	0x200003d8
 8005530:	200003a4 	.word	0x200003a4
 8005534:	200003a8 	.word	0x200003a8

08005538 <prvCheckTasksWaitingTermination>:
=======
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <prvInitialiseTaskLists+0x78>)
 80057b8:	4a05      	ldr	r2, [pc, #20]	; (80057d0 <prvInitialiseTaskLists+0x64>)
 80057ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <prvInitialiseTaskLists+0x7c>)
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <prvInitialiseTaskLists+0x68>)
 80057c0:	601a      	str	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200002ec 	.word	0x200002ec
 80057d0:	20000378 	.word	0x20000378
 80057d4:	2000038c 	.word	0x2000038c
 80057d8:	200003a8 	.word	0x200003a8
 80057dc:	200003bc 	.word	0x200003bc
 80057e0:	200003d4 	.word	0x200003d4
 80057e4:	200003a0 	.word	0x200003a0
 80057e8:	200003a4 	.word	0x200003a4

080057ec <prvCheckTasksWaitingTermination>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
=======
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800553e:	e019      	b.n	8005574 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005540:	f000 fa08 	bl	8005954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005544:	4b10      	ldr	r3, [pc, #64]	; (8005588 <prvCheckTasksWaitingTermination+0x50>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fb8a 	bl	8004c6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <prvCheckTasksWaitingTermination+0x54>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3b01      	subs	r3, #1
 800555c:	4a0b      	ldr	r2, [pc, #44]	; (800558c <prvCheckTasksWaitingTermination+0x54>)
 800555e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <prvCheckTasksWaitingTermination+0x58>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3b01      	subs	r3, #1
 8005566:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <prvCheckTasksWaitingTermination+0x58>)
 8005568:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800556a:	f000 fa23 	bl	80059b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f810 	bl	8005594 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <prvCheckTasksWaitingTermination+0x58>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e1      	bne.n	8005540 <prvCheckTasksWaitingTermination+0x8>
=======
 80057f2:	e019      	b.n	8005828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057f4:	f000 fa02 	bl	8005bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <prvCheckTasksWaitingTermination+0x4c>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fb92 	bl	8004f2e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800580a:	4b0c      	ldr	r3, [pc, #48]	; (800583c <prvCheckTasksWaitingTermination+0x50>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3b01      	subs	r3, #1
 8005810:	4a0a      	ldr	r2, [pc, #40]	; (800583c <prvCheckTasksWaitingTermination+0x50>)
 8005812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005814:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <prvCheckTasksWaitingTermination+0x54>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3b01      	subs	r3, #1
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <prvCheckTasksWaitingTermination+0x54>)
 800581c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800581e:	f000 fa1b 	bl	8005c58 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f80e 	bl	8005844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <prvCheckTasksWaitingTermination+0x54>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e1      	bne.n	80057f4 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200003c0 	.word	0x200003c0
 800558c:	200003ec 	.word	0x200003ec
 8005590:	200003d4 	.word	0x200003d4

08005594 <prvDeleteTCB>:
=======
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200003bc 	.word	0x200003bc
 800583c:	200003e8 	.word	0x200003e8
 8005840:	200003d0 	.word	0x200003d0

08005844 <prvDeleteTCB>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
=======
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d108      	bne.n	80055b8 <prvDeleteTCB+0x24>
=======
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005852:	2b00      	cmp	r3, #0
 8005854:	d108      	bne.n	8005868 <prvDeleteTCB+0x24>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fb78 	bl	8005ca0 <vPortFree>
				vPortFree( pxTCB );
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fb75 	bl	8005ca0 <vPortFree>
=======
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb6c 	bl	8005f38 <vPortFree>
				vPortFree( pxTCB );
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fb69 	bl	8005f38 <vPortFree>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 80055b6:	e018      	b.n	80055ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d103      	bne.n	80055ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fb6c 	bl	8005ca0 <vPortFree>
	}
 80055c8:	e00f      	b.n	80055ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d00a      	beq.n	80055ea <prvDeleteTCB+0x56>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	60fb      	str	r3, [r7, #12]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <prvDeleteTCB+0x54>
	}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <prvResetNextTaskUnblockTime>:
=======
 8005866:	e017      	b.n	8005898 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586e:	2b01      	cmp	r3, #1
 8005870:	d103      	bne.n	800587a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb60 	bl	8005f38 <vPortFree>
	}
 8005878:	e00e      	b.n	8005898 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005880:	2b02      	cmp	r3, #2
 8005882:	d009      	beq.n	8005898 <prvDeleteTCB+0x54>
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e7fe      	b.n	8005896 <prvDeleteTCB+0x52>
	}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvResetNextTaskUnblockTime>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055fa:	4b0c      	ldr	r3, [pc, #48]	; (800562c <prvResetNextTaskUnblockTime+0x38>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <prvResetNextTaskUnblockTime+0x1a>
=======
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <prvResetNextTaskUnblockTime+0x38>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <prvResetNextTaskUnblockTime+0x3c>)
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	601a      	str	r2, [r3, #0]
=======
 80058b0:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <prvResetNextTaskUnblockTime+0x3c>)
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800560c:	e008      	b.n	8005620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <prvResetNextTaskUnblockTime+0x38>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a04      	ldr	r2, [pc, #16]	; (8005630 <prvResetNextTaskUnblockTime+0x3c>)
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	200003a4 	.word	0x200003a4
 8005630:	2000040c 	.word	0x2000040c

08005634 <prvAddCurrentTaskToDelayedList>:
=======
 80058b8:	e008      	b.n	80058cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <prvResetNextTaskUnblockTime+0x38>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a04      	ldr	r2, [pc, #16]	; (80058dc <prvResetNextTaskUnblockTime+0x3c>)
 80058ca:	6013      	str	r3, [r2, #0]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	200003a0 	.word	0x200003a0
 80058dc:	20000408 	.word	0x20000408

080058e0 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800563e:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]
=======
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058ea:	4b29      	ldr	r3, [pc, #164]	; (8005990 <prvAddCurrentTaskToDelayedList+0xb0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8005644:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3304      	adds	r3, #4
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fb0d 	bl	8004c6a <uxListRemove>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <prvAddCurrentTaskToDelayedList+0x3a>
=======
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fb19 	bl	8004f2e <uxListRemove>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< HEAD
 8005656:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	2201      	movs	r2, #1
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43da      	mvns	r2, r3
 8005664:	4b21      	ldr	r3, [pc, #132]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4013      	ands	r3, r2
 800566a:	4a20      	ldr	r2, [pc, #128]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800566c:	6013      	str	r3, [r2, #0]
=======
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	2201      	movs	r2, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43da      	mvns	r2, r3
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4013      	ands	r3, r2
 8005916:	4a20      	ldr	r2, [pc, #128]	; (8005998 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005918:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d10a      	bne.n	800568c <prvAddCurrentTaskToDelayedList+0x58>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <prvAddCurrentTaskToDelayedList+0x58>
=======
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d10a      	bne.n	8005938 <prvAddCurrentTaskToDelayedList+0x58>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3304      	adds	r3, #4
 8005682:	4619      	mov	r1, r3
 8005684:	481a      	ldr	r0, [pc, #104]	; (80056f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005686:	f7ff fa93 	bl	8004bb0 <vListInsertEnd>
=======
 8005928:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <prvAddCurrentTaskToDelayedList+0xb4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	481a      	ldr	r0, [pc, #104]	; (800599c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005932:	f7ff fa9f 	bl	8004e74 <vListInsertEnd>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800568a:	e026      	b.n	80056da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d209      	bcs.n	80056b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7ff faa1 	bl	8004bf8 <vListInsert>
}
 80056b6:	e010      	b.n	80056da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056b8:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7ff fa97 	bl	8004bf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d202      	bcs.n	80056da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80056d4:	4a09      	ldr	r2, [pc, #36]	; (80056fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	6013      	str	r3, [r2, #0]
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200003f0 	.word	0x200003f0
 80056e8:	200002ec 	.word	0x200002ec
 80056ec:	200003f4 	.word	0x200003f4
 80056f0:	200003d8 	.word	0x200003d8
 80056f4:	200003a8 	.word	0x200003a8
 80056f8:	200003a4 	.word	0x200003a4
 80056fc:	2000040c 	.word	0x2000040c

08005700 <pxPortInitialiseStack>:
=======
 8005936:	e026      	b.n	8005986 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d209      	bcs.n	8005964 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005950:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3304      	adds	r3, #4
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f7ff faad 	bl	8004ebc <vListInsert>
}
 8005962:	e010      	b.n	8005986 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <prvAddCurrentTaskToDelayedList+0xb4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3304      	adds	r3, #4
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f7ff faa3 	bl	8004ebc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d202      	bcs.n	8005986 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005980:	4a09      	ldr	r2, [pc, #36]	; (80059a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	200003ec 	.word	0x200003ec
 8005994:	200002e8 	.word	0x200002e8
 8005998:	200003f0 	.word	0x200003f0
 800599c:	200003d4 	.word	0x200003d4
 80059a0:	200003a4 	.word	0x200003a4
 80059a4:	200003a0 	.word	0x200003a0
 80059a8:	20000408 	.word	0x20000408

080059ac <pxPortInitialiseStack>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
=======
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3b04      	subs	r3, #4
 8005710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b04      	subs	r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3b04      	subs	r3, #4
 800572e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005730:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <pxPortInitialiseStack+0x64>)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3b14      	subs	r3, #20
 800573a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	601a      	str	r2, [r3, #0]
=======
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3b04      	subs	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3b04      	subs	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3b04      	subs	r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059dc:	4a0c      	ldr	r2, [pc, #48]	; (8005a10 <pxPortInitialiseStack+0x64>)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	3b14      	subs	r3, #20
 80059e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3b04      	subs	r3, #4
 8005746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f06f 0202 	mvn.w	r2, #2
 800574e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3b20      	subs	r3, #32
 8005754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	08005769 	.word	0x08005769

08005768 <prvTaskExitError>:
=======
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3b04      	subs	r3, #4
 80059f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f06f 0202 	mvn.w	r2, #2
 80059fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b20      	subs	r3, #32
 8005a00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	08005a15 	.word	0x08005a15

08005a14 <prvTaskExitError>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	607b      	str	r3, [r7, #4]
=======
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <prvTaskExitError+0x54>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d00a      	beq.n	8005792 <prvTaskExitError+0x2a>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <prvTaskExitError+0x28>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60bb      	str	r3, [r7, #8]
}
 80057a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057a6:	bf00      	nop
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0fc      	beq.n	80057a8 <prvTaskExitError+0x40>
=======
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <prvTaskExitError+0x50>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d009      	beq.n	8005a3c <prvTaskExitError+0x28>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e7fe      	b.n	8005a3a <prvTaskExitError+0x26>
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a4e:	bf00      	nop
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0fc      	beq.n	8005a50 <prvTaskExitError+0x3c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <SVC_Handler>:
=======
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	2000000c 	.word	0x2000000c
	...

08005a70 <SVC_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <pxCurrentTCBConst2>)
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	6808      	ldr	r0, [r1, #0]
 80057c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	f380 8809 	msr	PSP, r0
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8811 	msr	BASEPRI, r0
 80057da:	4770      	bx	lr
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst2>:
 80057e0:	200002ec 	.word	0x200002ec
=======
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <pxCurrentTCBConst2>)
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	6808      	ldr	r0, [r1, #0]
 8005a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	f380 8809 	msr	PSP, r0
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8811 	msr	BASEPRI, r0
 8005a8a:	4770      	bx	lr
 8005a8c:	f3af 8000 	nop.w

08005a90 <pxCurrentTCBConst2>:
 8005a90:	200002e8 	.word	0x200002e8
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <prvPortStartFirstTask>:
=======
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop

08005a98 <prvPortStartFirstTask>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 80057e8:	4808      	ldr	r0, [pc, #32]	; (800580c <prvPortStartFirstTask+0x24>)
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f380 8808 	msr	MSP, r0
 80057f2:	f04f 0000 	mov.w	r0, #0
 80057f6:	f380 8814 	msr	CONTROL, r0
 80057fa:	b662      	cpsie	i
 80057fc:	b661      	cpsie	f
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	df00      	svc	0
 8005808:	bf00      	nop
=======
 8005a98:	4808      	ldr	r0, [pc, #32]	; (8005abc <prvPortStartFirstTask+0x24>)
 8005a9a:	6800      	ldr	r0, [r0, #0]
 8005a9c:	6800      	ldr	r0, [r0, #0]
 8005a9e:	f380 8808 	msr	MSP, r0
 8005aa2:	f04f 0000 	mov.w	r0, #0
 8005aa6:	f380 8814 	msr	CONTROL, r0
 8005aaa:	b662      	cpsie	i
 8005aac:	b661      	cpsie	f
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	df00      	svc	0
 8005ab8:	bf00      	nop
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800580a:	bf00      	nop
 800580c:	e000ed08 	.word	0xe000ed08

08005810 <xPortStartScheduler>:
=======
 8005aba:	bf00      	nop
 8005abc:	e000ed08 	.word	0xe000ed08

08005ac0 <xPortStartScheduler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
=======
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 8005816:	4b46      	ldr	r3, [pc, #280]	; (8005930 <xPortStartScheduler+0x120>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a46      	ldr	r2, [pc, #280]	; (8005934 <xPortStartScheduler+0x124>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10a      	bne.n	8005836 <xPortStartScheduler+0x26>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <xPortStartScheduler+0x120>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3f      	ldr	r2, [pc, #252]	; (8005938 <xPortStartScheduler+0x128>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10a      	bne.n	8005856 <xPortStartScheduler+0x46>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xPortStartScheduler+0x44>
=======
 8005ac6:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <xPortStartScheduler+0x118>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a44      	ldr	r2, [pc, #272]	; (8005bdc <xPortStartScheduler+0x11c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d109      	bne.n	8005ae4 <xPortStartScheduler+0x24>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e7fe      	b.n	8005ae2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ae4:	4b3c      	ldr	r3, [pc, #240]	; (8005bd8 <xPortStartScheduler+0x118>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a3d      	ldr	r2, [pc, #244]	; (8005be0 <xPortStartScheduler+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d109      	bne.n	8005b02 <xPortStartScheduler+0x42>
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e7fe      	b.n	8005b00 <xPortStartScheduler+0x40>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <xPortStartScheduler+0x12c>)
 8005858:	617b      	str	r3, [r7, #20]
=======
 8005b02:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <xPortStartScheduler+0x124>)
 8005b04:	617b      	str	r3, [r7, #20]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	607b      	str	r3, [r7, #4]
=======
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	22ff      	movs	r2, #255	; 0xff
 8005866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005878:	b2da      	uxtb	r2, r3
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <xPortStartScheduler+0x130>)
 800587c:	701a      	strb	r2, [r3, #0]
=======
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	4b30      	ldr	r3, [pc, #192]	; (8005be8 <xPortStartScheduler+0x128>)
 8005b28:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800587e:	4b31      	ldr	r3, [pc, #196]	; (8005944 <xPortStartScheduler+0x134>)
 8005880:	2207      	movs	r2, #7
 8005882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005884:	e009      	b.n	800589a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005886:	4b2f      	ldr	r3, [pc, #188]	; (8005944 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <xPortStartScheduler+0x134>)
 800588e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b80      	cmp	r3, #128	; 0x80
 80058a4:	d0ef      	beq.n	8005886 <xPortStartScheduler+0x76>
=======
 8005b2a:	4b30      	ldr	r3, [pc, #192]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b30:	e009      	b.n	8005b46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b32:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4a2c      	ldr	r2, [pc, #176]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d0ef      	beq.n	8005b32 <xPortStartScheduler+0x72>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 80058a6:	4b27      	ldr	r3, [pc, #156]	; (8005944 <xPortStartScheduler+0x134>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1c3 0307 	rsb	r3, r3, #7
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d00a      	beq.n	80058c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60bb      	str	r3, [r7, #8]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xPortStartScheduler+0xb6>
=======
 8005b52:	4b26      	ldr	r3, [pc, #152]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1c3 0307 	rsb	r3, r3, #7
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d009      	beq.n	8005b72 <xPortStartScheduler+0xb2>
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	e7fe      	b.n	8005b70 <xPortStartScheduler+0xb0>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <xPortStartScheduler+0x134>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <xPortStartScheduler+0x134>)
 80058d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <xPortStartScheduler+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <xPortStartScheduler+0x134>)
 80058dc:	6013      	str	r3, [r2, #0]
=======
 8005b72:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b84:	4a19      	ldr	r2, [pc, #100]	; (8005bec <xPortStartScheduler+0x12c>)
 8005b86:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	701a      	strb	r2, [r3, #0]
=======
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	701a      	strb	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <xPortStartScheduler+0x138>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <xPortStartScheduler+0x138>)
 80058ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058f2:	4b15      	ldr	r3, [pc, #84]	; (8005948 <xPortStartScheduler+0x138>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <xPortStartScheduler+0x138>)
 80058f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058fc:	6013      	str	r3, [r2, #0]
=======
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <xPortStartScheduler+0x130>)
 8005ba2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ba6:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 80058fe:	f000 f8dd 	bl	8005abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <xPortStartScheduler+0x13c>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005908:	f000 f8fc 	bl	8005b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800590c:	4b10      	ldr	r3, [pc, #64]	; (8005950 <xPortStartScheduler+0x140>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0f      	ldr	r2, [pc, #60]	; (8005950 <xPortStartScheduler+0x140>)
 8005912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005918:	f7ff ff66 	bl	80057e8 <prvPortStartFirstTask>
=======
 8005ba8:	f000 f8d6 	bl	8005d58 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <xPortStartScheduler+0x134>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bb2:	f000 f8f5 	bl	8005da0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a0f      	ldr	r2, [pc, #60]	; (8005bf8 <xPortStartScheduler+0x138>)
 8005bbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bc2:	f7ff ff69 	bl	8005a98 <prvPortStartFirstTask>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800591c:	f7ff fd58 	bl	80053d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005920:	f7ff ff22 	bl	8005768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed00 	.word	0xe000ed00
 8005934:	410fc271 	.word	0x410fc271
 8005938:	410fc270 	.word	0x410fc270
 800593c:	e000e400 	.word	0xe000e400
 8005940:	20000418 	.word	0x20000418
 8005944:	2000041c 	.word	0x2000041c
 8005948:	e000ed20 	.word	0xe000ed20
 800594c:	2000000c 	.word	0x2000000c
 8005950:	e000ef34 	.word	0xe000ef34

08005954 <vPortEnterCritical>:
=======
 8005bc6:	f7ff fd5f 	bl	8005688 <vTaskSwitchContext>
	prvTaskExitError();
 8005bca:	f7ff ff23 	bl	8005a14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed00 	.word	0xe000ed00
 8005bdc:	410fc271 	.word	0x410fc271
 8005be0:	410fc270 	.word	0x410fc270
 8005be4:	e000e400 	.word	0xe000e400
 8005be8:	20000414 	.word	0x20000414
 8005bec:	20000418 	.word	0x20000418
 8005bf0:	e000ed20 	.word	0xe000ed20
 8005bf4:	2000000c 	.word	0x2000000c
 8005bf8:	e000ef34 	.word	0xe000ef34

08005bfc <vPortEnterCritical>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	607b      	str	r3, [r7, #4]
}
 800596c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800596e:	4b0f      	ldr	r3, [pc, #60]	; (80059ac <vPortEnterCritical+0x58>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <vPortEnterCritical+0x58>)
 8005976:	6013      	str	r3, [r2, #0]
=======
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <vPortEnterCritical+0x54>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <vPortEnterCritical+0x54>)
 8005c1c:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <vPortEnterCritical+0x58>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10f      	bne.n	80059a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortEnterCritical+0x5c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <vPortEnterCritical+0x4a>
	}
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	2000000c 	.word	0x2000000c
 80059b0:	e000ed04 	.word	0xe000ed04

080059b4 <vPortExitCritical>:
=======
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <vPortEnterCritical+0x54>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d10e      	bne.n	8005c44 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <vPortEnterCritical+0x58>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <vPortEnterCritical+0x48>
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	e7fe      	b.n	8005c42 <vPortEnterCritical+0x46>
	}
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	2000000c 	.word	0x2000000c
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <vPortExitCritical>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <vPortExitCritical+0x50>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <vPortExitCritical+0x24>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	607b      	str	r3, [r7, #4]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <vPortExitCritical+0x50>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3b01      	subs	r3, #1
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <vPortExitCritical+0x50>)
 80059e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <vPortExitCritical+0x50>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d105      	bne.n	80059f6 <vPortExitCritical+0x42>
 80059ea:	2300      	movs	r3, #0
 80059ec:	603b      	str	r3, [r7, #0]
=======
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <vPortExitCritical+0x22>
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	e7fe      	b.n	8005c78 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <vPortExitCritical+0x4c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <vPortExitCritical+0x3e>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	603b      	str	r3, [r7, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059f4:	bf00      	nop
=======
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
	...

08005a10 <PendSV_Handler>:
=======
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	2000000c 	.word	0x2000000c
	...

08005cb0 <PendSV_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8005a10:	f3ef 8009 	mrs	r0, PSP
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <pxCurrentTCBConst>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f01e 0f10 	tst.w	lr, #16
 8005a20:	bf08      	it	eq
 8005a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a34:	f380 8811 	msr	BASEPRI, r0
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f7ff fcc6 	bl	80053d0 <vTaskSwitchContext>
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f380 8811 	msr	BASEPRI, r0
 8005a4c:	bc09      	pop	{r0, r3}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f01e 0f10 	tst.w	lr, #16
 8005a5a:	bf08      	it	eq
 8005a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a60:	f380 8809 	msr	PSP, r0
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst>:
 8005a70:	200002ec 	.word	0x200002ec
=======
 8005cb0:	f3ef 8009 	mrs	r0, PSP
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <pxCurrentTCBConst>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	f01e 0f10 	tst.w	lr, #16
 8005cc0:	bf08      	it	eq
 8005cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cd4:	f380 8811 	msr	BASEPRI, r0
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f7ff fcd2 	bl	8005688 <vTaskSwitchContext>
 8005ce4:	f04f 0000 	mov.w	r0, #0
 8005ce8:	f380 8811 	msr	BASEPRI, r0
 8005cec:	bc09      	pop	{r0, r3}
 8005cee:	6819      	ldr	r1, [r3, #0]
 8005cf0:	6808      	ldr	r0, [r1, #0]
 8005cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf6:	f01e 0f10 	tst.w	lr, #16
 8005cfa:	bf08      	it	eq
 8005cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d00:	f380 8809 	msr	PSP, r0
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst>:
 8005d10:	200002e8 	.word	0x200002e8
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <SysTick_Handler>:
=======
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <SysTick_Handler>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
=======
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8005a92:	f7ff fbe5 	bl	8005260 <xTaskIncrementTick>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <SysTick_Handler+0x2c>
=======
 8005d30:	f7ff fbf2 	bl	8005518 <xTaskIncrementTick>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <SysTick_Handler+0x2a>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <SysTick_Handler+0x40>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
=======
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <SysTick_Handler+0x3c>)
 8005d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	2300      	movs	r3, #0
 8005d44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortSetupTimerInterrupt>:
=======
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <vPortSetupTimerInterrupt>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
=======
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <vPortSetupTimerInterrupt+0x38>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005acc:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <vPortSetupTimerInterrupt+0x3c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <vPortSetupTimerInterrupt+0x40>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <vPortSetupTimerInterrupt+0x44>)
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ade:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <vPortSetupTimerInterrupt+0x34>)
 8005ae0:	2207      	movs	r2, #7
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e010 	.word	0xe000e010
 8005af4:	e000e018 	.word	0xe000e018
 8005af8:	20000000 	.word	0x20000000
 8005afc:	10624dd3 	.word	0x10624dd3
 8005b00:	e000e014 	.word	0xe000e014

08005b04 <vPortEnableVFP>:
=======
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <vPortSetupTimerInterrupt+0x34>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <vPortSetupTimerInterrupt+0x38>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <vPortSetupTimerInterrupt+0x3c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <vPortSetupTimerInterrupt+0x40>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	099b      	lsrs	r3, r3, #6
 8005d74:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <vPortSetupTimerInterrupt+0x44>)
 8005d76:	3b01      	subs	r3, #1
 8005d78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <vPortSetupTimerInterrupt+0x34>)
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	601a      	str	r2, [r3, #0]
}
 8005d80:	bf00      	nop
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	e000e010 	.word	0xe000e010
 8005d90:	e000e018 	.word	0xe000e018
 8005d94:	20000000 	.word	0x20000000
 8005d98:	10624dd3 	.word	0x10624dd3
 8005d9c:	e000e014 	.word	0xe000e014

08005da0 <vPortEnableVFP>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8005b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b14 <vPortEnableVFP+0x10>
 8005b08:	6801      	ldr	r1, [r0, #0]
 8005b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b0e:	6001      	str	r1, [r0, #0]
 8005b10:	4770      	bx	lr
=======
 8005da0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005db0 <vPortEnableVFP+0x10>
 8005da4:	6801      	ldr	r1, [r0, #0]
 8005da6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005daa:	6001      	str	r1, [r0, #0]
 8005dac:	4770      	bx	lr
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 8005b12:	bf00      	nop
 8005b14:	e000ed88 	.word	0xe000ed88

08005b18 <pvPortMalloc>:
=======
 8005dae:	bf00      	nop
 8005db0:	e000ed88 	.word	0xe000ed88

08005db4 <pvPortMalloc>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	; 0x28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b24:	f7ff faf2 	bl	800510c <vTaskSuspendAll>
=======
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	; 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005dc0:	f7ff fb00 	bl	80053c4 <vTaskSuspendAll>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 8005b28:	4b58      	ldr	r3, [pc, #352]	; (8005c8c <pvPortMalloc+0x174>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b30:	f000 f910 	bl	8005d54 <prvHeapInit>
=======
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <pvPortMalloc+0x170>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dcc:	f000 f90c 	bl	8005fe8 <prvHeapInit>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 8005b34:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <pvPortMalloc+0x178>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 808e 	bne.w	8005c5e <pvPortMalloc+0x146>
=======
 8005dd0:	4b55      	ldr	r3, [pc, #340]	; (8005f28 <pvPortMalloc+0x174>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f040 808c 	bne.w	8005ef6 <pvPortMalloc+0x142>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01d      	beq.n	8005b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b48:	2208      	movs	r2, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	607b      	str	r3, [r7, #4]
=======
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01c      	beq.n	8005e1e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005de4:	2208      	movs	r2, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d014      	beq.n	8005b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f023 0307 	bic.w	r3, r3, #7
 8005b60:	3308      	adds	r3, #8
 8005b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <pvPortMalloc+0x6c>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	617b      	str	r3, [r7, #20]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <pvPortMalloc+0x6a>
=======
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d013      	beq.n	8005e1e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f023 0307 	bic.w	r3, r3, #7
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <pvPortMalloc+0x6a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e7fe      	b.n	8005e1c <pvPortMalloc+0x68>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d069      	beq.n	8005c5e <pvPortMalloc+0x146>
 8005b8a:	4b42      	ldr	r3, [pc, #264]	; (8005c94 <pvPortMalloc+0x17c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d864      	bhi.n	8005c5e <pvPortMalloc+0x146>
=======
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d068      	beq.n	8005ef6 <pvPortMalloc+0x142>
 8005e24:	4b41      	ldr	r3, [pc, #260]	; (8005f2c <pvPortMalloc+0x178>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d863      	bhi.n	8005ef6 <pvPortMalloc+0x142>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <pvPortMalloc+0x180>)
 8005b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b98:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <pvPortMalloc+0x180>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b9e:	e004      	b.n	8005baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d903      	bls.n	8005bbc <pvPortMalloc+0xa4>
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f1      	bne.n	8005ba0 <pvPortMalloc+0x88>
=======
 8005e2e:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <pvPortMalloc+0x17c>)
 8005e30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e32:	4b3f      	ldr	r3, [pc, #252]	; (8005f30 <pvPortMalloc+0x17c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e38:	e004      	b.n	8005e44 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d903      	bls.n	8005e56 <pvPortMalloc+0xa2>
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f1      	bne.n	8005e3a <pvPortMalloc+0x86>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 8005bbc:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <pvPortMalloc+0x174>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d04b      	beq.n	8005c5e <pvPortMalloc+0x146>
=======
 8005e56:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <pvPortMalloc+0x170>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d04a      	beq.n	8005ef6 <pvPortMalloc+0x142>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2208      	movs	r2, #8
 8005bcc:	4413      	add	r3, r2
 8005bce:	61fb      	str	r3, [r7, #28]
=======
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2208      	movs	r2, #8
 8005e66:	4413      	add	r3, r2
 8005e68:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	601a      	str	r2, [r3, #0]
=======
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	2308      	movs	r3, #8
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d91f      	bls.n	8005c28 <pvPortMalloc+0x110>
=======
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d91e      	bls.n	8005ec0 <pvPortMalloc+0x10c>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4413      	add	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <pvPortMalloc+0xf8>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	613b      	str	r3, [r7, #16]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <pvPortMalloc+0xf6>
=======
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d009      	beq.n	8005ea8 <pvPortMalloc+0xf4>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	e7fe      	b.n	8005ea6 <pvPortMalloc+0xf2>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c22:	69b8      	ldr	r0, [r7, #24]
 8005c24:	f000 f8f8 	bl	8005e18 <prvInsertBlockIntoFreeList>
=======
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005eba:	69b8      	ldr	r0, [r7, #24]
 8005ebc:	f000 f8f6 	bl	80060ac <prvInsertBlockIntoFreeList>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8005c28:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c36:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <pvPortMalloc+0x184>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d203      	bcs.n	8005c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c42:	4b14      	ldr	r3, [pc, #80]	; (8005c94 <pvPortMalloc+0x17c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <pvPortMalloc+0x184>)
 8005c48:	6013      	str	r3, [r2, #0]
=======
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <pvPortMalloc+0x178>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	4a18      	ldr	r2, [pc, #96]	; (8005f2c <pvPortMalloc+0x178>)
 8005ecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ece:	4b17      	ldr	r3, [pc, #92]	; (8005f2c <pvPortMalloc+0x178>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <pvPortMalloc+0x180>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d203      	bcs.n	8005ee2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <pvPortMalloc+0x178>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a15      	ldr	r2, [pc, #84]	; (8005f34 <pvPortMalloc+0x180>)
 8005ee0:	6013      	str	r3, [r2, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <pvPortMalloc+0x178>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
=======
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <pvPortMalloc+0x174>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8005c5e:	f7ff fa63 	bl	8005128 <xTaskResumeAll>
=======
 8005ef6:	f7ff fa73 	bl	80053e0 <xTaskResumeAll>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <pvPortMalloc+0x16a>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <pvPortMalloc+0x168>
	return pvReturn;
 8005c82:	69fb      	ldr	r3, [r7, #28]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3728      	adds	r7, #40	; 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20004028 	.word	0x20004028
 8005c90:	20004034 	.word	0x20004034
 8005c94:	2000402c 	.word	0x2000402c
 8005c98:	20004020 	.word	0x20004020
 8005c9c:	20004030 	.word	0x20004030

08005ca0 <vPortFree>:
=======
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d009      	beq.n	8005f18 <pvPortMalloc+0x164>
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e7fe      	b.n	8005f16 <pvPortMalloc+0x162>
	return pvReturn;
 8005f18:	69fb      	ldr	r3, [r7, #28]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3728      	adds	r7, #40	; 0x28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20004024 	.word	0x20004024
 8005f28:	20004030 	.word	0x20004030
 8005f2c:	20004028 	.word	0x20004028
 8005f30:	2000401c 	.word	0x2000401c
 8005f34:	2000402c 	.word	0x2000402c

08005f38 <vPortFree>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d048      	beq.n	8005d44 <vPortFree+0xa4>
=======
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d046      	beq.n	8005fd8 <vPortFree+0xa0>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <vPortFree+0xac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <vPortFree+0x44>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <vPortFree+0x62>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60bb      	str	r3, [r7, #8]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	4b11      	ldr	r3, [pc, #68]	; (8005d4c <vPortFree+0xac>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d019      	beq.n	8005d44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d115      	bne.n	8005d44 <vPortFree+0xa4>
=======
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4413      	add	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <vPortFree+0xa8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <vPortFree+0x42>
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e7fe      	b.n	8005f78 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <vPortFree+0x5e>
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	e7fe      	b.n	8005f94 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <vPortFree+0xa8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d019      	beq.n	8005fd8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d115      	bne.n	8005fd8 <vPortFree+0xa0>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <vPortFree+0xac>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d28:	f7ff f9f0 	bl	800510c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <vPortFree+0xb0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <vPortFree+0xb0>)
 8005d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d3a:	6938      	ldr	r0, [r7, #16]
 8005d3c:	f000 f86c 	bl	8005e18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d40:	f7ff f9f2 	bl	8005128 <xTaskResumeAll>
=======
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <vPortFree+0xa8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	43db      	mvns	r3, r3
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fbc:	f7ff fa02 	bl	80053c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <vPortFree+0xac>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4413      	add	r3, r2
 8005fca:	4a06      	ldr	r2, [pc, #24]	; (8005fe4 <vPortFree+0xac>)
 8005fcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fce:	6938      	ldr	r0, [r7, #16]
 8005fd0:	f000 f86c 	bl	80060ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005fd4:	f7ff fa04 	bl	80053e0 <xTaskResumeAll>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20004034 	.word	0x20004034
 8005d50:	2000402c 	.word	0x2000402c

08005d54 <prvHeapInit>:
=======
 8005fd8:	bf00      	nop
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20004030 	.word	0x20004030
 8005fe4:	20004028 	.word	0x20004028

08005fe8 <prvHeapInit>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
=======
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 8005d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d60:	4b27      	ldr	r3, [pc, #156]	; (8005e00 <prvHeapInit+0xac>)
 8005d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3307      	adds	r3, #7
 8005d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0307 	bic.w	r3, r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <prvHeapInit+0xac>)
 8005d84:	4413      	add	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	607b      	str	r3, [r7, #4]
=======
 8005fee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ff2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ff4:	4b27      	ldr	r3, [pc, #156]	; (8006094 <prvHeapInit+0xac>)
 8005ff6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00c      	beq.n	800601c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3307      	adds	r3, #7
 8006006:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <prvHeapInit+0xac>)
 8006018:	4413      	add	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <prvHeapInit+0xb0>)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d92:	4b1c      	ldr	r3, [pc, #112]	; (8005e04 <prvHeapInit+0xb0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	605a      	str	r2, [r3, #4]
=======
 8006020:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <prvHeapInit+0xb0>)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <prvHeapInit+0xb0>)
 8006028:	2200      	movs	r2, #0
 800602a:	605a      	str	r2, [r3, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005da0:	2208      	movs	r2, #8
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0307 	bic.w	r3, r3, #7
 8005dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <prvHeapInit+0xb4>)
 8005db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <prvHeapInit+0xb4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <prvHeapInit+0xb4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
=======
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006034:	2208      	movs	r2, #8
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0307 	bic.w	r3, r3, #7
 8006042:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a15      	ldr	r2, [pc, #84]	; (800609c <prvHeapInit+0xb4>)
 8006048:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <prvHeapInit+0xb4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <prvHeapInit+0xb4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dd4:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <prvHeapInit+0xb4>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <prvHeapInit+0xb8>)
 8005de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <prvHeapInit+0xbc>)
 8005dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <prvHeapInit+0xc0>)
 8005dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000420 	.word	0x20000420
 8005e04:	20004020 	.word	0x20004020
 8005e08:	20004028 	.word	0x20004028
 8005e0c:	20004030 	.word	0x20004030
 8005e10:	2000402c 	.word	0x2000402c
 8005e14:	20004034 	.word	0x20004034

08005e18 <prvInsertBlockIntoFreeList>:
=======
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006068:	4b0c      	ldr	r3, [pc, #48]	; (800609c <prvHeapInit+0xb4>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <prvHeapInit+0xb8>)
 8006076:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <prvHeapInit+0xbc>)
 800607e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <prvHeapInit+0xc0>)
 8006082:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	2000041c 	.word	0x2000041c
 8006098:	2000401c 	.word	0x2000401c
 800609c:	20004024 	.word	0x20004024
 80060a0:	2000402c 	.word	0x2000402c
 80060a4:	20004028 	.word	0x20004028
 80060a8:	20004030 	.word	0x20004030

080060ac <prvInsertBlockIntoFreeList>:
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
=======
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <prvInsertBlockIntoFreeList+0xac>)
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e002      	b.n	8005e2c <prvInsertBlockIntoFreeList+0x14>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d8f7      	bhi.n	8005e26 <prvInsertBlockIntoFreeList+0xe>
=======
 80060b4:	4b28      	ldr	r3, [pc, #160]	; (8006158 <prvInsertBlockIntoFreeList+0xac>)
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	e002      	b.n	80060c0 <prvInsertBlockIntoFreeList+0x14>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d8f7      	bhi.n	80060ba <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	4413      	add	r3, r2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d108      	bne.n	8005e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	607b      	str	r3, [r7, #4]
=======
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	4413      	add	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d108      	bne.n	80060ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	607b      	str	r3, [r7, #4]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d118      	bne.n	8005ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d00d      	beq.n	8005e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	441a      	add	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e008      	b.n	8005ea8 <prvInsertBlockIntoFreeList+0x90>
=======
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	441a      	add	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d118      	bne.n	8006134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <prvInsertBlockIntoFreeList+0xb0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d00d      	beq.n	800612a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	e008      	b.n	800613c <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e003      	b.n	8005ea8 <prvInsertBlockIntoFreeList+0x90>
=======
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <prvInsertBlockIntoFreeList+0xb0>)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e003      	b.n	800613c <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
=======
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d002      	beq.n	8005eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
=======
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d002      	beq.n	800614a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20004020 	.word	0x20004020
 8005ec8:	20004028 	.word	0x20004028

08005ecc <__errno>:
 8005ecc:	4b01      	ldr	r3, [pc, #4]	; (8005ed4 <__errno+0x8>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000010 	.word	0x20000010

08005ed8 <__libc_init_array>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4d0d      	ldr	r5, [pc, #52]	; (8005f10 <__libc_init_array+0x38>)
 8005edc:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <__libc_init_array+0x3c>)
 8005ede:	1b64      	subs	r4, r4, r5
 8005ee0:	10a4      	asrs	r4, r4, #2
 8005ee2:	2600      	movs	r6, #0
 8005ee4:	42a6      	cmp	r6, r4
 8005ee6:	d109      	bne.n	8005efc <__libc_init_array+0x24>
 8005ee8:	4d0b      	ldr	r5, [pc, #44]	; (8005f18 <__libc_init_array+0x40>)
 8005eea:	4c0c      	ldr	r4, [pc, #48]	; (8005f1c <__libc_init_array+0x44>)
 8005eec:	f000 ff76 	bl	8006ddc <_init>
 8005ef0:	1b64      	subs	r4, r4, r5
 8005ef2:	10a4      	asrs	r4, r4, #2
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d105      	bne.n	8005f06 <__libc_init_array+0x2e>
 8005efa:	bd70      	pop	{r4, r5, r6, pc}
 8005efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f00:	4798      	blx	r3
 8005f02:	3601      	adds	r6, #1
 8005f04:	e7ee      	b.n	8005ee4 <__libc_init_array+0xc>
 8005f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f0a:	4798      	blx	r3
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	e7f2      	b.n	8005ef6 <__libc_init_array+0x1e>
 8005f10:	08007020 	.word	0x08007020
 8005f14:	08007020 	.word	0x08007020
 8005f18:	08007020 	.word	0x08007020
 8005f1c:	08007024 	.word	0x08007024

08005f20 <memset>:
 8005f20:	4402      	add	r2, r0
 8005f22:	4603      	mov	r3, r0
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d100      	bne.n	8005f2a <memset+0xa>
 8005f28:	4770      	bx	lr
 8005f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2e:	e7f9      	b.n	8005f24 <memset+0x4>

08005f30 <iprintf>:
 8005f30:	b40f      	push	{r0, r1, r2, r3}
 8005f32:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <iprintf+0x2c>)
 8005f34:	b513      	push	{r0, r1, r4, lr}
 8005f36:	681c      	ldr	r4, [r3, #0]
 8005f38:	b124      	cbz	r4, 8005f44 <iprintf+0x14>
 8005f3a:	69a3      	ldr	r3, [r4, #24]
 8005f3c:	b913      	cbnz	r3, 8005f44 <iprintf+0x14>
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 f866 	bl	8006010 <__sinit>
 8005f44:	ab05      	add	r3, sp, #20
 8005f46:	9a04      	ldr	r2, [sp, #16]
 8005f48:	68a1      	ldr	r1, [r4, #8]
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f983 	bl	8006258 <_vfiprintf_r>
 8005f52:	b002      	add	sp, #8
 8005f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f58:	b004      	add	sp, #16
 8005f5a:	4770      	bx	lr
 8005f5c:	20000010 	.word	0x20000010

08005f60 <std>:
 8005f60:	2300      	movs	r3, #0
 8005f62:	b510      	push	{r4, lr}
 8005f64:	4604      	mov	r4, r0
 8005f66:	e9c0 3300 	strd	r3, r3, [r0]
 8005f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f6e:	6083      	str	r3, [r0, #8]
 8005f70:	8181      	strh	r1, [r0, #12]
 8005f72:	6643      	str	r3, [r0, #100]	; 0x64
 8005f74:	81c2      	strh	r2, [r0, #14]
 8005f76:	6183      	str	r3, [r0, #24]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	305c      	adds	r0, #92	; 0x5c
 8005f7e:	f7ff ffcf 	bl	8005f20 <memset>
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <std+0x38>)
 8005f84:	6263      	str	r3, [r4, #36]	; 0x24
 8005f86:	4b05      	ldr	r3, [pc, #20]	; (8005f9c <std+0x3c>)
 8005f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <std+0x40>)
 8005f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <std+0x44>)
 8005f90:	6224      	str	r4, [r4, #32]
 8005f92:	6323      	str	r3, [r4, #48]	; 0x30
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop
 8005f98:	08006801 	.word	0x08006801
 8005f9c:	08006823 	.word	0x08006823
 8005fa0:	0800685b 	.word	0x0800685b
 8005fa4:	0800687f 	.word	0x0800687f

08005fa8 <_cleanup_r>:
 8005fa8:	4901      	ldr	r1, [pc, #4]	; (8005fb0 <_cleanup_r+0x8>)
 8005faa:	f000 b8af 	b.w	800610c <_fwalk_reent>
 8005fae:	bf00      	nop
 8005fb0:	08006b59 	.word	0x08006b59

08005fb4 <__sfmoreglue>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	1e4a      	subs	r2, r1, #1
 8005fb8:	2568      	movs	r5, #104	; 0x68
 8005fba:	4355      	muls	r5, r2
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fc2:	f000 f8c5 	bl	8006150 <_malloc_r>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	b140      	cbz	r0, 8005fdc <__sfmoreglue+0x28>
 8005fca:	2100      	movs	r1, #0
 8005fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	60a0      	str	r0, [r4, #8]
 8005fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fd8:	f7ff ffa2 	bl	8005f20 <memset>
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd70      	pop	{r4, r5, r6, pc}

08005fe0 <__sfp_lock_acquire>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__sfp_lock_acquire+0x8>)
 8005fe2:	f000 b8b3 	b.w	800614c <__retarget_lock_acquire_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	20004340 	.word	0x20004340

08005fec <__sfp_lock_release>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__sfp_lock_release+0x8>)
 8005fee:	f000 b8ae 	b.w	800614e <__retarget_lock_release_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20004340 	.word	0x20004340

08005ff8 <__sinit_lock_acquire>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__sinit_lock_acquire+0x8>)
 8005ffa:	f000 b8a7 	b.w	800614c <__retarget_lock_acquire_recursive>
 8005ffe:	bf00      	nop
 8006000:	2000433b 	.word	0x2000433b

08006004 <__sinit_lock_release>:
 8006004:	4801      	ldr	r0, [pc, #4]	; (800600c <__sinit_lock_release+0x8>)
 8006006:	f000 b8a2 	b.w	800614e <__retarget_lock_release_recursive>
 800600a:	bf00      	nop
 800600c:	2000433b 	.word	0x2000433b

08006010 <__sinit>:
 8006010:	b510      	push	{r4, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	f7ff fff0 	bl	8005ff8 <__sinit_lock_acquire>
 8006018:	69a3      	ldr	r3, [r4, #24]
 800601a:	b11b      	cbz	r3, 8006024 <__sinit+0x14>
 800601c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006020:	f7ff bff0 	b.w	8006004 <__sinit_lock_release>
 8006024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006028:	6523      	str	r3, [r4, #80]	; 0x50
 800602a:	4b13      	ldr	r3, [pc, #76]	; (8006078 <__sinit+0x68>)
 800602c:	4a13      	ldr	r2, [pc, #76]	; (800607c <__sinit+0x6c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	62a2      	str	r2, [r4, #40]	; 0x28
 8006032:	42a3      	cmp	r3, r4
 8006034:	bf04      	itt	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	61a3      	streq	r3, [r4, #24]
 800603a:	4620      	mov	r0, r4
 800603c:	f000 f820 	bl	8006080 <__sfp>
 8006040:	6060      	str	r0, [r4, #4]
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f81c 	bl	8006080 <__sfp>
 8006048:	60a0      	str	r0, [r4, #8]
 800604a:	4620      	mov	r0, r4
 800604c:	f000 f818 	bl	8006080 <__sfp>
 8006050:	2200      	movs	r2, #0
 8006052:	60e0      	str	r0, [r4, #12]
 8006054:	2104      	movs	r1, #4
 8006056:	6860      	ldr	r0, [r4, #4]
 8006058:	f7ff ff82 	bl	8005f60 <std>
 800605c:	68a0      	ldr	r0, [r4, #8]
 800605e:	2201      	movs	r2, #1
 8006060:	2109      	movs	r1, #9
 8006062:	f7ff ff7d 	bl	8005f60 <std>
 8006066:	68e0      	ldr	r0, [r4, #12]
 8006068:	2202      	movs	r2, #2
 800606a:	2112      	movs	r1, #18
 800606c:	f7ff ff78 	bl	8005f60 <std>
 8006070:	2301      	movs	r3, #1
 8006072:	61a3      	str	r3, [r4, #24]
 8006074:	e7d2      	b.n	800601c <__sinit+0xc>
 8006076:	bf00      	nop
 8006078:	08006f80 	.word	0x08006f80
 800607c:	08005fa9 	.word	0x08005fa9

08006080 <__sfp>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	4607      	mov	r7, r0
 8006084:	f7ff ffac 	bl	8005fe0 <__sfp_lock_acquire>
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <__sfp+0x84>)
 800608a:	681e      	ldr	r6, [r3, #0]
 800608c:	69b3      	ldr	r3, [r6, #24]
 800608e:	b913      	cbnz	r3, 8006096 <__sfp+0x16>
 8006090:	4630      	mov	r0, r6
 8006092:	f7ff ffbd 	bl	8006010 <__sinit>
 8006096:	3648      	adds	r6, #72	; 0x48
 8006098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	d503      	bpl.n	80060a8 <__sfp+0x28>
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	b30b      	cbz	r3, 80060e8 <__sfp+0x68>
 80060a4:	6836      	ldr	r6, [r6, #0]
 80060a6:	e7f7      	b.n	8006098 <__sfp+0x18>
 80060a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060ac:	b9d5      	cbnz	r5, 80060e4 <__sfp+0x64>
 80060ae:	4b16      	ldr	r3, [pc, #88]	; (8006108 <__sfp+0x88>)
 80060b0:	60e3      	str	r3, [r4, #12]
 80060b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060b6:	6665      	str	r5, [r4, #100]	; 0x64
 80060b8:	f000 f847 	bl	800614a <__retarget_lock_init_recursive>
 80060bc:	f7ff ff96 	bl	8005fec <__sfp_lock_release>
 80060c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060c8:	6025      	str	r5, [r4, #0]
 80060ca:	61a5      	str	r5, [r4, #24]
 80060cc:	2208      	movs	r2, #8
 80060ce:	4629      	mov	r1, r5
 80060d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060d4:	f7ff ff24 	bl	8005f20 <memset>
 80060d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060e0:	4620      	mov	r0, r4
 80060e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e4:	3468      	adds	r4, #104	; 0x68
 80060e6:	e7d9      	b.n	800609c <__sfp+0x1c>
 80060e8:	2104      	movs	r1, #4
 80060ea:	4638      	mov	r0, r7
 80060ec:	f7ff ff62 	bl	8005fb4 <__sfmoreglue>
 80060f0:	4604      	mov	r4, r0
 80060f2:	6030      	str	r0, [r6, #0]
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d1d5      	bne.n	80060a4 <__sfp+0x24>
 80060f8:	f7ff ff78 	bl	8005fec <__sfp_lock_release>
 80060fc:	230c      	movs	r3, #12
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	e7ee      	b.n	80060e0 <__sfp+0x60>
 8006102:	bf00      	nop
 8006104:	08006f80 	.word	0x08006f80
 8006108:	ffff0001 	.word	0xffff0001

0800610c <_fwalk_reent>:
 800610c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006110:	4606      	mov	r6, r0
 8006112:	4688      	mov	r8, r1
 8006114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006118:	2700      	movs	r7, #0
 800611a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800611e:	f1b9 0901 	subs.w	r9, r9, #1
 8006122:	d505      	bpl.n	8006130 <_fwalk_reent+0x24>
 8006124:	6824      	ldr	r4, [r4, #0]
 8006126:	2c00      	cmp	r4, #0
 8006128:	d1f7      	bne.n	800611a <_fwalk_reent+0xe>
 800612a:	4638      	mov	r0, r7
 800612c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006130:	89ab      	ldrh	r3, [r5, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d907      	bls.n	8006146 <_fwalk_reent+0x3a>
 8006136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800613a:	3301      	adds	r3, #1
 800613c:	d003      	beq.n	8006146 <_fwalk_reent+0x3a>
 800613e:	4629      	mov	r1, r5
 8006140:	4630      	mov	r0, r6
 8006142:	47c0      	blx	r8
 8006144:	4307      	orrs	r7, r0
 8006146:	3568      	adds	r5, #104	; 0x68
 8006148:	e7e9      	b.n	800611e <_fwalk_reent+0x12>

0800614a <__retarget_lock_init_recursive>:
 800614a:	4770      	bx	lr

0800614c <__retarget_lock_acquire_recursive>:
 800614c:	4770      	bx	lr

0800614e <__retarget_lock_release_recursive>:
 800614e:	4770      	bx	lr

08006150 <_malloc_r>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	1ccd      	adds	r5, r1, #3
 8006154:	f025 0503 	bic.w	r5, r5, #3
 8006158:	3508      	adds	r5, #8
 800615a:	2d0c      	cmp	r5, #12
 800615c:	bf38      	it	cc
 800615e:	250c      	movcc	r5, #12
 8006160:	2d00      	cmp	r5, #0
 8006162:	4606      	mov	r6, r0
 8006164:	db01      	blt.n	800616a <_malloc_r+0x1a>
 8006166:	42a9      	cmp	r1, r5
 8006168:	d903      	bls.n	8006172 <_malloc_r+0x22>
 800616a:	230c      	movs	r3, #12
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	2000      	movs	r0, #0
 8006170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006172:	f000 fda3 	bl	8006cbc <__malloc_lock>
 8006176:	4921      	ldr	r1, [pc, #132]	; (80061fc <_malloc_r+0xac>)
 8006178:	680a      	ldr	r2, [r1, #0]
 800617a:	4614      	mov	r4, r2
 800617c:	b99c      	cbnz	r4, 80061a6 <_malloc_r+0x56>
 800617e:	4f20      	ldr	r7, [pc, #128]	; (8006200 <_malloc_r+0xb0>)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	b923      	cbnz	r3, 800618e <_malloc_r+0x3e>
 8006184:	4621      	mov	r1, r4
 8006186:	4630      	mov	r0, r6
 8006188:	f000 fb2a 	bl	80067e0 <_sbrk_r>
 800618c:	6038      	str	r0, [r7, #0]
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f000 fb25 	bl	80067e0 <_sbrk_r>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	d123      	bne.n	80061e2 <_malloc_r+0x92>
 800619a:	230c      	movs	r3, #12
 800619c:	6033      	str	r3, [r6, #0]
 800619e:	4630      	mov	r0, r6
 80061a0:	f000 fd92 	bl	8006cc8 <__malloc_unlock>
 80061a4:	e7e3      	b.n	800616e <_malloc_r+0x1e>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	1b5b      	subs	r3, r3, r5
 80061aa:	d417      	bmi.n	80061dc <_malloc_r+0x8c>
 80061ac:	2b0b      	cmp	r3, #11
 80061ae:	d903      	bls.n	80061b8 <_malloc_r+0x68>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	441c      	add	r4, r3
 80061b4:	6025      	str	r5, [r4, #0]
 80061b6:	e004      	b.n	80061c2 <_malloc_r+0x72>
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	42a2      	cmp	r2, r4
 80061bc:	bf0c      	ite	eq
 80061be:	600b      	streq	r3, [r1, #0]
 80061c0:	6053      	strne	r3, [r2, #4]
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 fd80 	bl	8006cc8 <__malloc_unlock>
 80061c8:	f104 000b 	add.w	r0, r4, #11
 80061cc:	1d23      	adds	r3, r4, #4
 80061ce:	f020 0007 	bic.w	r0, r0, #7
 80061d2:	1ac2      	subs	r2, r0, r3
 80061d4:	d0cc      	beq.n	8006170 <_malloc_r+0x20>
 80061d6:	1a1b      	subs	r3, r3, r0
 80061d8:	50a3      	str	r3, [r4, r2]
 80061da:	e7c9      	b.n	8006170 <_malloc_r+0x20>
 80061dc:	4622      	mov	r2, r4
 80061de:	6864      	ldr	r4, [r4, #4]
 80061e0:	e7cc      	b.n	800617c <_malloc_r+0x2c>
 80061e2:	1cc4      	adds	r4, r0, #3
 80061e4:	f024 0403 	bic.w	r4, r4, #3
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d0e3      	beq.n	80061b4 <_malloc_r+0x64>
 80061ec:	1a21      	subs	r1, r4, r0
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 faf6 	bl	80067e0 <_sbrk_r>
 80061f4:	3001      	adds	r0, #1
 80061f6:	d1dd      	bne.n	80061b4 <_malloc_r+0x64>
 80061f8:	e7cf      	b.n	800619a <_malloc_r+0x4a>
 80061fa:	bf00      	nop
 80061fc:	20004038 	.word	0x20004038
 8006200:	2000403c 	.word	0x2000403c

08006204 <__sfputc_r>:
 8006204:	6893      	ldr	r3, [r2, #8]
 8006206:	3b01      	subs	r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	b410      	push	{r4}
 800620c:	6093      	str	r3, [r2, #8]
 800620e:	da08      	bge.n	8006222 <__sfputc_r+0x1e>
 8006210:	6994      	ldr	r4, [r2, #24]
 8006212:	42a3      	cmp	r3, r4
 8006214:	db01      	blt.n	800621a <__sfputc_r+0x16>
 8006216:	290a      	cmp	r1, #10
 8006218:	d103      	bne.n	8006222 <__sfputc_r+0x1e>
 800621a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800621e:	f000 bb33 	b.w	8006888 <__swbuf_r>
 8006222:	6813      	ldr	r3, [r2, #0]
 8006224:	1c58      	adds	r0, r3, #1
 8006226:	6010      	str	r0, [r2, #0]
 8006228:	7019      	strb	r1, [r3, #0]
 800622a:	4608      	mov	r0, r1
 800622c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006230:	4770      	bx	lr

08006232 <__sfputs_r>:
 8006232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006234:	4606      	mov	r6, r0
 8006236:	460f      	mov	r7, r1
 8006238:	4614      	mov	r4, r2
 800623a:	18d5      	adds	r5, r2, r3
 800623c:	42ac      	cmp	r4, r5
 800623e:	d101      	bne.n	8006244 <__sfputs_r+0x12>
 8006240:	2000      	movs	r0, #0
 8006242:	e007      	b.n	8006254 <__sfputs_r+0x22>
 8006244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006248:	463a      	mov	r2, r7
 800624a:	4630      	mov	r0, r6
 800624c:	f7ff ffda 	bl	8006204 <__sfputc_r>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d1f3      	bne.n	800623c <__sfputs_r+0xa>
 8006254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006258 <_vfiprintf_r>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	460d      	mov	r5, r1
 800625e:	b09d      	sub	sp, #116	; 0x74
 8006260:	4614      	mov	r4, r2
 8006262:	4698      	mov	r8, r3
 8006264:	4606      	mov	r6, r0
 8006266:	b118      	cbz	r0, 8006270 <_vfiprintf_r+0x18>
 8006268:	6983      	ldr	r3, [r0, #24]
 800626a:	b90b      	cbnz	r3, 8006270 <_vfiprintf_r+0x18>
 800626c:	f7ff fed0 	bl	8006010 <__sinit>
 8006270:	4b89      	ldr	r3, [pc, #548]	; (8006498 <_vfiprintf_r+0x240>)
 8006272:	429d      	cmp	r5, r3
 8006274:	d11b      	bne.n	80062ae <_vfiprintf_r+0x56>
 8006276:	6875      	ldr	r5, [r6, #4]
 8006278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	d405      	bmi.n	800628a <_vfiprintf_r+0x32>
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	059a      	lsls	r2, r3, #22
 8006282:	d402      	bmi.n	800628a <_vfiprintf_r+0x32>
 8006284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006286:	f7ff ff61 	bl	800614c <__retarget_lock_acquire_recursive>
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	071b      	lsls	r3, r3, #28
 800628e:	d501      	bpl.n	8006294 <_vfiprintf_r+0x3c>
 8006290:	692b      	ldr	r3, [r5, #16]
 8006292:	b9eb      	cbnz	r3, 80062d0 <_vfiprintf_r+0x78>
 8006294:	4629      	mov	r1, r5
 8006296:	4630      	mov	r0, r6
 8006298:	f000 fb5a 	bl	8006950 <__swsetup_r>
 800629c:	b1c0      	cbz	r0, 80062d0 <_vfiprintf_r+0x78>
 800629e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062a0:	07dc      	lsls	r4, r3, #31
 80062a2:	d50e      	bpl.n	80062c2 <_vfiprintf_r+0x6a>
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
 80062a8:	b01d      	add	sp, #116	; 0x74
 80062aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ae:	4b7b      	ldr	r3, [pc, #492]	; (800649c <_vfiprintf_r+0x244>)
 80062b0:	429d      	cmp	r5, r3
 80062b2:	d101      	bne.n	80062b8 <_vfiprintf_r+0x60>
 80062b4:	68b5      	ldr	r5, [r6, #8]
 80062b6:	e7df      	b.n	8006278 <_vfiprintf_r+0x20>
 80062b8:	4b79      	ldr	r3, [pc, #484]	; (80064a0 <_vfiprintf_r+0x248>)
 80062ba:	429d      	cmp	r5, r3
 80062bc:	bf08      	it	eq
 80062be:	68f5      	ldreq	r5, [r6, #12]
 80062c0:	e7da      	b.n	8006278 <_vfiprintf_r+0x20>
 80062c2:	89ab      	ldrh	r3, [r5, #12]
 80062c4:	0598      	lsls	r0, r3, #22
 80062c6:	d4ed      	bmi.n	80062a4 <_vfiprintf_r+0x4c>
 80062c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ca:	f7ff ff40 	bl	800614e <__retarget_lock_release_recursive>
 80062ce:	e7e9      	b.n	80062a4 <_vfiprintf_r+0x4c>
 80062d0:	2300      	movs	r3, #0
 80062d2:	9309      	str	r3, [sp, #36]	; 0x24
 80062d4:	2320      	movs	r3, #32
 80062d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062da:	f8cd 800c 	str.w	r8, [sp, #12]
 80062de:	2330      	movs	r3, #48	; 0x30
 80062e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064a4 <_vfiprintf_r+0x24c>
 80062e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062e8:	f04f 0901 	mov.w	r9, #1
 80062ec:	4623      	mov	r3, r4
 80062ee:	469a      	mov	sl, r3
 80062f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062f4:	b10a      	cbz	r2, 80062fa <_vfiprintf_r+0xa2>
 80062f6:	2a25      	cmp	r2, #37	; 0x25
 80062f8:	d1f9      	bne.n	80062ee <_vfiprintf_r+0x96>
 80062fa:	ebba 0b04 	subs.w	fp, sl, r4
 80062fe:	d00b      	beq.n	8006318 <_vfiprintf_r+0xc0>
 8006300:	465b      	mov	r3, fp
 8006302:	4622      	mov	r2, r4
 8006304:	4629      	mov	r1, r5
 8006306:	4630      	mov	r0, r6
 8006308:	f7ff ff93 	bl	8006232 <__sfputs_r>
 800630c:	3001      	adds	r0, #1
 800630e:	f000 80aa 	beq.w	8006466 <_vfiprintf_r+0x20e>
 8006312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006314:	445a      	add	r2, fp
 8006316:	9209      	str	r2, [sp, #36]	; 0x24
 8006318:	f89a 3000 	ldrb.w	r3, [sl]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80a2 	beq.w	8006466 <_vfiprintf_r+0x20e>
 8006322:	2300      	movs	r3, #0
 8006324:	f04f 32ff 	mov.w	r2, #4294967295
 8006328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800632c:	f10a 0a01 	add.w	sl, sl, #1
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	9307      	str	r3, [sp, #28]
 8006334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006338:	931a      	str	r3, [sp, #104]	; 0x68
 800633a:	4654      	mov	r4, sl
 800633c:	2205      	movs	r2, #5
 800633e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006342:	4858      	ldr	r0, [pc, #352]	; (80064a4 <_vfiprintf_r+0x24c>)
 8006344:	f7f9 ff64 	bl	8000210 <memchr>
 8006348:	9a04      	ldr	r2, [sp, #16]
 800634a:	b9d8      	cbnz	r0, 8006384 <_vfiprintf_r+0x12c>
 800634c:	06d1      	lsls	r1, r2, #27
 800634e:	bf44      	itt	mi
 8006350:	2320      	movmi	r3, #32
 8006352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006356:	0713      	lsls	r3, r2, #28
 8006358:	bf44      	itt	mi
 800635a:	232b      	movmi	r3, #43	; 0x2b
 800635c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006360:	f89a 3000 	ldrb.w	r3, [sl]
 8006364:	2b2a      	cmp	r3, #42	; 0x2a
 8006366:	d015      	beq.n	8006394 <_vfiprintf_r+0x13c>
 8006368:	9a07      	ldr	r2, [sp, #28]
 800636a:	4654      	mov	r4, sl
 800636c:	2000      	movs	r0, #0
 800636e:	f04f 0c0a 	mov.w	ip, #10
 8006372:	4621      	mov	r1, r4
 8006374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006378:	3b30      	subs	r3, #48	; 0x30
 800637a:	2b09      	cmp	r3, #9
 800637c:	d94e      	bls.n	800641c <_vfiprintf_r+0x1c4>
 800637e:	b1b0      	cbz	r0, 80063ae <_vfiprintf_r+0x156>
 8006380:	9207      	str	r2, [sp, #28]
 8006382:	e014      	b.n	80063ae <_vfiprintf_r+0x156>
 8006384:	eba0 0308 	sub.w	r3, r0, r8
 8006388:	fa09 f303 	lsl.w	r3, r9, r3
 800638c:	4313      	orrs	r3, r2
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	46a2      	mov	sl, r4
 8006392:	e7d2      	b.n	800633a <_vfiprintf_r+0xe2>
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	1d19      	adds	r1, r3, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	9103      	str	r1, [sp, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	bfbb      	ittet	lt
 80063a0:	425b      	neglt	r3, r3
 80063a2:	f042 0202 	orrlt.w	r2, r2, #2
 80063a6:	9307      	strge	r3, [sp, #28]
 80063a8:	9307      	strlt	r3, [sp, #28]
 80063aa:	bfb8      	it	lt
 80063ac:	9204      	strlt	r2, [sp, #16]
 80063ae:	7823      	ldrb	r3, [r4, #0]
 80063b0:	2b2e      	cmp	r3, #46	; 0x2e
 80063b2:	d10c      	bne.n	80063ce <_vfiprintf_r+0x176>
 80063b4:	7863      	ldrb	r3, [r4, #1]
 80063b6:	2b2a      	cmp	r3, #42	; 0x2a
 80063b8:	d135      	bne.n	8006426 <_vfiprintf_r+0x1ce>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	1d1a      	adds	r2, r3, #4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	9203      	str	r2, [sp, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	bfb8      	it	lt
 80063c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ca:	3402      	adds	r4, #2
 80063cc:	9305      	str	r3, [sp, #20]
 80063ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064b4 <_vfiprintf_r+0x25c>
 80063d2:	7821      	ldrb	r1, [r4, #0]
 80063d4:	2203      	movs	r2, #3
 80063d6:	4650      	mov	r0, sl
 80063d8:	f7f9 ff1a 	bl	8000210 <memchr>
 80063dc:	b140      	cbz	r0, 80063f0 <_vfiprintf_r+0x198>
 80063de:	2340      	movs	r3, #64	; 0x40
 80063e0:	eba0 000a 	sub.w	r0, r0, sl
 80063e4:	fa03 f000 	lsl.w	r0, r3, r0
 80063e8:	9b04      	ldr	r3, [sp, #16]
 80063ea:	4303      	orrs	r3, r0
 80063ec:	3401      	adds	r4, #1
 80063ee:	9304      	str	r3, [sp, #16]
 80063f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f4:	482c      	ldr	r0, [pc, #176]	; (80064a8 <_vfiprintf_r+0x250>)
 80063f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063fa:	2206      	movs	r2, #6
 80063fc:	f7f9 ff08 	bl	8000210 <memchr>
 8006400:	2800      	cmp	r0, #0
 8006402:	d03f      	beq.n	8006484 <_vfiprintf_r+0x22c>
 8006404:	4b29      	ldr	r3, [pc, #164]	; (80064ac <_vfiprintf_r+0x254>)
 8006406:	bb1b      	cbnz	r3, 8006450 <_vfiprintf_r+0x1f8>
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	3307      	adds	r3, #7
 800640c:	f023 0307 	bic.w	r3, r3, #7
 8006410:	3308      	adds	r3, #8
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006416:	443b      	add	r3, r7
 8006418:	9309      	str	r3, [sp, #36]	; 0x24
 800641a:	e767      	b.n	80062ec <_vfiprintf_r+0x94>
 800641c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006420:	460c      	mov	r4, r1
 8006422:	2001      	movs	r0, #1
 8006424:	e7a5      	b.n	8006372 <_vfiprintf_r+0x11a>
 8006426:	2300      	movs	r3, #0
 8006428:	3401      	adds	r4, #1
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	4619      	mov	r1, r3
 800642e:	f04f 0c0a 	mov.w	ip, #10
 8006432:	4620      	mov	r0, r4
 8006434:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006438:	3a30      	subs	r2, #48	; 0x30
 800643a:	2a09      	cmp	r2, #9
 800643c:	d903      	bls.n	8006446 <_vfiprintf_r+0x1ee>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0c5      	beq.n	80063ce <_vfiprintf_r+0x176>
 8006442:	9105      	str	r1, [sp, #20]
 8006444:	e7c3      	b.n	80063ce <_vfiprintf_r+0x176>
 8006446:	fb0c 2101 	mla	r1, ip, r1, r2
 800644a:	4604      	mov	r4, r0
 800644c:	2301      	movs	r3, #1
 800644e:	e7f0      	b.n	8006432 <_vfiprintf_r+0x1da>
 8006450:	ab03      	add	r3, sp, #12
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	462a      	mov	r2, r5
 8006456:	4b16      	ldr	r3, [pc, #88]	; (80064b0 <_vfiprintf_r+0x258>)
 8006458:	a904      	add	r1, sp, #16
 800645a:	4630      	mov	r0, r6
 800645c:	f3af 8000 	nop.w
 8006460:	4607      	mov	r7, r0
 8006462:	1c78      	adds	r0, r7, #1
 8006464:	d1d6      	bne.n	8006414 <_vfiprintf_r+0x1bc>
 8006466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006468:	07d9      	lsls	r1, r3, #31
 800646a:	d405      	bmi.n	8006478 <_vfiprintf_r+0x220>
 800646c:	89ab      	ldrh	r3, [r5, #12]
 800646e:	059a      	lsls	r2, r3, #22
 8006470:	d402      	bmi.n	8006478 <_vfiprintf_r+0x220>
 8006472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006474:	f7ff fe6b 	bl	800614e <__retarget_lock_release_recursive>
 8006478:	89ab      	ldrh	r3, [r5, #12]
 800647a:	065b      	lsls	r3, r3, #25
 800647c:	f53f af12 	bmi.w	80062a4 <_vfiprintf_r+0x4c>
 8006480:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006482:	e711      	b.n	80062a8 <_vfiprintf_r+0x50>
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	462a      	mov	r2, r5
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <_vfiprintf_r+0x258>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4630      	mov	r0, r6
 8006490:	f000 f880 	bl	8006594 <_printf_i>
 8006494:	e7e4      	b.n	8006460 <_vfiprintf_r+0x208>
 8006496:	bf00      	nop
 8006498:	08006fa4 	.word	0x08006fa4
 800649c:	08006fc4 	.word	0x08006fc4
 80064a0:	08006f84 	.word	0x08006f84
 80064a4:	08006fe4 	.word	0x08006fe4
 80064a8:	08006fee 	.word	0x08006fee
 80064ac:	00000000 	.word	0x00000000
 80064b0:	08006233 	.word	0x08006233
 80064b4:	08006fea 	.word	0x08006fea

080064b8 <_printf_common>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4616      	mov	r6, r2
 80064be:	4699      	mov	r9, r3
 80064c0:	688a      	ldr	r2, [r1, #8]
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064c8:	4293      	cmp	r3, r2
 80064ca:	bfb8      	it	lt
 80064cc:	4613      	movlt	r3, r2
 80064ce:	6033      	str	r3, [r6, #0]
 80064d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064d4:	4607      	mov	r7, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	b10a      	cbz	r2, 80064de <_printf_common+0x26>
 80064da:	3301      	adds	r3, #1
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	0699      	lsls	r1, r3, #26
 80064e2:	bf42      	ittt	mi
 80064e4:	6833      	ldrmi	r3, [r6, #0]
 80064e6:	3302      	addmi	r3, #2
 80064e8:	6033      	strmi	r3, [r6, #0]
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	f015 0506 	ands.w	r5, r5, #6
 80064f0:	d106      	bne.n	8006500 <_printf_common+0x48>
 80064f2:	f104 0a19 	add.w	sl, r4, #25
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	6832      	ldr	r2, [r6, #0]
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dc26      	bgt.n	800654e <_printf_common+0x96>
 8006500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006504:	1e13      	subs	r3, r2, #0
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	bf18      	it	ne
 800650a:	2301      	movne	r3, #1
 800650c:	0692      	lsls	r2, r2, #26
 800650e:	d42b      	bmi.n	8006568 <_printf_common+0xb0>
 8006510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006514:	4649      	mov	r1, r9
 8006516:	4638      	mov	r0, r7
 8006518:	47c0      	blx	r8
 800651a:	3001      	adds	r0, #1
 800651c:	d01e      	beq.n	800655c <_printf_common+0xa4>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	68e5      	ldr	r5, [r4, #12]
 8006522:	6832      	ldr	r2, [r6, #0]
 8006524:	f003 0306 	and.w	r3, r3, #6
 8006528:	2b04      	cmp	r3, #4
 800652a:	bf08      	it	eq
 800652c:	1aad      	subeq	r5, r5, r2
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	bf0c      	ite	eq
 8006534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006538:	2500      	movne	r5, #0
 800653a:	4293      	cmp	r3, r2
 800653c:	bfc4      	itt	gt
 800653e:	1a9b      	subgt	r3, r3, r2
 8006540:	18ed      	addgt	r5, r5, r3
 8006542:	2600      	movs	r6, #0
 8006544:	341a      	adds	r4, #26
 8006546:	42b5      	cmp	r5, r6
 8006548:	d11a      	bne.n	8006580 <_printf_common+0xc8>
 800654a:	2000      	movs	r0, #0
 800654c:	e008      	b.n	8006560 <_printf_common+0xa8>
 800654e:	2301      	movs	r3, #1
 8006550:	4652      	mov	r2, sl
 8006552:	4649      	mov	r1, r9
 8006554:	4638      	mov	r0, r7
 8006556:	47c0      	blx	r8
 8006558:	3001      	adds	r0, #1
 800655a:	d103      	bne.n	8006564 <_printf_common+0xac>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006564:	3501      	adds	r5, #1
 8006566:	e7c6      	b.n	80064f6 <_printf_common+0x3e>
 8006568:	18e1      	adds	r1, r4, r3
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	2030      	movs	r0, #48	; 0x30
 800656e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006572:	4422      	add	r2, r4
 8006574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800657c:	3302      	adds	r3, #2
 800657e:	e7c7      	b.n	8006510 <_printf_common+0x58>
 8006580:	2301      	movs	r3, #1
 8006582:	4622      	mov	r2, r4
 8006584:	4649      	mov	r1, r9
 8006586:	4638      	mov	r0, r7
 8006588:	47c0      	blx	r8
 800658a:	3001      	adds	r0, #1
 800658c:	d0e6      	beq.n	800655c <_printf_common+0xa4>
 800658e:	3601      	adds	r6, #1
 8006590:	e7d9      	b.n	8006546 <_printf_common+0x8e>
	...

08006594 <_printf_i>:
 8006594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	4691      	mov	r9, r2
 800659c:	7e27      	ldrb	r7, [r4, #24]
 800659e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065a0:	2f78      	cmp	r7, #120	; 0x78
 80065a2:	4680      	mov	r8, r0
 80065a4:	469a      	mov	sl, r3
 80065a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065aa:	d807      	bhi.n	80065bc <_printf_i+0x28>
 80065ac:	2f62      	cmp	r7, #98	; 0x62
 80065ae:	d80a      	bhi.n	80065c6 <_printf_i+0x32>
 80065b0:	2f00      	cmp	r7, #0
 80065b2:	f000 80d8 	beq.w	8006766 <_printf_i+0x1d2>
 80065b6:	2f58      	cmp	r7, #88	; 0x58
 80065b8:	f000 80a3 	beq.w	8006702 <_printf_i+0x16e>
 80065bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065c4:	e03a      	b.n	800663c <_printf_i+0xa8>
 80065c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ca:	2b15      	cmp	r3, #21
 80065cc:	d8f6      	bhi.n	80065bc <_printf_i+0x28>
 80065ce:	a001      	add	r0, pc, #4	; (adr r0, 80065d4 <_printf_i+0x40>)
 80065d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065d4:	0800662d 	.word	0x0800662d
 80065d8:	08006641 	.word	0x08006641
 80065dc:	080065bd 	.word	0x080065bd
 80065e0:	080065bd 	.word	0x080065bd
 80065e4:	080065bd 	.word	0x080065bd
 80065e8:	080065bd 	.word	0x080065bd
 80065ec:	08006641 	.word	0x08006641
 80065f0:	080065bd 	.word	0x080065bd
 80065f4:	080065bd 	.word	0x080065bd
 80065f8:	080065bd 	.word	0x080065bd
 80065fc:	080065bd 	.word	0x080065bd
 8006600:	0800674d 	.word	0x0800674d
 8006604:	08006671 	.word	0x08006671
 8006608:	0800672f 	.word	0x0800672f
 800660c:	080065bd 	.word	0x080065bd
 8006610:	080065bd 	.word	0x080065bd
 8006614:	0800676f 	.word	0x0800676f
 8006618:	080065bd 	.word	0x080065bd
 800661c:	08006671 	.word	0x08006671
 8006620:	080065bd 	.word	0x080065bd
 8006624:	080065bd 	.word	0x080065bd
 8006628:	08006737 	.word	0x08006737
 800662c:	680b      	ldr	r3, [r1, #0]
 800662e:	1d1a      	adds	r2, r3, #4
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	600a      	str	r2, [r1, #0]
 8006634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800663c:	2301      	movs	r3, #1
 800663e:	e0a3      	b.n	8006788 <_printf_i+0x1f4>
 8006640:	6825      	ldr	r5, [r4, #0]
 8006642:	6808      	ldr	r0, [r1, #0]
 8006644:	062e      	lsls	r6, r5, #24
 8006646:	f100 0304 	add.w	r3, r0, #4
 800664a:	d50a      	bpl.n	8006662 <_printf_i+0xce>
 800664c:	6805      	ldr	r5, [r0, #0]
 800664e:	600b      	str	r3, [r1, #0]
 8006650:	2d00      	cmp	r5, #0
 8006652:	da03      	bge.n	800665c <_printf_i+0xc8>
 8006654:	232d      	movs	r3, #45	; 0x2d
 8006656:	426d      	negs	r5, r5
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800665c:	485e      	ldr	r0, [pc, #376]	; (80067d8 <_printf_i+0x244>)
 800665e:	230a      	movs	r3, #10
 8006660:	e019      	b.n	8006696 <_printf_i+0x102>
 8006662:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006666:	6805      	ldr	r5, [r0, #0]
 8006668:	600b      	str	r3, [r1, #0]
 800666a:	bf18      	it	ne
 800666c:	b22d      	sxthne	r5, r5
 800666e:	e7ef      	b.n	8006650 <_printf_i+0xbc>
 8006670:	680b      	ldr	r3, [r1, #0]
 8006672:	6825      	ldr	r5, [r4, #0]
 8006674:	1d18      	adds	r0, r3, #4
 8006676:	6008      	str	r0, [r1, #0]
 8006678:	0628      	lsls	r0, r5, #24
 800667a:	d501      	bpl.n	8006680 <_printf_i+0xec>
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	e002      	b.n	8006686 <_printf_i+0xf2>
 8006680:	0669      	lsls	r1, r5, #25
 8006682:	d5fb      	bpl.n	800667c <_printf_i+0xe8>
 8006684:	881d      	ldrh	r5, [r3, #0]
 8006686:	4854      	ldr	r0, [pc, #336]	; (80067d8 <_printf_i+0x244>)
 8006688:	2f6f      	cmp	r7, #111	; 0x6f
 800668a:	bf0c      	ite	eq
 800668c:	2308      	moveq	r3, #8
 800668e:	230a      	movne	r3, #10
 8006690:	2100      	movs	r1, #0
 8006692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006696:	6866      	ldr	r6, [r4, #4]
 8006698:	60a6      	str	r6, [r4, #8]
 800669a:	2e00      	cmp	r6, #0
 800669c:	bfa2      	ittt	ge
 800669e:	6821      	ldrge	r1, [r4, #0]
 80066a0:	f021 0104 	bicge.w	r1, r1, #4
 80066a4:	6021      	strge	r1, [r4, #0]
 80066a6:	b90d      	cbnz	r5, 80066ac <_printf_i+0x118>
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	d04d      	beq.n	8006748 <_printf_i+0x1b4>
 80066ac:	4616      	mov	r6, r2
 80066ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80066b2:	fb03 5711 	mls	r7, r3, r1, r5
 80066b6:	5dc7      	ldrb	r7, [r0, r7]
 80066b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066bc:	462f      	mov	r7, r5
 80066be:	42bb      	cmp	r3, r7
 80066c0:	460d      	mov	r5, r1
 80066c2:	d9f4      	bls.n	80066ae <_printf_i+0x11a>
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d10b      	bne.n	80066e0 <_printf_i+0x14c>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	07df      	lsls	r7, r3, #31
 80066cc:	d508      	bpl.n	80066e0 <_printf_i+0x14c>
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	6861      	ldr	r1, [r4, #4]
 80066d2:	4299      	cmp	r1, r3
 80066d4:	bfde      	ittt	le
 80066d6:	2330      	movle	r3, #48	; 0x30
 80066d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066e0:	1b92      	subs	r2, r2, r6
 80066e2:	6122      	str	r2, [r4, #16]
 80066e4:	f8cd a000 	str.w	sl, [sp]
 80066e8:	464b      	mov	r3, r9
 80066ea:	aa03      	add	r2, sp, #12
 80066ec:	4621      	mov	r1, r4
 80066ee:	4640      	mov	r0, r8
 80066f0:	f7ff fee2 	bl	80064b8 <_printf_common>
 80066f4:	3001      	adds	r0, #1
 80066f6:	d14c      	bne.n	8006792 <_printf_i+0x1fe>
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	b004      	add	sp, #16
 80066fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006702:	4835      	ldr	r0, [pc, #212]	; (80067d8 <_printf_i+0x244>)
 8006704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	680e      	ldr	r6, [r1, #0]
 800670c:	061f      	lsls	r7, r3, #24
 800670e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006712:	600e      	str	r6, [r1, #0]
 8006714:	d514      	bpl.n	8006740 <_printf_i+0x1ac>
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	bf44      	itt	mi
 800671a:	f043 0320 	orrmi.w	r3, r3, #32
 800671e:	6023      	strmi	r3, [r4, #0]
 8006720:	b91d      	cbnz	r5, 800672a <_printf_i+0x196>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f023 0320 	bic.w	r3, r3, #32
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	2310      	movs	r3, #16
 800672c:	e7b0      	b.n	8006690 <_printf_i+0xfc>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	f043 0320 	orr.w	r3, r3, #32
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	2378      	movs	r3, #120	; 0x78
 8006738:	4828      	ldr	r0, [pc, #160]	; (80067dc <_printf_i+0x248>)
 800673a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800673e:	e7e3      	b.n	8006708 <_printf_i+0x174>
 8006740:	065e      	lsls	r6, r3, #25
 8006742:	bf48      	it	mi
 8006744:	b2ad      	uxthmi	r5, r5
 8006746:	e7e6      	b.n	8006716 <_printf_i+0x182>
 8006748:	4616      	mov	r6, r2
 800674a:	e7bb      	b.n	80066c4 <_printf_i+0x130>
 800674c:	680b      	ldr	r3, [r1, #0]
 800674e:	6826      	ldr	r6, [r4, #0]
 8006750:	6960      	ldr	r0, [r4, #20]
 8006752:	1d1d      	adds	r5, r3, #4
 8006754:	600d      	str	r5, [r1, #0]
 8006756:	0635      	lsls	r5, r6, #24
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	d501      	bpl.n	8006760 <_printf_i+0x1cc>
 800675c:	6018      	str	r0, [r3, #0]
 800675e:	e002      	b.n	8006766 <_printf_i+0x1d2>
 8006760:	0671      	lsls	r1, r6, #25
 8006762:	d5fb      	bpl.n	800675c <_printf_i+0x1c8>
 8006764:	8018      	strh	r0, [r3, #0]
 8006766:	2300      	movs	r3, #0
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	4616      	mov	r6, r2
 800676c:	e7ba      	b.n	80066e4 <_printf_i+0x150>
 800676e:	680b      	ldr	r3, [r1, #0]
 8006770:	1d1a      	adds	r2, r3, #4
 8006772:	600a      	str	r2, [r1, #0]
 8006774:	681e      	ldr	r6, [r3, #0]
 8006776:	6862      	ldr	r2, [r4, #4]
 8006778:	2100      	movs	r1, #0
 800677a:	4630      	mov	r0, r6
 800677c:	f7f9 fd48 	bl	8000210 <memchr>
 8006780:	b108      	cbz	r0, 8006786 <_printf_i+0x1f2>
 8006782:	1b80      	subs	r0, r0, r6
 8006784:	6060      	str	r0, [r4, #4]
 8006786:	6863      	ldr	r3, [r4, #4]
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	2300      	movs	r3, #0
 800678c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006790:	e7a8      	b.n	80066e4 <_printf_i+0x150>
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	4632      	mov	r2, r6
 8006796:	4649      	mov	r1, r9
 8006798:	4640      	mov	r0, r8
 800679a:	47d0      	blx	sl
 800679c:	3001      	adds	r0, #1
 800679e:	d0ab      	beq.n	80066f8 <_printf_i+0x164>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	079b      	lsls	r3, r3, #30
 80067a4:	d413      	bmi.n	80067ce <_printf_i+0x23a>
 80067a6:	68e0      	ldr	r0, [r4, #12]
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	4298      	cmp	r0, r3
 80067ac:	bfb8      	it	lt
 80067ae:	4618      	movlt	r0, r3
 80067b0:	e7a4      	b.n	80066fc <_printf_i+0x168>
 80067b2:	2301      	movs	r3, #1
 80067b4:	4632      	mov	r2, r6
 80067b6:	4649      	mov	r1, r9
 80067b8:	4640      	mov	r0, r8
 80067ba:	47d0      	blx	sl
 80067bc:	3001      	adds	r0, #1
 80067be:	d09b      	beq.n	80066f8 <_printf_i+0x164>
 80067c0:	3501      	adds	r5, #1
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	9903      	ldr	r1, [sp, #12]
 80067c6:	1a5b      	subs	r3, r3, r1
 80067c8:	42ab      	cmp	r3, r5
 80067ca:	dcf2      	bgt.n	80067b2 <_printf_i+0x21e>
 80067cc:	e7eb      	b.n	80067a6 <_printf_i+0x212>
 80067ce:	2500      	movs	r5, #0
 80067d0:	f104 0619 	add.w	r6, r4, #25
 80067d4:	e7f5      	b.n	80067c2 <_printf_i+0x22e>
 80067d6:	bf00      	nop
 80067d8:	08006ff5 	.word	0x08006ff5
 80067dc:	08007006 	.word	0x08007006

080067e0 <_sbrk_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d06      	ldr	r5, [pc, #24]	; (80067fc <_sbrk_r+0x1c>)
 80067e4:	2300      	movs	r3, #0
 80067e6:	4604      	mov	r4, r0
 80067e8:	4608      	mov	r0, r1
 80067ea:	602b      	str	r3, [r5, #0]
 80067ec:	f7fa fd72 	bl	80012d4 <_sbrk>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_sbrk_r+0x1a>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_sbrk_r+0x1a>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	20004344 	.word	0x20004344

08006800 <__sread>:
 8006800:	b510      	push	{r4, lr}
 8006802:	460c      	mov	r4, r1
 8006804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006808:	f000 fab4 	bl	8006d74 <_read_r>
 800680c:	2800      	cmp	r0, #0
 800680e:	bfab      	itete	ge
 8006810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006812:	89a3      	ldrhlt	r3, [r4, #12]
 8006814:	181b      	addge	r3, r3, r0
 8006816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800681a:	bfac      	ite	ge
 800681c:	6563      	strge	r3, [r4, #84]	; 0x54
 800681e:	81a3      	strhlt	r3, [r4, #12]
 8006820:	bd10      	pop	{r4, pc}

08006822 <__swrite>:
 8006822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006826:	461f      	mov	r7, r3
 8006828:	898b      	ldrh	r3, [r1, #12]
 800682a:	05db      	lsls	r3, r3, #23
 800682c:	4605      	mov	r5, r0
 800682e:	460c      	mov	r4, r1
 8006830:	4616      	mov	r6, r2
 8006832:	d505      	bpl.n	8006840 <__swrite+0x1e>
 8006834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006838:	2302      	movs	r3, #2
 800683a:	2200      	movs	r2, #0
 800683c:	f000 f9c8 	bl	8006bd0 <_lseek_r>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	4632      	mov	r2, r6
 800684e:	463b      	mov	r3, r7
 8006850:	4628      	mov	r0, r5
 8006852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	f000 b869 	b.w	800692c <_write_r>

0800685a <__sseek>:
 800685a:	b510      	push	{r4, lr}
 800685c:	460c      	mov	r4, r1
 800685e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006862:	f000 f9b5 	bl	8006bd0 <_lseek_r>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	bf15      	itete	ne
 800686c:	6560      	strne	r0, [r4, #84]	; 0x54
 800686e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006876:	81a3      	strheq	r3, [r4, #12]
 8006878:	bf18      	it	ne
 800687a:	81a3      	strhne	r3, [r4, #12]
 800687c:	bd10      	pop	{r4, pc}

0800687e <__sclose>:
 800687e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006882:	f000 b8d3 	b.w	8006a2c <_close_r>
	...

08006888 <__swbuf_r>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	460e      	mov	r6, r1
 800688c:	4614      	mov	r4, r2
 800688e:	4605      	mov	r5, r0
 8006890:	b118      	cbz	r0, 800689a <__swbuf_r+0x12>
 8006892:	6983      	ldr	r3, [r0, #24]
 8006894:	b90b      	cbnz	r3, 800689a <__swbuf_r+0x12>
 8006896:	f7ff fbbb 	bl	8006010 <__sinit>
 800689a:	4b21      	ldr	r3, [pc, #132]	; (8006920 <__swbuf_r+0x98>)
 800689c:	429c      	cmp	r4, r3
 800689e:	d12b      	bne.n	80068f8 <__swbuf_r+0x70>
 80068a0:	686c      	ldr	r4, [r5, #4]
 80068a2:	69a3      	ldr	r3, [r4, #24]
 80068a4:	60a3      	str	r3, [r4, #8]
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	071a      	lsls	r2, r3, #28
 80068aa:	d52f      	bpl.n	800690c <__swbuf_r+0x84>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	b36b      	cbz	r3, 800690c <__swbuf_r+0x84>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	1ac0      	subs	r0, r0, r3
 80068b6:	6963      	ldr	r3, [r4, #20]
 80068b8:	b2f6      	uxtb	r6, r6
 80068ba:	4283      	cmp	r3, r0
 80068bc:	4637      	mov	r7, r6
 80068be:	dc04      	bgt.n	80068ca <__swbuf_r+0x42>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 f948 	bl	8006b58 <_fflush_r>
 80068c8:	bb30      	cbnz	r0, 8006918 <__swbuf_r+0x90>
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	60a3      	str	r3, [r4, #8]
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	6022      	str	r2, [r4, #0]
 80068d6:	701e      	strb	r6, [r3, #0]
 80068d8:	6963      	ldr	r3, [r4, #20]
 80068da:	3001      	adds	r0, #1
 80068dc:	4283      	cmp	r3, r0
 80068de:	d004      	beq.n	80068ea <__swbuf_r+0x62>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	07db      	lsls	r3, r3, #31
 80068e4:	d506      	bpl.n	80068f4 <__swbuf_r+0x6c>
 80068e6:	2e0a      	cmp	r6, #10
 80068e8:	d104      	bne.n	80068f4 <__swbuf_r+0x6c>
 80068ea:	4621      	mov	r1, r4
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f933 	bl	8006b58 <_fflush_r>
 80068f2:	b988      	cbnz	r0, 8006918 <__swbuf_r+0x90>
 80068f4:	4638      	mov	r0, r7
 80068f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <__swbuf_r+0x9c>)
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d101      	bne.n	8006902 <__swbuf_r+0x7a>
 80068fe:	68ac      	ldr	r4, [r5, #8]
 8006900:	e7cf      	b.n	80068a2 <__swbuf_r+0x1a>
 8006902:	4b09      	ldr	r3, [pc, #36]	; (8006928 <__swbuf_r+0xa0>)
 8006904:	429c      	cmp	r4, r3
 8006906:	bf08      	it	eq
 8006908:	68ec      	ldreq	r4, [r5, #12]
 800690a:	e7ca      	b.n	80068a2 <__swbuf_r+0x1a>
 800690c:	4621      	mov	r1, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f81e 	bl	8006950 <__swsetup_r>
 8006914:	2800      	cmp	r0, #0
 8006916:	d0cb      	beq.n	80068b0 <__swbuf_r+0x28>
 8006918:	f04f 37ff 	mov.w	r7, #4294967295
 800691c:	e7ea      	b.n	80068f4 <__swbuf_r+0x6c>
 800691e:	bf00      	nop
 8006920:	08006fa4 	.word	0x08006fa4
 8006924:	08006fc4 	.word	0x08006fc4
 8006928:	08006f84 	.word	0x08006f84

0800692c <_write_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	; (800694c <_write_r+0x20>)
 8006930:	4604      	mov	r4, r0
 8006932:	4608      	mov	r0, r1
 8006934:	4611      	mov	r1, r2
 8006936:	2200      	movs	r2, #0
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7fa fc79 	bl	8001232 <_write>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_write_r+0x1e>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_write_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20004344 	.word	0x20004344

08006950 <__swsetup_r>:
 8006950:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <__swsetup_r+0xcc>)
 8006952:	b570      	push	{r4, r5, r6, lr}
 8006954:	681d      	ldr	r5, [r3, #0]
 8006956:	4606      	mov	r6, r0
 8006958:	460c      	mov	r4, r1
 800695a:	b125      	cbz	r5, 8006966 <__swsetup_r+0x16>
 800695c:	69ab      	ldr	r3, [r5, #24]
 800695e:	b913      	cbnz	r3, 8006966 <__swsetup_r+0x16>
 8006960:	4628      	mov	r0, r5
 8006962:	f7ff fb55 	bl	8006010 <__sinit>
 8006966:	4b2e      	ldr	r3, [pc, #184]	; (8006a20 <__swsetup_r+0xd0>)
 8006968:	429c      	cmp	r4, r3
 800696a:	d10f      	bne.n	800698c <__swsetup_r+0x3c>
 800696c:	686c      	ldr	r4, [r5, #4]
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006974:	0719      	lsls	r1, r3, #28
 8006976:	d42c      	bmi.n	80069d2 <__swsetup_r+0x82>
 8006978:	06dd      	lsls	r5, r3, #27
 800697a:	d411      	bmi.n	80069a0 <__swsetup_r+0x50>
 800697c:	2309      	movs	r3, #9
 800697e:	6033      	str	r3, [r6, #0]
 8006980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006984:	81a3      	strh	r3, [r4, #12]
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	e03e      	b.n	8006a0a <__swsetup_r+0xba>
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <__swsetup_r+0xd4>)
 800698e:	429c      	cmp	r4, r3
 8006990:	d101      	bne.n	8006996 <__swsetup_r+0x46>
 8006992:	68ac      	ldr	r4, [r5, #8]
 8006994:	e7eb      	b.n	800696e <__swsetup_r+0x1e>
 8006996:	4b24      	ldr	r3, [pc, #144]	; (8006a28 <__swsetup_r+0xd8>)
 8006998:	429c      	cmp	r4, r3
 800699a:	bf08      	it	eq
 800699c:	68ec      	ldreq	r4, [r5, #12]
 800699e:	e7e6      	b.n	800696e <__swsetup_r+0x1e>
 80069a0:	0758      	lsls	r0, r3, #29
 80069a2:	d512      	bpl.n	80069ca <__swsetup_r+0x7a>
 80069a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069a6:	b141      	cbz	r1, 80069ba <__swsetup_r+0x6a>
 80069a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d002      	beq.n	80069b6 <__swsetup_r+0x66>
 80069b0:	4630      	mov	r0, r6
 80069b2:	f000 f98f 	bl	8006cd4 <_free_r>
 80069b6:	2300      	movs	r3, #0
 80069b8:	6363      	str	r3, [r4, #52]	; 0x34
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f043 0308 	orr.w	r3, r3, #8
 80069d0:	81a3      	strh	r3, [r4, #12]
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	b94b      	cbnz	r3, 80069ea <__swsetup_r+0x9a>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d003      	beq.n	80069ea <__swsetup_r+0x9a>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f929 	bl	8006c3c <__smakebuf_r>
 80069ea:	89a0      	ldrh	r0, [r4, #12]
 80069ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069f0:	f010 0301 	ands.w	r3, r0, #1
 80069f4:	d00a      	beq.n	8006a0c <__swsetup_r+0xbc>
 80069f6:	2300      	movs	r3, #0
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6963      	ldr	r3, [r4, #20]
 80069fc:	425b      	negs	r3, r3
 80069fe:	61a3      	str	r3, [r4, #24]
 8006a00:	6923      	ldr	r3, [r4, #16]
 8006a02:	b943      	cbnz	r3, 8006a16 <__swsetup_r+0xc6>
 8006a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a08:	d1ba      	bne.n	8006980 <__swsetup_r+0x30>
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	0781      	lsls	r1, r0, #30
 8006a0e:	bf58      	it	pl
 8006a10:	6963      	ldrpl	r3, [r4, #20]
 8006a12:	60a3      	str	r3, [r4, #8]
 8006a14:	e7f4      	b.n	8006a00 <__swsetup_r+0xb0>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e7f7      	b.n	8006a0a <__swsetup_r+0xba>
 8006a1a:	bf00      	nop
 8006a1c:	20000010 	.word	0x20000010
 8006a20:	08006fa4 	.word	0x08006fa4
 8006a24:	08006fc4 	.word	0x08006fc4
 8006a28:	08006f84 	.word	0x08006f84

08006a2c <_close_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d06      	ldr	r5, [pc, #24]	; (8006a48 <_close_r+0x1c>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fa fc17 	bl	800126a <_close>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_close_r+0x1a>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_close_r+0x1a>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20004344 	.word	0x20004344

08006a4c <__sflush_r>:
 8006a4c:	898a      	ldrh	r2, [r1, #12]
 8006a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	4605      	mov	r5, r0
 8006a54:	0710      	lsls	r0, r2, #28
 8006a56:	460c      	mov	r4, r1
 8006a58:	d458      	bmi.n	8006b0c <__sflush_r+0xc0>
 8006a5a:	684b      	ldr	r3, [r1, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	dc05      	bgt.n	8006a6c <__sflush_r+0x20>
 8006a60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dc02      	bgt.n	8006a6c <__sflush_r+0x20>
 8006a66:	2000      	movs	r0, #0
 8006a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a6e:	2e00      	cmp	r6, #0
 8006a70:	d0f9      	beq.n	8006a66 <__sflush_r+0x1a>
 8006a72:	2300      	movs	r3, #0
 8006a74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a78:	682f      	ldr	r7, [r5, #0]
 8006a7a:	602b      	str	r3, [r5, #0]
 8006a7c:	d032      	beq.n	8006ae4 <__sflush_r+0x98>
 8006a7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	075a      	lsls	r2, r3, #29
 8006a84:	d505      	bpl.n	8006a92 <__sflush_r+0x46>
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	1ac0      	subs	r0, r0, r3
 8006a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a8c:	b10b      	cbz	r3, 8006a92 <__sflush_r+0x46>
 8006a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a90:	1ac0      	subs	r0, r0, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	4602      	mov	r2, r0
 8006a96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a98:	6a21      	ldr	r1, [r4, #32]
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b0      	blx	r6
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	d106      	bne.n	8006ab2 <__sflush_r+0x66>
 8006aa4:	6829      	ldr	r1, [r5, #0]
 8006aa6:	291d      	cmp	r1, #29
 8006aa8:	d82c      	bhi.n	8006b04 <__sflush_r+0xb8>
 8006aaa:	4a2a      	ldr	r2, [pc, #168]	; (8006b54 <__sflush_r+0x108>)
 8006aac:	40ca      	lsrs	r2, r1
 8006aae:	07d6      	lsls	r6, r2, #31
 8006ab0:	d528      	bpl.n	8006b04 <__sflush_r+0xb8>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	6062      	str	r2, [r4, #4]
 8006ab6:	04d9      	lsls	r1, r3, #19
 8006ab8:	6922      	ldr	r2, [r4, #16]
 8006aba:	6022      	str	r2, [r4, #0]
 8006abc:	d504      	bpl.n	8006ac8 <__sflush_r+0x7c>
 8006abe:	1c42      	adds	r2, r0, #1
 8006ac0:	d101      	bne.n	8006ac6 <__sflush_r+0x7a>
 8006ac2:	682b      	ldr	r3, [r5, #0]
 8006ac4:	b903      	cbnz	r3, 8006ac8 <__sflush_r+0x7c>
 8006ac6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aca:	602f      	str	r7, [r5, #0]
 8006acc:	2900      	cmp	r1, #0
 8006ace:	d0ca      	beq.n	8006a66 <__sflush_r+0x1a>
 8006ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad4:	4299      	cmp	r1, r3
 8006ad6:	d002      	beq.n	8006ade <__sflush_r+0x92>
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f8fb 	bl	8006cd4 <_free_r>
 8006ade:	2000      	movs	r0, #0
 8006ae0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae2:	e7c1      	b.n	8006a68 <__sflush_r+0x1c>
 8006ae4:	6a21      	ldr	r1, [r4, #32]
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b0      	blx	r6
 8006aec:	1c41      	adds	r1, r0, #1
 8006aee:	d1c7      	bne.n	8006a80 <__sflush_r+0x34>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0c4      	beq.n	8006a80 <__sflush_r+0x34>
 8006af6:	2b1d      	cmp	r3, #29
 8006af8:	d001      	beq.n	8006afe <__sflush_r+0xb2>
 8006afa:	2b16      	cmp	r3, #22
 8006afc:	d101      	bne.n	8006b02 <__sflush_r+0xb6>
 8006afe:	602f      	str	r7, [r5, #0]
 8006b00:	e7b1      	b.n	8006a66 <__sflush_r+0x1a>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	e7ad      	b.n	8006a68 <__sflush_r+0x1c>
 8006b0c:	690f      	ldr	r7, [r1, #16]
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	d0a9      	beq.n	8006a66 <__sflush_r+0x1a>
 8006b12:	0793      	lsls	r3, r2, #30
 8006b14:	680e      	ldr	r6, [r1, #0]
 8006b16:	bf08      	it	eq
 8006b18:	694b      	ldreq	r3, [r1, #20]
 8006b1a:	600f      	str	r7, [r1, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	2300      	movne	r3, #0
 8006b20:	eba6 0807 	sub.w	r8, r6, r7
 8006b24:	608b      	str	r3, [r1, #8]
 8006b26:	f1b8 0f00 	cmp.w	r8, #0
 8006b2a:	dd9c      	ble.n	8006a66 <__sflush_r+0x1a>
 8006b2c:	6a21      	ldr	r1, [r4, #32]
 8006b2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b30:	4643      	mov	r3, r8
 8006b32:	463a      	mov	r2, r7
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b0      	blx	r6
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dc06      	bgt.n	8006b4a <__sflush_r+0xfe>
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	e78e      	b.n	8006a68 <__sflush_r+0x1c>
 8006b4a:	4407      	add	r7, r0
 8006b4c:	eba8 0800 	sub.w	r8, r8, r0
 8006b50:	e7e9      	b.n	8006b26 <__sflush_r+0xda>
 8006b52:	bf00      	nop
 8006b54:	20400001 	.word	0x20400001

08006b58 <_fflush_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	690b      	ldr	r3, [r1, #16]
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	b913      	cbnz	r3, 8006b68 <_fflush_r+0x10>
 8006b62:	2500      	movs	r5, #0
 8006b64:	4628      	mov	r0, r5
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	b118      	cbz	r0, 8006b72 <_fflush_r+0x1a>
 8006b6a:	6983      	ldr	r3, [r0, #24]
 8006b6c:	b90b      	cbnz	r3, 8006b72 <_fflush_r+0x1a>
 8006b6e:	f7ff fa4f 	bl	8006010 <__sinit>
 8006b72:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <_fflush_r+0x6c>)
 8006b74:	429c      	cmp	r4, r3
 8006b76:	d11b      	bne.n	8006bb0 <_fflush_r+0x58>
 8006b78:	686c      	ldr	r4, [r5, #4]
 8006b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ef      	beq.n	8006b62 <_fflush_r+0xa>
 8006b82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b84:	07d0      	lsls	r0, r2, #31
 8006b86:	d404      	bmi.n	8006b92 <_fflush_r+0x3a>
 8006b88:	0599      	lsls	r1, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_fflush_r+0x3a>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8e:	f7ff fadd 	bl	800614c <__retarget_lock_acquire_recursive>
 8006b92:	4628      	mov	r0, r5
 8006b94:	4621      	mov	r1, r4
 8006b96:	f7ff ff59 	bl	8006a4c <__sflush_r>
 8006b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b9c:	07da      	lsls	r2, r3, #31
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	d4e0      	bmi.n	8006b64 <_fflush_r+0xc>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	059b      	lsls	r3, r3, #22
 8006ba6:	d4dd      	bmi.n	8006b64 <_fflush_r+0xc>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006baa:	f7ff fad0 	bl	800614e <__retarget_lock_release_recursive>
 8006bae:	e7d9      	b.n	8006b64 <_fflush_r+0xc>
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <_fflush_r+0x70>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d101      	bne.n	8006bba <_fflush_r+0x62>
 8006bb6:	68ac      	ldr	r4, [r5, #8]
 8006bb8:	e7df      	b.n	8006b7a <_fflush_r+0x22>
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <_fflush_r+0x74>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	bf08      	it	eq
 8006bc0:	68ec      	ldreq	r4, [r5, #12]
 8006bc2:	e7da      	b.n	8006b7a <_fflush_r+0x22>
 8006bc4:	08006fa4 	.word	0x08006fa4
 8006bc8:	08006fc4 	.word	0x08006fc4
 8006bcc:	08006f84 	.word	0x08006f84

08006bd0 <_lseek_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d07      	ldr	r5, [pc, #28]	; (8006bf0 <_lseek_r+0x20>)
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4611      	mov	r1, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f7fa fb6a 	bl	80012b8 <_lseek>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_lseek_r+0x1e>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_lseek_r+0x1e>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20004344 	.word	0x20004344

08006bf4 <__swhatbuf_r>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	460e      	mov	r6, r1
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	b096      	sub	sp, #88	; 0x58
 8006c00:	4614      	mov	r4, r2
 8006c02:	461d      	mov	r5, r3
 8006c04:	da07      	bge.n	8006c16 <__swhatbuf_r+0x22>
 8006c06:	2300      	movs	r3, #0
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	89b3      	ldrh	r3, [r6, #12]
 8006c0c:	061a      	lsls	r2, r3, #24
 8006c0e:	d410      	bmi.n	8006c32 <__swhatbuf_r+0x3e>
 8006c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c14:	e00e      	b.n	8006c34 <__swhatbuf_r+0x40>
 8006c16:	466a      	mov	r2, sp
 8006c18:	f000 f8be 	bl	8006d98 <_fstat_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	dbf2      	blt.n	8006c06 <__swhatbuf_r+0x12>
 8006c20:	9a01      	ldr	r2, [sp, #4]
 8006c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c2a:	425a      	negs	r2, r3
 8006c2c:	415a      	adcs	r2, r3
 8006c2e:	602a      	str	r2, [r5, #0]
 8006c30:	e7ee      	b.n	8006c10 <__swhatbuf_r+0x1c>
 8006c32:	2340      	movs	r3, #64	; 0x40
 8006c34:	2000      	movs	r0, #0
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	b016      	add	sp, #88	; 0x58
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}

08006c3c <__smakebuf_r>:
 8006c3c:	898b      	ldrh	r3, [r1, #12]
 8006c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c40:	079d      	lsls	r5, r3, #30
 8006c42:	4606      	mov	r6, r0
 8006c44:	460c      	mov	r4, r1
 8006c46:	d507      	bpl.n	8006c58 <__smakebuf_r+0x1c>
 8006c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	2301      	movs	r3, #1
 8006c52:	6163      	str	r3, [r4, #20]
 8006c54:	b002      	add	sp, #8
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	ab01      	add	r3, sp, #4
 8006c5a:	466a      	mov	r2, sp
 8006c5c:	f7ff ffca 	bl	8006bf4 <__swhatbuf_r>
 8006c60:	9900      	ldr	r1, [sp, #0]
 8006c62:	4605      	mov	r5, r0
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7ff fa73 	bl	8006150 <_malloc_r>
 8006c6a:	b948      	cbnz	r0, 8006c80 <__smakebuf_r+0x44>
 8006c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c70:	059a      	lsls	r2, r3, #22
 8006c72:	d4ef      	bmi.n	8006c54 <__smakebuf_r+0x18>
 8006c74:	f023 0303 	bic.w	r3, r3, #3
 8006c78:	f043 0302 	orr.w	r3, r3, #2
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	e7e3      	b.n	8006c48 <__smakebuf_r+0xc>
 8006c80:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <__smakebuf_r+0x7c>)
 8006c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	6020      	str	r0, [r4, #0]
 8006c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8c:	81a3      	strh	r3, [r4, #12]
 8006c8e:	9b00      	ldr	r3, [sp, #0]
 8006c90:	6163      	str	r3, [r4, #20]
 8006c92:	9b01      	ldr	r3, [sp, #4]
 8006c94:	6120      	str	r0, [r4, #16]
 8006c96:	b15b      	cbz	r3, 8006cb0 <__smakebuf_r+0x74>
 8006c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f000 f88d 	bl	8006dbc <_isatty_r>
 8006ca2:	b128      	cbz	r0, 8006cb0 <__smakebuf_r+0x74>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f023 0303 	bic.w	r3, r3, #3
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	89a0      	ldrh	r0, [r4, #12]
 8006cb2:	4305      	orrs	r5, r0
 8006cb4:	81a5      	strh	r5, [r4, #12]
 8006cb6:	e7cd      	b.n	8006c54 <__smakebuf_r+0x18>
 8006cb8:	08005fa9 	.word	0x08005fa9

08006cbc <__malloc_lock>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	; (8006cc4 <__malloc_lock+0x8>)
 8006cbe:	f7ff ba45 	b.w	800614c <__retarget_lock_acquire_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	2000433c 	.word	0x2000433c

08006cc8 <__malloc_unlock>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__malloc_unlock+0x8>)
 8006cca:	f7ff ba40 	b.w	800614e <__retarget_lock_release_recursive>
 8006cce:	bf00      	nop
 8006cd0:	2000433c 	.word	0x2000433c

08006cd4 <_free_r>:
 8006cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d048      	beq.n	8006d6c <_free_r+0x98>
 8006cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cde:	9001      	str	r0, [sp, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ce6:	bfb8      	it	lt
 8006ce8:	18e4      	addlt	r4, r4, r3
 8006cea:	f7ff ffe7 	bl	8006cbc <__malloc_lock>
 8006cee:	4a20      	ldr	r2, [pc, #128]	; (8006d70 <_free_r+0x9c>)
 8006cf0:	9801      	ldr	r0, [sp, #4]
 8006cf2:	6813      	ldr	r3, [r2, #0]
 8006cf4:	4615      	mov	r5, r2
 8006cf6:	b933      	cbnz	r3, 8006d06 <_free_r+0x32>
 8006cf8:	6063      	str	r3, [r4, #4]
 8006cfa:	6014      	str	r4, [r2, #0]
 8006cfc:	b003      	add	sp, #12
 8006cfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d02:	f7ff bfe1 	b.w	8006cc8 <__malloc_unlock>
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	d90b      	bls.n	8006d22 <_free_r+0x4e>
 8006d0a:	6821      	ldr	r1, [r4, #0]
 8006d0c:	1862      	adds	r2, r4, r1
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	bf04      	itt	eq
 8006d12:	681a      	ldreq	r2, [r3, #0]
 8006d14:	685b      	ldreq	r3, [r3, #4]
 8006d16:	6063      	str	r3, [r4, #4]
 8006d18:	bf04      	itt	eq
 8006d1a:	1852      	addeq	r2, r2, r1
 8006d1c:	6022      	streq	r2, [r4, #0]
 8006d1e:	602c      	str	r4, [r5, #0]
 8006d20:	e7ec      	b.n	8006cfc <_free_r+0x28>
 8006d22:	461a      	mov	r2, r3
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b10b      	cbz	r3, 8006d2c <_free_r+0x58>
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	d9fa      	bls.n	8006d22 <_free_r+0x4e>
 8006d2c:	6811      	ldr	r1, [r2, #0]
 8006d2e:	1855      	adds	r5, r2, r1
 8006d30:	42a5      	cmp	r5, r4
 8006d32:	d10b      	bne.n	8006d4c <_free_r+0x78>
 8006d34:	6824      	ldr	r4, [r4, #0]
 8006d36:	4421      	add	r1, r4
 8006d38:	1854      	adds	r4, r2, r1
 8006d3a:	42a3      	cmp	r3, r4
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	d1dd      	bne.n	8006cfc <_free_r+0x28>
 8006d40:	681c      	ldr	r4, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	6053      	str	r3, [r2, #4]
 8006d46:	4421      	add	r1, r4
 8006d48:	6011      	str	r1, [r2, #0]
 8006d4a:	e7d7      	b.n	8006cfc <_free_r+0x28>
 8006d4c:	d902      	bls.n	8006d54 <_free_r+0x80>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	6003      	str	r3, [r0, #0]
 8006d52:	e7d3      	b.n	8006cfc <_free_r+0x28>
 8006d54:	6825      	ldr	r5, [r4, #0]
 8006d56:	1961      	adds	r1, r4, r5
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	bf04      	itt	eq
 8006d5c:	6819      	ldreq	r1, [r3, #0]
 8006d5e:	685b      	ldreq	r3, [r3, #4]
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	bf04      	itt	eq
 8006d64:	1949      	addeq	r1, r1, r5
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	6054      	str	r4, [r2, #4]
 8006d6a:	e7c7      	b.n	8006cfc <_free_r+0x28>
 8006d6c:	b003      	add	sp, #12
 8006d6e:	bd30      	pop	{r4, r5, pc}
 8006d70:	20004038 	.word	0x20004038

08006d74 <_read_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	; (8006d94 <_read_r+0x20>)
 8006d78:	4604      	mov	r4, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fa fa38 	bl	80011f8 <_read>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_read_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_read_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20004344 	.word	0x20004344

08006d98 <_fstat_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	; (8006db8 <_fstat_r+0x20>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	f7fa fa6c 	bl	8001282 <_fstat>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d102      	bne.n	8006db4 <_fstat_r+0x1c>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	b103      	cbz	r3, 8006db4 <_fstat_r+0x1c>
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	bf00      	nop
 8006db8:	20004344 	.word	0x20004344

08006dbc <_isatty_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d06      	ldr	r5, [pc, #24]	; (8006dd8 <_isatty_r+0x1c>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fa fa6b 	bl	80012a2 <_isatty>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_isatty_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_isatty_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20004344 	.word	0x20004344

08006ddc <_init>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	bf00      	nop
 8006de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de2:	bc08      	pop	{r3}
 8006de4:	469e      	mov	lr, r3
 8006de6:	4770      	bx	lr

08006de8 <_fini>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr
=======
 800614a:	bf00      	nop
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	2000401c 	.word	0x2000401c
 800615c:	20004024 	.word	0x20004024

08006160 <__errno>:
 8006160:	4b01      	ldr	r3, [pc, #4]	; (8006168 <__errno+0x8>)
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000010 	.word	0x20000010

0800616c <__libc_init_array>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	4e0d      	ldr	r6, [pc, #52]	; (80061a4 <__libc_init_array+0x38>)
 8006170:	4c0d      	ldr	r4, [pc, #52]	; (80061a8 <__libc_init_array+0x3c>)
 8006172:	1ba4      	subs	r4, r4, r6
 8006174:	10a4      	asrs	r4, r4, #2
 8006176:	2500      	movs	r5, #0
 8006178:	42a5      	cmp	r5, r4
 800617a:	d109      	bne.n	8006190 <__libc_init_array+0x24>
 800617c:	4e0b      	ldr	r6, [pc, #44]	; (80061ac <__libc_init_array+0x40>)
 800617e:	4c0c      	ldr	r4, [pc, #48]	; (80061b0 <__libc_init_array+0x44>)
 8006180:	f000 ff04 	bl	8006f8c <_init>
 8006184:	1ba4      	subs	r4, r4, r6
 8006186:	10a4      	asrs	r4, r4, #2
 8006188:	2500      	movs	r5, #0
 800618a:	42a5      	cmp	r5, r4
 800618c:	d105      	bne.n	800619a <__libc_init_array+0x2e>
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006194:	4798      	blx	r3
 8006196:	3501      	adds	r5, #1
 8006198:	e7ee      	b.n	8006178 <__libc_init_array+0xc>
 800619a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800619e:	4798      	blx	r3
 80061a0:	3501      	adds	r5, #1
 80061a2:	e7f2      	b.n	800618a <__libc_init_array+0x1e>
 80061a4:	080071e8 	.word	0x080071e8
 80061a8:	080071e8 	.word	0x080071e8
 80061ac:	080071e8 	.word	0x080071e8
 80061b0:	080071ec 	.word	0x080071ec

080061b4 <memset>:
 80061b4:	4402      	add	r2, r0
 80061b6:	4603      	mov	r3, r0
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d100      	bne.n	80061be <memset+0xa>
 80061bc:	4770      	bx	lr
 80061be:	f803 1b01 	strb.w	r1, [r3], #1
 80061c2:	e7f9      	b.n	80061b8 <memset+0x4>

080061c4 <iprintf>:
 80061c4:	b40f      	push	{r0, r1, r2, r3}
 80061c6:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <iprintf+0x2c>)
 80061c8:	b513      	push	{r0, r1, r4, lr}
 80061ca:	681c      	ldr	r4, [r3, #0]
 80061cc:	b124      	cbz	r4, 80061d8 <iprintf+0x14>
 80061ce:	69a3      	ldr	r3, [r4, #24]
 80061d0:	b913      	cbnz	r3, 80061d8 <iprintf+0x14>
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f84e 	bl	8006274 <__sinit>
 80061d8:	ab05      	add	r3, sp, #20
 80061da:	9a04      	ldr	r2, [sp, #16]
 80061dc:	68a1      	ldr	r1, [r4, #8]
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f955 	bl	8006490 <_vfiprintf_r>
 80061e6:	b002      	add	sp, #8
 80061e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ec:	b004      	add	sp, #16
 80061ee:	4770      	bx	lr
 80061f0:	20000010 	.word	0x20000010

080061f4 <std>:
 80061f4:	2300      	movs	r3, #0
 80061f6:	b510      	push	{r4, lr}
 80061f8:	4604      	mov	r4, r0
 80061fa:	e9c0 3300 	strd	r3, r3, [r0]
 80061fe:	6083      	str	r3, [r0, #8]
 8006200:	8181      	strh	r1, [r0, #12]
 8006202:	6643      	str	r3, [r0, #100]	; 0x64
 8006204:	81c2      	strh	r2, [r0, #14]
 8006206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800620a:	6183      	str	r3, [r0, #24]
 800620c:	4619      	mov	r1, r3
 800620e:	2208      	movs	r2, #8
 8006210:	305c      	adds	r0, #92	; 0x5c
 8006212:	f7ff ffcf 	bl	80061b4 <memset>
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <std+0x38>)
 8006218:	6263      	str	r3, [r4, #36]	; 0x24
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <std+0x3c>)
 800621c:	62a3      	str	r3, [r4, #40]	; 0x28
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <std+0x40>)
 8006220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006222:	4b05      	ldr	r3, [pc, #20]	; (8006238 <std+0x44>)
 8006224:	6224      	str	r4, [r4, #32]
 8006226:	6323      	str	r3, [r4, #48]	; 0x30
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	080069ed 	.word	0x080069ed
 8006230:	08006a0f 	.word	0x08006a0f
 8006234:	08006a47 	.word	0x08006a47
 8006238:	08006a6b 	.word	0x08006a6b

0800623c <_cleanup_r>:
 800623c:	4901      	ldr	r1, [pc, #4]	; (8006244 <_cleanup_r+0x8>)
 800623e:	f000 b885 	b.w	800634c <_fwalk_reent>
 8006242:	bf00      	nop
 8006244:	08006d45 	.word	0x08006d45

08006248 <__sfmoreglue>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	1e4a      	subs	r2, r1, #1
 800624c:	2568      	movs	r5, #104	; 0x68
 800624e:	4355      	muls	r5, r2
 8006250:	460e      	mov	r6, r1
 8006252:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006256:	f000 f897 	bl	8006388 <_malloc_r>
 800625a:	4604      	mov	r4, r0
 800625c:	b140      	cbz	r0, 8006270 <__sfmoreglue+0x28>
 800625e:	2100      	movs	r1, #0
 8006260:	e9c0 1600 	strd	r1, r6, [r0]
 8006264:	300c      	adds	r0, #12
 8006266:	60a0      	str	r0, [r4, #8]
 8006268:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800626c:	f7ff ffa2 	bl	80061b4 <memset>
 8006270:	4620      	mov	r0, r4
 8006272:	bd70      	pop	{r4, r5, r6, pc}

08006274 <__sinit>:
 8006274:	6983      	ldr	r3, [r0, #24]
 8006276:	b510      	push	{r4, lr}
 8006278:	4604      	mov	r4, r0
 800627a:	bb33      	cbnz	r3, 80062ca <__sinit+0x56>
 800627c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006280:	6503      	str	r3, [r0, #80]	; 0x50
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <__sinit+0x58>)
 8006284:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <__sinit+0x5c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6282      	str	r2, [r0, #40]	; 0x28
 800628a:	4298      	cmp	r0, r3
 800628c:	bf04      	itt	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	6183      	streq	r3, [r0, #24]
 8006292:	f000 f81f 	bl	80062d4 <__sfp>
 8006296:	6060      	str	r0, [r4, #4]
 8006298:	4620      	mov	r0, r4
 800629a:	f000 f81b 	bl	80062d4 <__sfp>
 800629e:	60a0      	str	r0, [r4, #8]
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f817 	bl	80062d4 <__sfp>
 80062a6:	2200      	movs	r2, #0
 80062a8:	60e0      	str	r0, [r4, #12]
 80062aa:	2104      	movs	r1, #4
 80062ac:	6860      	ldr	r0, [r4, #4]
 80062ae:	f7ff ffa1 	bl	80061f4 <std>
 80062b2:	2201      	movs	r2, #1
 80062b4:	2109      	movs	r1, #9
 80062b6:	68a0      	ldr	r0, [r4, #8]
 80062b8:	f7ff ff9c 	bl	80061f4 <std>
 80062bc:	2202      	movs	r2, #2
 80062be:	2112      	movs	r1, #18
 80062c0:	68e0      	ldr	r0, [r4, #12]
 80062c2:	f7ff ff97 	bl	80061f4 <std>
 80062c6:	2301      	movs	r3, #1
 80062c8:	61a3      	str	r3, [r4, #24]
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	08007148 	.word	0x08007148
 80062d0:	0800623d 	.word	0x0800623d

080062d4 <__sfp>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4b1b      	ldr	r3, [pc, #108]	; (8006344 <__sfp+0x70>)
 80062d8:	681e      	ldr	r6, [r3, #0]
 80062da:	69b3      	ldr	r3, [r6, #24]
 80062dc:	4607      	mov	r7, r0
 80062de:	b913      	cbnz	r3, 80062e6 <__sfp+0x12>
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff ffc7 	bl	8006274 <__sinit>
 80062e6:	3648      	adds	r6, #72	; 0x48
 80062e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	d503      	bpl.n	80062f8 <__sfp+0x24>
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	b133      	cbz	r3, 8006302 <__sfp+0x2e>
 80062f4:	6836      	ldr	r6, [r6, #0]
 80062f6:	e7f7      	b.n	80062e8 <__sfp+0x14>
 80062f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062fc:	b16d      	cbz	r5, 800631a <__sfp+0x46>
 80062fe:	3468      	adds	r4, #104	; 0x68
 8006300:	e7f4      	b.n	80062ec <__sfp+0x18>
 8006302:	2104      	movs	r1, #4
 8006304:	4638      	mov	r0, r7
 8006306:	f7ff ff9f 	bl	8006248 <__sfmoreglue>
 800630a:	6030      	str	r0, [r6, #0]
 800630c:	2800      	cmp	r0, #0
 800630e:	d1f1      	bne.n	80062f4 <__sfp+0x20>
 8006310:	230c      	movs	r3, #12
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4604      	mov	r4, r0
 8006316:	4620      	mov	r0, r4
 8006318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631a:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <__sfp+0x74>)
 800631c:	6665      	str	r5, [r4, #100]	; 0x64
 800631e:	e9c4 5500 	strd	r5, r5, [r4]
 8006322:	60a5      	str	r5, [r4, #8]
 8006324:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006328:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800632c:	2208      	movs	r2, #8
 800632e:	4629      	mov	r1, r5
 8006330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006334:	f7ff ff3e 	bl	80061b4 <memset>
 8006338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800633c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006340:	e7e9      	b.n	8006316 <__sfp+0x42>
 8006342:	bf00      	nop
 8006344:	08007148 	.word	0x08007148
 8006348:	ffff0001 	.word	0xffff0001

0800634c <_fwalk_reent>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	4680      	mov	r8, r0
 8006352:	4689      	mov	r9, r1
 8006354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006358:	2600      	movs	r6, #0
 800635a:	b914      	cbnz	r4, 8006362 <_fwalk_reent+0x16>
 800635c:	4630      	mov	r0, r6
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006366:	3f01      	subs	r7, #1
 8006368:	d501      	bpl.n	800636e <_fwalk_reent+0x22>
 800636a:	6824      	ldr	r4, [r4, #0]
 800636c:	e7f5      	b.n	800635a <_fwalk_reent+0xe>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d907      	bls.n	8006384 <_fwalk_reent+0x38>
 8006374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006378:	3301      	adds	r3, #1
 800637a:	d003      	beq.n	8006384 <_fwalk_reent+0x38>
 800637c:	4629      	mov	r1, r5
 800637e:	4640      	mov	r0, r8
 8006380:	47c8      	blx	r9
 8006382:	4306      	orrs	r6, r0
 8006384:	3568      	adds	r5, #104	; 0x68
 8006386:	e7ee      	b.n	8006366 <_fwalk_reent+0x1a>

08006388 <_malloc_r>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	1ccd      	adds	r5, r1, #3
 800638c:	f025 0503 	bic.w	r5, r5, #3
 8006390:	3508      	adds	r5, #8
 8006392:	2d0c      	cmp	r5, #12
 8006394:	bf38      	it	cc
 8006396:	250c      	movcc	r5, #12
 8006398:	2d00      	cmp	r5, #0
 800639a:	4606      	mov	r6, r0
 800639c:	db01      	blt.n	80063a2 <_malloc_r+0x1a>
 800639e:	42a9      	cmp	r1, r5
 80063a0:	d903      	bls.n	80063aa <_malloc_r+0x22>
 80063a2:	230c      	movs	r3, #12
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	2000      	movs	r0, #0
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	f000 fd6b 	bl	8006e84 <__malloc_lock>
 80063ae:	4a21      	ldr	r2, [pc, #132]	; (8006434 <_malloc_r+0xac>)
 80063b0:	6814      	ldr	r4, [r2, #0]
 80063b2:	4621      	mov	r1, r4
 80063b4:	b991      	cbnz	r1, 80063dc <_malloc_r+0x54>
 80063b6:	4c20      	ldr	r4, [pc, #128]	; (8006438 <_malloc_r+0xb0>)
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	b91b      	cbnz	r3, 80063c4 <_malloc_r+0x3c>
 80063bc:	4630      	mov	r0, r6
 80063be:	f000 fb05 	bl	80069cc <_sbrk_r>
 80063c2:	6020      	str	r0, [r4, #0]
 80063c4:	4629      	mov	r1, r5
 80063c6:	4630      	mov	r0, r6
 80063c8:	f000 fb00 	bl	80069cc <_sbrk_r>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d124      	bne.n	800641a <_malloc_r+0x92>
 80063d0:	230c      	movs	r3, #12
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	4630      	mov	r0, r6
 80063d6:	f000 fd56 	bl	8006e86 <__malloc_unlock>
 80063da:	e7e4      	b.n	80063a6 <_malloc_r+0x1e>
 80063dc:	680b      	ldr	r3, [r1, #0]
 80063de:	1b5b      	subs	r3, r3, r5
 80063e0:	d418      	bmi.n	8006414 <_malloc_r+0x8c>
 80063e2:	2b0b      	cmp	r3, #11
 80063e4:	d90f      	bls.n	8006406 <_malloc_r+0x7e>
 80063e6:	600b      	str	r3, [r1, #0]
 80063e8:	50cd      	str	r5, [r1, r3]
 80063ea:	18cc      	adds	r4, r1, r3
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 fd4a 	bl	8006e86 <__malloc_unlock>
 80063f2:	f104 000b 	add.w	r0, r4, #11
 80063f6:	1d23      	adds	r3, r4, #4
 80063f8:	f020 0007 	bic.w	r0, r0, #7
 80063fc:	1ac3      	subs	r3, r0, r3
 80063fe:	d0d3      	beq.n	80063a8 <_malloc_r+0x20>
 8006400:	425a      	negs	r2, r3
 8006402:	50e2      	str	r2, [r4, r3]
 8006404:	e7d0      	b.n	80063a8 <_malloc_r+0x20>
 8006406:	428c      	cmp	r4, r1
 8006408:	684b      	ldr	r3, [r1, #4]
 800640a:	bf16      	itet	ne
 800640c:	6063      	strne	r3, [r4, #4]
 800640e:	6013      	streq	r3, [r2, #0]
 8006410:	460c      	movne	r4, r1
 8006412:	e7eb      	b.n	80063ec <_malloc_r+0x64>
 8006414:	460c      	mov	r4, r1
 8006416:	6849      	ldr	r1, [r1, #4]
 8006418:	e7cc      	b.n	80063b4 <_malloc_r+0x2c>
 800641a:	1cc4      	adds	r4, r0, #3
 800641c:	f024 0403 	bic.w	r4, r4, #3
 8006420:	42a0      	cmp	r0, r4
 8006422:	d005      	beq.n	8006430 <_malloc_r+0xa8>
 8006424:	1a21      	subs	r1, r4, r0
 8006426:	4630      	mov	r0, r6
 8006428:	f000 fad0 	bl	80069cc <_sbrk_r>
 800642c:	3001      	adds	r0, #1
 800642e:	d0cf      	beq.n	80063d0 <_malloc_r+0x48>
 8006430:	6025      	str	r5, [r4, #0]
 8006432:	e7db      	b.n	80063ec <_malloc_r+0x64>
 8006434:	20004034 	.word	0x20004034
 8006438:	20004038 	.word	0x20004038

0800643c <__sfputc_r>:
 800643c:	6893      	ldr	r3, [r2, #8]
 800643e:	3b01      	subs	r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	b410      	push	{r4}
 8006444:	6093      	str	r3, [r2, #8]
 8006446:	da08      	bge.n	800645a <__sfputc_r+0x1e>
 8006448:	6994      	ldr	r4, [r2, #24]
 800644a:	42a3      	cmp	r3, r4
 800644c:	db01      	blt.n	8006452 <__sfputc_r+0x16>
 800644e:	290a      	cmp	r1, #10
 8006450:	d103      	bne.n	800645a <__sfputc_r+0x1e>
 8006452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006456:	f000 bb0d 	b.w	8006a74 <__swbuf_r>
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	1c58      	adds	r0, r3, #1
 800645e:	6010      	str	r0, [r2, #0]
 8006460:	7019      	strb	r1, [r3, #0]
 8006462:	4608      	mov	r0, r1
 8006464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006468:	4770      	bx	lr

0800646a <__sfputs_r>:
 800646a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646c:	4606      	mov	r6, r0
 800646e:	460f      	mov	r7, r1
 8006470:	4614      	mov	r4, r2
 8006472:	18d5      	adds	r5, r2, r3
 8006474:	42ac      	cmp	r4, r5
 8006476:	d101      	bne.n	800647c <__sfputs_r+0x12>
 8006478:	2000      	movs	r0, #0
 800647a:	e007      	b.n	800648c <__sfputs_r+0x22>
 800647c:	463a      	mov	r2, r7
 800647e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff ffda 	bl	800643c <__sfputc_r>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d1f3      	bne.n	8006474 <__sfputs_r+0xa>
 800648c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006490 <_vfiprintf_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	b09d      	sub	sp, #116	; 0x74
 8006498:	4617      	mov	r7, r2
 800649a:	461d      	mov	r5, r3
 800649c:	4606      	mov	r6, r0
 800649e:	b118      	cbz	r0, 80064a8 <_vfiprintf_r+0x18>
 80064a0:	6983      	ldr	r3, [r0, #24]
 80064a2:	b90b      	cbnz	r3, 80064a8 <_vfiprintf_r+0x18>
 80064a4:	f7ff fee6 	bl	8006274 <__sinit>
 80064a8:	4b7c      	ldr	r3, [pc, #496]	; (800669c <_vfiprintf_r+0x20c>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d158      	bne.n	8006560 <_vfiprintf_r+0xd0>
 80064ae:	6874      	ldr	r4, [r6, #4]
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	0718      	lsls	r0, r3, #28
 80064b4:	d55e      	bpl.n	8006574 <_vfiprintf_r+0xe4>
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d05b      	beq.n	8006574 <_vfiprintf_r+0xe4>
 80064bc:	2300      	movs	r3, #0
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	2320      	movs	r3, #32
 80064c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c6:	2330      	movs	r3, #48	; 0x30
 80064c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064cc:	9503      	str	r5, [sp, #12]
 80064ce:	f04f 0b01 	mov.w	fp, #1
 80064d2:	46b8      	mov	r8, r7
 80064d4:	4645      	mov	r5, r8
 80064d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064da:	b10b      	cbz	r3, 80064e0 <_vfiprintf_r+0x50>
 80064dc:	2b25      	cmp	r3, #37	; 0x25
 80064de:	d154      	bne.n	800658a <_vfiprintf_r+0xfa>
 80064e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80064e4:	d00b      	beq.n	80064fe <_vfiprintf_r+0x6e>
 80064e6:	4653      	mov	r3, sl
 80064e8:	463a      	mov	r2, r7
 80064ea:	4621      	mov	r1, r4
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff ffbc 	bl	800646a <__sfputs_r>
 80064f2:	3001      	adds	r0, #1
 80064f4:	f000 80c2 	beq.w	800667c <_vfiprintf_r+0x1ec>
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	4453      	add	r3, sl
 80064fc:	9309      	str	r3, [sp, #36]	; 0x24
 80064fe:	f898 3000 	ldrb.w	r3, [r8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80ba 	beq.w	800667c <_vfiprintf_r+0x1ec>
 8006508:	2300      	movs	r3, #0
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	9307      	str	r3, [sp, #28]
 8006516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800651a:	931a      	str	r3, [sp, #104]	; 0x68
 800651c:	46a8      	mov	r8, r5
 800651e:	2205      	movs	r2, #5
 8006520:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006524:	485e      	ldr	r0, [pc, #376]	; (80066a0 <_vfiprintf_r+0x210>)
 8006526:	f7f9 fe63 	bl	80001f0 <memchr>
 800652a:	9b04      	ldr	r3, [sp, #16]
 800652c:	bb78      	cbnz	r0, 800658e <_vfiprintf_r+0xfe>
 800652e:	06d9      	lsls	r1, r3, #27
 8006530:	bf44      	itt	mi
 8006532:	2220      	movmi	r2, #32
 8006534:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006538:	071a      	lsls	r2, r3, #28
 800653a:	bf44      	itt	mi
 800653c:	222b      	movmi	r2, #43	; 0x2b
 800653e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006542:	782a      	ldrb	r2, [r5, #0]
 8006544:	2a2a      	cmp	r2, #42	; 0x2a
 8006546:	d02a      	beq.n	800659e <_vfiprintf_r+0x10e>
 8006548:	9a07      	ldr	r2, [sp, #28]
 800654a:	46a8      	mov	r8, r5
 800654c:	2000      	movs	r0, #0
 800654e:	250a      	movs	r5, #10
 8006550:	4641      	mov	r1, r8
 8006552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006556:	3b30      	subs	r3, #48	; 0x30
 8006558:	2b09      	cmp	r3, #9
 800655a:	d969      	bls.n	8006630 <_vfiprintf_r+0x1a0>
 800655c:	b360      	cbz	r0, 80065b8 <_vfiprintf_r+0x128>
 800655e:	e024      	b.n	80065aa <_vfiprintf_r+0x11a>
 8006560:	4b50      	ldr	r3, [pc, #320]	; (80066a4 <_vfiprintf_r+0x214>)
 8006562:	429c      	cmp	r4, r3
 8006564:	d101      	bne.n	800656a <_vfiprintf_r+0xda>
 8006566:	68b4      	ldr	r4, [r6, #8]
 8006568:	e7a2      	b.n	80064b0 <_vfiprintf_r+0x20>
 800656a:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <_vfiprintf_r+0x218>)
 800656c:	429c      	cmp	r4, r3
 800656e:	bf08      	it	eq
 8006570:	68f4      	ldreq	r4, [r6, #12]
 8006572:	e79d      	b.n	80064b0 <_vfiprintf_r+0x20>
 8006574:	4621      	mov	r1, r4
 8006576:	4630      	mov	r0, r6
 8006578:	f000 fae0 	bl	8006b3c <__swsetup_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	d09d      	beq.n	80064bc <_vfiprintf_r+0x2c>
 8006580:	f04f 30ff 	mov.w	r0, #4294967295
 8006584:	b01d      	add	sp, #116	; 0x74
 8006586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658a:	46a8      	mov	r8, r5
 800658c:	e7a2      	b.n	80064d4 <_vfiprintf_r+0x44>
 800658e:	4a44      	ldr	r2, [pc, #272]	; (80066a0 <_vfiprintf_r+0x210>)
 8006590:	1a80      	subs	r0, r0, r2
 8006592:	fa0b f000 	lsl.w	r0, fp, r0
 8006596:	4318      	orrs	r0, r3
 8006598:	9004      	str	r0, [sp, #16]
 800659a:	4645      	mov	r5, r8
 800659c:	e7be      	b.n	800651c <_vfiprintf_r+0x8c>
 800659e:	9a03      	ldr	r2, [sp, #12]
 80065a0:	1d11      	adds	r1, r2, #4
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	9103      	str	r1, [sp, #12]
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	db01      	blt.n	80065ae <_vfiprintf_r+0x11e>
 80065aa:	9207      	str	r2, [sp, #28]
 80065ac:	e004      	b.n	80065b8 <_vfiprintf_r+0x128>
 80065ae:	4252      	negs	r2, r2
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	9207      	str	r2, [sp, #28]
 80065b6:	9304      	str	r3, [sp, #16]
 80065b8:	f898 3000 	ldrb.w	r3, [r8]
 80065bc:	2b2e      	cmp	r3, #46	; 0x2e
 80065be:	d10e      	bne.n	80065de <_vfiprintf_r+0x14e>
 80065c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065c4:	2b2a      	cmp	r3, #42	; 0x2a
 80065c6:	d138      	bne.n	800663a <_vfiprintf_r+0x1aa>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	1d1a      	adds	r2, r3, #4
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	9203      	str	r2, [sp, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfb8      	it	lt
 80065d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d8:	f108 0802 	add.w	r8, r8, #2
 80065dc:	9305      	str	r3, [sp, #20]
 80065de:	4d33      	ldr	r5, [pc, #204]	; (80066ac <_vfiprintf_r+0x21c>)
 80065e0:	f898 1000 	ldrb.w	r1, [r8]
 80065e4:	2203      	movs	r2, #3
 80065e6:	4628      	mov	r0, r5
 80065e8:	f7f9 fe02 	bl	80001f0 <memchr>
 80065ec:	b140      	cbz	r0, 8006600 <_vfiprintf_r+0x170>
 80065ee:	2340      	movs	r3, #64	; 0x40
 80065f0:	1b40      	subs	r0, r0, r5
 80065f2:	fa03 f000 	lsl.w	r0, r3, r0
 80065f6:	9b04      	ldr	r3, [sp, #16]
 80065f8:	4303      	orrs	r3, r0
 80065fa:	f108 0801 	add.w	r8, r8, #1
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	f898 1000 	ldrb.w	r1, [r8]
 8006604:	482a      	ldr	r0, [pc, #168]	; (80066b0 <_vfiprintf_r+0x220>)
 8006606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800660a:	2206      	movs	r2, #6
 800660c:	f108 0701 	add.w	r7, r8, #1
 8006610:	f7f9 fdee 	bl	80001f0 <memchr>
 8006614:	2800      	cmp	r0, #0
 8006616:	d037      	beq.n	8006688 <_vfiprintf_r+0x1f8>
 8006618:	4b26      	ldr	r3, [pc, #152]	; (80066b4 <_vfiprintf_r+0x224>)
 800661a:	bb1b      	cbnz	r3, 8006664 <_vfiprintf_r+0x1d4>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	3307      	adds	r3, #7
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	3308      	adds	r3, #8
 8006626:	9303      	str	r3, [sp, #12]
 8006628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662a:	444b      	add	r3, r9
 800662c:	9309      	str	r3, [sp, #36]	; 0x24
 800662e:	e750      	b.n	80064d2 <_vfiprintf_r+0x42>
 8006630:	fb05 3202 	mla	r2, r5, r2, r3
 8006634:	2001      	movs	r0, #1
 8006636:	4688      	mov	r8, r1
 8006638:	e78a      	b.n	8006550 <_vfiprintf_r+0xc0>
 800663a:	2300      	movs	r3, #0
 800663c:	f108 0801 	add.w	r8, r8, #1
 8006640:	9305      	str	r3, [sp, #20]
 8006642:	4619      	mov	r1, r3
 8006644:	250a      	movs	r5, #10
 8006646:	4640      	mov	r0, r8
 8006648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800664c:	3a30      	subs	r2, #48	; 0x30
 800664e:	2a09      	cmp	r2, #9
 8006650:	d903      	bls.n	800665a <_vfiprintf_r+0x1ca>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0c3      	beq.n	80065de <_vfiprintf_r+0x14e>
 8006656:	9105      	str	r1, [sp, #20]
 8006658:	e7c1      	b.n	80065de <_vfiprintf_r+0x14e>
 800665a:	fb05 2101 	mla	r1, r5, r1, r2
 800665e:	2301      	movs	r3, #1
 8006660:	4680      	mov	r8, r0
 8006662:	e7f0      	b.n	8006646 <_vfiprintf_r+0x1b6>
 8006664:	ab03      	add	r3, sp, #12
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	4622      	mov	r2, r4
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <_vfiprintf_r+0x228>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	4630      	mov	r0, r6
 8006670:	f3af 8000 	nop.w
 8006674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006678:	4681      	mov	r9, r0
 800667a:	d1d5      	bne.n	8006628 <_vfiprintf_r+0x198>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	065b      	lsls	r3, r3, #25
 8006680:	f53f af7e 	bmi.w	8006580 <_vfiprintf_r+0xf0>
 8006684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006686:	e77d      	b.n	8006584 <_vfiprintf_r+0xf4>
 8006688:	ab03      	add	r3, sp, #12
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	4622      	mov	r2, r4
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <_vfiprintf_r+0x228>)
 8006690:	a904      	add	r1, sp, #16
 8006692:	4630      	mov	r0, r6
 8006694:	f000 f888 	bl	80067a8 <_printf_i>
 8006698:	e7ec      	b.n	8006674 <_vfiprintf_r+0x1e4>
 800669a:	bf00      	nop
 800669c:	0800716c 	.word	0x0800716c
 80066a0:	080071ac 	.word	0x080071ac
 80066a4:	0800718c 	.word	0x0800718c
 80066a8:	0800714c 	.word	0x0800714c
 80066ac:	080071b2 	.word	0x080071b2
 80066b0:	080071b6 	.word	0x080071b6
 80066b4:	00000000 	.word	0x00000000
 80066b8:	0800646b 	.word	0x0800646b

080066bc <_printf_common>:
 80066bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	4691      	mov	r9, r2
 80066c2:	461f      	mov	r7, r3
 80066c4:	688a      	ldr	r2, [r1, #8]
 80066c6:	690b      	ldr	r3, [r1, #16]
 80066c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	bfb8      	it	lt
 80066d0:	4613      	movlt	r3, r2
 80066d2:	f8c9 3000 	str.w	r3, [r9]
 80066d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066da:	4606      	mov	r6, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	b112      	cbz	r2, 80066e6 <_printf_common+0x2a>
 80066e0:	3301      	adds	r3, #1
 80066e2:	f8c9 3000 	str.w	r3, [r9]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	0699      	lsls	r1, r3, #26
 80066ea:	bf42      	ittt	mi
 80066ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066f0:	3302      	addmi	r3, #2
 80066f2:	f8c9 3000 	strmi.w	r3, [r9]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	f015 0506 	ands.w	r5, r5, #6
 80066fc:	d107      	bne.n	800670e <_printf_common+0x52>
 80066fe:	f104 0a19 	add.w	sl, r4, #25
 8006702:	68e3      	ldr	r3, [r4, #12]
 8006704:	f8d9 2000 	ldr.w	r2, [r9]
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	42ab      	cmp	r3, r5
 800670c:	dc28      	bgt.n	8006760 <_printf_common+0xa4>
 800670e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	3300      	adds	r3, #0
 8006716:	bf18      	it	ne
 8006718:	2301      	movne	r3, #1
 800671a:	0692      	lsls	r2, r2, #26
 800671c:	d42d      	bmi.n	800677a <_printf_common+0xbe>
 800671e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006722:	4639      	mov	r1, r7
 8006724:	4630      	mov	r0, r6
 8006726:	47c0      	blx	r8
 8006728:	3001      	adds	r0, #1
 800672a:	d020      	beq.n	800676e <_printf_common+0xb2>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	68e5      	ldr	r5, [r4, #12]
 8006730:	f8d9 2000 	ldr.w	r2, [r9]
 8006734:	f003 0306 	and.w	r3, r3, #6
 8006738:	2b04      	cmp	r3, #4
 800673a:	bf08      	it	eq
 800673c:	1aad      	subeq	r5, r5, r2
 800673e:	68a3      	ldr	r3, [r4, #8]
 8006740:	6922      	ldr	r2, [r4, #16]
 8006742:	bf0c      	ite	eq
 8006744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006748:	2500      	movne	r5, #0
 800674a:	4293      	cmp	r3, r2
 800674c:	bfc4      	itt	gt
 800674e:	1a9b      	subgt	r3, r3, r2
 8006750:	18ed      	addgt	r5, r5, r3
 8006752:	f04f 0900 	mov.w	r9, #0
 8006756:	341a      	adds	r4, #26
 8006758:	454d      	cmp	r5, r9
 800675a:	d11a      	bne.n	8006792 <_printf_common+0xd6>
 800675c:	2000      	movs	r0, #0
 800675e:	e008      	b.n	8006772 <_printf_common+0xb6>
 8006760:	2301      	movs	r3, #1
 8006762:	4652      	mov	r2, sl
 8006764:	4639      	mov	r1, r7
 8006766:	4630      	mov	r0, r6
 8006768:	47c0      	blx	r8
 800676a:	3001      	adds	r0, #1
 800676c:	d103      	bne.n	8006776 <_printf_common+0xba>
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	3501      	adds	r5, #1
 8006778:	e7c3      	b.n	8006702 <_printf_common+0x46>
 800677a:	18e1      	adds	r1, r4, r3
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	2030      	movs	r0, #48	; 0x30
 8006780:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006784:	4422      	add	r2, r4
 8006786:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800678a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800678e:	3302      	adds	r3, #2
 8006790:	e7c5      	b.n	800671e <_printf_common+0x62>
 8006792:	2301      	movs	r3, #1
 8006794:	4622      	mov	r2, r4
 8006796:	4639      	mov	r1, r7
 8006798:	4630      	mov	r0, r6
 800679a:	47c0      	blx	r8
 800679c:	3001      	adds	r0, #1
 800679e:	d0e6      	beq.n	800676e <_printf_common+0xb2>
 80067a0:	f109 0901 	add.w	r9, r9, #1
 80067a4:	e7d8      	b.n	8006758 <_printf_common+0x9c>
	...

080067a8 <_printf_i>:
 80067a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067b0:	460c      	mov	r4, r1
 80067b2:	7e09      	ldrb	r1, [r1, #24]
 80067b4:	b085      	sub	sp, #20
 80067b6:	296e      	cmp	r1, #110	; 0x6e
 80067b8:	4617      	mov	r7, r2
 80067ba:	4606      	mov	r6, r0
 80067bc:	4698      	mov	r8, r3
 80067be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c0:	f000 80b3 	beq.w	800692a <_printf_i+0x182>
 80067c4:	d822      	bhi.n	800680c <_printf_i+0x64>
 80067c6:	2963      	cmp	r1, #99	; 0x63
 80067c8:	d036      	beq.n	8006838 <_printf_i+0x90>
 80067ca:	d80a      	bhi.n	80067e2 <_printf_i+0x3a>
 80067cc:	2900      	cmp	r1, #0
 80067ce:	f000 80b9 	beq.w	8006944 <_printf_i+0x19c>
 80067d2:	2958      	cmp	r1, #88	; 0x58
 80067d4:	f000 8083 	beq.w	80068de <_printf_i+0x136>
 80067d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067e0:	e032      	b.n	8006848 <_printf_i+0xa0>
 80067e2:	2964      	cmp	r1, #100	; 0x64
 80067e4:	d001      	beq.n	80067ea <_printf_i+0x42>
 80067e6:	2969      	cmp	r1, #105	; 0x69
 80067e8:	d1f6      	bne.n	80067d8 <_printf_i+0x30>
 80067ea:	6820      	ldr	r0, [r4, #0]
 80067ec:	6813      	ldr	r3, [r2, #0]
 80067ee:	0605      	lsls	r5, r0, #24
 80067f0:	f103 0104 	add.w	r1, r3, #4
 80067f4:	d52a      	bpl.n	800684c <_printf_i+0xa4>
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6011      	str	r1, [r2, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da03      	bge.n	8006806 <_printf_i+0x5e>
 80067fe:	222d      	movs	r2, #45	; 0x2d
 8006800:	425b      	negs	r3, r3
 8006802:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006806:	486f      	ldr	r0, [pc, #444]	; (80069c4 <_printf_i+0x21c>)
 8006808:	220a      	movs	r2, #10
 800680a:	e039      	b.n	8006880 <_printf_i+0xd8>
 800680c:	2973      	cmp	r1, #115	; 0x73
 800680e:	f000 809d 	beq.w	800694c <_printf_i+0x1a4>
 8006812:	d808      	bhi.n	8006826 <_printf_i+0x7e>
 8006814:	296f      	cmp	r1, #111	; 0x6f
 8006816:	d020      	beq.n	800685a <_printf_i+0xb2>
 8006818:	2970      	cmp	r1, #112	; 0x70
 800681a:	d1dd      	bne.n	80067d8 <_printf_i+0x30>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	f043 0320 	orr.w	r3, r3, #32
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	e003      	b.n	800682e <_printf_i+0x86>
 8006826:	2975      	cmp	r1, #117	; 0x75
 8006828:	d017      	beq.n	800685a <_printf_i+0xb2>
 800682a:	2978      	cmp	r1, #120	; 0x78
 800682c:	d1d4      	bne.n	80067d8 <_printf_i+0x30>
 800682e:	2378      	movs	r3, #120	; 0x78
 8006830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006834:	4864      	ldr	r0, [pc, #400]	; (80069c8 <_printf_i+0x220>)
 8006836:	e055      	b.n	80068e4 <_printf_i+0x13c>
 8006838:	6813      	ldr	r3, [r2, #0]
 800683a:	1d19      	adds	r1, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6011      	str	r1, [r2, #0]
 8006840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006848:	2301      	movs	r3, #1
 800684a:	e08c      	b.n	8006966 <_printf_i+0x1be>
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6011      	str	r1, [r2, #0]
 8006850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006854:	bf18      	it	ne
 8006856:	b21b      	sxthne	r3, r3
 8006858:	e7cf      	b.n	80067fa <_printf_i+0x52>
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	6825      	ldr	r5, [r4, #0]
 800685e:	1d18      	adds	r0, r3, #4
 8006860:	6010      	str	r0, [r2, #0]
 8006862:	0628      	lsls	r0, r5, #24
 8006864:	d501      	bpl.n	800686a <_printf_i+0xc2>
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	e002      	b.n	8006870 <_printf_i+0xc8>
 800686a:	0668      	lsls	r0, r5, #25
 800686c:	d5fb      	bpl.n	8006866 <_printf_i+0xbe>
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_printf_i+0x21c>)
 8006872:	296f      	cmp	r1, #111	; 0x6f
 8006874:	bf14      	ite	ne
 8006876:	220a      	movne	r2, #10
 8006878:	2208      	moveq	r2, #8
 800687a:	2100      	movs	r1, #0
 800687c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006880:	6865      	ldr	r5, [r4, #4]
 8006882:	60a5      	str	r5, [r4, #8]
 8006884:	2d00      	cmp	r5, #0
 8006886:	f2c0 8095 	blt.w	80069b4 <_printf_i+0x20c>
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	f021 0104 	bic.w	r1, r1, #4
 8006890:	6021      	str	r1, [r4, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d13d      	bne.n	8006912 <_printf_i+0x16a>
 8006896:	2d00      	cmp	r5, #0
 8006898:	f040 808e 	bne.w	80069b8 <_printf_i+0x210>
 800689c:	4665      	mov	r5, ip
 800689e:	2a08      	cmp	r2, #8
 80068a0:	d10b      	bne.n	80068ba <_printf_i+0x112>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	07db      	lsls	r3, r3, #31
 80068a6:	d508      	bpl.n	80068ba <_printf_i+0x112>
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	6862      	ldr	r2, [r4, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	bfde      	ittt	le
 80068b0:	2330      	movle	r3, #48	; 0x30
 80068b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ba:	ebac 0305 	sub.w	r3, ip, r5
 80068be:	6123      	str	r3, [r4, #16]
 80068c0:	f8cd 8000 	str.w	r8, [sp]
 80068c4:	463b      	mov	r3, r7
 80068c6:	aa03      	add	r2, sp, #12
 80068c8:	4621      	mov	r1, r4
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff fef6 	bl	80066bc <_printf_common>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d14d      	bne.n	8006970 <_printf_i+0x1c8>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	b005      	add	sp, #20
 80068da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068de:	4839      	ldr	r0, [pc, #228]	; (80069c4 <_printf_i+0x21c>)
 80068e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	6821      	ldr	r1, [r4, #0]
 80068e8:	1d1d      	adds	r5, r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6015      	str	r5, [r2, #0]
 80068ee:	060a      	lsls	r2, r1, #24
 80068f0:	d50b      	bpl.n	800690a <_printf_i+0x162>
 80068f2:	07ca      	lsls	r2, r1, #31
 80068f4:	bf44      	itt	mi
 80068f6:	f041 0120 	orrmi.w	r1, r1, #32
 80068fa:	6021      	strmi	r1, [r4, #0]
 80068fc:	b91b      	cbnz	r3, 8006906 <_printf_i+0x15e>
 80068fe:	6822      	ldr	r2, [r4, #0]
 8006900:	f022 0220 	bic.w	r2, r2, #32
 8006904:	6022      	str	r2, [r4, #0]
 8006906:	2210      	movs	r2, #16
 8006908:	e7b7      	b.n	800687a <_printf_i+0xd2>
 800690a:	064d      	lsls	r5, r1, #25
 800690c:	bf48      	it	mi
 800690e:	b29b      	uxthmi	r3, r3
 8006910:	e7ef      	b.n	80068f2 <_printf_i+0x14a>
 8006912:	4665      	mov	r5, ip
 8006914:	fbb3 f1f2 	udiv	r1, r3, r2
 8006918:	fb02 3311 	mls	r3, r2, r1, r3
 800691c:	5cc3      	ldrb	r3, [r0, r3]
 800691e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006922:	460b      	mov	r3, r1
 8006924:	2900      	cmp	r1, #0
 8006926:	d1f5      	bne.n	8006914 <_printf_i+0x16c>
 8006928:	e7b9      	b.n	800689e <_printf_i+0xf6>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	6961      	ldr	r1, [r4, #20]
 8006930:	1d18      	adds	r0, r3, #4
 8006932:	6010      	str	r0, [r2, #0]
 8006934:	0628      	lsls	r0, r5, #24
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	d501      	bpl.n	800693e <_printf_i+0x196>
 800693a:	6019      	str	r1, [r3, #0]
 800693c:	e002      	b.n	8006944 <_printf_i+0x19c>
 800693e:	066a      	lsls	r2, r5, #25
 8006940:	d5fb      	bpl.n	800693a <_printf_i+0x192>
 8006942:	8019      	strh	r1, [r3, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	4665      	mov	r5, ip
 800694a:	e7b9      	b.n	80068c0 <_printf_i+0x118>
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	1d19      	adds	r1, r3, #4
 8006950:	6011      	str	r1, [r2, #0]
 8006952:	681d      	ldr	r5, [r3, #0]
 8006954:	6862      	ldr	r2, [r4, #4]
 8006956:	2100      	movs	r1, #0
 8006958:	4628      	mov	r0, r5
 800695a:	f7f9 fc49 	bl	80001f0 <memchr>
 800695e:	b108      	cbz	r0, 8006964 <_printf_i+0x1bc>
 8006960:	1b40      	subs	r0, r0, r5
 8006962:	6060      	str	r0, [r4, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	2300      	movs	r3, #0
 800696a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800696e:	e7a7      	b.n	80068c0 <_printf_i+0x118>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	462a      	mov	r2, r5
 8006974:	4639      	mov	r1, r7
 8006976:	4630      	mov	r0, r6
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d0aa      	beq.n	80068d4 <_printf_i+0x12c>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	079b      	lsls	r3, r3, #30
 8006982:	d413      	bmi.n	80069ac <_printf_i+0x204>
 8006984:	68e0      	ldr	r0, [r4, #12]
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	4298      	cmp	r0, r3
 800698a:	bfb8      	it	lt
 800698c:	4618      	movlt	r0, r3
 800698e:	e7a3      	b.n	80068d8 <_printf_i+0x130>
 8006990:	2301      	movs	r3, #1
 8006992:	464a      	mov	r2, r9
 8006994:	4639      	mov	r1, r7
 8006996:	4630      	mov	r0, r6
 8006998:	47c0      	blx	r8
 800699a:	3001      	adds	r0, #1
 800699c:	d09a      	beq.n	80068d4 <_printf_i+0x12c>
 800699e:	3501      	adds	r5, #1
 80069a0:	68e3      	ldr	r3, [r4, #12]
 80069a2:	9a03      	ldr	r2, [sp, #12]
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	42ab      	cmp	r3, r5
 80069a8:	dcf2      	bgt.n	8006990 <_printf_i+0x1e8>
 80069aa:	e7eb      	b.n	8006984 <_printf_i+0x1dc>
 80069ac:	2500      	movs	r5, #0
 80069ae:	f104 0919 	add.w	r9, r4, #25
 80069b2:	e7f5      	b.n	80069a0 <_printf_i+0x1f8>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1ac      	bne.n	8006912 <_printf_i+0x16a>
 80069b8:	7803      	ldrb	r3, [r0, #0]
 80069ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c2:	e76c      	b.n	800689e <_printf_i+0xf6>
 80069c4:	080071bd 	.word	0x080071bd
 80069c8:	080071ce 	.word	0x080071ce

080069cc <_sbrk_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4c06      	ldr	r4, [pc, #24]	; (80069e8 <_sbrk_r+0x1c>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4605      	mov	r5, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	f7fa fed0 	bl	800177c <_sbrk>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_sbrk_r+0x1a>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_sbrk_r+0x1a>
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	200042f8 	.word	0x200042f8

080069ec <__sread>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460c      	mov	r4, r1
 80069f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f4:	f000 fa96 	bl	8006f24 <_read_r>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	bfab      	itete	ge
 80069fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006a00:	181b      	addge	r3, r3, r0
 8006a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a06:	bfac      	ite	ge
 8006a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a0a:	81a3      	strhlt	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__swrite>:
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	461f      	mov	r7, r3
 8006a14:	898b      	ldrh	r3, [r1, #12]
 8006a16:	05db      	lsls	r3, r3, #23
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	d505      	bpl.n	8006a2c <__swrite+0x1e>
 8006a20:	2302      	movs	r3, #2
 8006a22:	2200      	movs	r2, #0
 8006a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a28:	f000 f9b6 	bl	8006d98 <_lseek_r>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	4632      	mov	r2, r6
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	f000 b869 	b.w	8006b18 <_write_r>

08006a46 <__sseek>:
 8006a46:	b510      	push	{r4, lr}
 8006a48:	460c      	mov	r4, r1
 8006a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4e:	f000 f9a3 	bl	8006d98 <_lseek_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	bf15      	itete	ne
 8006a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a62:	81a3      	strheq	r3, [r4, #12]
 8006a64:	bf18      	it	ne
 8006a66:	81a3      	strhne	r3, [r4, #12]
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <__sclose>:
 8006a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6e:	f000 b8d3 	b.w	8006c18 <_close_r>
	...

08006a74 <__swbuf_r>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	460e      	mov	r6, r1
 8006a78:	4614      	mov	r4, r2
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	b118      	cbz	r0, 8006a86 <__swbuf_r+0x12>
 8006a7e:	6983      	ldr	r3, [r0, #24]
 8006a80:	b90b      	cbnz	r3, 8006a86 <__swbuf_r+0x12>
 8006a82:	f7ff fbf7 	bl	8006274 <__sinit>
 8006a86:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <__swbuf_r+0x98>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	d12a      	bne.n	8006ae2 <__swbuf_r+0x6e>
 8006a8c:	686c      	ldr	r4, [r5, #4]
 8006a8e:	69a3      	ldr	r3, [r4, #24]
 8006a90:	60a3      	str	r3, [r4, #8]
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	071a      	lsls	r2, r3, #28
 8006a96:	d52e      	bpl.n	8006af6 <__swbuf_r+0x82>
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	b363      	cbz	r3, 8006af6 <__swbuf_r+0x82>
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	6963      	ldr	r3, [r4, #20]
 8006aa4:	b2f6      	uxtb	r6, r6
 8006aa6:	4283      	cmp	r3, r0
 8006aa8:	4637      	mov	r7, r6
 8006aaa:	dc04      	bgt.n	8006ab6 <__swbuf_r+0x42>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f948 	bl	8006d44 <_fflush_r>
 8006ab4:	bb28      	cbnz	r0, 8006b02 <__swbuf_r+0x8e>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	60a3      	str	r3, [r4, #8]
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	6022      	str	r2, [r4, #0]
 8006ac2:	701e      	strb	r6, [r3, #0]
 8006ac4:	6963      	ldr	r3, [r4, #20]
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	4283      	cmp	r3, r0
 8006aca:	d004      	beq.n	8006ad6 <__swbuf_r+0x62>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	07db      	lsls	r3, r3, #31
 8006ad0:	d519      	bpl.n	8006b06 <__swbuf_r+0x92>
 8006ad2:	2e0a      	cmp	r6, #10
 8006ad4:	d117      	bne.n	8006b06 <__swbuf_r+0x92>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f933 	bl	8006d44 <_fflush_r>
 8006ade:	b190      	cbz	r0, 8006b06 <__swbuf_r+0x92>
 8006ae0:	e00f      	b.n	8006b02 <__swbuf_r+0x8e>
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <__swbuf_r+0x9c>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d101      	bne.n	8006aec <__swbuf_r+0x78>
 8006ae8:	68ac      	ldr	r4, [r5, #8]
 8006aea:	e7d0      	b.n	8006a8e <__swbuf_r+0x1a>
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <__swbuf_r+0xa0>)
 8006aee:	429c      	cmp	r4, r3
 8006af0:	bf08      	it	eq
 8006af2:	68ec      	ldreq	r4, [r5, #12]
 8006af4:	e7cb      	b.n	8006a8e <__swbuf_r+0x1a>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 f81f 	bl	8006b3c <__swsetup_r>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d0cc      	beq.n	8006a9c <__swbuf_r+0x28>
 8006b02:	f04f 37ff 	mov.w	r7, #4294967295
 8006b06:	4638      	mov	r0, r7
 8006b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	0800716c 	.word	0x0800716c
 8006b10:	0800718c 	.word	0x0800718c
 8006b14:	0800714c 	.word	0x0800714c

08006b18 <_write_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4c07      	ldr	r4, [pc, #28]	; (8006b38 <_write_r+0x20>)
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	6022      	str	r2, [r4, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7fa fdd7 	bl	80016da <_write>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_write_r+0x1e>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_write_r+0x1e>
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	200042f8 	.word	0x200042f8

08006b3c <__swsetup_r>:
 8006b3c:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <__swsetup_r+0xcc>)
 8006b3e:	b570      	push	{r4, r5, r6, lr}
 8006b40:	681d      	ldr	r5, [r3, #0]
 8006b42:	4606      	mov	r6, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	b125      	cbz	r5, 8006b52 <__swsetup_r+0x16>
 8006b48:	69ab      	ldr	r3, [r5, #24]
 8006b4a:	b913      	cbnz	r3, 8006b52 <__swsetup_r+0x16>
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f7ff fb91 	bl	8006274 <__sinit>
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <__swsetup_r+0xd0>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d10f      	bne.n	8006b78 <__swsetup_r+0x3c>
 8006b58:	686c      	ldr	r4, [r5, #4]
 8006b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	0715      	lsls	r5, r2, #28
 8006b62:	d42c      	bmi.n	8006bbe <__swsetup_r+0x82>
 8006b64:	06d0      	lsls	r0, r2, #27
 8006b66:	d411      	bmi.n	8006b8c <__swsetup_r+0x50>
 8006b68:	2209      	movs	r2, #9
 8006b6a:	6032      	str	r2, [r6, #0]
 8006b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	e03e      	b.n	8006bf6 <__swsetup_r+0xba>
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <__swsetup_r+0xd4>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d101      	bne.n	8006b82 <__swsetup_r+0x46>
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	e7eb      	b.n	8006b5a <__swsetup_r+0x1e>
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <__swsetup_r+0xd8>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	bf08      	it	eq
 8006b88:	68ec      	ldreq	r4, [r5, #12]
 8006b8a:	e7e6      	b.n	8006b5a <__swsetup_r+0x1e>
 8006b8c:	0751      	lsls	r1, r2, #29
 8006b8e:	d512      	bpl.n	8006bb6 <__swsetup_r+0x7a>
 8006b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b92:	b141      	cbz	r1, 8006ba6 <__swsetup_r+0x6a>
 8006b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	d002      	beq.n	8006ba2 <__swsetup_r+0x66>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f973 	bl	8006e88 <_free_r>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f043 0308 	orr.w	r3, r3, #8
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	b94b      	cbnz	r3, 8006bd6 <__swsetup_r+0x9a>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bcc:	d003      	beq.n	8006bd6 <__swsetup_r+0x9a>
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f917 	bl	8006e04 <__smakebuf_r>
 8006bd6:	89a2      	ldrh	r2, [r4, #12]
 8006bd8:	f012 0301 	ands.w	r3, r2, #1
 8006bdc:	d00c      	beq.n	8006bf8 <__swsetup_r+0xbc>
 8006bde:	2300      	movs	r3, #0
 8006be0:	60a3      	str	r3, [r4, #8]
 8006be2:	6963      	ldr	r3, [r4, #20]
 8006be4:	425b      	negs	r3, r3
 8006be6:	61a3      	str	r3, [r4, #24]
 8006be8:	6923      	ldr	r3, [r4, #16]
 8006bea:	b953      	cbnz	r3, 8006c02 <__swsetup_r+0xc6>
 8006bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bf0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006bf4:	d1ba      	bne.n	8006b6c <__swsetup_r+0x30>
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	0792      	lsls	r2, r2, #30
 8006bfa:	bf58      	it	pl
 8006bfc:	6963      	ldrpl	r3, [r4, #20]
 8006bfe:	60a3      	str	r3, [r4, #8]
 8006c00:	e7f2      	b.n	8006be8 <__swsetup_r+0xac>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7f7      	b.n	8006bf6 <__swsetup_r+0xba>
 8006c06:	bf00      	nop
 8006c08:	20000010 	.word	0x20000010
 8006c0c:	0800716c 	.word	0x0800716c
 8006c10:	0800718c 	.word	0x0800718c
 8006c14:	0800714c 	.word	0x0800714c

08006c18 <_close_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4c06      	ldr	r4, [pc, #24]	; (8006c34 <_close_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4605      	mov	r5, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	f7fa fd75 	bl	8001712 <_close>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_close_r+0x1a>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_close_r+0x1a>
 8006c30:	602b      	str	r3, [r5, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200042f8 	.word	0x200042f8

08006c38 <__sflush_r>:
 8006c38:	898a      	ldrh	r2, [r1, #12]
 8006c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3e:	4605      	mov	r5, r0
 8006c40:	0710      	lsls	r0, r2, #28
 8006c42:	460c      	mov	r4, r1
 8006c44:	d458      	bmi.n	8006cf8 <__sflush_r+0xc0>
 8006c46:	684b      	ldr	r3, [r1, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc05      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dc02      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	d0f9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c64:	682f      	ldr	r7, [r5, #0]
 8006c66:	6a21      	ldr	r1, [r4, #32]
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	d032      	beq.n	8006cd2 <__sflush_r+0x9a>
 8006c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	075a      	lsls	r2, r3, #29
 8006c72:	d505      	bpl.n	8006c80 <__sflush_r+0x48>
 8006c74:	6863      	ldr	r3, [r4, #4]
 8006c76:	1ac0      	subs	r0, r0, r3
 8006c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c7a:	b10b      	cbz	r3, 8006c80 <__sflush_r+0x48>
 8006c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c7e:	1ac0      	subs	r0, r0, r3
 8006c80:	2300      	movs	r3, #0
 8006c82:	4602      	mov	r2, r0
 8006c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c86:	6a21      	ldr	r1, [r4, #32]
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b0      	blx	r6
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	d106      	bne.n	8006ca0 <__sflush_r+0x68>
 8006c92:	6829      	ldr	r1, [r5, #0]
 8006c94:	291d      	cmp	r1, #29
 8006c96:	d848      	bhi.n	8006d2a <__sflush_r+0xf2>
 8006c98:	4a29      	ldr	r2, [pc, #164]	; (8006d40 <__sflush_r+0x108>)
 8006c9a:	40ca      	lsrs	r2, r1
 8006c9c:	07d6      	lsls	r6, r2, #31
 8006c9e:	d544      	bpl.n	8006d2a <__sflush_r+0xf2>
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	6062      	str	r2, [r4, #4]
 8006ca4:	04d9      	lsls	r1, r3, #19
 8006ca6:	6922      	ldr	r2, [r4, #16]
 8006ca8:	6022      	str	r2, [r4, #0]
 8006caa:	d504      	bpl.n	8006cb6 <__sflush_r+0x7e>
 8006cac:	1c42      	adds	r2, r0, #1
 8006cae:	d101      	bne.n	8006cb4 <__sflush_r+0x7c>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b903      	cbnz	r3, 8006cb6 <__sflush_r+0x7e>
 8006cb4:	6560      	str	r0, [r4, #84]	; 0x54
 8006cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb8:	602f      	str	r7, [r5, #0]
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d0c9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	d002      	beq.n	8006ccc <__sflush_r+0x94>
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 f8de 	bl	8006e88 <_free_r>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	6360      	str	r0, [r4, #52]	; 0x34
 8006cd0:	e7c0      	b.n	8006c54 <__sflush_r+0x1c>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b0      	blx	r6
 8006cd8:	1c41      	adds	r1, r0, #1
 8006cda:	d1c8      	bne.n	8006c6e <__sflush_r+0x36>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c5      	beq.n	8006c6e <__sflush_r+0x36>
 8006ce2:	2b1d      	cmp	r3, #29
 8006ce4:	d001      	beq.n	8006cea <__sflush_r+0xb2>
 8006ce6:	2b16      	cmp	r3, #22
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0xb6>
 8006cea:	602f      	str	r7, [r5, #0]
 8006cec:	e7b1      	b.n	8006c52 <__sflush_r+0x1a>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	e7ad      	b.n	8006c54 <__sflush_r+0x1c>
 8006cf8:	690f      	ldr	r7, [r1, #16]
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	d0a9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cfe:	0793      	lsls	r3, r2, #30
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	bf08      	it	eq
 8006d04:	694b      	ldreq	r3, [r1, #20]
 8006d06:	600f      	str	r7, [r1, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	eba6 0807 	sub.w	r8, r6, r7
 8006d10:	608b      	str	r3, [r1, #8]
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	dd9c      	ble.n	8006c52 <__sflush_r+0x1a>
 8006d18:	4643      	mov	r3, r8
 8006d1a:	463a      	mov	r2, r7
 8006d1c:	6a21      	ldr	r1, [r4, #32]
 8006d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b0      	blx	r6
 8006d24:	2800      	cmp	r0, #0
 8006d26:	dc06      	bgt.n	8006d36 <__sflush_r+0xfe>
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e78e      	b.n	8006c54 <__sflush_r+0x1c>
 8006d36:	4407      	add	r7, r0
 8006d38:	eba8 0800 	sub.w	r8, r8, r0
 8006d3c:	e7e9      	b.n	8006d12 <__sflush_r+0xda>
 8006d3e:	bf00      	nop
 8006d40:	20400001 	.word	0x20400001

08006d44 <_fflush_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b1db      	cbz	r3, 8006d86 <_fflush_r+0x42>
 8006d4e:	b118      	cbz	r0, 8006d58 <_fflush_r+0x14>
 8006d50:	6983      	ldr	r3, [r0, #24]
 8006d52:	b90b      	cbnz	r3, 8006d58 <_fflush_r+0x14>
 8006d54:	f7ff fa8e 	bl	8006274 <__sinit>
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <_fflush_r+0x48>)
 8006d5a:	429c      	cmp	r4, r3
 8006d5c:	d109      	bne.n	8006d72 <_fflush_r+0x2e>
 8006d5e:	686c      	ldr	r4, [r5, #4]
 8006d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d64:	b17b      	cbz	r3, 8006d86 <_fflush_r+0x42>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d6e:	f7ff bf63 	b.w	8006c38 <__sflush_r>
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <_fflush_r+0x4c>)
 8006d74:	429c      	cmp	r4, r3
 8006d76:	d101      	bne.n	8006d7c <_fflush_r+0x38>
 8006d78:	68ac      	ldr	r4, [r5, #8]
 8006d7a:	e7f1      	b.n	8006d60 <_fflush_r+0x1c>
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <_fflush_r+0x50>)
 8006d7e:	429c      	cmp	r4, r3
 8006d80:	bf08      	it	eq
 8006d82:	68ec      	ldreq	r4, [r5, #12]
 8006d84:	e7ec      	b.n	8006d60 <_fflush_r+0x1c>
 8006d86:	2000      	movs	r0, #0
 8006d88:	bd38      	pop	{r3, r4, r5, pc}
 8006d8a:	bf00      	nop
 8006d8c:	0800716c 	.word	0x0800716c
 8006d90:	0800718c 	.word	0x0800718c
 8006d94:	0800714c 	.word	0x0800714c

08006d98 <_lseek_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4c07      	ldr	r4, [pc, #28]	; (8006db8 <_lseek_r+0x20>)
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	6022      	str	r2, [r4, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7fa fcda 	bl	8001760 <_lseek>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_lseek_r+0x1e>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_lseek_r+0x1e>
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200042f8 	.word	0x200042f8

08006dbc <__swhatbuf_r>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	460e      	mov	r6, r1
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	b096      	sub	sp, #88	; 0x58
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	da07      	bge.n	8006dde <__swhatbuf_r+0x22>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	89b3      	ldrh	r3, [r6, #12]
 8006dd4:	061a      	lsls	r2, r3, #24
 8006dd6:	d410      	bmi.n	8006dfa <__swhatbuf_r+0x3e>
 8006dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ddc:	e00e      	b.n	8006dfc <__swhatbuf_r+0x40>
 8006dde:	466a      	mov	r2, sp
 8006de0:	f000 f8b2 	bl	8006f48 <_fstat_r>
 8006de4:	2800      	cmp	r0, #0
 8006de6:	dbf2      	blt.n	8006dce <__swhatbuf_r+0x12>
 8006de8:	9a01      	ldr	r2, [sp, #4]
 8006dea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006dee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006df2:	425a      	negs	r2, r3
 8006df4:	415a      	adcs	r2, r3
 8006df6:	602a      	str	r2, [r5, #0]
 8006df8:	e7ee      	b.n	8006dd8 <__swhatbuf_r+0x1c>
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	b016      	add	sp, #88	; 0x58
 8006e02:	bd70      	pop	{r4, r5, r6, pc}

08006e04 <__smakebuf_r>:
 8006e04:	898b      	ldrh	r3, [r1, #12]
 8006e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e08:	079d      	lsls	r5, r3, #30
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	d507      	bpl.n	8006e20 <__smakebuf_r+0x1c>
 8006e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	6163      	str	r3, [r4, #20]
 8006e1c:	b002      	add	sp, #8
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	ab01      	add	r3, sp, #4
 8006e22:	466a      	mov	r2, sp
 8006e24:	f7ff ffca 	bl	8006dbc <__swhatbuf_r>
 8006e28:	9900      	ldr	r1, [sp, #0]
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff faab 	bl	8006388 <_malloc_r>
 8006e32:	b948      	cbnz	r0, 8006e48 <__smakebuf_r+0x44>
 8006e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e38:	059a      	lsls	r2, r3, #22
 8006e3a:	d4ef      	bmi.n	8006e1c <__smakebuf_r+0x18>
 8006e3c:	f023 0303 	bic.w	r3, r3, #3
 8006e40:	f043 0302 	orr.w	r3, r3, #2
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	e7e3      	b.n	8006e10 <__smakebuf_r+0xc>
 8006e48:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <__smakebuf_r+0x7c>)
 8006e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	6020      	str	r0, [r4, #0]
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	81a3      	strh	r3, [r4, #12]
 8006e56:	9b00      	ldr	r3, [sp, #0]
 8006e58:	6163      	str	r3, [r4, #20]
 8006e5a:	9b01      	ldr	r3, [sp, #4]
 8006e5c:	6120      	str	r0, [r4, #16]
 8006e5e:	b15b      	cbz	r3, 8006e78 <__smakebuf_r+0x74>
 8006e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e64:	4630      	mov	r0, r6
 8006e66:	f000 f881 	bl	8006f6c <_isatty_r>
 8006e6a:	b128      	cbz	r0, 8006e78 <__smakebuf_r+0x74>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	431d      	orrs	r5, r3
 8006e7c:	81a5      	strh	r5, [r4, #12]
 8006e7e:	e7cd      	b.n	8006e1c <__smakebuf_r+0x18>
 8006e80:	0800623d 	.word	0x0800623d

08006e84 <__malloc_lock>:
 8006e84:	4770      	bx	lr

08006e86 <__malloc_unlock>:
 8006e86:	4770      	bx	lr

08006e88 <_free_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d045      	beq.n	8006f1c <_free_r+0x94>
 8006e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e94:	1f0c      	subs	r4, r1, #4
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfb8      	it	lt
 8006e9a:	18e4      	addlt	r4, r4, r3
 8006e9c:	f7ff fff2 	bl	8006e84 <__malloc_lock>
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <_free_r+0x98>)
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	b933      	cbnz	r3, 8006eb6 <_free_r+0x2e>
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	6014      	str	r4, [r2, #0]
 8006eac:	4628      	mov	r0, r5
 8006eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb2:	f7ff bfe8 	b.w	8006e86 <__malloc_unlock>
 8006eb6:	42a3      	cmp	r3, r4
 8006eb8:	d90c      	bls.n	8006ed4 <_free_r+0x4c>
 8006eba:	6821      	ldr	r1, [r4, #0]
 8006ebc:	1862      	adds	r2, r4, r1
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	bf04      	itt	eq
 8006ec2:	681a      	ldreq	r2, [r3, #0]
 8006ec4:	685b      	ldreq	r3, [r3, #4]
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	bf04      	itt	eq
 8006eca:	1852      	addeq	r2, r2, r1
 8006ecc:	6022      	streq	r2, [r4, #0]
 8006ece:	6004      	str	r4, [r0, #0]
 8006ed0:	e7ec      	b.n	8006eac <_free_r+0x24>
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	b10a      	cbz	r2, 8006edc <_free_r+0x54>
 8006ed8:	42a2      	cmp	r2, r4
 8006eda:	d9fa      	bls.n	8006ed2 <_free_r+0x4a>
 8006edc:	6819      	ldr	r1, [r3, #0]
 8006ede:	1858      	adds	r0, r3, r1
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d10b      	bne.n	8006efc <_free_r+0x74>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	1858      	adds	r0, r3, r1
 8006eea:	4282      	cmp	r2, r0
 8006eec:	6019      	str	r1, [r3, #0]
 8006eee:	d1dd      	bne.n	8006eac <_free_r+0x24>
 8006ef0:	6810      	ldr	r0, [r2, #0]
 8006ef2:	6852      	ldr	r2, [r2, #4]
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	6019      	str	r1, [r3, #0]
 8006efa:	e7d7      	b.n	8006eac <_free_r+0x24>
 8006efc:	d902      	bls.n	8006f04 <_free_r+0x7c>
 8006efe:	230c      	movs	r3, #12
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	e7d3      	b.n	8006eac <_free_r+0x24>
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	1821      	adds	r1, r4, r0
 8006f08:	428a      	cmp	r2, r1
 8006f0a:	bf04      	itt	eq
 8006f0c:	6811      	ldreq	r1, [r2, #0]
 8006f0e:	6852      	ldreq	r2, [r2, #4]
 8006f10:	6062      	str	r2, [r4, #4]
 8006f12:	bf04      	itt	eq
 8006f14:	1809      	addeq	r1, r1, r0
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	605c      	str	r4, [r3, #4]
 8006f1a:	e7c7      	b.n	8006eac <_free_r+0x24>
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	20004034 	.word	0x20004034

08006f24 <_read_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4c07      	ldr	r4, [pc, #28]	; (8006f44 <_read_r+0x20>)
 8006f28:	4605      	mov	r5, r0
 8006f2a:	4608      	mov	r0, r1
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	6022      	str	r2, [r4, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	f7fa fbb4 	bl	80016a0 <_read>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_read_r+0x1e>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_read_r+0x1e>
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200042f8 	.word	0x200042f8

08006f48 <_fstat_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4c07      	ldr	r4, [pc, #28]	; (8006f68 <_fstat_r+0x20>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	f7fa fbe8 	bl	800172a <_fstat>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d102      	bne.n	8006f64 <_fstat_r+0x1c>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	b103      	cbz	r3, 8006f64 <_fstat_r+0x1c>
 8006f62:	602b      	str	r3, [r5, #0]
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
 8006f66:	bf00      	nop
 8006f68:	200042f8 	.word	0x200042f8

08006f6c <_isatty_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4c06      	ldr	r4, [pc, #24]	; (8006f88 <_isatty_r+0x1c>)
 8006f70:	2300      	movs	r3, #0
 8006f72:	4605      	mov	r5, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	f7fa fbe7 	bl	800174a <_isatty>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_isatty_r+0x1a>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_isatty_r+0x1a>
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	200042f8 	.word	0x200042f8

08006f8c <_init>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr

08006f98 <_fini>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr
>>>>>>> 5ac59bfdd46c862823b9d024dd2f89cce0e76fe7

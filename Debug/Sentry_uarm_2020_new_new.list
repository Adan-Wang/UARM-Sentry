
Sentry_uarm_2020_new_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000980c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080099c0  080099c0  000199c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c90  08009c90  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c98  08009c98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c9c  08009c9c  00019c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000437c  20000078  08009d18  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200043f4  08009d18  000243f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202f2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004528  00000000  00000000  0004039a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  000448c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00045e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f37  00000000  00000000  00047210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001416d  00000000  00000000  0006f147  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e334a  00000000  00000000  000832b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001665fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006298  00000000  00000000  0016667c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080099a4 	.word	0x080099a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080099a4 	.word	0x080099a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <Chassis_Task_Func>:
* @brief Function implementing the Chassis_Task thread.
* @param argument: Not used
* @retval None
*/
void Chassis_Task_Func(void const * argument)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Chassis_Task_Func */
	buzzer_play_mario(200);
 8000ec0:	20c8      	movs	r0, #200	; 0xc8
 8000ec2:	f000 fe95 	bl	8001bf0 <buzzer_play_mario>


  int32_t direction = CLOCKWISE; // direction of motor
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]
  double vel = 1000; //Velocity of motor
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	4c06      	ldr	r4, [pc, #24]	; (8000ee8 <Chassis_Task_Func+0x30>)
 8000ed0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  uint32_t cycles_s=5; //Time period is 1 seconds per cycle, 5=5 cycles=5s, the timer is controlled by TIM13
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	 // Forever loop
	  motor_move_period(cycles_s, vel, direction);
 8000ed8:	69f9      	ldr	r1, [r7, #28]
 8000eda:	ed97 0b04 	vldr	d0, [r7, #16]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f000 f804 	bl	8000eec <motor_move_period>
 8000ee4:	e7f8      	b.n	8000ed8 <Chassis_Task_Func+0x20>
 8000ee6:	bf00      	nop
 8000ee8:	408f4000 	.word	0x408f4000

08000eec <motor_move_period>:
 * 		initial_direction: initial direction for motors
 *
 * @ Return: Null
 * @ Author: Haoran, Adan
 */
void motor_move_period(uint32_t cycles, double vel, int32_t initial_direction){
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	ed87 0b00 	vstr	d0, [r7]
 8000ef8:	60b9      	str	r1, [r7, #8]
	int32_t direction;

	//If first loop
	if (first_loop){
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <motor_move_period+0xac>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <motor_move_period+0x1a>
		direction = initial_direction;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	617b      	str	r3, [r7, #20]
	else{

	}
	//TIMEBASE = (APBxTIMCLK / (Prescaler + 1)) / (Period + 1) (Hertz)
	//currently set 1 Hz, if want 0.1s, set Prescaler of TIM13 to 839 (10 Hz)
	if(direction == CLOCKWISE){
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d115      	bne.n	8000f38 <motor_move_period+0x4c>
		HAL_GPIO_WritePin(LD_A_GPIO_Port,LD_A_Pin,GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f12:	4822      	ldr	r0, [pc, #136]	; (8000f9c <motor_move_period+0xb0>)
 8000f14:	f003 f968 	bl	80041e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_B_GPIO_Port,LD_B_Pin,GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	481f      	ldr	r0, [pc, #124]	; (8000f9c <motor_move_period+0xb0>)
 8000f1e:	f003 f963 	bl	80041e8 <HAL_GPIO_WritePin>
		// Clockwise Direction
		// give time counter here
		if (period_counter >= cycles) {
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <motor_move_period+0xb4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d805      	bhi.n	8000f38 <motor_move_period+0x4c>
			period_counter = 0;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <motor_move_period+0xb4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
			direction = COUNTER_CLOCKWISE;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	617b      	str	r3, [r7, #20]
		}
	}
	if(direction == COUNTER_CLOCKWISE){
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3e:	d109      	bne.n	8000f54 <motor_move_period+0x68>
		// Counter Clockwise Direction
		if (period_counter >= cycles){
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <motor_move_period+0xb4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d804      	bhi.n	8000f54 <motor_move_period+0x68>
			period_counter = 0;
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <motor_move_period+0xb4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
			direction = CLOCKWISE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
		}
	}
	//Calculate velocity via direction * speed
	vel = direction*vel;
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff faed 	bl	8000534 <__aeabi_i2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f62:	f7ff fb51 	bl	8000608 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	e9c7 2300 	strd	r2, r3, [r7]

	//Send velocity to motor
	//and function should be written to control the RPM rather than just setting raw value
	Motor_set_raw_value(&motor_data[0], vel);
 8000f6e:	ed97 0b00 	vldr	d0, [r7]
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <motor_move_period+0xb8>)
 8000f74:	f000 fd7a 	bl	8001a6c <Motor_set_raw_value>
	Motor_set_raw_value(&motor_data[1], -vel);
 8000f78:	683c      	ldr	r4, [r7, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000f80:	ec45 4b10 	vmov	d0, r4, r5
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <motor_move_period+0xbc>)
 8000f86:	f000 fd71 	bl	8001a6c <Motor_set_raw_value>
	osDelay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f005 fb3d 	bl	800660a <osDelay>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bdb0      	pop	{r4, r5, r7, pc}
 8000f98:	2000418c 	.word	0x2000418c
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	200002e8 	.word	0x200002e8
 8000fa4:	20004084 	.word	0x20004084
 8000fa8:	200040a0 	.word	0x200040a0
 8000fac:	00000000 	.word	0x00000000

08000fb0 <Gimbal_Task_Function>:
int16_t current_angle;
//Velocity, from -30000 to 30000
int16_t velocity;

void Gimbal_Task_Function(void const * argument)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	ed2d 8b02 	vpush	{d8}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN Gimbal_Task_Function */
  double vmax=30000;
 8000fbc:	a459      	add	r4, pc, #356	; (adr r4, 8001124 <Gimbal_Task_Function+0x174>)
 8000fbe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000fc2:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double max_angle=4096;
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	4c4b      	ldr	r4, [pc, #300]	; (80010f8 <Gimbal_Task_Function+0x148>)
 8000fcc:	e9c7 3402 	strd	r3, r4, [r7, #8]

  //Init comm pack
  comm_pack.yaw_data = 0;
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
  comm_pack.pitch_data = 0;
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  comm_pack.dist_data = 0;
 8000fdc:	4b47      	ldr	r3, [pc, #284]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  comm_pack.fire_cmd = 0;
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  comm_pack.target_num = 0;
 8000fe8:	4b44      	ldr	r3, [pc, #272]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
	//buzzer_play_chromatic(100);
	//buzzer_play_mario(200);
	//int16_t message=7500;

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4843      	ldr	r0, [pc, #268]	; (8001100 <Gimbal_Task_Function+0x150>)
 8000ff2:	f002 fbfc 	bl	80037ee <HAL_CAN_ActivateNotification>

	//HAL_UART_Receive_IT(&husart6, pdata, (PACKLEN+1));
	printf("Gimbal App is on! \r\n");
 8000ff6:	4843      	ldr	r0, [pc, #268]	; (8001104 <Gimbal_Task_Function+0x154>)
 8000ff8:	f006 fd60 	bl	8007abc <puts>
	velocity=3000;
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <Gimbal_Task_Function+0x158>)
 8000ffe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001002:	801a      	strh	r2, [r3, #0]
	abs_pitch=0;
 8001004:	4a41      	ldr	r2, [pc, #260]	; (800110c <Gimbal_Task_Function+0x15c>)
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	f04f 0400 	mov.w	r4, #0
 800100e:	e9c2 3400 	strd	r3, r4, [r2]
	abs_yaw=0;
 8001012:	4a3f      	ldr	r2, [pc, #252]	; (8001110 <Gimbal_Task_Function+0x160>)
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	f04f 0400 	mov.w	r4, #0
 800101c:	e9c2 3400 	strd	r3, r4, [r2]
	  	   * 		since we do not know the freq of pack coming, doing this ensures every pack can be set to motor,
	  	   * 		rather than directly entering next uart interrupt.
	  	   *
	  	   * 		SweepAndPatrol may be put in for loop here, as the target num varible will be the quit signal of sweep mode.
	  	   */
	  	  if(comm_pack.target_num == 0)
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <Gimbal_Task_Function+0x7e>
	  		  // Activate Sweep&Patrol mode
	  		  SweepAndPatrol();
 8001028:	f000 f91c 	bl	8001264 <SweepAndPatrol>
 800102c:	e05e      	b.n	80010ec <Gimbal_Task_Function+0x13c>
	//	  	  strcpy(temp_pdata, pdata);
	//		  comm_pack=parse_all(temp_pdata);
	//		  HAL_UART_Transmit(&husart6, (char*)pdata, (PACKLEN+1),50);
	//		  HAL_UART_Transmit(&husart6, (char*)temp, 17,50);

			  if (comm_pack.pack_cond==PACKCOR){
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d15a      	bne.n	80010ec <Gimbal_Task_Function+0x13c>
				  buzzer_play_c1(500);
 8001036:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103a:	f000 fd61 	bl	8001b00 <buzzer_play_c1>
				  printf("InsideTask -> Yaw: %d;\t Pitch: %d; \t%s\r\n", (int16_t)angle_preprocess(&motor_data[4], comm_pack.yaw_data), (int16_t)angle_preprocess(&motor_data[5], comm_pack.pitch_data), pdata);
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4619      	mov	r1, r3
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <Gimbal_Task_Function+0x164>)
 8001048:	f000 f8bc 	bl	80011c4 <angle_preprocess>
 800104c:	ec54 3b10 	vmov	r3, r4, d0
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f7ff fd88 	bl	8000b68 <__aeabi_d2iz>
 8001058:	4603      	mov	r3, r0
 800105a:	b21b      	sxth	r3, r3
 800105c:	461c      	mov	r4, r3
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <Gimbal_Task_Function+0x14c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	482c      	ldr	r0, [pc, #176]	; (8001118 <Gimbal_Task_Function+0x168>)
 8001068:	f000 f8ac 	bl	80011c4 <angle_preprocess>
 800106c:	ec53 2b10 	vmov	r2, r3, d0
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd78 	bl	8000b68 <__aeabi_d2iz>
 8001078:	4603      	mov	r3, r0
 800107a:	b21b      	sxth	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <Gimbal_Task_Function+0x16c>)
 8001080:	4621      	mov	r1, r4
 8001082:	4827      	ldr	r0, [pc, #156]	; (8001120 <Gimbal_Task_Function+0x170>)
 8001084:	f006 fca6 	bl	80079d4 <iprintf>
				  // Guess the following function should be called only if the pack is correct?
				  Motor_pid_set_angle(&motor_data[4], abs_yaw, vmax/max_angle,0,0);
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <Gimbal_Task_Function+0x160>)
 800108a:	ed93 8b00 	vldr	d8, [r3]
 800108e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001092:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001096:	f7ff fbe1 	bl	800085c <__aeabi_ddiv>
 800109a:	4603      	mov	r3, r0
 800109c:	460c      	mov	r4, r1
 800109e:	4618      	mov	r0, r3
 80010a0:	4621      	mov	r1, r4
 80010a2:	f7ff fd61 	bl	8000b68 <__aeabi_d2iz>
 80010a6:	4601      	mov	r1, r0
 80010a8:	2300      	movs	r3, #0
 80010aa:	2200      	movs	r2, #0
 80010ac:	eeb0 0a48 	vmov.f32	s0, s16
 80010b0:	eef0 0a68 	vmov.f32	s1, s17
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <Gimbal_Task_Function+0x164>)
 80010b6:	f000 fbd7 	bl	8001868 <Motor_pid_set_angle>
				  Motor_pid_set_angle(&motor_data[5], abs_pitch, vmax/max_angle,0,0);
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <Gimbal_Task_Function+0x15c>)
 80010bc:	ed93 8b00 	vldr	d8, [r3]
 80010c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010c8:	f7ff fbc8 	bl	800085c <__aeabi_ddiv>
 80010cc:	4603      	mov	r3, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	4618      	mov	r0, r3
 80010d2:	4621      	mov	r1, r4
 80010d4:	f7ff fd48 	bl	8000b68 <__aeabi_d2iz>
 80010d8:	4601      	mov	r1, r0
 80010da:	2300      	movs	r3, #0
 80010dc:	2200      	movs	r2, #0
 80010de:	eeb0 0a48 	vmov.f32	s0, s16
 80010e2:	eef0 0a68 	vmov.f32	s1, s17
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <Gimbal_Task_Function+0x168>)
 80010e8:	f000 fbbe 	bl	8001868 <Motor_pid_set_angle>
			  //Motor_set_raw_value(&motor_data[4],-3000);
			  //osDelay(1);
	  	  }
		  //Motor_pid_set_angle(&motor_data[4], abs_yaw, vmax/max_angle,0,0);
		  //Motor_pid_set_angle(&motor_data[5], abs_pitch, vmax/max_angle,0,0);
		  osDelay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f005 fa8c 	bl	800660a <osDelay>
	  	  if(comm_pack.target_num == 0)
 80010f2:	e795      	b.n	8001020 <Gimbal_Task_Function+0x70>
 80010f4:	f3af 8000 	nop.w
 80010f8:	40b00000 	.word	0x40b00000
 80010fc:	20004250 	.word	0x20004250
 8001100:	20004190 	.word	0x20004190
 8001104:	080099c0 	.word	0x080099c0
 8001108:	20004242 	.word	0x20004242
 800110c:	20004238 	.word	0x20004238
 8001110:	20004248 	.word	0x20004248
 8001114:	200040f4 	.word	0x200040f4
 8001118:	20004110 	.word	0x20004110
 800111c:	20004268 	.word	0x20004268
 8001120:	080099d4 	.word	0x080099d4
 8001124:	00000000 	.word	0x00000000
 8001128:	40dd4c00 	.word	0x40dd4c00

0800112c <HAL_UART_RxCpltCallback>:
  }

  /* USER CODE END Gimbal_Task_Function */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	61f8      	str	r0, [r7, #28]
	 // When enter this callback function, the variable pdata has been filled with the received data.
	 // Thus parse it directly.
	  //HAL_UART_Transmit(&husart6, 'Inter',5,0xFFFF);
	  HAL_GPIO_TogglePin(GPIOG, LD_H_Pin);
 8001134:	2102      	movs	r1, #2
 8001136:	481b      	ldr	r0, [pc, #108]	; (80011a4 <HAL_UART_RxCpltCallback+0x78>)
 8001138:	f003 f86f 	bl	800421a <HAL_GPIO_TogglePin>
	  comm_pack=parse_all(pdata);
 800113c:	4c1a      	ldr	r4, [pc, #104]	; (80011a8 <HAL_UART_RxCpltCallback+0x7c>)
 800113e:	463b      	mov	r3, r7
 8001140:	491a      	ldr	r1, [pc, #104]	; (80011ac <HAL_UART_RxCpltCallback+0x80>)
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f940 	bl	80013c8 <parse_all>
 8001148:	4625      	mov	r5, r4
 800114a:	463c      	mov	r4, r7
 800114c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001154:	e885 0003 	stmia.w	r5, {r0, r1}
	  abs_yaw=angle_preprocess(&motor_data[4], comm_pack.yaw_data);
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_UART_RxCpltCallback+0x7c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <HAL_UART_RxCpltCallback+0x84>)
 8001162:	f000 f82f 	bl	80011c4 <angle_preprocess>
 8001166:	eeb0 7a40 	vmov.f32	s14, s0
 800116a:	eef0 7a60 	vmov.f32	s15, s1
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_UART_RxCpltCallback+0x88>)
 8001170:	ed83 7b00 	vstr	d7, [r3]
	  abs_pitch=angle_preprocess(&motor_data[5], comm_pack.pitch_data);
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_UART_RxCpltCallback+0x7c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	480e      	ldr	r0, [pc, #56]	; (80011b8 <HAL_UART_RxCpltCallback+0x8c>)
 800117e:	f000 f821 	bl	80011c4 <angle_preprocess>
 8001182:	eeb0 7a40 	vmov.f32	s14, s0
 8001186:	eef0 7a60 	vmov.f32	s15, s1
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_UART_RxCpltCallback+0x90>)
 800118c:	ed83 7b00 	vstr	d7, [r3]
	  //
//	  printf("%s \r\n", pdata);
//	  if(comm_pack.pack_cond == PACKCOR)
//		  printf("Yaw: %d;\t Pitch: %d; \t%s\r\n", (int16_t)angle_preprocess(&motor_data[4], comm_pack.yaw_data), (int16_t)angle_preprocess(&motor_data[5], comm_pack.pitch_data), pdata);
//	  // Enable the uart interrupt again
	  HAL_UART_Receive_IT(&husart6, (char*)pdata, (PACKLEN));
 8001190:	2210      	movs	r2, #16
 8001192:	4906      	ldr	r1, [pc, #24]	; (80011ac <HAL_UART_RxCpltCallback+0x80>)
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_UART_RxCpltCallback+0x94>)
 8001196:	f004 fb7b 	bl	8005890 <HAL_UART_Receive_IT>
}
 800119a:	bf00      	nop
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bdb0      	pop	{r4, r5, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021800 	.word	0x40021800
 80011a8:	20004250 	.word	0x20004250
 80011ac:	20004268 	.word	0x20004268
 80011b0:	200040f4 	.word	0x200040f4
 80011b4:	20004248 	.word	0x20004248
 80011b8:	20004110 	.word	0x20004110
 80011bc:	20004238 	.word	0x20004238
 80011c0:	2000436c 	.word	0x2000436c

080011c4 <angle_preprocess>:


double angle_preprocess(Motor* motor, int16_t recieved_angle){
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b08d      	sub	sp, #52	; 0x34
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t target_angle;
	input_angle=round(recieved_angle*8192/360);
 80011d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011d4:	035b      	lsls	r3, r3, #13
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <angle_preprocess+0x9c>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	441a      	add	r2, r3
 80011de:	1212      	asrs	r2, r2, #8
 80011e0:	17db      	asrs	r3, r3, #31
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9a5 	bl	8000534 <__aeabi_i2d>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	f7ff fcb9 	bl	8000b68 <__aeabi_d2iz>
 80011f6:	4603      	mov	r3, r0
 80011f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

	get_Motor_buffer(motor, &temp_motor_buffer);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fae3 	bl	80017cc <get_Motor_buffer>
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 8001206:	8bbb      	ldrh	r3, [r7, #28]
 8001208:	85bb      	strh	r3, [r7, #44]	; 0x2c

	target_angle=input_angle + rx_angle;
 800120a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800120c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a
	target_angle=(8192+target_angle) % 8192;
 8001214:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001218:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800121c:	425a      	negs	r2, r3
 800121e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001222:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001226:	bf58      	it	pl
 8001228:	4253      	negpl	r3, r2
 800122a:	857b      	strh	r3, [r7, #42]	; 0x2a

	return (double)(target_angle*360/8192);
 800122c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001230:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	da02      	bge.n	8001242 <angle_preprocess+0x7e>
 800123c:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001240:	331f      	adds	r3, #31
 8001242:	135b      	asrs	r3, r3, #13
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f975 	bl	8000534 <__aeabi_i2d>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	ec44 3b17 	vmov	d7, r3, r4
}
 8001252:	eeb0 0a47 	vmov.f32	s0, s14
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	3734      	adds	r7, #52	; 0x34
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	b60b60b7 	.word	0xb60b60b7

08001264 <SweepAndPatrol>:

void SweepAndPatrol(void){
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
	int16_t rx_angle, i;

	// Enter while loop to sweep the gimbal
	while(1){
		// Obtain the current angle
		get_Motor_buffer(&motor_data[4], &temp_motor_buffer);
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4828      	ldr	r0, [pc, #160]	; (8001310 <SweepAndPatrol+0xac>)
 8001270:	f000 faac 	bl	80017cc <get_Motor_buffer>
		rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 8001274:	8a3b      	ldrh	r3, [r7, #16]
 8001276:	83bb      	strh	r3, [r7, #28]
		for(i= rx_angle*8192/360;i<8192;i++){
 8001278:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800127c:	035b      	lsls	r3, r3, #13
 800127e:	4a25      	ldr	r2, [pc, #148]	; (8001314 <SweepAndPatrol+0xb0>)
 8001280:	fb82 1203 	smull	r1, r2, r2, r3
 8001284:	441a      	add	r2, r3
 8001286:	1212      	asrs	r2, r2, #8
 8001288:	17db      	asrs	r3, r3, #31
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	83fb      	strh	r3, [r7, #30]
 800128e:	e015      	b.n	80012bc <SweepAndPatrol+0x58>
			if(comm_pack.target_num > 0)
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <SweepAndPatrol+0xb4>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dc35      	bgt.n	8001304 <SweepAndPatrol+0xa0>
				return;
			Motor_set_raw_value(&motor_data[4],i);
 8001298:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f949 	bl	8000534 <__aeabi_i2d>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	ec44 3b10 	vmov	d0, r3, r4
 80012aa:	4819      	ldr	r0, [pc, #100]	; (8001310 <SweepAndPatrol+0xac>)
 80012ac:	f000 fbde 	bl	8001a6c <Motor_set_raw_value>
		for(i= rx_angle*8192/360;i<8192;i++){
 80012b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
 80012bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012c4:	dbe4      	blt.n	8001290 <SweepAndPatrol+0x2c>
		}
		for(i= 8192; i>0; i--){
 80012c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ca:	83fb      	strh	r3, [r7, #30]
 80012cc:	e015      	b.n	80012fa <SweepAndPatrol+0x96>
			if(comm_pack.target_num > 0)
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <SweepAndPatrol+0xb4>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dc18      	bgt.n	8001308 <SweepAndPatrol+0xa4>
				return;
			Motor_set_raw_value(&motor_data[4],i);
 80012d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f92a 	bl	8000534 <__aeabi_i2d>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	ec44 3b10 	vmov	d0, r3, r4
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <SweepAndPatrol+0xac>)
 80012ea:	f000 fbbf 	bl	8001a6c <Motor_set_raw_value>
		for(i= 8192; i>0; i--){
 80012ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	83fb      	strh	r3, [r7, #30]
 80012fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dce5      	bgt.n	80012ce <SweepAndPatrol+0x6a>
		get_Motor_buffer(&motor_data[4], &temp_motor_buffer);
 8001302:	e7b2      	b.n	800126a <SweepAndPatrol+0x6>
				return;
 8001304:	bf00      	nop
 8001306:	e000      	b.n	800130a <SweepAndPatrol+0xa6>
				return;
 8001308:	bf00      	nop
		}

	}
}
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	200040f4 	.word	0x200040f4
 8001314:	b60b60b7 	.word	0xb60b60b7
 8001318:	20004250 	.word	0x20004250
 800131c:	00000000 	.word	0x00000000

08001320 <parse_pack_indv>:
 * 			     pos: The position of the last byte of the currently extracted data, e.g. yaw.
 * 			     lens: the length of current data, e.g. yaw.
 * @ Return:
 * @ Author: Haoran Qi, Created on: Jan, 2022
 */
int32_t parse_pack_indv(char* pack, int pos, int lens){
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	char pdata_temp[PACKLEN]; //pack content size + '\0'
	    int32_t data = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
	    memcpy(pdata_temp, pack, PACKLEN);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f107 0410 	add.w	r4, r7, #16
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	6859      	ldr	r1, [r3, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	    if (pdata_temp[0] == 0x41){ //check received correct pack head frame， modify here to 0xAA in real world test
 8001340:	7c3b      	ldrb	r3, [r7, #16]
 8001342:	2b41      	cmp	r3, #65	; 0x41
 8001344:	d134      	bne.n	80013b0 <parse_pack_indv+0x90>
			for(int i=0; i<lens; i++){
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
 800134a:	e02c      	b.n	80013a6 <parse_pack_indv+0x86>
	            data += (int32_t)((pdata_temp[pos-i-1] - '0')*pow(10,i)); // decoding, referring to the vision code.
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	3b01      	subs	r3, #1
 8001354:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001358:	4413      	add	r3, r2
 800135a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800135e:	3b30      	subs	r3, #48	; 0x30
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8e7 	bl	8000534 <__aeabi_i2d>
 8001366:	4604      	mov	r4, r0
 8001368:	460d      	mov	r5, r1
 800136a:	6a38      	ldr	r0, [r7, #32]
 800136c:	f7ff f8e2 	bl	8000534 <__aeabi_i2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ec43 2b11 	vmov	d1, r2, r3
 8001378:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80013c0 <parse_pack_indv+0xa0>
 800137c:	f007 fabc 	bl	80088f8 <pow>
 8001380:	ec53 2b10 	vmov	r2, r3, d0
 8001384:	4620      	mov	r0, r4
 8001386:	4629      	mov	r1, r5
 8001388:	f7ff f93e 	bl	8000608 <__aeabi_dmul>
 800138c:	4603      	mov	r3, r0
 800138e:	460c      	mov	r4, r1
 8001390:	4618      	mov	r0, r3
 8001392:	4621      	mov	r1, r4
 8001394:	f7ff fbe8 	bl	8000b68 <__aeabi_d2iz>
 8001398:	4602      	mov	r2, r0
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	4413      	add	r3, r2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
			for(int i=0; i<lens; i++){
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	3301      	adds	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
 80013a6:	6a3a      	ldr	r2, [r7, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dbce      	blt.n	800134c <parse_pack_indv+0x2c>
 80013ae:	e002      	b.n	80013b6 <parse_pack_indv+0x96>
			}
	    }
		else{
			data = -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	    return data;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdb0      	pop	{r4, r5, r7, pc}
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40240000 	.word	0x40240000

080013c8 <parse_all>:
 *
 * @ Return: Parsed pack
 * @ Author: Wenyuan, Wei Created on: May, 2022
 */
comm_rx_info parse_all(char* pack)
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	comm_rx_info Sentry_Pack;
	Sentry_Pack.yaw_data = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
	Sentry_Pack.pitch_data = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	Sentry_Pack.dist_data = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
	Sentry_Pack.fire_cmd = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
	Sentry_Pack.target_num = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
	Sentry_Pack.pack_cond=PACKERR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
	//unsigned char data;
	//int power;

//	if (strlen(pack) == PACKLEN)
//	{
		if (pack[0] == 0x41) //start with 'A'
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b41      	cmp	r3, #65	; 0x41
 80013f0:	d15a      	bne.n	80014a8 <parse_all+0xe0>
		{
			for (int i = 2; i< PACKLEN-1; i++)
 80013f2:	2302      	movs	r3, #2
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	e019      	b.n	800142c <parse_all+0x64>
			{
				if(pack[i]>='0' && pack[i] <= '9') // make sure each number is 0~9
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b2f      	cmp	r3, #47	; 0x2f
 8001402:	d90b      	bls.n	800141c <parse_all+0x54>
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b39      	cmp	r3, #57	; 0x39
 800140e:	d805      	bhi.n	800141c <parse_all+0x54>
				{
					Sentry_Pack.pack_cond = PACKCOR;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
			for (int i = 2; i< PACKLEN-1; i++)
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3301      	adds	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
 800141a:	e007      	b.n	800142c <parse_all+0x64>
				}
				else
				{
					Sentry_Pack.pack_cond = PACKERR;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
					HAL_GPIO_WritePin(GPIOG, LD_D_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2120      	movs	r1, #32
 8001424:	482b      	ldr	r0, [pc, #172]	; (80014d4 <parse_all+0x10c>)
 8001426:	f002 fedf 	bl	80041e8 <HAL_GPIO_WritePin>
					break;
 800142a:	e002      	b.n	8001432 <parse_all+0x6a>
			for (int i = 2; i< PACKLEN-1; i++)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	2b0e      	cmp	r3, #14
 8001430:	dde2      	ble.n	80013f8 <parse_all+0x30>
				}
			}

			if(pack[PACKLEN-1]=='0' || pack[PACKLEN-1] == '1') {// fire command is '0' or '1'
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	330f      	adds	r3, #15
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b30      	cmp	r3, #48	; 0x30
 800143a:	d004      	beq.n	8001446 <parse_all+0x7e>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	330f      	adds	r3, #15
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b31      	cmp	r3, #49	; 0x31
 8001444:	d102      	bne.n	800144c <parse_all+0x84>
				Sentry_Pack.pack_cond = PACKCOR;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	e006      	b.n	800145a <parse_all+0x92>
			}
			else
			{
				Sentry_Pack.pack_cond = PACKERR;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
				HAL_GPIO_WritePin(GPIOG, LD_E_Pin, RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2110      	movs	r1, #16
 8001454:	481f      	ldr	r0, [pc, #124]	; (80014d4 <parse_all+0x10c>)
 8001456:	f002 fec7 	bl	80041e8 <HAL_GPIO_WritePin>
			}
			//only when the format is correct, parse the packet
			if(Sentry_Pack.pack_cond == PACKCOR)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d12a      	bne.n	80014b6 <parse_all+0xee>
			{
				Sentry_Pack.yaw_data=parse_pack_indv(pack,YAW_POS, DATALEN);
 8001460:	2204      	movs	r2, #4
 8001462:	2106      	movs	r1, #6
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f7ff ff5b 	bl	8001320 <parse_pack_indv>
 800146a:	4603      	mov	r3, r0
 800146c:	60fb      	str	r3, [r7, #12]
				Sentry_Pack.pitch_data=parse_pack_indv(pack,PITCH_POS,DATALEN);
 800146e:	2204      	movs	r2, #4
 8001470:	210a      	movs	r1, #10
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f7ff ff54 	bl	8001320 <parse_pack_indv>
 8001478:	4603      	mov	r3, r0
 800147a:	613b      	str	r3, [r7, #16]
				Sentry_Pack.dist_data=parse_pack_indv(pack,DIST_POS,DATALEN);
 800147c:	2204      	movs	r2, #4
 800147e:	210e      	movs	r1, #14
 8001480:	6838      	ldr	r0, [r7, #0]
 8001482:	f7ff ff4d 	bl	8001320 <parse_pack_indv>
 8001486:	4603      	mov	r3, r0
 8001488:	617b      	str	r3, [r7, #20]
				Sentry_Pack.target_num=parse_pack_indv(pack,TARGET_POS,STATELEN);
 800148a:	2201      	movs	r2, #1
 800148c:	210f      	movs	r1, #15
 800148e:	6838      	ldr	r0, [r7, #0]
 8001490:	f7ff ff46 	bl	8001320 <parse_pack_indv>
 8001494:	4603      	mov	r3, r0
 8001496:	61bb      	str	r3, [r7, #24]
				Sentry_Pack.fire_cmd=parse_pack_indv(pack,FCMD_POS,STATELEN);
 8001498:	2201      	movs	r2, #1
 800149a:	2110      	movs	r1, #16
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff ff3f 	bl	8001320 <parse_pack_indv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e006      	b.n	80014b6 <parse_all+0xee>
			}
		}
		else
		{
			Sentry_Pack.pack_cond = PACKERR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
			HAL_GPIO_WritePin(GPIOG, LD_F_Pin, RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2108      	movs	r1, #8
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <parse_all+0x10c>)
 80014b2:	f002 fe99 	bl	80041e8 <HAL_GPIO_WritePin>
//	else
//	{
//		Sentry_Pack.pack_cond = PACKERR;
//		HAL_GPIO_WritePin(GPIOG, LD_G_Pin, RESET);
//	}
	return Sentry_Pack;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	461d      	mov	r5, r3
 80014ba:	f107 040c 	add.w	r4, r7, #12
 80014be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c6:	e885 0003 	stmia.w	r5, {r0, r1}

}
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021800 	.word	0x40021800

080014d8 <Shoot_Task_Func>:
//Internal Functions
void shoot_init(void);
void cmd_execute_shoot(double magazine_speed, double fric_speed);

void Shoot_Task_Func(void const * argument)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  shoot_init();
 80014e0:	f000 f818 	bl	8001514 <shoot_init>
  double fric_wheel_speed_percent=50;
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	4c08      	ldr	r4, [pc, #32]	; (800150c <Shoot_Task_Func+0x34>)
 80014ea:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double mag_load_speed_percent=10;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	4c07      	ldr	r4, [pc, #28]	; (8001510 <Shoot_Task_Func+0x38>)
 80014f4:	e9c7 3402 	strd	r3, r4, [r7, #8]
  for(;;)
  {

	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 80014f8:	ed97 1b04 	vldr	d1, [r7, #16]
 80014fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8001500:	f000 f832 	bl	8001568 <cmd_execute_shoot>


	  //Motor_set_raw_value(&motor_data[0],1000);
	  //Motor_set_raw_value(&motor_data[3],1000);

	  osDelay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f005 f880 	bl	800660a <osDelay>
	  cmd_execute_shoot(mag_load_speed_percent,fric_wheel_speed_percent);
 800150a:	e7f5      	b.n	80014f8 <Shoot_Task_Func+0x20>
 800150c:	40490000 	.word	0x40490000
 8001510:	40240000 	.word	0x40240000

08001514 <shoot_init>:

  }
  /* USER CODE END 5 */
}

void shoot_init(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	//Corresponds to pin H and pin F on the PWM board - need to change manually if we change the pins
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001518:	2100      	movs	r1, #0
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <shoot_init+0x50>)
 800151c:	f003 fb98 	bl	8004c50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001520:	2108      	movs	r1, #8
 8001522:	4810      	ldr	r0, [pc, #64]	; (8001564 <shoot_init+0x50>)
 8001524:	f003 fb94 	bl	8004c50 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MAX_PWM_ON_TIME);
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <shoot_init+0x50>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f640 0298 	movw	r2, #2200	; 0x898
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MAX_PWM_ON_TIME);
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <shoot_init+0x50>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f640 0298 	movw	r2, #2200	; 0x898
 800153a:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1500);
 800153c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001540:	f005 f863 	bl	800660a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,MIN_PWM_ON_TIME);
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <shoot_init+0x50>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,MIN_PWM_ON_TIME);
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <shoot_init+0x50>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(1750);
 8001558:	f240 60d6 	movw	r0, #1750	; 0x6d6
 800155c:	f005 f855 	bl	800660a <osDelay>

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20004044 	.word	0x20004044

08001568 <cmd_execute_shoot>:
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3,input);
}

//Shoot function, will spin magazine as well as friction wheels, the inputs represents speed in percent - 100 means 100% speed, 50 means 50% speed
//We'll tune speed at the end to optimize for performance
void cmd_execute_shoot(double magazine_speed, double fric_speed){
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001572:	ed87 1b00 	vstr	d1, [r7]

	double raw_input=magazine_speed/100*MAG_MOTOR_MAX_SPEED;
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <cmd_execute_shoot+0x50>)
 800157c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001580:	f7ff f96c 	bl	800085c <__aeabi_ddiv>
 8001584:	4603      	mov	r3, r0
 8001586:	460c      	mov	r4, r1
 8001588:	4618      	mov	r0, r3
 800158a:	4621      	mov	r1, r4
 800158c:	a308      	add	r3, pc, #32	; (adr r3, 80015b0 <cmd_execute_shoot+0x48>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f839 	bl	8000608 <__aeabi_dmul>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	Motor_set_raw_value(&motor_data[3],raw_input);
 800159e:	ed97 0b04 	vldr	d0, [r7, #16]
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <cmd_execute_shoot+0x54>)
 80015a4:	f000 fa62 	bl	8001a6c <Motor_set_raw_value>
	//osdelay(1000);
	//fric_wheel_set_speed(fric_speed);

}
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40c38800 	.word	0x40c38800
 80015b8:	40590000 	.word	0x40590000
 80015bc:	200040d8 	.word	0x200040d8

080015c0 <Timer_Task_Func>:
 */

#include "Timer_App.h"


void Timer_Task_Func(void const * argument){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

	uint32_t tick;

	for (;;){

		Motor_Data_Read();
 80015c8:	f000 f816 	bl	80015f8 <Motor_Data_Read>
		Motor_Data_Sent();
 80015cc:	f000 f87a 	bl	80016c4 <Motor_Data_Sent>
		Motor temp_buffer;
		Motor temp_buffer_3508;
		get_Motor_buffer(&motor_data[4], &temp_buffer);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <Timer_Task_Func+0x30>)
 80015d8:	f000 f8f8 	bl	80017cc <get_Motor_buffer>
		get_Motor_buffer(&motor_data[0], &temp_buffer_3508);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4619      	mov	r1, r3
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <Timer_Task_Func+0x34>)
 80015e4:	f000 f8f2 	bl	80017cc <get_Motor_buffer>
		//Read data complete complete

		//Grab send data from other applications
		//Send data

		osDelay(1);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f005 f80e 	bl	800660a <osDelay>
	for (;;){
 80015ee:	e7eb      	b.n	80015c8 <Timer_Task_Func+0x8>
 80015f0:	200040f4 	.word	0x200040f4
 80015f4:	20004084 	.word	0x20004084

080015f8 <Motor_Data_Read>:


/**
 * This function will read all data from
 */
void Motor_Data_Read() {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0

	uint8_t motorStatus2[8];
	for (int i=0; i<MOTOR_COUNT; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e052      	b.n	80016aa <Motor_Data_Read+0xb2>
		can_filter_enable(&hcan1);
 8001604:	482c      	ldr	r0, [pc, #176]	; (80016b8 <Motor_Data_Read+0xc0>)
 8001606:	f000 fd19 	bl	800203c <can_filter_enable>

		memcpy(motorStatus2, can_rx_buffer[i],8);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <Motor_Data_Read+0xc4>)
 8001610:	441a      	add	r2, r3
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	6810      	ldr	r0, [r2, #0]
 8001616:	6851      	ldr	r1, [r2, #4]
 8001618:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus2[0] << 8 | motorStatus2[1]);
 800161a:	793b      	ldrb	r3, [r7, #4]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	797b      	ldrb	r3, [r7, #5]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b218      	sxth	r0, r3
 8001628:	4925      	ldr	r1, [pc, #148]	; (80016c0 <Motor_Data_Read+0xc8>)
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	3310      	adds	r3, #16
 8001638:	4602      	mov	r2, r0
 800163a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus2[2] << 8 | motorStatus2[3]);
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b218      	sxth	r0, r3
 800164a:	491d      	ldr	r1, [pc, #116]	; (80016c0 <Motor_Data_Read+0xc8>)
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3312      	adds	r3, #18
 800165a:	4602      	mov	r2, r0
 800165c:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus2[4] << 8 | motorStatus2[5]);
 800165e:	7a3b      	ldrb	r3, [r7, #8]
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21a      	sxth	r2, r3
 8001664:	7a7b      	ldrb	r3, [r7, #9]
 8001666:	b21b      	sxth	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b218      	sxth	r0, r3
 800166c:	4914      	ldr	r1, [pc, #80]	; (80016c0 <Motor_Data_Read+0xc8>)
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3314      	adds	r3, #20
 800167c:	4602      	mov	r2, r0
 800167e:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus2[6]);
 8001680:	7abb      	ldrb	r3, [r7, #10]
 8001682:	b218      	sxth	r0, r3
 8001684:	490e      	ldr	r1, [pc, #56]	; (80016c0 <Motor_Data_Read+0xc8>)
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3316      	adds	r3, #22
 8001694:	4602      	mov	r2, r0
 8001696:	801a      	strh	r2, [r3, #0]
		//Current angle is absolute
		osDelay(1);
 8001698:	2001      	movs	r0, #1
 800169a:	f004 ffb6 	bl	800660a <osDelay>

		can_filter_disable(&hcan1);
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <Motor_Data_Read+0xc0>)
 80016a0:	f000 fcee 	bl	8002080 <can_filter_disable>
	for (int i=0; i<MOTOR_COUNT; i++) {
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	dda9      	ble.n	8001604 <Motor_Data_Read+0xc>
	}
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20004190 	.word	0x20004190
 80016bc:	200041b8 	.word	0x200041b8
 80016c0:	20004084 	.word	0x20004084

080016c4 <Motor_Data_Sent>:
/**
 * This function will sent all motor inputs from Motor_data array with two iteration
 * The first iteration is sent to motors with StdID of 0x1FF as Motor 3508
 * The second iteration is sent to motors with StdID of 0x200 as Motor 6020
 */
void Motor_Data_Sent() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
    uint8_t chassis_can_send_data[8];
    uint32_t send_mail_box;
    CAN_TxHeaderTypeDef  chassis_tx_message;

    chassis_tx_message.IDE = CAN_ID_STD;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
    chassis_tx_message.RTR = CAN_RTR_DATA;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
    chassis_tx_message.DLC = 0x08;
 80016d2:	2308      	movs	r3, #8
 80016d4:	613b      	str	r3, [r7, #16]

	for (int i=0; i<2; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e06c      	b.n	80017b6 <Motor_Data_Sent+0xf2>
		if (i == 0) {
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d12b      	bne.n	800173a <Motor_Data_Sent+0x76>
			chassis_tx_message.StdId = MOTOR_3508_STDID;
 80016e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e6:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[0].tx_data >> 8;
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <Motor_Data_Sent+0x100>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	121b      	asrs	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[0].tx_data;
 80016f2:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <Motor_Data_Sent+0x100>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[1].tx_data >> 8;
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <Motor_Data_Sent+0x100>)
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	121b      	asrs	r3, r3, #8
 8001700:	b2db      	uxtb	r3, r3
 8001702:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[1].tx_data;
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	b2db      	uxtb	r3, r3
 800170a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[2].tx_data >> 8;
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <Motor_Data_Sent+0x100>)
 800170e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001710:	121b      	asrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[2].tx_data;
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <Motor_Data_Sent+0x100>)
 800171a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[3].tx_data >> 8;
 8001722:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001726:	121b      	asrs	r3, r3, #8
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[3].tx_data;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001738:	e032      	b.n	80017a0 <Motor_Data_Sent+0xdc>
		}
		else {
			chassis_tx_message.StdId = MOTOR_6020_STDID;
 800173a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800173e:	603b      	str	r3, [r7, #0]

		    chassis_can_send_data[0] = motor_data[4].tx_data >> 8;
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	121b      	asrs	r3, r3, #8
 8001748:	b2db      	uxtb	r3, r3
 800174a:	773b      	strb	r3, [r7, #28]
		    chassis_can_send_data[1] = motor_data[4].tx_data;
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <Motor_Data_Sent+0x100>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001752:	b2db      	uxtb	r3, r3
 8001754:	777b      	strb	r3, [r7, #29]
		    chassis_can_send_data[2] = motor_data[5].tx_data >> 8;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001758:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800175c:	121b      	asrs	r3, r3, #8
 800175e:	b2db      	uxtb	r3, r3
 8001760:	77bb      	strb	r3, [r7, #30]
		    chassis_can_send_data[3] = motor_data[5].tx_data;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001768:	b2db      	uxtb	r3, r3
 800176a:	77fb      	strb	r3, [r7, #31]
		    chassis_can_send_data[4] = motor_data[6].tx_data >> 8;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <Motor_Data_Sent+0x100>)
 800176e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001772:	121b      	asrs	r3, r3, #8
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f887 3020 	strb.w	r3, [r7, #32]
		    chassis_can_send_data[5] = motor_data[6].tx_data;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <Motor_Data_Sent+0x100>)
 800177c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		    chassis_can_send_data[6] = motor_data[7].tx_data >> 8;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001788:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800178c:	121b      	asrs	r3, r3, #8
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    chassis_can_send_data[7] = motor_data[7].tx_data;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <Motor_Data_Sent+0x100>)
 8001796:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

	    HAL_CAN_AddTxMessage(&hcan1, &chassis_tx_message, chassis_can_send_data, &send_mail_box);
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	f107 021c 	add.w	r2, r7, #28
 80017a8:	4639      	mov	r1, r7
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <Motor_Data_Sent+0x104>)
 80017ac:	f001 fe32 	bl	8003414 <HAL_CAN_AddTxMessage>
	for (int i=0; i<2; i++) {
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	3301      	adds	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	dd8f      	ble.n	80016dc <Motor_Data_Sent+0x18>
	}
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20004084 	.word	0x20004084
 80017c8:	20004190 	.word	0x20004190

080017cc <get_Motor_buffer>:

/**
 * copy destination to origin
 */
void get_Motor_buffer(Motor* origin, Motor* destination) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80017d6:	6839      	ldr	r1, [r7, #0]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f811 	bl	8001800 <Motor_Data_Replacement>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <set_Motor_buffer>:
/**
 * copy origin to destination
 */
void set_Motor_buffer(Motor* origin, Motor* destination) {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	Motor_Data_Replacement(origin, destination);
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f804 	bl	8001800 <Motor_Data_Replacement>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <Motor_Data_Replacement>:

/**
 * copy origin to destination this can be done by memcopy
 * need to implement critical section or Mutex
 */
void Motor_Data_Replacement(Motor* origin, Motor* destination) {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	destination->tx_data = origin->tx_data;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	619a      	str	r2, [r3, #24]

	destination->motor_feedback.rx_angle = origin->motor_feedback.rx_angle;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	821a      	strh	r2, [r3, #16]
	destination->motor_feedback.rx_current = origin->motor_feedback.rx_current;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	829a      	strh	r2, [r3, #20]
	destination->motor_feedback.rx_rpm = origin->motor_feedback.rx_rpm;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	825a      	strh	r2, [r3, #18]
	destination->motor_feedback.rx_temp = origin->motor_feedback.rx_temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	82da      	strh	r2, [r3, #22]

	destination->motor_info.stdid = origin->motor_info.stdid;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	601a      	str	r2, [r3, #0]

	destination->motor_info.P_parameter = origin->motor_info.P_parameter;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	605a      	str	r2, [r3, #4]
	destination->motor_info.I_parameter = origin->motor_info.I_parameter;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	609a      	str	r2, [r3, #8]
	destination->motor_info.D_parameter = origin->motor_info.D_parameter;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	60da      	str	r2, [r3, #12]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <Motor_pid_set_angle>:


//PID Function, expects a POINTER to motor structure, target ABSOLUTE angle in DEGREES (between 0 and 360), and P/I/D parameters
void Motor_pid_set_angle(Motor* motor, double angle, int32_t p, int32_t i, int32_t d){
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b097      	sub	sp, #92	; 0x5c
 800186c:	af00      	add	r7, sp, #0
 800186e:	6178      	str	r0, [r7, #20]
 8001870:	ed87 0b02 	vstr	d0, [r7, #8]
 8001874:	6139      	str	r1, [r7, #16]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	Motor temp_motor_buffer;
	int16_t rx_angle;
	int16_t input_angle;
	int16_t current_error;
	int16_t target_angle;
	int16_t min_speed=1000;
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t tolerance=20;
 8001882:	2314      	movs	r3, #20
 8001884:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int16_t direction=1;
 8001888:	2301      	movs	r3, #1
 800188a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	double velocity=0;
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f04f 0400 	mov.w	r4, #0
 8001896:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double speed=0;
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f04f 0400 	mov.w	r4, #0
 80018a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	input_angle=round(angle/360*8192);
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b6e      	ldr	r3, [pc, #440]	; (8001a64 <Motor_pid_set_angle+0x1fc>)
 80018ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b0:	f7fe ffd4 	bl	800085c <__aeabi_ddiv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	4618      	mov	r0, r3
 80018ba:	4621      	mov	r1, r4
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <Motor_pid_set_angle+0x200>)
 80018c2:	f7fe fea1 	bl	8000608 <__aeabi_dmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	ec44 3b17 	vmov	d7, r3, r4
 80018ce:	eeb0 0a47 	vmov.f32	s0, s14
 80018d2:	eef0 0a67 	vmov.f32	s1, s15
 80018d6:	f006 ffc5 	bl	8008864 <round>
 80018da:	ec54 3b10 	vmov	r3, r4, d0
 80018de:	4618      	mov	r0, r3
 80018e0:	4621      	mov	r1, r4
 80018e2:	f7ff f941 	bl	8000b68 <__aeabi_d2iz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	get_Motor_buffer(motor, &temp_motor_buffer);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff6a 	bl	80017cc <get_Motor_buffer>


	temp_motor_buffer.motor_info.P_parameter=p;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	623b      	str	r3, [r7, #32]
	temp_motor_buffer.motor_info.I_parameter=i;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
	temp_motor_buffer.motor_info.D_parameter=d;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
	rx_angle=temp_motor_buffer.motor_feedback.rx_angle;
 8001904:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001906:	87fb      	strh	r3, [r7, #62]	; 0x3e

	target_angle=input_angle;
 8001908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800190c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	/*if (target_angle % 8192 !=0){
		target_angle=target_angle%8192;
	}*/

	current_error=(target_angle-rx_angle+8192)%8192; //Use target - rx + 8192 to always make it positive, mod 8192 to make sure its within [0,8192]
 800190e:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8001912:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800191c:	425a      	negs	r2, r3
 800191e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001922:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001926:	bf58      	it	pl
 8001928:	4253      	negpl	r3, r2
 800192a:	877b      	strh	r3, [r7, #58]	; 0x3a
	//If error is not small, but motor turns less than 180 degrees, turn as per usual using p*error
	//If error is not small, but motor needs to turn more than 180 degrees, reverse direction, and error is the error "the other way"
	//In cases where error is not small, set minimum speed so that the motor doesnt stop turning due to friction

	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	if (current_error<tolerance){
 800192c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001930:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001934:	429a      	cmp	r2, r3
 8001936:	da06      	bge.n	8001946 <Motor_pid_set_angle+0xde>
		velocity=0;
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001944:	e07d      	b.n	8001a42 <Motor_pid_set_angle+0x1da>
	}
	else{
		if (current_error<=4096){ //If need to turn less than 180 degrees, go CW
 8001946:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800194a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194e:	dc39      	bgt.n	80019c4 <Motor_pid_set_angle+0x15c>
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, SET);
			direction=1;
 8001950:	2301      	movs	r3, #1
 8001952:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 8001956:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fde7 	bl	8000534 <__aeabi_i2d>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 800196e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdde 	bl	8000534 <__aeabi_i2d>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001984:	f7ff f8b2 	bl	8000aec <__aeabi_dcmplt>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d008      	beq.n	80019a0 <Motor_pid_set_angle+0x138>
				speed=min_speed;
 800198e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdce 	bl	8000534 <__aeabi_i2d>
 8001998:	4603      	mov	r3, r0
 800199a:	460c      	mov	r4, r1
 800199c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 80019a0:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdc5 	bl	8000534 <__aeabi_i2d>
 80019aa:	4603      	mov	r3, r0
 80019ac:	460c      	mov	r4, r1
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019b6:	f7fe fe27 	bl	8000608 <__aeabi_dmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 80019c2:	e03e      	b.n	8001a42 <Motor_pid_set_angle+0x1da>
		}
		else{ //Otherwise, go CCW
			//HAL_GPIO_WritePin(GPIOG, LD_B_Pin, RESET);
			//HAL_GPIO_WritePin(GPIOG, LD_A_Pin, SET);
			current_error=(8192-current_error); //Error from "the other side" obtained by 8192-error if CCW
 80019c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80019c6:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	877b      	strh	r3, [r7, #58]	; 0x3a
			direction=-1;
 80019ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			speed=p*current_error;
 80019d6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fda7 	bl	8000534 <__aeabi_i2d>
 80019e6:	4603      	mov	r3, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

			if (speed<min_speed){
 80019ee:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd9e 	bl	8000534 <__aeabi_i2d>
 80019f8:	4603      	mov	r3, r0
 80019fa:	460c      	mov	r4, r1
 80019fc:	461a      	mov	r2, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a04:	f7ff f872 	bl	8000aec <__aeabi_dcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <Motor_pid_set_angle+0x1b8>
				speed=min_speed;
 8001a0e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd8e 	bl	8000534 <__aeabi_i2d>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			}

			velocity=direction*speed;
 8001a20:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd85 	bl	8000534 <__aeabi_i2d>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4623      	mov	r3, r4
 8001a32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a36:	f7fe fde7 	bl	8000608 <__aeabi_dmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460c      	mov	r4, r1
 8001a3e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	////----------------------------This seciton will likely need to be modified if we try to add in I and D control--------------------////
	//current_error=3000;



	temp_motor_buffer.tx_data=velocity;
 8001a42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a46:	f7ff f88f 	bl	8000b68 <__aeabi_d2iz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
	set_Motor_buffer(&temp_motor_buffer,motor);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	6979      	ldr	r1, [r7, #20]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fec6 	bl	80017e6 <set_Motor_buffer>

}
 8001a5a:	bf00      	nop
 8001a5c:	375c      	adds	r7, #92	; 0x5c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40768000 	.word	0x40768000
 8001a68:	40c00000 	.word	0x40c00000

08001a6c <Motor_set_raw_value>:

//Sets a raw value to a motor - look at datasheets to see what values the motor supports
//Quick reference: P2006 - 10000, M3508 - 16000, GM6020 - 30000
void Motor_set_raw_value(Motor* motor, double value){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	ed87 0b00 	vstr	d0, [r7]
	Motor temp_motor_buffer;
	get_Motor_buffer(motor, &temp_motor_buffer);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff fea4 	bl	80017cc <get_Motor_buffer>
	temp_motor_buffer.tx_data=(int32_t)value;
 8001a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a88:	f7ff f86e 	bl	8000b68 <__aeabi_d2iz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	set_Motor_buffer(&temp_motor_buffer,motor);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fea5 	bl	80017e6 <set_Motor_buffer>
}
 8001a9c:	bf00      	nop
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <buzzer_init>:
 *      Use HAL_Delay instead of OS_delay if you want to use it before free RTOS kicks in
 */

#include "buzzer.h"

void buzzer_init(void){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <buzzer_init+0x10>)
 8001aac:	f003 f8d0 	bl	8004c50 <HAL_TIM_PWM_Start>

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200041f8 	.word	0x200041f8

08001ab8 <buzzer_play_g0>:

void buzzer_play_g0(int32_t duration){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <buzzer_play_g0+0x44>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,9523);
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <buzzer_play_g0+0x44>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f242 5233 	movw	r2, #9523	; 0x2533
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <buzzer_play_g0+0x44>)
 8001ad4:	f242 5233 	movw	r2, #9523	; 0x2533
 8001ad8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <buzzer_play_g0+0x44>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2264      	movs	r2, #100	; 0x64
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fd90 	bl	800660a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <buzzer_play_g0+0x44>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200041f8 	.word	0x200041f8

08001b00 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <buzzer_play_c1+0x44>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&htim12, 35);
	__HAL_TIM_SET_AUTORELOAD(&htim12,7135);
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <buzzer_play_c1+0x44>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <buzzer_play_c1+0x44>)
 8001b1c:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8001b20:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <buzzer_play_c1+0x44>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2264      	movs	r2, #100	; 0x64
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 fd6c 	bl	800660a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <buzzer_play_c1+0x44>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200041f8 	.word	0x200041f8

08001b48 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_e1(int32_t duration){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 25);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <buzzer_play_e1+0x44>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,5662);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <buzzer_play_e1+0x44>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f241 621e 	movw	r2, #5662	; 0x161e
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <buzzer_play_e1+0x44>)
 8001b64:	f241 621e 	movw	r2, #5662	; 0x161e
 8001b68:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <buzzer_play_e1+0x44>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2264      	movs	r2, #100	; 0x64
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fd48 	bl	800660a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <buzzer_play_e1+0x44>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200041f8 	.word	0x200041f8

08001b90 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_play_g1(int32_t duration){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&htim12, 21);
	__HAL_TIM_SET_COUNTER(&htim12,0);
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <buzzer_play_g1+0x44>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim12,4761);
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <buzzer_play_g1+0x44>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f241 2299 	movw	r2, #4761	; 0x1299
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <buzzer_play_g1+0x44>)
 8001bac:	f241 2299 	movw	r2, #4761	; 0x1299
 8001bb0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <buzzer_play_g1+0x44>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2264      	movs	r2, #100	; 0x64
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(duration);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 fd24 	bl	800660a <osDelay>
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <buzzer_play_g1+0x44>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200041f8 	.word	0x200041f8

08001bd8 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,0);
}

void buzzer_rest(int32_t duration){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 fd11 	bl	800660a <osDelay>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <buzzer_play_mario>:



}

void buzzer_play_mario(int32_t bpm){
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b08d      	sub	sp, #52	; 0x34
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe fc9b 	bl	8000534 <__aeabi_i2d>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	461a      	mov	r2, r3
 8001c04:	4623      	mov	r3, r4
 8001c06:	f04f 0000 	mov.w	r0, #0
 8001c0a:	49bf      	ldr	r1, [pc, #764]	; (8001f08 <buzzer_play_mario+0x318>)
 8001c0c:	f7fe fe26 	bl	800085c <__aeabi_ddiv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	460c      	mov	r4, r1
 8001c14:	4618      	mov	r0, r3
 8001c16:	4621      	mov	r1, r4
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4bbb      	ldr	r3, [pc, #748]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001c1e:	f7fe fcf3 	bl	8000608 <__aeabi_dmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	4618      	mov	r0, r3
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f7fe ff9d 	bl	8000b68 <__aeabi_d2iz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t quarter_dot=(double)60/bpm*1000*1.5;
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fc7e 	bl	8000534 <__aeabi_i2d>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4623      	mov	r3, r4
 8001c40:	f04f 0000 	mov.w	r0, #0
 8001c44:	49b0      	ldr	r1, [pc, #704]	; (8001f08 <buzzer_play_mario+0x318>)
 8001c46:	f7fe fe09 	bl	800085c <__aeabi_ddiv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4bad      	ldr	r3, [pc, #692]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001c58:	f7fe fcd6 	bl	8000608 <__aeabi_dmul>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	4618      	mov	r0, r3
 8001c62:	4621      	mov	r1, r4
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4ba9      	ldr	r3, [pc, #676]	; (8001f10 <buzzer_play_mario+0x320>)
 8001c6a:	f7fe fccd 	bl	8000608 <__aeabi_dmul>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460c      	mov	r4, r1
 8001c72:	4618      	mov	r0, r3
 8001c74:	4621      	mov	r1, r4
 8001c76:	f7fe ff77 	bl	8000b68 <__aeabi_d2iz>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t eighth=(double)60/bpm*1000*0.5;
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fc58 	bl	8000534 <__aeabi_i2d>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	499d      	ldr	r1, [pc, #628]	; (8001f08 <buzzer_play_mario+0x318>)
 8001c92:	f7fe fde3 	bl	800085c <__aeabi_ddiv>
 8001c96:	4603      	mov	r3, r0
 8001c98:	460c      	mov	r4, r1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b9a      	ldr	r3, [pc, #616]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001ca4:	f7fe fcb0 	bl	8000608 <__aeabi_dmul>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4618      	mov	r0, r3
 8001cae:	4621      	mov	r1, r4
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b97      	ldr	r3, [pc, #604]	; (8001f14 <buzzer_play_mario+0x324>)
 8001cb6:	f7fe fca7 	bl	8000608 <__aeabi_dmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	f7fe ff51 	bl	8000b68 <__aeabi_d2iz>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t eighth_dot=(double)60/bpm*1000*0.5*1.5;
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fc32 	bl	8000534 <__aeabi_i2d>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	498a      	ldr	r1, [pc, #552]	; (8001f08 <buzzer_play_mario+0x318>)
 8001cde:	f7fe fdbd 	bl	800085c <__aeabi_ddiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4621      	mov	r1, r4
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b87      	ldr	r3, [pc, #540]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001cf0:	f7fe fc8a 	bl	8000608 <__aeabi_dmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b84      	ldr	r3, [pc, #528]	; (8001f14 <buzzer_play_mario+0x324>)
 8001d02:	f7fe fc81 	bl	8000608 <__aeabi_dmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <buzzer_play_mario+0x320>)
 8001d14:	f7fe fc78 	bl	8000608 <__aeabi_dmul>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	460c      	mov	r4, r1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	4621      	mov	r1, r4
 8001d20:	f7fe ff22 	bl	8000b68 <__aeabi_d2iz>
 8001d24:	4603      	mov	r3, r0
 8001d26:	623b      	str	r3, [r7, #32]
	int32_t sixteenth=(double)60/bpm*0.25*1000;
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7fe fc03 	bl	8000534 <__aeabi_i2d>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460c      	mov	r4, r1
 8001d32:	461a      	mov	r2, r3
 8001d34:	4623      	mov	r3, r4
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	4973      	ldr	r1, [pc, #460]	; (8001f08 <buzzer_play_mario+0x318>)
 8001d3c:	f7fe fd8e 	bl	800085c <__aeabi_ddiv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	4618      	mov	r0, r3
 8001d46:	4621      	mov	r1, r4
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <buzzer_play_mario+0x328>)
 8001d4e:	f7fe fc5b 	bl	8000608 <__aeabi_dmul>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	4618      	mov	r0, r3
 8001d58:	4621      	mov	r1, r4
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001d60:	f7fe fc52 	bl	8000608 <__aeabi_dmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	4618      	mov	r0, r3
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	f7fe fefc 	bl	8000b68 <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	61fb      	str	r3, [r7, #28]
	int32_t sixteenth_dot=(double)60/bpm*0.25*1000*1.5;
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe fbdd 	bl	8000534 <__aeabi_i2d>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460c      	mov	r4, r1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	4960      	ldr	r1, [pc, #384]	; (8001f08 <buzzer_play_mario+0x318>)
 8001d88:	f7fe fd68 	bl	800085c <__aeabi_ddiv>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	4618      	mov	r0, r3
 8001d92:	4621      	mov	r1, r4
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <buzzer_play_mario+0x328>)
 8001d9a:	f7fe fc35 	bl	8000608 <__aeabi_dmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460c      	mov	r4, r1
 8001da2:	4618      	mov	r0, r3
 8001da4:	4621      	mov	r1, r4
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001dac:	f7fe fc2c 	bl	8000608 <__aeabi_dmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4618      	mov	r0, r3
 8001db6:	4621      	mov	r1, r4
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <buzzer_play_mario+0x320>)
 8001dbe:	f7fe fc23 	bl	8000608 <__aeabi_dmul>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4621      	mov	r1, r4
 8001dca:	f7fe fecd 	bl	8000b68 <__aeabi_d2iz>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	61bb      	str	r3, [r7, #24]
	int32_t half=(double)60/bpm*2*1000;
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fbae 	bl	8000534 <__aeabi_i2d>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4623      	mov	r3, r4
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	4948      	ldr	r1, [pc, #288]	; (8001f08 <buzzer_play_mario+0x318>)
 8001de6:	f7fe fd39 	bl	800085c <__aeabi_ddiv>
 8001dea:	4603      	mov	r3, r0
 8001dec:	460c      	mov	r4, r1
 8001dee:	4618      	mov	r0, r3
 8001df0:	4621      	mov	r1, r4
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	f7fe fa51 	bl	800029c <__adddf3>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4621      	mov	r1, r4
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001e08:	f7fe fbfe 	bl	8000608 <__aeabi_dmul>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	4618      	mov	r0, r3
 8001e12:	4621      	mov	r1, r4
 8001e14:	f7fe fea8 	bl	8000b68 <__aeabi_d2iz>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	617b      	str	r3, [r7, #20]
	int32_t half_dot=(double)60/bpm*2*1000*1.5;
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fb89 	bl	8000534 <__aeabi_i2d>
 8001e22:	4603      	mov	r3, r0
 8001e24:	460c      	mov	r4, r1
 8001e26:	461a      	mov	r2, r3
 8001e28:	4623      	mov	r3, r4
 8001e2a:	f04f 0000 	mov.w	r0, #0
 8001e2e:	4936      	ldr	r1, [pc, #216]	; (8001f08 <buzzer_play_mario+0x318>)
 8001e30:	f7fe fd14 	bl	800085c <__aeabi_ddiv>
 8001e34:	4603      	mov	r3, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4621      	mov	r1, r4
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	f7fe fa2c 	bl	800029c <__adddf3>
 8001e44:	4603      	mov	r3, r0
 8001e46:	460c      	mov	r4, r1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001e52:	f7fe fbd9 	bl	8000608 <__aeabi_dmul>
 8001e56:	4603      	mov	r3, r0
 8001e58:	460c      	mov	r4, r1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <buzzer_play_mario+0x320>)
 8001e64:	f7fe fbd0 	bl	8000608 <__aeabi_dmul>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4621      	mov	r1, r4
 8001e70:	f7fe fe7a 	bl	8000b68 <__aeabi_d2iz>
 8001e74:	4603      	mov	r3, r0
 8001e76:	613b      	str	r3, [r7, #16]
	int32_t whole=(double)60/bpm*4*1000;
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe fb5b 	bl	8000534 <__aeabi_i2d>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	461a      	mov	r2, r3
 8001e84:	4623      	mov	r3, r4
 8001e86:	f04f 0000 	mov.w	r0, #0
 8001e8a:	491f      	ldr	r1, [pc, #124]	; (8001f08 <buzzer_play_mario+0x318>)
 8001e8c:	f7fe fce6 	bl	800085c <__aeabi_ddiv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	4618      	mov	r0, r3
 8001e96:	4621      	mov	r1, r4
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <buzzer_play_mario+0x32c>)
 8001e9e:	f7fe fbb3 	bl	8000608 <__aeabi_dmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <buzzer_play_mario+0x31c>)
 8001eb0:	f7fe fbaa 	bl	8000608 <__aeabi_dmul>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	460c      	mov	r4, r1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	4621      	mov	r1, r4
 8001ebc:	f7fe fe54 	bl	8000b68 <__aeabi_d2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]

	buzzer_play_e1(eighth);
 8001ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ec6:	f7ff fe3f 	bl	8001b48 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 8001eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ecc:	f7ff fe3c 	bl	8001b48 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001ed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ed2:	f7ff fe81 	bl	8001bd8 <buzzer_rest>
	buzzer_play_e1(eighth);
 8001ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ed8:	f7ff fe36 	bl	8001b48 <buzzer_play_e1>
	buzzer_rest(eighth);
 8001edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ede:	f7ff fe7b 	bl	8001bd8 <buzzer_rest>
	buzzer_play_c1(eighth);
 8001ee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee4:	f7ff fe0c 	bl	8001b00 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8001ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eea:	f7ff fe2d 	bl	8001b48 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 8001eee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ef0:	f7ff fe4e 	bl	8001b90 <buzzer_play_g1>
	buzzer_rest(quarter);
 8001ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ef6:	f7ff fe6f 	bl	8001bd8 <buzzer_rest>
	buzzer_play_g0(quarter);
 8001efa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001efc:	f7ff fddc 	bl	8001ab8 <buzzer_play_g0>


}
 8001f00:	bf00      	nop
 8001f02:	3734      	adds	r7, #52	; 0x34
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	404e0000 	.word	0x404e0000
 8001f0c:	408f4000 	.word	0x408f4000
 8001f10:	3ff80000 	.word	0x3ff80000
 8001f14:	3fe00000 	.word	0x3fe00000
 8001f18:	3fd00000 	.word	0x3fd00000
 8001f1c:	40100000 	.word	0x40100000

08001f20 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <MX_CAN1_Init+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f3e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001f42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_CAN1_Init+0x64>)
 8001f72:	f001 f82f 	bl	8002fd4 <HAL_CAN_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001f7c:	f000 fb38 	bl	80025f0 <Error_Handler>
  }

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20004190 	.word	0x20004190
 8001f88:	40006400 	.word	0x40006400

08001f8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_CAN_MspInit+0xa4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d13b      	bne.n	8002026 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_CAN_MspInit+0xa8>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_CAN_MspInit+0xa8>)
 8001fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_CAN_MspInit+0xa8>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_CAN_MspInit+0xa8>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_CAN_MspInit+0xa8>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_CAN_MspInit+0xa8>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ff6:	2309      	movs	r3, #9
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <HAL_CAN_MspInit+0xac>)
 8002002:	f001 ff47 	bl	8003e94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2105      	movs	r1, #5
 800200a:	2013      	movs	r0, #19
 800200c:	f001 fef6 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002010:	2013      	movs	r0, #19
 8002012:	f001 ff0f 	bl	8003e34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2105      	movs	r1, #5
 800201a:	2014      	movs	r0, #20
 800201c:	f001 feee 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002020:	2014      	movs	r0, #20
 8002022:	f001 ff07 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	; 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40006400 	.word	0x40006400
 8002034:	40023800 	.word	0x40023800
 8002038:	40020c00 	.word	0x40020c00

0800203c <can_filter_enable>:
  }
}

/* USER CODE BEGIN 1 */

void can_filter_enable(CAN_HandleTypeDef* hcan){
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 800205c:	2301      	movs	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8002060:	2301      	movs	r3, #1
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 8002064:	231b      	movs	r3, #27
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 800206c:	f107 0308 	add.w	r3, r7, #8
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f001 f8aa 	bl	80031cc <HAL_CAN_ConfigFilter>
}
 8002078:	bf00      	nop
 800207a:	3730      	adds	r7, #48	; 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <can_filter_disable>:



void can_filter_disable(CAN_HandleTypeDef* hcan){
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80020a0:	2301      	movs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
	CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
 80020a8:	231b      	movs	r3, #27
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c

	CAN_FilterConfigStructure.FilterBank = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	4619      	mov	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 f888 	bl	80031cc <HAL_CAN_ConfigFilter>
}
 80020bc:	bf00      	nop
 80020be:	3730      	adds	r7, #48	; 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later

*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80020d4:	0d5b      	lsrs	r3, r3, #21
 80020d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020da:	60bb      	str	r3, [r7, #8]
	uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 80020e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4a05      	ldr	r2, [pc, #20]	; (8002104 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80020ee:	4413      	add	r3, r2
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	2100      	movs	r1, #0
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f001 fa67 	bl	80035ca <HAL_CAN_GetRxMessage>
}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200041b8 	.word	0x200041b8

08002108 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <vApplicationGetIdleTaskMemory+0x2c>)
 8002118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4a06      	ldr	r2, [pc, #24]	; (8002138 <vApplicationGetIdleTaskMemory+0x30>)
 800211e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000094 	.word	0x20000094
 8002138:	200000e8 	.word	0x200000e8

0800213c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b0a8      	sub	sp, #160	; 0xa0
 8002140:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <MX_FREERTOS_Init+0xc0>)
 8002144:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002148:	461d      	mov	r5, r3
 800214a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002156:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fa08 	bl	8006572 <osThreadCreate>
 8002162:	4602      	mov	r2, r0
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <MX_FREERTOS_Init+0xc4>)
 8002166:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  	osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityNormal, 0, 128);
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MX_FREERTOS_Init+0xc8>)
 800216a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800216e:	461d      	mov	r5, r3
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 800217c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f9f5 	bl	8006572 <osThreadCreate>
 8002188:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityNormal, 0, 128);
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <MX_FREERTOS_Init+0xcc>)
 800218e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002192:	461d      	mov	r5, r3
 8002194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800219c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 80021a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 f9e3 	bl	8006572 <osThreadCreate>
 80021ac:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    osThreadDef(ShootTask, Shoot_Task_Func, osPriorityNormal, 0, 128);
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_FREERTOS_Init+0xd0>)
 80021b2:	f107 0420 	add.w	r4, r7, #32
 80021b6:	461d      	mov	r5, r3
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 f9d1 	bl	8006572 <osThreadCreate>
 80021d0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    osThreadDef(TimerTask, Timer_Task_Func, osPriorityAboveNormal, 0, 128);
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_FREERTOS_Init+0xd4>)
 80021d6:	1d3c      	adds	r4, r7, #4
 80021d8:	461d      	mov	r5, r3
 80021da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f004 f9c1 	bl	8006572 <osThreadCreate>
 80021f0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80021f4:	bf00      	nop
 80021f6:	37a0      	adds	r7, #160	; 0xa0
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bdb0      	pop	{r4, r5, r7, pc}
 80021fc:	08009a0c 	.word	0x08009a0c
 8002200:	200042a8 	.word	0x200042a8
 8002204:	08009a34 	.word	0x08009a34
 8002208:	08009a5c 	.word	0x08009a5c
 800220c:	08009a84 	.word	0x08009a84
 8002210:	08009aac 	.word	0x08009aac

08002214 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800221c:	2001      	movs	r0, #1
 800221e:	f004 f9f4 	bl	800660a <osDelay>
 8002222:	e7fb      	b.n	800221c <StartDefaultTask+0x8>

08002224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	; 0x30
 8002228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	4a62      	ldr	r2, [pc, #392]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b60      	ldr	r3, [pc, #384]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 8002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	4b47      	ldr	r3, [pc, #284]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022d0:	f043 0320 	orr.w	r3, r3, #32
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b44      	ldr	r3, [pc, #272]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4b40      	ldr	r3, [pc, #256]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a3f      	ldr	r2, [pc, #252]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <MX_GPIO_Init+0x1c4>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002304:	4839      	ldr	r0, [pc, #228]	; (80023ec <MX_GPIO_Init+0x1c8>)
 8002306:	f001 ff6f 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	211e      	movs	r1, #30
 800230e:	4837      	ldr	r0, [pc, #220]	; (80023ec <MX_GPIO_Init+0x1c8>)
 8002310:	f001 ff6a 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8002314:	2200      	movs	r2, #0
 8002316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231a:	4835      	ldr	r0, [pc, #212]	; (80023f0 <MX_GPIO_Init+0x1cc>)
 800231c:	f001 ff64 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002326:	4833      	ldr	r0, [pc, #204]	; (80023f4 <MX_GPIO_Init+0x1d0>)
 8002328:	f001 ff5e 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Trig_Pin;
 800232c:	2320      	movs	r3, #32
 800232e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002334:	2301      	movs	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Trig_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	4619      	mov	r1, r3
 800233e:	482c      	ldr	r0, [pc, #176]	; (80023f0 <MX_GPIO_Init+0x1cc>)
 8002340:	f001 fda8 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_A_Pin|LD_B_Pin|LD_C_Pin|LD_D_Pin
 8002344:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002348:	61fb      	str	r3, [r7, #28]
                          |LD_E_Pin|LD_F_Pin|LD_G_Pin|LD_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234a:	2301      	movs	r3, #1
 800234c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4823      	ldr	r0, [pc, #140]	; (80023ec <MX_GPIO_Init+0x1c8>)
 800235e:	f001 fd99 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UltraSound_Echo_Pin;
 8002362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236c:	2301      	movs	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UltraSound_Echo_GPIO_Port, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	481f      	ldr	r0, [pc, #124]	; (80023f4 <MX_GPIO_Init+0x1d0>)
 8002378:	f001 fd8c 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 800237c:	2304      	movs	r3, #4
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <MX_GPIO_Init+0x1d4>)
 8002382:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	4619      	mov	r1, r3
 800238e:	481b      	ldr	r0, [pc, #108]	; (80023fc <MX_GPIO_Init+0x1d8>)
 8002390:	f001 fd80 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8002394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4810      	ldr	r0, [pc, #64]	; (80023f0 <MX_GPIO_Init+0x1cc>)
 80023ae:	f001 fd71 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80023b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4619      	mov	r1, r3
 80023ca:	480a      	ldr	r0, [pc, #40]	; (80023f4 <MX_GPIO_Init+0x1d0>)
 80023cc:	f001 fd62 	bl	8003e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2105      	movs	r1, #5
 80023d4:	2008      	movs	r0, #8
 80023d6:	f001 fd11 	bl	8003dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023da:	2008      	movs	r0, #8
 80023dc:	f001 fd2a 	bl	8003e34 <HAL_NVIC_EnableIRQ>
}
 80023e0:	bf00      	nop
 80023e2:	3730      	adds	r7, #48	; 0x30
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40021800 	.word	0x40021800
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40021400 	.word	0x40021400
 80023f8:	10110000 	.word	0x10110000
 80023fc:	40020400 	.word	0x40020400

08002400 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 2 */



//This function occurs whenever an EXTI line is called, the EXTI needs to be setup in the ioc file, and button pin is setup as interrupt (EXTI2) right now, and hence, whenver the white button is pressed, this function below is activated
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Button_Pin){
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d12b      	bne.n	8002468 <HAL_GPIO_EXTI_Callback+0x68>
		//can_filter_enable(&hcan1);
		can_filter_enable(&hcan1);
 8002410:	4817      	ldr	r0, [pc, #92]	; (8002470 <HAL_GPIO_EXTI_Callback+0x70>)
 8002412:	f7ff fe13 	bl	800203c <can_filter_enable>
		uint8_t motorStatus[8];
		memcpy(motorStatus, can_rx_buffer,8);
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_GPIO_EXTI_Callback+0x74>)
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	6810      	ldr	r0, [r2, #0]
 800241e:	6851      	ldr	r1, [r2, #4]
 8002420:	c303      	stmia	r3!, {r0, r1}
	             "ID           %d\r\n"
	             "Angle        %d\r\n"
	             "Current      %d\r\n"
	             "Speed        %d\r\n"
	             "Temperature  %u\r\n"
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002422:	7a3b      	ldrb	r3, [r7, #8]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b21a      	sxth	r2, r3
 8002428:	7a7b      	ldrb	r3, [r7, #9]
 800242a:	b21b      	sxth	r3, r3
 800242c:	4313      	orrs	r3, r2
 800242e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002430:	4619      	mov	r1, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002432:	7abb      	ldrb	r3, [r7, #10]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	b21b      	sxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b21b      	sxth	r3, r3
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002440:	4618      	mov	r0, r3
	             "=================================\r\n\r\n",1,(int16_t)(motorStatus[0] << 8 | motorStatus[1]),(int16_t)(motorStatus[2] << 8 | motorStatus[3]),(int16_t)(motorStatus[4] << 8 | motorStatus[5]),(int16_t)(motorStatus[6]));
 8002442:	7b3b      	ldrb	r3, [r7, #12]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	b21a      	sxth	r2, r3
 8002448:	7b7b      	ldrb	r3, [r7, #13]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	7bba      	ldrb	r2, [r7, #14]
		printf("\n======== 6020 DATA REPORT ========\r\n"
 8002452:	9201      	str	r2, [sp, #4]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4603      	mov	r3, r0
 8002458:	460a      	mov	r2, r1
 800245a:	2101      	movs	r1, #1
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <HAL_GPIO_EXTI_Callback+0x78>)
 800245e:	f005 fab9 	bl	80079d4 <iprintf>

		//Adding HAL_Delay would stop the entire code!
		//HAL_Delay(5000);

		can_filter_disable(&hcan1);
 8002462:	4803      	ldr	r0, [pc, #12]	; (8002470 <HAL_GPIO_EXTI_Callback+0x70>)
 8002464:	f7ff fe0c 	bl	8002080 <can_filter_disable>


	}
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20004190 	.word	0x20004190
 8002474:	200041b8 	.word	0x200041b8
 8002478:	08009ac8 	.word	0x08009ac8

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002480:	f000 fd66 	bl	8002f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002484:	f000 f822 	bl	80024cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002488:	f7ff fecc 	bl	8002224 <MX_GPIO_Init>
  MX_CAN1_Init();
 800248c:	f7ff fd48 	bl	8001f20 <MX_CAN1_Init>
  MX_TIM4_Init();
 8002490:	f000 fa4c 	bl	800292c <MX_TIM4_Init>
  MX_TIM12_Init();
 8002494:	f000 fab0 	bl	80029f8 <MX_TIM12_Init>
  MX_UART7_Init();
 8002498:	f000 fc48 	bl	8002d2c <MX_UART7_Init>
  MX_USART6_Init();
 800249c:	f000 fc70 	bl	8002d80 <MX_USART6_Init>
  MX_TIM14_Init();
 80024a0:	f000 fb14 	bl	8002acc <MX_TIM14_Init>
  MX_TIM13_Init();
 80024a4:	f000 faee 	bl	8002a84 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  buzzer_init();
 80024a8:	f7ff fafc 	bl	8001aa4 <buzzer_init>
  HAL_CAN_Start(&hcan1);
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <main+0x48>)
 80024ae:	f000 ff6d 	bl	800338c <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim14);
  HAL_TIM_Base_Start_IT(&htim13);
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <main+0x4c>)
 80024b4:	f002 fb7d 	bl	8004bb2 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80024b8:	f7ff fe40 	bl	800213c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80024bc:	f004 f852 	bl	8006564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <main+0x44>
 80024c2:	bf00      	nop
 80024c4:	20004190 	.word	0x20004190
 80024c8:	200042ec 	.word	0x200042ec

080024cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b094      	sub	sp, #80	; 0x50
 80024d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024d2:	f107 0320 	add.w	r3, r7, #32
 80024d6:	2230      	movs	r2, #48	; 0x30
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 fa72 	bl	80079c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <SystemClock_Config+0xd0>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a28      	ldr	r2, [pc, #160]	; (800259c <SystemClock_Config+0xd0>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002500:	4b26      	ldr	r3, [pc, #152]	; (800259c <SystemClock_Config+0xd0>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800250c:	2300      	movs	r3, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <SystemClock_Config+0xd4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002518:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <SystemClock_Config+0xd4>)
 800251a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <SystemClock_Config+0xd4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800252c:	2301      	movs	r3, #1
 800252e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002536:	2302      	movs	r3, #2
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800253a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002540:	2306      	movs	r3, #6
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002544:	23a8      	movs	r3, #168	; 0xa8
 8002546:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002548:	2302      	movs	r3, #2
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800254c:	2304      	movs	r3, #4
 800254e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002550:	f107 0320 	add.w	r3, r7, #32
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fe93 	bl	8004280 <HAL_RCC_OscConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002560:	f000 f846 	bl	80025f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002564:	230f      	movs	r3, #15
 8002566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002568:	2302      	movs	r3, #2
 800256a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2102      	movs	r1, #2
 8002582:	4618      	mov	r0, r3
 8002584:	f002 f8ec 	bl	8004760 <HAL_RCC_ClockConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800258e:	f000 f82f 	bl	80025f0 <Error_Handler>
  }
}
 8002592:	bf00      	nop
 8002594:	3750      	adds	r7, #80	; 0x50
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000

080025a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM14){
	//HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
  }

  if(htim->Instance == TIM13)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d109      	bne.n	80025ca <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	 period_counter++;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025be:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_Red_GPIO_Port,LED_Red_Pin);
 80025c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c4:	4808      	ldr	r0, [pc, #32]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80025c6:	f001 fe28 	bl	800421a <HAL_GPIO_TogglePin>
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 80025d4:	f000 fcde 	bl	8002f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40001c00 	.word	0x40001c00
 80025e4:	200002e8 	.word	0x200002e8
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40000c00 	.word	0x40000c00

080025f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <Error_Handler+0x6>

080025f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_MspInit+0x54>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_MspInit+0x54>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_MspInit+0x54>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_MspInit+0x54>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <HAL_MspInit+0x54>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_MspInit+0x54>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	210f      	movs	r1, #15
 800263a:	f06f 0001 	mvn.w	r0, #1
 800263e:	f001 fbdd 	bl	8003dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	2032      	movs	r0, #50	; 0x32
 8002666:	f001 fbc9 	bl	8003dfc <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800266a:	2032      	movs	r0, #50	; 0x32
 800266c:	f001 fbe2 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_InitTick+0xa4>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_InitTick+0xa4>)
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_InitTick+0xa4>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800268c:	f107 0210 	add.w	r2, r7, #16
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fa2e 	bl	8004af8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800269c:	f002 fa04 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80026a0:	4603      	mov	r3, r0
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <HAL_InitTick+0xa8>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0c9b      	lsrs	r3, r3, #18
 80026b0:	3b01      	subs	r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_InitTick+0xac>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <HAL_InitTick+0xb0>)
 80026b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_InitTick+0xac>)
 80026bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026c0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <HAL_InitTick+0xac>)
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_InitTick+0xac>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_InitTick+0xac>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <HAL_InitTick+0xac>)
 80026d6:	f002 fa41 	bl	8004b5c <HAL_TIM_Base_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80026e0:	4806      	ldr	r0, [pc, #24]	; (80026fc <HAL_InitTick+0xac>)
 80026e2:	f002 fa66 	bl	8004bb2 <HAL_TIM_Base_Start_IT>
 80026e6:	4603      	mov	r3, r0
 80026e8:	e000      	b.n	80026ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3730      	adds	r7, #48	; 0x30
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	200042ac 	.word	0x200042ac
 8002700:	40000c00 	.word	0x40000c00

08002704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <NMI_Handler+0x4>

0800270a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <HardFault_Handler+0x4>

08002710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <MemManage_Handler+0x4>

08002716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <UsageFault_Handler+0x4>

08002722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002734:	2004      	movs	r0, #4
 8002736:	f001 fd8b 	bl	8004250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <CAN1_TX_IRQHandler+0x10>)
 8002746:	f001 f878 	bl	800383a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20004190 	.word	0x20004190

08002754 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <CAN1_RX0_IRQHandler+0x10>)
 800275a:	f001 f86e 	bl	800383a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20004190 	.word	0x20004190

08002768 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800276e:	f002 faad 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200042ec 	.word	0x200042ec

0800277c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002782:	f002 faa3 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	2000432c 	.word	0x2000432c

08002790 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002794:	4802      	ldr	r0, [pc, #8]	; (80027a0 <TIM5_IRQHandler+0x10>)
 8002796:	f002 fa99 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200042ac 	.word	0x200042ac

080027a4 <USART6_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&husart6);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <USART6_IRQHandler+0x10>)
 80027aa:	f003 f8c7 	bl	800593c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000436c 	.word	0x2000436c

080027b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e00a      	b.n	80027e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ca:	f3af 8000 	nop.w
 80027ce:	4601      	mov	r1, r0
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60ba      	str	r2, [r7, #8]
 80027d6:	b2ca      	uxtb	r2, r1
 80027d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	dbf0      	blt.n	80027ca <_read+0x12>
	}

return len;
 80027e8:	687b      	ldr	r3, [r7, #4]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e009      	b.n	8002818 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fa7b 	bl	8002d08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	dbf1      	blt.n	8002804 <_write+0x12>
	}
	return len;
 8002820:	687b      	ldr	r3, [r7, #4]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_close>:

int _close(int file)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
	return -1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002852:	605a      	str	r2, [r3, #4]
	return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_isatty>:

int _isatty(int file)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	return 1;
 800286a:	2301      	movs	r3, #1
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	; (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f005 f854 	bl	8007970 <__errno>
 80028c8:	4602      	mov	r2, r0
 80028ca:	230c      	movs	r3, #12
 80028cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20030000 	.word	0x20030000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	200002ec 	.word	0x200002ec
 80028fc:	200043f8 	.word	0x200043f8

08002900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <SystemInit+0x28>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <SystemInit+0x28>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SystemInit+0x28>)
 8002916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291a:	609a      	str	r2, [r3, #8]
#endif
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]
 800294a:	615a      	str	r2, [r3, #20]
 800294c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800294e:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <MX_TIM4_Init+0xc4>)
 8002950:	4a28      	ldr	r2, [pc, #160]	; (80029f4 <MX_TIM4_Init+0xc8>)
 8002952:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <MX_TIM4_Init+0xc4>)
 8002956:	2253      	movs	r2, #83	; 0x53
 8002958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <MX_TIM4_Init+0xc4>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8002960:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <MX_TIM4_Init+0xc4>)
 8002962:	f242 720f 	movw	r2, #9999	; 0x270f
 8002966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <MX_TIM4_Init+0xc4>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <MX_TIM4_Init+0xc4>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002974:	481e      	ldr	r0, [pc, #120]	; (80029f0 <MX_TIM4_Init+0xc4>)
 8002976:	f002 f940 	bl	8004bfa <HAL_TIM_PWM_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002980:	f7ff fe36 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800298c:	f107 0320 	add.w	r3, r7, #32
 8002990:	4619      	mov	r1, r3
 8002992:	4817      	ldr	r0, [pc, #92]	; (80029f0 <MX_TIM4_Init+0xc4>)
 8002994:	f002 fe06 	bl	80055a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800299e:	f7ff fe27 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a2:	2360      	movs	r3, #96	; 0x60
 80029a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80029a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	2200      	movs	r2, #0
 80029b8:	4619      	mov	r1, r3
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <MX_TIM4_Init+0xc4>)
 80029bc:	f002 fa8e 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80029c6:	f7ff fe13 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	2208      	movs	r2, #8
 80029ce:	4619      	mov	r1, r3
 80029d0:	4807      	ldr	r0, [pc, #28]	; (80029f0 <MX_TIM4_Init+0xc4>)
 80029d2:	f002 fa83 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80029dc:	f7ff fe08 	bl	80025f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80029e0:	4803      	ldr	r0, [pc, #12]	; (80029f0 <MX_TIM4_Init+0xc4>)
 80029e2:	f000 f92f 	bl	8002c44 <HAL_TIM_MspPostInit>

}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	; 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20004044 	.word	0x20004044
 80029f4:	40000800 	.word	0x40000800

080029f8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	615a      	str	r2, [r3, #20]
 8002a0e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a12:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <MX_TIM12_Init+0x88>)
 8002a14:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 35;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a18:	2223      	movs	r2, #35	; 0x23
 8002a1a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000-1;
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a24:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a28:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002a36:	4811      	ldr	r0, [pc, #68]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a38:	f002 f8df 	bl	8004bfa <HAL_TIM_PWM_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002a42:	f7ff fdd5 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a46:	2360      	movs	r3, #96	; 0x60
 8002a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4807      	ldr	r0, [pc, #28]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a5e:	f002 fa3d 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002a68:	f7ff fdc2 	bl	80025f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 8002a6c:	4803      	ldr	r0, [pc, #12]	; (8002a7c <MX_TIM12_Init+0x84>)
 8002a6e:	f000 f8e9 	bl	8002c44 <HAL_TIM_MspPostInit>

}
 8002a72:	bf00      	nop
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200041f8 	.word	0x200041f8
 8002a80:	40001800 	.word	0x40001800

08002a84 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0

  htim13.Instance = TIM13;
 8002a88:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002a8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <MX_TIM13_Init+0x44>)
 8002a8c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8399;
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002a90:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002a94:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002a9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002aa2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <MX_TIM13_Init+0x40>)
 8002ab2:	f002 f853 	bl	8004b5c <HAL_TIM_Base_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002abc:	f7ff fd98 	bl	80025f0 <Error_Handler>
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200042ec 	.word	0x200042ec
 8002ac8:	40001c00 	.word	0x40001c00

08002acc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <MX_TIM14_Init+0x44>)
 8002ad4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400;
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002ad8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8002adc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9999;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002ae6:	f242 720f 	movw	r2, #9999	; 0x270f
 8002aea:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <MX_TIM14_Init+0x40>)
 8002afa:	f002 f82f 	bl	8004b5c <HAL_TIM_Base_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8002b04:	f7ff fd74 	bl	80025f0 <Error_Handler>
  }

}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000432c 	.word	0x2000432c
 8002b10:	40002000 	.word	0x40002000

08002b14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <HAL_TIM_PWM_MspInit+0x64>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10e      	bne.n	8002b44 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_TIM_PWM_MspInit+0x68>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <HAL_TIM_PWM_MspInit+0x68>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_TIM_PWM_MspInit+0x68>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002b42:	e012      	b.n	8002b6a <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM12)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <HAL_TIM_PWM_MspInit+0x6c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10d      	bne.n	8002b6a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_TIM_PWM_MspInit+0x68>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_TIM_PWM_MspInit+0x68>)
 8002b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_TIM_PWM_MspInit+0x68>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40001800 	.word	0x40001800

08002b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <HAL_TIM_Base_MspInit+0xb4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d116      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2105      	movs	r1, #5
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	f001 f920 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002bbc:	202c      	movs	r0, #44	; 0x2c
 8002bbe:	f001 f939 	bl	8003e34 <HAL_NVIC_EnableIRQ>
 8002bc2:	e01a      	b.n	8002bfa <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_TIM_Base_MspInit+0xbc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d115      	bne.n	8002bfa <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2105      	movs	r1, #5
 8002bee:	202d      	movs	r0, #45	; 0x2d
 8002bf0:	f001 f904 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002bf4:	202d      	movs	r0, #45	; 0x2d
 8002bf6:	f001 f91d 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM13)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_TIM_Base_MspInit+0xb4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d115      	bne.n	8002c30 <HAL_TIM_Base_MspInit+0xac>
    {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
      /* TIM13 clock enable */
      __HAL_RCC_TIM13_CLK_ENABLE();
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	6413      	str	r3, [r2, #64]	; 0x40
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_TIM_Base_MspInit+0xb8>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]

      /* TIM13 interrupt Init */
      HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2101      	movs	r1, #1
 8002c24:	202c      	movs	r0, #44	; 0x2c
 8002c26:	f001 f8e9 	bl	8003dfc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002c2a:	202c      	movs	r0, #44	; 0x2c
 8002c2c:	f001 f902 	bl	8003e34 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40001c00 	.word	0x40001c00
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40002000 	.word	0x40002000

08002c44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <HAL_TIM_MspPostInit+0xb0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d11f      	bne.n	8002ca6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_TIM_MspPostInit+0xb4>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <HAL_TIM_MspPostInit+0xb4>)
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_TIM_MspPostInit+0xb4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8002c82:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c94:	2302      	movs	r3, #2
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4817      	ldr	r0, [pc, #92]	; (8002cfc <HAL_TIM_MspPostInit+0xb8>)
 8002ca0:	f001 f8f8 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ca4:	e022      	b.n	8002cec <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_TIM_MspPostInit+0xbc>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d11d      	bne.n	8002cec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_TIM_MspPostInit+0xb4>)
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <HAL_TIM_MspPostInit+0xb4>)
 8002cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_TIM_MspPostInit+0xb4>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ccc:	2340      	movs	r3, #64	; 0x40
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002cdc:	2309      	movs	r3, #9
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4807      	ldr	r0, [pc, #28]	; (8002d04 <HAL_TIM_MspPostInit+0xc0>)
 8002ce8:	f001 f8d4 	bl	8003e94 <HAL_GPIO_Init>
}
 8002cec:	bf00      	nop
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40000800 	.word	0x40000800
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40001800 	.word	0x40001800
 8002d04:	40021c00 	.word	0x40021c00

08002d08 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&husart6, (uint8_t *)&ch, 1, 0xFFFF);
 8002d10:	1d39      	adds	r1, r7, #4
 8002d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d16:	2201      	movs	r2, #1
 8002d18:	4803      	ldr	r0, [pc, #12]	; (8002d28 <__io_putchar+0x20>)
 8002d1a:	f002 fd20 	bl	800575e <HAL_UART_Transmit>

  return ch;
 8002d1e:	687b      	ldr	r3, [r7, #4]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	2000436c 	.word	0x2000436c

08002d2c <MX_UART7_Init>:
UART_HandleTypeDef husart6;
//extern char *pdata[PACKLEN+1];

/* UART7 init function */
void MX_UART7_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <MX_UART7_Init+0x50>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d3c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_UART7_Init+0x4c>)
 8002d64:	f002 fcae 	bl	80056c4 <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002d6e:	f7ff fc3f 	bl	80025f0 <Error_Handler>
  }

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200043ac 	.word	0x200043ac
 8002d7c:	40007800 	.word	0x40007800

08002d80 <MX_USART6_Init>:

/* USART6 init function */
void MX_USART6_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  husart6.Instance = USART6;
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <MX_USART6_Init+0x5c>)
 8002d88:	601a      	str	r2, [r3, #0]
  husart6.Init.BaudRate = 115200;
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d90:	605a      	str	r2, [r3, #4]
  husart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  husart6.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  husart6.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  husart6.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  husart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  husart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&husart6) != HAL_OK)
 8002db6:	4808      	ldr	r0, [pc, #32]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002db8:	f002 fc84 	bl	80056c4 <HAL_UART_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <MX_USART6_Init+0x48>
  {
    Error_Handler();
 8002dc2:	f7ff fc15 	bl	80025f0 <Error_Handler>
	HAL_UART_Receive_IT(&husart6, pdata, (PACKLEN));

	  //HAL_UART_Receive_IT(&husart6, UART6_rxBuffer_temp, 12);
	  //printf("sucessfully enabled uart6 \r\n");
  }
}
 8002dc6:	e004      	b.n	8002dd2 <MX_USART6_Init+0x52>
	HAL_UART_Receive_IT(&husart6, pdata, (PACKLEN));
 8002dc8:	2210      	movs	r2, #16
 8002dca:	4905      	ldr	r1, [pc, #20]	; (8002de0 <MX_USART6_Init+0x60>)
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <MX_USART6_Init+0x58>)
 8002dce:	f002 fd5f 	bl	8005890 <HAL_UART_Receive_IT>
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000436c 	.word	0x2000436c
 8002ddc:	40011400 	.word	0x40011400
 8002de0:	20004268 	.word	0x20004268

08002de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_UART_MspInit+0x100>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12c      	bne.n	8002e60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	4b37      	ldr	r3, [pc, #220]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	4a36      	ldr	r2, [pc, #216]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e14:	6413      	str	r3, [r2, #64]	; 0x40
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e2c:	f043 0310 	orr.w	r3, r3, #16
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002e3e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002e50:	2308      	movs	r3, #8
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4824      	ldr	r0, [pc, #144]	; (8002eec <HAL_UART_MspInit+0x108>)
 8002e5c:	f001 f81a 	bl	8003e94 <HAL_GPIO_Init>
  }

  if(uartHandle->Instance==USART6)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_UART_MspInit+0x10c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d137      	bne.n	8002eda <HAL_UART_MspInit+0xf6>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
	/* UART7 clock enable */
	__HAL_RCC_USART6_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e74:	f043 0320 	orr.w	r3, r3, #32
 8002e78:	6453      	str	r3, [r2, #68]	; 0x44
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_UART_MspInit+0x104>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
	/**USART6 GPIO Configuration
	  PG14     ------> USART6_TX
	  PG9     ------> USART6_RX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002ea2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002ea6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <HAL_UART_MspInit+0x110>)
 8002ec0:	f000 ffe8 	bl	8003e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */
	//USART6 Interrput Init
	HAL_NVIC_SetPriority(USART6_IRQn,5,0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	2047      	movs	r0, #71	; 0x47
 8002eca:	f000 ff97 	bl	8003dfc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ece:	2047      	movs	r0, #71	; 0x47
 8002ed0:	f000 ffb0 	bl	8003e34 <HAL_NVIC_EnableIRQ>
	printf("initialized usart 6 via the uart function");
 8002ed4:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <HAL_UART_MspInit+0x114>)
 8002ed6:	f004 fd7d 	bl	80079d4 <iprintf>
  /* USER CODE END UART7_MspInit 1 */
  }
}
 8002eda:	bf00      	nop
 8002edc:	3730      	adds	r7, #48	; 0x30
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40007800 	.word	0x40007800
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40011400 	.word	0x40011400
 8002ef4:	40021800 	.word	0x40021800
 8002ef8:	08009b68 	.word	0x08009b68

08002efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f02:	e003      	b.n	8002f0c <LoopCopyDataInit>

08002f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f0a:	3104      	adds	r1, #4

08002f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f0c:	480b      	ldr	r0, [pc, #44]	; (8002f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f14:	d3f6      	bcc.n	8002f04 <CopyDataInit>
  ldr  r2, =_sbss
 8002f16:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f18:	e002      	b.n	8002f20 <LoopFillZerobss>

08002f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f1c:	f842 3b04 	str.w	r3, [r2], #4

08002f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f24:	d3f9      	bcc.n	8002f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f26:	f7ff fceb 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f004 fd27 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2e:	f7ff faa5 	bl	800247c <main>
  bx  lr    
 8002f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f34:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002f38:	08009ca0 	.word	0x08009ca0
  ldr  r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f40:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002f44:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002f48:	200043f4 	.word	0x200043f4

08002f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC_IRQHandler>
	...

08002f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_Init+0x40>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_Init+0x40>)
 8002f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_Init+0x40>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <HAL_Init+0x40>)
 8002f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <HAL_Init+0x40>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f000 ff34 	bl	8003de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7ff fb66 	bl	8002650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f84:	f7ff fb38 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023c00 	.word	0x40023c00

08002f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_IncTick+0x20>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <HAL_IncTick+0x24>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000008 	.word	0x20000008
 8002fb8:	200043ec 	.word	0x200043ec

08002fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <HAL_GetTick+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	200043ec 	.word	0x200043ec

08002fd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0ed      	b.n	80031c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe ffca 	bl	8001f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0202 	bic.w	r2, r2, #2
 8003006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003008:	f7ff ffd8 	bl	8002fbc <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800300e:	e012      	b.n	8003036 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003010:	f7ff ffd4 	bl	8002fbc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d90b      	bls.n	8003036 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2205      	movs	r2, #5
 800302e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0c5      	b.n	80031c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e5      	bne.n	8003010 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003054:	f7ff ffb2 	bl	8002fbc <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800305a:	e012      	b.n	8003082 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800305c:	f7ff ffae 	bl	8002fbc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b0a      	cmp	r3, #10
 8003068:	d90b      	bls.n	8003082 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2205      	movs	r2, #5
 800307a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e09f      	b.n	80031c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0e5      	beq.n	800305c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7e1b      	ldrb	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d108      	bne.n	80030aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e007      	b.n	80030ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7e5b      	ldrb	r3, [r3, #25]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d108      	bne.n	80030d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e007      	b.n	80030e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7e9b      	ldrb	r3, [r3, #26]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d108      	bne.n	80030fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0220 	orr.w	r2, r2, #32
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e007      	b.n	800310e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0220 	bic.w	r2, r2, #32
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7edb      	ldrb	r3, [r3, #27]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d108      	bne.n	8003128 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0210 	bic.w	r2, r2, #16
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	e007      	b.n	8003138 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0210 	orr.w	r2, r2, #16
 8003136:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7f1b      	ldrb	r3, [r3, #28]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0208 	orr.w	r2, r2, #8
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e007      	b.n	8003162 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0208 	bic.w	r2, r2, #8
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7f5b      	ldrb	r3, [r3, #29]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0204 	orr.w	r2, r2, #4
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e007      	b.n	800318c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	ea42 0103 	orr.w	r1, r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d003      	beq.n	80031f2 <HAL_CAN_ConfigFilter+0x26>
 80031ea:	7cfb      	ldrb	r3, [r7, #19]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	f040 80be 	bne.w	800336e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_CAN_ConfigFilter+0x1bc>)
 80031f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800320c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	431a      	orrs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2201      	movs	r2, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	43db      	mvns	r3, r3
 8003244:	401a      	ands	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d123      	bne.n	800329c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	43db      	mvns	r3, r3
 800325e:	401a      	ands	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003276:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3248      	adds	r2, #72	; 0x48
 800327c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003290:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003292:	6979      	ldr	r1, [r7, #20]
 8003294:	3348      	adds	r3, #72	; 0x48
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d122      	bne.n	80032ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3248      	adds	r2, #72	; 0x48
 80032ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032e0:	6979      	ldr	r1, [r7, #20]
 80032e2:	3348      	adds	r3, #72	; 0x48
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003304:	e007      	b.n	8003316 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	431a      	orrs	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003330:	e007      	b.n	8003342 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	431a      	orrs	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	431a      	orrs	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003360:	f023 0201 	bic.w	r2, r3, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e006      	b.n	800337c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40006400 	.word	0x40006400

0800338c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d12e      	bne.n	80033fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033b8:	f7ff fe00 	bl	8002fbc <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033be:	e012      	b.n	80033e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033c0:	f7ff fdfc 	bl	8002fbc <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b0a      	cmp	r3, #10
 80033cc:	d90b      	bls.n	80033e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2205      	movs	r2, #5
 80033de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e012      	b.n	800340c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e5      	bne.n	80033c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e006      	b.n	800340c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003428:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d003      	beq.n	8003440 <HAL_CAN_AddTxMessage+0x2c>
 8003438:	7ffb      	ldrb	r3, [r7, #31]
 800343a:	2b02      	cmp	r3, #2
 800343c:	f040 80b8 	bne.w	80035b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a0 	beq.w	80035a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	0e1b      	lsrs	r3, r3, #24
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d907      	bls.n	8003480 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e09e      	b.n	80035be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003480:	2201      	movs	r2, #1
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	409a      	lsls	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	6809      	ldr	r1, [r1, #0]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3318      	adds	r3, #24
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	440b      	add	r3, r1
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e00f      	b.n	80034ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80034c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3318      	adds	r3, #24
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	440b      	add	r3, r1
 80034cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6819      	ldr	r1, [r3, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3318      	adds	r3, #24
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	440b      	add	r3, r1
 80034de:	3304      	adds	r3, #4
 80034e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	7d1b      	ldrb	r3, [r3, #20]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d111      	bne.n	800350e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3318      	adds	r3, #24
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3318      	adds	r3, #24
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	440b      	add	r3, r1
 800350a:	3304      	adds	r3, #4
 800350c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3307      	adds	r3, #7
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	061a      	lsls	r2, r3, #24
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3306      	adds	r3, #6
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3305      	adds	r3, #5
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	4313      	orrs	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	3204      	adds	r2, #4
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	4610      	mov	r0, r2
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	6811      	ldr	r1, [r2, #0]
 8003536:	ea43 0200 	orr.w	r2, r3, r0
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	440b      	add	r3, r1
 8003540:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003544:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3303      	adds	r3, #3
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	061a      	lsls	r2, r3, #24
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3302      	adds	r3, #2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	041b      	lsls	r3, r3, #16
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3301      	adds	r3, #1
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	4313      	orrs	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	7812      	ldrb	r2, [r2, #0]
 8003566:	4610      	mov	r0, r2
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	ea43 0200 	orr.w	r2, r3, r0
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	440b      	add	r3, r1
 8003576:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800357a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3318      	adds	r3, #24
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4413      	add	r3, r2
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3318      	adds	r3, #24
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	440b      	add	r3, r1
 800359a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e00e      	b.n	80035be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e006      	b.n	80035be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035ca:	b480      	push	{r7}
 80035cc:	b087      	sub	sp, #28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d003      	beq.n	80035ee <HAL_CAN_GetRxMessage+0x24>
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	f040 80f3 	bne.w	80037d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10e      	bne.n	8003612 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0e7      	b.n	80037e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0d8      	b.n	80037e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	331b      	adds	r3, #27
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0204 	and.w	r2, r3, #4
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	331b      	adds	r3, #27
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0d5b      	lsrs	r3, r3, #21
 800365e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e00b      	b.n	8003680 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	331b      	adds	r3, #27
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	331b      	adds	r3, #27
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0202 	and.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	331b      	adds	r3, #27
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	331b      	adds	r3, #27
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	331b      	adds	r3, #27
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	4413      	add	r3, r2
 80036d2:	3304      	adds	r3, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0a1a      	lsrs	r2, r3, #8
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	4413      	add	r3, r2
 8003718:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0c1a      	lsrs	r2, r3, #16
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	3302      	adds	r3, #2
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	4413      	add	r3, r2
 8003732:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e1a      	lsrs	r2, r3, #24
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	3303      	adds	r3, #3
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4413      	add	r3, r2
 800374c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	4413      	add	r3, r2
 8003764:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	0a1a      	lsrs	r2, r3, #8
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	3305      	adds	r3, #5
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	4413      	add	r3, r2
 800377e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0c1a      	lsrs	r2, r3, #16
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	3306      	adds	r3, #6
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	4413      	add	r3, r2
 8003798:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	0e1a      	lsrs	r2, r3, #24
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	3307      	adds	r3, #7
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d108      	bne.n	80037c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	e007      	b.n	80037d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0220 	orr.w	r2, r2, #32
 80037ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e006      	b.n	80037e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d002      	beq.n	800380c <HAL_CAN_ActivateNotification+0x1e>
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d109      	bne.n	8003820 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6959      	ldr	r1, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e006      	b.n	800382e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08a      	sub	sp, #40	; 0x28
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d07c      	beq.n	800397a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d023      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2201      	movs	r2, #1
 8003890:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f97d 	bl	8003b9c <HAL_CAN_TxMailbox0CompleteCallback>
 80038a2:	e016      	b.n	80038d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e00c      	b.n	80038d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ca:	e002      	b.n	80038d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f983 	bl	8003bd8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d024      	beq.n	8003926 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f95d 	bl	8003bb0 <HAL_CAN_TxMailbox1CompleteCallback>
 80038f6:	e016      	b.n	8003926 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	e00c      	b.n	8003926 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
 800391e:	e002      	b.n	8003926 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f963 	bl	8003bec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d024      	beq.n	800397a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003938:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f93d 	bl	8003bc4 <HAL_CAN_TxMailbox2CompleteCallback>
 800394a:	e016      	b.n	800397a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	e00c      	b.n	800397a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	e002      	b.n	800397a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f943 	bl	8003c00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003994:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2210      	movs	r2, #16
 800399c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00b      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d006      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2208      	movs	r2, #8
 80039b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f92a 	bl	8003c14 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fe fb73 	bl	80020c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2210      	movs	r2, #16
 8003a00:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d006      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f90c 	bl	8003c3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8f3 	bl	8003c28 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00b      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2210      	movs	r2, #16
 8003a5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8f6 	bl	8003c50 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f8ef 	bl	8003c64 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d075      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d06c      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03d      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d038      	beq.n	8003b74 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b08:	2b30      	cmp	r3, #48	; 0x30
 8003b0a:	d017      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x302>
 8003b0c:	2b30      	cmp	r3, #48	; 0x30
 8003b0e:	d804      	bhi.n	8003b1a <HAL_CAN_IRQHandler+0x2e0>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d009      	beq.n	8003b28 <HAL_CAN_IRQHandler+0x2ee>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d00c      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b18:	e024      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003b1a:	2b50      	cmp	r3, #80	; 0x50
 8003b1c:	d018      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x316>
 8003b1e:	2b60      	cmp	r3, #96	; 0x60
 8003b20:	d01b      	beq.n	8003b5a <HAL_CAN_IRQHandler+0x320>
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d00f      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003b26:	e01d      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	f043 0308 	orr.w	r3, r3, #8
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b30:	e018      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f043 0310 	orr.w	r3, r3, #16
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b3a:	e013      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f043 0320 	orr.w	r3, r3, #32
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b44:	e00e      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b4e:	e009      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b58:	e004      	b.n	8003b64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f872 	bl	8003c78 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cbe:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	60d3      	str	r3, [r2, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <__NVIC_GetPriorityGrouping+0x18>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	f003 0307 	and.w	r3, r3, #7
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db0b      	blt.n	8003d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4907      	ldr	r1, [pc, #28]	; (8003d28 <__NVIC_EnableIRQ+0x38>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2001      	movs	r0, #1
 8003d12:	fa00 f202 	lsl.w	r2, r0, r2
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000e100 	.word	0xe000e100

08003d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db0a      	blt.n	8003d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	490c      	ldr	r1, [pc, #48]	; (8003d78 <__NVIC_SetPriority+0x4c>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d54:	e00a      	b.n	8003d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4908      	ldr	r1, [pc, #32]	; (8003d7c <__NVIC_SetPriority+0x50>)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3b04      	subs	r3, #4
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	440b      	add	r3, r1
 8003d6a:	761a      	strb	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf28      	it	cs
 8003d9e:	2304      	movcs	r3, #4
 8003da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d902      	bls.n	8003db0 <NVIC_EncodePriority+0x30>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3b03      	subs	r3, #3
 8003dae:	e000      	b.n	8003db2 <NVIC_EncodePriority+0x32>
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43d9      	mvns	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	4313      	orrs	r3, r2
         );
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff4c 	bl	8003c8c <__NVIC_SetPriorityGrouping>
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0e:	f7ff ff61 	bl	8003cd4 <__NVIC_GetPriorityGrouping>
 8003e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7ff ffb1 	bl	8003d80 <NVIC_EncodePriority>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff80 	bl	8003d2c <__NVIC_SetPriority>
}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ff54 	bl	8003cf0 <__NVIC_EnableIRQ>
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e177      	b.n	80041a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f040 8166 	bne.w	800419a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00b      	beq.n	8003eee <HAL_GPIO_Init+0x5a>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d007      	beq.n	8003eee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ee2:	2b11      	cmp	r3, #17
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b12      	cmp	r3, #18
 8003eec:	d130      	bne.n	8003f50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2203      	movs	r2, #3
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f24:	2201      	movs	r2, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 0201 	and.w	r2, r3, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0xfc>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b12      	cmp	r3, #18
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80c0 	beq.w	800419a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b65      	ldr	r3, [pc, #404]	; (80041b4 <HAL_GPIO_Init+0x320>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	4a64      	ldr	r2, [pc, #400]	; (80041b4 <HAL_GPIO_Init+0x320>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004028:	6453      	str	r3, [r2, #68]	; 0x44
 800402a:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <HAL_GPIO_Init+0x320>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a60      	ldr	r2, [pc, #384]	; (80041b8 <HAL_GPIO_Init+0x324>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a57      	ldr	r2, [pc, #348]	; (80041bc <HAL_GPIO_Init+0x328>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d037      	beq.n	80040d2 <HAL_GPIO_Init+0x23e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <HAL_GPIO_Init+0x32c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <HAL_GPIO_Init+0x23a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a55      	ldr	r2, [pc, #340]	; (80041c4 <HAL_GPIO_Init+0x330>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <HAL_GPIO_Init+0x236>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a54      	ldr	r2, [pc, #336]	; (80041c8 <HAL_GPIO_Init+0x334>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d025      	beq.n	80040c6 <HAL_GPIO_Init+0x232>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a53      	ldr	r2, [pc, #332]	; (80041cc <HAL_GPIO_Init+0x338>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01f      	beq.n	80040c2 <HAL_GPIO_Init+0x22e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_GPIO_Init+0x33c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d019      	beq.n	80040be <HAL_GPIO_Init+0x22a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <HAL_GPIO_Init+0x340>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_GPIO_Init+0x226>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <HAL_GPIO_Init+0x344>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00d      	beq.n	80040b6 <HAL_GPIO_Init+0x222>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4f      	ldr	r2, [pc, #316]	; (80041dc <HAL_GPIO_Init+0x348>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <HAL_GPIO_Init+0x21e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4e      	ldr	r2, [pc, #312]	; (80041e0 <HAL_GPIO_Init+0x34c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_GPIO_Init+0x21a>
 80040aa:	2309      	movs	r3, #9
 80040ac:	e012      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040ae:	230a      	movs	r3, #10
 80040b0:	e010      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040b2:	2308      	movs	r3, #8
 80040b4:	e00e      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e00c      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e00a      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040be:	2305      	movs	r3, #5
 80040c0:	e008      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e006      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e004      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_GPIO_Init+0x240>
 80040d2:	2300      	movs	r3, #0
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	f002 0203 	and.w	r2, r2, #3
 80040da:	0092      	lsls	r2, r2, #2
 80040dc:	4093      	lsls	r3, r2
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e4:	4934      	ldr	r1, [pc, #208]	; (80041b8 <HAL_GPIO_Init+0x324>)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	3302      	adds	r3, #2
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f2:	4b3c      	ldr	r3, [pc, #240]	; (80041e4 <HAL_GPIO_Init+0x350>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004116:	4a33      	ldr	r2, [pc, #204]	; (80041e4 <HAL_GPIO_Init+0x350>)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_GPIO_Init+0x350>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <HAL_GPIO_Init+0x350>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_GPIO_Init+0x350>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416a:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <HAL_GPIO_Init+0x350>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004170:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <HAL_GPIO_Init+0x350>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_GPIO_Init+0x350>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3301      	adds	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	f67f ae84 	bls.w	8003eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a8:	bf00      	nop
 80041aa:	3724      	adds	r7, #36	; 0x24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40013800 	.word	0x40013800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40020400 	.word	0x40020400
 80041c4:	40020800 	.word	0x40020800
 80041c8:	40020c00 	.word	0x40020c00
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40021400 	.word	0x40021400
 80041d4:	40021800 	.word	0x40021800
 80041d8:	40021c00 	.word	0x40021c00
 80041dc:	40022000 	.word	0x40022000
 80041e0:	40022400 	.word	0x40022400
 80041e4:	40013c00 	.word	0x40013c00

080041e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
 80041f4:	4613      	mov	r3, r2
 80041f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f8:	787b      	ldrb	r3, [r7, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004204:	e003      	b.n	800420e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	041a      	lsls	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	619a      	str	r2, [r3, #24]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	401a      	ands	r2, r3
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	429a      	cmp	r2, r3
 8004232:	d104      	bne.n	800423e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	041a      	lsls	r2, r3, #16
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800423c:	e002      	b.n	8004244 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004266:	4a05      	ldr	r2, [pc, #20]	; (800427c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f8c6 	bl	8002400 <HAL_GPIO_EXTI_Callback>
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40013c00 	.word	0x40013c00

08004280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e25b      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d075      	beq.n	800438a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800429e:	4ba3      	ldr	r3, [pc, #652]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4ba0      	ldr	r3, [pc, #640]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d112      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b9d      	ldr	r3, [pc, #628]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c2:	d10b      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	4b99      	ldr	r3, [pc, #612]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05b      	beq.n	8004388 <HAL_RCC_OscConfig+0x108>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d157      	bne.n	8004388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e236      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d106      	bne.n	80042f4 <HAL_RCC_OscConfig+0x74>
 80042e6:	4b91      	ldr	r3, [pc, #580]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a90      	ldr	r2, [pc, #576]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x98>
 80042fe:	4b8b      	ldr	r3, [pc, #556]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a8a      	ldr	r2, [pc, #552]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a87      	ldr	r2, [pc, #540]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 8004318:	4b84      	ldr	r3, [pc, #528]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a83      	ldr	r2, [pc, #524]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800432a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe fe40 	bl	8002fbc <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe fe3c 	bl	8002fbc <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1fb      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0xc0>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fe2c 	bl	8002fbc <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fe28 	bl	8002fbc <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1e7      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437a:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0xe8>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004396:	4b65      	ldr	r3, [pc, #404]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d11c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b5f      	ldr	r3, [pc, #380]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d116      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e1bb      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4952      	ldr	r1, [pc, #328]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e6:	e03a      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f0:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <HAL_RCC_OscConfig+0x2b0>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe fde1 	bl	8002fbc <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fe fddd 	bl	8002fbc <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e19c      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	4b46      	ldr	r3, [pc, #280]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4940      	ldr	r1, [pc, #256]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
 8004430:	e015      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <HAL_RCC_OscConfig+0x2b0>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe fdc0 	bl	8002fbc <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004440:	f7fe fdbc 	bl	8002fbc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e17b      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d030      	beq.n	80044cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_OscConfig+0x2b4>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fe fda0 	bl	8002fbc <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004480:	f7fe fd9c 	bl	8002fbc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e15b      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 8004494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x200>
 800449e:	e015      	b.n	80044cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCC_OscConfig+0x2b4>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fe fd89 	bl	8002fbc <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fe fd85 	bl	8002fbc <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e144      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a0 	beq.w	800461a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a0e      	ldr	r2, [pc, #56]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d121      	bne.n	800455a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a07      	ldr	r2, [pc, #28]	; (8004538 <HAL_RCC_OscConfig+0x2b8>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fe fd4b 	bl	8002fbc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e011      	b.n	800454e <HAL_RCC_OscConfig+0x2ce>
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	42470000 	.word	0x42470000
 8004534:	42470e80 	.word	0x42470e80
 8004538:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453c:	f7fe fd3e 	bl	8002fbc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0fd      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	4b81      	ldr	r3, [pc, #516]	; (8004754 <HAL_RCC_OscConfig+0x4d4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d106      	bne.n	8004570 <HAL_RCC_OscConfig+0x2f0>
 8004562:	4b7d      	ldr	r3, [pc, #500]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a7c      	ldr	r2, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004568:	f043 0301 	orr.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x32a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b05      	cmp	r3, #5
 8004576:	d10c      	bne.n	8004592 <HAL_RCC_OscConfig+0x312>
 8004578:	4b77      	ldr	r3, [pc, #476]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a76      	ldr	r2, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	4b74      	ldr	r3, [pc, #464]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a73      	ldr	r2, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e00b      	b.n	80045aa <HAL_RCC_OscConfig+0x32a>
 8004592:	4b71      	ldr	r3, [pc, #452]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4a70      	ldr	r2, [pc, #448]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6713      	str	r3, [r2, #112]	; 0x70
 800459e:	4b6e      	ldr	r3, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a6d      	ldr	r2, [pc, #436]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d015      	beq.n	80045de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fe fd03 	bl	8002fbc <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe fcff 	bl	8002fbc <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0bc      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b61      	ldr	r3, [pc, #388]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCC_OscConfig+0x33a>
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fe fced 	bl	8002fbc <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e6:	f7fe fce9 	bl	8002fbc <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0a6      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	4b56      	ldr	r3, [pc, #344]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ee      	bne.n	80045e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b52      	ldr	r3, [pc, #328]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a51      	ldr	r2, [pc, #324]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8092 	beq.w	8004748 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004624:	4b4c      	ldr	r3, [pc, #304]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b08      	cmp	r3, #8
 800462e:	d05c      	beq.n	80046ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d141      	bne.n	80046bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b48      	ldr	r3, [pc, #288]	; (800475c <HAL_RCC_OscConfig+0x4dc>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe fcbd 	bl	8002fbc <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe fcb9 	bl	8002fbc <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e078      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	3b01      	subs	r3, #1
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	4933      	ldr	r1, [pc, #204]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800468e:	4b33      	ldr	r3, [pc, #204]	; (800475c <HAL_RCC_OscConfig+0x4dc>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe fc92 	bl	8002fbc <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469c:	f7fe fc8e 	bl	8002fbc <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e04d      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0f0      	beq.n	800469c <HAL_RCC_OscConfig+0x41c>
 80046ba:	e045      	b.n	8004748 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046bc:	4b27      	ldr	r3, [pc, #156]	; (800475c <HAL_RCC_OscConfig+0x4dc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fe fc7b 	bl	8002fbc <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fe fc77 	bl	8002fbc <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e036      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x44a>
 80046e8:	e02e      	b.n	8004748 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e029      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f6:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_RCC_OscConfig+0x4d8>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	d11c      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d115      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004724:	4293      	cmp	r3, r2
 8004726:	d10d      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004732:	429a      	cmp	r2, r3
 8004734:	d106      	bne.n	8004744 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40007000 	.word	0x40007000
 8004758:	40023800 	.word	0x40023800
 800475c:	42470060 	.word	0x42470060

08004760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0cc      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90c      	bls.n	800479c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b8      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b4:	4b59      	ldr	r3, [pc, #356]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a58      	ldr	r2, [pc, #352]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047cc:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d8:	4b50      	ldr	r3, [pc, #320]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	494d      	ldr	r1, [pc, #308]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d044      	beq.n	8004880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d119      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d003      	beq.n	800481e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481a:	2b03      	cmp	r3, #3
 800481c:	d107      	bne.n	800482e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482e:	4b3b      	ldr	r3, [pc, #236]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e067      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800483e:	4b37      	ldr	r3, [pc, #220]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0203 	bic.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4934      	ldr	r1, [pc, #208]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004850:	f7fe fbb4 	bl	8002fbc <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fe fbb0 	bl	8002fbc <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e04f      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 020c 	and.w	r2, r3, #12
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	429a      	cmp	r2, r3
 800487e:	d1eb      	bne.n	8004858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004880:	4b25      	ldr	r3, [pc, #148]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d20c      	bcs.n	80048a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e032      	b.n	800490e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4916      	ldr	r1, [pc, #88]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	490e      	ldr	r1, [pc, #56]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048e6:	f000 f821 	bl	800492c <HAL_RCC_GetSysClockFreq>
 80048ea:	4601      	mov	r1, r0
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	fa21 f303 	lsr.w	r3, r1, r3
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_RCC_ClockConfig+0x1c8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fea2 	bl	8002650 <HAL_InitTick>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023c00 	.word	0x40023c00
 800491c:	40023800 	.word	0x40023800
 8004920:	08009b9c 	.word	0x08009b9c
 8004924:	20000000 	.word	0x20000000
 8004928:	20000004 	.word	0x20000004

0800492c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	2300      	movs	r3, #0
 800493c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004942:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b04      	cmp	r3, #4
 800494c:	d007      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x32>
 800494e:	2b08      	cmp	r3, #8
 8004950:	d008      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x38>
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 808d 	bne.w	8004a72 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b4b      	ldr	r3, [pc, #300]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x15c>)
 800495a:	60bb      	str	r3, [r7, #8]
       break;
 800495c:	e08c      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b4b      	ldr	r3, [pc, #300]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x160>)
 8004960:	60bb      	str	r3, [r7, #8]
      break;
 8004962:	e089      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b47      	ldr	r3, [pc, #284]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496e:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d023      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x158>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	f04f 0400 	mov.w	r4, #0
 8004984:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	ea03 0501 	and.w	r5, r3, r1
 8004990:	ea04 0602 	and.w	r6, r4, r2
 8004994:	4a3d      	ldr	r2, [pc, #244]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x160>)
 8004996:	fb02 f106 	mul.w	r1, r2, r6
 800499a:	2200      	movs	r2, #0
 800499c:	fb02 f205 	mul.w	r2, r2, r5
 80049a0:	440a      	add	r2, r1
 80049a2:	493a      	ldr	r1, [pc, #232]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x160>)
 80049a4:	fba5 0101 	umull	r0, r1, r5, r1
 80049a8:	1853      	adds	r3, r2, r1
 80049aa:	4619      	mov	r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f04f 0400 	mov.w	r4, #0
 80049b2:	461a      	mov	r2, r3
 80049b4:	4623      	mov	r3, r4
 80049b6:	f7fc f8ff 	bl	8000bb8 <__aeabi_uldivmod>
 80049ba:	4603      	mov	r3, r0
 80049bc:	460c      	mov	r4, r1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e049      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b30      	ldr	r3, [pc, #192]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x158>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	f04f 0400 	mov.w	r4, #0
 80049cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	ea03 0501 	and.w	r5, r3, r1
 80049d8:	ea04 0602 	and.w	r6, r4, r2
 80049dc:	4629      	mov	r1, r5
 80049de:	4632      	mov	r2, r6
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f04f 0400 	mov.w	r4, #0
 80049e8:	0154      	lsls	r4, r2, #5
 80049ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ee:	014b      	lsls	r3, r1, #5
 80049f0:	4619      	mov	r1, r3
 80049f2:	4622      	mov	r2, r4
 80049f4:	1b49      	subs	r1, r1, r5
 80049f6:	eb62 0206 	sbc.w	r2, r2, r6
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	0194      	lsls	r4, r2, #6
 8004a04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a08:	018b      	lsls	r3, r1, #6
 8004a0a:	1a5b      	subs	r3, r3, r1
 8004a0c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	00e2      	lsls	r2, r4, #3
 8004a1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a1e:	00d9      	lsls	r1, r3, #3
 8004a20:	460b      	mov	r3, r1
 8004a22:	4614      	mov	r4, r2
 8004a24:	195b      	adds	r3, r3, r5
 8004a26:	eb44 0406 	adc.w	r4, r4, r6
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	02a2      	lsls	r2, r4, #10
 8004a34:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a38:	0299      	lsls	r1, r3, #10
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	4621      	mov	r1, r4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	f7fc f8b4 	bl	8000bb8 <__aeabi_uldivmod>
 8004a50:	4603      	mov	r3, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a56:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	3301      	adds	r3, #1
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	60bb      	str	r3, [r7, #8]
      break;
 8004a70:	e002      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a78:	68bb      	ldr	r3, [r7, #8]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800
 8004a88:	00f42400 	.word	0x00f42400
 8004a8c:	00b71b00 	.word	0x00b71b00

08004a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000000 	.word	0x20000000

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aac:	f7ff fff0 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0a9b      	lsrs	r3, r3, #10
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4a03      	ldr	r2, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	08009bac 	.word	0x08009bac

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ad4:	f7ff ffdc 	bl	8004a90 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4601      	mov	r1, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	0b5b      	lsrs	r3, r3, #13
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4a03      	ldr	r2, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	08009bac 	.word	0x08009bac

08004af8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	220f      	movs	r2, #15
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_RCC_GetClockConfig+0x60>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 020f 	and.w	r2, r3, #15
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40023c00 	.word	0x40023c00

08004b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01d      	b.n	8004baa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fd fffe 	bl	8002b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f000 fa8c 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b06      	cmp	r3, #6
 8004bda:	d007      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e01d      	b.n	8004c48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fd ff77 	bl	8002b14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fa3d 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	6839      	ldr	r1, [r7, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fc78 	bl	8005558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <HAL_TIM_PWM_Start+0x74>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIM_PWM_Start+0x2c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a14      	ldr	r2, [pc, #80]	; (8004cc8 <HAL_TIM_PWM_Start+0x78>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_PWM_Start+0x30>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_TIM_PWM_Start+0x32>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0202 	mvn.w	r2, #2
 8004cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f9b4 	bl	800507c <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9a6 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f9b7 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0204 	mvn.w	r2, #4
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f98a 	bl	800507c <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f97c 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f98d 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0208 	mvn.w	r2, #8
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f960 	bl	800507c <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f952 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f963 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0210 	mvn.w	r2, #16
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f936 	bl	800507c <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f928 	bl	8005068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f939 	bl	8005090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10e      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0201 	mvn.w	r2, #1
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fbaa 	bl	80025a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d10e      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d107      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fc1a 	bl	80056b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d10e      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d107      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8fe 	bl	80050a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d107      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0220 	mvn.w	r2, #32
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fbe4 	bl	800569c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e0b4      	b.n	8005060 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	f200 809f 	bhi.w	800504c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f49 	.word	0x08004f49
 8004f18:	0800504d 	.word	0x0800504d
 8004f1c:	0800504d 	.word	0x0800504d
 8004f20:	0800504d 	.word	0x0800504d
 8004f24:	08004f89 	.word	0x08004f89
 8004f28:	0800504d 	.word	0x0800504d
 8004f2c:	0800504d 	.word	0x0800504d
 8004f30:	0800504d 	.word	0x0800504d
 8004f34:	08004fcb 	.word	0x08004fcb
 8004f38:	0800504d 	.word	0x0800504d
 8004f3c:	0800504d 	.word	0x0800504d
 8004f40:	0800504d 	.word	0x0800504d
 8004f44:	0800500b 	.word	0x0800500b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f952 	bl	80051f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0208 	orr.w	r2, r2, #8
 8004f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0204 	bic.w	r2, r2, #4
 8004f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	619a      	str	r2, [r3, #24]
      break;
 8004f86:	e062      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f9a2 	bl	80052d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6999      	ldr	r1, [r3, #24]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	021a      	lsls	r2, r3, #8
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	619a      	str	r2, [r3, #24]
      break;
 8004fc8:	e041      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 f9f7 	bl	80053c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0208 	orr.w	r2, r2, #8
 8004fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0204 	bic.w	r2, r2, #4
 8004ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	61da      	str	r2, [r3, #28]
      break;
 8005008:	e021      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fa4b 	bl	80054ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69d9      	ldr	r1, [r3, #28]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	021a      	lsls	r2, r3, #8
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	61da      	str	r2, [r3, #28]
      break;
 800504a:	e000      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800504c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a40      	ldr	r2, [pc, #256]	; (80051cc <TIM_Base_SetConfig+0x114>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d00f      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3d      	ldr	r2, [pc, #244]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <TIM_Base_SetConfig+0x120>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <TIM_Base_SetConfig+0x124>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <TIM_Base_SetConfig+0x114>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d027      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d023      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2b      	ldr	r2, [pc, #172]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01f      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <TIM_Base_SetConfig+0x120>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a29      	ldr	r2, [pc, #164]	; (80051dc <TIM_Base_SetConfig+0x124>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d017      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a28      	ldr	r2, [pc, #160]	; (80051e0 <TIM_Base_SetConfig+0x128>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <TIM_Base_SetConfig+0x12c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a26      	ldr	r2, [pc, #152]	; (80051e8 <TIM_Base_SetConfig+0x130>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a25      	ldr	r2, [pc, #148]	; (80051ec <TIM_Base_SetConfig+0x134>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <TIM_Base_SetConfig+0x138>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <TIM_Base_SetConfig+0x13c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <TIM_Base_SetConfig+0x114>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0c      	ldr	r2, [pc, #48]	; (80051dc <TIM_Base_SetConfig+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800
 80051ec:	40001800 	.word	0x40001800
 80051f0:	40001c00 	.word	0x40001c00
 80051f4:	40002000 	.word	0x40002000

080051f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 0302 	bic.w	r3, r3, #2
 8005240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <TIM_OC1_SetConfig+0xd8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC1_SetConfig+0x64>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <TIM_OC1_SetConfig+0xdc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10c      	bne.n	8005276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0308 	bic.w	r3, r3, #8
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC1_SetConfig+0xd8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC1_SetConfig+0x8e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <TIM_OC1_SetConfig+0xdc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0320 	bic.w	r3, r3, #32
 8005322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a22      	ldr	r2, [pc, #136]	; (80053bc <TIM_OC2_SetConfig+0xe4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0x68>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <TIM_OC2_SetConfig+0xe8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10d      	bne.n	800535c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <TIM_OC2_SetConfig+0xe4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC2_SetConfig+0x94>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <TIM_OC2_SetConfig+0xe8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d113      	bne.n	8005394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400

080053c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0303 	bic.w	r3, r3, #3
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800540c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <TIM_OC3_SetConfig+0xe0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC3_SetConfig+0x66>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <TIM_OC3_SetConfig+0xe4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10d      	bne.n	8005446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <TIM_OC3_SetConfig+0xe0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_OC3_SetConfig+0x92>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <TIM_OC3_SetConfig+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d113      	bne.n	800547e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40010400 	.word	0x40010400

080054ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	031b      	lsls	r3, r3, #12
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a12      	ldr	r2, [pc, #72]	; (8005550 <TIM_OC4_SetConfig+0xa4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_OC4_SetConfig+0x68>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a11      	ldr	r2, [pc, #68]	; (8005554 <TIM_OC4_SetConfig+0xa8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d109      	bne.n	8005528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800551a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40010400 	.word	0x40010400

08005558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2201      	movs	r2, #1
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	43db      	mvns	r3, r3
 800557a:	401a      	ands	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	431a      	orrs	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b8:	2302      	movs	r3, #2
 80055ba:	e05a      	b.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a21      	ldr	r2, [pc, #132]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d022      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005608:	d01d      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1a      	ldr	r2, [pc, #104]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a17      	ldr	r2, [pc, #92]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10c      	bne.n	8005660 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800564c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	4313      	orrs	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800

0800569c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e03f      	b.n	8005756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fd fb7a 	bl	8002de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	; 0x24
 80056f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb97 	bl	8005e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800573c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b088      	sub	sp, #32
 8005762:	af02      	add	r7, sp, #8
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	f040 8083 	bne.w	8005886 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_UART_Transmit+0x2e>
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e07b      	b.n	8005888 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_UART_Transmit+0x40>
 800579a:	2302      	movs	r3, #2
 800579c:	e074      	b.n	8005888 <HAL_UART_Transmit+0x12a>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2221      	movs	r2, #33	; 0x21
 80057b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057b4:	f7fd fc02 	bl	8002fbc <HAL_GetTick>
 80057b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80057ce:	e042      	b.n	8005856 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	d122      	bne.n	800582e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	2200      	movs	r2, #0
 80057f0:	2180      	movs	r1, #128	; 0x80
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f9b6 	bl	8005b64 <UART_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e042      	b.n	8005888 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005814:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3302      	adds	r3, #2
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	e017      	b.n	8005856 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	3301      	adds	r3, #1
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	e013      	b.n	8005856 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2200      	movs	r2, #0
 8005836:	2180      	movs	r1, #128	; 0x80
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f993 	bl	8005b64 <UART_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e01f      	b.n	8005888 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	60ba      	str	r2, [r7, #8]
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1b7      	bne.n	80057d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	2140      	movs	r1, #64	; 0x40
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 f97a 	bl	8005b64 <UART_WaitOnFlagUntilTimeout>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d140      	bne.n	800592c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_UART_Receive_IT+0x26>
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e039      	b.n	800592e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Receive_IT+0x38>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e032      	b.n	800592e <HAL_UART_Receive_IT+0x9e>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	88fa      	ldrh	r2, [r7, #6]
 80058da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2222      	movs	r2, #34	; 0x22
 80058ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005906:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0220 	orr.w	r2, r2, #32
 8005926:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10d      	bne.n	800598e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_UART_IRQHandler+0x52>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f9d6 	bl	8005d38 <UART_Receive_IT>
      return;
 800598c:	e0d1      	b.n	8005b32 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80b0 	beq.w	8005af6 <HAL_UART_IRQHandler+0x1ba>
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_UART_IRQHandler+0x70>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80a5 	beq.w	8005af6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_UART_IRQHandler+0x90>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_UART_IRQHandler+0xb0>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	f043 0202 	orr.w	r2, r3, #2
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_UART_IRQHandler+0xd0>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a04:	f043 0204 	orr.w	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00f      	beq.n	8005a36 <HAL_UART_IRQHandler+0xfa>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_UART_IRQHandler+0xee>
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	f043 0208 	orr.w	r2, r3, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d078      	beq.n	8005b30 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <HAL_UART_IRQHandler+0x11c>
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f970 	bl	8005d38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_UART_IRQHandler+0x144>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d031      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f8b9 	bl	8005bf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d123      	bne.n	8005adc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <HAL_UART_IRQHandler+0x1fc>)
 8005ab2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe f9c9 	bl	8003e50 <HAL_DMA_Abort_IT>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d016      	beq.n	8005af2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ace:	4610      	mov	r0, r2
 8005ad0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad2:	e00e      	b.n	8005af2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f83b 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ada:	e00a      	b.n	8005af2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f837 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae2:	e006      	b.n	8005af2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f833 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005af0:	e01e      	b.n	8005b30 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af2:	bf00      	nop
    return;
 8005af4:	e01c      	b.n	8005b30 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_UART_IRQHandler+0x1d6>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8a6 	bl	8005c5c <UART_Transmit_IT>
    return;
 8005b10:	e00f      	b.n	8005b32 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1f6>
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8ee 	bl	8005d08 <UART_EndTransmit_IT>
    return;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005b30:	bf00      	nop
  }
}
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	08005c35 	.word	0x08005c35

08005b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b74:	e02c      	b.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d028      	beq.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b84:	f7fd fa1a 	bl	8002fbc <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d21d      	bcs.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ba2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e00f      	b.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d0c3      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff ff7e 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b21      	cmp	r3, #33	; 0x21
 8005c6e:	d144      	bne.n	8005cfa <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c78:	d11a      	bne.n	8005cb0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c8e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	1c9a      	adds	r2, r3, #2
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	621a      	str	r2, [r3, #32]
 8005ca2:	e00e      	b.n	8005cc2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]
 8005cae:	e008      	b.n	8005cc2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6211      	str	r1, [r2, #32]
 8005cba:	781a      	ldrb	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10f      	bne.n	8005cf6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ce4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e000      	b.n	8005cfc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005cfa:	2302      	movs	r3, #2
  }
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff ff07 	bl	8005b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b22      	cmp	r3, #34	; 0x22
 8005d4a:	d171      	bne.n	8005e30 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d123      	bne.n	8005d9e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10e      	bne.n	8005d82 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	1c9a      	adds	r2, r3, #2
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d80:	e029      	b.n	8005dd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d9c:	e01b      	b.n	8005dd6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6858      	ldr	r0, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	1c59      	adds	r1, r3, #1
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6291      	str	r1, [r2, #40]	; 0x28
 8005db6:	b2c2      	uxtb	r2, r0
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e00c      	b.n	8005dd6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	1c58      	adds	r0, r3, #1
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	6288      	str	r0, [r1, #40]	; 0x28
 8005dce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4619      	mov	r1, r3
 8005de4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d120      	bne.n	8005e2c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0220 	bic.w	r2, r2, #32
 8005df8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fb f982 	bl	800112c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e002      	b.n	8005e32 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005e7e:	f023 030c 	bic.w	r3, r3, #12
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699a      	ldr	r2, [r3, #24]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	f040 818b 	bne.w	80061c4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4ac1      	ldr	r2, [pc, #772]	; (80061b8 <UART_SetConfig+0x37c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d005      	beq.n	8005ec4 <UART_SetConfig+0x88>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4abf      	ldr	r2, [pc, #764]	; (80061bc <UART_SetConfig+0x380>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	f040 80bd 	bne.w	800603e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ec4:	f7fe fe04 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8005ec8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	461d      	mov	r5, r3
 8005ece:	f04f 0600 	mov.w	r6, #0
 8005ed2:	46a8      	mov	r8, r5
 8005ed4:	46b1      	mov	r9, r6
 8005ed6:	eb18 0308 	adds.w	r3, r8, r8
 8005eda:	eb49 0409 	adc.w	r4, r9, r9
 8005ede:	4698      	mov	r8, r3
 8005ee0:	46a1      	mov	r9, r4
 8005ee2:	eb18 0805 	adds.w	r8, r8, r5
 8005ee6:	eb49 0906 	adc.w	r9, r9, r6
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ef6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005efa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005efe:	4688      	mov	r8, r1
 8005f00:	4691      	mov	r9, r2
 8005f02:	eb18 0005 	adds.w	r0, r8, r5
 8005f06:	eb49 0106 	adc.w	r1, r9, r6
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	461d      	mov	r5, r3
 8005f10:	f04f 0600 	mov.w	r6, #0
 8005f14:	196b      	adds	r3, r5, r5
 8005f16:	eb46 0406 	adc.w	r4, r6, r6
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4623      	mov	r3, r4
 8005f1e:	f7fa fe4b 	bl	8000bb8 <__aeabi_uldivmod>
 8005f22:	4603      	mov	r3, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	461a      	mov	r2, r3
 8005f28:	4ba5      	ldr	r3, [pc, #660]	; (80061c0 <UART_SetConfig+0x384>)
 8005f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	461d      	mov	r5, r3
 8005f38:	f04f 0600 	mov.w	r6, #0
 8005f3c:	46a9      	mov	r9, r5
 8005f3e:	46b2      	mov	sl, r6
 8005f40:	eb19 0309 	adds.w	r3, r9, r9
 8005f44:	eb4a 040a 	adc.w	r4, sl, sl
 8005f48:	4699      	mov	r9, r3
 8005f4a:	46a2      	mov	sl, r4
 8005f4c:	eb19 0905 	adds.w	r9, r9, r5
 8005f50:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f68:	4689      	mov	r9, r1
 8005f6a:	4692      	mov	sl, r2
 8005f6c:	eb19 0005 	adds.w	r0, r9, r5
 8005f70:	eb4a 0106 	adc.w	r1, sl, r6
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	461d      	mov	r5, r3
 8005f7a:	f04f 0600 	mov.w	r6, #0
 8005f7e:	196b      	adds	r3, r5, r5
 8005f80:	eb46 0406 	adc.w	r4, r6, r6
 8005f84:	461a      	mov	r2, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	f7fa fe16 	bl	8000bb8 <__aeabi_uldivmod>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b8b      	ldr	r3, [pc, #556]	; (80061c0 <UART_SetConfig+0x384>)
 8005f94:	fba3 1302 	umull	r1, r3, r3, r2
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	2164      	movs	r1, #100	; 0x64
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	3332      	adds	r3, #50	; 0x32
 8005fa6:	4a86      	ldr	r2, [pc, #536]	; (80061c0 <UART_SetConfig+0x384>)
 8005fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fb4:	4498      	add	r8, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	461d      	mov	r5, r3
 8005fba:	f04f 0600 	mov.w	r6, #0
 8005fbe:	46a9      	mov	r9, r5
 8005fc0:	46b2      	mov	sl, r6
 8005fc2:	eb19 0309 	adds.w	r3, r9, r9
 8005fc6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fca:	4699      	mov	r9, r3
 8005fcc:	46a2      	mov	sl, r4
 8005fce:	eb19 0905 	adds.w	r9, r9, r5
 8005fd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fe6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fea:	4689      	mov	r9, r1
 8005fec:	4692      	mov	sl, r2
 8005fee:	eb19 0005 	adds.w	r0, r9, r5
 8005ff2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	461d      	mov	r5, r3
 8005ffc:	f04f 0600 	mov.w	r6, #0
 8006000:	196b      	adds	r3, r5, r5
 8006002:	eb46 0406 	adc.w	r4, r6, r6
 8006006:	461a      	mov	r2, r3
 8006008:	4623      	mov	r3, r4
 800600a:	f7fa fdd5 	bl	8000bb8 <__aeabi_uldivmod>
 800600e:	4603      	mov	r3, r0
 8006010:	460c      	mov	r4, r1
 8006012:	461a      	mov	r2, r3
 8006014:	4b6a      	ldr	r3, [pc, #424]	; (80061c0 <UART_SetConfig+0x384>)
 8006016:	fba3 1302 	umull	r1, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	2164      	movs	r1, #100	; 0x64
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	3332      	adds	r3, #50	; 0x32
 8006028:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <UART_SetConfig+0x384>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	f003 0207 	and.w	r2, r3, #7
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4442      	add	r2, r8
 800603a:	609a      	str	r2, [r3, #8]
 800603c:	e26f      	b.n	800651e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800603e:	f7fe fd33 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006042:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	461d      	mov	r5, r3
 8006048:	f04f 0600 	mov.w	r6, #0
 800604c:	46a8      	mov	r8, r5
 800604e:	46b1      	mov	r9, r6
 8006050:	eb18 0308 	adds.w	r3, r8, r8
 8006054:	eb49 0409 	adc.w	r4, r9, r9
 8006058:	4698      	mov	r8, r3
 800605a:	46a1      	mov	r9, r4
 800605c:	eb18 0805 	adds.w	r8, r8, r5
 8006060:	eb49 0906 	adc.w	r9, r9, r6
 8006064:	f04f 0100 	mov.w	r1, #0
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006070:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006074:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006078:	4688      	mov	r8, r1
 800607a:	4691      	mov	r9, r2
 800607c:	eb18 0005 	adds.w	r0, r8, r5
 8006080:	eb49 0106 	adc.w	r1, r9, r6
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	461d      	mov	r5, r3
 800608a:	f04f 0600 	mov.w	r6, #0
 800608e:	196b      	adds	r3, r5, r5
 8006090:	eb46 0406 	adc.w	r4, r6, r6
 8006094:	461a      	mov	r2, r3
 8006096:	4623      	mov	r3, r4
 8006098:	f7fa fd8e 	bl	8000bb8 <__aeabi_uldivmod>
 800609c:	4603      	mov	r3, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b47      	ldr	r3, [pc, #284]	; (80061c0 <UART_SetConfig+0x384>)
 80060a4:	fba3 2302 	umull	r2, r3, r3, r2
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	461d      	mov	r5, r3
 80060b2:	f04f 0600 	mov.w	r6, #0
 80060b6:	46a9      	mov	r9, r5
 80060b8:	46b2      	mov	sl, r6
 80060ba:	eb19 0309 	adds.w	r3, r9, r9
 80060be:	eb4a 040a 	adc.w	r4, sl, sl
 80060c2:	4699      	mov	r9, r3
 80060c4:	46a2      	mov	sl, r4
 80060c6:	eb19 0905 	adds.w	r9, r9, r5
 80060ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80060ce:	f04f 0100 	mov.w	r1, #0
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060e2:	4689      	mov	r9, r1
 80060e4:	4692      	mov	sl, r2
 80060e6:	eb19 0005 	adds.w	r0, r9, r5
 80060ea:	eb4a 0106 	adc.w	r1, sl, r6
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	461d      	mov	r5, r3
 80060f4:	f04f 0600 	mov.w	r6, #0
 80060f8:	196b      	adds	r3, r5, r5
 80060fa:	eb46 0406 	adc.w	r4, r6, r6
 80060fe:	461a      	mov	r2, r3
 8006100:	4623      	mov	r3, r4
 8006102:	f7fa fd59 	bl	8000bb8 <__aeabi_uldivmod>
 8006106:	4603      	mov	r3, r0
 8006108:	460c      	mov	r4, r1
 800610a:	461a      	mov	r2, r3
 800610c:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <UART_SetConfig+0x384>)
 800610e:	fba3 1302 	umull	r1, r3, r3, r2
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	2164      	movs	r1, #100	; 0x64
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	4a27      	ldr	r2, [pc, #156]	; (80061c0 <UART_SetConfig+0x384>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800612e:	4498      	add	r8, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	461d      	mov	r5, r3
 8006134:	f04f 0600 	mov.w	r6, #0
 8006138:	46a9      	mov	r9, r5
 800613a:	46b2      	mov	sl, r6
 800613c:	eb19 0309 	adds.w	r3, r9, r9
 8006140:	eb4a 040a 	adc.w	r4, sl, sl
 8006144:	4699      	mov	r9, r3
 8006146:	46a2      	mov	sl, r4
 8006148:	eb19 0905 	adds.w	r9, r9, r5
 800614c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800615c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006164:	4689      	mov	r9, r1
 8006166:	4692      	mov	sl, r2
 8006168:	eb19 0005 	adds.w	r0, r9, r5
 800616c:	eb4a 0106 	adc.w	r1, sl, r6
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	461d      	mov	r5, r3
 8006176:	f04f 0600 	mov.w	r6, #0
 800617a:	196b      	adds	r3, r5, r5
 800617c:	eb46 0406 	adc.w	r4, r6, r6
 8006180:	461a      	mov	r2, r3
 8006182:	4623      	mov	r3, r4
 8006184:	f7fa fd18 	bl	8000bb8 <__aeabi_uldivmod>
 8006188:	4603      	mov	r3, r0
 800618a:	460c      	mov	r4, r1
 800618c:	461a      	mov	r2, r3
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <UART_SetConfig+0x384>)
 8006190:	fba3 1302 	umull	r1, r3, r3, r2
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	2164      	movs	r1, #100	; 0x64
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	3332      	adds	r3, #50	; 0x32
 80061a2:	4a07      	ldr	r2, [pc, #28]	; (80061c0 <UART_SetConfig+0x384>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f003 0207 	and.w	r2, r3, #7
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4442      	add	r2, r8
 80061b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061b6:	e1b2      	b.n	800651e <UART_SetConfig+0x6e2>
 80061b8:	40011000 	.word	0x40011000
 80061bc:	40011400 	.word	0x40011400
 80061c0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4ad7      	ldr	r2, [pc, #860]	; (8006528 <UART_SetConfig+0x6ec>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d005      	beq.n	80061da <UART_SetConfig+0x39e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4ad6      	ldr	r2, [pc, #856]	; (800652c <UART_SetConfig+0x6f0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	f040 80d1 	bne.w	800637c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061da:	f7fe fc79 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 80061de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	469a      	mov	sl, r3
 80061e4:	f04f 0b00 	mov.w	fp, #0
 80061e8:	46d0      	mov	r8, sl
 80061ea:	46d9      	mov	r9, fp
 80061ec:	eb18 0308 	adds.w	r3, r8, r8
 80061f0:	eb49 0409 	adc.w	r4, r9, r9
 80061f4:	4698      	mov	r8, r3
 80061f6:	46a1      	mov	r9, r4
 80061f8:	eb18 080a 	adds.w	r8, r8, sl
 80061fc:	eb49 090b 	adc.w	r9, r9, fp
 8006200:	f04f 0100 	mov.w	r1, #0
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800620c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006210:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006214:	4688      	mov	r8, r1
 8006216:	4691      	mov	r9, r2
 8006218:	eb1a 0508 	adds.w	r5, sl, r8
 800621c:	eb4b 0609 	adc.w	r6, fp, r9
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4619      	mov	r1, r3
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	f04f 0400 	mov.w	r4, #0
 8006232:	0094      	lsls	r4, r2, #2
 8006234:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006238:	008b      	lsls	r3, r1, #2
 800623a:	461a      	mov	r2, r3
 800623c:	4623      	mov	r3, r4
 800623e:	4628      	mov	r0, r5
 8006240:	4631      	mov	r1, r6
 8006242:	f7fa fcb9 	bl	8000bb8 <__aeabi_uldivmod>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	461a      	mov	r2, r3
 800624c:	4bb8      	ldr	r3, [pc, #736]	; (8006530 <UART_SetConfig+0x6f4>)
 800624e:	fba3 2302 	umull	r2, r3, r3, r2
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	469b      	mov	fp, r3
 800625c:	f04f 0c00 	mov.w	ip, #0
 8006260:	46d9      	mov	r9, fp
 8006262:	46e2      	mov	sl, ip
 8006264:	eb19 0309 	adds.w	r3, r9, r9
 8006268:	eb4a 040a 	adc.w	r4, sl, sl
 800626c:	4699      	mov	r9, r3
 800626e:	46a2      	mov	sl, r4
 8006270:	eb19 090b 	adds.w	r9, r9, fp
 8006274:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006278:	f04f 0100 	mov.w	r1, #0
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006284:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006288:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800628c:	4689      	mov	r9, r1
 800628e:	4692      	mov	sl, r2
 8006290:	eb1b 0509 	adds.w	r5, fp, r9
 8006294:	eb4c 060a 	adc.w	r6, ip, sl
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	f04f 0400 	mov.w	r4, #0
 80062aa:	0094      	lsls	r4, r2, #2
 80062ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062b0:	008b      	lsls	r3, r1, #2
 80062b2:	461a      	mov	r2, r3
 80062b4:	4623      	mov	r3, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	4631      	mov	r1, r6
 80062ba:	f7fa fc7d 	bl	8000bb8 <__aeabi_uldivmod>
 80062be:	4603      	mov	r3, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b9a      	ldr	r3, [pc, #616]	; (8006530 <UART_SetConfig+0x6f4>)
 80062c6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	2164      	movs	r1, #100	; 0x64
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	3332      	adds	r3, #50	; 0x32
 80062d8:	4a95      	ldr	r2, [pc, #596]	; (8006530 <UART_SetConfig+0x6f4>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e4:	4498      	add	r8, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	469b      	mov	fp, r3
 80062ea:	f04f 0c00 	mov.w	ip, #0
 80062ee:	46d9      	mov	r9, fp
 80062f0:	46e2      	mov	sl, ip
 80062f2:	eb19 0309 	adds.w	r3, r9, r9
 80062f6:	eb4a 040a 	adc.w	r4, sl, sl
 80062fa:	4699      	mov	r9, r3
 80062fc:	46a2      	mov	sl, r4
 80062fe:	eb19 090b 	adds.w	r9, r9, fp
 8006302:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006306:	f04f 0100 	mov.w	r1, #0
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006312:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006316:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800631a:	4689      	mov	r9, r1
 800631c:	4692      	mov	sl, r2
 800631e:	eb1b 0509 	adds.w	r5, fp, r9
 8006322:	eb4c 060a 	adc.w	r6, ip, sl
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4619      	mov	r1, r3
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	f04f 0400 	mov.w	r4, #0
 8006338:	0094      	lsls	r4, r2, #2
 800633a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800633e:	008b      	lsls	r3, r1, #2
 8006340:	461a      	mov	r2, r3
 8006342:	4623      	mov	r3, r4
 8006344:	4628      	mov	r0, r5
 8006346:	4631      	mov	r1, r6
 8006348:	f7fa fc36 	bl	8000bb8 <__aeabi_uldivmod>
 800634c:	4603      	mov	r3, r0
 800634e:	460c      	mov	r4, r1
 8006350:	461a      	mov	r2, r3
 8006352:	4b77      	ldr	r3, [pc, #476]	; (8006530 <UART_SetConfig+0x6f4>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a72      	ldr	r2, [pc, #456]	; (8006530 <UART_SetConfig+0x6f4>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 020f 	and.w	r2, r3, #15
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4442      	add	r2, r8
 8006378:	609a      	str	r2, [r3, #8]
 800637a:	e0d0      	b.n	800651e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800637c:	f7fe fb94 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8006380:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	469a      	mov	sl, r3
 8006386:	f04f 0b00 	mov.w	fp, #0
 800638a:	46d0      	mov	r8, sl
 800638c:	46d9      	mov	r9, fp
 800638e:	eb18 0308 	adds.w	r3, r8, r8
 8006392:	eb49 0409 	adc.w	r4, r9, r9
 8006396:	4698      	mov	r8, r3
 8006398:	46a1      	mov	r9, r4
 800639a:	eb18 080a 	adds.w	r8, r8, sl
 800639e:	eb49 090b 	adc.w	r9, r9, fp
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063b6:	4688      	mov	r8, r1
 80063b8:	4691      	mov	r9, r2
 80063ba:	eb1a 0508 	adds.w	r5, sl, r8
 80063be:	eb4b 0609 	adc.w	r6, fp, r9
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	4619      	mov	r1, r3
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	f04f 0400 	mov.w	r4, #0
 80063d4:	0094      	lsls	r4, r2, #2
 80063d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063da:	008b      	lsls	r3, r1, #2
 80063dc:	461a      	mov	r2, r3
 80063de:	4623      	mov	r3, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	4631      	mov	r1, r6
 80063e4:	f7fa fbe8 	bl	8000bb8 <__aeabi_uldivmod>
 80063e8:	4603      	mov	r3, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b50      	ldr	r3, [pc, #320]	; (8006530 <UART_SetConfig+0x6f4>)
 80063f0:	fba3 2302 	umull	r2, r3, r3, r2
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	469b      	mov	fp, r3
 80063fe:	f04f 0c00 	mov.w	ip, #0
 8006402:	46d9      	mov	r9, fp
 8006404:	46e2      	mov	sl, ip
 8006406:	eb19 0309 	adds.w	r3, r9, r9
 800640a:	eb4a 040a 	adc.w	r4, sl, sl
 800640e:	4699      	mov	r9, r3
 8006410:	46a2      	mov	sl, r4
 8006412:	eb19 090b 	adds.w	r9, r9, fp
 8006416:	eb4a 0a0c 	adc.w	sl, sl, ip
 800641a:	f04f 0100 	mov.w	r1, #0
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800642a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800642e:	4689      	mov	r9, r1
 8006430:	4692      	mov	sl, r2
 8006432:	eb1b 0509 	adds.w	r5, fp, r9
 8006436:	eb4c 060a 	adc.w	r6, ip, sl
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4619      	mov	r1, r3
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	f04f 0400 	mov.w	r4, #0
 800644c:	0094      	lsls	r4, r2, #2
 800644e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006452:	008b      	lsls	r3, r1, #2
 8006454:	461a      	mov	r2, r3
 8006456:	4623      	mov	r3, r4
 8006458:	4628      	mov	r0, r5
 800645a:	4631      	mov	r1, r6
 800645c:	f7fa fbac 	bl	8000bb8 <__aeabi_uldivmod>
 8006460:	4603      	mov	r3, r0
 8006462:	460c      	mov	r4, r1
 8006464:	461a      	mov	r2, r3
 8006466:	4b32      	ldr	r3, [pc, #200]	; (8006530 <UART_SetConfig+0x6f4>)
 8006468:	fba3 1302 	umull	r1, r3, r3, r2
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	2164      	movs	r1, #100	; 0x64
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	3332      	adds	r3, #50	; 0x32
 800647a:	4a2d      	ldr	r2, [pc, #180]	; (8006530 <UART_SetConfig+0x6f4>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006486:	4498      	add	r8, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	469b      	mov	fp, r3
 800648c:	f04f 0c00 	mov.w	ip, #0
 8006490:	46d9      	mov	r9, fp
 8006492:	46e2      	mov	sl, ip
 8006494:	eb19 0309 	adds.w	r3, r9, r9
 8006498:	eb4a 040a 	adc.w	r4, sl, sl
 800649c:	4699      	mov	r9, r3
 800649e:	46a2      	mov	sl, r4
 80064a0:	eb19 090b 	adds.w	r9, r9, fp
 80064a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064bc:	4689      	mov	r9, r1
 80064be:	4692      	mov	sl, r2
 80064c0:	eb1b 0509 	adds.w	r5, fp, r9
 80064c4:	eb4c 060a 	adc.w	r6, ip, sl
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4619      	mov	r1, r3
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	f04f 0400 	mov.w	r4, #0
 80064da:	0094      	lsls	r4, r2, #2
 80064dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064e0:	008b      	lsls	r3, r1, #2
 80064e2:	461a      	mov	r2, r3
 80064e4:	4623      	mov	r3, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	4631      	mov	r1, r6
 80064ea:	f7fa fb65 	bl	8000bb8 <__aeabi_uldivmod>
 80064ee:	4603      	mov	r3, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	461a      	mov	r2, r3
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <UART_SetConfig+0x6f4>)
 80064f6:	fba3 1302 	umull	r1, r3, r3, r2
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	2164      	movs	r1, #100	; 0x64
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	3332      	adds	r3, #50	; 0x32
 8006508:	4a09      	ldr	r2, [pc, #36]	; (8006530 <UART_SetConfig+0x6f4>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4442      	add	r2, r8
 800651a:	609a      	str	r2, [r3, #8]
}
 800651c:	e7ff      	b.n	800651e <UART_SetConfig+0x6e2>
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006528:	40011000 	.word	0x40011000
 800652c:	40011400 	.word	0x40011400
 8006530:	51eb851f 	.word	0x51eb851f

08006534 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006546:	2b84      	cmp	r3, #132	; 0x84
 8006548:	d005      	beq.n	8006556 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800654a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	3303      	adds	r3, #3
 8006554:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006568:	f000 fada 	bl	8006b20 <vTaskStartScheduler>
  
  return osOK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	bd80      	pop	{r7, pc}

08006572 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006574:	b089      	sub	sp, #36	; 0x24
 8006576:	af04      	add	r7, sp, #16
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d020      	beq.n	80065c6 <osThreadCreate+0x54>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01c      	beq.n	80065c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685c      	ldr	r4, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681d      	ldr	r5, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691e      	ldr	r6, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ffc8 	bl	8006534 <makeFreeRtosPriority>
 80065a4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065ae:	9202      	str	r2, [sp, #8]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	9100      	str	r1, [sp, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	4632      	mov	r2, r6
 80065b8:	4629      	mov	r1, r5
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f8ed 	bl	800679a <xTaskCreateStatic>
 80065c0:	4603      	mov	r3, r0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e01c      	b.n	8006600 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685c      	ldr	r4, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065d2:	b29e      	uxth	r6, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7ff ffaa 	bl	8006534 <makeFreeRtosPriority>
 80065e0:	4602      	mov	r2, r0
 80065e2:	f107 030c 	add.w	r3, r7, #12
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	9200      	str	r2, [sp, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	4632      	mov	r2, r6
 80065ee:	4629      	mov	r1, r5
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 f92c 	bl	800684e <xTaskCreate>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d001      	beq.n	8006600 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800660a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <osDelay+0x16>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	e000      	b.n	8006622 <osDelay+0x18>
 8006620:	2301      	movs	r3, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fa48 	bl	8006ab8 <vTaskDelay>
  
  return osOK;
 8006628:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f103 0208 	add.w	r2, r3, #8
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f04f 32ff 	mov.w	r2, #4294967295
 800664a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f103 0208 	add.w	r2, r3, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f103 0208 	add.w	r2, r3, #8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d103      	bne.n	80066f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e00c      	b.n	800670e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3308      	adds	r3, #8
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	e002      	b.n	8006702 <vListInsert+0x2e>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	429a      	cmp	r2, r3
 800670c:	d2f6      	bcs.n	80066fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6892      	ldr	r2, [r2, #8]
 800675c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d103      	bne.n	800677a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	1e5a      	subs	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800679a:	b580      	push	{r7, lr}
 800679c:	b08e      	sub	sp, #56	; 0x38
 800679e:	af04      	add	r7, sp, #16
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	e7fe      	b.n	80067c0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <xTaskCreateStatic+0x42>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e7fe      	b.n	80067da <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067dc:	2354      	movs	r3, #84	; 0x54
 80067de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b54      	cmp	r3, #84	; 0x54
 80067e4:	d009      	beq.n	80067fa <xTaskCreateStatic+0x60>
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	e7fe      	b.n	80067f8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01e      	beq.n	8006840 <xTaskCreateStatic+0xa6>
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01b      	beq.n	8006840 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006810:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	2202      	movs	r2, #2
 8006816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800681a:	2300      	movs	r3, #0
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	f107 0314 	add.w	r3, r7, #20
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68b9      	ldr	r1, [r7, #8]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f850 	bl	80068d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800683a:	f000 f8d3 	bl	80069e4 <prvAddNewTaskToReadyList>
 800683e:	e001      	b.n	8006844 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006844:	697b      	ldr	r3, [r7, #20]
	}
 8006846:	4618      	mov	r0, r3
 8006848:	3728      	adds	r7, #40	; 0x28
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800684e:	b580      	push	{r7, lr}
 8006850:	b08c      	sub	sp, #48	; 0x30
 8006852:	af04      	add	r7, sp, #16
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f000 feae 	bl	80075c4 <pvPortMalloc>
 8006868:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00e      	beq.n	800688e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006870:	2054      	movs	r0, #84	; 0x54
 8006872:	f000 fea7 	bl	80075c4 <pvPortMalloc>
 8006876:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
 8006884:	e005      	b.n	8006892 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f000 ff5e 	bl	8007748 <vPortFree>
 800688c:	e001      	b.n	8006892 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068a0:	88fa      	ldrh	r2, [r7, #6]
 80068a2:	2300      	movs	r3, #0
 80068a4:	9303      	str	r3, [sp, #12]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	9302      	str	r3, [sp, #8]
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f80e 	bl	80068d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068bc:	69f8      	ldr	r0, [r7, #28]
 80068be:	f000 f891 	bl	80069e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068c2:	2301      	movs	r3, #1
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e002      	b.n	80068ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068ce:	69bb      	ldr	r3, [r7, #24]
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068f0:	3b01      	subs	r3, #1
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <prvInitialiseNewTask+0x46>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e7fe      	b.n	800691c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01f      	beq.n	8006964 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e012      	b.n	8006950 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	7819      	ldrb	r1, [r3, #0]
 8006932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	3334      	adds	r3, #52	; 0x34
 800693a:	460a      	mov	r2, r1
 800693c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d006      	beq.n	8006958 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	d9e9      	bls.n	800692a <prvInitialiseNewTask+0x52>
 8006956:	e000      	b.n	800695a <prvInitialiseNewTask+0x82>
			{
				break;
 8006958:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006962:	e003      	b.n	800696c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	2b06      	cmp	r3, #6
 8006970:	d901      	bls.n	8006976 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006972:	2306      	movs	r3, #6
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800697a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006980:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	3304      	adds	r3, #4
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fe70 	bl	8006672 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	3318      	adds	r3, #24
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff fe6b 	bl	8006672 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	f1c3 0207 	rsb	r2, r3, #7
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	2200      	movs	r2, #0
 80069b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	69b8      	ldr	r0, [r7, #24]
 80069c6:	f000 fbfd 	bl	80071c4 <pxPortInitialiseStack>
 80069ca:	4602      	mov	r2, r0
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069dc:	bf00      	nop
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069ec:	f000 fd0e 	bl	800740c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069f0:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <prvAddNewTaskToReadyList+0xb8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	4a29      	ldr	r2, [pc, #164]	; (8006a9c <prvAddNewTaskToReadyList+0xb8>)
 80069f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069fa:	4b29      	ldr	r3, [pc, #164]	; (8006aa0 <prvAddNewTaskToReadyList+0xbc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a02:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <prvAddNewTaskToReadyList+0xbc>)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a08:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <prvAddNewTaskToReadyList+0xb8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d110      	bne.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a10:	f000 fab8 	bl	8006f84 <prvInitialiseTaskLists>
 8006a14:	e00d      	b.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a16:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <prvAddNewTaskToReadyList+0xc0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a1e:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <prvAddNewTaskToReadyList+0xbc>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d802      	bhi.n	8006a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <prvAddNewTaskToReadyList+0xbc>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <prvAddNewTaskToReadyList+0xc4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <prvAddNewTaskToReadyList+0xc4>)
 8006a3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	2201      	movs	r2, #1
 8006a42:	409a      	lsls	r2, r3
 8006a44:	4b19      	ldr	r3, [pc, #100]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	4a18      	ldr	r2, [pc, #96]	; (8006aac <prvAddNewTaskToReadyList+0xc8>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4a15      	ldr	r2, [pc, #84]	; (8006ab0 <prvAddNewTaskToReadyList+0xcc>)
 8006a5c:	441a      	add	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f7ff fe11 	bl	800668c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a6a:	f000 fcfd 	bl	8007468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <prvAddNewTaskToReadyList+0xc0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00e      	beq.n	8006a94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <prvAddNewTaskToReadyList+0xbc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d207      	bcs.n	8006a94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <prvAddNewTaskToReadyList+0xd0>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	200003f0 	.word	0x200003f0
 8006aa0:	200002f0 	.word	0x200002f0
 8006aa4:	200003fc 	.word	0x200003fc
 8006aa8:	2000040c 	.word	0x2000040c
 8006aac:	200003f8 	.word	0x200003f8
 8006ab0:	200002f4 	.word	0x200002f4
 8006ab4:	e000ed04 	.word	0xe000ed04

08006ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <vTaskDelay+0x60>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <vTaskDelay+0x2e>
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	60bb      	str	r3, [r7, #8]
 8006ae4:	e7fe      	b.n	8006ae4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ae6:	f000 f879 	bl	8006bdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aea:	2100      	movs	r1, #0
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fb03 	bl	80070f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006af2:	f000 f881 	bl	8006bf8 <xTaskResumeAll>
 8006af6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d107      	bne.n	8006b0e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <vTaskDelay+0x64>)
 8006b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000418 	.word	0x20000418
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08a      	sub	sp, #40	; 0x28
 8006b24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b2e:	463a      	mov	r2, r7
 8006b30:	1d39      	adds	r1, r7, #4
 8006b32:	f107 0308 	add.w	r3, r7, #8
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fb fae6 	bl	8002108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	9202      	str	r2, [sp, #8]
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	2300      	movs	r3, #0
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	460a      	mov	r2, r1
 8006b4e:	491d      	ldr	r1, [pc, #116]	; (8006bc4 <vTaskStartScheduler+0xa4>)
 8006b50:	481d      	ldr	r0, [pc, #116]	; (8006bc8 <vTaskStartScheduler+0xa8>)
 8006b52:	f7ff fe22 	bl	800679a <xTaskCreateStatic>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <vTaskStartScheduler+0xac>)
 8006b5a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b5c:	4b1b      	ldr	r3, [pc, #108]	; (8006bcc <vTaskStartScheduler+0xac>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b64:	2301      	movs	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	e001      	b.n	8006b6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d115      	bne.n	8006ba0 <vTaskStartScheduler+0x80>
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <vTaskStartScheduler+0xb0>)
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b8e:	4b11      	ldr	r3, [pc, #68]	; (8006bd4 <vTaskStartScheduler+0xb4>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b94:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <vTaskStartScheduler+0xb8>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b9a:	f000 fb99 	bl	80072d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b9e:	e00d      	b.n	8006bbc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d109      	bne.n	8006bbc <vTaskStartScheduler+0x9c>
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e7fe      	b.n	8006bba <vTaskStartScheduler+0x9a>
}
 8006bbc:	bf00      	nop
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	08009b94 	.word	0x08009b94
 8006bc8:	08006f55 	.word	0x08006f55
 8006bcc:	20000414 	.word	0x20000414
 8006bd0:	20000410 	.word	0x20000410
 8006bd4:	200003fc 	.word	0x200003fc
 8006bd8:	200003f4 	.word	0x200003f4

08006bdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006be0:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <vTaskSuspendAll+0x18>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	4a03      	ldr	r2, [pc, #12]	; (8006bf4 <vTaskSuspendAll+0x18>)
 8006be8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006bea:	bf00      	nop
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20000418 	.word	0x20000418

08006bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c06:	4b41      	ldr	r3, [pc, #260]	; (8006d0c <xTaskResumeAll+0x114>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <xTaskResumeAll+0x2a>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	e7fe      	b.n	8006c20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c22:	f000 fbf3 	bl	800740c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c26:	4b39      	ldr	r3, [pc, #228]	; (8006d0c <xTaskResumeAll+0x114>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	4a37      	ldr	r2, [pc, #220]	; (8006d0c <xTaskResumeAll+0x114>)
 8006c2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c30:	4b36      	ldr	r3, [pc, #216]	; (8006d0c <xTaskResumeAll+0x114>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d161      	bne.n	8006cfc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c38:	4b35      	ldr	r3, [pc, #212]	; (8006d10 <xTaskResumeAll+0x118>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d05d      	beq.n	8006cfc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c40:	e02e      	b.n	8006ca0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c42:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <xTaskResumeAll+0x11c>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3318      	adds	r3, #24
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fd79 	bl	8006746 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fd74 	bl	8006746 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	2201      	movs	r2, #1
 8006c64:	409a      	lsls	r2, r3
 8006c66:	4b2c      	ldr	r3, [pc, #176]	; (8006d18 <xTaskResumeAll+0x120>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <xTaskResumeAll+0x120>)
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4a27      	ldr	r2, [pc, #156]	; (8006d1c <xTaskResumeAll+0x124>)
 8006c7e:	441a      	add	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7ff fd00 	bl	800668c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	4b23      	ldr	r3, [pc, #140]	; (8006d20 <xTaskResumeAll+0x128>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d302      	bcc.n	8006ca0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006c9a:	4b22      	ldr	r3, [pc, #136]	; (8006d24 <xTaskResumeAll+0x12c>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <xTaskResumeAll+0x11c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1cc      	bne.n	8006c42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cae:	f000 fa03 	bl	80070b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cb2:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <xTaskResumeAll+0x130>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d010      	beq.n	8006ce0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cbe:	f000 f837 	bl	8006d30 <xTaskIncrementTick>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006cc8:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <xTaskResumeAll+0x12c>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f1      	bne.n	8006cbe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <xTaskResumeAll+0x130>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ce0:	4b10      	ldr	r3, [pc, #64]	; (8006d24 <xTaskResumeAll+0x12c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cec:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <xTaskResumeAll+0x134>)
 8006cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cfc:	f000 fbb4 	bl	8007468 <vPortExitCritical>

	return xAlreadyYielded;
 8006d00:	68bb      	ldr	r3, [r7, #8]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000418 	.word	0x20000418
 8006d10:	200003f0 	.word	0x200003f0
 8006d14:	200003b0 	.word	0x200003b0
 8006d18:	200003f8 	.word	0x200003f8
 8006d1c:	200002f4 	.word	0x200002f4
 8006d20:	200002f0 	.word	0x200002f0
 8006d24:	20000404 	.word	0x20000404
 8006d28:	20000400 	.word	0x20000400
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3a:	4b4e      	ldr	r3, [pc, #312]	; (8006e74 <xTaskIncrementTick+0x144>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 8087 	bne.w	8006e52 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d44:	4b4c      	ldr	r3, [pc, #304]	; (8006e78 <xTaskIncrementTick+0x148>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d4c:	4a4a      	ldr	r2, [pc, #296]	; (8006e78 <xTaskIncrementTick+0x148>)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11f      	bne.n	8006d98 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d58:	4b48      	ldr	r3, [pc, #288]	; (8006e7c <xTaskIncrementTick+0x14c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <xTaskIncrementTick+0x46>
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	e7fe      	b.n	8006d74 <xTaskIncrementTick+0x44>
 8006d76:	4b41      	ldr	r3, [pc, #260]	; (8006e7c <xTaskIncrementTick+0x14c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4b40      	ldr	r3, [pc, #256]	; (8006e80 <xTaskIncrementTick+0x150>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3e      	ldr	r2, [pc, #248]	; (8006e7c <xTaskIncrementTick+0x14c>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	4a3e      	ldr	r2, [pc, #248]	; (8006e80 <xTaskIncrementTick+0x150>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	4a3c      	ldr	r2, [pc, #240]	; (8006e84 <xTaskIncrementTick+0x154>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	f000 f990 	bl	80070b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d98:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <xTaskIncrementTick+0x158>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d348      	bcc.n	8006e34 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da2:	4b36      	ldr	r3, [pc, #216]	; (8006e7c <xTaskIncrementTick+0x14c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dac:	4b36      	ldr	r3, [pc, #216]	; (8006e88 <xTaskIncrementTick+0x158>)
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	601a      	str	r2, [r3, #0]
					break;
 8006db4:	e03e      	b.n	8006e34 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db6:	4b31      	ldr	r3, [pc, #196]	; (8006e7c <xTaskIncrementTick+0x14c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d203      	bcs.n	8006dd6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dce:	4a2e      	ldr	r2, [pc, #184]	; (8006e88 <xTaskIncrementTick+0x158>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dd4:	e02e      	b.n	8006e34 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fcb3 	bl	8006746 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	3318      	adds	r3, #24
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fcaa 	bl	8006746 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	2201      	movs	r2, #1
 8006df8:	409a      	lsls	r2, r3
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <xTaskIncrementTick+0x15c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <xTaskIncrementTick+0x15c>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <xTaskIncrementTick+0x160>)
 8006e12:	441a      	add	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	f7ff fc36 	bl	800668c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	4b1b      	ldr	r3, [pc, #108]	; (8006e94 <xTaskIncrementTick+0x164>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3b9      	bcc.n	8006da2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e32:	e7b6      	b.n	8006da2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e34:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <xTaskIncrementTick+0x164>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	4915      	ldr	r1, [pc, #84]	; (8006e90 <xTaskIncrementTick+0x160>)
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d907      	bls.n	8006e5c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e004      	b.n	8006e5c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <xTaskIncrementTick+0x168>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3301      	adds	r3, #1
 8006e58:	4a0f      	ldr	r2, [pc, #60]	; (8006e98 <xTaskIncrementTick+0x168>)
 8006e5a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <xTaskIncrementTick+0x16c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006e68:	697b      	ldr	r3, [r7, #20]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000418 	.word	0x20000418
 8006e78:	200003f4 	.word	0x200003f4
 8006e7c:	200003a8 	.word	0x200003a8
 8006e80:	200003ac 	.word	0x200003ac
 8006e84:	20000408 	.word	0x20000408
 8006e88:	20000410 	.word	0x20000410
 8006e8c:	200003f8 	.word	0x200003f8
 8006e90:	200002f4 	.word	0x200002f4
 8006e94:	200002f0 	.word	0x200002f0
 8006e98:	20000400 	.word	0x20000400
 8006e9c:	20000404 	.word	0x20000404

08006ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ea6:	4b26      	ldr	r3, [pc, #152]	; (8006f40 <vTaskSwitchContext+0xa0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eae:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <vTaskSwitchContext+0xa4>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006eb4:	e03e      	b.n	8006f34 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006eb6:	4b23      	ldr	r3, [pc, #140]	; (8006f44 <vTaskSwitchContext+0xa4>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	4b22      	ldr	r3, [pc, #136]	; (8006f48 <vTaskSwitchContext+0xa8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	fab3 f383 	clz	r3, r3
 8006ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	f1c3 031f 	rsb	r3, r3, #31
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	491e      	ldr	r1, [pc, #120]	; (8006f4c <vTaskSwitchContext+0xac>)
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <vTaskSwitchContext+0x5a>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	e7fe      	b.n	8006ef8 <vTaskSwitchContext+0x58>
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4a11      	ldr	r2, [pc, #68]	; (8006f4c <vTaskSwitchContext+0xac>)
 8006f06:	4413      	add	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	605a      	str	r2, [r3, #4]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d104      	bne.n	8006f2a <vTaskSwitchContext+0x8a>
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	4a07      	ldr	r2, [pc, #28]	; (8006f50 <vTaskSwitchContext+0xb0>)
 8006f32:	6013      	str	r3, [r2, #0]
}
 8006f34:	bf00      	nop
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000418 	.word	0x20000418
 8006f44:	20000404 	.word	0x20000404
 8006f48:	200003f8 	.word	0x200003f8
 8006f4c:	200002f4 	.word	0x200002f4
 8006f50:	200002f0 	.word	0x200002f0

08006f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f5c:	f000 f852 	bl	8007004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f60:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <prvIdleTask+0x28>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d9f9      	bls.n	8006f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <prvIdleTask+0x2c>)
 8006f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f78:	e7f0      	b.n	8006f5c <prvIdleTask+0x8>
 8006f7a:	bf00      	nop
 8006f7c:	200002f4 	.word	0x200002f4
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	607b      	str	r3, [r7, #4]
 8006f8e:	e00c      	b.n	8006faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4a12      	ldr	r2, [pc, #72]	; (8006fe4 <prvInitialiseTaskLists+0x60>)
 8006f9c:	4413      	add	r3, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fb47 	bl	8006632 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	607b      	str	r3, [r7, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b06      	cmp	r3, #6
 8006fae:	d9ef      	bls.n	8006f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fb0:	480d      	ldr	r0, [pc, #52]	; (8006fe8 <prvInitialiseTaskLists+0x64>)
 8006fb2:	f7ff fb3e 	bl	8006632 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fb6:	480d      	ldr	r0, [pc, #52]	; (8006fec <prvInitialiseTaskLists+0x68>)
 8006fb8:	f7ff fb3b 	bl	8006632 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fbc:	480c      	ldr	r0, [pc, #48]	; (8006ff0 <prvInitialiseTaskLists+0x6c>)
 8006fbe:	f7ff fb38 	bl	8006632 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fc2:	480c      	ldr	r0, [pc, #48]	; (8006ff4 <prvInitialiseTaskLists+0x70>)
 8006fc4:	f7ff fb35 	bl	8006632 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fc8:	480b      	ldr	r0, [pc, #44]	; (8006ff8 <prvInitialiseTaskLists+0x74>)
 8006fca:	f7ff fb32 	bl	8006632 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <prvInitialiseTaskLists+0x78>)
 8006fd0:	4a05      	ldr	r2, [pc, #20]	; (8006fe8 <prvInitialiseTaskLists+0x64>)
 8006fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fd4:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <prvInitialiseTaskLists+0x7c>)
 8006fd6:	4a05      	ldr	r2, [pc, #20]	; (8006fec <prvInitialiseTaskLists+0x68>)
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200002f4 	.word	0x200002f4
 8006fe8:	20000380 	.word	0x20000380
 8006fec:	20000394 	.word	0x20000394
 8006ff0:	200003b0 	.word	0x200003b0
 8006ff4:	200003c4 	.word	0x200003c4
 8006ff8:	200003dc 	.word	0x200003dc
 8006ffc:	200003a8 	.word	0x200003a8
 8007000:	200003ac 	.word	0x200003ac

08007004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800700a:	e019      	b.n	8007040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800700c:	f000 f9fe 	bl	800740c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <prvCheckTasksWaitingTermination+0x4c>)
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3304      	adds	r3, #4
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff fb92 	bl	8006746 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <prvCheckTasksWaitingTermination+0x50>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3b01      	subs	r3, #1
 8007028:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <prvCheckTasksWaitingTermination+0x50>)
 800702a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <prvCheckTasksWaitingTermination+0x54>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3b01      	subs	r3, #1
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <prvCheckTasksWaitingTermination+0x54>)
 8007034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007036:	f000 fa17 	bl	8007468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f80e 	bl	800705c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <prvCheckTasksWaitingTermination+0x54>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e1      	bne.n	800700c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	200003c4 	.word	0x200003c4
 8007054:	200003f0 	.word	0x200003f0
 8007058:	200003d8 	.word	0x200003d8

0800705c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800706a:	2b00      	cmp	r3, #0
 800706c:	d108      	bne.n	8007080 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fb68 	bl	8007748 <vPortFree>
				vPortFree( pxTCB );
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fb65 	bl	8007748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800707e:	e017      	b.n	80070b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007086:	2b01      	cmp	r3, #1
 8007088:	d103      	bne.n	8007092 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fb5c 	bl	8007748 <vPortFree>
	}
 8007090:	e00e      	b.n	80070b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007098:	2b02      	cmp	r3, #2
 800709a:	d009      	beq.n	80070b0 <prvDeleteTCB+0x54>
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e7fe      	b.n	80070ae <prvDeleteTCB+0x52>
	}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <prvResetNextTaskUnblockTime+0x38>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <prvResetNextTaskUnblockTime+0x3c>)
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295
 80070ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070d0:	e008      	b.n	80070e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d2:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <prvResetNextTaskUnblockTime+0x38>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <prvResetNextTaskUnblockTime+0x3c>)
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	200003a8 	.word	0x200003a8
 80070f4:	20000410 	.word	0x20000410

080070f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007102:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007108:	4b28      	ldr	r3, [pc, #160]	; (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fb19 	bl	8006746 <uxListRemove>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800711a:	4b24      	ldr	r3, [pc, #144]	; (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	2201      	movs	r2, #1
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	43da      	mvns	r2, r3
 8007128:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4013      	ands	r3, r2
 800712e:	4a20      	ldr	r2, [pc, #128]	; (80071b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d10a      	bne.n	8007150 <prvAddCurrentTaskToDelayedList+0x58>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007140:	4b1a      	ldr	r3, [pc, #104]	; (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	481a      	ldr	r0, [pc, #104]	; (80071b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800714a:	f7ff fa9f 	bl	800668c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800714e:	e026      	b.n	800719e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007158:	4b14      	ldr	r3, [pc, #80]	; (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	429a      	cmp	r2, r3
 8007166:	d209      	bcs.n	800717c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b0f      	ldr	r3, [pc, #60]	; (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7ff faad 	bl	80066d4 <vListInsert>
}
 800717a:	e010      	b.n	800719e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800717c:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3304      	adds	r3, #4
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f7ff faa3 	bl	80066d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800718e:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	d202      	bcs.n	800719e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	200003f4 	.word	0x200003f4
 80071ac:	200002f0 	.word	0x200002f0
 80071b0:	200003f8 	.word	0x200003f8
 80071b4:	200003dc 	.word	0x200003dc
 80071b8:	200003ac 	.word	0x200003ac
 80071bc:	200003a8 	.word	0x200003a8
 80071c0:	20000410 	.word	0x20000410

080071c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3b04      	subs	r3, #4
 80071d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3b04      	subs	r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f023 0201 	bic.w	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071f4:	4a0c      	ldr	r2, [pc, #48]	; (8007228 <pxPortInitialiseStack+0x64>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b14      	subs	r3, #20
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b04      	subs	r3, #4
 800720a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f06f 0202 	mvn.w	r2, #2
 8007212:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3b20      	subs	r3, #32
 8007218:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800721a:	68fb      	ldr	r3, [r7, #12]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	0800722d 	.word	0x0800722d

0800722c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007236:	4b11      	ldr	r3, [pc, #68]	; (800727c <prvTaskExitError+0x50>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d009      	beq.n	8007254 <prvTaskExitError+0x28>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	e7fe      	b.n	8007252 <prvTaskExitError+0x26>
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007266:	bf00      	nop
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0fc      	beq.n	8007268 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	2000000c 	.word	0x2000000c

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst2>:
 80072a0:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072a8:	4808      	ldr	r0, [pc, #32]	; (80072cc <prvPortStartFirstTask+0x24>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8814 	msr	CONTROL, r0
 80072ba:	b662      	cpsie	i
 80072bc:	b661      	cpsie	f
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	df00      	svc	0
 80072c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ca:	bf00      	nop
 80072cc:	e000ed08 	.word	0xe000ed08

080072d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072d6:	4b44      	ldr	r3, [pc, #272]	; (80073e8 <xPortStartScheduler+0x118>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a44      	ldr	r2, [pc, #272]	; (80073ec <xPortStartScheduler+0x11c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <xPortStartScheduler+0x24>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	e7fe      	b.n	80072f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072f4:	4b3c      	ldr	r3, [pc, #240]	; (80073e8 <xPortStartScheduler+0x118>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a3d      	ldr	r2, [pc, #244]	; (80073f0 <xPortStartScheduler+0x120>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d109      	bne.n	8007312 <xPortStartScheduler+0x42>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e7fe      	b.n	8007310 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007312:	4b38      	ldr	r3, [pc, #224]	; (80073f4 <xPortStartScheduler+0x124>)
 8007314:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007334:	b2da      	uxtb	r2, r3
 8007336:	4b30      	ldr	r3, [pc, #192]	; (80073f8 <xPortStartScheduler+0x128>)
 8007338:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800733a:	4b30      	ldr	r3, [pc, #192]	; (80073fc <xPortStartScheduler+0x12c>)
 800733c:	2207      	movs	r2, #7
 800733e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007340:	e009      	b.n	8007356 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007342:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <xPortStartScheduler+0x12c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3b01      	subs	r3, #1
 8007348:	4a2c      	ldr	r2, [pc, #176]	; (80073fc <xPortStartScheduler+0x12c>)
 800734a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	b2db      	uxtb	r3, r3
 8007354:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d0ef      	beq.n	8007342 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007362:	4b26      	ldr	r3, [pc, #152]	; (80073fc <xPortStartScheduler+0x12c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1c3 0307 	rsb	r3, r3, #7
 800736a:	2b04      	cmp	r3, #4
 800736c:	d009      	beq.n	8007382 <xPortStartScheduler+0xb2>
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	e7fe      	b.n	8007380 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <xPortStartScheduler+0x12c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <xPortStartScheduler+0x12c>)
 800738a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <xPortStartScheduler+0x12c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <xPortStartScheduler+0x12c>)
 8007396:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <xPortStartScheduler+0x130>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a16      	ldr	r2, [pc, #88]	; (8007400 <xPortStartScheduler+0x130>)
 80073a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <xPortStartScheduler+0x130>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <xPortStartScheduler+0x130>)
 80073b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b8:	f000 f8d6 	bl	8007568 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <xPortStartScheduler+0x134>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073c2:	f000 f8f5 	bl	80075b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <xPortStartScheduler+0x138>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a0f      	ldr	r2, [pc, #60]	; (8007408 <xPortStartScheduler+0x138>)
 80073cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073d2:	f7ff ff69 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073d6:	f7ff fd63 	bl	8006ea0 <vTaskSwitchContext>
	prvTaskExitError();
 80073da:	f7ff ff27 	bl	800722c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed00 	.word	0xe000ed00
 80073ec:	410fc271 	.word	0x410fc271
 80073f0:	410fc270 	.word	0x410fc270
 80073f4:	e000e400 	.word	0xe000e400
 80073f8:	2000041c 	.word	0x2000041c
 80073fc:	20000420 	.word	0x20000420
 8007400:	e000ed20 	.word	0xe000ed20
 8007404:	2000000c 	.word	0x2000000c
 8007408:	e000ef34 	.word	0xe000ef34

0800740c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <vPortEnterCritical+0x54>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	4a0d      	ldr	r2, [pc, #52]	; (8007460 <vPortEnterCritical+0x54>)
 800742c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <vPortEnterCritical+0x54>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10e      	bne.n	8007454 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <vPortEnterCritical+0x58>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <vPortEnterCritical+0x48>
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	e7fe      	b.n	8007452 <vPortEnterCritical+0x46>
	}
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	2000000c 	.word	0x2000000c
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <vPortExitCritical+0x4c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <vPortExitCritical+0x22>
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	607b      	str	r3, [r7, #4]
 8007488:	e7fe      	b.n	8007488 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <vPortExitCritical+0x4c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <vPortExitCritical+0x4c>)
 8007492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007494:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <vPortExitCritical+0x4c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <vPortExitCritical+0x3e>
 800749c:	2300      	movs	r3, #0
 800749e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	2000000c 	.word	0x2000000c
	...

080074c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074c0:	f3ef 8009 	mrs	r0, PSP
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <pxCurrentTCBConst>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	f01e 0f10 	tst.w	lr, #16
 80074d0:	bf08      	it	eq
 80074d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	6010      	str	r0, [r2, #0]
 80074dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074e4:	f380 8811 	msr	BASEPRI, r0
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f7ff fcd6 	bl	8006ea0 <vTaskSwitchContext>
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f380 8811 	msr	BASEPRI, r0
 80074fc:	bc09      	pop	{r0, r3}
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	6808      	ldr	r0, [r1, #0]
 8007502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	f01e 0f10 	tst.w	lr, #16
 800750a:	bf08      	it	eq
 800750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007510:	f380 8809 	msr	PSP, r0
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst>:
 8007520:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007540:	f7ff fbf6 	bl	8006d30 <xTaskIncrementTick>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <SysTick_Handler+0x3c>)
 800754c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	2300      	movs	r3, #0
 8007554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <vPortSetupTimerInterrupt+0x34>)
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <vPortSetupTimerInterrupt+0x38>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <vPortSetupTimerInterrupt+0x3c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <vPortSetupTimerInterrupt+0x40>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	099b      	lsrs	r3, r3, #6
 8007584:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vPortSetupTimerInterrupt+0x44>)
 8007586:	3b01      	subs	r3, #1
 8007588:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <vPortSetupTimerInterrupt+0x34>)
 800758c:	2207      	movs	r2, #7
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	e000e010 	.word	0xe000e010
 80075a0:	e000e018 	.word	0xe000e018
 80075a4:	20000000 	.word	0x20000000
 80075a8:	10624dd3 	.word	0x10624dd3
 80075ac:	e000e014 	.word	0xe000e014

080075b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075c0 <vPortEnableVFP+0x10>
 80075b4:	6801      	ldr	r1, [r0, #0]
 80075b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ba:	6001      	str	r1, [r0, #0]
 80075bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075be:	bf00      	nop
 80075c0:	e000ed88 	.word	0xe000ed88

080075c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	; 0x28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075d0:	f7ff fb04 	bl	8006bdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075d4:	4b57      	ldr	r3, [pc, #348]	; (8007734 <pvPortMalloc+0x170>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075dc:	f000 f90c 	bl	80077f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075e0:	4b55      	ldr	r3, [pc, #340]	; (8007738 <pvPortMalloc+0x174>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 808c 	bne.w	8007706 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01c      	beq.n	800762e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80075f4:	2208      	movs	r2, #8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b00      	cmp	r3, #0
 8007604:	d013      	beq.n	800762e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f023 0307 	bic.w	r3, r3, #7
 800760c:	3308      	adds	r3, #8
 800760e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <pvPortMalloc+0x6a>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e7fe      	b.n	800762c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d068      	beq.n	8007706 <pvPortMalloc+0x142>
 8007634:	4b41      	ldr	r3, [pc, #260]	; (800773c <pvPortMalloc+0x178>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	429a      	cmp	r2, r3
 800763c:	d863      	bhi.n	8007706 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800763e:	4b40      	ldr	r3, [pc, #256]	; (8007740 <pvPortMalloc+0x17c>)
 8007640:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007642:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <pvPortMalloc+0x17c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007648:	e004      	b.n	8007654 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d903      	bls.n	8007666 <pvPortMalloc+0xa2>
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f1      	bne.n	800764a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007666:	4b33      	ldr	r3, [pc, #204]	; (8007734 <pvPortMalloc+0x170>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766c:	429a      	cmp	r2, r3
 800766e:	d04a      	beq.n	8007706 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	4413      	add	r3, r2
 8007678:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	1ad2      	subs	r2, r2, r3
 800768a:	2308      	movs	r3, #8
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	429a      	cmp	r2, r3
 8007690:	d91e      	bls.n	80076d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4413      	add	r3, r2
 8007698:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d009      	beq.n	80076b8 <pvPortMalloc+0xf4>
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	e7fe      	b.n	80076b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	1ad2      	subs	r2, r2, r3
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076ca:	69b8      	ldr	r0, [r7, #24]
 80076cc:	f000 f8f6 	bl	80078bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <pvPortMalloc+0x178>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <pvPortMalloc+0x178>)
 80076dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076de:	4b17      	ldr	r3, [pc, #92]	; (800773c <pvPortMalloc+0x178>)
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b18      	ldr	r3, [pc, #96]	; (8007744 <pvPortMalloc+0x180>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d203      	bcs.n	80076f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <pvPortMalloc+0x178>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a15      	ldr	r2, [pc, #84]	; (8007744 <pvPortMalloc+0x180>)
 80076f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	4b10      	ldr	r3, [pc, #64]	; (8007738 <pvPortMalloc+0x174>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007706:	f7ff fa77 	bl	8006bf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	2b00      	cmp	r3, #0
 8007712:	d009      	beq.n	8007728 <pvPortMalloc+0x164>
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	60fb      	str	r3, [r7, #12]
 8007726:	e7fe      	b.n	8007726 <pvPortMalloc+0x162>
	return pvReturn;
 8007728:	69fb      	ldr	r3, [r7, #28]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3728      	adds	r7, #40	; 0x28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2000402c 	.word	0x2000402c
 8007738:	20004038 	.word	0x20004038
 800773c:	20004030 	.word	0x20004030
 8007740:	20004024 	.word	0x20004024
 8007744:	20004034 	.word	0x20004034

08007748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d046      	beq.n	80077e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800775a:	2308      	movs	r3, #8
 800775c:	425b      	negs	r3, r3
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4b20      	ldr	r3, [pc, #128]	; (80077f0 <vPortFree+0xa8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4013      	ands	r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <vPortFree+0x42>
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e7fe      	b.n	8007788 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <vPortFree+0x5e>
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	e7fe      	b.n	80077a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <vPortFree+0xa8>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d019      	beq.n	80077e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d115      	bne.n	80077e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <vPortFree+0xa8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	43db      	mvns	r3, r3
 80077c6:	401a      	ands	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077cc:	f7ff fa06 	bl	8006bdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <vPortFree+0xac>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4413      	add	r3, r2
 80077da:	4a06      	ldr	r2, [pc, #24]	; (80077f4 <vPortFree+0xac>)
 80077dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077de:	6938      	ldr	r0, [r7, #16]
 80077e0:	f000 f86c 	bl	80078bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80077e4:	f7ff fa08 	bl	8006bf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077e8:	bf00      	nop
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20004038 	.word	0x20004038
 80077f4:	20004030 	.word	0x20004030

080077f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007802:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007804:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <prvHeapInit+0xac>)
 8007806:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00c      	beq.n	800782c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3307      	adds	r3, #7
 8007816:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0307 	bic.w	r3, r3, #7
 800781e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <prvHeapInit+0xac>)
 8007828:	4413      	add	r3, r2
 800782a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007830:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <prvHeapInit+0xb0>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007836:	4b1c      	ldr	r3, [pc, #112]	; (80078a8 <prvHeapInit+0xb0>)
 8007838:	2200      	movs	r2, #0
 800783a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007844:	2208      	movs	r2, #8
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0307 	bic.w	r3, r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <prvHeapInit+0xb4>)
 8007858:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <prvHeapInit+0xb4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2200      	movs	r2, #0
 8007860:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007862:	4b12      	ldr	r3, [pc, #72]	; (80078ac <prvHeapInit+0xb4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007878:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <prvHeapInit+0xb4>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4a0a      	ldr	r2, [pc, #40]	; (80078b0 <prvHeapInit+0xb8>)
 8007886:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <prvHeapInit+0xbc>)
 800788e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <prvHeapInit+0xc0>)
 8007892:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007896:	601a      	str	r2, [r3, #0]
}
 8007898:	bf00      	nop
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	20000424 	.word	0x20000424
 80078a8:	20004024 	.word	0x20004024
 80078ac:	2000402c 	.word	0x2000402c
 80078b0:	20004034 	.word	0x20004034
 80078b4:	20004030 	.word	0x20004030
 80078b8:	20004038 	.word	0x20004038

080078bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078c4:	4b28      	ldr	r3, [pc, #160]	; (8007968 <prvInsertBlockIntoFreeList+0xac>)
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e002      	b.n	80078d0 <prvInsertBlockIntoFreeList+0x14>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d8f7      	bhi.n	80078ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	4413      	add	r3, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d108      	bne.n	80078fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	441a      	add	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d118      	bne.n	8007944 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b15      	ldr	r3, [pc, #84]	; (800796c <prvInsertBlockIntoFreeList+0xb0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d00d      	beq.n	800793a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	441a      	add	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e008      	b.n	800794c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <prvInsertBlockIntoFreeList+0xb0>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e003      	b.n	800794c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	429a      	cmp	r2, r3
 8007952:	d002      	beq.n	800795a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	20004024 	.word	0x20004024
 800796c:	2000402c 	.word	0x2000402c

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	; (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000010 	.word	0x20000010

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4e0d      	ldr	r6, [pc, #52]	; (80079b4 <__libc_init_array+0x38>)
 8007980:	4c0d      	ldr	r4, [pc, #52]	; (80079b8 <__libc_init_array+0x3c>)
 8007982:	1ba4      	subs	r4, r4, r6
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	2500      	movs	r5, #0
 8007988:	42a5      	cmp	r5, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	4e0b      	ldr	r6, [pc, #44]	; (80079bc <__libc_init_array+0x40>)
 800798e:	4c0c      	ldr	r4, [pc, #48]	; (80079c0 <__libc_init_array+0x44>)
 8007990:	f002 f808 	bl	80099a4 <_init>
 8007994:	1ba4      	subs	r4, r4, r6
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	2500      	movs	r5, #0
 800799a:	42a5      	cmp	r5, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079a4:	4798      	blx	r3
 80079a6:	3501      	adds	r5, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80079ae:	4798      	blx	r3
 80079b0:	3501      	adds	r5, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	08009c98 	.word	0x08009c98
 80079b8:	08009c98 	.word	0x08009c98
 80079bc:	08009c98 	.word	0x08009c98
 80079c0:	08009c9c 	.word	0x08009c9c

080079c4 <memset>:
 80079c4:	4402      	add	r2, r0
 80079c6:	4603      	mov	r3, r0
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d100      	bne.n	80079ce <memset+0xa>
 80079cc:	4770      	bx	lr
 80079ce:	f803 1b01 	strb.w	r1, [r3], #1
 80079d2:	e7f9      	b.n	80079c8 <memset+0x4>

080079d4 <iprintf>:
 80079d4:	b40f      	push	{r0, r1, r2, r3}
 80079d6:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <iprintf+0x2c>)
 80079d8:	b513      	push	{r0, r1, r4, lr}
 80079da:	681c      	ldr	r4, [r3, #0]
 80079dc:	b124      	cbz	r4, 80079e8 <iprintf+0x14>
 80079de:	69a3      	ldr	r3, [r4, #24]
 80079e0:	b913      	cbnz	r3, 80079e8 <iprintf+0x14>
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fa22 	bl	8007e2c <__sinit>
 80079e8:	ab05      	add	r3, sp, #20
 80079ea:	9a04      	ldr	r2, [sp, #16]
 80079ec:	68a1      	ldr	r1, [r4, #8]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fbdb 	bl	80081ac <_vfiprintf_r>
 80079f6:	b002      	add	sp, #8
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fc:	b004      	add	sp, #16
 80079fe:	4770      	bx	lr
 8007a00:	20000010 	.word	0x20000010

08007a04 <_puts_r>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	460e      	mov	r6, r1
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b118      	cbz	r0, 8007a14 <_puts_r+0x10>
 8007a0c:	6983      	ldr	r3, [r0, #24]
 8007a0e:	b90b      	cbnz	r3, 8007a14 <_puts_r+0x10>
 8007a10:	f000 fa0c 	bl	8007e2c <__sinit>
 8007a14:	69ab      	ldr	r3, [r5, #24]
 8007a16:	68ac      	ldr	r4, [r5, #8]
 8007a18:	b913      	cbnz	r3, 8007a20 <_puts_r+0x1c>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 fa06 	bl	8007e2c <__sinit>
 8007a20:	4b23      	ldr	r3, [pc, #140]	; (8007ab0 <_puts_r+0xac>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d117      	bne.n	8007a56 <_puts_r+0x52>
 8007a26:	686c      	ldr	r4, [r5, #4]
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	071b      	lsls	r3, r3, #28
 8007a2c:	d51d      	bpl.n	8007a6a <_puts_r+0x66>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	b1db      	cbz	r3, 8007a6a <_puts_r+0x66>
 8007a32:	3e01      	subs	r6, #1
 8007a34:	68a3      	ldr	r3, [r4, #8]
 8007a36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	b9e9      	cbnz	r1, 8007a7c <_puts_r+0x78>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	da2e      	bge.n	8007aa2 <_puts_r+0x9e>
 8007a44:	4622      	mov	r2, r4
 8007a46:	210a      	movs	r1, #10
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f000 f83f 	bl	8007acc <__swbuf_r>
 8007a4e:	3001      	adds	r0, #1
 8007a50:	d011      	beq.n	8007a76 <_puts_r+0x72>
 8007a52:	200a      	movs	r0, #10
 8007a54:	e011      	b.n	8007a7a <_puts_r+0x76>
 8007a56:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <_puts_r+0xb0>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	d101      	bne.n	8007a60 <_puts_r+0x5c>
 8007a5c:	68ac      	ldr	r4, [r5, #8]
 8007a5e:	e7e3      	b.n	8007a28 <_puts_r+0x24>
 8007a60:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <_puts_r+0xb4>)
 8007a62:	429c      	cmp	r4, r3
 8007a64:	bf08      	it	eq
 8007a66:	68ec      	ldreq	r4, [r5, #12]
 8007a68:	e7de      	b.n	8007a28 <_puts_r+0x24>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f87f 	bl	8007b70 <__swsetup_r>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d0dd      	beq.n	8007a32 <_puts_r+0x2e>
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	da04      	bge.n	8007a8a <_puts_r+0x86>
 8007a80:	69a2      	ldr	r2, [r4, #24]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	dc06      	bgt.n	8007a94 <_puts_r+0x90>
 8007a86:	290a      	cmp	r1, #10
 8007a88:	d004      	beq.n	8007a94 <_puts_r+0x90>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	7019      	strb	r1, [r3, #0]
 8007a92:	e7cf      	b.n	8007a34 <_puts_r+0x30>
 8007a94:	4622      	mov	r2, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 f818 	bl	8007acc <__swbuf_r>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d1c9      	bne.n	8007a34 <_puts_r+0x30>
 8007aa0:	e7e9      	b.n	8007a76 <_puts_r+0x72>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	200a      	movs	r0, #10
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	6022      	str	r2, [r4, #0]
 8007aaa:	7018      	strb	r0, [r3, #0]
 8007aac:	e7e5      	b.n	8007a7a <_puts_r+0x76>
 8007aae:	bf00      	nop
 8007ab0:	08009bd8 	.word	0x08009bd8
 8007ab4:	08009bf8 	.word	0x08009bf8
 8007ab8:	08009bb8 	.word	0x08009bb8

08007abc <puts>:
 8007abc:	4b02      	ldr	r3, [pc, #8]	; (8007ac8 <puts+0xc>)
 8007abe:	4601      	mov	r1, r0
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f7ff bf9f 	b.w	8007a04 <_puts_r>
 8007ac6:	bf00      	nop
 8007ac8:	20000010 	.word	0x20000010

08007acc <__swbuf_r>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	460e      	mov	r6, r1
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	b118      	cbz	r0, 8007ade <__swbuf_r+0x12>
 8007ad6:	6983      	ldr	r3, [r0, #24]
 8007ad8:	b90b      	cbnz	r3, 8007ade <__swbuf_r+0x12>
 8007ada:	f000 f9a7 	bl	8007e2c <__sinit>
 8007ade:	4b21      	ldr	r3, [pc, #132]	; (8007b64 <__swbuf_r+0x98>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	d12a      	bne.n	8007b3a <__swbuf_r+0x6e>
 8007ae4:	686c      	ldr	r4, [r5, #4]
 8007ae6:	69a3      	ldr	r3, [r4, #24]
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	071a      	lsls	r2, r3, #28
 8007aee:	d52e      	bpl.n	8007b4e <__swbuf_r+0x82>
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	b363      	cbz	r3, 8007b4e <__swbuf_r+0x82>
 8007af4:	6923      	ldr	r3, [r4, #16]
 8007af6:	6820      	ldr	r0, [r4, #0]
 8007af8:	1ac0      	subs	r0, r0, r3
 8007afa:	6963      	ldr	r3, [r4, #20]
 8007afc:	b2f6      	uxtb	r6, r6
 8007afe:	4283      	cmp	r3, r0
 8007b00:	4637      	mov	r7, r6
 8007b02:	dc04      	bgt.n	8007b0e <__swbuf_r+0x42>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 f926 	bl	8007d58 <_fflush_r>
 8007b0c:	bb28      	cbnz	r0, 8007b5a <__swbuf_r+0x8e>
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	60a3      	str	r3, [r4, #8]
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	701e      	strb	r6, [r3, #0]
 8007b1c:	6963      	ldr	r3, [r4, #20]
 8007b1e:	3001      	adds	r0, #1
 8007b20:	4283      	cmp	r3, r0
 8007b22:	d004      	beq.n	8007b2e <__swbuf_r+0x62>
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	07db      	lsls	r3, r3, #31
 8007b28:	d519      	bpl.n	8007b5e <__swbuf_r+0x92>
 8007b2a:	2e0a      	cmp	r6, #10
 8007b2c:	d117      	bne.n	8007b5e <__swbuf_r+0x92>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4628      	mov	r0, r5
 8007b32:	f000 f911 	bl	8007d58 <_fflush_r>
 8007b36:	b190      	cbz	r0, 8007b5e <__swbuf_r+0x92>
 8007b38:	e00f      	b.n	8007b5a <__swbuf_r+0x8e>
 8007b3a:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <__swbuf_r+0x9c>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	d101      	bne.n	8007b44 <__swbuf_r+0x78>
 8007b40:	68ac      	ldr	r4, [r5, #8]
 8007b42:	e7d0      	b.n	8007ae6 <__swbuf_r+0x1a>
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <__swbuf_r+0xa0>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	bf08      	it	eq
 8007b4a:	68ec      	ldreq	r4, [r5, #12]
 8007b4c:	e7cb      	b.n	8007ae6 <__swbuf_r+0x1a>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4628      	mov	r0, r5
 8007b52:	f000 f80d 	bl	8007b70 <__swsetup_r>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d0cc      	beq.n	8007af4 <__swbuf_r+0x28>
 8007b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007b5e:	4638      	mov	r0, r7
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b62:	bf00      	nop
 8007b64:	08009bd8 	.word	0x08009bd8
 8007b68:	08009bf8 	.word	0x08009bf8
 8007b6c:	08009bb8 	.word	0x08009bb8

08007b70 <__swsetup_r>:
 8007b70:	4b32      	ldr	r3, [pc, #200]	; (8007c3c <__swsetup_r+0xcc>)
 8007b72:	b570      	push	{r4, r5, r6, lr}
 8007b74:	681d      	ldr	r5, [r3, #0]
 8007b76:	4606      	mov	r6, r0
 8007b78:	460c      	mov	r4, r1
 8007b7a:	b125      	cbz	r5, 8007b86 <__swsetup_r+0x16>
 8007b7c:	69ab      	ldr	r3, [r5, #24]
 8007b7e:	b913      	cbnz	r3, 8007b86 <__swsetup_r+0x16>
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 f953 	bl	8007e2c <__sinit>
 8007b86:	4b2e      	ldr	r3, [pc, #184]	; (8007c40 <__swsetup_r+0xd0>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d10f      	bne.n	8007bac <__swsetup_r+0x3c>
 8007b8c:	686c      	ldr	r4, [r5, #4]
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	0715      	lsls	r5, r2, #28
 8007b96:	d42c      	bmi.n	8007bf2 <__swsetup_r+0x82>
 8007b98:	06d0      	lsls	r0, r2, #27
 8007b9a:	d411      	bmi.n	8007bc0 <__swsetup_r+0x50>
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	6032      	str	r2, [r6, #0]
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	e03e      	b.n	8007c2a <__swsetup_r+0xba>
 8007bac:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <__swsetup_r+0xd4>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d101      	bne.n	8007bb6 <__swsetup_r+0x46>
 8007bb2:	68ac      	ldr	r4, [r5, #8]
 8007bb4:	e7eb      	b.n	8007b8e <__swsetup_r+0x1e>
 8007bb6:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <__swsetup_r+0xd8>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	bf08      	it	eq
 8007bbc:	68ec      	ldreq	r4, [r5, #12]
 8007bbe:	e7e6      	b.n	8007b8e <__swsetup_r+0x1e>
 8007bc0:	0751      	lsls	r1, r2, #29
 8007bc2:	d512      	bpl.n	8007bea <__swsetup_r+0x7a>
 8007bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc6:	b141      	cbz	r1, 8007bda <__swsetup_r+0x6a>
 8007bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	d002      	beq.n	8007bd6 <__swsetup_r+0x66>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 fa19 	bl	8008008 <_free_r>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	2300      	movs	r3, #0
 8007be4:	6063      	str	r3, [r4, #4]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f043 0308 	orr.w	r3, r3, #8
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	b94b      	cbnz	r3, 8007c0a <__swsetup_r+0x9a>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c00:	d003      	beq.n	8007c0a <__swsetup_r+0x9a>
 8007c02:	4621      	mov	r1, r4
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 f9bf 	bl	8007f88 <__smakebuf_r>
 8007c0a:	89a2      	ldrh	r2, [r4, #12]
 8007c0c:	f012 0301 	ands.w	r3, r2, #1
 8007c10:	d00c      	beq.n	8007c2c <__swsetup_r+0xbc>
 8007c12:	2300      	movs	r3, #0
 8007c14:	60a3      	str	r3, [r4, #8]
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	425b      	negs	r3, r3
 8007c1a:	61a3      	str	r3, [r4, #24]
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	b953      	cbnz	r3, 8007c36 <__swsetup_r+0xc6>
 8007c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c28:	d1ba      	bne.n	8007ba0 <__swsetup_r+0x30>
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	0792      	lsls	r2, r2, #30
 8007c2e:	bf58      	it	pl
 8007c30:	6963      	ldrpl	r3, [r4, #20]
 8007c32:	60a3      	str	r3, [r4, #8]
 8007c34:	e7f2      	b.n	8007c1c <__swsetup_r+0xac>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e7f7      	b.n	8007c2a <__swsetup_r+0xba>
 8007c3a:	bf00      	nop
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	08009bd8 	.word	0x08009bd8
 8007c44:	08009bf8 	.word	0x08009bf8
 8007c48:	08009bb8 	.word	0x08009bb8

08007c4c <__sflush_r>:
 8007c4c:	898a      	ldrh	r2, [r1, #12]
 8007c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c52:	4605      	mov	r5, r0
 8007c54:	0710      	lsls	r0, r2, #28
 8007c56:	460c      	mov	r4, r1
 8007c58:	d458      	bmi.n	8007d0c <__sflush_r+0xc0>
 8007c5a:	684b      	ldr	r3, [r1, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	dc05      	bgt.n	8007c6c <__sflush_r+0x20>
 8007c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	dc02      	bgt.n	8007c6c <__sflush_r+0x20>
 8007c66:	2000      	movs	r0, #0
 8007c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	d0f9      	beq.n	8007c66 <__sflush_r+0x1a>
 8007c72:	2300      	movs	r3, #0
 8007c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c78:	682f      	ldr	r7, [r5, #0]
 8007c7a:	6a21      	ldr	r1, [r4, #32]
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	d032      	beq.n	8007ce6 <__sflush_r+0x9a>
 8007c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	075a      	lsls	r2, r3, #29
 8007c86:	d505      	bpl.n	8007c94 <__sflush_r+0x48>
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	1ac0      	subs	r0, r0, r3
 8007c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c8e:	b10b      	cbz	r3, 8007c94 <__sflush_r+0x48>
 8007c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c92:	1ac0      	subs	r0, r0, r3
 8007c94:	2300      	movs	r3, #0
 8007c96:	4602      	mov	r2, r0
 8007c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c9a:	6a21      	ldr	r1, [r4, #32]
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b0      	blx	r6
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	d106      	bne.n	8007cb4 <__sflush_r+0x68>
 8007ca6:	6829      	ldr	r1, [r5, #0]
 8007ca8:	291d      	cmp	r1, #29
 8007caa:	d848      	bhi.n	8007d3e <__sflush_r+0xf2>
 8007cac:	4a29      	ldr	r2, [pc, #164]	; (8007d54 <__sflush_r+0x108>)
 8007cae:	40ca      	lsrs	r2, r1
 8007cb0:	07d6      	lsls	r6, r2, #31
 8007cb2:	d544      	bpl.n	8007d3e <__sflush_r+0xf2>
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6062      	str	r2, [r4, #4]
 8007cb8:	04d9      	lsls	r1, r3, #19
 8007cba:	6922      	ldr	r2, [r4, #16]
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	d504      	bpl.n	8007cca <__sflush_r+0x7e>
 8007cc0:	1c42      	adds	r2, r0, #1
 8007cc2:	d101      	bne.n	8007cc8 <__sflush_r+0x7c>
 8007cc4:	682b      	ldr	r3, [r5, #0]
 8007cc6:	b903      	cbnz	r3, 8007cca <__sflush_r+0x7e>
 8007cc8:	6560      	str	r0, [r4, #84]	; 0x54
 8007cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ccc:	602f      	str	r7, [r5, #0]
 8007cce:	2900      	cmp	r1, #0
 8007cd0:	d0c9      	beq.n	8007c66 <__sflush_r+0x1a>
 8007cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	d002      	beq.n	8007ce0 <__sflush_r+0x94>
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 f994 	bl	8008008 <_free_r>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	6360      	str	r0, [r4, #52]	; 0x34
 8007ce4:	e7c0      	b.n	8007c68 <__sflush_r+0x1c>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b0      	blx	r6
 8007cec:	1c41      	adds	r1, r0, #1
 8007cee:	d1c8      	bne.n	8007c82 <__sflush_r+0x36>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0c5      	beq.n	8007c82 <__sflush_r+0x36>
 8007cf6:	2b1d      	cmp	r3, #29
 8007cf8:	d001      	beq.n	8007cfe <__sflush_r+0xb2>
 8007cfa:	2b16      	cmp	r3, #22
 8007cfc:	d101      	bne.n	8007d02 <__sflush_r+0xb6>
 8007cfe:	602f      	str	r7, [r5, #0]
 8007d00:	e7b1      	b.n	8007c66 <__sflush_r+0x1a>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	e7ad      	b.n	8007c68 <__sflush_r+0x1c>
 8007d0c:	690f      	ldr	r7, [r1, #16]
 8007d0e:	2f00      	cmp	r7, #0
 8007d10:	d0a9      	beq.n	8007c66 <__sflush_r+0x1a>
 8007d12:	0793      	lsls	r3, r2, #30
 8007d14:	680e      	ldr	r6, [r1, #0]
 8007d16:	bf08      	it	eq
 8007d18:	694b      	ldreq	r3, [r1, #20]
 8007d1a:	600f      	str	r7, [r1, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	2300      	movne	r3, #0
 8007d20:	eba6 0807 	sub.w	r8, r6, r7
 8007d24:	608b      	str	r3, [r1, #8]
 8007d26:	f1b8 0f00 	cmp.w	r8, #0
 8007d2a:	dd9c      	ble.n	8007c66 <__sflush_r+0x1a>
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	463a      	mov	r2, r7
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	dc06      	bgt.n	8007d4a <__sflush_r+0xfe>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e78e      	b.n	8007c68 <__sflush_r+0x1c>
 8007d4a:	4407      	add	r7, r0
 8007d4c:	eba8 0800 	sub.w	r8, r8, r0
 8007d50:	e7e9      	b.n	8007d26 <__sflush_r+0xda>
 8007d52:	bf00      	nop
 8007d54:	20400001 	.word	0x20400001

08007d58 <_fflush_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	690b      	ldr	r3, [r1, #16]
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	b1db      	cbz	r3, 8007d9a <_fflush_r+0x42>
 8007d62:	b118      	cbz	r0, 8007d6c <_fflush_r+0x14>
 8007d64:	6983      	ldr	r3, [r0, #24]
 8007d66:	b90b      	cbnz	r3, 8007d6c <_fflush_r+0x14>
 8007d68:	f000 f860 	bl	8007e2c <__sinit>
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <_fflush_r+0x48>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d109      	bne.n	8007d86 <_fflush_r+0x2e>
 8007d72:	686c      	ldr	r4, [r5, #4]
 8007d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d78:	b17b      	cbz	r3, 8007d9a <_fflush_r+0x42>
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d82:	f7ff bf63 	b.w	8007c4c <__sflush_r>
 8007d86:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <_fflush_r+0x4c>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d101      	bne.n	8007d90 <_fflush_r+0x38>
 8007d8c:	68ac      	ldr	r4, [r5, #8]
 8007d8e:	e7f1      	b.n	8007d74 <_fflush_r+0x1c>
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <_fflush_r+0x50>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	bf08      	it	eq
 8007d96:	68ec      	ldreq	r4, [r5, #12]
 8007d98:	e7ec      	b.n	8007d74 <_fflush_r+0x1c>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	bd38      	pop	{r3, r4, r5, pc}
 8007d9e:	bf00      	nop
 8007da0:	08009bd8 	.word	0x08009bd8
 8007da4:	08009bf8 	.word	0x08009bf8
 8007da8:	08009bb8 	.word	0x08009bb8

08007dac <std>:
 8007dac:	2300      	movs	r3, #0
 8007dae:	b510      	push	{r4, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	e9c0 3300 	strd	r3, r3, [r0]
 8007db6:	6083      	str	r3, [r0, #8]
 8007db8:	8181      	strh	r1, [r0, #12]
 8007dba:	6643      	str	r3, [r0, #100]	; 0x64
 8007dbc:	81c2      	strh	r2, [r0, #14]
 8007dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dc2:	6183      	str	r3, [r0, #24]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	305c      	adds	r0, #92	; 0x5c
 8007dca:	f7ff fdfb 	bl	80079c4 <memset>
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x38>)
 8007dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x3c>)
 8007dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x40>)
 8007dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <std+0x44>)
 8007ddc:	6224      	str	r4, [r4, #32]
 8007dde:	6323      	str	r3, [r4, #48]	; 0x30
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	08008709 	.word	0x08008709
 8007de8:	0800872b 	.word	0x0800872b
 8007dec:	08008763 	.word	0x08008763
 8007df0:	08008787 	.word	0x08008787

08007df4 <_cleanup_r>:
 8007df4:	4901      	ldr	r1, [pc, #4]	; (8007dfc <_cleanup_r+0x8>)
 8007df6:	f000 b885 	b.w	8007f04 <_fwalk_reent>
 8007dfa:	bf00      	nop
 8007dfc:	08007d59 	.word	0x08007d59

08007e00 <__sfmoreglue>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	1e4a      	subs	r2, r1, #1
 8007e04:	2568      	movs	r5, #104	; 0x68
 8007e06:	4355      	muls	r5, r2
 8007e08:	460e      	mov	r6, r1
 8007e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0e:	f000 f949 	bl	80080a4 <_malloc_r>
 8007e12:	4604      	mov	r4, r0
 8007e14:	b140      	cbz	r0, 8007e28 <__sfmoreglue+0x28>
 8007e16:	2100      	movs	r1, #0
 8007e18:	e9c0 1600 	strd	r1, r6, [r0]
 8007e1c:	300c      	adds	r0, #12
 8007e1e:	60a0      	str	r0, [r4, #8]
 8007e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e24:	f7ff fdce 	bl	80079c4 <memset>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}

08007e2c <__sinit>:
 8007e2c:	6983      	ldr	r3, [r0, #24]
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	bb33      	cbnz	r3, 8007e82 <__sinit+0x56>
 8007e34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007e38:	6503      	str	r3, [r0, #80]	; 0x50
 8007e3a:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <__sinit+0x58>)
 8007e3c:	4a12      	ldr	r2, [pc, #72]	; (8007e88 <__sinit+0x5c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6282      	str	r2, [r0, #40]	; 0x28
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bf04      	itt	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	6183      	streq	r3, [r0, #24]
 8007e4a:	f000 f81f 	bl	8007e8c <__sfp>
 8007e4e:	6060      	str	r0, [r4, #4]
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 f81b 	bl	8007e8c <__sfp>
 8007e56:	60a0      	str	r0, [r4, #8]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 f817 	bl	8007e8c <__sfp>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	60e0      	str	r0, [r4, #12]
 8007e62:	2104      	movs	r1, #4
 8007e64:	6860      	ldr	r0, [r4, #4]
 8007e66:	f7ff ffa1 	bl	8007dac <std>
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	2109      	movs	r1, #9
 8007e6e:	68a0      	ldr	r0, [r4, #8]
 8007e70:	f7ff ff9c 	bl	8007dac <std>
 8007e74:	2202      	movs	r2, #2
 8007e76:	2112      	movs	r1, #18
 8007e78:	68e0      	ldr	r0, [r4, #12]
 8007e7a:	f7ff ff97 	bl	8007dac <std>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	61a3      	str	r3, [r4, #24]
 8007e82:	bd10      	pop	{r4, pc}
 8007e84:	08009bb4 	.word	0x08009bb4
 8007e88:	08007df5 	.word	0x08007df5

08007e8c <__sfp>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <__sfp+0x70>)
 8007e90:	681e      	ldr	r6, [r3, #0]
 8007e92:	69b3      	ldr	r3, [r6, #24]
 8007e94:	4607      	mov	r7, r0
 8007e96:	b913      	cbnz	r3, 8007e9e <__sfp+0x12>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff ffc7 	bl	8007e2c <__sinit>
 8007e9e:	3648      	adds	r6, #72	; 0x48
 8007ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	d503      	bpl.n	8007eb0 <__sfp+0x24>
 8007ea8:	6833      	ldr	r3, [r6, #0]
 8007eaa:	b133      	cbz	r3, 8007eba <__sfp+0x2e>
 8007eac:	6836      	ldr	r6, [r6, #0]
 8007eae:	e7f7      	b.n	8007ea0 <__sfp+0x14>
 8007eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eb4:	b16d      	cbz	r5, 8007ed2 <__sfp+0x46>
 8007eb6:	3468      	adds	r4, #104	; 0x68
 8007eb8:	e7f4      	b.n	8007ea4 <__sfp+0x18>
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	f7ff ff9f 	bl	8007e00 <__sfmoreglue>
 8007ec2:	6030      	str	r0, [r6, #0]
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d1f1      	bne.n	8007eac <__sfp+0x20>
 8007ec8:	230c      	movs	r3, #12
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4604      	mov	r4, r0
 8007ece:	4620      	mov	r0, r4
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed2:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <__sfp+0x74>)
 8007ed4:	6665      	str	r5, [r4, #100]	; 0x64
 8007ed6:	e9c4 5500 	strd	r5, r5, [r4]
 8007eda:	60a5      	str	r5, [r4, #8]
 8007edc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007ee0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007ee4:	2208      	movs	r2, #8
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007eec:	f7ff fd6a 	bl	80079c4 <memset>
 8007ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ef8:	e7e9      	b.n	8007ece <__sfp+0x42>
 8007efa:	bf00      	nop
 8007efc:	08009bb4 	.word	0x08009bb4
 8007f00:	ffff0001 	.word	0xffff0001

08007f04 <_fwalk_reent>:
 8007f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f08:	4680      	mov	r8, r0
 8007f0a:	4689      	mov	r9, r1
 8007f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f10:	2600      	movs	r6, #0
 8007f12:	b914      	cbnz	r4, 8007f1a <_fwalk_reent+0x16>
 8007f14:	4630      	mov	r0, r6
 8007f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007f1e:	3f01      	subs	r7, #1
 8007f20:	d501      	bpl.n	8007f26 <_fwalk_reent+0x22>
 8007f22:	6824      	ldr	r4, [r4, #0]
 8007f24:	e7f5      	b.n	8007f12 <_fwalk_reent+0xe>
 8007f26:	89ab      	ldrh	r3, [r5, #12]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d907      	bls.n	8007f3c <_fwalk_reent+0x38>
 8007f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f30:	3301      	adds	r3, #1
 8007f32:	d003      	beq.n	8007f3c <_fwalk_reent+0x38>
 8007f34:	4629      	mov	r1, r5
 8007f36:	4640      	mov	r0, r8
 8007f38:	47c8      	blx	r9
 8007f3a:	4306      	orrs	r6, r0
 8007f3c:	3568      	adds	r5, #104	; 0x68
 8007f3e:	e7ee      	b.n	8007f1e <_fwalk_reent+0x1a>

08007f40 <__swhatbuf_r>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	460e      	mov	r6, r1
 8007f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f48:	2900      	cmp	r1, #0
 8007f4a:	b096      	sub	sp, #88	; 0x58
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	461d      	mov	r5, r3
 8007f50:	da07      	bge.n	8007f62 <__swhatbuf_r+0x22>
 8007f52:	2300      	movs	r3, #0
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	89b3      	ldrh	r3, [r6, #12]
 8007f58:	061a      	lsls	r2, r3, #24
 8007f5a:	d410      	bmi.n	8007f7e <__swhatbuf_r+0x3e>
 8007f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f60:	e00e      	b.n	8007f80 <__swhatbuf_r+0x40>
 8007f62:	466a      	mov	r2, sp
 8007f64:	f000 fc36 	bl	80087d4 <_fstat_r>
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	dbf2      	blt.n	8007f52 <__swhatbuf_r+0x12>
 8007f6c:	9a01      	ldr	r2, [sp, #4]
 8007f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f76:	425a      	negs	r2, r3
 8007f78:	415a      	adcs	r2, r3
 8007f7a:	602a      	str	r2, [r5, #0]
 8007f7c:	e7ee      	b.n	8007f5c <__swhatbuf_r+0x1c>
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	2000      	movs	r0, #0
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	b016      	add	sp, #88	; 0x58
 8007f86:	bd70      	pop	{r4, r5, r6, pc}

08007f88 <__smakebuf_r>:
 8007f88:	898b      	ldrh	r3, [r1, #12]
 8007f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f8c:	079d      	lsls	r5, r3, #30
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460c      	mov	r4, r1
 8007f92:	d507      	bpl.n	8007fa4 <__smakebuf_r+0x1c>
 8007f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	6163      	str	r3, [r4, #20]
 8007fa0:	b002      	add	sp, #8
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	ab01      	add	r3, sp, #4
 8007fa6:	466a      	mov	r2, sp
 8007fa8:	f7ff ffca 	bl	8007f40 <__swhatbuf_r>
 8007fac:	9900      	ldr	r1, [sp, #0]
 8007fae:	4605      	mov	r5, r0
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f877 	bl	80080a4 <_malloc_r>
 8007fb6:	b948      	cbnz	r0, 8007fcc <__smakebuf_r+0x44>
 8007fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fbc:	059a      	lsls	r2, r3, #22
 8007fbe:	d4ef      	bmi.n	8007fa0 <__smakebuf_r+0x18>
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	f043 0302 	orr.w	r3, r3, #2
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	e7e3      	b.n	8007f94 <__smakebuf_r+0xc>
 8007fcc:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <__smakebuf_r+0x7c>)
 8007fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	6020      	str	r0, [r4, #0]
 8007fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	9b00      	ldr	r3, [sp, #0]
 8007fdc:	6163      	str	r3, [r4, #20]
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	6120      	str	r0, [r4, #16]
 8007fe2:	b15b      	cbz	r3, 8007ffc <__smakebuf_r+0x74>
 8007fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 fc05 	bl	80087f8 <_isatty_r>
 8007fee:	b128      	cbz	r0, 8007ffc <__smakebuf_r+0x74>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	f043 0301 	orr.w	r3, r3, #1
 8007ffa:	81a3      	strh	r3, [r4, #12]
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	431d      	orrs	r5, r3
 8008000:	81a5      	strh	r5, [r4, #12]
 8008002:	e7cd      	b.n	8007fa0 <__smakebuf_r+0x18>
 8008004:	08007df5 	.word	0x08007df5

08008008 <_free_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4605      	mov	r5, r0
 800800c:	2900      	cmp	r1, #0
 800800e:	d045      	beq.n	800809c <_free_r+0x94>
 8008010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008014:	1f0c      	subs	r4, r1, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfb8      	it	lt
 800801a:	18e4      	addlt	r4, r4, r3
 800801c:	f000 fc0e 	bl	800883c <__malloc_lock>
 8008020:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <_free_r+0x98>)
 8008022:	6813      	ldr	r3, [r2, #0]
 8008024:	4610      	mov	r0, r2
 8008026:	b933      	cbnz	r3, 8008036 <_free_r+0x2e>
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	6014      	str	r4, [r2, #0]
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008032:	f000 bc04 	b.w	800883e <__malloc_unlock>
 8008036:	42a3      	cmp	r3, r4
 8008038:	d90c      	bls.n	8008054 <_free_r+0x4c>
 800803a:	6821      	ldr	r1, [r4, #0]
 800803c:	1862      	adds	r2, r4, r1
 800803e:	4293      	cmp	r3, r2
 8008040:	bf04      	itt	eq
 8008042:	681a      	ldreq	r2, [r3, #0]
 8008044:	685b      	ldreq	r3, [r3, #4]
 8008046:	6063      	str	r3, [r4, #4]
 8008048:	bf04      	itt	eq
 800804a:	1852      	addeq	r2, r2, r1
 800804c:	6022      	streq	r2, [r4, #0]
 800804e:	6004      	str	r4, [r0, #0]
 8008050:	e7ec      	b.n	800802c <_free_r+0x24>
 8008052:	4613      	mov	r3, r2
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	b10a      	cbz	r2, 800805c <_free_r+0x54>
 8008058:	42a2      	cmp	r2, r4
 800805a:	d9fa      	bls.n	8008052 <_free_r+0x4a>
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	1858      	adds	r0, r3, r1
 8008060:	42a0      	cmp	r0, r4
 8008062:	d10b      	bne.n	800807c <_free_r+0x74>
 8008064:	6820      	ldr	r0, [r4, #0]
 8008066:	4401      	add	r1, r0
 8008068:	1858      	adds	r0, r3, r1
 800806a:	4282      	cmp	r2, r0
 800806c:	6019      	str	r1, [r3, #0]
 800806e:	d1dd      	bne.n	800802c <_free_r+0x24>
 8008070:	6810      	ldr	r0, [r2, #0]
 8008072:	6852      	ldr	r2, [r2, #4]
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	4401      	add	r1, r0
 8008078:	6019      	str	r1, [r3, #0]
 800807a:	e7d7      	b.n	800802c <_free_r+0x24>
 800807c:	d902      	bls.n	8008084 <_free_r+0x7c>
 800807e:	230c      	movs	r3, #12
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	e7d3      	b.n	800802c <_free_r+0x24>
 8008084:	6820      	ldr	r0, [r4, #0]
 8008086:	1821      	adds	r1, r4, r0
 8008088:	428a      	cmp	r2, r1
 800808a:	bf04      	itt	eq
 800808c:	6811      	ldreq	r1, [r2, #0]
 800808e:	6852      	ldreq	r2, [r2, #4]
 8008090:	6062      	str	r2, [r4, #4]
 8008092:	bf04      	itt	eq
 8008094:	1809      	addeq	r1, r1, r0
 8008096:	6021      	streq	r1, [r4, #0]
 8008098:	605c      	str	r4, [r3, #4]
 800809a:	e7c7      	b.n	800802c <_free_r+0x24>
 800809c:	bd38      	pop	{r3, r4, r5, pc}
 800809e:	bf00      	nop
 80080a0:	2000403c 	.word	0x2000403c

080080a4 <_malloc_r>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	1ccd      	adds	r5, r1, #3
 80080a8:	f025 0503 	bic.w	r5, r5, #3
 80080ac:	3508      	adds	r5, #8
 80080ae:	2d0c      	cmp	r5, #12
 80080b0:	bf38      	it	cc
 80080b2:	250c      	movcc	r5, #12
 80080b4:	2d00      	cmp	r5, #0
 80080b6:	4606      	mov	r6, r0
 80080b8:	db01      	blt.n	80080be <_malloc_r+0x1a>
 80080ba:	42a9      	cmp	r1, r5
 80080bc:	d903      	bls.n	80080c6 <_malloc_r+0x22>
 80080be:	230c      	movs	r3, #12
 80080c0:	6033      	str	r3, [r6, #0]
 80080c2:	2000      	movs	r0, #0
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
 80080c6:	f000 fbb9 	bl	800883c <__malloc_lock>
 80080ca:	4a21      	ldr	r2, [pc, #132]	; (8008150 <_malloc_r+0xac>)
 80080cc:	6814      	ldr	r4, [r2, #0]
 80080ce:	4621      	mov	r1, r4
 80080d0:	b991      	cbnz	r1, 80080f8 <_malloc_r+0x54>
 80080d2:	4c20      	ldr	r4, [pc, #128]	; (8008154 <_malloc_r+0xb0>)
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	b91b      	cbnz	r3, 80080e0 <_malloc_r+0x3c>
 80080d8:	4630      	mov	r0, r6
 80080da:	f000 fb05 	bl	80086e8 <_sbrk_r>
 80080de:	6020      	str	r0, [r4, #0]
 80080e0:	4629      	mov	r1, r5
 80080e2:	4630      	mov	r0, r6
 80080e4:	f000 fb00 	bl	80086e8 <_sbrk_r>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d124      	bne.n	8008136 <_malloc_r+0x92>
 80080ec:	230c      	movs	r3, #12
 80080ee:	6033      	str	r3, [r6, #0]
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 fba4 	bl	800883e <__malloc_unlock>
 80080f6:	e7e4      	b.n	80080c2 <_malloc_r+0x1e>
 80080f8:	680b      	ldr	r3, [r1, #0]
 80080fa:	1b5b      	subs	r3, r3, r5
 80080fc:	d418      	bmi.n	8008130 <_malloc_r+0x8c>
 80080fe:	2b0b      	cmp	r3, #11
 8008100:	d90f      	bls.n	8008122 <_malloc_r+0x7e>
 8008102:	600b      	str	r3, [r1, #0]
 8008104:	50cd      	str	r5, [r1, r3]
 8008106:	18cc      	adds	r4, r1, r3
 8008108:	4630      	mov	r0, r6
 800810a:	f000 fb98 	bl	800883e <__malloc_unlock>
 800810e:	f104 000b 	add.w	r0, r4, #11
 8008112:	1d23      	adds	r3, r4, #4
 8008114:	f020 0007 	bic.w	r0, r0, #7
 8008118:	1ac3      	subs	r3, r0, r3
 800811a:	d0d3      	beq.n	80080c4 <_malloc_r+0x20>
 800811c:	425a      	negs	r2, r3
 800811e:	50e2      	str	r2, [r4, r3]
 8008120:	e7d0      	b.n	80080c4 <_malloc_r+0x20>
 8008122:	428c      	cmp	r4, r1
 8008124:	684b      	ldr	r3, [r1, #4]
 8008126:	bf16      	itet	ne
 8008128:	6063      	strne	r3, [r4, #4]
 800812a:	6013      	streq	r3, [r2, #0]
 800812c:	460c      	movne	r4, r1
 800812e:	e7eb      	b.n	8008108 <_malloc_r+0x64>
 8008130:	460c      	mov	r4, r1
 8008132:	6849      	ldr	r1, [r1, #4]
 8008134:	e7cc      	b.n	80080d0 <_malloc_r+0x2c>
 8008136:	1cc4      	adds	r4, r0, #3
 8008138:	f024 0403 	bic.w	r4, r4, #3
 800813c:	42a0      	cmp	r0, r4
 800813e:	d005      	beq.n	800814c <_malloc_r+0xa8>
 8008140:	1a21      	subs	r1, r4, r0
 8008142:	4630      	mov	r0, r6
 8008144:	f000 fad0 	bl	80086e8 <_sbrk_r>
 8008148:	3001      	adds	r0, #1
 800814a:	d0cf      	beq.n	80080ec <_malloc_r+0x48>
 800814c:	6025      	str	r5, [r4, #0]
 800814e:	e7db      	b.n	8008108 <_malloc_r+0x64>
 8008150:	2000403c 	.word	0x2000403c
 8008154:	20004040 	.word	0x20004040

08008158 <__sfputc_r>:
 8008158:	6893      	ldr	r3, [r2, #8]
 800815a:	3b01      	subs	r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	b410      	push	{r4}
 8008160:	6093      	str	r3, [r2, #8]
 8008162:	da08      	bge.n	8008176 <__sfputc_r+0x1e>
 8008164:	6994      	ldr	r4, [r2, #24]
 8008166:	42a3      	cmp	r3, r4
 8008168:	db01      	blt.n	800816e <__sfputc_r+0x16>
 800816a:	290a      	cmp	r1, #10
 800816c:	d103      	bne.n	8008176 <__sfputc_r+0x1e>
 800816e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008172:	f7ff bcab 	b.w	8007acc <__swbuf_r>
 8008176:	6813      	ldr	r3, [r2, #0]
 8008178:	1c58      	adds	r0, r3, #1
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	7019      	strb	r1, [r3, #0]
 800817e:	4608      	mov	r0, r1
 8008180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008184:	4770      	bx	lr

08008186 <__sfputs_r>:
 8008186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008188:	4606      	mov	r6, r0
 800818a:	460f      	mov	r7, r1
 800818c:	4614      	mov	r4, r2
 800818e:	18d5      	adds	r5, r2, r3
 8008190:	42ac      	cmp	r4, r5
 8008192:	d101      	bne.n	8008198 <__sfputs_r+0x12>
 8008194:	2000      	movs	r0, #0
 8008196:	e007      	b.n	80081a8 <__sfputs_r+0x22>
 8008198:	463a      	mov	r2, r7
 800819a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ffda 	bl	8008158 <__sfputc_r>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d1f3      	bne.n	8008190 <__sfputs_r+0xa>
 80081a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081ac <_vfiprintf_r>:
 80081ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b0:	460c      	mov	r4, r1
 80081b2:	b09d      	sub	sp, #116	; 0x74
 80081b4:	4617      	mov	r7, r2
 80081b6:	461d      	mov	r5, r3
 80081b8:	4606      	mov	r6, r0
 80081ba:	b118      	cbz	r0, 80081c4 <_vfiprintf_r+0x18>
 80081bc:	6983      	ldr	r3, [r0, #24]
 80081be:	b90b      	cbnz	r3, 80081c4 <_vfiprintf_r+0x18>
 80081c0:	f7ff fe34 	bl	8007e2c <__sinit>
 80081c4:	4b7c      	ldr	r3, [pc, #496]	; (80083b8 <_vfiprintf_r+0x20c>)
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d158      	bne.n	800827c <_vfiprintf_r+0xd0>
 80081ca:	6874      	ldr	r4, [r6, #4]
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	0718      	lsls	r0, r3, #28
 80081d0:	d55e      	bpl.n	8008290 <_vfiprintf_r+0xe4>
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d05b      	beq.n	8008290 <_vfiprintf_r+0xe4>
 80081d8:	2300      	movs	r3, #0
 80081da:	9309      	str	r3, [sp, #36]	; 0x24
 80081dc:	2320      	movs	r3, #32
 80081de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081e2:	2330      	movs	r3, #48	; 0x30
 80081e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081e8:	9503      	str	r5, [sp, #12]
 80081ea:	f04f 0b01 	mov.w	fp, #1
 80081ee:	46b8      	mov	r8, r7
 80081f0:	4645      	mov	r5, r8
 80081f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081f6:	b10b      	cbz	r3, 80081fc <_vfiprintf_r+0x50>
 80081f8:	2b25      	cmp	r3, #37	; 0x25
 80081fa:	d154      	bne.n	80082a6 <_vfiprintf_r+0xfa>
 80081fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8008200:	d00b      	beq.n	800821a <_vfiprintf_r+0x6e>
 8008202:	4653      	mov	r3, sl
 8008204:	463a      	mov	r2, r7
 8008206:	4621      	mov	r1, r4
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff ffbc 	bl	8008186 <__sfputs_r>
 800820e:	3001      	adds	r0, #1
 8008210:	f000 80c2 	beq.w	8008398 <_vfiprintf_r+0x1ec>
 8008214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008216:	4453      	add	r3, sl
 8008218:	9309      	str	r3, [sp, #36]	; 0x24
 800821a:	f898 3000 	ldrb.w	r3, [r8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80ba 	beq.w	8008398 <_vfiprintf_r+0x1ec>
 8008224:	2300      	movs	r3, #0
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800822e:	9304      	str	r3, [sp, #16]
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008236:	931a      	str	r3, [sp, #104]	; 0x68
 8008238:	46a8      	mov	r8, r5
 800823a:	2205      	movs	r2, #5
 800823c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008240:	485e      	ldr	r0, [pc, #376]	; (80083bc <_vfiprintf_r+0x210>)
 8008242:	f7f7 ffd5 	bl	80001f0 <memchr>
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	bb78      	cbnz	r0, 80082aa <_vfiprintf_r+0xfe>
 800824a:	06d9      	lsls	r1, r3, #27
 800824c:	bf44      	itt	mi
 800824e:	2220      	movmi	r2, #32
 8008250:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008254:	071a      	lsls	r2, r3, #28
 8008256:	bf44      	itt	mi
 8008258:	222b      	movmi	r2, #43	; 0x2b
 800825a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800825e:	782a      	ldrb	r2, [r5, #0]
 8008260:	2a2a      	cmp	r2, #42	; 0x2a
 8008262:	d02a      	beq.n	80082ba <_vfiprintf_r+0x10e>
 8008264:	9a07      	ldr	r2, [sp, #28]
 8008266:	46a8      	mov	r8, r5
 8008268:	2000      	movs	r0, #0
 800826a:	250a      	movs	r5, #10
 800826c:	4641      	mov	r1, r8
 800826e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008272:	3b30      	subs	r3, #48	; 0x30
 8008274:	2b09      	cmp	r3, #9
 8008276:	d969      	bls.n	800834c <_vfiprintf_r+0x1a0>
 8008278:	b360      	cbz	r0, 80082d4 <_vfiprintf_r+0x128>
 800827a:	e024      	b.n	80082c6 <_vfiprintf_r+0x11a>
 800827c:	4b50      	ldr	r3, [pc, #320]	; (80083c0 <_vfiprintf_r+0x214>)
 800827e:	429c      	cmp	r4, r3
 8008280:	d101      	bne.n	8008286 <_vfiprintf_r+0xda>
 8008282:	68b4      	ldr	r4, [r6, #8]
 8008284:	e7a2      	b.n	80081cc <_vfiprintf_r+0x20>
 8008286:	4b4f      	ldr	r3, [pc, #316]	; (80083c4 <_vfiprintf_r+0x218>)
 8008288:	429c      	cmp	r4, r3
 800828a:	bf08      	it	eq
 800828c:	68f4      	ldreq	r4, [r6, #12]
 800828e:	e79d      	b.n	80081cc <_vfiprintf_r+0x20>
 8008290:	4621      	mov	r1, r4
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff fc6c 	bl	8007b70 <__swsetup_r>
 8008298:	2800      	cmp	r0, #0
 800829a:	d09d      	beq.n	80081d8 <_vfiprintf_r+0x2c>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	b01d      	add	sp, #116	; 0x74
 80082a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a6:	46a8      	mov	r8, r5
 80082a8:	e7a2      	b.n	80081f0 <_vfiprintf_r+0x44>
 80082aa:	4a44      	ldr	r2, [pc, #272]	; (80083bc <_vfiprintf_r+0x210>)
 80082ac:	1a80      	subs	r0, r0, r2
 80082ae:	fa0b f000 	lsl.w	r0, fp, r0
 80082b2:	4318      	orrs	r0, r3
 80082b4:	9004      	str	r0, [sp, #16]
 80082b6:	4645      	mov	r5, r8
 80082b8:	e7be      	b.n	8008238 <_vfiprintf_r+0x8c>
 80082ba:	9a03      	ldr	r2, [sp, #12]
 80082bc:	1d11      	adds	r1, r2, #4
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	9103      	str	r1, [sp, #12]
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	db01      	blt.n	80082ca <_vfiprintf_r+0x11e>
 80082c6:	9207      	str	r2, [sp, #28]
 80082c8:	e004      	b.n	80082d4 <_vfiprintf_r+0x128>
 80082ca:	4252      	negs	r2, r2
 80082cc:	f043 0302 	orr.w	r3, r3, #2
 80082d0:	9207      	str	r2, [sp, #28]
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	f898 3000 	ldrb.w	r3, [r8]
 80082d8:	2b2e      	cmp	r3, #46	; 0x2e
 80082da:	d10e      	bne.n	80082fa <_vfiprintf_r+0x14e>
 80082dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80082e0:	2b2a      	cmp	r3, #42	; 0x2a
 80082e2:	d138      	bne.n	8008356 <_vfiprintf_r+0x1aa>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	9203      	str	r2, [sp, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bfb8      	it	lt
 80082f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80082f4:	f108 0802 	add.w	r8, r8, #2
 80082f8:	9305      	str	r3, [sp, #20]
 80082fa:	4d33      	ldr	r5, [pc, #204]	; (80083c8 <_vfiprintf_r+0x21c>)
 80082fc:	f898 1000 	ldrb.w	r1, [r8]
 8008300:	2203      	movs	r2, #3
 8008302:	4628      	mov	r0, r5
 8008304:	f7f7 ff74 	bl	80001f0 <memchr>
 8008308:	b140      	cbz	r0, 800831c <_vfiprintf_r+0x170>
 800830a:	2340      	movs	r3, #64	; 0x40
 800830c:	1b40      	subs	r0, r0, r5
 800830e:	fa03 f000 	lsl.w	r0, r3, r0
 8008312:	9b04      	ldr	r3, [sp, #16]
 8008314:	4303      	orrs	r3, r0
 8008316:	f108 0801 	add.w	r8, r8, #1
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	f898 1000 	ldrb.w	r1, [r8]
 8008320:	482a      	ldr	r0, [pc, #168]	; (80083cc <_vfiprintf_r+0x220>)
 8008322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008326:	2206      	movs	r2, #6
 8008328:	f108 0701 	add.w	r7, r8, #1
 800832c:	f7f7 ff60 	bl	80001f0 <memchr>
 8008330:	2800      	cmp	r0, #0
 8008332:	d037      	beq.n	80083a4 <_vfiprintf_r+0x1f8>
 8008334:	4b26      	ldr	r3, [pc, #152]	; (80083d0 <_vfiprintf_r+0x224>)
 8008336:	bb1b      	cbnz	r3, 8008380 <_vfiprintf_r+0x1d4>
 8008338:	9b03      	ldr	r3, [sp, #12]
 800833a:	3307      	adds	r3, #7
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	3308      	adds	r3, #8
 8008342:	9303      	str	r3, [sp, #12]
 8008344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008346:	444b      	add	r3, r9
 8008348:	9309      	str	r3, [sp, #36]	; 0x24
 800834a:	e750      	b.n	80081ee <_vfiprintf_r+0x42>
 800834c:	fb05 3202 	mla	r2, r5, r2, r3
 8008350:	2001      	movs	r0, #1
 8008352:	4688      	mov	r8, r1
 8008354:	e78a      	b.n	800826c <_vfiprintf_r+0xc0>
 8008356:	2300      	movs	r3, #0
 8008358:	f108 0801 	add.w	r8, r8, #1
 800835c:	9305      	str	r3, [sp, #20]
 800835e:	4619      	mov	r1, r3
 8008360:	250a      	movs	r5, #10
 8008362:	4640      	mov	r0, r8
 8008364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008368:	3a30      	subs	r2, #48	; 0x30
 800836a:	2a09      	cmp	r2, #9
 800836c:	d903      	bls.n	8008376 <_vfiprintf_r+0x1ca>
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0c3      	beq.n	80082fa <_vfiprintf_r+0x14e>
 8008372:	9105      	str	r1, [sp, #20]
 8008374:	e7c1      	b.n	80082fa <_vfiprintf_r+0x14e>
 8008376:	fb05 2101 	mla	r1, r5, r1, r2
 800837a:	2301      	movs	r3, #1
 800837c:	4680      	mov	r8, r0
 800837e:	e7f0      	b.n	8008362 <_vfiprintf_r+0x1b6>
 8008380:	ab03      	add	r3, sp, #12
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4622      	mov	r2, r4
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <_vfiprintf_r+0x228>)
 8008388:	a904      	add	r1, sp, #16
 800838a:	4630      	mov	r0, r6
 800838c:	f3af 8000 	nop.w
 8008390:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008394:	4681      	mov	r9, r0
 8008396:	d1d5      	bne.n	8008344 <_vfiprintf_r+0x198>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	065b      	lsls	r3, r3, #25
 800839c:	f53f af7e 	bmi.w	800829c <_vfiprintf_r+0xf0>
 80083a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a2:	e77d      	b.n	80082a0 <_vfiprintf_r+0xf4>
 80083a4:	ab03      	add	r3, sp, #12
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	4622      	mov	r2, r4
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <_vfiprintf_r+0x228>)
 80083ac:	a904      	add	r1, sp, #16
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 f888 	bl	80084c4 <_printf_i>
 80083b4:	e7ec      	b.n	8008390 <_vfiprintf_r+0x1e4>
 80083b6:	bf00      	nop
 80083b8:	08009bd8 	.word	0x08009bd8
 80083bc:	08009c18 	.word	0x08009c18
 80083c0:	08009bf8 	.word	0x08009bf8
 80083c4:	08009bb8 	.word	0x08009bb8
 80083c8:	08009c1e 	.word	0x08009c1e
 80083cc:	08009c22 	.word	0x08009c22
 80083d0:	00000000 	.word	0x00000000
 80083d4:	08008187 	.word	0x08008187

080083d8 <_printf_common>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	4691      	mov	r9, r2
 80083de:	461f      	mov	r7, r3
 80083e0:	688a      	ldr	r2, [r1, #8]
 80083e2:	690b      	ldr	r3, [r1, #16]
 80083e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083e8:	4293      	cmp	r3, r2
 80083ea:	bfb8      	it	lt
 80083ec:	4613      	movlt	r3, r2
 80083ee:	f8c9 3000 	str.w	r3, [r9]
 80083f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083f6:	4606      	mov	r6, r0
 80083f8:	460c      	mov	r4, r1
 80083fa:	b112      	cbz	r2, 8008402 <_printf_common+0x2a>
 80083fc:	3301      	adds	r3, #1
 80083fe:	f8c9 3000 	str.w	r3, [r9]
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	0699      	lsls	r1, r3, #26
 8008406:	bf42      	ittt	mi
 8008408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800840c:	3302      	addmi	r3, #2
 800840e:	f8c9 3000 	strmi.w	r3, [r9]
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	f015 0506 	ands.w	r5, r5, #6
 8008418:	d107      	bne.n	800842a <_printf_common+0x52>
 800841a:	f104 0a19 	add.w	sl, r4, #25
 800841e:	68e3      	ldr	r3, [r4, #12]
 8008420:	f8d9 2000 	ldr.w	r2, [r9]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	42ab      	cmp	r3, r5
 8008428:	dc28      	bgt.n	800847c <_printf_common+0xa4>
 800842a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	3300      	adds	r3, #0
 8008432:	bf18      	it	ne
 8008434:	2301      	movne	r3, #1
 8008436:	0692      	lsls	r2, r2, #26
 8008438:	d42d      	bmi.n	8008496 <_printf_common+0xbe>
 800843a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800843e:	4639      	mov	r1, r7
 8008440:	4630      	mov	r0, r6
 8008442:	47c0      	blx	r8
 8008444:	3001      	adds	r0, #1
 8008446:	d020      	beq.n	800848a <_printf_common+0xb2>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	68e5      	ldr	r5, [r4, #12]
 800844c:	f8d9 2000 	ldr.w	r2, [r9]
 8008450:	f003 0306 	and.w	r3, r3, #6
 8008454:	2b04      	cmp	r3, #4
 8008456:	bf08      	it	eq
 8008458:	1aad      	subeq	r5, r5, r2
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	6922      	ldr	r2, [r4, #16]
 800845e:	bf0c      	ite	eq
 8008460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008464:	2500      	movne	r5, #0
 8008466:	4293      	cmp	r3, r2
 8008468:	bfc4      	itt	gt
 800846a:	1a9b      	subgt	r3, r3, r2
 800846c:	18ed      	addgt	r5, r5, r3
 800846e:	f04f 0900 	mov.w	r9, #0
 8008472:	341a      	adds	r4, #26
 8008474:	454d      	cmp	r5, r9
 8008476:	d11a      	bne.n	80084ae <_printf_common+0xd6>
 8008478:	2000      	movs	r0, #0
 800847a:	e008      	b.n	800848e <_printf_common+0xb6>
 800847c:	2301      	movs	r3, #1
 800847e:	4652      	mov	r2, sl
 8008480:	4639      	mov	r1, r7
 8008482:	4630      	mov	r0, r6
 8008484:	47c0      	blx	r8
 8008486:	3001      	adds	r0, #1
 8008488:	d103      	bne.n	8008492 <_printf_common+0xba>
 800848a:	f04f 30ff 	mov.w	r0, #4294967295
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008492:	3501      	adds	r5, #1
 8008494:	e7c3      	b.n	800841e <_printf_common+0x46>
 8008496:	18e1      	adds	r1, r4, r3
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	2030      	movs	r0, #48	; 0x30
 800849c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a0:	4422      	add	r2, r4
 80084a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084aa:	3302      	adds	r3, #2
 80084ac:	e7c5      	b.n	800843a <_printf_common+0x62>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4622      	mov	r2, r4
 80084b2:	4639      	mov	r1, r7
 80084b4:	4630      	mov	r0, r6
 80084b6:	47c0      	blx	r8
 80084b8:	3001      	adds	r0, #1
 80084ba:	d0e6      	beq.n	800848a <_printf_common+0xb2>
 80084bc:	f109 0901 	add.w	r9, r9, #1
 80084c0:	e7d8      	b.n	8008474 <_printf_common+0x9c>
	...

080084c4 <_printf_i>:
 80084c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084cc:	460c      	mov	r4, r1
 80084ce:	7e09      	ldrb	r1, [r1, #24]
 80084d0:	b085      	sub	sp, #20
 80084d2:	296e      	cmp	r1, #110	; 0x6e
 80084d4:	4617      	mov	r7, r2
 80084d6:	4606      	mov	r6, r0
 80084d8:	4698      	mov	r8, r3
 80084da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084dc:	f000 80b3 	beq.w	8008646 <_printf_i+0x182>
 80084e0:	d822      	bhi.n	8008528 <_printf_i+0x64>
 80084e2:	2963      	cmp	r1, #99	; 0x63
 80084e4:	d036      	beq.n	8008554 <_printf_i+0x90>
 80084e6:	d80a      	bhi.n	80084fe <_printf_i+0x3a>
 80084e8:	2900      	cmp	r1, #0
 80084ea:	f000 80b9 	beq.w	8008660 <_printf_i+0x19c>
 80084ee:	2958      	cmp	r1, #88	; 0x58
 80084f0:	f000 8083 	beq.w	80085fa <_printf_i+0x136>
 80084f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80084fc:	e032      	b.n	8008564 <_printf_i+0xa0>
 80084fe:	2964      	cmp	r1, #100	; 0x64
 8008500:	d001      	beq.n	8008506 <_printf_i+0x42>
 8008502:	2969      	cmp	r1, #105	; 0x69
 8008504:	d1f6      	bne.n	80084f4 <_printf_i+0x30>
 8008506:	6820      	ldr	r0, [r4, #0]
 8008508:	6813      	ldr	r3, [r2, #0]
 800850a:	0605      	lsls	r5, r0, #24
 800850c:	f103 0104 	add.w	r1, r3, #4
 8008510:	d52a      	bpl.n	8008568 <_printf_i+0xa4>
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6011      	str	r1, [r2, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	da03      	bge.n	8008522 <_printf_i+0x5e>
 800851a:	222d      	movs	r2, #45	; 0x2d
 800851c:	425b      	negs	r3, r3
 800851e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008522:	486f      	ldr	r0, [pc, #444]	; (80086e0 <_printf_i+0x21c>)
 8008524:	220a      	movs	r2, #10
 8008526:	e039      	b.n	800859c <_printf_i+0xd8>
 8008528:	2973      	cmp	r1, #115	; 0x73
 800852a:	f000 809d 	beq.w	8008668 <_printf_i+0x1a4>
 800852e:	d808      	bhi.n	8008542 <_printf_i+0x7e>
 8008530:	296f      	cmp	r1, #111	; 0x6f
 8008532:	d020      	beq.n	8008576 <_printf_i+0xb2>
 8008534:	2970      	cmp	r1, #112	; 0x70
 8008536:	d1dd      	bne.n	80084f4 <_printf_i+0x30>
 8008538:	6823      	ldr	r3, [r4, #0]
 800853a:	f043 0320 	orr.w	r3, r3, #32
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	e003      	b.n	800854a <_printf_i+0x86>
 8008542:	2975      	cmp	r1, #117	; 0x75
 8008544:	d017      	beq.n	8008576 <_printf_i+0xb2>
 8008546:	2978      	cmp	r1, #120	; 0x78
 8008548:	d1d4      	bne.n	80084f4 <_printf_i+0x30>
 800854a:	2378      	movs	r3, #120	; 0x78
 800854c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008550:	4864      	ldr	r0, [pc, #400]	; (80086e4 <_printf_i+0x220>)
 8008552:	e055      	b.n	8008600 <_printf_i+0x13c>
 8008554:	6813      	ldr	r3, [r2, #0]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6011      	str	r1, [r2, #0]
 800855c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008564:	2301      	movs	r3, #1
 8008566:	e08c      	b.n	8008682 <_printf_i+0x1be>
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6011      	str	r1, [r2, #0]
 800856c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008570:	bf18      	it	ne
 8008572:	b21b      	sxthne	r3, r3
 8008574:	e7cf      	b.n	8008516 <_printf_i+0x52>
 8008576:	6813      	ldr	r3, [r2, #0]
 8008578:	6825      	ldr	r5, [r4, #0]
 800857a:	1d18      	adds	r0, r3, #4
 800857c:	6010      	str	r0, [r2, #0]
 800857e:	0628      	lsls	r0, r5, #24
 8008580:	d501      	bpl.n	8008586 <_printf_i+0xc2>
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	e002      	b.n	800858c <_printf_i+0xc8>
 8008586:	0668      	lsls	r0, r5, #25
 8008588:	d5fb      	bpl.n	8008582 <_printf_i+0xbe>
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	4854      	ldr	r0, [pc, #336]	; (80086e0 <_printf_i+0x21c>)
 800858e:	296f      	cmp	r1, #111	; 0x6f
 8008590:	bf14      	ite	ne
 8008592:	220a      	movne	r2, #10
 8008594:	2208      	moveq	r2, #8
 8008596:	2100      	movs	r1, #0
 8008598:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800859c:	6865      	ldr	r5, [r4, #4]
 800859e:	60a5      	str	r5, [r4, #8]
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	f2c0 8095 	blt.w	80086d0 <_printf_i+0x20c>
 80085a6:	6821      	ldr	r1, [r4, #0]
 80085a8:	f021 0104 	bic.w	r1, r1, #4
 80085ac:	6021      	str	r1, [r4, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d13d      	bne.n	800862e <_printf_i+0x16a>
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	f040 808e 	bne.w	80086d4 <_printf_i+0x210>
 80085b8:	4665      	mov	r5, ip
 80085ba:	2a08      	cmp	r2, #8
 80085bc:	d10b      	bne.n	80085d6 <_printf_i+0x112>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	07db      	lsls	r3, r3, #31
 80085c2:	d508      	bpl.n	80085d6 <_printf_i+0x112>
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	6862      	ldr	r2, [r4, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bfde      	ittt	le
 80085cc:	2330      	movle	r3, #48	; 0x30
 80085ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085d6:	ebac 0305 	sub.w	r3, ip, r5
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	f8cd 8000 	str.w	r8, [sp]
 80085e0:	463b      	mov	r3, r7
 80085e2:	aa03      	add	r2, sp, #12
 80085e4:	4621      	mov	r1, r4
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff fef6 	bl	80083d8 <_printf_common>
 80085ec:	3001      	adds	r0, #1
 80085ee:	d14d      	bne.n	800868c <_printf_i+0x1c8>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	b005      	add	sp, #20
 80085f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085fa:	4839      	ldr	r0, [pc, #228]	; (80086e0 <_printf_i+0x21c>)
 80085fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008600:	6813      	ldr	r3, [r2, #0]
 8008602:	6821      	ldr	r1, [r4, #0]
 8008604:	1d1d      	adds	r5, r3, #4
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6015      	str	r5, [r2, #0]
 800860a:	060a      	lsls	r2, r1, #24
 800860c:	d50b      	bpl.n	8008626 <_printf_i+0x162>
 800860e:	07ca      	lsls	r2, r1, #31
 8008610:	bf44      	itt	mi
 8008612:	f041 0120 	orrmi.w	r1, r1, #32
 8008616:	6021      	strmi	r1, [r4, #0]
 8008618:	b91b      	cbnz	r3, 8008622 <_printf_i+0x15e>
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	f022 0220 	bic.w	r2, r2, #32
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	2210      	movs	r2, #16
 8008624:	e7b7      	b.n	8008596 <_printf_i+0xd2>
 8008626:	064d      	lsls	r5, r1, #25
 8008628:	bf48      	it	mi
 800862a:	b29b      	uxthmi	r3, r3
 800862c:	e7ef      	b.n	800860e <_printf_i+0x14a>
 800862e:	4665      	mov	r5, ip
 8008630:	fbb3 f1f2 	udiv	r1, r3, r2
 8008634:	fb02 3311 	mls	r3, r2, r1, r3
 8008638:	5cc3      	ldrb	r3, [r0, r3]
 800863a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800863e:	460b      	mov	r3, r1
 8008640:	2900      	cmp	r1, #0
 8008642:	d1f5      	bne.n	8008630 <_printf_i+0x16c>
 8008644:	e7b9      	b.n	80085ba <_printf_i+0xf6>
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	6961      	ldr	r1, [r4, #20]
 800864c:	1d18      	adds	r0, r3, #4
 800864e:	6010      	str	r0, [r2, #0]
 8008650:	0628      	lsls	r0, r5, #24
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	d501      	bpl.n	800865a <_printf_i+0x196>
 8008656:	6019      	str	r1, [r3, #0]
 8008658:	e002      	b.n	8008660 <_printf_i+0x19c>
 800865a:	066a      	lsls	r2, r5, #25
 800865c:	d5fb      	bpl.n	8008656 <_printf_i+0x192>
 800865e:	8019      	strh	r1, [r3, #0]
 8008660:	2300      	movs	r3, #0
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	4665      	mov	r5, ip
 8008666:	e7b9      	b.n	80085dc <_printf_i+0x118>
 8008668:	6813      	ldr	r3, [r2, #0]
 800866a:	1d19      	adds	r1, r3, #4
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	681d      	ldr	r5, [r3, #0]
 8008670:	6862      	ldr	r2, [r4, #4]
 8008672:	2100      	movs	r1, #0
 8008674:	4628      	mov	r0, r5
 8008676:	f7f7 fdbb 	bl	80001f0 <memchr>
 800867a:	b108      	cbz	r0, 8008680 <_printf_i+0x1bc>
 800867c:	1b40      	subs	r0, r0, r5
 800867e:	6060      	str	r0, [r4, #4]
 8008680:	6863      	ldr	r3, [r4, #4]
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	2300      	movs	r3, #0
 8008686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800868a:	e7a7      	b.n	80085dc <_printf_i+0x118>
 800868c:	6923      	ldr	r3, [r4, #16]
 800868e:	462a      	mov	r2, r5
 8008690:	4639      	mov	r1, r7
 8008692:	4630      	mov	r0, r6
 8008694:	47c0      	blx	r8
 8008696:	3001      	adds	r0, #1
 8008698:	d0aa      	beq.n	80085f0 <_printf_i+0x12c>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	079b      	lsls	r3, r3, #30
 800869e:	d413      	bmi.n	80086c8 <_printf_i+0x204>
 80086a0:	68e0      	ldr	r0, [r4, #12]
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	4298      	cmp	r0, r3
 80086a6:	bfb8      	it	lt
 80086a8:	4618      	movlt	r0, r3
 80086aa:	e7a3      	b.n	80085f4 <_printf_i+0x130>
 80086ac:	2301      	movs	r3, #1
 80086ae:	464a      	mov	r2, r9
 80086b0:	4639      	mov	r1, r7
 80086b2:	4630      	mov	r0, r6
 80086b4:	47c0      	blx	r8
 80086b6:	3001      	adds	r0, #1
 80086b8:	d09a      	beq.n	80085f0 <_printf_i+0x12c>
 80086ba:	3501      	adds	r5, #1
 80086bc:	68e3      	ldr	r3, [r4, #12]
 80086be:	9a03      	ldr	r2, [sp, #12]
 80086c0:	1a9b      	subs	r3, r3, r2
 80086c2:	42ab      	cmp	r3, r5
 80086c4:	dcf2      	bgt.n	80086ac <_printf_i+0x1e8>
 80086c6:	e7eb      	b.n	80086a0 <_printf_i+0x1dc>
 80086c8:	2500      	movs	r5, #0
 80086ca:	f104 0919 	add.w	r9, r4, #25
 80086ce:	e7f5      	b.n	80086bc <_printf_i+0x1f8>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1ac      	bne.n	800862e <_printf_i+0x16a>
 80086d4:	7803      	ldrb	r3, [r0, #0]
 80086d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086de:	e76c      	b.n	80085ba <_printf_i+0xf6>
 80086e0:	08009c29 	.word	0x08009c29
 80086e4:	08009c3a 	.word	0x08009c3a

080086e8 <_sbrk_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4c06      	ldr	r4, [pc, #24]	; (8008704 <_sbrk_r+0x1c>)
 80086ec:	2300      	movs	r3, #0
 80086ee:	4605      	mov	r5, r0
 80086f0:	4608      	mov	r0, r1
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	f7fa f8ce 	bl	8002894 <_sbrk>
 80086f8:	1c43      	adds	r3, r0, #1
 80086fa:	d102      	bne.n	8008702 <_sbrk_r+0x1a>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	b103      	cbz	r3, 8008702 <_sbrk_r+0x1a>
 8008700:	602b      	str	r3, [r5, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}
 8008704:	200043f0 	.word	0x200043f0

08008708 <__sread>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	f000 f896 	bl	8008840 <_read_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	bfab      	itete	ge
 8008718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800871a:	89a3      	ldrhlt	r3, [r4, #12]
 800871c:	181b      	addge	r3, r3, r0
 800871e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008722:	bfac      	ite	ge
 8008724:	6563      	strge	r3, [r4, #84]	; 0x54
 8008726:	81a3      	strhlt	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__swrite>:
 800872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	461f      	mov	r7, r3
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	05db      	lsls	r3, r3, #23
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4616      	mov	r6, r2
 800873a:	d505      	bpl.n	8008748 <__swrite+0x1e>
 800873c:	2302      	movs	r3, #2
 800873e:	2200      	movs	r2, #0
 8008740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008744:	f000 f868 	bl	8008818 <_lseek_r>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800875e:	f000 b817 	b.w	8008790 <_write_r>

08008762 <__sseek>:
 8008762:	b510      	push	{r4, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 f855 	bl	8008818 <_lseek_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	bf15      	itete	ne
 8008774:	6560      	strne	r0, [r4, #84]	; 0x54
 8008776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800877a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800877e:	81a3      	strheq	r3, [r4, #12]
 8008780:	bf18      	it	ne
 8008782:	81a3      	strhne	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__sclose>:
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 b813 	b.w	80087b4 <_close_r>
	...

08008790 <_write_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4c07      	ldr	r4, [pc, #28]	; (80087b0 <_write_r+0x20>)
 8008794:	4605      	mov	r5, r0
 8008796:	4608      	mov	r0, r1
 8008798:	4611      	mov	r1, r2
 800879a:	2200      	movs	r2, #0
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	f7fa f827 	bl	80027f2 <_write>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_write_r+0x1e>
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_write_r+0x1e>
 80087ac:	602b      	str	r3, [r5, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	200043f0 	.word	0x200043f0

080087b4 <_close_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4c06      	ldr	r4, [pc, #24]	; (80087d0 <_close_r+0x1c>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4605      	mov	r5, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	f7fa f833 	bl	800282a <_close>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_close_r+0x1a>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_close_r+0x1a>
 80087cc:	602b      	str	r3, [r5, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	200043f0 	.word	0x200043f0

080087d4 <_fstat_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4c07      	ldr	r4, [pc, #28]	; (80087f4 <_fstat_r+0x20>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4605      	mov	r5, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	f7fa f82e 	bl	8002842 <_fstat>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d102      	bne.n	80087f0 <_fstat_r+0x1c>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	b103      	cbz	r3, 80087f0 <_fstat_r+0x1c>
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	200043f0 	.word	0x200043f0

080087f8 <_isatty_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4c06      	ldr	r4, [pc, #24]	; (8008814 <_isatty_r+0x1c>)
 80087fc:	2300      	movs	r3, #0
 80087fe:	4605      	mov	r5, r0
 8008800:	4608      	mov	r0, r1
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	f7fa f82d 	bl	8002862 <_isatty>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d102      	bne.n	8008812 <_isatty_r+0x1a>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	b103      	cbz	r3, 8008812 <_isatty_r+0x1a>
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	bd38      	pop	{r3, r4, r5, pc}
 8008814:	200043f0 	.word	0x200043f0

08008818 <_lseek_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4c07      	ldr	r4, [pc, #28]	; (8008838 <_lseek_r+0x20>)
 800881c:	4605      	mov	r5, r0
 800881e:	4608      	mov	r0, r1
 8008820:	4611      	mov	r1, r2
 8008822:	2200      	movs	r2, #0
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f7fa f826 	bl	8002878 <_lseek>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_lseek_r+0x1e>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	b103      	cbz	r3, 8008836 <_lseek_r+0x1e>
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	200043f0 	.word	0x200043f0

0800883c <__malloc_lock>:
 800883c:	4770      	bx	lr

0800883e <__malloc_unlock>:
 800883e:	4770      	bx	lr

08008840 <_read_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4c07      	ldr	r4, [pc, #28]	; (8008860 <_read_r+0x20>)
 8008844:	4605      	mov	r5, r0
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	2200      	movs	r2, #0
 800884c:	6022      	str	r2, [r4, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f7f9 ffb2 	bl	80027b8 <_read>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_read_r+0x1e>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	b103      	cbz	r3, 800885e <_read_r+0x1e>
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	200043f0 	.word	0x200043f0

08008864 <round>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	ec57 6b10 	vmov	r6, r7, d0
 800886a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800886e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8008872:	2c13      	cmp	r4, #19
 8008874:	463b      	mov	r3, r7
 8008876:	463d      	mov	r5, r7
 8008878:	dc17      	bgt.n	80088aa <round+0x46>
 800887a:	2c00      	cmp	r4, #0
 800887c:	da09      	bge.n	8008892 <round+0x2e>
 800887e:	3401      	adds	r4, #1
 8008880:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8008884:	d103      	bne.n	800888e <round+0x2a>
 8008886:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800888a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800888e:	2100      	movs	r1, #0
 8008890:	e02c      	b.n	80088ec <round+0x88>
 8008892:	4a18      	ldr	r2, [pc, #96]	; (80088f4 <round+0x90>)
 8008894:	4122      	asrs	r2, r4
 8008896:	4217      	tst	r7, r2
 8008898:	d100      	bne.n	800889c <round+0x38>
 800889a:	b19e      	cbz	r6, 80088c4 <round+0x60>
 800889c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088a0:	4123      	asrs	r3, r4
 80088a2:	442b      	add	r3, r5
 80088a4:	ea23 0302 	bic.w	r3, r3, r2
 80088a8:	e7f1      	b.n	800888e <round+0x2a>
 80088aa:	2c33      	cmp	r4, #51	; 0x33
 80088ac:	dd0d      	ble.n	80088ca <round+0x66>
 80088ae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80088b2:	d107      	bne.n	80088c4 <round+0x60>
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	ee10 2a10 	vmov	r2, s0
 80088bc:	f7f7 fcee 	bl	800029c <__adddf3>
 80088c0:	4606      	mov	r6, r0
 80088c2:	460f      	mov	r7, r1
 80088c4:	ec47 6b10 	vmov	d0, r6, r7
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ca:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	40d0      	lsrs	r0, r2
 80088d4:	4206      	tst	r6, r0
 80088d6:	d0f5      	beq.n	80088c4 <round+0x60>
 80088d8:	2201      	movs	r2, #1
 80088da:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80088de:	fa02 f404 	lsl.w	r4, r2, r4
 80088e2:	1931      	adds	r1, r6, r4
 80088e4:	bf28      	it	cs
 80088e6:	189b      	addcs	r3, r3, r2
 80088e8:	ea21 0100 	bic.w	r1, r1, r0
 80088ec:	461f      	mov	r7, r3
 80088ee:	460e      	mov	r6, r1
 80088f0:	e7e8      	b.n	80088c4 <round+0x60>
 80088f2:	bf00      	nop
 80088f4:	000fffff 	.word	0x000fffff

080088f8 <pow>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	ed2d 8b04 	vpush	{d8-d9}
 8008900:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008bd4 <pow+0x2dc>
 8008904:	b08d      	sub	sp, #52	; 0x34
 8008906:	ec57 6b10 	vmov	r6, r7, d0
 800890a:	ec55 4b11 	vmov	r4, r5, d1
 800890e:	f000 f963 	bl	8008bd8 <__ieee754_pow>
 8008912:	f999 3000 	ldrsb.w	r3, [r9]
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	eeb0 8a40 	vmov.f32	s16, s0
 800891e:	eef0 8a60 	vmov.f32	s17, s1
 8008922:	46c8      	mov	r8, r9
 8008924:	d05f      	beq.n	80089e6 <pow+0xee>
 8008926:	4622      	mov	r2, r4
 8008928:	462b      	mov	r3, r5
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f8 f905 	bl	8000b3c <__aeabi_dcmpun>
 8008932:	4683      	mov	fp, r0
 8008934:	2800      	cmp	r0, #0
 8008936:	d156      	bne.n	80089e6 <pow+0xee>
 8008938:	4632      	mov	r2, r6
 800893a:	463b      	mov	r3, r7
 800893c:	4630      	mov	r0, r6
 800893e:	4639      	mov	r1, r7
 8008940:	f7f8 f8fc 	bl	8000b3c <__aeabi_dcmpun>
 8008944:	9001      	str	r0, [sp, #4]
 8008946:	b1e8      	cbz	r0, 8008984 <pow+0x8c>
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f8 f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008954:	2800      	cmp	r0, #0
 8008956:	d046      	beq.n	80089e6 <pow+0xee>
 8008958:	2301      	movs	r3, #1
 800895a:	9302      	str	r3, [sp, #8]
 800895c:	4b96      	ldr	r3, [pc, #600]	; (8008bb8 <pow+0x2c0>)
 800895e:	9303      	str	r3, [sp, #12]
 8008960:	4b96      	ldr	r3, [pc, #600]	; (8008bbc <pow+0x2c4>)
 8008962:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008966:	2200      	movs	r2, #0
 8008968:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	2b02      	cmp	r3, #2
 8008970:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008974:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008978:	d033      	beq.n	80089e2 <pow+0xea>
 800897a:	a802      	add	r0, sp, #8
 800897c:	f000 fefb 	bl	8009776 <matherr>
 8008980:	bb48      	cbnz	r0, 80089d6 <pow+0xde>
 8008982:	e05d      	b.n	8008a40 <pow+0x148>
 8008984:	f04f 0a00 	mov.w	sl, #0
 8008988:	f04f 0b00 	mov.w	fp, #0
 800898c:	4652      	mov	r2, sl
 800898e:	465b      	mov	r3, fp
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f8 f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008998:	ec4b ab19 	vmov	d9, sl, fp
 800899c:	2800      	cmp	r0, #0
 800899e:	d054      	beq.n	8008a4a <pow+0x152>
 80089a0:	4652      	mov	r2, sl
 80089a2:	465b      	mov	r3, fp
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f8 f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ac:	4680      	mov	r8, r0
 80089ae:	b318      	cbz	r0, 80089f8 <pow+0x100>
 80089b0:	2301      	movs	r3, #1
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	4b80      	ldr	r3, [pc, #512]	; (8008bb8 <pow+0x2c0>)
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	930a      	str	r3, [sp, #40]	; 0x28
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80089c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0d5      	beq.n	800897a <pow+0x82>
 80089ce:	4b7b      	ldr	r3, [pc, #492]	; (8008bbc <pow+0x2c4>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d8:	b11b      	cbz	r3, 80089e2 <pow+0xea>
 80089da:	f7fe ffc9 	bl	8007970 <__errno>
 80089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80089e6:	eeb0 0a48 	vmov.f32	s0, s16
 80089ea:	eef0 0a68 	vmov.f32	s1, s17
 80089ee:	b00d      	add	sp, #52	; 0x34
 80089f0:	ecbd 8b04 	vpop	{d8-d9}
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	ec45 4b10 	vmov	d0, r4, r5
 80089fc:	f000 feb3 	bl	8009766 <finite>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	d0f0      	beq.n	80089e6 <pow+0xee>
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f8 f86e 	bl	8000aec <__aeabi_dcmplt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d0e8      	beq.n	80089e6 <pow+0xee>
 8008a14:	2301      	movs	r3, #1
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	4b67      	ldr	r3, [pc, #412]	; (8008bb8 <pow+0x2c0>)
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	f999 3000 	ldrsb.w	r3, [r9]
 8008a20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008a24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a2c:	b913      	cbnz	r3, 8008a34 <pow+0x13c>
 8008a2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008a32:	e7a2      	b.n	800897a <pow+0x82>
 8008a34:	4962      	ldr	r1, [pc, #392]	; (8008bc0 <pow+0x2c8>)
 8008a36:	2000      	movs	r0, #0
 8008a38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d19c      	bne.n	800897a <pow+0x82>
 8008a40:	f7fe ff96 	bl	8007970 <__errno>
 8008a44:	2321      	movs	r3, #33	; 0x21
 8008a46:	6003      	str	r3, [r0, #0]
 8008a48:	e7c5      	b.n	80089d6 <pow+0xde>
 8008a4a:	eeb0 0a48 	vmov.f32	s0, s16
 8008a4e:	eef0 0a68 	vmov.f32	s1, s17
 8008a52:	f000 fe88 	bl	8009766 <finite>
 8008a56:	9000      	str	r0, [sp, #0]
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	f040 8081 	bne.w	8008b60 <pow+0x268>
 8008a5e:	ec47 6b10 	vmov	d0, r6, r7
 8008a62:	f000 fe80 	bl	8009766 <finite>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d07a      	beq.n	8008b60 <pow+0x268>
 8008a6a:	ec45 4b10 	vmov	d0, r4, r5
 8008a6e:	f000 fe7a 	bl	8009766 <finite>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d074      	beq.n	8008b60 <pow+0x268>
 8008a76:	ec53 2b18 	vmov	r2, r3, d8
 8008a7a:	ee18 0a10 	vmov	r0, s16
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f7f8 f85c 	bl	8000b3c <__aeabi_dcmpun>
 8008a84:	f999 9000 	ldrsb.w	r9, [r9]
 8008a88:	4b4b      	ldr	r3, [pc, #300]	; (8008bb8 <pow+0x2c0>)
 8008a8a:	b1b0      	cbz	r0, 8008aba <pow+0x1c2>
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	930a      	str	r3, [sp, #40]	; 0x28
 8008a96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008a9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008a9e:	f1b9 0f00 	cmp.w	r9, #0
 8008aa2:	d0c4      	beq.n	8008a2e <pow+0x136>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	4650      	mov	r0, sl
 8008aaa:	4659      	mov	r1, fp
 8008aac:	f7f7 fed6 	bl	800085c <__aeabi_ddiv>
 8008ab0:	f1b9 0f02 	cmp.w	r9, #2
 8008ab4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ab8:	e7c1      	b.n	8008a3e <pow+0x146>
 8008aba:	2203      	movs	r2, #3
 8008abc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ac0:	900a      	str	r0, [sp, #40]	; 0x28
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	4b3e      	ldr	r3, [pc, #248]	; (8008bc4 <pow+0x2cc>)
 8008aca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ace:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ad2:	f7f7 fd99 	bl	8000608 <__aeabi_dmul>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	460d      	mov	r5, r1
 8008ada:	f1b9 0f00 	cmp.w	r9, #0
 8008ade:	d124      	bne.n	8008b2a <pow+0x232>
 8008ae0:	4b39      	ldr	r3, [pc, #228]	; (8008bc8 <pow+0x2d0>)
 8008ae2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008aea:	4630      	mov	r0, r6
 8008aec:	4652      	mov	r2, sl
 8008aee:	465b      	mov	r3, fp
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fffb 	bl	8000aec <__aeabi_dcmplt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d056      	beq.n	8008ba8 <pow+0x2b0>
 8008afa:	ec45 4b10 	vmov	d0, r4, r5
 8008afe:	f000 fe47 	bl	8009790 <rint>
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	ec51 0b10 	vmov	r0, r1, d0
 8008b0a:	f7f7 ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b0e:	b920      	cbnz	r0, 8008b1a <pow+0x222>
 8008b10:	4b2e      	ldr	r3, [pc, #184]	; (8008bcc <pow+0x2d4>)
 8008b12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008b16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b1a:	f998 3000 	ldrsb.w	r3, [r8]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d142      	bne.n	8008ba8 <pow+0x2b0>
 8008b22:	f7fe ff25 	bl	8007970 <__errno>
 8008b26:	2322      	movs	r3, #34	; 0x22
 8008b28:	e78d      	b.n	8008a46 <pow+0x14e>
 8008b2a:	4b29      	ldr	r3, [pc, #164]	; (8008bd0 <pow+0x2d8>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b32:	4630      	mov	r0, r6
 8008b34:	4652      	mov	r2, sl
 8008b36:	465b      	mov	r3, fp
 8008b38:	4639      	mov	r1, r7
 8008b3a:	f7f7 ffd7 	bl	8000aec <__aeabi_dcmplt>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0eb      	beq.n	8008b1a <pow+0x222>
 8008b42:	ec45 4b10 	vmov	d0, r4, r5
 8008b46:	f000 fe23 	bl	8009790 <rint>
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	ec51 0b10 	vmov	r0, r1, d0
 8008b52:	f7f7 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1df      	bne.n	8008b1a <pow+0x222>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4b18      	ldr	r3, [pc, #96]	; (8008bc0 <pow+0x2c8>)
 8008b5e:	e7da      	b.n	8008b16 <pow+0x21e>
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	ec51 0b18 	vmov	r0, r1, d8
 8008b68:	f7f7 ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f43f af3a 	beq.w	80089e6 <pow+0xee>
 8008b72:	ec47 6b10 	vmov	d0, r6, r7
 8008b76:	f000 fdf6 	bl	8009766 <finite>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	f43f af33 	beq.w	80089e6 <pow+0xee>
 8008b80:	ec45 4b10 	vmov	d0, r4, r5
 8008b84:	f000 fdef 	bl	8009766 <finite>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f43f af2c 	beq.w	80089e6 <pow+0xee>
 8008b8e:	2304      	movs	r3, #4
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <pow+0x2c0>)
 8008b94:	9303      	str	r3, [sp, #12]
 8008b96:	2300      	movs	r3, #0
 8008b98:	930a      	str	r3, [sp, #40]	; 0x28
 8008b9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008b9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008ba2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008ba6:	e7b8      	b.n	8008b1a <pow+0x222>
 8008ba8:	a802      	add	r0, sp, #8
 8008baa:	f000 fde4 	bl	8009776 <matherr>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f47f af11 	bne.w	80089d6 <pow+0xde>
 8008bb4:	e7b5      	b.n	8008b22 <pow+0x22a>
 8008bb6:	bf00      	nop
 8008bb8:	08009c4b 	.word	0x08009c4b
 8008bbc:	3ff00000 	.word	0x3ff00000
 8008bc0:	fff00000 	.word	0xfff00000
 8008bc4:	3fe00000 	.word	0x3fe00000
 8008bc8:	47efffff 	.word	0x47efffff
 8008bcc:	c7efffff 	.word	0xc7efffff
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	20000074 	.word	0x20000074

08008bd8 <__ieee754_pow>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	b091      	sub	sp, #68	; 0x44
 8008bde:	ed8d 1b00 	vstr	d1, [sp]
 8008be2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008be6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008bea:	ea58 0302 	orrs.w	r3, r8, r2
 8008bee:	ec57 6b10 	vmov	r6, r7, d0
 8008bf2:	f000 84be 	beq.w	8009572 <__ieee754_pow+0x99a>
 8008bf6:	4b7a      	ldr	r3, [pc, #488]	; (8008de0 <__ieee754_pow+0x208>)
 8008bf8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	463d      	mov	r5, r7
 8008c00:	ee10 aa10 	vmov	sl, s0
 8008c04:	dc09      	bgt.n	8008c1a <__ieee754_pow+0x42>
 8008c06:	d103      	bne.n	8008c10 <__ieee754_pow+0x38>
 8008c08:	b93e      	cbnz	r6, 8008c1a <__ieee754_pow+0x42>
 8008c0a:	45a0      	cmp	r8, r4
 8008c0c:	dc0d      	bgt.n	8008c2a <__ieee754_pow+0x52>
 8008c0e:	e001      	b.n	8008c14 <__ieee754_pow+0x3c>
 8008c10:	4598      	cmp	r8, r3
 8008c12:	dc02      	bgt.n	8008c1a <__ieee754_pow+0x42>
 8008c14:	4598      	cmp	r8, r3
 8008c16:	d10e      	bne.n	8008c36 <__ieee754_pow+0x5e>
 8008c18:	b16a      	cbz	r2, 8008c36 <__ieee754_pow+0x5e>
 8008c1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c22:	ea54 030a 	orrs.w	r3, r4, sl
 8008c26:	f000 84a4 	beq.w	8009572 <__ieee754_pow+0x99a>
 8008c2a:	486e      	ldr	r0, [pc, #440]	; (8008de4 <__ieee754_pow+0x20c>)
 8008c2c:	b011      	add	sp, #68	; 0x44
 8008c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c32:	f000 bda5 	b.w	8009780 <nan>
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	da53      	bge.n	8008ce2 <__ieee754_pow+0x10a>
 8008c3a:	4b6b      	ldr	r3, [pc, #428]	; (8008de8 <__ieee754_pow+0x210>)
 8008c3c:	4598      	cmp	r8, r3
 8008c3e:	dc4d      	bgt.n	8008cdc <__ieee754_pow+0x104>
 8008c40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c44:	4598      	cmp	r8, r3
 8008c46:	dd4c      	ble.n	8008ce2 <__ieee754_pow+0x10a>
 8008c48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c50:	2b14      	cmp	r3, #20
 8008c52:	dd26      	ble.n	8008ca2 <__ieee754_pow+0xca>
 8008c54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c58:	fa22 f103 	lsr.w	r1, r2, r3
 8008c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d13e      	bne.n	8008ce2 <__ieee754_pow+0x10a>
 8008c64:	f001 0101 	and.w	r1, r1, #1
 8008c68:	f1c1 0b02 	rsb	fp, r1, #2
 8008c6c:	2a00      	cmp	r2, #0
 8008c6e:	d15b      	bne.n	8008d28 <__ieee754_pow+0x150>
 8008c70:	4b5b      	ldr	r3, [pc, #364]	; (8008de0 <__ieee754_pow+0x208>)
 8008c72:	4598      	cmp	r8, r3
 8008c74:	d124      	bne.n	8008cc0 <__ieee754_pow+0xe8>
 8008c76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008c7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c7e:	ea53 030a 	orrs.w	r3, r3, sl
 8008c82:	f000 8476 	beq.w	8009572 <__ieee754_pow+0x99a>
 8008c86:	4b59      	ldr	r3, [pc, #356]	; (8008dec <__ieee754_pow+0x214>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	dd2d      	ble.n	8008ce8 <__ieee754_pow+0x110>
 8008c8c:	f1b9 0f00 	cmp.w	r9, #0
 8008c90:	f280 8473 	bge.w	800957a <__ieee754_pow+0x9a2>
 8008c94:	2000      	movs	r0, #0
 8008c96:	2100      	movs	r1, #0
 8008c98:	ec41 0b10 	vmov	d0, r0, r1
 8008c9c:	b011      	add	sp, #68	; 0x44
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	d13e      	bne.n	8008d24 <__ieee754_pow+0x14c>
 8008ca6:	f1c3 0314 	rsb	r3, r3, #20
 8008caa:	fa48 f103 	asr.w	r1, r8, r3
 8008cae:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb2:	4543      	cmp	r3, r8
 8008cb4:	f040 8469 	bne.w	800958a <__ieee754_pow+0x9b2>
 8008cb8:	f001 0101 	and.w	r1, r1, #1
 8008cbc:	f1c1 0b02 	rsb	fp, r1, #2
 8008cc0:	4b4b      	ldr	r3, [pc, #300]	; (8008df0 <__ieee754_pow+0x218>)
 8008cc2:	4598      	cmp	r8, r3
 8008cc4:	d118      	bne.n	8008cf8 <__ieee754_pow+0x120>
 8008cc6:	f1b9 0f00 	cmp.w	r9, #0
 8008cca:	f280 845a 	bge.w	8009582 <__ieee754_pow+0x9aa>
 8008cce:	4948      	ldr	r1, [pc, #288]	; (8008df0 <__ieee754_pow+0x218>)
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	f7f7 fdc1 	bl	800085c <__aeabi_ddiv>
 8008cda:	e7dd      	b.n	8008c98 <__ieee754_pow+0xc0>
 8008cdc:	f04f 0b02 	mov.w	fp, #2
 8008ce0:	e7c4      	b.n	8008c6c <__ieee754_pow+0x94>
 8008ce2:	f04f 0b00 	mov.w	fp, #0
 8008ce6:	e7c1      	b.n	8008c6c <__ieee754_pow+0x94>
 8008ce8:	f1b9 0f00 	cmp.w	r9, #0
 8008cec:	dad2      	bge.n	8008c94 <__ieee754_pow+0xbc>
 8008cee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cf2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008cf6:	e7cf      	b.n	8008c98 <__ieee754_pow+0xc0>
 8008cf8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008cfc:	d106      	bne.n	8008d0c <__ieee754_pow+0x134>
 8008cfe:	4632      	mov	r2, r6
 8008d00:	463b      	mov	r3, r7
 8008d02:	4610      	mov	r0, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7f7 fc7f 	bl	8000608 <__aeabi_dmul>
 8008d0a:	e7c5      	b.n	8008c98 <__ieee754_pow+0xc0>
 8008d0c:	4b39      	ldr	r3, [pc, #228]	; (8008df4 <__ieee754_pow+0x21c>)
 8008d0e:	4599      	cmp	r9, r3
 8008d10:	d10a      	bne.n	8008d28 <__ieee754_pow+0x150>
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	db08      	blt.n	8008d28 <__ieee754_pow+0x150>
 8008d16:	ec47 6b10 	vmov	d0, r6, r7
 8008d1a:	b011      	add	sp, #68	; 0x44
 8008d1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	f000 bc68 	b.w	80095f4 <__ieee754_sqrt>
 8008d24:	f04f 0b00 	mov.w	fp, #0
 8008d28:	ec47 6b10 	vmov	d0, r6, r7
 8008d2c:	f000 fd12 	bl	8009754 <fabs>
 8008d30:	ec51 0b10 	vmov	r0, r1, d0
 8008d34:	f1ba 0f00 	cmp.w	sl, #0
 8008d38:	d127      	bne.n	8008d8a <__ieee754_pow+0x1b2>
 8008d3a:	b124      	cbz	r4, 8008d46 <__ieee754_pow+0x16e>
 8008d3c:	4b2c      	ldr	r3, [pc, #176]	; (8008df0 <__ieee754_pow+0x218>)
 8008d3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d121      	bne.n	8008d8a <__ieee754_pow+0x1b2>
 8008d46:	f1b9 0f00 	cmp.w	r9, #0
 8008d4a:	da05      	bge.n	8008d58 <__ieee754_pow+0x180>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	2000      	movs	r0, #0
 8008d52:	4927      	ldr	r1, [pc, #156]	; (8008df0 <__ieee754_pow+0x218>)
 8008d54:	f7f7 fd82 	bl	800085c <__aeabi_ddiv>
 8008d58:	2d00      	cmp	r5, #0
 8008d5a:	da9d      	bge.n	8008c98 <__ieee754_pow+0xc0>
 8008d5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d64:	ea54 030b 	orrs.w	r3, r4, fp
 8008d68:	d108      	bne.n	8008d7c <__ieee754_pow+0x1a4>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4610      	mov	r0, r2
 8008d70:	4619      	mov	r1, r3
 8008d72:	f7f7 fa91 	bl	8000298 <__aeabi_dsub>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	e7ac      	b.n	8008cd6 <__ieee754_pow+0xfe>
 8008d7c:	f1bb 0f01 	cmp.w	fp, #1
 8008d80:	d18a      	bne.n	8008c98 <__ieee754_pow+0xc0>
 8008d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d86:	4619      	mov	r1, r3
 8008d88:	e786      	b.n	8008c98 <__ieee754_pow+0xc0>
 8008d8a:	0fed      	lsrs	r5, r5, #31
 8008d8c:	1e6b      	subs	r3, r5, #1
 8008d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d90:	ea5b 0303 	orrs.w	r3, fp, r3
 8008d94:	d102      	bne.n	8008d9c <__ieee754_pow+0x1c4>
 8008d96:	4632      	mov	r2, r6
 8008d98:	463b      	mov	r3, r7
 8008d9a:	e7e8      	b.n	8008d6e <__ieee754_pow+0x196>
 8008d9c:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <__ieee754_pow+0x220>)
 8008d9e:	4598      	cmp	r8, r3
 8008da0:	f340 80fe 	ble.w	8008fa0 <__ieee754_pow+0x3c8>
 8008da4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008da8:	4598      	cmp	r8, r3
 8008daa:	dd0a      	ble.n	8008dc2 <__ieee754_pow+0x1ea>
 8008dac:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <__ieee754_pow+0x214>)
 8008dae:	429c      	cmp	r4, r3
 8008db0:	dc0d      	bgt.n	8008dce <__ieee754_pow+0x1f6>
 8008db2:	f1b9 0f00 	cmp.w	r9, #0
 8008db6:	f6bf af6d 	bge.w	8008c94 <__ieee754_pow+0xbc>
 8008dba:	a307      	add	r3, pc, #28	; (adr r3, 8008dd8 <__ieee754_pow+0x200>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	e79f      	b.n	8008d02 <__ieee754_pow+0x12a>
 8008dc2:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <__ieee754_pow+0x224>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	ddf4      	ble.n	8008db2 <__ieee754_pow+0x1da>
 8008dc8:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <__ieee754_pow+0x218>)
 8008dca:	429c      	cmp	r4, r3
 8008dcc:	dd18      	ble.n	8008e00 <__ieee754_pow+0x228>
 8008dce:	f1b9 0f00 	cmp.w	r9, #0
 8008dd2:	dcf2      	bgt.n	8008dba <__ieee754_pow+0x1e2>
 8008dd4:	e75e      	b.n	8008c94 <__ieee754_pow+0xbc>
 8008dd6:	bf00      	nop
 8008dd8:	8800759c 	.word	0x8800759c
 8008ddc:	7e37e43c 	.word	0x7e37e43c
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	08009c1d 	.word	0x08009c1d
 8008de8:	433fffff 	.word	0x433fffff
 8008dec:	3fefffff 	.word	0x3fefffff
 8008df0:	3ff00000 	.word	0x3ff00000
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	41e00000 	.word	0x41e00000
 8008dfc:	3feffffe 	.word	0x3feffffe
 8008e00:	2200      	movs	r2, #0
 8008e02:	4b63      	ldr	r3, [pc, #396]	; (8008f90 <__ieee754_pow+0x3b8>)
 8008e04:	f7f7 fa48 	bl	8000298 <__aeabi_dsub>
 8008e08:	a355      	add	r3, pc, #340	; (adr r3, 8008f60 <__ieee754_pow+0x388>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	4604      	mov	r4, r0
 8008e10:	460d      	mov	r5, r1
 8008e12:	f7f7 fbf9 	bl	8000608 <__aeabi_dmul>
 8008e16:	a354      	add	r3, pc, #336	; (adr r3, 8008f68 <__ieee754_pow+0x390>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	4620      	mov	r0, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f7 fbf0 	bl	8000608 <__aeabi_dmul>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e2e:	4b59      	ldr	r3, [pc, #356]	; (8008f94 <__ieee754_pow+0x3bc>)
 8008e30:	4620      	mov	r0, r4
 8008e32:	4629      	mov	r1, r5
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	a14c      	add	r1, pc, #304	; (adr r1, 8008f70 <__ieee754_pow+0x398>)
 8008e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e42:	f7f7 fa29 	bl	8000298 <__aeabi_dsub>
 8008e46:	4622      	mov	r2, r4
 8008e48:	462b      	mov	r3, r5
 8008e4a:	f7f7 fbdd 	bl	8000608 <__aeabi_dmul>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	2000      	movs	r0, #0
 8008e54:	4950      	ldr	r1, [pc, #320]	; (8008f98 <__ieee754_pow+0x3c0>)
 8008e56:	f7f7 fa1f 	bl	8000298 <__aeabi_dsub>
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	4680      	mov	r8, r0
 8008e60:	4689      	mov	r9, r1
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4649      	mov	r1, r9
 8008e72:	f7f7 fbc9 	bl	8000608 <__aeabi_dmul>
 8008e76:	a340      	add	r3, pc, #256	; (adr r3, 8008f78 <__ieee754_pow+0x3a0>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e88:	f7f7 fa06 	bl	8000298 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4604      	mov	r4, r0
 8008e92:	460d      	mov	r5, r1
 8008e94:	4630      	mov	r0, r6
 8008e96:	4639      	mov	r1, r7
 8008e98:	f7f7 fa00 	bl	800029c <__adddf3>
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea2:	4632      	mov	r2, r6
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	f7f7 f9f7 	bl	8000298 <__aeabi_dsub>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 f9f1 	bl	8000298 <__aeabi_dsub>
 8008eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008eb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	f040 81eb 	bne.w	800929c <__ieee754_pow+0x6c4>
 8008ec6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008f80 <__ieee754_pow+0x3a8>
 8008eca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008ece:	2400      	movs	r4, #0
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ed8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008edc:	f7f7 f9dc 	bl	8000298 <__aeabi_dsub>
 8008ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eec:	4680      	mov	r8, r0
 8008eee:	4689      	mov	r9, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 fb88 	bl	8000608 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 f9cc 	bl	800029c <__adddf3>
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4689      	mov	r9, r1
 8008f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f10:	f7f7 fb7a 	bl	8000608 <__aeabi_dmul>
 8008f14:	460b      	mov	r3, r1
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4640      	mov	r0, r8
 8008f20:	e9cd 4500 	strd	r4, r5, [sp]
 8008f24:	f7f7 f9ba 	bl	800029c <__adddf3>
 8008f28:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <__ieee754_pow+0x3c4>)
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	460f      	mov	r7, r1
 8008f30:	468b      	mov	fp, r1
 8008f32:	f340 82f7 	ble.w	8009524 <__ieee754_pow+0x94c>
 8008f36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f3e:	4303      	orrs	r3, r0
 8008f40:	f000 81ea 	beq.w	8009318 <__ieee754_pow+0x740>
 8008f44:	a310      	add	r3, pc, #64	; (adr r3, 8008f88 <__ieee754_pow+0x3b0>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f4e:	f7f7 fb5b 	bl	8000608 <__aeabi_dmul>
 8008f52:	a30d      	add	r3, pc, #52	; (adr r3, 8008f88 <__ieee754_pow+0x3b0>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	e6d5      	b.n	8008d06 <__ieee754_pow+0x12e>
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w
 8008f60:	60000000 	.word	0x60000000
 8008f64:	3ff71547 	.word	0x3ff71547
 8008f68:	f85ddf44 	.word	0xf85ddf44
 8008f6c:	3e54ae0b 	.word	0x3e54ae0b
 8008f70:	55555555 	.word	0x55555555
 8008f74:	3fd55555 	.word	0x3fd55555
 8008f78:	652b82fe 	.word	0x652b82fe
 8008f7c:	3ff71547 	.word	0x3ff71547
 8008f80:	00000000 	.word	0x00000000
 8008f84:	bff00000 	.word	0xbff00000
 8008f88:	8800759c 	.word	0x8800759c
 8008f8c:	7e37e43c 	.word	0x7e37e43c
 8008f90:	3ff00000 	.word	0x3ff00000
 8008f94:	3fd00000 	.word	0x3fd00000
 8008f98:	3fe00000 	.word	0x3fe00000
 8008f9c:	408fffff 	.word	0x408fffff
 8008fa0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008fa4:	f04f 0200 	mov.w	r2, #0
 8008fa8:	da05      	bge.n	8008fb6 <__ieee754_pow+0x3de>
 8008faa:	4bd3      	ldr	r3, [pc, #844]	; (80092f8 <__ieee754_pow+0x720>)
 8008fac:	f7f7 fb2c 	bl	8000608 <__aeabi_dmul>
 8008fb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	1523      	asrs	r3, r4, #20
 8008fb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fbc:	4413      	add	r3, r2
 8008fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc0:	4bce      	ldr	r3, [pc, #824]	; (80092fc <__ieee754_pow+0x724>)
 8008fc2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008fc6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008fca:	429c      	cmp	r4, r3
 8008fcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008fd0:	dd08      	ble.n	8008fe4 <__ieee754_pow+0x40c>
 8008fd2:	4bcb      	ldr	r3, [pc, #812]	; (8009300 <__ieee754_pow+0x728>)
 8008fd4:	429c      	cmp	r4, r3
 8008fd6:	f340 815e 	ble.w	8009296 <__ieee754_pow+0x6be>
 8008fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fdc:	3301      	adds	r3, #1
 8008fde:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008fe4:	f04f 0a00 	mov.w	sl, #0
 8008fe8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fec:	930c      	str	r3, [sp, #48]	; 0x30
 8008fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ff0:	4bc4      	ldr	r3, [pc, #784]	; (8009304 <__ieee754_pow+0x72c>)
 8008ff2:	4413      	add	r3, r2
 8008ff4:	ed93 7b00 	vldr	d7, [r3]
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	ec53 2b17 	vmov	r2, r3, d7
 8008ffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009002:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009006:	f7f7 f947 	bl	8000298 <__aeabi_dsub>
 800900a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009016:	f7f7 f941 	bl	800029c <__adddf3>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	2000      	movs	r0, #0
 8009020:	49b9      	ldr	r1, [pc, #740]	; (8009308 <__ieee754_pow+0x730>)
 8009022:	f7f7 fc1b 	bl	800085c <__aeabi_ddiv>
 8009026:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4630      	mov	r0, r6
 8009030:	4639      	mov	r1, r7
 8009032:	f7f7 fae9 	bl	8000608 <__aeabi_dmul>
 8009036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800903a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800903e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009042:	2300      	movs	r3, #0
 8009044:	9302      	str	r3, [sp, #8]
 8009046:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800904a:	106d      	asrs	r5, r5, #1
 800904c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009050:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009054:	2200      	movs	r2, #0
 8009056:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	4614      	mov	r4, r2
 8009060:	461d      	mov	r5, r3
 8009062:	f7f7 fad1 	bl	8000608 <__aeabi_dmul>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	f7f7 f913 	bl	8000298 <__aeabi_dsub>
 8009072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	4620      	mov	r0, r4
 800907c:	4629      	mov	r1, r5
 800907e:	f7f7 f90b 	bl	8000298 <__aeabi_dsub>
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800908a:	f7f7 f905 	bl	8000298 <__aeabi_dsub>
 800908e:	4642      	mov	r2, r8
 8009090:	464b      	mov	r3, r9
 8009092:	f7f7 fab9 	bl	8000608 <__aeabi_dmul>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4630      	mov	r0, r6
 800909c:	4639      	mov	r1, r7
 800909e:	f7f7 f8fb 	bl	8000298 <__aeabi_dsub>
 80090a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80090a6:	f7f7 faaf 	bl	8000608 <__aeabi_dmul>
 80090aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	f7f7 faa7 	bl	8000608 <__aeabi_dmul>
 80090ba:	a37b      	add	r3, pc, #492	; (adr r3, 80092a8 <__ieee754_pow+0x6d0>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	4604      	mov	r4, r0
 80090c2:	460d      	mov	r5, r1
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	a379      	add	r3, pc, #484	; (adr r3, 80092b0 <__ieee754_pow+0x6d8>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 f8e5 	bl	800029c <__adddf3>
 80090d2:	4622      	mov	r2, r4
 80090d4:	462b      	mov	r3, r5
 80090d6:	f7f7 fa97 	bl	8000608 <__aeabi_dmul>
 80090da:	a377      	add	r3, pc, #476	; (adr r3, 80092b8 <__ieee754_pow+0x6e0>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	f7f7 f8dc 	bl	800029c <__adddf3>
 80090e4:	4622      	mov	r2, r4
 80090e6:	462b      	mov	r3, r5
 80090e8:	f7f7 fa8e 	bl	8000608 <__aeabi_dmul>
 80090ec:	a374      	add	r3, pc, #464	; (adr r3, 80092c0 <__ieee754_pow+0x6e8>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7f7 f8d3 	bl	800029c <__adddf3>
 80090f6:	4622      	mov	r2, r4
 80090f8:	462b      	mov	r3, r5
 80090fa:	f7f7 fa85 	bl	8000608 <__aeabi_dmul>
 80090fe:	a372      	add	r3, pc, #456	; (adr r3, 80092c8 <__ieee754_pow+0x6f0>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f8ca 	bl	800029c <__adddf3>
 8009108:	4622      	mov	r2, r4
 800910a:	462b      	mov	r3, r5
 800910c:	f7f7 fa7c 	bl	8000608 <__aeabi_dmul>
 8009110:	a36f      	add	r3, pc, #444	; (adr r3, 80092d0 <__ieee754_pow+0x6f8>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f8c1 	bl	800029c <__adddf3>
 800911a:	4622      	mov	r2, r4
 800911c:	4606      	mov	r6, r0
 800911e:	460f      	mov	r7, r1
 8009120:	462b      	mov	r3, r5
 8009122:	4620      	mov	r0, r4
 8009124:	4629      	mov	r1, r5
 8009126:	f7f7 fa6f 	bl	8000608 <__aeabi_dmul>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 fa69 	bl	8000608 <__aeabi_dmul>
 8009136:	4642      	mov	r2, r8
 8009138:	4604      	mov	r4, r0
 800913a:	460d      	mov	r5, r1
 800913c:	464b      	mov	r3, r9
 800913e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009142:	f7f7 f8ab 	bl	800029c <__adddf3>
 8009146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800914a:	f7f7 fa5d 	bl	8000608 <__aeabi_dmul>
 800914e:	4622      	mov	r2, r4
 8009150:	462b      	mov	r3, r5
 8009152:	f7f7 f8a3 	bl	800029c <__adddf3>
 8009156:	4642      	mov	r2, r8
 8009158:	4606      	mov	r6, r0
 800915a:	460f      	mov	r7, r1
 800915c:	464b      	mov	r3, r9
 800915e:	4640      	mov	r0, r8
 8009160:	4649      	mov	r1, r9
 8009162:	f7f7 fa51 	bl	8000608 <__aeabi_dmul>
 8009166:	2200      	movs	r2, #0
 8009168:	4b68      	ldr	r3, [pc, #416]	; (800930c <__ieee754_pow+0x734>)
 800916a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800916e:	f7f7 f895 	bl	800029c <__adddf3>
 8009172:	4632      	mov	r2, r6
 8009174:	463b      	mov	r3, r7
 8009176:	f7f7 f891 	bl	800029c <__adddf3>
 800917a:	9802      	ldr	r0, [sp, #8]
 800917c:	460d      	mov	r5, r1
 800917e:	4604      	mov	r4, r0
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 fa3e 	bl	8000608 <__aeabi_dmul>
 800918c:	2200      	movs	r2, #0
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	4b5e      	ldr	r3, [pc, #376]	; (800930c <__ieee754_pow+0x734>)
 8009194:	4620      	mov	r0, r4
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 f87e 	bl	8000298 <__aeabi_dsub>
 800919c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091a0:	f7f7 f87a 	bl	8000298 <__aeabi_dsub>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 f874 	bl	8000298 <__aeabi_dsub>
 80091b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b4:	f7f7 fa28 	bl	8000608 <__aeabi_dmul>
 80091b8:	4622      	mov	r2, r4
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	462b      	mov	r3, r5
 80091c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091c4:	f7f7 fa20 	bl	8000608 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 f864 	bl	800029c <__adddf3>
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4640      	mov	r0, r8
 80091de:	4649      	mov	r1, r9
 80091e0:	f7f7 f85c 	bl	800029c <__adddf3>
 80091e4:	9802      	ldr	r0, [sp, #8]
 80091e6:	a33c      	add	r3, pc, #240	; (adr r3, 80092d8 <__ieee754_pow+0x700>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	f7f7 fa0a 	bl	8000608 <__aeabi_dmul>
 80091f4:	4642      	mov	r2, r8
 80091f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091fa:	464b      	mov	r3, r9
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f84a 	bl	8000298 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f7f7 f844 	bl	8000298 <__aeabi_dsub>
 8009210:	a333      	add	r3, pc, #204	; (adr r3, 80092e0 <__ieee754_pow+0x708>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f9f7 	bl	8000608 <__aeabi_dmul>
 800921a:	a333      	add	r3, pc, #204	; (adr r3, 80092e8 <__ieee754_pow+0x710>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	4606      	mov	r6, r0
 8009222:	460f      	mov	r7, r1
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 f9ee 	bl	8000608 <__aeabi_dmul>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 f832 	bl	800029c <__adddf3>
 8009238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800923a:	4b35      	ldr	r3, [pc, #212]	; (8009310 <__ieee754_pow+0x738>)
 800923c:	4413      	add	r3, r2
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 f82b 	bl	800029c <__adddf3>
 8009246:	4604      	mov	r4, r0
 8009248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800924a:	460d      	mov	r5, r1
 800924c:	f7f7 f972 	bl	8000534 <__aeabi_i2d>
 8009250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009252:	4b30      	ldr	r3, [pc, #192]	; (8009314 <__ieee754_pow+0x73c>)
 8009254:	4413      	add	r3, r2
 8009256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	4622      	mov	r2, r4
 8009260:	462b      	mov	r3, r5
 8009262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009266:	f7f7 f819 	bl	800029c <__adddf3>
 800926a:	4642      	mov	r2, r8
 800926c:	464b      	mov	r3, r9
 800926e:	f7f7 f815 	bl	800029c <__adddf3>
 8009272:	4632      	mov	r2, r6
 8009274:	463b      	mov	r3, r7
 8009276:	f7f7 f811 	bl	800029c <__adddf3>
 800927a:	9802      	ldr	r0, [sp, #8]
 800927c:	4632      	mov	r2, r6
 800927e:	463b      	mov	r3, r7
 8009280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009284:	f7f7 f808 	bl	8000298 <__aeabi_dsub>
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	f7f7 f804 	bl	8000298 <__aeabi_dsub>
 8009290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009294:	e607      	b.n	8008ea6 <__ieee754_pow+0x2ce>
 8009296:	f04f 0a01 	mov.w	sl, #1
 800929a:	e6a5      	b.n	8008fe8 <__ieee754_pow+0x410>
 800929c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80092f0 <__ieee754_pow+0x718>
 80092a0:	e613      	b.n	8008eca <__ieee754_pow+0x2f2>
 80092a2:	bf00      	nop
 80092a4:	f3af 8000 	nop.w
 80092a8:	4a454eef 	.word	0x4a454eef
 80092ac:	3fca7e28 	.word	0x3fca7e28
 80092b0:	93c9db65 	.word	0x93c9db65
 80092b4:	3fcd864a 	.word	0x3fcd864a
 80092b8:	a91d4101 	.word	0xa91d4101
 80092bc:	3fd17460 	.word	0x3fd17460
 80092c0:	518f264d 	.word	0x518f264d
 80092c4:	3fd55555 	.word	0x3fd55555
 80092c8:	db6fabff 	.word	0xdb6fabff
 80092cc:	3fdb6db6 	.word	0x3fdb6db6
 80092d0:	33333303 	.word	0x33333303
 80092d4:	3fe33333 	.word	0x3fe33333
 80092d8:	e0000000 	.word	0xe0000000
 80092dc:	3feec709 	.word	0x3feec709
 80092e0:	dc3a03fd 	.word	0xdc3a03fd
 80092e4:	3feec709 	.word	0x3feec709
 80092e8:	145b01f5 	.word	0x145b01f5
 80092ec:	be3e2fe0 	.word	0xbe3e2fe0
 80092f0:	00000000 	.word	0x00000000
 80092f4:	3ff00000 	.word	0x3ff00000
 80092f8:	43400000 	.word	0x43400000
 80092fc:	0003988e 	.word	0x0003988e
 8009300:	000bb679 	.word	0x000bb679
 8009304:	08009c50 	.word	0x08009c50
 8009308:	3ff00000 	.word	0x3ff00000
 800930c:	40080000 	.word	0x40080000
 8009310:	08009c70 	.word	0x08009c70
 8009314:	08009c60 	.word	0x08009c60
 8009318:	a3b4      	add	r3, pc, #720	; (adr r3, 80095ec <__ieee754_pow+0xa14>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	4640      	mov	r0, r8
 8009320:	4649      	mov	r1, r9
 8009322:	f7f6 ffbb 	bl	800029c <__adddf3>
 8009326:	4622      	mov	r2, r4
 8009328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800932c:	462b      	mov	r3, r5
 800932e:	4630      	mov	r0, r6
 8009330:	4639      	mov	r1, r7
 8009332:	f7f6 ffb1 	bl	8000298 <__aeabi_dsub>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800933e:	f7f7 fbf3 	bl	8000b28 <__aeabi_dcmpgt>
 8009342:	2800      	cmp	r0, #0
 8009344:	f47f adfe 	bne.w	8008f44 <__ieee754_pow+0x36c>
 8009348:	4aa3      	ldr	r2, [pc, #652]	; (80095d8 <__ieee754_pow+0xa00>)
 800934a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800934e:	4293      	cmp	r3, r2
 8009350:	f340 810a 	ble.w	8009568 <__ieee754_pow+0x990>
 8009354:	151b      	asrs	r3, r3, #20
 8009356:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800935a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800935e:	fa4a f303 	asr.w	r3, sl, r3
 8009362:	445b      	add	r3, fp
 8009364:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009368:	4e9c      	ldr	r6, [pc, #624]	; (80095dc <__ieee754_pow+0xa04>)
 800936a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800936e:	4116      	asrs	r6, r2
 8009370:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009374:	2000      	movs	r0, #0
 8009376:	ea23 0106 	bic.w	r1, r3, r6
 800937a:	f1c2 0214 	rsb	r2, r2, #20
 800937e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009382:	fa4a fa02 	asr.w	sl, sl, r2
 8009386:	f1bb 0f00 	cmp.w	fp, #0
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4620      	mov	r0, r4
 8009390:	4629      	mov	r1, r5
 8009392:	bfb8      	it	lt
 8009394:	f1ca 0a00 	rsblt	sl, sl, #0
 8009398:	f7f6 ff7e 	bl	8000298 <__aeabi_dsub>
 800939c:	e9cd 0100 	strd	r0, r1, [sp]
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093a8:	f7f6 ff78 	bl	800029c <__adddf3>
 80093ac:	2000      	movs	r0, #0
 80093ae:	a378      	add	r3, pc, #480	; (adr r3, 8009590 <__ieee754_pow+0x9b8>)
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093c0:	4606      	mov	r6, r0
 80093c2:	460f      	mov	r7, r1
 80093c4:	4620      	mov	r0, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f6 ff66 	bl	8000298 <__aeabi_dsub>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4640      	mov	r0, r8
 80093d2:	4649      	mov	r1, r9
 80093d4:	f7f6 ff60 	bl	8000298 <__aeabi_dsub>
 80093d8:	a36f      	add	r3, pc, #444	; (adr r3, 8009598 <__ieee754_pow+0x9c0>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f7 f913 	bl	8000608 <__aeabi_dmul>
 80093e2:	a36f      	add	r3, pc, #444	; (adr r3, 80095a0 <__ieee754_pow+0x9c8>)
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	4680      	mov	r8, r0
 80093ea:	4689      	mov	r9, r1
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 f90a 	bl	8000608 <__aeabi_dmul>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4640      	mov	r0, r8
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7f6 ff4e 	bl	800029c <__adddf3>
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f6 ff46 	bl	800029c <__adddf3>
 8009410:	4632      	mov	r2, r6
 8009412:	463b      	mov	r3, r7
 8009414:	4680      	mov	r8, r0
 8009416:	4689      	mov	r9, r1
 8009418:	f7f6 ff3e 	bl	8000298 <__aeabi_dsub>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4620      	mov	r0, r4
 8009422:	4629      	mov	r1, r5
 8009424:	f7f6 ff38 	bl	8000298 <__aeabi_dsub>
 8009428:	4642      	mov	r2, r8
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	464b      	mov	r3, r9
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f7 f8e8 	bl	8000608 <__aeabi_dmul>
 8009438:	a35b      	add	r3, pc, #364	; (adr r3, 80095a8 <__ieee754_pow+0x9d0>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	4604      	mov	r4, r0
 8009440:	460d      	mov	r5, r1
 8009442:	f7f7 f8e1 	bl	8000608 <__aeabi_dmul>
 8009446:	a35a      	add	r3, pc, #360	; (adr r3, 80095b0 <__ieee754_pow+0x9d8>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f6 ff24 	bl	8000298 <__aeabi_dsub>
 8009450:	4622      	mov	r2, r4
 8009452:	462b      	mov	r3, r5
 8009454:	f7f7 f8d8 	bl	8000608 <__aeabi_dmul>
 8009458:	a357      	add	r3, pc, #348	; (adr r3, 80095b8 <__ieee754_pow+0x9e0>)
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f7f6 ff1d 	bl	800029c <__adddf3>
 8009462:	4622      	mov	r2, r4
 8009464:	462b      	mov	r3, r5
 8009466:	f7f7 f8cf 	bl	8000608 <__aeabi_dmul>
 800946a:	a355      	add	r3, pc, #340	; (adr r3, 80095c0 <__ieee754_pow+0x9e8>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff12 	bl	8000298 <__aeabi_dsub>
 8009474:	4622      	mov	r2, r4
 8009476:	462b      	mov	r3, r5
 8009478:	f7f7 f8c6 	bl	8000608 <__aeabi_dmul>
 800947c:	a352      	add	r3, pc, #328	; (adr r3, 80095c8 <__ieee754_pow+0x9f0>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f7f6 ff0b 	bl	800029c <__adddf3>
 8009486:	4622      	mov	r2, r4
 8009488:	462b      	mov	r3, r5
 800948a:	f7f7 f8bd 	bl	8000608 <__aeabi_dmul>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	f7f6 feff 	bl	8000298 <__aeabi_dsub>
 800949a:	4604      	mov	r4, r0
 800949c:	460d      	mov	r5, r1
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 f8af 	bl	8000608 <__aeabi_dmul>
 80094aa:	2200      	movs	r2, #0
 80094ac:	e9cd 0100 	strd	r0, r1, [sp]
 80094b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094b4:	4620      	mov	r0, r4
 80094b6:	4629      	mov	r1, r5
 80094b8:	f7f6 feee 	bl	8000298 <__aeabi_dsub>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094c4:	f7f7 f9ca 	bl	800085c <__aeabi_ddiv>
 80094c8:	4632      	mov	r2, r6
 80094ca:	4604      	mov	r4, r0
 80094cc:	460d      	mov	r5, r1
 80094ce:	463b      	mov	r3, r7
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7f7 f898 	bl	8000608 <__aeabi_dmul>
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	f7f6 fede 	bl	800029c <__adddf3>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4620      	mov	r0, r4
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7f6 fed6 	bl	8000298 <__aeabi_dsub>
 80094ec:	4642      	mov	r2, r8
 80094ee:	464b      	mov	r3, r9
 80094f0:	f7f6 fed2 	bl	8000298 <__aeabi_dsub>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	2000      	movs	r0, #0
 80094fa:	4939      	ldr	r1, [pc, #228]	; (80095e0 <__ieee754_pow+0xa08>)
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009504:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	da2f      	bge.n	800956e <__ieee754_pow+0x996>
 800950e:	4650      	mov	r0, sl
 8009510:	ec43 2b10 	vmov	d0, r2, r3
 8009514:	f000 f9c0 	bl	8009898 <scalbn>
 8009518:	ec51 0b10 	vmov	r0, r1, d0
 800951c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009520:	f7ff bbf1 	b.w	8008d06 <__ieee754_pow+0x12e>
 8009524:	4b2f      	ldr	r3, [pc, #188]	; (80095e4 <__ieee754_pow+0xa0c>)
 8009526:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800952a:	429e      	cmp	r6, r3
 800952c:	f77f af0c 	ble.w	8009348 <__ieee754_pow+0x770>
 8009530:	4b2d      	ldr	r3, [pc, #180]	; (80095e8 <__ieee754_pow+0xa10>)
 8009532:	440b      	add	r3, r1
 8009534:	4303      	orrs	r3, r0
 8009536:	d00b      	beq.n	8009550 <__ieee754_pow+0x978>
 8009538:	a325      	add	r3, pc, #148	; (adr r3, 80095d0 <__ieee754_pow+0x9f8>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009542:	f7f7 f861 	bl	8000608 <__aeabi_dmul>
 8009546:	a322      	add	r3, pc, #136	; (adr r3, 80095d0 <__ieee754_pow+0x9f8>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	f7ff bbdb 	b.w	8008d06 <__ieee754_pow+0x12e>
 8009550:	4622      	mov	r2, r4
 8009552:	462b      	mov	r3, r5
 8009554:	f7f6 fea0 	bl	8000298 <__aeabi_dsub>
 8009558:	4642      	mov	r2, r8
 800955a:	464b      	mov	r3, r9
 800955c:	f7f7 fada 	bl	8000b14 <__aeabi_dcmpge>
 8009560:	2800      	cmp	r0, #0
 8009562:	f43f aef1 	beq.w	8009348 <__ieee754_pow+0x770>
 8009566:	e7e7      	b.n	8009538 <__ieee754_pow+0x960>
 8009568:	f04f 0a00 	mov.w	sl, #0
 800956c:	e718      	b.n	80093a0 <__ieee754_pow+0x7c8>
 800956e:	4621      	mov	r1, r4
 8009570:	e7d4      	b.n	800951c <__ieee754_pow+0x944>
 8009572:	2000      	movs	r0, #0
 8009574:	491a      	ldr	r1, [pc, #104]	; (80095e0 <__ieee754_pow+0xa08>)
 8009576:	f7ff bb8f 	b.w	8008c98 <__ieee754_pow+0xc0>
 800957a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800957e:	f7ff bb8b 	b.w	8008c98 <__ieee754_pow+0xc0>
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7ff bb87 	b.w	8008c98 <__ieee754_pow+0xc0>
 800958a:	4693      	mov	fp, r2
 800958c:	f7ff bb98 	b.w	8008cc0 <__ieee754_pow+0xe8>
 8009590:	00000000 	.word	0x00000000
 8009594:	3fe62e43 	.word	0x3fe62e43
 8009598:	fefa39ef 	.word	0xfefa39ef
 800959c:	3fe62e42 	.word	0x3fe62e42
 80095a0:	0ca86c39 	.word	0x0ca86c39
 80095a4:	be205c61 	.word	0xbe205c61
 80095a8:	72bea4d0 	.word	0x72bea4d0
 80095ac:	3e663769 	.word	0x3e663769
 80095b0:	c5d26bf1 	.word	0xc5d26bf1
 80095b4:	3ebbbd41 	.word	0x3ebbbd41
 80095b8:	af25de2c 	.word	0xaf25de2c
 80095bc:	3f11566a 	.word	0x3f11566a
 80095c0:	16bebd93 	.word	0x16bebd93
 80095c4:	3f66c16c 	.word	0x3f66c16c
 80095c8:	5555553e 	.word	0x5555553e
 80095cc:	3fc55555 	.word	0x3fc55555
 80095d0:	c2f8f359 	.word	0xc2f8f359
 80095d4:	01a56e1f 	.word	0x01a56e1f
 80095d8:	3fe00000 	.word	0x3fe00000
 80095dc:	000fffff 	.word	0x000fffff
 80095e0:	3ff00000 	.word	0x3ff00000
 80095e4:	4090cbff 	.word	0x4090cbff
 80095e8:	3f6f3400 	.word	0x3f6f3400
 80095ec:	652b82fe 	.word	0x652b82fe
 80095f0:	3c971547 	.word	0x3c971547

080095f4 <__ieee754_sqrt>:
 80095f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f8:	4955      	ldr	r1, [pc, #340]	; (8009750 <__ieee754_sqrt+0x15c>)
 80095fa:	ec55 4b10 	vmov	r4, r5, d0
 80095fe:	43a9      	bics	r1, r5
 8009600:	462b      	mov	r3, r5
 8009602:	462a      	mov	r2, r5
 8009604:	d112      	bne.n	800962c <__ieee754_sqrt+0x38>
 8009606:	ee10 2a10 	vmov	r2, s0
 800960a:	ee10 0a10 	vmov	r0, s0
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fffa 	bl	8000608 <__aeabi_dmul>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4620      	mov	r0, r4
 800961a:	4629      	mov	r1, r5
 800961c:	f7f6 fe3e 	bl	800029c <__adddf3>
 8009620:	4604      	mov	r4, r0
 8009622:	460d      	mov	r5, r1
 8009624:	ec45 4b10 	vmov	d0, r4, r5
 8009628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962c:	2d00      	cmp	r5, #0
 800962e:	ee10 0a10 	vmov	r0, s0
 8009632:	4621      	mov	r1, r4
 8009634:	dc0f      	bgt.n	8009656 <__ieee754_sqrt+0x62>
 8009636:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800963a:	4330      	orrs	r0, r6
 800963c:	d0f2      	beq.n	8009624 <__ieee754_sqrt+0x30>
 800963e:	b155      	cbz	r5, 8009656 <__ieee754_sqrt+0x62>
 8009640:	ee10 2a10 	vmov	r2, s0
 8009644:	4620      	mov	r0, r4
 8009646:	4629      	mov	r1, r5
 8009648:	f7f6 fe26 	bl	8000298 <__aeabi_dsub>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	f7f7 f904 	bl	800085c <__aeabi_ddiv>
 8009654:	e7e4      	b.n	8009620 <__ieee754_sqrt+0x2c>
 8009656:	151b      	asrs	r3, r3, #20
 8009658:	d073      	beq.n	8009742 <__ieee754_sqrt+0x14e>
 800965a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800965e:	07dd      	lsls	r5, r3, #31
 8009660:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009664:	bf48      	it	mi
 8009666:	0fc8      	lsrmi	r0, r1, #31
 8009668:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800966c:	bf44      	itt	mi
 800966e:	0049      	lslmi	r1, r1, #1
 8009670:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009674:	2500      	movs	r5, #0
 8009676:	1058      	asrs	r0, r3, #1
 8009678:	0fcb      	lsrs	r3, r1, #31
 800967a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800967e:	0049      	lsls	r1, r1, #1
 8009680:	2316      	movs	r3, #22
 8009682:	462c      	mov	r4, r5
 8009684:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009688:	19a7      	adds	r7, r4, r6
 800968a:	4297      	cmp	r7, r2
 800968c:	bfde      	ittt	le
 800968e:	19bc      	addle	r4, r7, r6
 8009690:	1bd2      	suble	r2, r2, r7
 8009692:	19ad      	addle	r5, r5, r6
 8009694:	0fcf      	lsrs	r7, r1, #31
 8009696:	3b01      	subs	r3, #1
 8009698:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800969c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096a4:	d1f0      	bne.n	8009688 <__ieee754_sqrt+0x94>
 80096a6:	f04f 0c20 	mov.w	ip, #32
 80096aa:	469e      	mov	lr, r3
 80096ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096b0:	42a2      	cmp	r2, r4
 80096b2:	eb06 070e 	add.w	r7, r6, lr
 80096b6:	dc02      	bgt.n	80096be <__ieee754_sqrt+0xca>
 80096b8:	d112      	bne.n	80096e0 <__ieee754_sqrt+0xec>
 80096ba:	428f      	cmp	r7, r1
 80096bc:	d810      	bhi.n	80096e0 <__ieee754_sqrt+0xec>
 80096be:	2f00      	cmp	r7, #0
 80096c0:	eb07 0e06 	add.w	lr, r7, r6
 80096c4:	da42      	bge.n	800974c <__ieee754_sqrt+0x158>
 80096c6:	f1be 0f00 	cmp.w	lr, #0
 80096ca:	db3f      	blt.n	800974c <__ieee754_sqrt+0x158>
 80096cc:	f104 0801 	add.w	r8, r4, #1
 80096d0:	1b12      	subs	r2, r2, r4
 80096d2:	428f      	cmp	r7, r1
 80096d4:	bf88      	it	hi
 80096d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096da:	1bc9      	subs	r1, r1, r7
 80096dc:	4433      	add	r3, r6
 80096de:	4644      	mov	r4, r8
 80096e0:	0052      	lsls	r2, r2, #1
 80096e2:	f1bc 0c01 	subs.w	ip, ip, #1
 80096e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80096ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096f2:	d1dd      	bne.n	80096b0 <__ieee754_sqrt+0xbc>
 80096f4:	430a      	orrs	r2, r1
 80096f6:	d006      	beq.n	8009706 <__ieee754_sqrt+0x112>
 80096f8:	1c5c      	adds	r4, r3, #1
 80096fa:	bf13      	iteet	ne
 80096fc:	3301      	addne	r3, #1
 80096fe:	3501      	addeq	r5, #1
 8009700:	4663      	moveq	r3, ip
 8009702:	f023 0301 	bicne.w	r3, r3, #1
 8009706:	106a      	asrs	r2, r5, #1
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	07e9      	lsls	r1, r5, #31
 800970c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009710:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009714:	bf48      	it	mi
 8009716:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800971a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800971e:	461c      	mov	r4, r3
 8009720:	e780      	b.n	8009624 <__ieee754_sqrt+0x30>
 8009722:	0aca      	lsrs	r2, r1, #11
 8009724:	3815      	subs	r0, #21
 8009726:	0549      	lsls	r1, r1, #21
 8009728:	2a00      	cmp	r2, #0
 800972a:	d0fa      	beq.n	8009722 <__ieee754_sqrt+0x12e>
 800972c:	02d6      	lsls	r6, r2, #11
 800972e:	d50a      	bpl.n	8009746 <__ieee754_sqrt+0x152>
 8009730:	f1c3 0420 	rsb	r4, r3, #32
 8009734:	fa21 f404 	lsr.w	r4, r1, r4
 8009738:	1e5d      	subs	r5, r3, #1
 800973a:	4099      	lsls	r1, r3
 800973c:	4322      	orrs	r2, r4
 800973e:	1b43      	subs	r3, r0, r5
 8009740:	e78b      	b.n	800965a <__ieee754_sqrt+0x66>
 8009742:	4618      	mov	r0, r3
 8009744:	e7f0      	b.n	8009728 <__ieee754_sqrt+0x134>
 8009746:	0052      	lsls	r2, r2, #1
 8009748:	3301      	adds	r3, #1
 800974a:	e7ef      	b.n	800972c <__ieee754_sqrt+0x138>
 800974c:	46a0      	mov	r8, r4
 800974e:	e7bf      	b.n	80096d0 <__ieee754_sqrt+0xdc>
 8009750:	7ff00000 	.word	0x7ff00000

08009754 <fabs>:
 8009754:	ec51 0b10 	vmov	r0, r1, d0
 8009758:	ee10 2a10 	vmov	r2, s0
 800975c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009760:	ec43 2b10 	vmov	d0, r2, r3
 8009764:	4770      	bx	lr

08009766 <finite>:
 8009766:	ee10 3a90 	vmov	r3, s1
 800976a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800976e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009772:	0fc0      	lsrs	r0, r0, #31
 8009774:	4770      	bx	lr

08009776 <matherr>:
 8009776:	2000      	movs	r0, #0
 8009778:	4770      	bx	lr
 800977a:	0000      	movs	r0, r0
 800977c:	0000      	movs	r0, r0
	...

08009780 <nan>:
 8009780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009788 <nan+0x8>
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	00000000 	.word	0x00000000
 800978c:	7ff80000 	.word	0x7ff80000

08009790 <rint>:
 8009790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009792:	ec51 0b10 	vmov	r0, r1, d0
 8009796:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800979a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800979e:	2e13      	cmp	r6, #19
 80097a0:	460b      	mov	r3, r1
 80097a2:	ee10 4a10 	vmov	r4, s0
 80097a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80097aa:	dc56      	bgt.n	800985a <rint+0xca>
 80097ac:	2e00      	cmp	r6, #0
 80097ae:	da2b      	bge.n	8009808 <rint+0x78>
 80097b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80097b4:	4302      	orrs	r2, r0
 80097b6:	d023      	beq.n	8009800 <rint+0x70>
 80097b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80097bc:	4302      	orrs	r2, r0
 80097be:	4254      	negs	r4, r2
 80097c0:	4314      	orrs	r4, r2
 80097c2:	0c4b      	lsrs	r3, r1, #17
 80097c4:	0b24      	lsrs	r4, r4, #12
 80097c6:	045b      	lsls	r3, r3, #17
 80097c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80097cc:	ea44 0103 	orr.w	r1, r4, r3
 80097d0:	460b      	mov	r3, r1
 80097d2:	492f      	ldr	r1, [pc, #188]	; (8009890 <rint+0x100>)
 80097d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80097d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80097dc:	4602      	mov	r2, r0
 80097de:	4639      	mov	r1, r7
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7f6 fd5b 	bl	800029c <__adddf3>
 80097e6:	e9cd 0100 	strd	r0, r1, [sp]
 80097ea:	463b      	mov	r3, r7
 80097ec:	4632      	mov	r2, r6
 80097ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097f2:	f7f6 fd51 	bl	8000298 <__aeabi_dsub>
 80097f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80097fe:	4639      	mov	r1, r7
 8009800:	ec41 0b10 	vmov	d0, r0, r1
 8009804:	b003      	add	sp, #12
 8009806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009808:	4a22      	ldr	r2, [pc, #136]	; (8009894 <rint+0x104>)
 800980a:	4132      	asrs	r2, r6
 800980c:	ea01 0702 	and.w	r7, r1, r2
 8009810:	4307      	orrs	r7, r0
 8009812:	d0f5      	beq.n	8009800 <rint+0x70>
 8009814:	0852      	lsrs	r2, r2, #1
 8009816:	4011      	ands	r1, r2
 8009818:	430c      	orrs	r4, r1
 800981a:	d00b      	beq.n	8009834 <rint+0xa4>
 800981c:	ea23 0202 	bic.w	r2, r3, r2
 8009820:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009824:	2e13      	cmp	r6, #19
 8009826:	fa43 f306 	asr.w	r3, r3, r6
 800982a:	bf0c      	ite	eq
 800982c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009830:	2400      	movne	r4, #0
 8009832:	4313      	orrs	r3, r2
 8009834:	4916      	ldr	r1, [pc, #88]	; (8009890 <rint+0x100>)
 8009836:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800983a:	4622      	mov	r2, r4
 800983c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009840:	4620      	mov	r0, r4
 8009842:	4629      	mov	r1, r5
 8009844:	f7f6 fd2a 	bl	800029c <__adddf3>
 8009848:	e9cd 0100 	strd	r0, r1, [sp]
 800984c:	4622      	mov	r2, r4
 800984e:	462b      	mov	r3, r5
 8009850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009854:	f7f6 fd20 	bl	8000298 <__aeabi_dsub>
 8009858:	e7d2      	b.n	8009800 <rint+0x70>
 800985a:	2e33      	cmp	r6, #51	; 0x33
 800985c:	dd07      	ble.n	800986e <rint+0xde>
 800985e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009862:	d1cd      	bne.n	8009800 <rint+0x70>
 8009864:	ee10 2a10 	vmov	r2, s0
 8009868:	f7f6 fd18 	bl	800029c <__adddf3>
 800986c:	e7c8      	b.n	8009800 <rint+0x70>
 800986e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009872:	f04f 32ff 	mov.w	r2, #4294967295
 8009876:	40f2      	lsrs	r2, r6
 8009878:	4210      	tst	r0, r2
 800987a:	d0c1      	beq.n	8009800 <rint+0x70>
 800987c:	0852      	lsrs	r2, r2, #1
 800987e:	4210      	tst	r0, r2
 8009880:	bf1f      	itttt	ne
 8009882:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009886:	ea20 0202 	bicne.w	r2, r0, r2
 800988a:	4134      	asrne	r4, r6
 800988c:	4314      	orrne	r4, r2
 800988e:	e7d1      	b.n	8009834 <rint+0xa4>
 8009890:	08009c80 	.word	0x08009c80
 8009894:	000fffff 	.word	0x000fffff

08009898 <scalbn>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	ec55 4b10 	vmov	r4, r5, d0
 800989e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80098a2:	4606      	mov	r6, r0
 80098a4:	462b      	mov	r3, r5
 80098a6:	b9aa      	cbnz	r2, 80098d4 <scalbn+0x3c>
 80098a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098ac:	4323      	orrs	r3, r4
 80098ae:	d03b      	beq.n	8009928 <scalbn+0x90>
 80098b0:	4b31      	ldr	r3, [pc, #196]	; (8009978 <scalbn+0xe0>)
 80098b2:	4629      	mov	r1, r5
 80098b4:	2200      	movs	r2, #0
 80098b6:	ee10 0a10 	vmov	r0, s0
 80098ba:	f7f6 fea5 	bl	8000608 <__aeabi_dmul>
 80098be:	4b2f      	ldr	r3, [pc, #188]	; (800997c <scalbn+0xe4>)
 80098c0:	429e      	cmp	r6, r3
 80098c2:	4604      	mov	r4, r0
 80098c4:	460d      	mov	r5, r1
 80098c6:	da12      	bge.n	80098ee <scalbn+0x56>
 80098c8:	a327      	add	r3, pc, #156	; (adr r3, 8009968 <scalbn+0xd0>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe9b 	bl	8000608 <__aeabi_dmul>
 80098d2:	e009      	b.n	80098e8 <scalbn+0x50>
 80098d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80098d8:	428a      	cmp	r2, r1
 80098da:	d10c      	bne.n	80098f6 <scalbn+0x5e>
 80098dc:	ee10 2a10 	vmov	r2, s0
 80098e0:	4620      	mov	r0, r4
 80098e2:	4629      	mov	r1, r5
 80098e4:	f7f6 fcda 	bl	800029c <__adddf3>
 80098e8:	4604      	mov	r4, r0
 80098ea:	460d      	mov	r5, r1
 80098ec:	e01c      	b.n	8009928 <scalbn+0x90>
 80098ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098f2:	460b      	mov	r3, r1
 80098f4:	3a36      	subs	r2, #54	; 0x36
 80098f6:	4432      	add	r2, r6
 80098f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80098fc:	428a      	cmp	r2, r1
 80098fe:	dd0b      	ble.n	8009918 <scalbn+0x80>
 8009900:	ec45 4b11 	vmov	d1, r4, r5
 8009904:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009970 <scalbn+0xd8>
 8009908:	f000 f83c 	bl	8009984 <copysign>
 800990c:	a318      	add	r3, pc, #96	; (adr r3, 8009970 <scalbn+0xd8>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	ec51 0b10 	vmov	r0, r1, d0
 8009916:	e7da      	b.n	80098ce <scalbn+0x36>
 8009918:	2a00      	cmp	r2, #0
 800991a:	dd08      	ble.n	800992e <scalbn+0x96>
 800991c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009920:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009924:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009928:	ec45 4b10 	vmov	d0, r4, r5
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009932:	da0d      	bge.n	8009950 <scalbn+0xb8>
 8009934:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009938:	429e      	cmp	r6, r3
 800993a:	ec45 4b11 	vmov	d1, r4, r5
 800993e:	dce1      	bgt.n	8009904 <scalbn+0x6c>
 8009940:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009968 <scalbn+0xd0>
 8009944:	f000 f81e 	bl	8009984 <copysign>
 8009948:	a307      	add	r3, pc, #28	; (adr r3, 8009968 <scalbn+0xd0>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	e7e0      	b.n	8009912 <scalbn+0x7a>
 8009950:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009954:	3236      	adds	r2, #54	; 0x36
 8009956:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800995a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	2200      	movs	r2, #0
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <scalbn+0xe8>)
 8009966:	e7b2      	b.n	80098ce <scalbn+0x36>
 8009968:	c2f8f359 	.word	0xc2f8f359
 800996c:	01a56e1f 	.word	0x01a56e1f
 8009970:	8800759c 	.word	0x8800759c
 8009974:	7e37e43c 	.word	0x7e37e43c
 8009978:	43500000 	.word	0x43500000
 800997c:	ffff3cb0 	.word	0xffff3cb0
 8009980:	3c900000 	.word	0x3c900000

08009984 <copysign>:
 8009984:	ec51 0b10 	vmov	r0, r1, d0
 8009988:	ee11 0a90 	vmov	r0, s3
 800998c:	ee10 2a10 	vmov	r2, s0
 8009990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009998:	ea41 0300 	orr.w	r3, r1, r0
 800999c:	ec43 2b10 	vmov	d0, r2, r3
 80099a0:	4770      	bx	lr
	...

080099a4 <_init>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr

080099b0 <_fini>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr
